<object clone="/base/obj/thing" owner="abiwan">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Allegory:Props:Drinks:Containers:PintGlass)"/>
    <Base:Bulk immobile="false" mass="0.3" density="1.1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="true"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="beer"/>
            <Base:SName sname="ale"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="beers"/>
            <Base:PName pname="ales"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="ale"/>
          <Base:Adjective adjective="beer"/>
          <Base:Adjective adjective="summer"/>
        </Base:Adjectives>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="10"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:trait:container">
         "tankard"
      </Core:Property>
      <Core:Property property="export:trait:liquid">
         "summer ale"
      </Core:Property>
      <Core:Property property="export:trait:material">
         "pewter"
      </Core:Property>
      <Core:Property property="export:trait:objecttype">
         "urdrink"
      </Core:Property>
      <Core:Property property="export:trait:quantity">
         20
      </Core:Property>
      <Core:Property property="export:trait:smell">
         "subtle citrus and current berries"
      </Core:Property>
      <Core:Property property="export:trait:taste">
         "at first smooth and light with a slight fruity flavor followed with a sharp citrus kick"
      </Core:Property>
      <Core:Property property="merry:react-pre:drink">
         X[M] if(\$this."trait:quantity" == 1 \|\| \$this."trait:quantity" \>= 1) \{              
EmitTo(\$actor, "You drink " +\$this."trait:liquid"+ " from your " +\$this."trait:material"+ " " +\$this."trait:container"+ " You are refreshed by its light fruity flavor.");              
EmitIn(\$actor."base:environment", Describe(\$actor)+ " drinks " +\$this."trait:liquid"+ " from " +\$actor."base:possessive"+ " " +\$this."trait:material"+ " " +\$this."trait:container"+ ".", \$actor);              
\$this."trait:quantity" -= 2;              
if(\$this."trait:quantity" == 0) \{             
\$this."trait:liquid" = "empty";            
Set(\$this, "details:liquid:hidden", TRUE);           
return FALSE;             
\}             
return FALSE;              
\} else \{          
EmitTo(\$actor, "Your " +\$this."trait:material"+ " " +\$this."trait:container"+ " is empty.");         
return FALSE;              
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:empty-dob">
         X[M] if(\$this."trait:quantity" == 1 \|\| \$this."trait:quantity" \>= 1) \{              
EmitTo(\$actor, "You empty the " +\$this."trait:liquid"+ " from your " +\$this."trait:material"+ " " +\$this."trait:container"+ ".");              
EmitIn(\$actor."base:environment", Describe(\$actor)+ " empties the " +\$this."trait:liquid"+ " from " +\$actor."base:possessive"+ " " +\$this."trait:material"+ " " +\$this."trait:container"+ ".", \$actor);                     
\$this."trait:quantity" = 0;       
\$this."trait:liquid" = "empty";            
Set(\$this, "details:liquid:hidden", TRUE);       
return FALSE;              
\} else \{          
EmitTo(\$actor, "Your " +\$this."trait:material"+ " " +\$this."trait:container"+ " is empty.");         
return FALSE;              
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:gulp-iob">
         X[M] if(\$this."trait:quantity" == 1 \|\| \$this."trait:quantity" \>= 1) \{              
EmitTo(\$actor, "You gulp " +\$this."trait:liquid"+ " from your " +\$this."trait:material"+ " " +\$this."trait:container"+ " and miss the taste altogether but the citrus kick makes your whole face pucker up.");              
EmitIn(\$actor."base:environment", Describe(\$actor)+ " gulps " +\$this."trait:liquid"+ " from " +\$actor."base:possessive"+ " " +\$this."trait:material"+ " " +\$this."trait:container"+ ".", \$actor);              
\$this."trait:quantity" -= 4;              
if(\$this."trait:quantity" == 0) \{             
\$this."trait:liquid" = "empty";            
Set(\$this, "details:liquid:hidden", TRUE);           
return FALSE;             
\}             
return FALSE;              
\} else \{          
EmitTo(\$actor, "Your " +\$this."trait:material"+ " " +\$this."trait:container"+ " is empty.");         
return FALSE;              
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:guzzle-iob">
         X[M] if(\$this."trait:quantity" == 1 \|\| \$this."trait:quantity" \>= 1) \{              
EmitTo(\$actor, "You guzzle " +\$this."trait:liquid"+ " from your " +\$this."trait:material"+ " " +\$this."trait:container"+ ".");              
EmitIn(\$actor."base:environment", Describe(\$actor)+ " guzzles " +\$this."trait:liquid"+ " from " +\$actor."base:possessive"+ " " +\$this."trait:material"+ " " +\$this."trait:container"+ " making them belch repeatedly.", \$actor);                     
\$this."trait:quantity" = 0;       
\$this."trait:liquid" = "empty";            
Set(\$this, "details:liquid:hidden", TRUE);       
return FALSE;              
\} else \{          
EmitTo(\$actor, "Your " +\$this."trait:material"+ " " +\$this."trait:container"+ " is empty.");         
return FALSE;              
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:quaff-iob">
         X[M] if(\$this."trait:quantity" == 1 \|\| \$this."trait:quantity" \>= 1) \{              
EmitTo(\$actor, "You quaff " +\$this."trait:liquid"+ " from your " +\$this."trait:material"+ " " +\$this."trait:container"+ ".");              
EmitIn(\$actor."base:environment", Describe(\$actor)+ " quaffs " +\$this."trait:liquid"+ " from " +\$actor."base:possessive"+ " " +\$this."trait:material"+ " " +\$this."trait:container"+ ".", \$actor);              
\$this."trait:quantity" -= 4;              
if(\$this."trait:quantity" == 0) \{             
\$this."trait:liquid" = "empty";            
Set(\$this, "details:liquid:hidden", TRUE);           
return FALSE;             
\}             
return FALSE;              
\} else \{          
EmitTo(\$actor, "Your " +\$this."trait:material"+ " " +\$this."trait:container"+ " is empty.");         
return FALSE;              
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:savor-dob">
         X[M] if(\$this."trait:quantity" == 1 \|\| \$this."trait:quantity" \>= 1) \{              
EmitTo(\$actor, "You savor the " +\$this."trait:liquid"+ " from your " +\$this."trait:material"+ " " +\$this."trait:container"+ ", the mellow current mixing delightfully with the light citrus flavor.");              
EmitIn(\$actor."base:environment", Describe(\$actor)+ " savors the " +\$this."trait:liquid"+ " from " +\$actor."base:possessive"+ " " +\$this."trait:material"+ " " +\$this."trait:container"+ ".", \$actor);              
\$this."trait:quantity" -= 1;              
if(\$this."trait:quantity" == 0) \{             
\$this."trait:liquid" = "empty";            
Set(\$this, "details:liquid:hidden", TRUE);           
return FALSE;             
\}             
return FALSE;              
\} else \{          
EmitTo(\$actor, "Your " +\$this."trait:material"+ " " +\$this."trait:container"+ " is empty.");         
return FALSE;              
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:savour-dob">
         X[M] if(\$this."trait:quantity" == 1 \|\| \$this."trait:quantity" \>= 1) \{              
EmitTo(\$actor, "You savour the " +\$this."trait:liquid"+ " from your " +\$this."trait:material"+ " " +\$this."trait:container"+ ".");              
EmitIn(\$actor."base:environment", Describe(\$actor)+ " savours the " +\$this."trait:liquid"+ " from " +\$actor."base:possessive"+ " " +\$this."trait:material"+ " " +\$this."trait:container"+ ".", \$actor);              
\$this."trait:quantity" -= 1;              
if(\$this."trait:quantity" == 0) \{             
\$this."trait:liquid" = "empty";            
Set(\$this, "details:liquid:hidden", TRUE);           
return FALSE;             
\}             
return FALSE;              
\} else \{          
EmitTo(\$actor, "Your " +\$this."trait:material"+ " " +\$this."trait:container"+ " is empty.");         
return FALSE;              
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:sip-iob">
         X[M] if(\$this."trait:quantity" == 1 \|\| \$this."trait:quantity" \>= 1) \{              
EmitTo(\$actor, "You sip " +\$this."trait:liquid"+ " from your " +\$this."trait:material"+ " " +\$this."trait:container"+ ".  Your tongue wishes it could have truly savored the light, fresh ale.");              
EmitIn(\$actor."base:environment", Describe(\$actor)+ " sips " +\$this."trait:liquid"+ " from " +\$actor."base:possessive"+ " " +\$this."trait:material"+ " " +\$this."trait:container"+ ".", \$actor);              
\$this."trait:quantity" -= 1;              
if(\$this."trait:quantity" == 0) \{             
\$this."trait:liquid" = "empty";            
Set(\$this, "details:liquid:hidden", TRUE);           
return FALSE;             
\}             
return FALSE;              
\} else \{          
EmitTo(\$actor, "Your " +\$this."trait:material"+ " " +\$this."trait:container"+ " is empty.");         
return FALSE;              
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:slurp-iob">
         X[M] if(\$this."trait:quantity" == 1 \|\| \$this."trait:quantity" \>= 1) \{              
EmitTo(\$actor, "You slurp " +\$this."trait:liquid"+ " from your " +\$this."trait:material"+ " " +\$this."trait:container"+ ", dribbling down your chin miserably.");              
EmitIn(\$actor."base:environment", Describe(\$actor)+ " slurps " +\$this."trait:liquid"+ " from " +\$actor."base:possessive"+ " " +\$this."trait:material"+ " " +\$this."trait:container"+ ", dribbling down their chin miserably.", \$actor);              
\$this."trait:quantity" -= 2;              
if(\$this."trait:quantity" == 0) \{             
\$this."trait:liquid" = "empty";            
Set(\$this, "details:liquid:hidden", TRUE);           
return FALSE;             
\}             
return FALSE;              
\} else \{          
EmitTo(\$actor, "Your " +\$this."trait:material"+ " " +\$this."trait:container"+ " is empty.");         
return FALSE;              
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:swill-iob">
         X[M] if(\$this."trait:quantity" == 1 \|\| \$this."trait:quantity" \>= 1) \{              
EmitTo(\$actor, "You swill " +\$this."trait:liquid"+ " from your " +\$this."trait:material"+ " " +\$this."trait:container"+ ".");              
EmitIn(\$actor."base:environment", Describe(\$actor)+ " swills " +\$this."trait:liquid"+ " from " +\$actor."base:possessive"+ " " +\$this."trait:material"+ " " +\$this."trait:container"+ ".", \$actor);              
\$this."trait:quantity" -= 4;              
if(\$this."trait:quantity" == 0) \{             
\$this."trait:liquid" = "empty";            
Set(\$this, "details:liquid:hidden", TRUE);           
return FALSE;             
\}             
return FALSE;              
\} else \{          
EmitTo(\$actor, "Your " +\$this."trait:material"+ " " +\$this."trait:container"+ " is empty.");         
return FALSE;              
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:taste-dob">
         X[M] if(\$this."trait:quantity" == 1 \|\| \$this."trait:quantity" \>= 1) \{              
EmitTo(\$actor, "You taste the " +\$this."trait:liquid"+ " from your " +\$this."trait:material"+ " " +\$this."trait:container"+ ".  It tastes refreshingly of citrus and current berries.");              
EmitIn(\$actor."base:environment", Describe(\$actor)+ " tastes the " +\$this."trait:liquid"+ " from " +\$actor."base:possessive"+ " " +\$this."trait:material"+ " " +\$this."trait:container"+ ".", \$actor);              
\$this."trait:quantity" -= 1;              
if(\$this."trait:quantity" == 0) \{             
\$this."trait:liquid" = "empty";            
Set(\$this, "details:liquid:hidden", TRUE);           
return FALSE;             
\}             
return FALSE;              
\} else \{          
EmitTo(\$actor, "Your " +\$this."trait:material"+ " " +\$this."trait:container"+ " is empty.");         
return FALSE;              
\}
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:container">
         X[M] Call(\$\{Allegory:Props:Crafting:UrCrafting\}, "replaceadj", \$object: this);               
Call(\$\{Allegory:Props:Crafting:UrCrafting\}, "replacesname", \$object: this);               
return TRUE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:liquid">
         X[M] return Call(\$\{Allegory:Props:Crafting:UrCrafting\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:material">
         X[M] return Call(\$\{Allegory:Props:Crafting:UrCrafting\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1138739804, "tunk_bodin", "X", 1138740643, "tunk_bodin", "X", 1138740901, "tunk_bodin", "X", 1138741707, "tunk_bodin", "X", 1138741968, "tunk_bodin", "X", 1138741996, "tunk_bodin", "X", 1138742085, "tunk_bodin", "X", 1138742303, "tunk_bodin", "X", 1138742339, "tunk_bodin", "X", 1138742428, "tunk_bodin", "E", 1138742480, "tunk_bodin", "X", 1138742580, "tunk_bodin", "X", 1138742625, "tunk_bodin", "X", 1138743235, "tunk_bodin", "X", 1138743486, "tunk_bodin", "X", 1138743530, "tunk_bodin", "X", 1138743614, "tunk_bodin", "X", 1138743669, "tunk_bodin", "X", 1138743708, "tunk_bodin", "X", 1138743775, "tunk_bodin", "X", 1138819992, "abiwan", "E", 1138821972, "abiwan", "E", 1138824945, "abiwan", "K", 1138825166, "abiwan", "K", 1430787744, "slurpeeslurp", "R", 1600724332, "sendnoodlez", "R", 1600724409, "sendnoodlez", "E", 1600724412, "sendnoodlez", "E", 1600724478, "sendnoodlez", "X" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
