<object clone="/base/obj/thing" owner="SkotOS">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="container"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="containers"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             {? | $[Int($this."trait:quantity") == 0] | empty $(this.trait:container:type) | $(this.trait:container:type) of $[::resolve_desc($type: "brief")] }
          </Base:Description>
          <Base:Description type="examine">
             $(this.trait:examine) {? | $[$this."trait:quantity" == 0] | It is empty. | It holds $[::resolve_desc($type: "brief")]. $[::resolve_desc($type: "examine");] There {? | $[$this."trait:quantity" == 1] | is one serving left. | are $[desc_cardinal(Int($this."trait:quantity"))] servings left. }}
          </Base:Description>
          <Base:Description type="look">
             $(this.trait:look) {? | $[Int($this."trait:quantity") == 0] | It is empty. | It holds $[::resolve_desc($type: "brief")]. $[::resolve_desc($type: "examine");] There {? | $[$this."trait:quantity" == 1] | is one serving left. | are $[desc_cardinal($this."trait:quantity")] servings left. }}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="merry:lib:pour">
         X[M] if(\$this."trait:quantity" \<= 0) \{
    EmitTo(\$actor, "There is nothing left.");
    return FALSE;
\}

if(!\$this."trait:spawn") \{
    EmitTo(\$actor, "There is nothing left.");
    return FALSE;
\}

\$glass = \$this."trait:spawn";

\$new = Spawn(\$glass);
\$new."base:environment" = \$actor;

if(Int(\$this."trait:quantity") \> 1) \{
    EmitTo(\$actor, TAG("You pour some " + ::resolve_desc(\$type: "brief") + " into " + Describe(\$new, nil, nil, STYLE_NONPOSS) + ".", "social:first"));
    EmitIn(\$actor."base:environment", TAG(Describe(\$actor) + " pours some " + ::resolve_desc(\$type: "brief") + " into " + Describe(\$new, nil, nil, STYLE_NONPOSS) + ".", "social:third"), \$actor);
\} else \{
    EmitTo(\$actor, TAG("You pour the last of the " + ::resolve_desc(\$type: "brief") + " into " + Describe(\$new, nil, nil, STYLE_NONPOSS) + ".", "social:first"));
    EmitIn(\$actor."base:environment", TAG(Describe(\$actor) + " pours the last of the " + ::resolve_desc(\$type: "brief") + " into " + Describe(\$new, nil, nil, STYLE_NONPOSS) + ".", "social:third"), \$actor);
\}

if(!\$new."base:environment") \{
    EmitTo(\$actor, "You put down " + Describe(\$new, nil, nil, STYLE_NONPOSS) + " as you are carrying too much to hold it.");
    return TRUE;
\}

\$this."trait:quantity" = Int(\$this."trait:quantity") - 1;

return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:resolve_desc">
         X[M] if(!\$this."trait:spawn") \{
    if(\$type == "brief") return "nothing";
    return "";
\}

\$glass = \$this."trait:spawn";

if(!\$glass."sys:shared:consume:last-content") \{
    if(\$type == "brief") return "nothing";
    return "";
\}

\$liquid = \$glass."sys:shared:consume:last-content";

if(\$type == "brief") \{
    return UnSAM(\$liquid."details:default:description:name");
\}

if(\$type == "look") \{
    return UnSAM(\$liquid."details:default:description:look");
\}

if(\$type == "examine") \{
    return UnSAM(\$liquid."details:default:description:examine");
\}

return "";
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:quantity">
         X[M] if(Int(\$this."trait:quantity") \< 0) \{
    \$this."trait:quantity" = 0;
\}

if(Int(\$this."trait:quantity") \<= 0) \{
    \$this."trait:trash" = 1;
\}
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1600621410, "jominey", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
