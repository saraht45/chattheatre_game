<object clone="/base/obj/thing" owner="jominey">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Ironclaw:Props:Food/Drink:Craftable:UrCraftableLitre)"/>
    <Base:Bulk immobile="false" mass="1" density="2.5"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="1"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="false" under="false" on="false" inside="false" near="true" over="false" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="kettle"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="kettles"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="metal"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="examine">
             A{? | $(this.trait:gem:material) | bejeweled |}$(this.trait:color) $(this.trait:material) $(this.trait:brief). $(this.trait:examine). {? | $(this.details:gempieces:snames) | Remarkable $(this.trait:gem:color) $(this.trait:gem:material)s are set in the metal.} $(this.trait:engraving) <makers-mark/> <sbr/> <quality-full/>
          </Base:Description>
          <Base:Description type="look">
             A{? | $(this.trait:gem:material) | bejeweled |}$(this.trait:color) $(this.trait:material) $(this.trait:brief). {? | $(this.details:gempieces:snames) | Remarkable $(this.trait:gem:color) $(this.trait:gem:material)s are set in the metal.}
          </Base:Description>
          <Base:Description type="type">
             {? | $(this.trait:gem:material) | bejeweled |}{? | $(this.trait:engraving) | {? | $(this.trait:engraving:pattern) | $(this.trait:engraving:pattern)} engraved } $(this.trait:color) $(this.trait:material) $(this.trait:brief)
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="gempieces" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             the {? equal | $(this.trait:gem:color) | none | gaudy | $(this.trait:gem:color) }{? equal | $(this.trait:gem:material) | none | gaudy | $(this.trait:gem:material)s } adorning the $(this.details:default:descriptions:brief)
          </Base:Description>
          <Base:Description type="look">
             A fine assortment of {? equal | $(this.trait:gem:color) | none | gaudy | $(this.trait:gem:color) } {? equal | $(this.trait:gem:material) | none | gaudy | $(this.trait:gem:material)s } adorning this $(this.details:default:descriptions:brief).
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:alteration:add:default:gempieces">
         ([ "adj-prop":(\{ "trait:color", "trait:material" \}), "names":(\{ (\{ "sname", "gem" \}), (\{ "pname", "gems" \}) \}), "properties":(\{ (\{ "trait:color", "trait:gem:color" \}), (\{ "trait:material", "trait:gem:material" \}), (\{ "trait:gem:type", "trait:gem:type" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:trait:accepts">
         (\{ "teabag", "fruit", "seasoning" \})
      </Core:Property>
      <Core:Property property="export:trait:brief">
         "kettle"
      </Core:Property>
      <Core:Property property="export:trait:examine">
         "This bulbous vessel is used to brew hot drinks and features a lid, handle, and spout"
      </Core:Property>
      <Core:Property property="export:trait:objecttype">
         "kettle"
      </Core:Property>
      <Core:Property property="merry:react-post:add-iob">
         X[M] return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:empty-dob">
         X[M] \$this."trait:contents" = nil;

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:add-iob">
         X[M] \$kettle = Describe(\$this, nil, nil, STYLE_NONPOSS);

if(!\$dob \|\| sizeof(\$dob) \> 1) \{
    return TRUE;
\}

\$addition = NRefOb(\$dob[0]);

if(\$addition."trait:objecttype" == "gempieces") \{
    return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "add", \$addition: \$dob, \$target: \$iob);
\}

if(!member(\$addition."trait:objecttype", \$this."trait:accepts")) \{
    EmitTo(\$actor, "You cannot add " + Describe(\$addition, nil, nil, STYLE_NONPOSS) + " to " + \$kettle + ".");
    return FALSE;
\}

/* Make sure there is clean water */
if(!\$this."base:inventory" \|\| !sizeof(\$this."base:inventory")) \{
    EmitTo(\$actor, "You need to fill " + \$kettle + " with clean water first.");
    return FALSE;
\}

\$water = \$this."base:inventory"[0];

if(\$water."details:default:description:name:local") \{
    EmitTo(\$actor, "You need to empty " + Describe(\$water) + " from " + \$kettle + " first and fill it with clean water.");
    return FALSE;
\}

switch(\$addition."trait:objecttype") \{
    case "teabag":
    \{
        if(\$addition."trait:seasoning") \{
            \$name = \$addition."trait:seasoning" + " " + \$addition."trait:flavor" + " tea";
        \} else \{
            \$name = \$addition."trait:flavor" + " tea";
        \}

        \$smell = "It smells of " + \$addition."trait:smell" + ".";
        \$taste = "It tastes " + \$addition."trait:taste" + ".";
        break;
    \}

    case "fruit":
    \{ 
        if(Str(\$addition."trait:name") == "coffee") \{
            \$name = \$addition."trait:flavor" + " coffee";
            \$smell = "It smells of " + \$addition."trait:smell" + ".";
            \$taste = "It tastes " + \$addition."trait:taste" + ".";
        \} else \{
            EmitTo(\$actor, "You cannot add " + Describe(\$addition, nil, nil, STYLE_NONPOSS) + " to " + \$kettle + ".");
            return FALSE;
        \}
        break;
    \}

    case "seasoning":
    \{
        if(Str(\$addition."trait:type") == "chocolate") \{
            \$name = "hot chocolate";
            \$smell = "It smells of " + Str(\$addition."trait:smell") + ".";
            \$taste = "It tastes " + Str(\$addition."trait:taste") + ".";
        \} else \{
            EmitTo(\$actor, "You cannot add " + Describe(\$addition, nil, nil, STYLE_NONPOSS) + " to " + \$kettle + ".");
            return FALSE;
        \}
        break;
    \}

    default:
    \{
        EmitTo(\$actor, TAG("[OOC: There has been an error. Please report this to staff with the object you are trying to add to the kettle.]", "imp"));
        return FALSE;
        break;
    \}
\}

\$this."trait:contents" = \$name;

if(\$addition."consumable:effects") \{
    \$this."consumable:effects" = \$addition."consumable:effects";
\}

Set(\$water, "details:default:description:name", \$name);
Set(\$water, "details:default:description:scent", \$smell);
Set(\$water, "details:default:description:taste", \$taste);

if(!\$addition."udat:possessed") Slay(\$addition);

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:pour-dob">
         X[M] if(!\$iob) \{
    EmitTo(\$actor, "What did you want to pour " + Describe(\$this, nil, nil, STYLE_NONPOSS) + " into?");
    return FALSE;
\}

if(sizeof(\$iob) \> 1) \{
    EmitTo(\$actor, "You can only pour " + Describe(\$this, nil, nil, STYLE_NONPOSS) + " into one thing at a time.");
    return FALSE;
\}

\$cup = NRefOb(\$iob[0]);

if(\$cup."base:inventory" \&\& sizeof(\$cup."base:inventory")) \{
    EmitTo(\$actor, "You should empty the contents from " + Describe(\$cup, nil, nil, STYLE_NONPOSS) + " first.");
    return FALSE;
\}

if(!\$cup."sys:shared:food/drink:vessel") \{
    EmitTo(\$actor, Describe(\$cup, nil, nil, STYLE_NONPOSS) + " is not a vessel that can hold liquid.");
    return FALSE;
\}

\$water = \$this."base:inventory"[0];

\$effects = \$water."consumable:effects";
\$name = Get(\$water, "details:default:description:name");
\$smell = Get(\$water, "details:default:description:scent");
\$smell2 = Get(\$water, "trait:smell");
\$taste = Get(\$water, "details:default:description:taste");
\$taste2 = Get(\$water, "trait:taste");

\$cup."trait:liquid" = nil;

if(shared_consumable::consumable_transfer(\$from: \$this, \$into: \$cup)) \{  
    \$water2 = \$cup."base:inventory"[0];

    if(\$effects) \{
        \$water2."consumable:effects" = \$effects;
    \}

    Set(\$water2, "details:default:description:name", \$name);
    Set(\$water2, "details:default:description:scent", \$smell);
    Set(\$water2, "trait:smell", \$smell2);
    Set(\$water2, "details:default:description:taste", \$taste);
    Set(\$water2, "trait:taste", \$taste2);

    /* Transfer was successful. */  
    EmitTo(\$actor, "You pour " + Describe(\$this, nil, nil, STYLE_NONPOSS) + " into " + Describe(\$cup, nil, nil, STYLE_NONPOSS) + "." + (\$emptied ? " " + capitalize(Describe(this, nil, nil, STYLE_NONPOSS)) + " is now empty." : ""));  
    EmitIn(\$actor."base:environment", Describe(\$actor) + " pours " + Describe(\$this, nil, nil, STYLE_NONPOSS) + " into " + Describe(\$cup, nil, nil, STYLE_NONPOSS) + "." + (\$emptied ? " " + capitalize(Describe(\$this, nil, nil, STYLE_NONPOSS)) + " is now empty." : ""), \$actor);  
\}

return FALSE;
      </Core:Property>
      <Core:Property property="merry:react:add-iob">
         X[M] return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1597629386, "jominey", "E", 1597629408, "jominey", "E", 1597630455, "jominey", "P", 1600708698, "sendnoodlez", "R", 1601838093, "jominey", "E", 1601859251, "jominey", "E", 1602820827, "jominey", "E", 1603589202, "jominey", "P", 1603589660, "jominey", "P", 1603589838, "jominey", "P", 1603589868, "jominey", "P" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
