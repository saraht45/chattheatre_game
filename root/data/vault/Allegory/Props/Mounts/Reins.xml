<object clone="/base/obj/thing" owner="barbra18">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Allegory:Props:Mounts:UrMountWear)"/>
    <Base:Bulk immobile="false" mass="0.02" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="sitting" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="false" inside="false" near="true" over="false" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="rein"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="reins"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             {? equal | $(this.trait:fittedto) | $(this.base:worn-by) | $(this.trait:fit) }{? | $(this.trait:ribbon:material) | beribboned } {? | $(this.trait:gem:type) | {? equal | $(this.trait:gem:type) | impearled | impearled | $(this.trait:gem:material)-$(this.trait:gem:type) } } {? | $(this.details:stud:snames) | studded } {? | $(this.details:bead:snames) | beaded } {? | $(this.trait:pearl) | impearled } {? | $(this.details:feather:snames) | feathered } {? | $(this.details:lining:snames) | $(this.trait:lining:material)-lined } {? | $(this.details:trimming:snames) | $(this.trait:trimming:material)-trimmed } {? | $(this.details:flower:snames) | flowered } {? equal | $(this.trait:color) | none || $(this.trait:color) } {? | $(this.trait:embroidery) | {? | $(this.trait:embroidery:pattern) | $(this.trait:embroidery:pattern)} embroidered } {? equal | $(this.trait:material) | none || $(this.trait:material)} $(this.trait:brief){? | $(this.mount) | attached to $[Describe(this.mount,nil,$actor,STYLE_NONPOSS)]|}
          </Base:Description>
          <Base:Description type="examine">
             <a_or_an capitalize="1"> {? equal | $(this.trait:fittedto) | $(this.base:worn-by) | $(this.trait:fit) } {? equal | $(this.trait:color) | none | {? equal | $(this.trait:material) | none | plain | $(this.trait:material) } | $(this.trait:color) {? equal | $(this.trait:material) | none || $(this.trait:material) } }</a_or_an>$(this.trait:brief){? | $(this.details:button:snames) | adorned with $(this.trait:buttons:color) $(this.trait:buttons:material) $(this.trait:buttons:shape) buttons}{? | $(this.details:bead:snames) | adorned with $(this.trait:bead:color) $(this.trait:bead:material) $(this.trait:bead:shape) beads}{? | $(this.details:stud:snames) | adorned with $(this.trait:stud:color) $(this.trait:stud:material) studs}. {? | $(this.details:gempieces:snames) | Remarkable $(this.trait:gem:color) $(this.trait:gem:material)s cover the fabric.} {? | $(this.details:flower:snames) | Delicate $(this.trait:flower:color) $(this.trait:flower:material) $(this.trait:flower:brief)s are tactically scattered here and there.} {? | $(this.details:trimming:snames) | A $(this.trait:trimming:color) $(this.trait:trimming:material) trimming runs along the edge.} {? | $(this.details:lining:snames) | A $(this.trait:lining:color) $(this.trait:lining:material) lining has been sewn along the inside contours.} {? | $(this.details:lace:snames) | The $(this.trait:brief) is decorated with a $(this.trait:lace:color) $(this.trait:lace:material) lace.} {? | $(this.details:fringe:snames) | Some $(this.trait:fringe:color) $(this.trait:fringe:material) fringe has been added to the $(this.trait:brief).} {? | $(this.details:feather:snames) | You also note the $(this.trait:feather:color) $(this.trait:feather:type) feather, which is carefully attached to the clothing.} {? | $(this.details:ribbon:snames) | The material is entwined with $(this.trait:ribbon:color) $(this.trait:ribbon:material) ribbons.} $(this.trait:examine) {? | $(this.trait:embroidery) | $(this.trait:embroidery)} <makers-mark/> <sbr/> <quality-full/>
          </Base:Description>
          <Base:Description type="look">
             <a_or_an capitalize="1"> {? equal | $(this.trait:fittedto) | $(this.base:worn-by) | $(this.trait:fit) }{? equal | $(this.trait:color) | none | {? equal | $(this.trait:material) | none | plain | $(this.trait:material)} | $(this.trait:color){? equal | $(this.trait:material) | none || $(this.trait:material)}}</a_or_an> $(this.trait:brief){? | $(this.details:button:snames) | adorned with $(this.trait:buttons:color) $(this.trait:buttons:material) $(this.trait:buttons:type) buttons}{? | $(this.details:bead:snames) | adorned with $(this.trait:bead:color) $(this.trait:bead:material) $(this.trait:bead:shape) beads}{? | $(this.details:stud:snames) | adorned with $(this.trait:stud:color) $(this.trait:stud:material) studs}. {? | $(this.details:gempieces:snames) | Remarkable $(this.trait:gem:color) $(this.trait:gem:material)s cover the fabric.} {? | $(this.details:flower:snames) | Delicate $(this.trait:flower:color) $(this.trait:flower:material) $(this.trait:flower:brief)s are tastefully scattered here and there.} {? | $(this.details:trimming:snames) | A $(this.trait:trimming:color) $(this.trait:trimming:material) trimming runs along the edge.} {? | $(this.details:lining:snames) | A $(this.trait:lining:color) $(this.trait:lining:material) lining has been sewn along the inside contours.} {? | $(this.details:lace:snames) | The $(this.trait:brief) is decorated with a $(this.trait:lace:color) $(this.trait:lace:material) lace.} {? | $(this.details:fringe:snames) | Some $(this.trait:fringe:color) $(this.trait:fringe:material) fringe has been added to the $(this.trait:brief).} {? | $(this.details:feather:snames) | You also note the $(this.trait:feather:color) $(this.trait:feather:type) feather, which is carefully attached to the clothing.} {? | $(this.details:ribbon:snames) | The material is entwined with $(this.trait:ribbon:color) $(this.trait:ribbon:material) ribbons.} $(this.trait:examine) {? | $(this.trait:embroidery) | $(this.trait:embroidery)}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="straps" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="true">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="strap"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="straps"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="leather"/>
          <Base:Adjective adjective="reins"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.trait:color) $(this.trait:material) straps
          </Base:Description>
          <Base:Description type="look">
             Two strips of $(this.trait:color) $(this.trait:material) on each side of the reins, long enough for the rider to control the mount with.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:trait:brief">
         "reins"
      </Core:Property>
      <Core:Property property="export:trait:examine">
         "Stable gear fitted to a mount for controlling it. Reins are typically used in conjunction with a bridle."
      </Core:Property>
      <Core:Property property="export:trait:objecttype">
         "reins"
      </Core:Property>
      <Core:Property property="merry:react-post:hand-dob">
         X[M] if(this.mount) \{ 
    \$mount = this.mount; 
 
    if(\$mount."npc:controlledby") \{ 
        if(\$actor == \$mount."npc:controlledby") \{ 
            \$mount."npc:controlledby" = nil; 
        \} 
    \} 
\} 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:place-what">
         X[M] if(this.mount) \{ 
    \$mount = this.mount; 
 
    if(\$mount."npc:controlledby") \{ 
        if(\$actor == \$mount."npc:controlledby") \{ 
            \$mount."npc:controlledby" = nil; 
        \} 
    \} 
\} 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:take">
         X[M] /* If we pick up the reins while mounted, make us the controller for that mount */ 
 
if(this.mount) \{ 
    \$mount = this.mount; 
    \$riders = \$mount."npc:mounted"; 
 
    if(\$riders \&\& member(\$actor, \$riders)) \{ 
        \$mount."npc:controlledby" = \$actor; 
    \} 
\} 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:zthrow-what">
         X[M] if(this.mount) \{ 
    \$mount = this.mount; 
 
    if(\$mount."npc:controlledby") \{ 
        if(\$actor == \$mount."npc:controlledby") \{ 
            \$mount."npc:controlledby" = nil; 
        \} 
    \} 
\} 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:attach-dob">
         X[M] if(\$this."base:environment" != \$actor) \{ 
    EmitTo(\$actor, "You must be holding " + Describe(\$this) + "."); 
    return FALSE; 
\} 
 
if(!\$iob \|\| !sizeof(\$iob)) \{ 
    EmitTo(\$actor, "What did you want to attach " + Describe(\$this, nil, \$actor) + " to?"); 
    return FALSE; 
\} 
 
if(sizeof(\$iob) \> 1) \{ 
    EmitTo(\$actor, "You can only attach " + Describe(\$this, nil, \$actor) + " to one thing at a time."); 
    return FALSE; 
\} 
 
\$mount = NRefOb(\$iob[0]); 
 
/* Make sure it's a mount */ 
if(\$mount."trait:objecttype" != "horse") \{ 
    EmitTo(\$actor, "You can only attach " + Describe(\$this, nil, \$actor) + " to a mount."); 
    return FALSE; 
\} 
 
/* Make sure the mount is not already attached to reins */ 
if(\$mount.reins \&\& \$mount.reins != "") \{ 
    EmitTo(\$actor, Describe(\$mount) + " is already attached to " + Describe(\$mount.reins) + "."); 
    return FALSE; 
\} 
 
/* Make sure the reins are not already attached to a mount */ 
if(\$this.mount \&\& \$this.mount != "") \{ 
    EmitTo(\$actor, Describe(\$this) + " is already attached to " + Describe(\$this.mount) + "."); 
    return FALSE; 
\} 
 
/* Make sure the mount has a bridle to attach to */ 
if(!Call(\$mount, "inventory_check", \$what: \$\{Allegory:Props:Mounts:Bridle\})) \{ 
    EmitTo(\$actor, Describe(\$mount) + " must be wearing a bridle to attach the reins to."); 
    return FALSE; 
\} 
 
EmitTo(\$actor, TAG("You attach " + Describe(\$this, nil, \$actor) + " to " + Describe(\$mount) + ".", "social:first")); 
EmitIn(\$actor."base:environment", TAG(Describe(\$actor) + " attaches " + Describe(\$this, \$actor) + " to " + Describe(\$mount) + ".", "social:third"), \$actor); 
 
\$this.mount = \$mount; 
\$mount.reins = \$this; 
 
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:place-what">
         X[M] if(!\$where) return TRUE; 
if(NRefOb(\$where[0]) == \$actor."base:environment" \|\| NRefOb(\$where[0])."base:environment" == \$actor."base:environment") return TRUE; 
 
 
if(\$this.mount) \{ 
    EmitTo(\$actor, "You find it difficult to store the reins anywhere while they are attached to " + Describe(\$this.mount) + "."); 
    return FALSE; 
\} 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:release-dob">
         X[M] if(!\$this.mount) return TRUE; 
 
if(\$this."base:environment" != \$actor) \{ 
    EmitTo(\$actor, "You must be holding " + Describe(\$this) + "."); 
    return FALSE; 
\} 
 
\$mount = \$this.mount; 
 
if(\$mount."npc:mounted" \&\& sizeof(\$mount."npc:mounted")) \{ 
    EmitTo(\$actor, "You cannot remove the reins from " + Describe(\$mount) + " while it has riders."); 
    return FALSE; 
\} 
 
\$this.mount = nil; 
\$mount.reins = nil; 
 
EmitTo(\$actor, TAG("You release " + Describe(\$mount) + " from " + Describe(\$this, nil, \$actor) + ".", "social:first")); 
EmitIn(\$actor."base:environment", TAG(Describe(\$actor) + " releases " + Describe(\$mount) + " from " + Describe(\$this, \$actor) + ".", "social:third"), \$actor); 
 
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:release-iob">
         X[M] if(!\$this.mount) return TRUE; 
 
if(\$this."base:environment" != \$actor) \{ 
    EmitTo(\$actor, "You must be holding " + Describe(\$this) + "."); 
    return FALSE; 
\} 
 
\$mount = \$this.mount; 
 
if(\$mount."npc:mounted" \&\& sizeof(\$mount."npc:mounted")) \{ 
    EmitTo(\$actor, "You cannot remove the reins from " + Describe(\$mount) + " while it has riders."); 
    return FALSE; 
\} 
 
\$this.mount = nil; 
\$mount.reins = nil; 
 
EmitTo(\$actor, TAG("You release " + Describe(\$mount) + " from " + Describe(\$this, nil, \$actor) + ".", "social:first")); 
EmitIn(\$actor."base:environment", TAG(Describe(\$actor) + " releases " + Describe(\$mount) + " from " + Describe(\$this, \$actor) + ".", "social:third"), \$actor); 
 
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:take">
         X[M] if(!\$this.tiedby) return TRUE; 

if(\$this."trait:friends") \{ 
    \$friends = \$this."trait:friends"; 
\} else \{ 
    \$friends = (\{ \}); 
\} 
 
if(\$this.tiedby == \$actor \|\| \$this.mount.owner == \$actor \|\| \$this.mount.owner2 == \$actor \|\| member(\$actor, \$friends)) \{ 
    \$this."base:immobile" = FALSE; 
\} 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:tie-dob">
         X[M] if(!\$iob \&\& !sizeof(\$iob)) return TRUE; 
 
if(sizeof(\$iob) \> 1) \{ 
    EmitTo(\$actor, "You can only tie " + Describe(\$this, nil, \$actor) + " to one thing at a time."); 
    return FALSE; 
\} 
 
\$post = NRefOb(\$iob[0]); 
 
if(\$post."trait:objecttype" != "hitchingpost") \{ 
    EmitTo(\$actor, "You can only tie " + Describe(\$this, nil, \$actor) + " to a hitching post."); 
    return FALSE; 
\} 
 
/* If mounted, make rider dismount first */ 
if(\$actor."npc:mounting" \&\& \$this.mount) \{ 
    if(\$actor."npc:mounting" == \$this.mount) \{ 
        EmitTo(\$actor, "You will have to dismount first."); 
        return FALSE; 
    \} 
\} 
 
if(!this.mount) \{ 
    EmitTo(\$actor, "That is rather pointless without the other end attached to a mount."); 
    return FALSE; 
\} 
 
\$this."base:environment" = \$post; 
\$this.tiedby = \$actor; 
\$this."base:immobile" = TRUE; 
 
EmitTo(\$actor, TAG("You tie " + Describe(\$this) + " securely to " + Describe(\$post) + ".", "social:first")); 
EmitIn(\$actor."base:environment", TAG(Describe(\$actor) + " ties "+ Describe(\$this) + " securely to " + Describe(\$post) + ".", "social:third"), \$actor); 
 
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:zthrow-what">
         X[M] if(\$(through:preposition) == "through") \{ 
    EmitTo(\$actor, "You can't do that while the reins are still attached to " + Describe(\$this.mount) + "."); 
    return FALSE; 
\} 
 
if(!\$where) return TRUE; 
if(NRefOb(\$where[0]) == \$actor."base:environment" \|\| NRefOb(\$where[0])."base:environment" == \$actor."base:environment") return TRUE; 
 
if(\$this.mount) \{ 
    EmitTo(\$actor, "You find it difficult to store the reins anywhere while they are attached to " + Describe(\$this.mount) + "."); 
    return FALSE; 
\} 
 
return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1509151982, "jominey", "E", 1509925731, "jominey", "E", 1568599934, "ezralee", "K", 1572620566, "sendnoodlez", "R", 1572621166, "sendnoodlez", "E", 1572621668, "sendnoodlez", "X", 1572621688, "sendnoodlez", "X", 1572621755, "sendnoodlez", "E", 1572622034, "sendnoodlez", "R", 1572928483, "sendnoodlez", "K", 1572928741, "sendnoodlez", "E", 1572928788, "sendnoodlez", "E", 1572928822, "sendnoodlez", "E", 1572928866, "sendnoodlez", "E", 1579709922, "jominey", "E", 1589590480, "jominey", "E", 1593261938, "jominey", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
