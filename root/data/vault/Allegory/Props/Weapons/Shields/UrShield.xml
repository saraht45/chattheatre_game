<object clone="/base/obj/thing" owner="SkotOS">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Allegory:Props:Crafting:UrCrafting)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="hanging" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="shield"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="shields"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             <condition/> {? | $(this.details:spike:snames) | spiked } {? | $(this.details:stud:snames) | studded } {? | $(this.trait:gem:inlay) | $(this.trait:gem:material)-$(this.trait:gem:inlay) } {? equal | $(this.trait:pearl) | none || $(this.trait:pearl) } {? | $(this.trait:engraving) | {? | $(this.trait:engraving:pattern) | $(this.trait:engraving:pattern)} engraved } {? | $(this.trait:painting) | painted } {? equal | $(this.trait:color) | none || $(this.trait:color) } {? equal | $(this.trait:material) | none || $(this.trait:material) } $(this.trait:brief)
          </Base:Description>
          <Base:Description type="examine">
             <describe what="$(this)" nonposs="1" cap="1"/>. {? | $(this.details:gem:snames) | Remarkable $(this.trait:gem:color) $(this.trait:gem:material)s are embedded into the metal.} {? | $(this.details:spike:snames) | Jutting from the metal are dangerous $(this.trait:spike:color) $(this.trait:spike:material) spikes.} {? | $(this.details:stud:snames) | Adorning the metal are blunt $(this.trait:stud:color) $(this.trait:stud:material) studs.} $(this.trait:examine) {? | $(this.trait:engraving) | $(this.trait:engraving)} {? | $(this.trait:painting) | $(this.trait:painting)} <makers-mark/> <sbr/><quality-full/> <sbr/><condition-full/>
          </Base:Description>
          <Base:Description type="look">
             <describe what="$(this)" nonposs="1" cap="1"/>. {? | $(this.details:gem:snames) | Remarkable $(this.trait:gem:color) $(this.trait:gem:material)s are embedded into the metal.} {? | $(this.details:spike:snames) | Jutting from the metal are dangerous $(this.trait:spike:color) $(this.trait:spike:material) spikes.} {? | $(this.details:stud:snames) | Adorning the metal are blunt $(this.trait:stud:color) $(this.trait:stud:material) studs.} $(this.trait:look) {? | $(this.trait:engraving) | $(this.trait:engraving)} {? | $(this.trait:painting) | $(this.trait:painting)}
          </Base:Description>
          <Base:Description type="pbrief">
             <condition/> {? | $(this.details:spike:snames) | spiked } {? | $(this.details:stud:snames) | studded } {? | $(this.trait:gem:inlay) | $(this.trait:gem:material)-$(this.trait:gem:inlay) } {? equal | $(this.trait:pearl) | none || $(this.trait:pearl) } {? equal | $(this.trait:color) | none || $(this.trait:color) } {? | $(this.trait:engraving) | {? | $(this.trait:engraving:pattern) | $(this.trait:engraving:pattern)} engraved } {? | $(this.trait:painting) | painted } {? equal | $(this.trait:material) | none || $(this.trait:material) } $(this.trait:pbrief)
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="gempieces" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             the {? equal | $(this.trait:gem:color) | none | gaudy | $(this.trait:gem:color) }{? equal | $(this.trait:gem:material) | none | gaudy | $(this.trait:gem:material)s } adoring the $(this.details:default:descriptions:brief)
          </Base:Description>
          <Base:Description type="look">
             A fine assortment of {? equal | $(this.trait:gem:color) | none | gaudy | $(this.trait:gem:color) } {? equal | $(this.trait:gem:material) | none | gaudy | $(this.trait:gem:material)s } adorning this $(this.details:default:descriptions:brief).
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="spike" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             the {? equal | $(this.trait:spike:color) | none | blunt | $(this.trait:spike:color) }{? equal | $(this.trait:spike:material) | none | blunt | $(this.trait:spike:material) } spikes adorning the $(this.details:default:descriptions:brief)
          </Base:Description>
          <Base:Description type="look">
             An assortment of {? equal | $(this.trait:spike:color) | none | blunt | $(this.trait:spike:color) } {? equal | $(this.trait:spike:material) | none | blunt | $(this.trait:spike:material) } spikes adorning this $(this.details:default:descriptions:brief).
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="stud" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="true" before="true" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             the {? equal | $(this.trait:stud:color) | none | blunt | $(this.trait:stud:color) }{? equal | $(this.trait:stud:material) | none | blunt | $(this.trait:stud:material) } studs adorning the $(this.details:default:descriptions:brief)
          </Base:Description>
          <Base:Description type="look">
             An assortment of {? equal | $(this.trait:stud:color) | none | blunt | $(this.trait:stud:color) }{? equal | $(this.trait:stud:material) | none | blunt | $(this.trait:stud:material) } studs adorning the $(this.details:default:descriptions:brief)
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:Covered value="shield"/>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:alteration:add:default:gempieces">
         ([ "adj-prop":(\{ "trait:color", "trait:material" \}), "names":(\{ (\{ "sname", "gem" \}), (\{ "pname", "gems" \}) \}), "properties":(\{ (\{ "trait:color", "trait:gem:color" \}), (\{ "trait:material", "trait:gem:material" \}), (\{ "trait:gem:inlay", "trait:gem:inlay" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:alteration:add:default:spike">
         ([ "adj-prop":(\{ "trait:color", "trait:material" \}), "names":(\{ (\{ "sname", "spike" \}), (\{ "pname", "spikes" \}) \}), "properties":(\{ (\{ "trait:color", "trait:spike:color" \}), (\{ "trait:material", "trait:spike:material" \}), (\{ "trait:type", "trait:spike:type" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:alteration:add:default:stud">
         ([ "adj-prop":(\{ "trait:color", "trait:material" \}), "names":(\{ (\{ "sname", "stud" \}), (\{ "pname", "studs" \}) \}), "properties":(\{ (\{ "trait:color", "trait:stud:color" \}), (\{ "trait:material", "trait:stud:material" \}), (\{ "trait:type", "trait:stud:type" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:armor:rating">
         3
      </Core:Property>
      <Core:Property property="export:ironclawshield">
         1
      </Core:Property>
      <Core:Property property="export:shield:defence">
         1
      </Core:Property>
      <Core:Property property="export:trait:basematerial">
         "metal"
      </Core:Property>
      <Core:Property property="export:trait:brief">
         "shield"
      </Core:Property>
      <Core:Property property="export:trait:examine">
         "A simple, round shield."
      </Core:Property>
      <Core:Property property="export:trait:objecttype">
         "armor"
      </Core:Property>
      <Core:Property property="export:trait:superbrief">
         "shield"
      </Core:Property>
      <Core:Property property="merry:inherit:lib:calculate_hp">
         \<Ironclaw:Lib:Combat:Armor\>
      </Core:Property>
      <Core:Property property="merry:inherit:react-pre:repair-dob">
         \<Ironclaw:Lib:Combat:Armor\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:trait:damage">
         \<Ironclaw:Lib:Combat:Armor\>
      </Core:Property>
      <Core:Property property="merry:lib:defence_script">
         X[M] /* check if we block the attack with the shield */           
int shield_defence;           
           
/* make sure there is a \$target_ob */           
if(!\$target_ob) \{           
  if(\$this."base:environment") \{           
    \$target_ob = \$this."base:environment";           
  \} else \{           
    return nil;           
  \}           
\}           
           
/* make sure there is a quality set */           
if(!\$this."trait:quality") \$this."trait:quality" = 4;           
           
shield_defence = ironclaw::roll(\$roller: \$target_ob, \$skills: (\{ "combat:shield" \}), \$bonus: "trait:agility", \$modifier: \$this."combat:bonus:block");           
           
           
/* if the shield defence is more than the attack, it blocks */           
if(shield_defence \> \$attack_roll) \{           
  EmitTo((\{ \$attacker, \$defender \}), "attack roll of "+dump_value(\$attack_roll)+" and defence of "+dump_value(\$shield_defence)); 
  /* we blocked the attack. so end the attack. */           
  \$attackdesc[0] += " and "+\$target_ob."base:pronoun"+" blocks it with "+\$target_ob."base:possessive"+" shield.";           
  \$attackdesc[1] += " and you block it with your shield.";           
  \$attackdesc[2] += " and "+Describe(NewNRef(\$target_ob, "default"))+" blocks it with "+\$target_ob."base:possessive"+" shield.";           
           
  EmitTo(\$attacker, \$attackdesc[0]);           
  EmitTo(\$target_ob, \$attackdesc[1]);           
  EmitIn(\$target_ob."base:environment", \$attackdesc[2], \$attacker, \$target_ob);           
           
  \$this."trait:damage" = Int(\$this."trait:damage") + 1; 
     
  return nil;           
           
\}     
 
return (\{ " and "+\$target_ob."base:pronoun"+" doesn't get "+\$target_ob."base:possessive"+" shield up in time", " and you don't get your shield up in time", " and "+Describe(NewNRef(\$target_ob, "default"))+" doesn't get "+\$target_ob."base:possessive"+" shield up in time" \});
      </Core:Property>
      <Core:Property property="merry:react-post:unwear">
         X[M] if(\$actor."weapon:offhand" == this) \{ 
  \$actor."weapon:offhand" = nil; 
  \$actor."combat:shield:name" = nil; 
\} 
return TRUE; 
 
 
 
 
 
 
 
/* set the new armor covering settings for this armor */           
\$tmpArray = \$actor."combat:armor:covers";           
\$tmpArray -= (\{ "shield" \});           
\$actor."combat:armor:covers" = \$tmpArray;   
 
/* set the defense items */           
\$tmpArray = \$actor."combat:defenceitems";           
\$tmpArray -= (\{ this \});           
\$actor."combat:defenceitems" = \$tmpArray;   
 
/* set weapon statistics */           
\$actor."combat:shield:name" = nil;  
 
Call(\$\{Ironclaw:Lib:Combat:Armor\}, "calculate_armor"); 
 
return TRUE; 
 
/*           
This function sets the statistics when a shield is unwielded           
*/           
           
         
           
         
           
/* remove armor bonus/penalty to the player */           
\$actor."combat:armor:rating" = \$actor."combat:armor:rating" - Int(this."armor:rating");           
                    
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:wear">
         X[M] /* set weapon statistics */           
\$actor."combat:shield:name" = this."shield:name"; 
\$actor."weapon:offhand" = this; 
 
return TRUE; 
 
 
 
 
 
 
 
 
 
 
/* set the defense items */           
\$tmpArray = \$actor."combat:defenceitems";           
\$tmpArray += (\{ this \});           
\$actor."combat:defenceitems" = \$tmpArray;  
 
return TRUE;       
                  
           
/* give armor bonus/penalty to the player */           
\$actor."combat:armor:rating" = Int(\$actor."combat:armor:rating") + Int(this."armor:rating");                  
           
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:paint-iob">
         X[M] if((sizeof(Match(\$actor, "paint")) == 0) \&\& (sizeof(Match(\$actor, "paintbrush")) == 0)) \{                        
  EmitTo(\$actor, "You need a paintbrush and some paint.");                        
  return FALSE;                        
\} else if(sizeof(Match(\$actor, "paintbrush")) == 0) \{                        
  EmitTo(\$actor, "You need a paintbrush.");                        
  return FALSE;                        
\} else if(sizeof(Match(\$actor, "paint")) == 0) \{                        
  EmitTo(\$actor, "You need some paint.");                        
  return FALSE;                        
\}       
  
if(\$this."base:environment" != \$actor) \{  
  EmitTo(\$actor, "You must be holding " + Describe(\$this, nil, \$actor) + " to paint on it.");  
  return FALSE;  
\}  
  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:wear">
         X[M] /*           
This function checks that we can wear the shield           
*/           
 
if(\$this."trait:broken") \{ 
    EmitTo(\$actor, Describe(\$this, nil, \$actor) + " is broken. You need to repair it first."); 
    return FALSE; 
\} 
 
if(\$actor."weapon:offhand") \{ 
  EmitTo(\$actor, "You are already holding something in your off hand."); 
  return FALSE; 
\} 
 
/* Check if they are holding a two-handed weapon */ 
/* NOT WRITTEN YET */ 
 
return TRUE; 
 
 
 
 
/* checks the actor is not trying to wear this shield over another shield */           
           
if(!\$actor."combat:armor:covers")           
  \$actor."combat:armor:covers" = (\{\});           
           
if(!\$actor."combat:defenceitems")           
  \$actor."combat:defenceitems" = (\{\});           
           
\$tmpArray = (\{ "shield" \});           
\$tmpArray \&= \$actor."combat:armor:covers";           
if(sizeof(\$tmpArray) \> 0) \{           
    EmitTo(\$actor, "You are already wearing a shield.");           
    return FALSE;           
\}     
 
/* Okay to wear armor so set the stats */ 
\$tmpArray = (\{ "shield" \}); 
\$tmpArray \|= \$actor."combat:armor:covers"; 
\$actor."combat:armor:covers" = \$tmpArray; 
 
           
if(this."combat:broken") \{           
  EmitTo(\$actor, "You cannot wear "+Describe(\$this, nil, nil, STYLE_NONPOSS));           
  return FALSE;           
\}           
           
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:change-dob">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "create", \$target: \$dob, \$modification: "carve", \$words: \$(into:words));
      </Core:Property>
      <Core:Property property="merry:react:paint-iob">
         X[M] if(\$dob \&\& NRefOb(\$dob[0])) \{  
    Call(\$\{Allegory:Lib:Crafting:Custom:Painting\}, "paint", \$item: \$this, \$brief: Describe(\$dob[0]));  
    return TRUE;  
\} else \{  
    Popup(\$actor, \$\{Allegory:Lib:Crafting:Custom:Painting\}, "html:index", \$actor: \$actor, \$action: "paint", \$item: Str(\$this), \$using: Str(NRefOb(\$using[0])));  
\}
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:brief">
         X[M] \$this."details:default:adjective:plain" = nil;         
return TRUE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:color">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:gem:material">
         X[M] if(!\$this."trait:gem:material") return TRUE;         
Set(\$this, "details:gem:sname:" +Str(\$this."trait:gem:material")+ ":local", 1);         
Set(\$this, "details:gem:sname:gem:local", 1);         
         
return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:material">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:spike:material">
         X[M] if(!\$this."trait:spike:material") return TRUE;          
Set(\$this, "details:spike:sname:" +Str(\$this."trait:spike:material")+ ":local", 1);          
Set(\$this, "details:spike:sname:spike:local", 1);          
          
return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:stud:material">
         X[M] if(!\$this."trait:stud:material") return TRUE;          
Set(\$this, "details:stud:sname:" +Str(\$this."trait:stud:material")+ ":local", 1);          
Set(\$this, "details:stud:sname:stud:local", 1);          
          
return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="old:merry:lib:defence_script">
         X[M] /* check if we block the attack with the shield */           
int shield_defence;           
           
/* make sure there is a \$target_ob */           
if(!\$target_ob) \{           
  if(\$this."base:environment") \{           
    \$target_ob = \$this."base:environment";           
  \} else \{           
    return nil;           
  \}           
\}           
           
/* make sure there is a quality set */           
if(!\$this."trait:quality") \$this."trait:quality" = 4;           
           
shield_defence = ironclaw::roll(\$roller: \$target_ob, \$skills: (\{ "combat:shield" \}), \$bonus: "trait:agility", \$modifier: \$this."combat:bonus:block");           
           
           
/* if the shield defence is more than the attack, it blocks */           
if(shield_defence \> \$attack_roll) \{           
  /* we blocked the attack. so end the attack. */           
  \$attackdesc[0] += " and "+\$target_ob."base:pronoun"+" blocks it with "+\$target_ob."base:possessive"+" shield.";           
  \$attackdesc[1] += " and you block it with your shield.";           
  \$attackdesc[2] += " and "+Describe(NewNRef(\$target_ob, "default"))+" blocks it with "+\$target_ob."base:possessive"+" shield.";           
           
  EmitTo(\$attacker, \$attackdesc[0]);           
  EmitTo(\$target_ob, \$attackdesc[1]);           
  EmitIn(\$target_ob."base:environment", \$attackdesc[2], \$attacker, \$target_ob);           
           
  /* does it get any cosmetic damage? */           
  if(!\$this."combat:damage" \&\& ironclaw::roll(\$roller: \$attacker, \$skills: (\{ \}), \$bonus: "trait:body") \> ironclaw::roll(\$roller: \$this, \$skills: (\{ \}), \$bonus: "trait:quality", \$modifier: \$this."combat:bonus:strength") ) \{           
    /* the shield gets some cosmetic damage */           
    switch(\$attack) \{           
    case "cut":           
      \$damage = "chipped";           
      break;           
    case "stab":           
      \$damage = "dented";           
      break;           
    case "strike":           
      \$damage = "dented";           
      break;           
    default:           
      \$damage = "damaged";           
      break;           
    \}           
           
    /* mark the new damage */           
    \$this."combat:damaged" = \$damage;           
    /* set adjectives */           
    Set(\$this, "details:default:adjective:"+\$damage, TRUE);           
           
  \}           
  return nil;           
           
\}           
           
/* didn't block. compare attackers strength to shield quality */           
if( ironclaw::roll(\$roller: \$attacker, \$skills: (\{ \}), \$bonus: "trait:body") \> ironclaw::roll(\$roller: \$this, \$skills: (\{ \}), \$bonus: "trait:quality", \$modifier: \$this."combat:bonus:strength")) \{           
  /* yup. the shield gets smashed */           
  switch(\$attack) \{           
  case "cut":           
    \$impact = "cleaving";           
    \$damage = "cleft";           
  case "stab":           
    \$impact = "shattering";           
    \$damage = "shattered";           
  case "strike":           
    \$impact = "smashing";           
    \$damage = "smashed";           
  default:           
    \$impact = "breaking";           
    \$damage = "broken";           
    break;           
  \}           
           
  /* we blocked the attack, but our shield got smashed           
  /* we blocked the attack. so end the attack. */           
  \$attackdesc[0] += ", "+oneof("connecting with and ", "", "")+\$impact+" "+\$target_ob."base:possessive"+" shield.";           
  \$attackdesc[1] += ", "+oneof("connecting with and ", "", "")+\$impact+" your shield.";           
  \$attackdesc[2] += ", "+oneof("connecting with and ", "", "")+\$impact+" "+Describe(NewNRef(\$target_ob, "default"))+"'s shield.";           
           
  EmitTo(\$attacker, \$attackdesc[0]);           
  EmitTo(\$target_ob, \$attackdesc[1]);           
  EmitIn(\$target_ob."base:environment", \$attackdesc[2], \$attacker, \$target_ob);           
           
  if(\$this."trait:type" \&\& \$this."trait:type" == "wooden") \{           
    /* the shield is utterly smashed */           
    \$delay(0.5, nil, "1c4f");           
    EmitTo(\$defender, "Your shield is no more.");           
    \$defender."combat:defenceitems" -= (\{ \$this \});           
    Slay(\$this);           
    return nil;           
  \} else \{           
  /* mark the shield as smashed */           
  /* remove any minor damage from before */           
  if(\$this."combat:damaged") \{           
    Set(\$this, "details:default:adjective:"+\$this."combat:damaged", nil);           
    \$this."combat:damaged" = nil;           
  \}           
           
  /* mark the new damage */           
  \$this."combat:broken" = \$damage;           
  /* set adjectives */           
  Set(\$this, "details:default:adjective:"+\$damage, TRUE);           
           
  /* force the player to remove the shield */           
  Act(\$target_ob, "remove", \$articles: (\{ \$this \}));           
  \}           
           
  return nil;           
\}           
           
/* we didn't block the attack. 1 in 6 times, tell us that */           
if(!random(6))           
  return (\{ " and "+\$target_ob."base:pronoun"+" doesn't get "+\$target_ob."base:possessive"+" shield up in time", " and you don't get your shield up in time", " and "+Describe(NewNRef(\$target_ob, "default"))+" doesn't get "+\$target_ob."base:possessive"+" shield up in time" \});           
           
return 1;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1144052085, "-", "SYNC", 1221752477, "???", "R", 1239044425, "morwenlorelie", "R", 1239044482, "morwenlorelie", "K", 1239044508, "morwenlorelie", "E", 1239044543, "morwenlorelie", "E", 1239044551, "morwenlorelie", "X", 1239044570, "morwenlorelie", "E", 1239044764, "morwenlorelie", "X", 1239045417, "morwenlorelie", "K", 1239045461, "morwenlorelie", "E", 1239045567, "morwenlorelie", "X", 1242402060, "jominey", "E", 1253210456, "morwenlorelie", "K", 1253210490, "morwenlorelie", "K", 1253210537, "morwenlorelie", "K", 1253768928, "jominey", "E", 1284270520, "jominey", "K", 1284330548, "jominey", "E", 1317240997, "morwenlorelie", "X", 1317241016, "morwenlorelie", "E", 1317241062, "morwenlorelie", "X", 1317241163, "morwenlorelie", "K", 1318392528, "morwenlorelie", "X", 1318392890, "morwenlorelie", "K", 1318393167, "morwenlorelie", "K", 1318393272, "morwenlorelie", "X", 1318544548, "morwenlorelie", "K", 1342569757, "jominey", "E", 1342569808, "jominey", "E", 1342569846, "jominey", "E", 1342569973, "jominey", "E", 1342573486, "jominey", "E", 1342573528, "jominey", "E", 1342573550, "jominey", "E", 1343512717, "jominey", "K", 1343512818, "jominey", "E", 1343513456, "jominey", "E", 1343513514, "jominey", "E", 1343514576, "jominey", "E", 1343514639, "jominey", "E", 1343514841, "jominey", "E", 1343514868, "jominey", "E", 1343514994, "jominey", "E", 1343515120, "jominey", "E", 1343515153, "jominey", "E", 1343532868, "jominey", "E", 1343532878, "jominey", "E", 1343532890, "jominey", "E", 1343532907, "jominey", "E", 1343532923, "jominey", "E", 1343533008, "jominey", "E", 1344530941, "slurpeeslurp", "E", 1347921407, "jominey", "E", 1347921904, "jominey", "E", 1347921947, "jominey", "E", 1371086795, "jominey", "E", 1371086875, "jominey", "E", 1371086894, "jominey", "E", 1371086985, "jominey", "E", 1371087022, "jominey", "E", 1371087061, "jominey", "E", 1371087109, "jominey", "E", 1378581413, "jominey", "E", 1378581487, "jominey", "E", 1378581575, "jominey", "E", 1378581615, "jominey", "E", 1382233378, "jominey", "E", 1463906920, "tonyd", "E", 1566934582, "jominey", "R", 1614716214, "sendnoodlez", "E", 1642031509, "sendnoodlez", "X", 1642031563, "sendnoodlez", "E", 1642031621, "sendnoodlez", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
