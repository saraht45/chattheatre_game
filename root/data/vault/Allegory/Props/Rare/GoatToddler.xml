<object clone="/base/obj/thing" owner="ezralee">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Ironclaw:NPC:UrNPC)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="true" tight="false" capacity="1" maxweight="1"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="baby"/>
            <Base:SName sname="toddler"/>
            <Base:SName sname="goat"/>
            <Base:SName sname="pearl"/>
            <Base:SName sname="kid"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="people"/>
            <Base:PName pname="mammals"/>
            <Base:PName pname="persons"/>
            <Base:PName pname="toddlers"/>
            <Base:PName pname="babies"/>
            <Base:PName pname="goats"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="gangly"/>
          <Base:Adjective adjective="short"/>
          <Base:Adjective adjective="slim"/>
          <Base:Adjective adjective="stocky"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.appearance:height) $(this.appearance:build) {? | $(this.trait:object) | $(this.trait:object) | toddler }
          </Base:Description>
          <Base:Description type="examine">
             {? | $(this.trait:name) | $(this.trait:name) | This $(this.trait:superbrief) } is <a_or_an>$(this.appearance:height) $(this.appearance:build) $(this.trait:animal)</a_or_an> with $(this.appearance:furlength), $(this.appearance:furtexture) $(this.appearance:furcolor) $(this.appearance:furtype){? equal | $(this.appearance:hashair) | yes |, and a head of $(this.appearance:hairlength), $(this.appearance:hairtype) $(this.appearance:haircolor) hair{? | $(this.appearance:hairstyle_string) | $(this.appearance:hairstyle_string)|}.|.} A pair of $(this.appearance:eyeshape) $(this.appearance:eyecolor) eyes are set above a $(this.appearance:noseshape) nose and a $(this.appearance:mouthshape) mouth, complete with $(this.appearance:lipshape) lips. A set of {? | $(this.declawed) | missing $(this.appearance:clawtype) |            $(this.combat:injury:fingernails:adjectives) $(this.appearance:clawlength) $(this.appearance:clawapp) $(this.appearance:clawtype)}, on $(this.appearance:hands) hands and $(this.appearance:feet) feet, are also visible. You also note $(this.base:possessive) $(this.appearance:earshape) ears. $[if($this."combat:injuries" && (sizeof(map_indices($this."combat:injuries")) > 0)) return Describe($this)+" appears to be injured.";]
          </Base:Description>
          <Base:Description type="look">
             {? | $(this.trait:name) | $(this.trait:name) | This $(this.trait:superbrief) } is <a_or_an>$(this.appearance:height) $(this.appearance:build) $(this.trait:animal)</a_or_an> with $(this.appearance:furlength), $(this.appearance:furtexture) $(this.appearance:furcolor) $(this.appearance:furtype){? equal | $(this.appearance:hashair) | yes |, and a head of $(this.appearance:hairlength), $(this.appearance:hairtype) $(this.appearance:haircolor) hair{? | $(this.appearance:hairstyle_string) |$(this.appearance:hairstyle_string)|}.|.}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="facialhair" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="facialhair"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="fur" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="red"/>
          <Base:Adjective adjective="silky"/>
          <Base:Adjective adjective="uneven"/>
        </Base:Adjectives>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="hair" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="uncombed"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="black"/>
          <Base:Adjective adjective="dirty"/>
          <Base:Adjective adjective="long"/>
          <Base:Adjective adjective="uncombed"/>
        </Base:Adjectives>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="tail" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="tail"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="tails"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             {? | $(this.appearance:tailtexture) | $(this.appearance:taillength) $(this.appearance:tailtexture) tail}
          </Base:Description>
          <Base:Description type="look">
             A {? | $(this.appearance:tailtexture) | $(this.appearance:taillength) $(this.appearance:tailtexture) tail}.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="appearance:anterlength">
         (\{ "short" \})
      </Core:Property>
      <Core:Property property="appearance:antlertype">
         (\{ "fuzzy" \})
      </Core:Property>
      <Core:Property property="appearance:build">
         "gangly"
      </Core:Property>
      <Core:Property property="appearance:clawapp">
         "stubby"
      </Core:Property>
      <Core:Property property="appearance:clawlength">
         "jagged"
      </Core:Property>
      <Core:Property property="appearance:earshape">
         "wide"
      </Core:Property>
      <Core:Property property="appearance:eyecolor">
         "jet-black"
      </Core:Property>
      <Core:Property property="appearance:eyecoloradj">
         "bright"
      </Core:Property>
      <Core:Property property="appearance:eyeshape">
         "narrow"
      </Core:Property>
      <Core:Property property="appearance:feet">
         "ragged"
      </Core:Property>
      <Core:Property property="appearance:furcolor">
         "red"
      </Core:Property>
      <Core:Property property="appearance:furlength">
         "uneven"
      </Core:Property>
      <Core:Property property="appearance:furtexture">
         "silky"
      </Core:Property>
      <Core:Property property="appearance:haircolor">
         "black"
      </Core:Property>
      <Core:Property property="appearance:hairlength">
         "long"
      </Core:Property>
      <Core:Property property="appearance:hairstyle">
         "uncombed"
      </Core:Property>
      <Core:Property property="appearance:hairtype">
         "dirty"
      </Core:Property>
      <Core:Property property="appearance:hands">
         "stubby"
      </Core:Property>
      <Core:Property property="appearance:height">
         "stocky"
      </Core:Property>
      <Core:Property property="appearance:lipshape">
         "wide"
      </Core:Property>
      <Core:Property property="appearance:mouthshape">
         "full"
      </Core:Property>
      <Core:Property property="appearance:muzzleshape">
         "crooked"
      </Core:Property>
      <Core:Property property="appearance:noseshape">
         "prominent"
      </Core:Property>
      <Core:Property property="appearance:taillength">
         "uneven"
      </Core:Property>
      <Core:Property property="appearance:tailtexture">
         "dirty"
      </Core:Property>
      <Core:Property property="bak:merry:react:control-dob">
         X[M] int i;   
int found;   

\$errormsg = "That is not a valid command for the child. Valid orders are: chatter, cry, dress, explore, follow, giggle, go to dad, go to mom, harass, misbehave, play, pout, sing, sleep, smile, speak, stay, sulk, tantrum, totter, undress, whine, and yawn.";   
   
if(!\$evoke) return TRUE;   
\$words = explode(\$evoke[1..strlen(\$evoke)-2], " ");   
   
/* check if we're allowed to command the child */
\$ownerone = Str(\$this."trait:ownerone");
\$ownertwo = Str(\$this."trait:ownertwo");

if(\$ownerone != Str(\$actor) \&\& \$ownertwo != Str(\$actor)) \{   
  EmitTo(\$actor, "You are not my parent, so you can't control me.");   
  return FALSE;   
\}   

if(\$this."base:genderstring" == "male") \{
    \$self = "himself";
    \$possessive = "his";
    \$nominative = "he";
    \$objective = "him";
\} else \{
    \$self = "herself";
    \$possessive = "her";
    \$nominative = "she";
    \$objective = "her";
\}

/* check if this is a valid order */   
if(lower_case(\$words[0]) == "follow") \{   
    EmitTo(\$actor, Describe(this)+" will now follow you.");   
    this.follow = \$actor;
    Social(this, "scamper", nil, nil, "to", \$actor );
    \$this."amialone:id" = In("amialone", 300);  
\} else if(lower_case(\$words[0]) == "stay") \{   
    EmitTo(\$actor, Describe(this)+ " will no longer follow you.");   
    this.follow = nil;   
\} else if(lower_case(\$words[0]) == "cry") \{   
    EmitIn(\$actor."base:environment", Describe(\$this)+" lets out a series of small whimpers before breaking into loud sobs.");   
\} else if(lower_case(\$words[0]) == "whine") \{   
    EmitIn(\$actor."base:environment", Describe(\$this)+" whines pitifully.");   
\} else if(lower_case(\$words[0]) == "play") \{   
    EmitIn(\$actor."base:environment", Describe(\$this)+" plays happily by " + \$self + ".");   
\} else if(lower_case(\$words[0]) == "speak") \{   
    EmitIn(\$actor."base:environment", Describe(\$this)+" nonsensically speaks to " + \$self + ".");   
\} else if(lower_case(\$words[0]) == "explore") \{   
    EmitIn(\$actor."base:environment", Describe(\$this)+" curiously explores the area.");   
\} else if(lower_case(\$words[0]) == "chatter") \{   
    EmitIn(\$actor."base:environment", Describe(\$this)+" chatters cheerfully.");   
\} else if(lower_case(\$words[0]) == "smile") \{   
    EmitIn(\$actor."base:environment", Describe(\$this)+" smiles, revealing new teeth growing in.");   
\} else if(lower_case(\$words[0]) == "tantrum") \{   
    EmitIn(\$actor."base:environment", Describe(\$this)+" breaks into tears and begins to angrily tantrum.");   
\} else if(lower_case(\$words[0]) == "yawn") \{   
    EmitIn(\$actor."base:environment", Describe(\$this)+" yawns expansively, eyes scrunching as " + \$nominative + " does so."); 
\} else if(lower_case(\$words[0]) == "sing") \{   
    EmitIn(\$actor."base:environment", Describe(\$this)+" sings cutely to " + \$self + ".");   
\} else if(lower_case(\$words[0]) == "harass") \{   
    EmitIn(\$actor."base:environment", Describe(\$this)+" impatiently harasses an unfortunate individual.");    
\} else if(lower_case(\$words[0]) == "giggle") \{   
    EmitIn(\$actor."base:environment", Describe(\$this)+" giggles adorably.");   
\} else if(lower_case(\$words[0]) == "misbehave") \{   
    EmitIn(\$actor."base:environment", Describe(\$this)+" childishly misbehaves.");   
\} else if(lower_case(\$words[0]) == "totter") \{   
    EmitIn(\$actor."base:environment", Describe(\$this)+" unsteadily totters around.");   
\} else if(lower_case(\$words[0]) == "sulk") \{   
    EmitIn(\$actor."base:environment", Describe(\$this)+" sulks, lower lip thrust out.");   
\} else if(lower_case(\$words[0]) == "sleep") \{   
    EmitIn(\$actor."base:environment", Describe(\$this)+" sleeps contentedly.");   
\} else if(lower_case(\$words[0]) == "whine") \{   
    EmitIn(\$actor."base:environment", Describe(\$this)+" whines pitifully.");   
\} else if(lower_case(\$words[0]) == "pout") \{   
    EmitIn(\$actor."base:environment", Describe(\$this)+" pouts moodily, a scowl set upon the forehead.");  
\} else if(lower_case(\$words[0]) == "dress") \{
    \$inventory = this."base:inventory";
    Act(this, "wear", \$articles: \$inventory);
\} else if(lower_case(\$words[0]) == "undress") \{
    ::undress();
\} else if(lower_case(\$words[0]) == "go" \&\& lower_case(\$words[2]) == "mom") \{
    \$home = Get(Obj(\$ownerone), "virtualhome:home");
    this."base:environment" = \$home;
    EmitIn(\$actor."base:environment", Describe(\$this) + " scurries home.");
\} else if(lower_case(\$words[0]) == "go" \&\& lower_case(\$words[2]) == "dad") \{
    if(Obj(\$ownertwo)) \{
        \$home = Get(Obj(\$ownertwo), "virtualhome:home");
        this."base:environment" = \$home;
        EmitIn(\$actor."base:environment", Describe(\$this) + " scurries home.");
    \} else \{
        EmitTo(\$actor, Describe(this) + " doesn't have a dad.");
    \}
\} else \{
    EmitTo(\$actor, \$errormsg);
\}

return FALSE;
      </Core:Property>
      <Core:Property property="disabled:merry:setprop-post:appearance:hairstyle">
         X[M] return Call(\$\{Allegory:Lib:UrPeople:Description\}, "updatehairdesc", \$action: "hairstyle", \$body: \$this);
      </Core:Property>
      <Core:Property property="export:alteration:add:fur:furdye">
         ([ "properties":(\{ (\{ "trait:color", "appearance:furcolor" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:alteration:add:hair:hairdye">
         ([ "properties":(\{ (\{ "trait:color", "appearance:haircolor" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:alteration:add:hair:hairgrowth">
         ([  ])
      </Core:Property>
      <Core:Property property="export:alteration:add:head:hairgrowth">
         ([  ])
      </Core:Property>
      <Core:Property property="export:alteration:add:tattoo:ink">
         ([ "noslay":"true", "properties":(\{ (\{ "trait:color", "appearance:symbolcolor" \}) \}), "stopvalue":(\{ "appearance:symbolcolor", "sketched", "This tattoo has already been inked." \}) ])
      </Core:Property>
      <Core:Property property="export:alteration:create:default:tattoo">
         ([ "description":(\{ "You tattoo MODIFICATION onto ORIGINAL_OBJECT", "tattoos MODIFICATION onto ORIGINAL_OBJECT" \}), "fixed":"true", "input-list":(\{ (\{ \<IronClaw:Lib:UrPeople:Tattoos\>, "alteration:knowledge:tattoos" \}) \}), "input-list-actor":(\{ "alteration:knowledge:tattoos" \}), "modification":"a tattoo", "noskillroll":"true", "properties":(\{ (\{ "appearance:symbol" \}) \}), "requiredtools":(\{ "a needle and ink", (\{ "needle" \}), (\{ "ink" \}) \}), "stopvalue":(\{ "appearance:symbol", "nothing", "Your victim already has a tattoo." \}) ])
      </Core:Property>
      <Core:Property property="export:alteration:create:hair:alter">
         ([ "description":(\{ "You style ORIGINAL_OBJECT", "styles ORIGINAL_OBJECT" \}), "fixed":"true", "input-list":(\{ (\{ \<Allegory:Lib:UrPeople:Hairstyles\>, "alteration:knowledge:hairstyles" \}), (\{ \<Allegory:Lib:UrPeople:Hairstyles\>, "alteration:knowledge:hairlength" \}), (\{ \<Allegory:Lib:UrPeople:Hairstyles\>, "alteration:knowledge:hairtype" \}) \}), "input-list-actor":(\{ "alteration:knowledge:hairstyles", "alteration:knowledge:hairlength", "alteration:knowledge:hairtype" \}), "noskillroll":"true", "requiredtools":(\{ "a pair of scissors and a comb", (\{ "scissors" \}), (\{ "comb" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:alteration:create:hair:cut">
         ([ "description":(\{ "You cut ORIGINAL_OBJECT", "cuts ORIGINAL_OBJECT" \}), "fixed":"true", "input-list":(\{ (\{ \<Allegory:Lib:UrPeople:Hairstyles\>, "alteration:knowledge:hairlength" \}) \}), "input-list-actor":(\{ "alteration:knowledge:hairlength" \}), "noskillroll":"true", "requiredtools":(\{ "a pair of scissors and a comb", (\{ "scissors" \}), (\{ "comb" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:alteration:create:hair:style">
         ([ "description":(\{ "You style ORIGINAL_OBJECT", "styles ORIGINAL_OBJECT" \}), "fixed":"true", "input-list":(\{ (\{ \<Allegory:Lib:UrPeople:Hairstyles\>, "alteration:knowledge:hairstyles" \}) \}), "input-list-actor":(\{ "alteration:knowledge:hairstyles" \}), "noskillroll":"true", "requiredtools":(\{ "a pair of scissors and a comb", (\{ "scissors" \}), (\{ "comb" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:alteration:create:tail:alter">
         ([ "description":(\{ "You style ORIGINAL_OBJECT", "styles ORIGINAL_OBJECT" \}), "fixed":"true", "input-list":(\{ (\{ \<IronClaw:Lib:UrPeople:Tailstyles\>, "alteration:knowledge:tailstyles" \}), (\{ \<IronClaw:Lib:UrPeople:Tailstyles\>, "alteration:knowledge:tailtexture" \}), (\{ \<IronClaw:Lib:UrPeople:Tailstyles\>, "alteration:knowledge:tailtexture" \}) \}), "input-list-actor":(\{ "alteration:knowledge:Tailstyles", "alteration:knowledge:taillength", "alteration:knowledge:taillength" \}), "noskillroll":"true", "requiredtools":(\{ "a pair of scissors and a comb", (\{ "scissors" \}), (\{ "comb" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:alteration:create:tail:cut">
         ([ "description":(\{ "You cut ORIGINAL_OBJECT", "cuts ORIGINAL_OBJECT" \}), "fixed":"true", "input-list":(\{ (\{ \<IronClaw:Lib:UrPeople:Tailstyles\>, "alteration:knowledge:taillength" \}) \}), "input-list-actor":(\{ "alteration:knowledge:taillength" \}), "noskillroll":"true", "requiredtools":(\{ "a pair of scissors and a comb", (\{ "scissors" \}), (\{ "comb" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:alteration:create:tail:style">
         ([ "description":(\{ "You style ORIGINAL_OBJECT", "styles ORIGINAL_OBJECT" \}), "fixed":"true", "input-list":(\{ (\{ \<IronClaw:Lib:UrPeople:Tailstyles\>, "alteration:knowledge:tailtexture" \}) \}), "input-list-actor":(\{ "alteration:knowledge:tailtexture" \}), "noskillroll":"true", "requiredtools":(\{ "a pair of scissors and a comb", (\{ "scissors" \}), (\{ "comb" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:appearance:build">
         "average"
      </Core:Property>
      <Core:Property property="export:appearance:clawtype">
         "nails"
      </Core:Property>
      <Core:Property property="export:appearance:facialhair">
         "none"
      </Core:Property>
      <Core:Property property="export:appearance:faciallength">
         "ordinary"
      </Core:Property>
      <Core:Property property="export:appearance:feettype">
         "feet"
      </Core:Property>
      <Core:Property property="export:appearance:feettype:p">
         "feet"
      </Core:Property>
      <Core:Property property="export:appearance:feettype:s">
         "foot"
      </Core:Property>
      <Core:Property property="export:appearance:furtype">
         "fur"
      </Core:Property>
      <Core:Property property="export:appearance:hashair">
         "yes"
      </Core:Property>
      <Core:Property property="export:appearance:height">
         "average"
      </Core:Property>
      <Core:Property property="export:appearance:symbol">
         "nothing"
      </Core:Property>
      <Core:Property property="export:appearance:symbolcolor">
         "sketched"
      </Core:Property>
      <Core:Property property="export:client:theme">
         "ironclaw"
      </Core:Property>
      <Core:Property property="export:command:chatter">
         (\{ "THIS chatters cheerfully." \})
      </Core:Property>
      <Core:Property property="export:command:cry">
         (\{ "THIS lets out a series of small whimpers before breaking into loud sobs." \})
      </Core:Property>
      <Core:Property property="export:command:explore">
         (\{ "THIS curiously explores the area." \})
      </Core:Property>
      <Core:Property property="export:command:giggle">
         (\{ "THIS giggles adorably." \})
      </Core:Property>
      <Core:Property property="export:command:harass">
         (\{ "THIS impatiently harasses an unfortunate individual." \})
      </Core:Property>
      <Core:Property property="export:command:misbehave">
         (\{ "THIS childishly misbehaves." \})
      </Core:Property>
      <Core:Property property="export:command:play">
         (\{ "THIS plays happily by SELF." \})
      </Core:Property>
      <Core:Property property="export:command:pout">
         (\{ "THIS pouts moodily, a scowl set upon the forehead." \})
      </Core:Property>
      <Core:Property property="export:command:sing">
         (\{ "THIS sings cutely to SELF." \})
      </Core:Property>
      <Core:Property property="export:command:sleep">
         (\{ "THIS sleeps contentedly." \})
      </Core:Property>
      <Core:Property property="export:command:smile">
         (\{ "THIS smiles, revealing new teeth growing in." \})
      </Core:Property>
      <Core:Property property="export:command:speak">
         (\{ "THIS nonsensically speaks to SELF." \})
      </Core:Property>
      <Core:Property property="export:command:sulk">
         (\{ "THIS sulks, lower lip thrust out." \})
      </Core:Property>
      <Core:Property property="export:command:tantrum">
         (\{ "THIS breaks into tears and begins to angrily tantrum." \})
      </Core:Property>
      <Core:Property property="export:command:totter">
         (\{ "THIS unsteadily totters around." \})
      </Core:Property>
      <Core:Property property="export:command:whine">
         (\{ "THIS whines pitifully." \})
      </Core:Property>
      <Core:Property property="export:command:yawn">
         (\{ "THIS yawns expansively, eyes scrunching as NOMINATIVE does so." \})
      </Core:Property>
      <Core:Property property="export:rank:name">
         "freedman"
      </Core:Property>
      <Core:Property property="export:rank:rank">3</Core:Property>
      <Core:Property property="export:trait:animal">
         "unknown"
      </Core:Property>
      <Core:Property property="export:trait:animaltype">
         "unknown"
      </Core:Property>
      <Core:Property property="export:trait:brief">
         "someone"
      </Core:Property>
      <Core:Property property="export:trait:butt">
         "rump"
      </Core:Property>
      <Core:Property property="export:trait:commands:default">
         (\{ "chatter", "cry", "dress", "explore", "follow", "giggle", "go to dad", "go to mom", "harass", "misbehave", "play", "pout", "sing", "sleep", "smile", "speak", "stay", "sulk", "tantrum", "totter", "undress", "whine", "yawn" \})
      </Core:Property>
      <Core:Property property="export:trait:examine">
         "This stocky gangly toddler is a stocky gangly wolf, with uneven, silky red fur, and long dirty black hair. Narrow jet-black eyes are set above a prominent nose and a full mouth, complete with wide lips. Jagged stubby nails, on stubby hands, and ragged feet are also visible. You also note its wide  ears and crooked  muzzle."
      </Core:Property>
      <Core:Property property="export:trait:look">
         "This stocky gangly toddler is a stocky gangly wolf, with uneven, silky red fur, and long dirty black hair."
      </Core:Property>
      <Core:Property property="export:trait:nominative">
         "he"
      </Core:Property>
      <Core:Property property="export:trait:nottrash">
         1
      </Core:Property>
      <Core:Property property="export:trait:objective">
         "her"
      </Core:Property>
      <Core:Property property="export:trait:possessive">
         "her"
      </Core:Property>
      <Core:Property property="export:trait:sex">
         "woman"
      </Core:Property>
      <Core:Property property="export:trait:smells">
         ([  ])
      </Core:Property>
      <Core:Property property="merry:inherit:act-post:approach%partitions">
         \<Lib:Systems:Partitions\>
      </Core:Property>
      <Core:Property property="merry:inherit:act-post:command%smell">
         \<Ironclaw:Lib:Characters:Smell\>
      </Core:Property>
      <Core:Property property="merry:inherit:act-post:enter%partitions">
         \<Lib:Systems:Partitions\>
      </Core:Property>
      <Core:Property property="merry:lib:amialone">
         X[M] if(\$this."amialone:id") \{
    Stop(\$this."amialone:id");
    \$this."amialone:id" = nil;
\}

\$ownerone = Str(\$this."trait:ownerone");
\$ownertwo = Str(\$this."trait:ownertwo");

\$homeone = Obj(\$ownerone)."virtualhome:home";

if(Obj(\$ownertwo)) \{
    \$hometwo = Obj(\$ownertwo)."virtualhome:home";
\}

\$env = \$this."base:environment";
\$surroundings = \$env."base:inventory";

if(\$env == \$ownerone \|\| \$env == \$ownertwo \|\| \$env == \$homeone \|\| \$env == \$hometwo \|\| \$found == 1 \|\| member(Obj(\$ownerone), \$surroundings) \|\| (Obj(\$ownertwo) \&\& member(Obj(\$ownertwo), \$surroundings))) \{
    \$this."amialone:id" = In("amialone", 300);
\} else \{
    EmitIn(this."base:environment", Describe(this) + " goes home.");

    if(this.follow) \{
        \$home = Get(this.follow, "virtualhome:home");
    \} else \{
        \$home = \$homeone;
    \}

    \$this."base:environment" = \$home;
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:dress">
         X[M] \$inventory = this."base:inventory";
Act(this, "wear", \$articles: \$inventory);
      </Core:Property>
      <Core:Property property="merry:lib:follow">
         X[M] EmitTo(\$actor, Describe(this)+" will now follow you.");   
this.follow = \$actor;
Social(this, "scamper", nil, nil, "to", \$actor );
\$this."amialone:id" = In("amialone", 300);
      </Core:Property>
      <Core:Property property="merry:lib:godad">
         X[M] if(Obj(\$ownertwo)) \{
    \$home = Get(Obj(\$ownertwo), "virtualhome:home");
    this."base:environment" = \$home;
    EmitIn(\$actor."base:environment", Describe(\$this) + " scurries home.");
\} else \{
    EmitTo(\$actor, Describe(this) + " doesn't have a dad.");
\}
      </Core:Property>
      <Core:Property property="merry:lib:gomom">
         X[M] \$home = Get(Obj(\$ownerone), "virtualhome:home");
\$this."base:environment" = \$home;
EmitIn(\$actor."base:environment", Describe(\$this) + " scurries home.");
      </Core:Property>
      <Core:Property property="merry:lib:stay">
         X[M] EmitTo(\$actor, Describe(this)+" will no longer follow you.");   
this.follow = nil;
      </Core:Property>
      <Core:Property property="merry:lib:undress">
         X[M] /* undressing ourselves */  
\$delay(0.01, TRUE, "c799");  
  
\$mapping = \$this."base:clothes-worn";  
\$clothes = (\{ \});  
\$indices = map_indices(\$mapping);  
for(\$i=0;\$i\<sizeof(\$indices);\$i++) \{  
  for(\$j=0;\$j\<sizeof(\$mapping[\$indices[\$i]]);\$j++) \{  
    \$item = \$mapping[\$indices[\$i]][\$j];  
    if(member(\$item, \$clothes)) \{  
      /* already in the list */  
      /* add anything covering this item */  
      if(sizeof(\$mapping[\$indices[\$i]]) \> \$j+1) \{  
        /* there are items covering this */  
        \$item."clothing:covered-by" \|= \$mapping[\$indices[\$i]][\$j+1..];  
      \}  
    \} else \{  
      /* not in the list */  
      /* add anything covering this item */  
      \$clothes += (\{ \$item \});  
      if(sizeof(\$mapping[\$indices[\$i]]) \> \$j+1) \{  
        /* there are items covering this */  
        \$item."clothing:covered-by" = \$mapping[\$indices[\$i]][\$j+1..];  
      \} else \{  
        \$item."clothing:covered-by" = (\{ \});  
      \}  
    \}  
  \}  
\}  
  
/* now make a list of what is on top to bottom */  
\$ordered_list = (\{ \});  
while(sizeof(\$clothes)) \{  
  \$tmp_list = (\{ \});  
  for(\$i=0;\$i\<sizeof(\$clothes);\$i++) \{  
    if(sizeof(\$clothes[\$i]."clothing:covered-by")) \{  
      /* this item is covered by something. Is that something already removed? */  
      if(!sizeof(\$clothes \& \$clothes[\$i]."clothing:covered-by")) \{  
        /* no longer covered. Add to the list */  
        \$tmp_list \|= (\{ \$clothes[\$i] \});  
      \}  
    \} else \{  
      /* not covered by anything. Move this to the list */  
      \$tmp_list \|= (\{ \$clothes[\$i] \});  
    \}  
  \}  
  \$ordered_list += (\{ \$tmp_list \});  
  \$clothes -= \$tmp_list;  
\}  
  
/* save this list in the player's body */  
if(sizeof(\$ordered_list))  
  \$this."clothing:last-wearing" = \$ordered_list;  
  
/* remove the clothes */  
for(\$i=0;\$i\<sizeof(\$ordered_list);\$i++) \{  
  Act(\$this, "unwear", \$articles: \$ordered_list[\$i]);  
\}  
  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:take">
         X[M] /* Record what room the actor is in */      
\$room = \$actor."Base:environment";      
      
/* Check if the actor is allowed to pick up the kitten */      
  /* check if \$actor is the baby's parent */      
if(\$actor == \$this."trait:ownerone" \|\| \$actor == \$this."trait:ownertwo") \{      
  /* if the actor is allowed to pick up the kitten */      
  /* tell the actor that they picked up the kitten */      
  /* tell the room that the actor picked up the kitten */      
  EmitTo(\$actor, "You pick up "+Describe(\$this)+".");      
  EmitIn(\$room, Describe(\$actor)+" picks up "+ Describe(\$this)+".", \$actor);      
  \$this."base:environment" = \$actor;      
      
\} else \{      
  /* the actor is not the kittens mother */      
      
  /* if the kitten is already being held by someone */      
  if(\$this."base:environment"."base:volition") \{      
    /* use the normal give/take/offer code */      
    return TRUE;      
  \} else \{      
    /* tell the actor that they can't take the kitten */      
    /* tell the room that the actor is a kidnapper! */      
    EmitTo(\$actor, "That baby is not yours!");      
    EmitIn(\$room, Describe(\$actor)+" attempts to take "+ Describe(\$this)+".", \$actor);      
  \}      
\}      
      
/* return false, so that the actor doesn't see a message about not being allowed to pick up the kitten */      
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react:control-dob">
         X[M] int i, sz;   
int found;
string* commands, *commandsDefault, *commandsExtra;
string errormsg, self, possessive, nominative, objective, input;
mixed property, result;

/* Gather commands located in UR baby */
commandsDefault = (\{ \});
if(\$this."trait:commands:default") \{
    commandsDefault = \$this."trait:commands:default";
\}

/* Gather baby specific commands */
commandsExtra = (\{ \});
if(\$this."trait:commands:extra") \{
    commandsExtra = \$this."trait:commands:extra";
\}

/* Put them all together */
commands = commandsDefault \| commandsExtra;

if(!sizeof(commands)) \{
    commands = (\{ "none" \});
\}

errormsg = "That is not a valid command for the child. Valid orders are: \\"" + implode(commands, "\\" \\"") +"\\"";

if(!\$evoke) \{
    EmitTo(\$actor, errormsg);
    return FALSE;
\}
   
input = replace_strings(\$evoke, "\\"", "", ".", "", " ", "");


/* check if we're allowed to command the child */
\$ownerone = Str(\$this."trait:ownerone");
\$ownertwo = Str(\$this."trait:ownertwo");

if(\$ownerone != Str(\$actor) \&\& \$ownertwo != Str(\$actor)) \{   
  EmitTo(\$actor, "You are not my parent, so you can't control me.");   
  return FALSE;   
\}   


/* check if this is a valid order */  
if(FindMerry(\$this, "lib", input)) \{
    /* Result is a script. Execute it. */
    result = Call(\$this, input);
\} else if(Get(\$this, "command:" + input)) \{
    /* Result is a simple emote. */
    property = Get(\$this, "command:" + input);

    if(typeof(property) == 5) \{
        /* Array of emits. Choose one. */
        sz = sizeof(property);
        result = property[random(sz)];
    \} else \{
        /* Assuming it's a string. Grab it. */
        result = Str(property);
    \}
\} else \{
    /* No response was defined. */
    result = "[OOC: No response was defined for this action. File an assist with this error and include the command you were trying to issue.]";
    EmitTo(\$actor, result);
    return FALSE;
\}

if(typeof(result) == 3) \{
    /* Precautionary measures to ensure emits display correct gender. */
    if(\$this."base:genderstring" == "male") \{
        self = "himself";
        possessive = "his";
        nominative = "he";
        objective = "him";
    \} else if(\$this."base:genderstring" == "female") \{
        self = "herself";
        possessive = "her";
        nominative = "she";
        objective = "her";
    \} else \{
        self = "itself";
        possessive = "its";
        nominative = "it";
        objective = "it";
    \}

    /* Display the result. */
    EmitIn(\$actor."base:environment", replace_strings(result, "THIS", Describe(\$this), "SELF", self, "POSSESSIVE", possessive, "NOMINATIVE", nominative, "OBJECTIVE", objective, "HERE", Describe(\$actor."base:environment"), "PARENT", Describe(\$actor)));
\}

return FALSE;
      </Core:Property>
      <Core:Property property="merry:react:name-dob">
         X[M] int i;   
int found;   
  
if(\$this."trait:name") \{
    EmitTo(\$actor, Describe(this) + " has already been named.");
    return FALSE;
\}

if(!\$evoke) return TRUE;   
\$words = explode(\$evoke[1..strlen(\$evoke)-2], " ");   
   
/* check if we're allowed to command the child */
\$ownerone = Str(\$this."trait:ownerone");
\$ownertwo = Str(\$this."trait:ownertwo");

if(\$ownerone != Str(\$actor) \&\& \$ownertwo != Str(\$actor)) \{   
  EmitTo(\$actor, "You are not my parent, so you can't name me.");   
  return FALSE;   
\}   

\$name = proper(replace_strings(\$evoke, "\\"", ""));

this."trait:name" = \$name;

for(\$i = 0; \$i \< sizeof(\$words); \$i++) \{
    Set(this, "details:default:sname:" + \$words[\$i], TRUE);
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:appearance:haircolor">
         X[M] return Call(\$\{Allegory:Lib:UrPeople:Description\}, "updatehairdesc", \$action: "haircolor", \$body: \$this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:appearance:hairlength">
         X[M] return Call(\$\{Allegory:Lib:UrPeople:Description\}, "updatehairdesc", \$action: "hairlength", \$body: \$this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:appearance:hairtype">
         X[M] return Call(\$\{Allegory:Lib:UrPeople:Description\}, "updatehairdesc", \$action: "hairtype", \$body: \$this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:appearance:hashair">
         X[M] return Call(\$\{Allegory:Lib:UrPeople:Description\}, "updatehairdesc", \$action: "hashair", \$body: \$this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:animal">
         X[M] Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replacenames", \$object: \$this);         
return TRUE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:superbrief">
         X[M] return Call(\$\{Allegory:Lib:UrPeople:Description\}, "updatedesc", \$body: \$this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:title">
         X[M] Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: \$this);         
Call(\$\{Allegory:Lib:UrPeople:Description\}, "updatedesc", \$body: \$this);         
return TRUE;
      </Core:Property>
      <Core:Property property="merry:timer:amialone">
         X[M] /* Look for mommy and daddy */

/* Az: I'm disabling this code */
/* I can only see it being called with the "follow" command, not sure what's going on there. And I'm told it sends the toddler home when someone is holding it. Don't have time to debug right now, but hopefully someone can later */
return TRUE;

::amialone();
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1144052085, "-", "SYNC", 1221752477, "???", "R", 1253735792, "haystack", "K", 1253736373, "haystack", "K", 1253740363, "haystack", "E", 1253740673, "haystack", "E", 1253741789, "haystack", "E", 1253742811, "haystack", "E", 1253743703, "haystack", "E", 1253744192, "haystack", "E", 1258557516, "morwenlorelie", "K", 1258557521, "morwenlorelie", "E", 1258557544, "morwenlorelie", "X", 1258557596, "morwenlorelie", "X", 1258558006, "morwenlorelie", "X", 1258558109, "morwenlorelie", "K", 1258558195, "morwenlorelie", "K", 1258558253, "morwenlorelie", "K", 1258558381, "morwenlorelie", "K", 1258558516, "morwenlorelie", "K", 1258558676, "morwenlorelie", "K", 1258559043, "morwenlorelie", "K", 1258559185, "morwenlorelie", "K", 1258586679, "jominey", "E", 1258586950, "jominey", "E", 1258587384, "jominey", "E", 1258588210, "jominey", "E", 1258588308, "jominey", "E", 1258588426, "jominey", "E", 1258588451, "jominey", "E", 1258588814, "jominey", "E", 1259626634, "jominey", "E", 1259626739, "jominey", "E", 1259626864, "jominey", "E", 1259626915, "jominey", "E", 1259626969, "jominey", "E", 1259638862, "jominey", "E", 1259638931, "jominey", "E", 1259639091, "jominey", "E", 1259639132, "jominey", "E", 1259639167, "jominey", "E", 1259639223, "jominey", "E", 1259639427, "jominey", "E", 1259639503, "jominey", "E", 1259639513, "jominey", "E", 1259639554, "jominey", "E", 1259639668, "jominey", "E", 1259639783, "jominey", "E", 1259639866, "jominey", "E", 1259639912, "jominey", "E", 1259639939, "jominey", "E", 1259639986, "jominey", "E", 1259639998, "jominey", "E", 1259640277, "jominey", "K", 1259640470, "jominey", "E", 1259640530, "jominey", "K", 1259640581, "jominey", "E", 1259640658, "jominey", "E", 1259641546, "jominey", "E", 1259641871, "jominey", "E", 1259642527, "jominey", "E", 1259642606, "jominey", "E", 1259642794, "jominey", "E", 1259642913, "jominey", "E", 1259643136, "jominey", "E", 1259643319, "jominey", "E", 1259643429, "jominey", "E", 1259643529, "jominey", "E", 1259643583, "jominey", "E", 1259643662, "jominey", "E", 1259666647, "jominey", "E", 1259666839, "jominey", "E", 1259692895, "morwenlorelie", "E", 1259693037, "morwenlorelie", "E", 1259696684, "jominey", "K", 1259696749, "jominey", "K", 1259696819, "jominey", "K", 1259696917, "jominey", "K", 1260730134, "morwenlorelie", "E", 1261334479, "morwenlorelie", "E", 1261334559, "morwenlorelie", "E", 1262441070, "tonyd", "E", 1262441171, "tonyd", "E", 1283810347, "jominey", "K", 1283810572, "jominey", "K", 1283810814, "jominey", "K", 1283811578, "jominey", "E", 1283815534, "jominey", "E", 1283821379, "jominey", "E", 1283821429, "jominey", "E", 1283821768, "jominey", "E", 1283821948, "jominey", "E", 1283822013, "jominey", "E", 1283822048, "jominey", "E", 1283822077, "jominey", "E", 1283822287, "jominey", "E", 1283822366, "jominey", "E", 1283822395, "jominey", "E", 1283823064, "jominey", "S", 1283823064, "jominey", "S", 1283823064, "jominey", "S", 1283823064, "jominey", "S", 1283823064, "jominey", "S", 1283823064, "jominey", "S", 1283823064, "jominey", "S", 1283823202, "jominey", "E", 1283823586, "jominey", "S", 1283823586, "jominey", "S", 1283823586, "jominey", "S", 1283823586, "jominey", "S", 1283823587, "jominey", "S", 1283823587, "jominey", "S", 1283823587, "jominey", "S", 1283823587, "jominey", "S", 1283823587, "jominey", "S", 1283823587, "jominey", "S", 1283823587, "jominey", "S", 1283823774, "jominey", "E", 1283823844, "jominey", "E", 1283823878, "jominey", "E", 1283823906, "jominey", "E", 1283823942, "jominey", "E", 1283823994, "jominey", "E", 1283824035, "jominey", "E", 1284486320, "jominey", "R", 1285021618, "jominey", "K", 1285021644, "jominey", "K", 1286060519, "morwenlorelie", "K", 1286060785, "morwenlorelie", "K", 1286060868, "morwenlorelie", "K", 1286060888, "morwenlorelie", "K", 1286060912, "morwenlorelie", "K", 1525835030, "ezralee", "K", 1545880130, "ezralee", "K", 1599540815, "ezralee", "R" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="trait:animal">"wolf"</Core:Property>
      <Core:Property property="trait:animaltype">
         "wolf"
      </Core:Property>
      <Core:Property property="trait:examine">
         "This stocky gangly toddler is a stocky gangly wolf, with uneven, silky red fur, and long dirty black hair. Narrow jet-black eyes are set above a prominent nose and a full mouth, complete with wide lips. Jagged stubby nails, on stubby hands, and ragged feet are also visible. You also note its wide  ears and crooked  muzzle."
      </Core:Property>
      <Core:Property property="trait:look">
         "This stocky gangly toddler is a stocky gangly wolf, with uneven, silky red fur, and long dirty black hair."
      </Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
