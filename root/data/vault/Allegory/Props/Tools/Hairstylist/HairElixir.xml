<object clone="/base/obj/thing" owner="SkotOS">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="0.5" density="1.2"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="true"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="potion"/>
            <Base:SName sname="vial"/>
            <Base:SName sname="elixir"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="elixirs"/>
            <Base:PName pname="potions"/>
            <Base:PName pname="vials"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="growth"/>
          <Base:Adjective adjective="hair"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             vial of hair growth elixir
          </Base:Description>
          <Base:Description type="look">
             A small stone vial containing some greenish brown liquid with an unpleasant bitter aroma. On the outside of the vial is a label with the words 'Dunst's Miracle Hair Growth Elixir' in red block print.<sbr/>This vial has $[if($this."trait:quantity" == 0) { return "no doses"; } else if ($this."trait:quantity" == 1) { return "one dose"; } else { return desc_cardinal($this."trait:quantity")+ " doses"; }] remaining.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:nip:item:cost">
         600
      </Core:Property>
      <Core:Property property="export:sys:exposure:fire:destroy:fire-emit">
         "It burns!"
      </Core:Property>
      <Core:Property property="export:trait:objecttype">
         "hairgrowth"
      </Core:Property>
      <Core:Property property="export:trait:quantity">
         5
      </Core:Property>
      <Core:Property property="export:trait:trash">1</Core:Property>
      <Core:Property property="merry:react-post:add-dob">
         X[M] if(!\$iob) return TRUE;
if(sizeof(\$iob)\>1) \{ EmitTo(\$actor, "You may only add your potion to one thing at a time."); return FALSE; \}

if((NRefDetail(\$iob[0]) == "head") \|\| (NRefDetail(\$iob[0]) == "hair")) \{
  \$iob = NRefOb(\$iob[0]);
  \$iob.no_hairlength_reset = 1;
  EmitTo(\$iob, "You feel an itchiness in your scalp, as your hair rapidly grows.");
  EmitIn(\$iob."base:environment", Describe(\$iob)+"'s hair rapidly grows.", \$iob);
  \$iob."appearance:hashair" = nil;
  if(\$iob."appearance:hairlength") \{
    switch(\$iob."appearance:hairlength") \{
    case "none":
    case "shaved":
    case "close-cropped":
    case "butchered":
    case "ear-length":
    case "trimmed":
      \$iob."appearance:hairlength" = "short";
      break;
    case "short":
    case "chin-length":
    case "nape-length":
    case "lopsided":
    case "shoulder-length":
      \$iob."appearance:hairlength" = "long";
      break;
    case "long":
      \$iob."appearance:hairlength" = "waist-length";
      break;
    case "waist-length":
    case "hip-length":
      \$iob."appearance:hairlength" = "thigh-length";
      break;
    case "thigh-length":
    case "knee-length":
      \$iob."appearance:hairlength" = "ankle-length";
      break;
    case "ankle-length":
      \$iob."appearance:hairlength" = "floor-length";
      break;
    case "floor-length":
      break;
    default:
      \$iob."appearance:hairlength" = "long";
      break;
    \}
  \} else \{
    \$iob."appearance:hairlength" = "long";
  \}
  \$iob.no_hairlength_reset = nil;
\} else if(((NRefDetail(\$iob[0]) == "face") \|\| (NRefDetail(\$iob[0]) == "facialhair")) \&\& NRefOb(\$iob[0])."trait:sex" == "man") \{

  \$iob = NRefOb(\$iob[0]);
  \$iob.no_hairlength_reset = 1;
  EmitTo(\$iob, "You feel an itchiness in your jaw, as your facial hair rapidly grows.");
  EmitIn(\$iob."base:environment", Describe(\$iob)+"'s facial hair rapidly grows.", \$iob);

  if(\$iob."appearance:faciallength") \{
    switch(\$iob."appearance:faciallength") \{
        case "short":
            \$iob."appearance:faciallength" = "long";
            break;

        case "long":
            \$iob."appearance:faciallength" = "long";
            break;
 
        default:
            \$iob."appearance:faciallength" = "short";
            break;
    \}
  \} else \{
    \$iob."appearance:faciallength" = "short";
  \}

  if(!\$iob."appearance:facialhair" \|\| \$iob."appearance:facialhair" == "none") \{
    \$iob."appearance:facialhair" = "beard";
    \$iob."appearance:facialprep" = "is";
  \}

  if(\$iob."details:facialhair:hidden") \{
      \$iob."details:facialhair:hidden" = FALSE;
  \}

  \$iob.no_hairlength_reset = nil;
\} else if((NRefDetail(\$iob[0]) == "fur") \|\| (NRefDetail(\$iob[0]) == "body")) \{

  \$iob = NRefOb(\$iob[0]);
  \$iob.no_hairlength_reset = 1;
  EmitTo(\$iob, "You feel an itchiness in your body, as your fur rapidly grows.");
  EmitIn(\$iob."base:environment", Describe(\$iob)+"'s fur rapidly grows.", \$iob);

  if(\$iob."export:appearance:furtype" != "skin") \{
    switch(\$iob."appearance:furlength") \{
        case "butchered":
        case "sleek":
        case "trimmed":
        case "ordinary":
        case "shrot":
        case "smooth":
        case "sparse":
            \$iob."appearance:furlength" = "medium-length";
            break;

        case "medium-length":
            \$iob."appearance:furlength" = "long";
            break;

        case "long":
            \$iob."appearance:furlength" = "overgrown";
            break; 

        case "overgrown":
            \$iob."appearance:furlength" = "overgrown";
            break;
 
        default:
            \$iob."appearance:furlength" = "short";
            break;
    \}
  \}

  \$iob.no_hairlength_reset = nil;
\}
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:drink-what">
         X[M] \$this."trait:quantity"--;
EmitTo(\$actor, "You feel hair growing along the length of your tongue.");
EmitIn(\$actor."base:environment", Describe(\$actor)+" looks nauseous, as something appears to be swelling in "+\$actor."base:possessive"+" mouth.", \$actor);
\$actor.mute = 1;
if(\$actor."appearance:tongue" \&\& !\$actor."appearance:tongue-backup")
\{
  \$actor."appearance:tongue-backup" = \$actor."appearance:tongue";
\}
\$actor."appearance:tongue" = "hair-covered";
\$delay(15, FALSE, "e7d9");
EmitTo(\$actor, "The hair along your tongue feels like it's falling out.");
\$actor.mute = nil;
\$actor."appearance:tongue" = \$actor."appearance:tongue-backup";
\$actor."appearance:tongue-backup" = nil;

return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:drink-what">
         X[M] if(!\$this."trait:quantity" \|\| (\$this."trait:quantity" \< 1))
\{
  EmitTo(\$actor, "This potion is empty, you cannot drink it.");
  return FALSE;
\}
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:add-dob">
         X[M] if(!\$iob) return TRUE;
if(sizeof(\$iob)\>1) \{ EmitTo(\$actor, "You may only add your potion to one thing at a time."); return FALSE; \}
if(!\$this."trait:quantity" \|\| (\$this."trait:quantity" \< 1))
\{
  EmitTo(\$actor, Describe(\$this, nil, \$actor) +" is empty.");
  return FALSE;
\} else \{
  \$this."trait:quantity"--;
\}
return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1179179043, "necate", "E", 1309306063, "jominey", "E", 1309306127, "jominey", "E", 1309306680, "jominey", "E", 1309306714, "jominey", "E", 1309306777, "jominey", "E", 1309306906, "jominey", "E", 1309306987, "jominey", "E", 1309307026, "jominey", "E", 1309308392, "jominey", "E", 1572495550, "sendnoodlez", "K", 1572495579, "sendnoodlez", "E", 1572495614, "sendnoodlez", "E", 1572495627, "sendnoodlez", "K", 1587919909, "sendnoodlez", "R" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
