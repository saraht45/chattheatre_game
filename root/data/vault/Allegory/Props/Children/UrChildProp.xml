<object clone="/base/obj/thing" owner="sendnoodlez">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Allegory:Props:Animals:UrAnimalBrain)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="true" transparent-container="false" public-container="true" tight="false" capacity="102" maxweight="10" verb2="are carrying" verb3="is carrying"/>
    <Base:Misc gender="neuter" volition="true" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="true"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="child"/>
            <Base:SName sname="kid"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="kids"/>
            <Base:PName pname="children"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.appearance:height) $(this.appearance:build) $(this.trait:stage)
          </Base:Description>
          <Base:Description type="examine">
             $(this.appearance:height) in height and $(this.appearance:build) in build, $(this.trait:name) is <a_or_an>$(this.trait:stage)</a_or_an> of $(this.appearance:skin) complexion with a {? equal | $(this.appearance:hashair) | yes | head of $(this.appearance:hairlength) $(this.appearance:hairtype) $(this.appearance:haircolor) hair$(this.appearance:hairstyle_examinestring)| bald head}. $[capitalize($this."base:possessive")] $(this.appearance:eyeshape) $(this.appearance:eyecolor) eyes are accentuated by $(this.appearance:eyebrowshape) eyebrows and <a_or_an>$(this.appearance:browshape)</a_or_an> forehead. <a_or_an capitalize="1">$(this.appearance:noseshape)</a_or_an> nose and $(this.appearance:mouthshape) mouth with $(this.appearance:lipshape) lips complete the appearance.
          </Base:Description>
          <Base:Description type="look">
             $(this.appearance:height) in height and $(this.appearance:build) in build, $(this.trait:name) is <a_or_an>$(this.trait:stage)</a_or_an> of $(this.appearance:skin) complexion with a {? equal | $(this.appearance:hashair) | yes | head of $(this.appearance:hairlength) $(this.appearance:hairtype) $(this.appearance:haircolor) hair$(this.appearance:hairstyle_examinestring)| bald head}.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties>
      <Base:InitialProperty property="petbody">
         1
      </Base:InitialProperty>
    </Base:InitialProperties>
    <Core:Properties>
      <Core:Property property="export:alteration:add:hair:hairdye">
         ([ "properties":(\{ (\{ "trait:color", "appearance:haircolor" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:alteration:add:hair:hairgrowth">
         ([  ])
      </Core:Property>
      <Core:Property property="export:alteration:add:head:hairgrowth">
         ([  ])
      </Core:Property>
      <Core:Property property="export:alteration:create:hair:alter">
         ([ "description":(\{ "You style ORIGINAL_OBJECT", "styles ORIGINAL_OBJECT" \}), "fixed":"true", "input-list":(\{ (\{ \<Allegory:Lib:UrPeople:Hairstyles\>, "alteration:knowledge:hairstyles" \}), (\{ \<Allegory:Lib:UrPeople:Hairstyles\>, "alteration:knowledge:hairlength" \}), (\{ \<Allegory:Lib:UrPeople:Hairstyles\>, "alteration:knowledge:hairtype" \}) \}), "input-list-actor":(\{ "alteration:knowledge:hairstyles", "alteration:knowledge:hairlength", "alteration:knowledge:hairtype" \}), "noskillroll":"true", "requiredtools":(\{ "a pair of scissors and a comb", (\{ "scissors" \}), (\{ "comb" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:alteration:create:hair:cut">
         ([ "description":(\{ "You cut ORIGINAL_OBJECT", "cuts ORIGINAL_OBJECT" \}), "fixed":"true", "input-list":(\{ (\{ \<Allegory:Lib:UrPeople:Hairstyles\>, "alteration:knowledge:hairlength" \}) \}), "input-list-actor":(\{ "alteration:knowledge:hairlength" \}), "noskillroll":"true", "requiredtools":(\{ "a pair of scissors and a comb", (\{ "scissors" \}), (\{ "comb" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:alteration:create:hair:style">
         ([ "description":(\{ "You style ORIGINAL_OBJECT", "styles ORIGINAL_OBJECT" \}), "fixed":"true", "input-list":(\{ (\{ \<Allegory:Lib:UrPeople:Hairstyles\>, "alteration:knowledge:hairstyles" \}) \}), "input-list-actor":(\{ "alteration:knowledge:hairstyles" \}), "noskillroll":"true", "requiredtools":(\{ "a pair of scissors and a comb", (\{ "scissors" \}), (\{ "comb" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:nip-core:consent:allow-all">
         1
      </Core:Property>
      <Core:Property property="export:nip:start">
         (\{ "handler:start:auto", "configure", "start%growth" \})
      </Core:Property>
      <Core:Property property="export:nip:trait:movement:frequency">
         0
      </Core:Property>
      <Core:Property property="export:petbody">1</Core:Property>
      <Core:Property property="export:trait:objecttype">
         "child"
      </Core:Property>
      <Core:Property property="export:trait:spawnedparts">
         ([ "ankle":"ankle", "ankles":"ankles", "arm":"arm", "armpit":"armpit", "armpits":"armpits", "arms":"arms", "back":"backs", "biceps":"biceps", "blood":"bloods", "body":"bodies", "bones":"bones", "breastbone":"breastbone", "breath":"breaths", "brow":"brows", "calf":"calf", "calves":"calves", "cheek":"cheek", "cheeks":"cheeks", "chest":"chest", "chin":"chins", "collarbone":"collarbone", "collarbones":"collarbones", "ear":"ear", "earlobe":"earlobe", "earlobes":"earlobes", "ears":"ears", "elbow":"elbow", "elbows":"elbows", "expression":"expressions", "eye":"eye", "eyebrow":"eyebrow", "eyebrows":"eyebrows", "eyelash":"eyelash", "eyelashes":"eyelashes", "eyelid":"eyelid", "eyelids":"eyelids", "eyes":"eyes", "face":"faces", "feet":"feet", "finger":"finger", "fingernail":"fingernail", "fingernails":"fingernails", "fingers":"fingers", "fingertip":"fingertip", "fingertips":"fingertips", "fist":"fist", "fists":"fists", "flesh":"fleshes", "foot":"foot", "forearm":"forearm", "forearms":"forearms", "frame":"frames", "frown":"frowns", "grip":"grips", "groin":"groins", "gut":"guts", "hair":"hairs", "hand":"hand", "hands":"hands", "head":"heads", "heart":"hearts", "heartbeat":"heartbeats", "heel":"heel", "heels":"heels", "hip":"hip", "hipbone":"hipbone", "hipbones":"hipbones", "hips":"hips", "jaw":"jaws", "joints":"joints", "jugular":"jugulars", "knee":"knee", "knees":"knees", "knuckle":"knuckle", "knuckles":"knuckles", "lap":"laps", "leg":"leg", "legs":"legs", "limbs":"limbs", "lip":"lip", "lips":"lips", "lung":"lung", "lungs":"lungs", "mouth":"mouths", "muscles":"muscles", "nape":"napes", "navel":"navels", "neck":"necks", "nipple":"nipple", "nipples":"nipples", "nose":"noses", "nostril":"nostril", "nostrils":"nostrils", "palm":"palm", "palms":"palms", "pinkies":"pinkies", "pinky":"pinky", "pupil":"pupil", "pupils":"pupils", "rib":"rib", "ribs":"ribs", "rump":"rums", "scalp":"scalps", "shin":"shin", "shins":"shins", "shoulder":"shoulder", "shoulderblade":"shoulderblade", "shoulderblades":"shoulderblades", "shoulders":"shoulders", "side":"side", "sides":"sides", "skin":"skins", "smile":"smiles", "sole":"sole", "soles":"soles", "spine":"spines", "stomach":"stomachs", "teeth":"teeth", "temper":"tempers", "temple":"temple", "temples":"temples", "thigh":"thigh", "thighs":"thighs", "throat":"throats", "thumb":"thumb", "thumbs":"thumbs", "toe":"toe", "toenail":"toenail", "toenails":"toenails", "toes":"toes", "tongue":"tongue", "tooth":"tooth", "torso":"torsos", "triceps":"triceps", "veins":"veins", "voice":"voices", "waist":"waists", "weight":"weights", "windpipe":"windpipes", "wrist":"wrist", "wrists":"wrists" ])
      </Core:Property>
      <Core:Property property="merry:inherit:lib:grow">
         \<Allegory:Lib:Controls:General\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:start_growth">
         \<Allegory:Lib:Controls:General\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:stop_growth">
         \<Allegory:Lib:Controls:General\>
      </Core:Property>
      <Core:Property property="merry:inherit:timer:grow">
         \<Allegory:Lib:Controls:General\>
      </Core:Property>
      <Core:Property property="merry:lib:configure">
         X[M] mapping traitsMap, partsMap;          
string * traits;          
string * parts;          
string trait, part;          
object partsOb;          
int i;          
          
EmitTo(\$\{Chatters:AE:hi:hilarion\}, "Setting up " + Str(\$this));          
          
/* Set snames/pnames of body parts this child will use */          
if(\$this."trait:spawnedparts") \{          
    /* Spawn body parts */          
    partsOb = Spawn(\$\{Allegory:Props:Children:UrChildParts\});          
          
EmitTo(\$\{Chatters:AE:hi:hilarion\}, "Spawned parts " + Str(partsOb));          
          
    partsOb."base:environment" = \$this;          
    partsOb."base:immobile" = 1;          
          
    partsMap = \$this."trait:spawnedparts";          
    parts = map_indices(partsMap);          
          
    for(i = 0; i \< sizeof(parts); i++) \{          
        Set(partsOb, "details:" + parts[i] + ":snames:" + parts[i], TRUE);          
        Set(partsOb, "details:" + parts[i] + ":pnames:" + partsMap[parts[i]], TRUE);          
    \}          
\}          
          
/* Set spawned traits */          
if(\$this."trait:spawnedtraits") \{          
    traitsMap = \$this."trait:spawnedtraits";          
    traits = map_indices(traitsMap);          
          
    for(i = 0; i \< sizeof(traits); i++) \{          
        trait = traitsMap[traits[i]][random(sizeof(traitsMap[traits[i]]))];          
        Set(\$this, "trait:" + traits[i], trait);          
    \}          
\}          
          
/* Set gender */          
\$this."base:gender" = random(2);          
          
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:start%growth">
         X[M] if(\$this.growing) return TRUE; 
 
Call(\$this, "start_growth");
      </Core:Property>
      <Core:Property property="merry:setprop-post:appearance">
         X[M] int i;    
object * inventory;    
string detail;    
    
if(\$(hook-property) == "trait:friends") return FALSE;    
if(\$(hook-property) == "trait:smells") return FALSE;    
if(\$(hook-property) == "trait:smells:lastchecked") return FALSE;    
    
\$(hook-value) = replace_strings(\$(hook-value), ", ", " ");    
    
if(contains(\$(hook-property), "appearance:")) \{    
    detail = replace_strings(\$(hook-property), "appearance:", "");    
    inventory = this."base:inventory";    
    for(i = 0; i \< sizeof(inventory); i++) \{    
        if(inventory[i]."base:immobile") \{    
            Set(inventory[i], \$(hook-property), \$(hook-value));    
            return Call(\$\{Allegory:Lib:Crafting:Lib\}, "replaceadj", \$object: inventory[i], \$detail: detail);    
        \}    
    \}    
\} else \{    
    return Call(\$\{Allegory:Lib:Crafting:Lib\}, "replaceadj", \$object: this);    
\}
      </Core:Property>
      <Core:Property property="merry:setprop-post:appearance:haircolor">
         X[M] return Call(\$\{Allegory:Lib:UrPeople:Description\}, "updatehairdesc", \$action: "haircolor", \$body: \$this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:appearance:hairlength">
         X[M] return Call(\$\{Allegory:Lib:UrPeople:Description\}, "updatehairdesc", \$action: "hairlength", \$body: \$this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:appearance:hairtype">
         X[M] return Call(\$\{Allegory:Lib:UrPeople:Description\}, "updatehairdesc", \$action: "hairtype", \$body: \$this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:appearance:hashair">
         X[M] return Call(\$\{Allegory:Lib:UrPeople:Description\}, "updatehairdesc", \$action: "hashair", \$body: \$this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait">
         X[M] int i; 
object * inventory; 
string detail; 
 
if(\$(hook-property) == "trait:stage") return FALSE; 
if(\$(hook-property) == "trait:ownerone") return FALSE; 
if(\$(hook-property) == "trait:ownertwo") return FALSE; 
if(\$(hook-property) == "trait:commands:default") return FALSE; 
if(\$(hook-property) == "trait:commands:extra") return FALSE; 
if(\$(hook-property) == "trait:friends") return FALSE; 
if(\$(hook-property) == "trait:smells") return FALSE; 
if(\$(hook-property) == "trait:smells:lastchecked") return FALSE; 
 
\$(hook-value) = replace_strings(\$(hook-value), ", ", " "); 
 
if(contains(\$(hook-property), "trait:appearance:")) \{ 
    detail = replace_strings(\$(hook-property), "trait:appearance:", ""); 
    inventory = this."base:inventory"; 
    for(i = 0; i \< sizeof(inventory); i++) \{ 
        if(inventory[i]."base:immobile") \{ 
            Set(inventory[i], \$(hook-property), \$(hook-value)); 
            return Call(\$\{Allegory:Lib:Crafting:Lib\}, "replaceadj", \$object: inventory[i], \$detail: detail); 
        \} 
    \} 
\} else \{ 
    return Call(\$\{Allegory:Lib:Crafting:Lib\}, "replaceadj", \$object: this); 
\}
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:stage">
         X[M] if(\$(hook-property) != "trait:stage") return TRUE; 
if(!\$(hook-value)) return TRUE; 
    
Call(\$this, "stop_growth"); 
 
\$stages = Get(\$\{Allegory:Lib:Controls:General\}, "growth:stages"); 
 
if(!\$stages[\$(hook-value)]) \{ 
    EmitTo(\$actor, TAG("Error setting trait:stage to " + Str(\$(hook-value)) + ". No data defined for " + Str(\$(hook-value)) + " in property growth:stages in Allegory:Lib:Controls:General. Aborting...", "imp")); 
    return FALSE; 
\} 
 
Set(\$this, "base:urparent", \$stages[\$(hook-value)][2]); 
Set(\$this, "core:urparent", \$stages[\$(hook-value)][2]); 
 
Call(\$this, "start_growth"); 
 
if(!\$stages[\$(hook-value)]) \{ 
    EmitTo(\$actor, TAG("Done.", "imp")); 
    return FALSE; 
\} 
 
\$this."trait:stage" = nil; 
 
return FALSE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:superbrief">
         X[M] return Call(\$\{Allegory:Lib:UrPeople:Description\}, "updatedesc", \$body: \$this);
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1593880900, "jominey", "E", 1593880905, "jominey", "E", 1593880906, "jominey", "E", 1593881697, "jominey", "K", 1593881982, "jominey", "E", 1593882181, "jominey", "E", 1593882322, "jominey", "E", 1593882370, "jominey", "E", 1593883201, "jominey", "E", 1593883211, "jominey", "E", 1593883217, "jominey", "E", 1593883223, "jominey", "E", 1593883305, "jominey", "E", 1593883317, "jominey", "E", 1593883343, "jominey", "E", 1593883366, "jominey", "E", 1593885055, "jominey", "E", 1593894047, "jominey", "E", 1593894185, "jominey", "E", 1593894212, "jominey", "E", 1593894255, "jominey", "E", 1593894271, "jominey", "E", 1593894280, "jominey", "E", 1593894321, "jominey", "E", 1593894405, "jominey", "E", 1593894428, "jominey", "E", 1593894511, "jominey", "P", 1593894570, "jominey", "E", 1593964195, "jominey", "X", 1595785362, "ezralee", "K", 1609124990, "ezralee", "K", 1609125018, "ezralee", "K", 1609125041, "ezralee", "K", 1609125078, "ezralee", "K", 1610432722, "ezralee", "K", 1610432765, "ezralee", "K", 1610432806, "ezralee", "K", 1610432840, "ezralee", "K", 1610432858, "ezralee", "K", 1610432901, "ezralee", "K", 1610432976, "ezralee", "K", 1700707648, "annemairi", "K" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">1</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
