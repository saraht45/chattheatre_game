<object clone="/base/obj/thing" owner="jominey">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Allegory:Props:Crafting:UrCraftingContainer)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="1" verb2="have buried within your soil" verb3="has buried within its soil"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="sitting" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="planter"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="planters"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             {? | $(this.trait:engraving) | engraved } $(this.trait:color) $(this.trait:material) $(this.trait:brief){? | $(this.trait:planter:inventory) | $[$inv = ({ });   for($i=0; sizeof(this."trait:planter:inventory") && $i<sizeof(this."trait:planter:inventory"); $i++) {       if(this."trait:planter:inventory"[$i]."details:default:hidden" == FALSE)           $inv += ({ this."trait:planter:inventory"[$i] });   }   if(sizeof($inv)) return "that holds " + Describe($inv ,nil,$actor,STYLE_NONPOSS);]|}
          </Base:Description>
          <Base:Description type="examine">
             <a_or_an> {? | $(this.trait:engraving) | engraved } $(this.trait:color) $(this.trait:material) $(this.trait:brief).</a_or_an> $(this.trait:examine) $(this.trait:engraving) $[if($this."trait:planter:inventory" && sizeof($this."trait:planter:inventory") == 1) { $plant = $this."trait:planter:inventory"[0]; }] {? | $(plant) | Planted inside you see  <describe-view view="$(plant)" type="examine" uncap="1"/> | {? | $(this.trait:planter:inventory) | $[$inv = ({ });   for($i=0; sizeof(this."trait:planter:inventory") && $i<sizeof(this."trait:planter:inventory"); $i++) {       if(this."trait:planter:inventory"[$i]."details:default:hidden" == FALSE)           $inv += ({ this."trait:planter:inventory"[$i] });   }   if(sizeof($inv)) return "It holds " + Describe($inv ,nil,$actor,STYLE_NONPOSS);]|}}<sbr/><quality-full/><sbr/> <makers-mark/>
          </Base:Description>
          <Base:Description type="look">
             <a_or_an>{? | $(this.trait:engraving) | engraved } $(this.trait:color) $(this.trait:material) $(this.trait:brief). $(this.trait:engraving) </a_or_an>$[if($this."trait:planter:inventory" && sizeof($this."trait:planter:inventory") == 1) { $plant = $this."trait:planter:inventory"[0]; }] {? | $(plant) | Planted inside you see <describe-view view="$(plant)" type="look" uncap="1"/> | {? | $(this.trait:planter:inventory) | $[$inv = ({ });   for($i=0; sizeof($this."trait:planter:inventory") && $i<sizeof($this."trait:planter:inventory"); $i++) {       if($this."trait:planter:inventory"[$i]."details:default:hidden" == FALSE)           $inv += ({ $this."trait:planter:inventory"[$i] });   }   if(sizeof($inv)) return "It holds " + Describe($inv ,nil,$actor,STYLE_NONPOSS);] |}}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="soil" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="soil"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="soils"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="brown"/>
          <Base:Adjective adjective="dark"/>
          <Base:Adjective adjective="moist"/>
          <Base:Adjective adjective="rich"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             <describe nonposs="TRUE" what="$(this)"/>'s dark brown soil
          </Base:Description>
          <Base:Description type="examine">
             The dark brown soil of <describe nonposs="TRUE" what="$(this)"/>.
          </Base:Description>
          <Base:Description type="look">
             The dark brown soil of <describe nonposs="TRUE" what="$(this)"/>.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:nip:item:cost">
         300
      </Core:Property>
      <Core:Property property="export:plants">1</Core:Property>
      <Core:Property property="export:trait:objecttype">
         "planter"
      </Core:Property>
      <Core:Property property="export:trait:planter:capacity">
         1
      </Core:Property>
      <Core:Property property="export:trait:planter:type">
         "planter"
      </Core:Property>
      <Core:Property property="merry:react-post:prune-dob">
         X[M] if(\$this."trait:planter:inventory" \&\& sizeof(\$this."trait:planter:inventory")) \{  
    \$inventory = \$this."trait:planter:inventory";  
    for(\$i = 0; \$i \< sizeof(\$inventory); \$i++) \{  
        \$plant = \$inventory[\$i];  
        \$pruned = time();  
        \$prunedby = \$actor;  
        \$skill = Int(\$actor."skill:general:gardening");  
  
        if(\$skill \>= plants::get_level(\$plant: \$plant) \|\| \$plant."trait:stage" == 3) \{  
            \$plant."trait:plant:pruned" = (\{ \$pruned, \$prunedby \});  
            if(\$plant."trait:quality" == 0) \$plant."trait:quality" = 1;  
  
            /* Has the timer been started on this plant yet? */  
            if(plants::check_growth(\$plant: \$plant) \&\& \$plant."trait:plant:planter") \{  
                if(!\$plant."handles:growth:timer") \{  
                    Call(\$plant, "grow", \$plant: \$plant, \$stage: \$plant."trait:stage");  
                \}  
            \}  
        \} else \{  
            EmitTo(\$actor, "Upkeep for " + Describe(\$plant) + " will require the hands of a more skilled gardener. At least until it's fully grown.");  
        \}  
    \}  
\}  
  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:water-dob">
         X[M] if(\$this."trait:planter:inventory" \&\& sizeof(\$this."trait:planter:inventory")) \{  
    \$inventory = \$this."trait:planter:inventory";  
    for(\$i = 0; \$i \< sizeof(\$inventory); \$i++) \{  
        \$plant = \$inventory[\$i];  
        \$watered = time();  
        \$wateredby = \$actor;  
        \$skill = Int(\$actor."skill:general:gardening");  
  
        if(\$skill \>= plants::get_level(\$plant: \$plant) \|\| \$plant."trait:stage" == 3) \{  
            \$plant."trait:plant:watered" = (\{ \$watered, \$wateredby \});  
            if(\$plant."trait:quality" == 0) \$plant."trait:quality" = 1;  
  
            /* Has the timer been started on this plant yet? */  
            if(plants::check_growth(\$plant: \$plant) \&\& \$plant."trait:plant:planter") \{  
                if(!\$plant."handles:growth:timer") \{  
                    Call(\$plant, "grow", \$plant: \$plant, \$stage: \$plant."trait:stage");  
                \}  
            \}  
        \} else \{  
            EmitTo(\$actor, "Upkeep for " + Describe(\$plant) + " will require the hands of a more skilled gardener. At least until it's fully grown.");  
        \}  
    \}  
\}  
  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:add-iob">
         X[M] if(!\$dob) return TRUE;   
  
if(NRefOb(\$dob[0])."trait:objecttype" == "fertilizer" \|\| NRefOb(\$dob[0])."trait:objecttype" == "soil") return TRUE;  
  
return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "valid-check", \$addition: \$dob, \$object: \$iob);
      </Core:Property>
      <Core:Property property="merry:react-pre:add-iob%fertilizer">
         X[M] if(!\$dob \|\| !sizeof(\$dob)) \{  
    EmitTo(\$actor, "What did you want to add to " + Describe(\$this, nil, \$actor) + "?");  
    return FALSE;  
\}  
  
if(sizeof(\$dob) \> 1) \{  
    EmitTo(\$actor, "You can only add one thing to " + Describe(\$this, nil, \$actor) + " at a time.");  
    return FALSE;  
\}  
  
\$fertilizer = NRefOb(\$dob[0]);  
  
if(\$fertilizer."base:environment" != \$actor) \{  
    EmitTo(\$actor, "You must be holding " + Describe(\$fertilizer) + ".");  
    return FALSE;  
\}  
  
if(\$fertilizer."trait:objecttype" != "fertilizer") \{  
    return TRUE;  
\}  
  
if(\$this."trait:planter:inventory" \&\& sizeof(\$this."trait:planter:inventory")) \{  
    \$inventory = \$this."trait:planter:inventory";  
    \$fertilized = (\{ \});  
    for(\$i = 0; \$i \< sizeof(\$inventory); \$i++) \{  
        \$plant = \$inventory[\$i];  
        \$skill = Int(\$actor."skill:general:gardening");  
        if(\$skill \>= plants::get_level(\$plant: \$plant) \|\| \$plant."trait:stage" == 3) \{  
 
            if(\$plant."trait:plant:acceptsfertilizer") \{  
 
                if(!\$plant."trait:plant:fertilized") \{  
                    if(!\$fertilizer."trait:empty") \{  
                        if(!Int(\$fertilizer."trait:quality")) \$fertilizer."trait:quality" = 1;  
                        \$plant."trait:plant:fertilized" = Int(\$fertilizer."trait:quality");  
                        \$fertilizer."trait:quantity" = Int(\$fertilizer."trait:quantity") - 1;  
                        if(\$fertilizer."trait:quantity" == 0) \$fertilizer."trait:empty" = "empty";  
                        \$fertilized += (\{ \$plant \});  
                    \}  
                \}  
            \}  
        \} else \{  
            EmitTo(\$actor, "Upkeep for " + Describe(\$plant) + " will require the hands of a more skilled gardener. At least until it's fully grown.");  
        \}  
    \}  
 
    if(!\$fertilized \|\| !sizeof(\$fertilized)) \{  
        EmitTo(\$actor, Describe(\$iob, nil, \$actor) + " does not need fertilizing.");  
        return FALSE;  
    \}  
    \$iob = \$fertilized;  
    EmitTo(\$actor, TAG("You add fertilizer to " + Describe(\$iob, nil, nil, STYLE_NONPOSS) + ".", "social:first"));  
    EmitIn(\$actor."base:environment", TAG(Describe(\$actor) + " adds fertilizer to " + Describe(\$iob, nil, nil, STYLE_NONPOSS) + ".", "social:third"), \$actor);  
\}  
  
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:add-iob%soil">
         X[M] if(!\$dob \|\| !sizeof(\$dob)) \{  
    EmitTo(\$actor, "What did you want to add to " + Describe(\$this, nil, \$actor) + "?");  
    return FALSE;  
\}  
  
if(sizeof(\$dob) \> 1) \{  
    EmitTo(\$actor, "You can only add one thing to " + Describe(\$this, nil, \$actor) + " at a time.");  
    return FALSE;  
\}  
  
\$soil = NRefOb(\$dob[0]);  
  
if(\$soil."trait:objecttype" == "fertilizer") return TRUE;  
  
if(\$soil."base:environment" != \$actor) \{  
    EmitTo(\$actor, "You must be holding " + Describe(\$soil) + ".");  
    return FALSE;  
\}  
  
if(\$soil."trait:objecttype" != "soil") \{  
    return FALSE;  
\}  
  
if(\$this."details:soil:sname:soil") \{  
    EmitTo(\$actor, Describe(\$this, nil, \$actor) + " is already filled with soil.");  
    return FALSE;  
\}  
  
if(\$soil."trait:empty") \{  
    EmitTo(\$actor, Describe(\$soil, nil, \$actor) + " is empty.");  
    return FALSE;  
\}  
  
\$this."details:soil:sname:soil" = TRUE;  
\$this."details:soil:pname:soils" = TRUE;  
  
\$capacity = 1;  
if(\$this."trait:planter:capacity") \{  
    \$capacity = Int(\$this."trait:planter:capacity");  
\}  
  
if(\$capacity \> Int(\$soil."trait:quantity")) \{  
    if(\$capacity == 4) \$fullness = " a full bag";  
    if(\$capacity == 3) \$fullness = " three-quarters of a bag";  
    if(\$capacity == 2) \$fullness = " half a bag";  
    if(\$capacity == 1) \$fullness = " one-quarter of a bag";  
  
    EmitTo(\$actor, "There is not enough soil left to fill the planter. You need" + \$fullness + ".");  
    return FALSE;  
\}  
  
\$soil."trait:quantity" = Int(\$soil."trait:quantity") - \$capacity;  
if(\$soil."trait:quantity" == 0) \$soil."trait:empty" = "empty";  
  
EmitTo(\$actor, TAG("You fill " + Describe(\$this, nil, \$actor) + " with " + Describe(\$soil, nil, \$actor) + ".", "social:first"));  
EmitIn(\$actor."base:environment", TAG(Describe(\$actor) + " fills " + Describe(\$this, \$actor) + " with " + Describe(\$soil, \$actor) + ".", "social:third"), \$actor);  
  
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:empty-dob%soil">
         X[M] if(\$this."base:environment" != \$actor) \{  
    EmitTo(\$actor, "You must be holding " + Describe(\$this) + ".");  
    return FALSE;  
\}  
  
if(\$this."trait:planter:inventory" \&\& sizeof(\$this."trait:planter:inventory")) \{  
    EmitTo(\$actor, "You must first remove all plants from the planter before attempting to empty the soil.");  
    return FALSE;  
\}  
  
if(!\$this."details:soil:sname:soil") \{  
    EmitTo(\$actor, Describe(\$this, nil, \$actor) + " is already empty.");  
    return FALSE;  
\}  
  
\$this."details:soil:sname:soil" = FALSE;  
\$this."details:soil:panme:soils" = FALSE;  
  
EmitTo(\$actor, TAG("You empty the soil from " + Describe(\$this, nil, \$actor) + ".", "social:first"));  
EmitIn(\$actor."base:environment", TAG(Describe(\$actor) + " empties the soil from " + Describe(\$this, \$actor) + ".", "social:third"), \$actor);  
  
return FALSE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1418679625, "jominey", "E", 1418684460, "jominey", "E", 1418684586, "jominey", "E", 1418684906, "jominey", "E", 1418685123, "jominey", "E", 1418685125, "jominey", "E", 1418685172, "jominey", "K", 1418685545, "jominey", "E", 1418685729, "jominey", "E", 1418685941, "jominey", "K", 1418686035, "jominey", "K", 1418686120, "jominey", "K", 1418686148, "jominey", "K", 1418686158, "jominey", "E", 1418686176, "jominey", "K", 1418687124, "jominey", "K", 1418692608, "jominey", "E", 1418692793, "jominey", "E", 1418692831, "jominey", "E", 1418692867, "jominey", "E", 1418692906, "jominey", "E", 1418692932, "jominey", "E", 1418693047, "jominey", "E", 1418693105, "jominey", "E", 1418693116, "jominey", "E", 1418693139, "jominey", "E", 1418693306, "jominey", "E", 1418698358, "jominey", "E", 1418719605, "jominey", "E", 1418719616, "jominey", "E", 1418763357, "jominey", "E", 1418763486, "jominey", "E", 1418763543, "jominey", "E", 1418763819, "jominey", "E", 1418763891, "jominey", "E", 1418764016, "jominey", "E", 1418764036, "jominey", "E", 1418764081, "jominey", "E", 1418764091, "jominey", "E", 1418764805, "jominey", "E", 1418764814, "jominey", "E", 1418764826, "jominey", "E", 1418764844, "jominey", "E", 1418765145, "jominey", "E", 1418765413, "jominey", "E", 1418765442, "jominey", "E", 1418765481, "jominey", "E", 1418767321, "jominey", "E", 1418787601, "jominey", "E", 1418843550, "jominey", "E", 1418843695, "jominey", "E", 1418843777, "jominey", "E", 1418844063, "jominey", "E", 1418844201, "jominey", "K", 1419212550, "jominey", "E", 1419212568, "jominey", "E", 1419212626, "jominey", "E", 1419212677, "jominey", "E", 1419212808, "jominey", "E", 1419212853, "jominey", "E", 1419212881, "jominey", "E", 1419212985, "jominey", "E", 1419213004, "jominey", "E", 1419213025, "jominey", "E", 1419213133, "jominey", "E", 1419213245, "jominey", "E", 1419213453, "jominey", "E", 1419213534, "jominey", "E", 1419213592, "jominey", "E", 1419213674, "jominey", "E", 1419213713, "jominey", "E", 1419213785, "jominey", "E", 1419213809, "jominey", "E", 1419213848, "jominey", "E", 1419213877, "jominey", "E", 1419214076, "jominey", "E", 1419214142, "jominey", "E", 1419214177, "jominey", "E", 1431980391, "slurpeeslurp", "K", 1457760346, "ezralee", "X", 1520012796, "jominey", "K", 1520012820, "jominey", "K", 1520013501, "jominey", "E", 1520013588, "jominey", "E", 1520014233, "jominey", "K", 1520014256, "jominey", "K", 1520014295, "jominey", "K", 1524934485, "harpdragon", "K", 1527543894, "jominey", "K", 1527544742, "jominey", "K", 1527544761, "jominey", "K", 1527544844, "jominey", "K", 1528310659, "jominey", "E", 1528310856, "jominey", "E", 1528310950, "jominey", "E", 1528311042, "jominey", "E", 1528311263, "jominey", "E", 1528311340, "jominey", "E", 1528311396, "jominey", "E", 1528311474, "jominey", "E", 1528579769, "jominey", "E", 1528580228, "jominey", "E", 1528585532, "jominey", "E", 1538700140, "jominey", "K", 1538701392, "jominey", "K", 1539820028, "jominey", "K", 1539820207, "jominey", "K", 1539820239, "jominey", "K", 1539820318, "jominey", "K", 1539820373, "jominey", "K", 1539820397, "jominey", "K", 1539820459, "jominey", "K", 1539820528, "jominey", "K", 1539820564, "jominey", "K", 1572189971, "sendnoodlez", "X", 1642058074, "ezralee", "R" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
