<object clone="/base/obj/thing" owner="sendnoodlez">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="0.001" density="0.1"/>
    <Base:Container flexible="true" transparent-container="false" public-container="false" tight="false" capacity="0.5" maxweight="10" verb2="are carrying" verb3="is carrying"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="lying" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="objskin" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="envelope"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="envelopes"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="average"/>
          <Base:Adjective adjective="ordinary"/>
          <Base:Adjective adjective="plain"/>
          <Base:Adjective adjective="plain-looking"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             {? | $(this.seal:broken) | broken} {? | $(this.seal:type) | sealed } {? | $(this.trait:embossing) | embossed } $(this.trait:color) $(this.trait:material) envelope
          </Base:Description>
          <Base:Description type="examine">
             A $(this.trait:color) $(this.trait:material) envelope. $(this.trait:embossing) {? | $(this.seal:type) | {? | $(this.seal:variation) | $(this.seal:variation) | It has been stamped with a wax seal. }}  {? | $(this.seal:broken) | The seal has been broken. }<makers-mark/> <sbr/> <quality-full/>
          </Base:Description>
          <Base:Description type="look">
             A $(this.trait:color) $(this.trait:material)  envelope. $(this.trait:embossing) {? | $(this.seal:type) | {? | $(this.seal:variation) | $(this.seal:variation) | It has been stamped with a wax seal. }}  {? | $(this.seal:broken) | The seal has been broken. }
          </Base:Description>
          <Base:Description type="pbrief">
             {? | $(this.seal:broken) | broken} {? | $(this.seal:type) | sealed } {? | $(this.trait:embossing) | embossed } $(this.trait:color) $(this.trait:material) envelopes
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="true" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="seal" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             official-looking seal
          </Base:Description>
          <Base:Description type="examine">
             The symbol representing $(this.seal:variation) has been stamped in wax{? | $(this.seal:type) |, signifying that this is an official document of $(this.seal:type)}. {? | $(this.seal:broken) | The seal has been broken. }
          </Base:Description>
          <Base:Description type="look">
             This envelope has been stamped with a wax seal {? | $(this.seal:type) |of $(this.seal:type)} {? | $(this.seal:broken) | that has been broken}.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="10"/>
      <Base:MaxFatigue value="100"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties>
      <Base:InitialProperty property="bilbo:inherit:react:chant">
         \<Generic:DB:ScrollDB\>
      </Base:InitialProperty>
      <Base:InitialProperty property="bilbo:inherit:react:cite">
         \<Generic:DB:ScrollDB\>
      </Base:InitialProperty>
      <Base:InitialProperty property="bilbo:inherit:react:instruct">
         \<Generic:DB:ScrollDB\>
      </Base:InitialProperty>
      <Base:InitialProperty property="bilbo:inherit:react:orate">
         \<Generic:DB:ScrollDB\>
      </Base:InitialProperty>
      <Base:InitialProperty property="bilbo:inherit:react:preach">
         \<Generic:DB:ScrollDB\>
      </Base:InitialProperty>
      <Base:InitialProperty property="bilbo:inherit:react:recite">
         \<Generic:DB:ScrollDB\>
      </Base:InitialProperty>
      <Base:InitialProperty property="bilbo:inherit:react:sing">
         \<Generic:DB:ScrollDB\>
      </Base:InitialProperty>
      <Base:InitialProperty property="bilbo:inherit:react:translate">
         \<Generic:DB:ScrollDB\>
      </Base:InitialProperty>
      <Base:InitialProperty property="writable">
         "1"
      </Base:InitialProperty>
    </Base:InitialProperties>
    <Core:Properties>
      <Core:Property property="bilbo:inherit:react:chant">
         \<Generic:DB:ScrollDB\>
      </Core:Property>
      <Core:Property property="bilbo:inherit:react:cite">
         \<Generic:DB:ScrollDB\>
      </Core:Property>
      <Core:Property property="bilbo:inherit:react:instruct">
         \<Generic:DB:ScrollDB\>
      </Core:Property>
      <Core:Property property="bilbo:inherit:react:orate">
         \<Generic:DB:ScrollDB\>
      </Core:Property>
      <Core:Property property="bilbo:inherit:react:preach">
         \<Generic:DB:ScrollDB\>
      </Core:Property>
      <Core:Property property="bilbo:inherit:react:recite">
         \<Generic:DB:ScrollDB\>
      </Core:Property>
      <Core:Property property="bilbo:inherit:react:sing">
         \<Generic:DB:ScrollDB\>
      </Core:Property>
      <Core:Property property="bilbo:inherit:react:translate">
         \<Generic:DB:ScrollDB\>
      </Core:Property>
      <Core:Property property="bilbo:solo:refresh">
         "run"
      </Core:Property>
      <Core:Property property="bilbo:solo:refresh:0010">
         "set this.scrollrefreshtemp to \$lookup(Generic:DB:ScrollDB)"
      </Core:Property>
      <Core:Property property="bilbo:solo:refresh:0020">
         "set this.bilbo:inherit:react:chant to this.scrollrefreshtemp"
      </Core:Property>
      <Core:Property property="bilbo:solo:refresh:0030">
         "set this.bilbo:inherit:react:cite to this.scrollrefreshtemp"
      </Core:Property>
      <Core:Property property="bilbo:solo:refresh:0040">
         "set this.bilbo:inherit:react:instruct to this.scrollrefreshtemp"
      </Core:Property>
      <Core:Property property="bilbo:solo:refresh:0050">
         "set this.bilbo:inherit:react:sing to this.scrollrefreshtemp"
      </Core:Property>
      <Core:Property property="bilbo:solo:refresh:0060">
         "set this.bilbo:inherit:react:orate to this.scrollrefreshtemp"
      </Core:Property>
      <Core:Property property="bilbo:solo:refresh:0070">
         "set this.bilbo:inherit:react:preach to this.scrollrefreshtemp"
      </Core:Property>
      <Core:Property property="bilbo:solo:refresh:0080">
         "set this.bilbo:inherit:react:recite to this.scrollrefreshtemp"
      </Core:Property>
      <Core:Property property="bilbo:solo:refresh:0090">
         "set this.bilbo:inherit:react:translate to nil"
      </Core:Property>
      <Core:Property property="bilbo:solo:refresh:0100">
         "set writable 1"
      </Core:Property>
      <Core:Property property="bilbo:solo:refresh:0110">
         "set this.scrollrefreshtemp to nil"
      </Core:Property>
      <Core:Property property="export:nip:item:cost">
         0
      </Core:Property>
      <Core:Property property="export:trait:sealable">
         1
      </Core:Property>
      <Core:Property property="export:trait:trash">1</Core:Property>
      <Core:Property property="merry:inherit:react-pre:emboss-dob">
         \<Allegory:Lib:Crafting:Custom:Embossing\>
      </Core:Property>
      <Core:Property property="merry:react-pre:erase-what">
         X[M] if(\$this."seal:type") \{       
    EmitTo(\$actor, "You cannot erase sealed documents.");       
    return FALSE;       
\}       
       
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:open-what">
         X[M] if(\$this."seal:type") \{       
    EmitTo(\$actor, "You cannot open sealed documents.");       
    return FALSE;       
\}       
       
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:seal-what">
         X[M] if (member("objskin", NRefOb(\$what[0])."base:closeddoors")) \{  
  EmitTo(\$actor, "You cannot seal " + Describe(\$what, nil, \$actor) + "; it is open.");
\}  
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:sign-what">
         X[M] if(\$this."seal:type") \{       
    EmitTo(\$actor, "You cannot modify a document that has already been signed and sealed.");       
    return FALSE;       
\}       
       
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:write-what">
         X[M] if(\$this."seal:type") \{       
    EmitTo(\$actor, "You cannot modify a document that has already been signed and sealed.");       
    return FALSE;       
\}       
       
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:break-dob">
         X[M] if (NRefDetail(\$target) ==  "seal") \{      
  EmitIn(\$actor."base:environment", Describe(\$actor)+" breaks the seal. It may now be opened.");      
  if (\$this."seal:type") \{               
    \$this."seal:type" = FALSE;     
Set(\$this, "seal:broken", TRUE);    
Set(\$this, "details:seal:sname:seal", TRUE);              
  \}               
  return FALSE;       
\}      
return TRUE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:color">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:material">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="misc:lastdopped">
         "1048692858 /usr/SkotOS/merry/fe76fdbb6793c3e6fedfa42659af22d0"
      </Core:Property>
      <Core:Property property="nip:item:cost">0</Core:Property>
      <Core:Property property="revisions">
         (\{ 1170617073, "necate", "E", 1172544909, "tonyd", "E", 1172544951, "tonyd", "E", 1172545016, "tonyd", "E", 1174582510, "tunk_bodin", "E", 1174582644, "tunk_bodin", "E", 1174582665, "tunk_bodin", "E", 1174583948, "tunk_bodin", "E", 1174584099, "tunk_bodin", "E", 1174584337, "tunk_bodin", "E", 1175593500, "necate", "E", 1175668147, "necate", "E", 1176609116, "necate", "E", 1179875288, "necate", "K", 1570056667, "sendnoodlez", "K", 1570114018, "sendnoodlez", "K", 1570114319, "sendnoodlez", "K", 1570114338, "sendnoodlez", "K", 1570114629, "sendnoodlez", "X", 1570114965, "sendnoodlez", "X", 1572904495, "sendnoodlez", "X", 1585408848, "sendnoodlez", "X", 1585408920, "sendnoodlez", "K", 1585409047, "sendnoodlez", "X", 1585409107, "sendnoodlez", "E", 1585409751, "sendnoodlez", "X", 1585409809, "sendnoodlez", "X", 1585409896, "sendnoodlez", "E", 1585410000, "sendnoodlez", "E", 1585410113, "sendnoodlez", "E", 1585410315, "sendnoodlez", "E", 1585410346, "sendnoodlez", "E", 1585410416, "sendnoodlez", "E", 1585410469, "sendnoodlez", "E", 1585410695, "sendnoodlez", "E", 1585410754, "sendnoodlez", "E", 1585412305, "sendnoodlez", "E", 1585414076, "jominey", "E", 1585414328, "jominey", "E", 1586999885, "sendnoodlez", "K" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">100.0</Core:Property>
      <Core:Property property="trait:symbol:expert">
         "Embosser"
      </Core:Property>
      <Core:Property property="trait:symboladj">
         "embossed"
      </Core:Property>
      <Core:Property property="trait:symboltype">
         "embossing"
      </Core:Property>
      <Core:Property property="volition">0</Core:Property>
      <Core:Property property="writable">"1"</Core:Property>
    </Core:Properties>
    <Notes:Notes>
      <Notes:Category cat="QA" catstate="Open">
        <Notes:Note ix="966637404" state="Open" user="michaelb">
           The basic, original scroll.
        </Notes:Note>
      </Notes:Category>
    </Notes:Notes>
  </Base:Thing>
</object>
