<object clone="/base/obj/thing" owner="ezralee">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Allegory:Props:Furniture:UrFurnitureContainer)"/>
    <Base:Bulk immobile="false" mass="0.1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="true" tight="false" capacity="1" maxweight="1" verb3="also features"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="thing"/>
            <Base:SName sname="item"/>
            <Base:SName sname="everything"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="items"/>
            <Base:PName pname="stuff"/>
            <Base:PName pname="things"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="10"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="merry:lib:add_detail">
         X[M] int i;

\$max = Int(Get(\$this, "trait:accepts")[NRefOb(\$detail)."trait:objecttype"]);

\$detailName = nil;
for(i = 0; i \< \$max; i++) \{
    if(!sizeof(Get(\$this, "details:" + NRefOb(\$detail)."trait:objecttype" + Str(i) + ":snames"))) \{
        \$detailName = "details:" + NRefOb(\$detail)."trait:objecttype" + Str(i);
    \}
\}

if(!\$detailName) \{
    EmitTo(\$actor, "You cannot add another " + NRefOb(\$detail)."trait:objecttype" + " to " + Describe(\$this) + ".");
    \$accepted -= (\{ \$detail \});
    return FALSE;
\}

\$test = NRefOb(\$detail);
\$brief = UnSAM(ParseXML(replace_strings(dump_value(NRefOb(\$detail)."details:default:description:brief"), "\$(this", "\$(test", "\\"", "", "X[S] ", "")));
Set(\$this, \$detailName + ":description:brief:local", strip_left(\$brief));

\$look = UnSAM(ParseXML(replace_strings(dump_value(NRefOb(\$detail)."details:default:description:look"), "\$(this", "\$(test", "\\"", "", "X[S] ", "")));
Set(\$this, \$detailName + ":description:look:local", strip_left(\$look));

\$examine = UnSAM(ParseXML(replace_strings(dump_value(NRefOb(\$detail)."details:default:description:examine"), "\$(this", "\$(test", "\\"", "", "X[S] ", "")));
Set(\$this, \$detailName + ":description:examine:local", strip_left(\$examine));

\$snames = NRefOb(\$detail)."details:default:snames";
for(i = 0; i \< sizeof(\$snames); i++) \{
    Set(\$this, \$detailName + ":sname:" + \$snames[i], TRUE);
\}

\$pnames = NRefOb(\$detail)."details:default:pnames";
for(i = 0; i \< sizeof(\$pnames); i++) \{
    Set(\$this, \$detailName + ":pname:" + \$pnames[i], TRUE);
\}


\$adjectives = NRefOb(\$detail)."details:default:adjectives";
for(i = 0; i \< sizeof(\$adjectives); i++) \{
    Set(\$this, \$detailName + ":adjective:" + \$adjectives[i], TRUE);
\}

Set(\$this, \$detailName + ":prepositions:close to", TRUE);              
Set(\$this, \$detailName + ":prepositions:against", TRUE);           
Set(\$this, \$detailName + ":prepositions:under", TRUE);           
Set(\$this, \$detailName + ":prepositions:in", TRUE);           
Set(\$this, \$detailName + ":prepositions:near", TRUE);             
Set(\$this, \$detailName + ":prepositions:over", TRUE);           
Set(\$this, \$detailName + ":prepositions:behind", TRUE);           
Set(\$this, \$detailName + ":prepositions:before", TRUE);           
Set(\$this, \$detailName + ":prepositions:beside", TRUE);            
Set(\$this, \$detailName + ":prepositions:on", TRUE);

/* Save the object data */
Set(\$this, \$detailName, (\{ NRefOb(\$detail)."core:ur:parent", Get(NRefOb(\$detail), "*") \}));

/* Slay the object */
Slay(NRefOb(\$detail));

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:remove_detail">
         X[M] int i;

\$detailName = "details:" + \$detail;

Set(\$this, \$detailName + ":description:brief:local", nil);
Set(\$this, \$detailName + ":description:look:local", nil);
Set(\$this, \$detailName + ":description:examine:local", nil);

\$snames = Get(NRefOb(\$this), \$detailName + ":snames");
for(i = 0; i \< sizeof(\$snames); i++) \{
    Set(\$this, \$detailName + ":sname:" + \$snames[i], FALSE);
\}

\$pnames = Get(NRefOb(\$this), \$detailName + ":pnames");
for(i = 0; i \< sizeof(\$pnames); i++) \{
    Set(\$this, \$detailName + ":pname:" + \$pnames[i], FALSE);
\}
Set(\$this, \$detailName + ":pnames", nil);
Set(\$this, \$detailName + ":pnames:local", nil);

\$adjectives = Get(NRefOb(\$this), \$detailName + ":adjectives");
for(i = 0; i \< sizeof(\$adjectives); i++) \{
    Set(\$this, \$detailName + ":adjective:" + \$adjectives[i], FALSE);
\}
Set(\$this, \$detailName + ":adjectives", nil);
Set(\$this, \$detailName + ":adjectives:local", nil);



\$data = Get(\$this, \$detailName);

\$ob = Spawn(\$data[0]);
\$properties = \$data[1];
\$temp = map_indices(\$properties);
for(i = 0; i \< sizeof(\$temp); i++) \{
    Set(\$ob, \$temp[i], \$properties[\$temp[i]]);
\}
\$ob."base:environment" = \$actor;

Set(\$this, \$detailName, nil);

return \$ob;
      </Core:Property>
      <Core:Property property="merry:react-post:add-iob%1234">
         X[M] return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:place-where%bugfix">
         X[M] return FALSE;
if(!\$what) return TRUE;
if(!sizeof(\$what)) return TRUE;

if(\$verb == "stand") \$stance = 5; else \$stance = 0;

if(\$(where:preposition) != "in" \&\& \$(where:preposition) != "into") \{
    for(\$i = 0; \$i \< sizeof(\$what); \$i++) \{
        Set(NRefOb(\$what[\$i]), "base:environment", NRefOb(\$target)."base:environment");
        Set(NRefOb(\$what[\$i]), "base:proximity", \$target);
        Set(NRefOb(\$what[\$i]), "base:stance", \$stance);
        Set(NRefOb(\$what[\$i]), "base:preposition", \$obprep);
    \}
\}

EmitTo(\$actor, "You " + \$verb + " " + Describe(\$what) + " on " + Describe(\$this) + ".");
EmitIn(\$actor."base:environment", Describe(\$actor) + " " + \$verb + "s " + Describe(\$what) + " on " + Describe(\$this) + ".");

return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:add-iob%1234">
         X[M] int i;

/* sanity check */
if(!\$dob \|\| !sizeof(\$dob)) return TRUE;

if(Get(\$this, "alteration:add:default:" + NRefOb(\$dob[0])."trait:objecttype")) \{
    return TRUE;
\}

if(!\$this."trait:accepts") \{
    EmitTo(\$actor, "You cannot store " + Describe(\$dob, nil, \$actor) + " in " + Describe(this, nil, \$actor) + ".");
    return FALSE;
\}

if(!map_sizeof(\$this."trait:accepts")) \{
    EmitTo(\$actor, "You cannot store " + Describe(\$dob, nil, \$actor) + " in " + Describe(this, nil, \$actor) + ".");
    return FALSE;
\}

\$accepts = map_indices(\$this."trait:accepts");
\$accepted = (\{ \});
\$notaccepted = (\{ \});
for(i = 0; i \< sizeof(\$dob); i++) \{
    if(member(Str(NRefOb(\$dob[i])."trait:objecttype"), \$accepts)) \{
        \$accepted \|= (\{ \$dob[i] \});
    \} else \{
        \$notaccepted \|= (\{ \$dob[i] \});
    \}
    /* sanity check: check they have no child objects */
    if(NRefOb(\$dob[i])."core:ur:firstchild") \{
        EmitTo(\$actor, "You cannot store " + Describe(\$dob[i], nil, \$actor) + " in " + Describe(this, nil, \$actor) + ".");
        return FALSE;
    \}
\}

if(!sizeof(\$accepted)) \{
    EmitTo(\$actor, "You cannot store " + Describe(\$notaccepted, nil, \$actor) + " in " + Describe(this, nil, \$actor) + ".");
    return FALSE;
\}

\$dob = \$accepted;

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:place-where%bugfix">
         X[M] if(!\$what) return TRUE;
if(!sizeof(\$what)) return TRUE;

if(\$verb == "stand") \$stance = 5; else \$stance = 0;

if(\$(where:preposition) != "in" \&\& \$(where:preposition) != "into") \{
    for(\$i = 0; \$i \< sizeof(\$what); \$i++) \{
        Set(NRefOb(\$what[\$i]), "base:environment", NRefOb(\$target)."base:environment");
        Set(NRefOb(\$what[\$i]), "base:proximity", \$target);
        Set(NRefOb(\$what[\$i]), "base:stance", \$stance);
        Set(NRefOb(\$what[\$i]), "base:preposition", \$obprep);
    \}

    EmitTo(\$actor, "You " + \$verb + " " + Describe(\$what) + " on " + Describe(\$target) + ".");
    EmitIn(\$actor."base:environment", Describe(\$actor) + " " + \$verb + "s " + Describe(\$what) + " on " + Describe(\$target) + ".", \$actor);

    return FALSE;
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:take">
         X[M] if(NRefDetail(\$target) != "default" \&\& \$this."trading:seller") \{
    EmitTo(\$actor, "You cannot take anything from " + Describe(\$this) + " while it is for sale.");
    return FALSE;
\}

if(NRefOb(\$target)."base:environment" != \$actor \&\& NRefOb(\$target)."base:environment" != \$actor."base:environment" \|\| \$this."base:integration") \{
    \$env = NRefOb(\$target)."base:environment";
    \$found = 0;
    while(\$env \&\& !\$found) \{
        if(\$env."base:environment" \&\& \$env."base:environment"."udat:possessed" \&\& \$env."base:environment" != \$actor) \{
            \$env = nil;
        \} else \{
            if(\$env."base:environment" == \$actor \|\| \$env."base:environment" == \$actor."base:environment") \{
                \$found = 1;
            \} else \{
                \$env = \$env."base:environment";
            \}
        \}
    \}

    if(!\$found) \{
        EmitTo(\$actor, "You cannot take " + Describe(\$target) + " because it is not yours.");
        return FALSE;
    \}
\}

if(NRefDetail(\$target) == "default") return TRUE;

if(!Get(\$this, "details:" + NRefDetail(\$target))) return TRUE;

\$target = NewNRef(::remove_detail(\$detail: NRefDetail(\$target)), "default");

EmitTo(\$actor, TAG("You take " + Describe(\$target, nil, nil, STYLE_NONPOSS) + " from " + Describe(\$this, nil, nil, STYLE_NONPOSS) + ".", "social:first"));
EmitIn(\$actor."base:environment", TAG(Describe(\$actor) + " takes " + Describe(\$target, nil, nil, STYLE_NONPOSS) + " from " + Describe(\$this, nil, nil, STYLE_NONPOSS) + ".", "social:third"), \$actor);

return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:take-from">
         X[M] if(NRefOb(\$targets)) \{
    if(NRefOb(\$targets) != \$this \&\& !NRefOb(\$targets)."base:integration") \{
        return TRUE;
    \}
\}

if(NRefOb(\$target)."base:environment" != \$actor \&\& NRefOb(\$target)."base:environment" != \$actor."base:environment" \|\| \$this."base:integration") \{
    EmitTo(\$actor, "You cannot take " + Describe(\$targets) + " because it is not yours.");
    return FALSE;
\}

if(NRefDetail(\$target) == "default") return TRUE;

if(!Get(\$this, "details:" + NRefDetail(\$target))) return TRUE;

\$target = NewNRef(::remove_detail(\$detail: NRefDetail(\$target)), "default");

EmitTo(\$actor, TAG("You take " + Describe(\$target, nil, nil, STYLE_NONPOSS) + " from " + Describe(\$this, nil, nil, STYLE_NONPOSS) + ".", "social:first"));
EmitIn(\$actor."base:environment", TAG(Describe(\$actor) + " takes " + Describe(\$target, nil, nil, STYLE_NONPOSS) + " from " + Describe(\$this, nil, nil, STYLE_NONPOSS) + ".", "social:third"), \$actor);

return FALSE;
      </Core:Property>
      <Core:Property property="merry:react:add-iob%1234">
         X[M] int i;

/* sanity check */
if(!\$dob \|\| !sizeof(\$dob)) return TRUE;

if(Get(\$this, "alteration:add:default:" + NRefOb(\$dob[0])."trait:objecttype")) \{
    return TRUE;
\}

for(i = 0; i \< sizeof(\$dob); i++) \{
    ::add_detail(\$detail: \$dob[i]);
\}

EmitTo(\$actor, TAG("You add " + Describe(\$accepted, nil, nil, STYLE_NONPOSS) + " to " + Describe(\$this, nil, nil, STYLE_NONPOSS) + ".", "social:first"));
EmitIn(\$actor."base:environment", TAG(Describe(\$actor) + " adds " + Describe(\$accepted, nil, nil, STYLE_NONPOSS) + " to " + Describe(\$this, nil, nil, STYLE_NONPOSS) + ".", "social:third"), \$actor);

return FALSE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1579706802, "jominey", "E", 1579706832, "jominey", "E", 1579707291, "jominey", "E", 1579707301, "jominey", "E", 1579707441, "jominey", "E", 1579707493, "jominey", "E", 1579707760, "jominey", "E", 1579967776, "jominey", "E", 1579967818, "jominey", "E", 1579967886, "jominey", "E", 1580012297, "jominey", "E", 1582993154, "jominey", "E", 1582993226, "jominey", "E", 1582993394, "jominey", "E", 1582993428, "jominey", "E", 1582993452, "jominey", "E", 1582993486, "jominey", "E", 1583171430, "jominey", "E", 1585272341, "jominey", "E", 1585272365, "jominey", "E", 1585272411, "jominey", "E", 1585272435, "jominey", "E", 1585272451, "jominey", "E", 1585272576, "jominey", "E", 1585272663, "jominey", "E", 1596936857, "jominey", "E", 1613614015, "ezralee", "E", 1613614156, "ezralee", "E", 1613614188, "ezralee", "E", 1630640667, "ezralee", "R" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
