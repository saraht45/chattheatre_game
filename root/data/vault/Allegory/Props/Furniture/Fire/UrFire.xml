<object clone="/base/obj/thing" owner="jominey">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Allegory:Props:Furniture:UrFurnitureSet)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="1" verb2="also features"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="standing" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="grate" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="grate"/>
            <Base:SName sname="grill"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="grates"/>
            <Base:PName pname="grills"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="fireplace"/>
          <Base:Adjective adjective="iron"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the fireplace grate
          </Base:Description>
          <Base:Description type="look">
             An iron grate beneath the logs in the fireplace allows smoke from the lower floors to flow upward safely through the chimney.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="logs" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="log"/>
            <Base:SName sname="fire"/>
            <Base:SName sname="pile"/>
            <Base:SName sname="flame"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="logs"/>
            <Base:PName pname="piles"/>
            <Base:PName pname="flames"/>
            <Base:PName pname="fire"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="flaming"/>
          <Base:Adjective adjective="log"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             {? | $(this.trait:lit) | warm, cheerful fire| pile of logs}
          </Base:Description>
          <Base:Description type="examine">
             A pile of logs rests on an iron rack within the fireplace.  A grate beneath the logs leads down through the chimney into the lower floors. {? | $(this.trait:lit) |The logs are engulfed in warm flames.}
          </Base:Description>
          <Base:Description type="look">
             A pile of logs rests on an iron rack within the fireplace. {? | $(this.trait:lit) |The logs are engulfed in warm flames.}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="bak:export:alteration:add:default:mantel">
         ([ "adj-prop":(\{ "trait:color", "trait:material" \}), "names":(\{ (\{ "sname", "mantel" \}), (\{ "pname", "mantels" \}) \}), "properties":(\{ (\{ "trait:color", "trait:mantel:color" \}), (\{ "trait:material", "trait:mantel:material" \}), (\{ "trait:brief", "trait:mantel:brief" \}), (\{ "trait:examine", "trait:mantel:examine" \}), (\{ "trait:engraving", "trait:mantel:engraving" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:alteration:add:default:fireguard">
         ([ "adj-prop":(\{ "trait:color", "trait:material" \}), "names":(\{ (\{ "sname", "fireguard" \}), (\{ "pname", "fireguards" \}), (\{ "sname", "guard" \}), (\{ "pname", "guards" \}) \}), "properties":(\{ (\{ "trait:color", "trait:fireguard:color" \}), (\{ "trait:material", "trait:fireguard:material" \}), (\{ "trait:brief", "trait:fireguard:brief" \}), (\{ "trait:examine", "trait:fireguard:examine" \}), (\{ "trait:engraving", "trait:fireguard:engraving" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:lightsource:emits">
         X[S] \{ A burning stick pops within THIS. \| THIS warms HERE as the flames crackle and dance. \| THIS fills HERE with a golden glow from the dancing flames within. \| Faint wisps of smoke from THIS trail upward in lazy curls. \| The subtle scent of wood smoke fills HERE as the fire merrily burns within THIS. \| Firelight from THIS illuminates the surrounding area, the shadows on the periphery dancing with the movement of the flames. \| Coals burning within THIS cast a soft red light onto the surroundings. \| You hear a crackling from the coals in THIS. \| THIS warms HERE as the flames dance around the burning logs. \| Dancing flames within THIS illuminate HERE in a dance of flickering light. \| The soft crackle of the fire within THIS fills HERE with a soothing sound. \| HERE is gradually warmed by the golden dancing flames within THIS. \| The burning logs within THIS shift amid a spray of small sparks. \| THIS casts a golden glow over HERE as the flames crackle and dance over the logs. \| Softly sputtering, the flames inside THIS warm the surrounding area. \| \| \| \| \| \| \| \}
      </Core:Property>
      <Core:Property property="export:trait:accepts">
         ([ "mantel":1 ])
      </Core:Property>
      <Core:Property property="export:trait:objecttype">
         "firesource"
      </Core:Property>
      <Core:Property property="merry:lib:emitter">
         X[M] object env;

\$env = \$this."base:environment"; 

for(\$i = 0; \$i \< 30 \&\& \$this."trait:lit"; \$i++) \{
    if(\$this."lightsource:emits") \{ 
        /* If held by someone, emit to chatter's environment, otherwise emit to light source's environment. */ 
        if(\$env."udat:possessed") \{ 
           /* Emit to holder. */ 
           EmitTo(\$env, capitalize(strip(replace_strings(UnSAM(\$this."lightsource:emits"), "THIS", Describe(\$this, nil, \$env), "HERE", Describe(\$env."base:environment"))))); 
 
           /* Emit to environment. */ 
           EmitIn(\$env."base:environment", capitalize(strip(replace_strings(UnSAM(\$this."lightsource:emits"), "THIS", Describe(\$this), "HERE", Describe(\$env."base:environment")))), \$env); 
        \} else \{ 
            /* Emit to environment. */ 
            EmitIn(\$env, capitalize(strip(replace_strings(UnSAM(\$this."lightsource:emits"), "THIS", Describe(\$this), "HERE", Describe(\$env))))); 
        \}
    \}
 
    \$delay(random(30) + 90, FALSE, "9c95");
\}
     
\$delay(10, FALSE, "2a6f");

if(\$i == 30) EmitIn(\$this."base:environment", "The flames within " + Describe(\$this) + " slowly die out.");     
Set(\$this, "details:logs:luminosity", 0.0);  
\$this."trait:lit" = nil;  
\$this."cooking:heatsource" = nil;
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:take">
         X[M] \$this.installed = nil; 
 
\$this."trait:lit" = nil; 
\$this."cooking:heatsource" = nil;
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:extinguish-dob">
         X[M] if (NRefDetail(\$target) == "logs")               
  \{    
  if (!\$this."trait:lit")   
    \{     
    EmitTo( \$actor, "The logs in "+Describe(\$this)+" are not lit." );  
    return FALSE;  
    \}             
  if (\$this."trait:lit")   
    \{     
    EmitTo( \$actor, "With a hiss you extinguish the fire within "+Describe(\$this)+"." );                  
    EmitIn( \$actor."base:environment", "With a hiss you see "+Describe(\$actor)+" extinguish the fire within "+Describe(\$this)+".", \$actor );     
    Set(\$this, "details:logs:luminosity", 0.0);  
    \$this."trait:lit" = nil;    
    \$this."cooking:heatsource" = nil;          
    \}  
  \}
      </Core:Property>
      <Core:Property property="merry:react-pre:light-dob">
         X[M] if(!\$this.installed) \{
    EmitTo(\$actor, "You must install the fireplace before lighting it. [OOC: Place the fireplace against a wall or in a corner of a room that you or your guild owns.]");
    return FALSE;
\}

if (NRefDetail(\$target) == "logs")               
  \{  
  if (\$this."trait:lit")   
    \{     
    EmitTo( \$actor, "The logs in "+Describe(\$this)+" are already lit." );  
    return FALSE;  
    \}               
  if (!\$this."trait:lit")   
    \{     
    EmitTo( \$actor, "You light the logs within "+Describe(\$this)+", bringing a warm bright glow to the space." );                  
    EmitIn( \$actor."base:environment", "You see "+Describe(\$actor)+" light the logs within "+Describe(\$this)+", bringing a warm bright glow to " + Describe(\$actor."base:environment") + ".", \$actor );     
    Set(\$this, "details:logs:luminosity", 20.0);  
    \$this."trait:lit" = 1;
    \$this."cooking:heatsource" = 1;   
    ::emitter();           
    return FALSE;
    \}  
  \}

EmitTo(\$actor, "You would have better luck lighting the logs.");

return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:place-what">
         X[M] if(!\$where) \{ 
    /*  EmitTo(\$actor, "Where do you want to install " + Describe(\$this, nil, \$actor) + "?"); */ 
    return TRUE; 
\} 
 
/* Allow for storage in containers */ 
if(NRefOb(\$where[0]) != \$actor."base:environment") return TRUE; 
 
/* If putting in room, check to see if wall detail is being targeted */ 
/* If not, drop fireplace as normal. Do not allow it to be lit. */ 
\$detail = NRefDetail(\$where[0]); 
 
if(\$detail != "wall-west" \&\& \$detail != "wall-east" \&\& \$detail != "wall-north" \&\& \$detail != "wall-south" \&\& \$detail != "corner-northwest" \&\& \$detail != "corner-northeast" \&\& \$detail != "corner-southwest" \&\& \$detail != "corner-southeast") \{ 
    return TRUE; 
\} 
 
/* Trying to install against a wall. Make sure the character has permission. */ 
if(NRefOb(\$where[0]).homeowner != \$actor \&\& NRefOb(\$where[0]).guildowner != \$actor.guild \&\& !NRefOb(\$where[0]).underconstruction) \{ 
    EmitTo(\$actor, "You do not own this room and therefore cannot install a fireplace here."); 
    return FALSE; 
\} 
 
\$this.installed = TRUE; 
 
\$delay(3, TRUE, "a709"); 
 
EmitTo(\$actor, TAG(Describe(\$this) + " has been installed and can now be used.", "imp")); 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:place-where">
         X[M] return TRUE;
      </Core:Property>
      <Core:Property property="new property name">
         "New Property Value"
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1575942198, "jominey", "E", 1575942222, "jominey", "E", 1582992716, "jominey", "E", 1582992723, "jominey", "E", 1595517418, "jominey", "E", 1647998151, "ezralee", "E", 1647998591, "ezralee", "E", 1651019711, "ezralee", "E", 1697339183, "ezralee", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
