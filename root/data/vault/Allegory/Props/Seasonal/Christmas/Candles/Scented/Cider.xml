<object clone="/base/obj/thing" owner="ezralee">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(IronClaw:Props:Lighting:Source:UrLightSourceEmitter)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="standing" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="candle"/>
            <Base:SName sname="tallow"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="candles"/>
            <Base:PName pname="tallows"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="apple"/>
          <Base:Adjective adjective="cider"/>
          <Base:Adjective adjective="light"/>
          <Base:Adjective adjective="mulled"/>
          <Base:Adjective adjective="pillar"/>
          <Base:Adjective adjective="sage"/>
          <Base:Adjective adjective="wax"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             light sage pillar candle
          </Base:Description>
          <Base:Description type="examine">
             Light sage in color, this pillar candle is made from smooth tallow and carved with a tiny apple and cinnamon quill motif at the bottom. <br/> <br/> [OOC - To extinguish the candle please use 'snuff candle']  <br/>
          </Base:Description>
          <Base:Description type="look">
             Light sage in color, this pillar candle is made from smooth tallow and carved with a tiny apple and cinnamon quill motif at the bottom.
          </Base:Description>
          <Base:Description type="pbrief">
             {? not | $(this.details:light:hidden) |lit } candles
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="light" prime="false" def="false" abstract="false" hidden="true" luminosity="1" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="true" inside="false" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="light"/>
            <Base:SName sname="flame"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="flames"/>
            <Base:PName pname="lights"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="black"/>
          <Base:Adjective adjective="blue"/>
          <Base:Adjective adjective="blue-violet"/>
          <Base:Adjective adjective="light"/>
          <Base:Adjective adjective="pillar"/>
          <Base:Adjective adjective="violet"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             brightly flickering flame
          </Base:Description>
          <Base:Description type="examine">
             An aura of light surrounds the brightly flickering flame of the candle.
          </Base:Description>
          <Base:Description type="look">
             An aura of light surrounds the brightly flickering flame of the candle.
          </Base:Description>
          <Base:Description type="pbrief">lights</Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties>
      <Base:InitialProperty property="trait:light:lightable">
         1
      </Base:InitialProperty>
    </Base:InitialProperties>
    <Core:Properties>
      <Core:Property property="export:lightsource:emits">
         X[S] \{The light from THIS flickers and sputters, filling HERE with a soft golden glow. \|THIS burns soft and steady, the scent of mulled apple cider filling the surroundings. \|Warm and flickering, the light from THIS causes soft shadows to dance on the walls. \|Shadows play over the walls as THIS flickers and dances. \|The aroma of mulled apple cider infuses the space as THIS sputters and flickers softly. \|Golden light dances around HERE as the scent of mulled apple cider permeates the air. \|THIS flickers and dances before once more glowing steadily. \|A golden aura of light emanates from THIS as the room fills with the subtle scent of mulled apple cider. \|Hues of gold illuminate HERE as THIS burns brightly. \|Aromatic perfume fills the air, scented of mulled apple cider, as the flame of THIS flickers and dances.\}
      </Core:Property>
      <Core:Property property="export:nip:item:cost">
         1500
      </Core:Property>
      <Core:Property property="export:objecttype">
         "candle"
      </Core:Property>
      <Core:Property property="export:trait:light:lightable">
         1
      </Core:Property>
      <Core:Property property="export:trait:objecttype">
         "candle"
      </Core:Property>
      <Core:Property property="export:trait:smell">
         "mulled apple cider"
      </Core:Property>
      <Core:Property property="merry:act:start">
         X[M] /* Hide light detail upon spawn. */ 
\$this."details:light:hidden" = TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:emit">
         X[M] object env; 
 
/* Make sure the timer is stopped and cleared. */ 
if(\$this."handles:emitter") \{ 
    Stop(\$this."handles:emitter"); 
    \$this."handles:emitter" = nil; 
\} 
 
/* Check if fuel is required to keep flame going. */ 
if(\$this."lightsource:fuel") \{ 
    /* Burn some of the fuel away. */ 
    \$this."lightsource:fuel:quantity" = Int(\$this."lightsource:fuel:quantity") - 1; 
 
    if(Int(\$this."lightsource:fuel:quantity") \<= 0) \{ 
        /* No more fuel. Extinguish flame. */ 
        ::extinguish(\$nofuel: 1); 
     
        return TRUE; 
    \} 
\} 
 
env = \$this."base:environment"; 
 
if(\$this."lightsource:emits") \{ 
    /* If held by someone, emit to chatter's environment, otherwise emit to light source's environment. */ 
    if(env."udat:possessed") \{ 
        /* Emit to holder. */ 
        EmitTo(env, capitalize(strip(replace_strings(UnSAM(\$this."lightsource:emits"), "THIS", Describe(\$this, nil, env), "HERE", Describe(env."base:environment"))))); 
 
        /* Emit to environment. */ 
        EmitIn(env."base:environment", capitalize(strip(replace_strings(UnSAM(\$this."lightsource:emits"), "THIS", Describe(\$this), "HERE", Describe(env."base:environment")))), env); 
    \} else \{ 
        /* Emit to environment. */ 
        EmitIn(env, capitalize(strip(replace_strings(UnSAM(\$this."lightsource:emits"), "THIS", Describe(\$this), "HERE", Describe(env))))); 
    \} 
\} 
 
\$this."handles:emitter" = In("emit", random(30) + 90); 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:extinguish">
         X[M] object env; 
 
/* Make sure timers are stopped and cleared. */ 
if(\$this."handles:extinguish") \{ 
    Stop(\$this."handles:extinguish"); 
    \$this."handles:extinguish" = nil; 
\} 
 
if(\$this."handles:emitter") \{ 
    Stop(\$this."handles:emitter"); 
    \$this."handles:emitter" = nil; 
\} 
 
env = \$this."base:environment"; 
 
/* If held by someone, emit to chatter's environment, otherwise emit to light source's environment. */ 
if(env."udat:possessed") \{ 
    if(\$nofuel) \{ 
        /* Different emit for when lightsource runs out of fuel. */ 
        EmitTo(env, Describe(\$this, nil, env) + " dies down as the last of the " + Str(\$this."lightsource:fuel") + " burns away."); 
        EmitIn(env."base:environment", Describe(\$this) + " dies down as the last of the " + Str(\$this."lightsource:fuel") + " burns away.", env); 
    \} else \{ 
        EmitTo(env, Describe(\$this, nil, env) + " goes out."); 
        EmitIn(env."base:environment", Describe(\$this) + " goes out.", env); 
    \} 
\} else \{ 
    if(\$nofuel) \{ 
        /* Different emit for when lightsource runs out of fuel. */ 
        EmitIn(env, Describe(\$this) + " dies down as the last of the " + Str(\$this."lightsource:fuel") + " burns away."); 
    \} else \{ 
        EmitIn(env, Describe(\$this) + " goes out."); 
    \} 
\} 
 
/* Hide the light detail. */ 
\$this."details:light:hidden" = TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:light">
         X[M] object env; 
 
/* Check if fuel is required to light it. */ 
if(\$this."lightsource:fuel") \{ 
    /* Fuel required. Is there enough to light it? */ 
    if(Int(\$this."lightsource:fuel:quantity") \<= 0) \{ 
        EmitTo(\$actor, "The flame flickers, and dies. " + capitalize(Describe(\$this, nil, \$actor)) + " has run out of fuel. You will need to add more " + Str(\$this."lightsource:fuel") + " before lighting it."); 
        return FALSE; 
    \} 
\} 
 
/* If an emitter, set to auto extinguish in 30 minutes. Periodic emits will occur about every 1.5 minutes. */ 
if(\$this."lightsource:emitter") \{ 
    \$this."handles:extinguish" = In("extinguish", 30*60); 
    \$this."handles:emitter" = In("emit", random(3) + 1); 
\} 
 
env = \$this."base:environment"; 
 
/* If held by someone, emit to chatter's environment, otherwise emit to light source's environment. */ 
if(env."udat:possessed") \{ 
    EmitTo(env, Describe(\$this, nil, env) + " lights."); 
    EmitIn(env."base:environment", Describe(\$this) + " lights.", env); 
\} else \{ 
    EmitIn(env, Describe(\$this) + " lights."); 
\} 
 
/* Show the light detail. */ 
if(\$this."details:light:hidden" = TRUE) \{
   Set(\$this, "details:light:hidden", FALSE); 
\}
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:extinguish-dob">
         X[M] ::extinguish(); 
 
\$delay(0.5, TRUE, "9e32"); 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:light-dob">
         X[M] if(\$this."trait:light:lightable") \{ 
    ::light(); 
\} 
 
\$delay(0.5, TRUE, "35c4"); 

if(\$this."details:light:hidden" = TRUE) \{
   Set(\$this, "details:light:hidden", FALSE); 
\}
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:extinguish-dob">
         X[M] /* Make sure light source is lit. */ 
if(\$this."details:light:hidden") \{ 
    EmitTo(\$actor, Describe(\$this, nil, \$actor) + " is not lit."); 
    return FALSE; 
\} 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:light-dob">
         X[M] /* Make sure light source is not already lit. */ 
if(!\$this."details:light:hidden") \{ 
    EmitTo(\$actor, Describe(\$this, nil, \$actor) + " is already lit."); 
    return FALSE; 
\} 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:timer:extinguish">
         X[M] ::extinguish();
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1540670720, "lidiab", "E", 1540671225, "lidiab", "E", 1540671256, "lidiab", "E", 1540673019, "lidiab", "E", 1540673166, "lidiab", "E", 1540673416, "lidiab", "E", 1540673438, "lidiab", "E", 1540673500, "lidiab", "E", 1540675045, "lidiab", "E", 1540675134, "lidiab", "E", 1540764766, "lidiab", "E", 1540765431, "lidiab", "E", 1540767049, "lidiab", "E", 1602610559, "sendnoodlez", "K", 1638329955, "ezralee", "K", 1638330164, "ezralee", "E", 1638330442, "ezralee", "K", 1638330505, "ezralee", "K", 1638330594, "ezralee", "K", 1638330662, "ezralee", "K", 1638330776, "ezralee", "K", 1638331042, "ezralee", "E", 1638331472, "ezralee", "E", 1638331571, "ezralee", "E", 1638331633, "ezralee", "E", 1638331762, "ezralee", "K", 1638332158, "ezralee", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="trait:color">
         "spectral green"
      </Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes>
      <Notes:Category cat="QA" catstate="Open">
        <Notes:Note ix="1132206045" state="Open" user="diedra">
           Just a basic lightable / extinguishable candle.
        </Notes:Note>
      </Notes:Category>
    </Notes:Notes>
  </Base:Thing>
</object>
