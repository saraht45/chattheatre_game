<object clone="/base/obj/thing" owner="SkotOS">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="0.03" density="8"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="key"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="keys"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">key</Base:Description>
          <Base:Description type="examine">A key.</Base:Description>
          <Base:Description type="look">A key.</Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="tag" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="tag"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="tags"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">tag</Base:Description>
          <Base:Description type="look">
             A tag is attached to this key.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:nip:item:cost">
         0
      </Core:Property>
      <Core:Property property="export:roomcost">0</Core:Property>
      <Core:Property property="export:trait:objecttype">
         "key"
      </Core:Property>
      <Core:Property property="merry:lib:delete_room">
         X[M] object env, room, dest;
string * arr;
int i, sz;

EmitTo(\$actor, "Thank you. Your room is now returned.");

if(Get(\$actor, "virtualhome:"+lower_case(Obj(\$this."base:keycode").isvirtual)))
  \$room = Get(\$actor, "virtualhome:"+lower_case(Obj(\$this."base:keycode").isvirtual));

/* no longer pay rent for this room */
if(\$cost = Get(\$actor, "virtualhome:"+lower_case(Obj(\$this."base:keycode").isvirtual)+":cost")) \{
  \$actor."trait:incomecosts" -= \$cost;
  Set(\$actor, "virtualhome:"+lower_case(Obj(\$this."base:keycode").isvirtual)+":cost", nil);
\}

\$queue = (\{ \$room \});
\$roomList = (\{ \$room \});
while(sizeof(\$queue)) \{
  env    = \$queue[0];
  \$queue = \$queue[1..];
  arr    = env."base:details";
  sz     = sizeof(arr);

  for (i = 0; i \< sz; i++) \{

    if(Get(env, "details:" + arr[i] + ":exit:dest")) \{
        dest= NRefOb(Get(env, "details:" + arr[i] + ":exit:dest"));

        if(dest\&\& dest.isvirtual \&\& Get(\$actor, "virtualhome:" + dest.isvirtual) \&\& !member(Get(\$actor, "virtualhome:" + dest.isvirtual), \$roomList) \&\& Get(\$actor, "virtualhome:" + dest.isvirtual).homeowner == \$actor) \{
            \$queue += (\{ Get(\$actor, "virtualhome:" + dest.isvirtual) \});
            \$roomList \|= (\{ Get(\$actor, "virtualhome:" + dest.isvirtual) \});
        \}
    \}
  \}

  \$delay(0.1, TRUE, "abcds");
\}

for(i = 0; i \< sizeof(\$roomList); i++) \{
    ::do_delete(\$room: \$roomList[i], \$actor: \$actor);
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:do_delete">
         X[M] if(\$discharged) \{
    if(\$actor."virtualhome:home") \{
        \$movingroom = \$actor."virtualhome:home";
    \} else \{
        \$movingroom = \$\{Ironclaw:World:DockTown:Commons:Props:DonationBox\};
    \}
\} else \{
    \$movingroom = \$\{Ironclaw:World:DockTown:Commons:Props:DonationBox\};
\}

\$inv = copy(\$room."base:inventory");
for(\$i=0; \$i \< sizeof(\$inv) ;\$i++) \{
    /* There are still things in this room */
    if(\$inv[\$i]."base:volition") \{
        /* There is an animal in the room! */
        EmitTo(\$inv[\$i], "Servants politely move you out of this room and into the corridor.");
        \$inv[\$i]."base:environment" = \$\{Allegory:Setting:Rinascita:Buildings:Southeast:BoardingHouse:SecondFloor:HallSouth\};
    \} else if (\$inv[\$i]."base:integration" \|\| \$inv[\$i]."base:immobile") \{
        /* This is part of the room */
        if(\$inv[\$i]."base:inventory" \&\& sizeof(\$inv[\$i]."base:inventory")) \{
            \$inv2 = copy(\$inv[\$i]."base:inventory");

            for(\$j = 0; \$j \< sizeof(\$inv2); \$j++) \{
                if(!\$inv2[\$j]."base:integration" \&\& !\$inv2[\$j]."base:immobile") \{
                    \$inv2[\$j]."base:environment" = \$movingroom;
                \} else \{
                    if(\$inv2[\$j]."base:inventory" \&\& sizeof(\$inv2[\$j]."base:inventory")) \{
                        \$inv3 = copy(\$inv2[\$j]."base:inventory");

                        for(\$k = 0; \$k \< sizeof(\$inv3); \$k++) \{
                            if(!\$inv3[\$k]."base:integration" \&\& !\$inv3[\$k]."base:immobile") \{
                                \$inv3[\$k]."base:environment" = \$movingroom;
                    
                            \}
                        \}
                    \}
                \}
            \}
        \}

        Slay(\$inv[\$i]);
    \} else \{
        /* Moving to donation bin or tavern inn room*/
        \$inv[\$i]."base:environment" = \$movingroom;
    \}
\}

Slay(\$room);

if(!\$discharged) \{
    Slay(\$this);
\}

return TRUE;

\$details = \$room."base:details";

for(\$i=0; \$i\<sizeof(\$details); \$i++) \{

    if(Get(\$room, "details:" + Str(\$details[\$i]) + ":exit:door") \&\& Get(\$room, "details:" + Str(\$details[\$i]) + ":exit:dest")) \{
        \$exit = NRefOb(Get(\$room, "details:" + Str(\$details[\$i]) + ":exit:dest"));
        if(\$exit \&\& \$exit.isvirtual \&\& Get(\$actor, "virtualhome:" + \$exit.isvirtual)) \{
            \$room2 = Get(\$actor, "virtualhome:" + \$exit.isvirtual);
 
            \$inv = copy(\$room2."base:inventory");

            for(\$i=0; \$i \< sizeof(\$inv) ;\$i++) \{
                /* There are still things in this room */
                if(\$inv[\$i]."base:volition") \{
                    /* There is an animal in the room! */
                    EmitTo(\$inv[\$i], "Servants politely move you out of this room and into the corridor.");
                    \$inv[\$i]."base:environment" = \$\{Allegory:Setting:Rinascita:Buildings:Southeast:BoardingHouse:SecondFloor:HallSouth\};
                \} else if (\$inv[\$i]."base:integration" \|\| \$inv[\$i]."base:immobile") \{
                    /* This is part of the room */
                    if(\$inv[\$i]."base:inventory" \&\& sizeof(\$inv[\$i]."base:inventory")) \{
                        \$inv2 = copy(\$inv[\$i]."base:inventory");

                        for(\$j = 0; \$j \< sizeof(\$inv2); \$j++) \{
                            if(!\$inv2[\$j]."base:integration" \&\& !\$inv2[\$j]."base:immobile") \{
                                \$inv2[\$j]."base:environment" = \$movingroom;
                            \} else \{
                                if(\$inv2[\$j]."base:inventory" \&\& sizeof(\$inv2[\$j]."base:inventory")) \{
                                    \$inv3 = copy(\$inv2[\$j]."base:inventory");

                                    for(\$k = 0; \$k \< sizeof(\$inv3); \$k++) \{
                                        if(!\$inv3[\$k]."base:integration" \&\& !\$inv3[\$k]."base:immobile") \{
                                            \$inv3[\$k]."base:environment" = \$movingroom;
                                        \}
                                    \}
                                \}
                            \}
                        \}
                    \}

                    Slay(\$inv[\$i]);
                \} else \{
                    /* Moving to donation bin or tavern inn room*/
                    \$inv[\$i]."base:environment" = \$movingroom;
                \}
            \}
            Slay(\$room2);
        \}
    \}
\}
      </Core:Property>
      <Core:Property property="merry:lib:expire_fun">
         X[M] return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:get_rooms">
         X[M] \$details = \$room."base:details";
return FALSE;
for(\$i=0; \$i\<sizeof(\$details); \$i++) \{
    if(Get(\$room, "details:" + Str(\$details[\$i]) + ":exit:door") \&\& Get(\$room, "details:" + Str(\$details[\$i]) + ":exit:dest")) \{
        \$exit = NRefOb(Get(\$room, "details:" + Str(\$details[\$i]) + ":exit:dest"));
        if(\$exit \&\& \$exit.isvirtual \&\& Get(\$actor, "virtualhome:" + \$exit.isvirtual)) \{
            if(!member(Get(\$actor, "virtualhome:" + \$exit.isvirtual), \$roomList)) \{
                EmitTo(\$actor, "Getting list for " + Str(Get(\$actor, "virtualhome:" + \$exit.isvirtual)));
                \$delay(5, FALSE, "141e"); 
                ::get_rooms(\$room: Get(\$actor, "virtualhome:" + \$exit.isvirtual), \$roomList: \$roomList);
            \} else \{
                return TRUE;
            \}
        \}
    \}
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:returning_accept">
         X[M] \$delay(0.5, TRUE, "9145");
/* Double check if the player wants to return the room */
interaction::question(\$actor: \$actor, \$question: "Servants will go to your room and put any belongings they find in the donation bin. You can always remove your belongings first, and return your key later. Are you sure you want to stop renting your room now?", \$expires: 60, \$env: "TRUE", \$yes_ob: \$this, \$no_ob: \$this, \$expire_ob: \$this, \$yes_fun: "delete_room", \$no_fun: "returning_decline", \$expire_fun: "returning_expire", \$par: ([ "room": \$room, "actor": \$actor]));

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:returning_decline">
         X[M] return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:returning_expire">
         X[M] return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:lock-using">
         X[M] /* Code for virtual room keys */

/* Check if this key unlocks this virtual room */
if(\$this."base:keycode") \{
  if(
    Get(NRefOb(\$what[0]), "details:"+NRefDetail(\$what[0])+":exit:dest")
  \&\&
    name(NRefOb(Get(NRefOb(\$what[0]), "details:"+NRefDetail(\$what[0])+":exit:dest")))
  \&\&
    (name(NRefOb(Get(NRefOb(\$what[0]), "details:"+NRefDetail(\$what[0])+":exit:dest"))) == \$this."base:keycode")
  ) \{
    /* The key matches this door */
    EmitTo(\$actor, "You lock "+Describe(\$what[0])+".");
    EmitIn(\$actor."base:environment", Describe(\$actor)+" locks "+Describe(\$what[0])+".", \$actor);
    return FALSE;
  \}
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:offer-what%returning">
         X[M] if(\$who \&\& \$who[0].returnsrooms) \{
  /* If this isn't our key */
  if(\$this."trait:owner" \&\& (\$this."trait:owner" != \$actor)) return TRUE;

  if(Get(\$actor, "virtualhome:"+lower_case(Obj(\$this."base:keycode").isvirtual)))\{
    \$room = Get(\$actor, "virtualhome:"+lower_case(Obj(\$this."base:keycode").isvirtual));

    /* Check if the player wants to return the room */
    interaction::question(\$actor: \$actor, \$question: "Do you want to stop renting "+Describe(\$room)+"?", \$expires: 60, \$env: "TRUE", \$yes_ob: \$this, \$no_ob: \$this, \$expire_ob: \$this, \$yes_fun: "returning_accept", \$no_fun: "returning_decline", \$expire_fun: "returning_expire", \$par: ([ "room": \$room, "actor": \$actor]));

    return FALSE;
  \} else \{
    /* No owner. Slay key. */
    EmitTo(\$actor, Describe(\$who[0])+" takes "+Describe(\$this, nil, \$actor)+".");
    EmitIn(\$actor."base:environment", Describe(\$who[0])+" takes "+Describe(\$this)+".", \$actor);
    Slay(\$this);
    return FALSE;
  \}
\}
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:unlock-using">
         X[M] /* Code for virtual room keys */

/* Check if this key unlocks this virtual room */
if(\$this."base:keycode") \{
  if(
    Get(NRefOb(\$what[0]), "details:"+NRefDetail(\$what[0])+":exit:dest")
  \&\&
    name(NRefOb(Get(NRefOb(\$what[0]), "details:"+NRefDetail(\$what[0])+":exit:dest")))
  \&\&
    (name(NRefOb(Get(NRefOb(\$what[0]), "details:"+NRefDetail(\$what[0])+":exit:dest"))) == \$this."base:keycode")
  ) \{
    /* The key matches this door */
    /* Check if this key is already owned by someone */
    if(!\$this."trait:owner") \{
        /* Nobody owns the key. Does the actor already have a room of this type? */
        if(!(NRefOb(Get(NRefOb(\$what[0]), "details:"+NRefDetail(\$what[0])+":exit:dest")).isvirtual \&\& Get(\$actor, "virtualhome:"+NRefOb(Get(NRefOb(\$what[0]), "details:"+NRefDetail(\$what[0])+":exit:dest")).isvirtual))) \{
            if(\$this.guild) \{
                if((!\$actor.guild \|\| \$actor.guild != \$this.guild)) \{
                    EmitTo(\$actor, "Only members of " + \$this.guild.fullname + " may rent a room here.");
                    return FALSE;
                \}

                if(\$this."guild:rank" \&\& \$actor."rank:rank" \< \$this."guild:rank") \{
                    EmitTo(\$actor, "You are not of high enough rank to rent this room.");
                    return FALSE;
                \}

                \$exclusions = \$this.exclusions;
                for(\$i = 0; \$i \< sizeof(\$exclusions); \$i++) \{
                    if(Get(\$actor, "virtualhome:" + \$exclusions[\$i])) \{
                        EmitTo(\$actor, "You may only rent one room in this location.");
                        return FALSE;
                    \}
                \}
          \}

          if(\$this.roomcost) \{
            /* Create a new room for this actor, and label the key */
            /* Check if the player can afford this room */
            if(Int(\$this.roomcost) \&\& (Int(\$this.roomcost) \> (Int(\$actor."trait:income") + Int(\$actor."trait:extraincome") - Int(\$actor."trait:incomecosts")))) \{
                EmitTo(\$actor, "You unlock "+Describe(\$what[0])+", and look inside. This room appears to be too expensive for your current income. You lock "+Describe(\$what[0])+" again.");
                EmitIn(\$actor."base:environment", Describe(\$actor)+" unlocks "+Describe(\$what[0])+" and looks inside, before locking"+Describe(\$what[0])+" again.", \$actor);
                return FALSE;
            \} else \{
                /* Charge the income cost */
                if(\$this.roomcost) \{
        /*            \$actor."trait:incomecosts" = \$actor."trait:incomecosts" + \$this.roomcost; */
                    /* Record the income cost */
           /*         Set(\$actor, "virtualhome:"+lower_case(NRefOb(Get(NRefOb(\$what[0]), "details:"+NRefDetail(\$what[0])+":exit:dest")).isvirtual)+":cost", \$this.roomcost); */
                \}
           /*     EmitTo(\$actor, "You unlock "+Describe(\$what[0])+", and label "+Describe(\$this, nil, \$actor)+".");
                EmitIn(\$actor."base:environment", Describe(\$actor)+" unlocks "+Describe(\$what[0])+".", \$actor); */
                if(\$this.roomcost \&\& (\$this.roomcost \> 0)) \{
                    if(Int(\$this.roomcost/100) \< 2) \{
                       \$cost = "1 florin";
                    \} else \{
                        \$cost = Str(Int(\$this.roomcost/100))+" florins";
                    \}
                    if(Int((Flt(\$actor."trait:income")+Flt(\$actor."trait:extraincome")-Flt(\$actor."trait:incomecosts")-0.5)/100.0) \< 1) \{
                        \$income = "no florins";
                    \} else if(Int((Flt(\$actor."trait:income")+Flt(\$actor."trait:extraincome")-Flt(\$actor."trait:incomecosts")-0.5)/100.0) \< 2) \{
                        \$income = "1 florin";
                    \} else \{
                        \$income = Str(Int((Flt(\$actor."trait:income")+Flt(\$actor."trait:extraincome")-Flt(\$actor."trait:incomecosts")-0.5)/100.0))+" florins";
                    \}
                    EmitTo(\$actor, "This room has an ongoing cost of "+\$cost+".");
                \}
            \}
          \}

            /* Create the room */
            /*\$newroom = Spawn(NRefOb(Get(NRefOb(\$what[0]), "details:"+NRefDetail(\$what[0])+":exit:dest")));*/

            if(catch(\$newroom = Spawn(Obj(\$this."base:keycode")))) \{
                EmitTo(\$actor, "Error: The room failed to be created. This is a low-level problem with the code, we are waiting for the engineers to figure out what's going on and fix it. Please try again, or try a different room.");
                if(\$this.roomcost) \{
                    \$actor."trait:incomecosts" = \$actor."trait:incomecosts" - \$this.roomcost;
                    Set(\$actor, "virtualhome:"+lower_case(NRefOb(Get(NRefOb(\$what[0]), "details:"+NRefDetail(\$what[0])+":exit:dest")).isvirtual)+":cost", nil);
                \}
                return FALSE;
            \}
            /*\$newroom = Spawn(Obj(\$this."base:keycode"));*/

            if(\$newroom) \{
                Set(\$actor, "virtualhome:"+lower_case(NRefOb(Get(NRefOb(\$what[0]), "details:"+NRefDetail(\$what[0])+":exit:dest")).isvirtual), \$newroom);
                \$newroom.homeowner = \$actor;
            \} else \{
                EmitTo(\$actor, "No new room! Unsetting the cost");
                /* remove the cost since the room wasn't created */
                if(\$this.roomcost) \{
                    \$actor."trait:incomecosts" = \$actor."trait:incomecosts" - \$this.roomcost;
                    Set(\$actor, "virtualhome:"+lower_case(NRefOb(Get(NRefOb(\$what[0]), "details:"+NRefDetail(\$what[0])+":exit:dest")).isvirtual)+":cost", nil);
                \}
                return FALSE;
            \}
      \}
      /* Label the key */
      \$this."trait:owner" = \$actor;
      \$this."details:tag:description:writing" = Describe(\$actor);
      \$this."details:default:description:writing" = Describe(\$actor);
      EmitTo(\$actor, "You unlock "+Describe(\$what[0])+", and label "+Describe(\$this, nil, \$actor)+".");
      EmitIn(\$actor."base:environment", Describe(\$actor)+" unlocks "+Describe(\$what[0])+".", \$actor);
      return FALSE;
    \} else \{
      /* The key is already owned */
      if(\$this."trait:owner" != \$actor) \{
        /* Open the door to the key owner's room */
        \$hallway = NRefOb(\$what[0]);
        \$detail = NRefDetail(\$what[0]);
        \$dest = NRefOb(Get(\$hallway, "details:"+\$detail+":exit:dest"));

        \$room = Get(\$this."trait:owner", "virtualhome:"+lower_case(\$dest.isvirtual));
        if(!\$room) return TRUE;
        \$dest.VirtualCurrent = \$room;

        EmitTo(\$actor, "You unlock "+Describe(\$what[0])+".");
        EmitIn(\$actor."base:environment", Describe(\$actor)+" unlocks "+Describe(\$what[0])+".", \$actor);

        /* Tell the door to open... */
        Set(\$hallway, "details:"+\$detail+":exit:closed:local", 0);

        /* This is needed, so that the door will self-close after you enter */
        Set(\$hallway, "details:"+\$detail+":opener", \$actor);

        return FALSE;
      \} else \{
        EmitTo(\$actor, "You unlock "+Describe(\$what[0])+".");
        EmitIn(\$actor."base:environment", Describe(\$actor)+" unlocks "+Describe(\$what[0])+".", \$actor);
        return FALSE;
      \}
    \}
  \}
\}
return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1565054302, "jominey", "E", 1565054333, "jominey", "R", 1565058600, "jominey", "K", 1565058626, "jominey", "E", 1566271093, "jominey", "E", 1572904937, "jominey", "E", 1572905333, "jominey", "E", 1572906545, "jominey", "E", 1572906825, "jominey", "E", 1572906878, "jominey", "E", 1572907059, "jominey", "E", 1572907153, "jominey", "E", 1572907321, "jominey", "E", 1572907335, "jominey", "E", 1572907348, "jominey", "E", 1572907597, "jominey", "E", 1572907751, "jominey", "E", 1572907778, "jominey", "E", 1572908123, "jominey", "E", 1572908658, "jominey", "E", 1572908961, "jominey", "E", 1572909028, "jominey", "E", 1572909098, "jominey", "E", 1572909143, "jominey", "E", 1572909173, "jominey", "E", 1572909186, "jominey", "E", 1572909226, "jominey", "E", 1572909254, "jominey", "E", 1572909295, "jominey", "E", 1572909349, "jominey", "E", 1572909587, "jominey", "E", 1572909659, "jominey", "E", 1572909794, "jominey", "E", 1572909848, "jominey", "E", 1572909955, "jominey", "E", 1572910078, "jominey", "E", 1572910106, "jominey", "E", 1572910198, "jominey", "E", 1572910218, "jominey", "E", 1572910296, "jominey", "E", 1575308610, "sendnoodlez", "E", 1587655190, "sendnoodlez", "E", 1592534787, "jominey", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
