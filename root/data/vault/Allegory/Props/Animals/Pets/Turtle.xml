<object clone="/base/obj/thing" owner="ezralee">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Allegory:Props:Animals:UrAnimal)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="1"/>
    <Base:Misc gender="male" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="turtle"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="turtles"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="pond"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             <a_or_an>$(this.trait:appearance:size) $(this.trait:appearance:color) pond turtle</a_or_an>
          </Base:Description>
          <Base:Description type="examine">
             Usually never exceeding a shell length of ten inches, this reptile features a hard, smooth shell with a yellow underside, clawed legs, beady eyes, and a tiny pointed tail. Slow moving and docile, this herbivore is native to ponds around Europe, subsisting on the vegetation growing in and around them and hibernating during cooler months, making it a surprisingly easy to care for domestic pet.
          </Base:Description>
          <Base:Description type="look">
             Usually never exceeding a shell length of ten inches, this reptile features a hard, smooth shell with a yellow underside, clawed legs, beady eyes, and a tiny pointed tail. Slow moving and docile, this herbivore is native to ponds around Europe, subsisting on the vegetation growing in and around them and hibernating during cooler months, making it a surprisingly easy to care for domestic pet.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="shell" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="shell"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="shells"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             the pond turtle's $(this.trait:appearance:color) shell
          </Base:Description>
          <Base:Description type="examine">
             Usually never exceeding a shell length of ten inches, this reptile features a hard, smooth shell with a yellow underside
          </Base:Description>
          <Base:Description type="look">
             Usually never exceeding a shell length of ten inches, this reptile features a hard, smooth shell with a yellow underside.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:nip-core:sighookpath">
         (\{ "delay:DELAY-init", "delay:DELAY-exec", "resource-control:INTERNAL", "internal:INTERNAL-exec", "decide:DECIDE-init", "emoting:DECIDE", "freemoting:DECIDE", "movement:DECIDE", "decide:DECIDE-exec", "decide:DECIDE-post" \})
      </Core:Property>
      <Core:Property property="export:trait:spawnedparts">
         ([ "back":"backs", "body":"bodies", "eye":"", "eyes":"", "feet":"feet", "head":"heads", "jaw":"jaws", "leg-back":"", "leg-front":"", "legs-back":"", "legs-front":"", "neck":"necks", "nose":"noses", "scales":"scales", "stomach":"stomachs", "tail":"tails" ])
      </Core:Property>
      <Core:Property property="merry:inherit:lib:handler_freemote">
         \<MOVED:20080918-114107:Lib:NIP:lib:freemoting\>
      </Core:Property>
      <Core:Property property="merry:lib:access">
         X[M] if(\$ownerone != Str(\$actor) \&\& \$ownertwo != Str(\$actor)) \{                  
  EmitTo(\$actor, "You are not my owner, so you can't control me.");                  
  return FALSE;                  
\}  
 
\$rstr = "The following people have access to " + Describe(\$this) + ":\\n"; 
if(\$this."trait:ownerone") \{ 
    \$rstr += "Owner 1 - " + Describe(\$this."trait:ownerone") + "\\n"; 
\} 
if(\$this."trait:ownerone") \{ 
    \$rstr += "Owner 2 - " + Describe(\$this."trait:ownertwo") + "\\n"; 
\} 
 
if(\$this."trait:friends") \{ 
    \$friends = \$this."trait:friends"; 
\} else \{ 
    \$friends = (\{ \}); 
\} 
 
\$friends -= (\{ nil \}); 
 
for(\$i = 0; \$i \< sizeof(\$friends); \$i++) \{ 
    \$rstr += "Friend - " + Describe(\$friends[\$i]) + "\\n"; 
\} 
 
EmitTo(\$actor, \$rstr); 
 
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:allow">
         X[M] if(\$ownerone != Str(\$actor) \&\& \$ownertwo != Str(\$actor)) \{                  
  EmitTo(\$actor, "You are not my owner, so you can't control me.");                  
  return FALSE;                  
\}  
 
if(!\$param) \{ 
    EmitTo(\$actor, "[OOC: Give control of your pet to another character.]"); 
    EmitTo(\$actor, "Syntax: control dog 'allow bob'"); 
    return FALSE; 
\} 
 
if(!(\$friend = common::lookup(\$name: \$param))) \{ 
    EmitTo(\$actor, TAG("Cannot find character named " + Str(\$param), "imp")); 
    EmitTo(\$actor, "Syntax: control dog 'allow bob'"); 
    return FALSE; 
\} 
 
if(\$this."trait:friends") \{ 
    \$friends = \$this."trait:friends"; 
\} else \{ 
    \$friends= (\{ \}); 
\} 
 
\$friends \|= (\{ \$friend \}); 
 
\$this."trait:friends" = \$friends; 
 
EmitTo(\$actor, "Access to " + Describe(\$this) + " has been given to " + Describe(\$friend) + "."); 
 
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:deny">
         X[M] if(\$ownerone != Str(\$actor) \&\& \$ownertwo != Str(\$actor)) \{                  
  EmitTo(\$actor, "You are not my owner, so you can't control me.");                  
  return FALSE;                  
\}  
 
if(!\$param) \{ 
    EmitTo(\$actor, "[OOC: Revoke control of your pet from another character.]"); 
    EmitTo(\$actor, "Syntax: control dog 'deny bob'"); 
    return FALSE; 
\} 
 
if(!(\$friend = common::lookup(\$name: \$param))) \{ 
    EmitTo(\$actor, TAG("Cannot find character named " + Str(\$param), "imp")); 
    EmitTo(\$actor, "Syntax: control dog 'deny bob'"); 
    return FALSE; 
\} 
 
if(\$this."trait:friends") \{ 
    \$friends = \$this."trait:friends"; 
\} else \{ 
    \$friends= (\{ \}); 
\} 
 
if(!member(\$friend, \$friends)) \{ 
    EmitTo(\$actor, Describe(\$friend) + " does not have access to " + Describe(\$this) + "."); 
    return FALSE; 
\} 
 
\$friends -= (\{ \$friend \}); 
 
\$this."trait:friends" = \$friends; 
 
EmitTo(\$actor, "Access to " + Describe(\$this) + " has been revoked from " + Describe(\$friend) + "."); 
 
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:take">
         X[M] /* Record what room the actor is in */                       
\$room = \$actor."Base:environment";     
 
\$friends = \$this."trait:friends";    
if(!\$friends) \$friends = (\{ \});                
                       
/* Check if the actor is allowed to pick up the dog */                       
  /* check if \$actor is the dog's owner */                       
if(\$actor == \$this."trait:ownerone" \|\| \$actor == \$this."trait:ownertwo" \|\| member(\$actor, \$friends)) \{                       
  /* if the actor is allowed to pick up the dog */                       
  /* tell the actor that they picked up the dog */                       
  /* tell the room that the actor picked up the dog */                       
  EmitTo(\$actor, "You pick up "+Describe(\$this)+".");                       
  EmitIn(\$room, Describe(\$actor)+" picks up "+ Describe(\$this)+".", \$actor);                       
  \$this."base:environment" = \$actor;                       
                       
\} else \{                       
  /* the actor is not the dog's owner */                       
                       
  /* if the dog is already being held by someone */                       
  if(\$this."base:environment"."base:volition") \{                       
    /* use the normal give/take/offer code */                       
    return TRUE;                       
  \} else \{                       
    /* tell the actor that they can't take the dog */                       
    /* tell the room that the actor is a dognapper! */                       
    EmitTo(\$actor, "That dog is not yours!");                       
    EmitIn(\$room, Describe(\$actor)+" attempts to take "+ Describe(\$this)+".", \$actor);                       
  \}                       
\}                       
                       
/* return false, so that the actor doesn't see a message about not being allowed to pick up the dog */                       
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react:control-dob">
         X[M] int i, sz;                  
int found;               
string* commands, *commandsDefault, *commandsExtra;               
string errormsg, self, possessive, nominative, objective, input, param;               
mixed property, result;               
               
/* Gather commands located in UR baby */               
commandsDefault = (\{ \});               
if(\$this."trait:commands:default") \{               
    commandsDefault = \$this."trait:commands:default";               
\}               
               
/* Gather baby specific commands */               
commandsExtra = (\{ \});               
if(\$this."trait:commands:extra") \{               
    commandsExtra = \$this."trait:commands:extra";               
\}               
               
/* Put them all together */               
commands = commandsDefault \| commandsExtra;               
               
if(!sizeof(commands)) \{               
    commands = (\{ "none" \});               
\}               
               
errormsg = "That is not a valid command for the dog. Valid orders are: \\"" + implode(commands, "\\" \\"") +"\\"";               
               
if(!\$evoke) \{               
    EmitTo(\$actor, errormsg);               
    return FALSE;               
\}               
                  
input = replace_strings(\$evoke, "\\"", "", ".", ""); 
 
if(sizeof(explode(input, " ")) \> 1) \{ 
    param = explode(input, " ")[1]; 
    input = explode(input, " ")[0]; 
\}            
               
               
/* check if we're allowed to command the dog */               
\$ownerone = Str(\$this."trait:ownerone");               
\$ownertwo = Str(\$this."trait:ownertwo");          
\$friends = \$this."trait:friends"; 
 
if(!\$friends) \$friends = (\{ \});      
               
if(\$ownerone != Str(\$actor) \&\& \$ownertwo != Str(\$actor) \&\& !member(\$actor, \$friends)) \{                  
  EmitTo(\$actor, "You are not my owner, so you can't control me.");                  
  return FALSE;                  
\}                  
               
               
/* check if this is a valid order */                 
if(FindMerry(\$this, "lib", input)) \{               
    /* Result is a script. Execute it. */               
    result = Call(\$this, input, \$param: param);               
\} else if(Get(\$this, "command:" + input)) \{               
    /* Result is a simple emote. */               
    property = Get(\$this, "command:" + input);               
               
    if(typeof(property) == 5) \{               
        /* Array of emits. Choose one. */               
        sz = sizeof(property);               
        result = property[random(sz)];               
    \} else \{               
        /* Assuming it's a string. Grab it. */               
        result = Str(property);               
    \}               
\} else \{               
    /* No response was defined. */               
    result = "[OOC: No response was defined for this action. File an assist with this error and include the command you were trying to issue.]";               
    EmitTo(\$actor, result);               
    return FALSE;               
\}               
               
if(typeof(result) == 3) \{               
    /* Precautionary measures to ensure emits display correct gender. */               
    if(\$this."base:genderstring" == "male") \{               
        self = "himself";               
        possessive = "his";               
        nominative = "he";               
        objective = "him";               
    \} else if(\$this."base:genderstring" == "female") \{               
        self = "herself";               
        possessive = "her";               
        nominative = "she";               
        objective = "her";               
    \} else \{               
        self = "itself";               
        possessive = "its";               
        nominative = "it";               
        objective = "it";               
    \}               
               
    /* Display the result. */               
    EmitIn(\$actor."base:environment", replace_strings(result, "THIS", Describe(\$this), "SELF", self, "POSSESSIVE", possessive, "NOMINATIVE", nominative, "OBJECTIVE", objective, "HERE", Describe(\$actor."base:environment"), "OWNER", Describe(\$actor)));               
\}               
               
return FALSE;
      </Core:Property>
      <Core:Property property="nip-core:sighookpath">
         (\{ "delay:DELAY-init", "delay:DELAY-exec", "resource-control:INTERNAL", "internal:INTERNAL-exec", "decide:DECIDE-init", "emoting:DECIDE", "freemoting:DECIDE", "movement:DECIDE", "decide:DECIDE-exec", "decide:DECIDE-post" \})
      </Core:Property>
      <Core:Property property="npc:status:spawndate">
         1702692569
      </Core:Property>
      <Core:Property property="npc:status:startup">
         1702692569
      </Core:Property>
      <Core:Property property="npc:sys:sighookpath">
         (\{ "delay:DELAY-init", "delay:DELAY-exec", "resource-control:INTERNAL", "internal:INTERNAL-exec", "decide:DECIDE-init", "emoting:DECIDE", "freemoting:DECIDE", "movement:DECIDE", "decide:DECIDE-exec", "decide:DECIDE-post" \})
      </Core:Property>
      <Core:Property property="npc:sys:sign">1</Core:Property>
      <Core:Property property="revisions">
         (\{ 1588170554, "jominey", "E", 1588170556, "jominey", "E", 1588177714, "jominey", "E", 1702692975, "ezralee", "K", 1702693133, "ezralee", "E", 1702693248, "ezralee", "E", 1702693281, "ezralee", "E", 1702693373, "ezralee", "E", 1702693400, "ezralee", "E", 1702693425, "ezralee", "E", 1702693534, "ezralee", "K", 1702693560, "ezralee", "E", 1702693604, "ezralee", "K", 1702693612, "ezralee", "E", 1705197715, "ezralee", "E" \})
      </Core:Property>
      <Core:Property property="sigstream">0</Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
