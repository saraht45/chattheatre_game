<object clone="/base/obj/thing" owner="SkotOS">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Allegory:Props:Animals:UrMammal)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="true" tight="false" capacity="1" maxweight="1"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="standing" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="true">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="dog"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="dogs"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             <a_or_an> $(this.trait:appearance:body) $(this.trait:appearance:color) $(this.trait:animaltype)</a_or_an>
          </Base:Description>
          <Base:Description type="examine">
             <a_or_an capitalize="1">$(this.trait:appearance:body) $(this.trait:appearance:color) $(this.trait:animaltype)</a_or_an>. $(this.trait:look)
          </Base:Description>
          <Base:Description type="look">
             <a_or_an capitalize="1">$(this.trait:appearance:body) $(this.trait:appearance:color) $(this.trait:animaltype)</a_or_an>. $(this.trait:look)
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="bak:merry:react:control-dob">
         X[M] int i;                   
int found;                   
                
\$errormsg = "That is not a valid command for the dog. Valid orders are: bark-happy, bark-warning, beg, belly-rub, cry, dress, down, growl, howl, sniff, pant, play, roll, sit, sleep, stay, tilt, undress, wag, and yawn.";                   
                   
if(!\$evoke) return TRUE;                   
\$words = explode(\$evoke[1..strlen(\$evoke)-2], " ");                   
                   
/* check if we're allowed to command the dog */                
\$ownerone = Str(\$this."trait:ownerone");                
\$ownertwo = Str(\$this."trait:ownertwo");                
                
if(\$ownerone != Str(\$actor) \&\& \$ownertwo != Str(\$actor)) \{                   
  EmitTo(\$actor, "You are not my owner, so you can't control me.");                   
  return FALSE;                   
\}                   
                
if(\$this."base:genderstring" == "male") \{                
    \$self = "himself";                
    \$possessive = "his";                
    \$nominative = "he";                
    \$objective = "him";                
\} else \{                
    \$self = "herself";                
    \$possessive = "her";                
    \$nominative = "she";                
    \$objective = "her";                
\}                
                
/* check if this is a valid order */                   
if(lower_case(\$words[0]) == "follow") \{                   
    EmitTo(\$actor, Describe(this)+" will now follow you.");                   
    this.follow = \$actor;                
    Social(this, "trot", nil, nil, "to", \$actor );                
    \$this."amialone:id" = In("amialone", 300);                  
\} else if(lower_case(\$words[0]) == "stay") \{                   
    EmitTo(\$actor, Describe(this)+ " will no longer follow you."); 
    EmitIn(\$actor."base:environment", Describe(\$this)+" lowers " + \$this."base:possessive" + " head and obediently waits.");                   
    this.follow = nil;   
\} else if(lower_case(\$words[0]) == "bark-warning") \{ 
    \$rand = random(2); 
switch(\$rand) \{ 
    case 0:  
        EmitIn(\$actor."base:environment", Describe(\$this)+" bristles " + \$this."base:possessive" + " fur and barks aggressively, " + \$this."base:possessive" + " teeth flashing with a snarl."); 
        break; 
    case 1:                   
    EmitIn(\$actor."base:environment", Describe(\$this)+" narrows " + \$this."base:possessive" + " eyes as " + \$this."base:possessive" + " hackles rise, barking with a warning tone."); 
        break;\}                 
\} else if(lower_case(\$words[0]) == "wag") \{                   
    \$rand = random(2); 
switch(\$rand) \{ 
    case 0:  
        EmitIn(\$actor."base:environment", Describe(\$this)+" happily wags " + \$this."base:possessive" + " tail with a look of pleasure on " + \$this."base:possessive" + " face."); 
        break; 
    case 1:                   
    EmitIn(\$actor."base:environment", Describe(\$this)+" animatedly wags " + \$this."base:possessive" + " tail while perking "+ \$this."base:possessive" + " ears."); 
        break;\} 
\} else if(lower_case(\$words[0]) == "howl") \{ 
    \$rand = random(2); 
switch(\$rand) \{ 
    case 0:  
        EmitIn(\$actor."base:environment", Describe(\$this)+" lifts " + \$this."base:possessive" + " head and lets out a long, low howl."); 
        break; 
    case 1:                   
    EmitIn(\$actor."base:environment", Describe(\$this)+" tilts " + \$this."base:possessive" + " head skyward before howling long and low."); 
        break;\}             
\} else if(lower_case(\$words[0]) == "cry") \{ 
    \$rand = random(2); 
switch(\$rand) \{ 
    case 0:  
        EmitIn(\$actor."base:environment", Describe(\$this)+" lets out a series of small whimpers."); 
        break; 
    case 1:                   
    EmitIn(\$actor."base:environment", Describe(\$this)+" whines pitifully."); 
        break;\}  
\} else if(lower_case(\$words[0]) == "beg") \{ 
    \$rand = random(2); 
switch(\$rand) \{ 
    case 0:  
        EmitIn(\$actor."base:environment", Describe(\$this)+" looks up with a pitiful, plaintive expression, lifting " + \$this."base:possessive" + " paw subtly from the ground."); 
        break; 
    case 1:                   
    EmitIn(\$actor."base:environment", Describe(\$this)+" shamelessly begs, " + \$this."base:possessive" + " eyes growing round as " + \$this."base:pronoun" + " whines softly."); 
        break;\}                                    
\} else if(lower_case(\$words[0]) == "play") \{                   
    \$rand = random(2); 
switch(\$rand) \{ 
    case 0:  
        EmitIn(\$actor."base:environment", Describe(\$this)+" abruptly drops " + \$this."base:possessive" + " torso onto the ground, " + \$this."base:possessive" + " tail wagging in an invitation to play."); 
        break; 
    case 1:                   
    EmitIn(\$actor."base:environment", Describe(\$this)+" makes a soft woofing sound before sticking " + \$this."base:possessive" + " rump in the air and wagging " + \$this."base:possessive" + " tail playfully."); 
        break;\} 
\} else if(lower_case(\$words[0]) == "down") \{ 
    EmitIn(\$actor."base:environment", Describe(\$this)+" sinks " + \$this."base:possessive" + " body slowly down onto the ground."); 
    Social(this, "lie", nil, nil, "beside", \$actor );                   
\} else if(lower_case(\$words[0]) == "bark") \{                   
    \$rand = random(2); 
switch(\$rand) \{ 
    case 0:  
        EmitIn(\$actor."base:environment", Describe(\$this)+" throws " + \$this."base:possessive" + " head back while barking loudly with excitement."); 
        break; 
    case 1:                   
    EmitIn(\$actor."base:environment", Describe(\$this)+" wags his " + \$this."base:possessive" + " tail to-and-fro while barking animatedly."); 
        break;\}                   
\} else if(lower_case(\$words[0]) == "sniff") \{                   
    \$rand = random(2); 
switch(\$rand) \{ 
    case 0:  
        EmitIn(\$actor."base:environment", Describe(\$this)+" lowers " + \$this."base:possessive" + " head, sniffing here and there with curiosity."); 
        break; 
    case 1:                   
    EmitIn(\$actor."base:environment", Describe(\$this)+" cocks " + \$this."base:possessive" + " head before cautiously sniffing and snuffling."); 
        break;\}                         
\} else if(lower_case(\$words[0]) == "pant") \{                   
    \$rand = random(2); 
switch(\$rand) \{ 
    case 0:  
        EmitIn(\$actor."base:environment", Describe(\$this)+" pants heavily, " + \$this."base:possessive" + " tongue hanging from the side of " + \$this."base:possessive" + " mouth."); 
        break; 
    case 1:                   
    EmitIn(\$actor."base:environment", Describe(\$this)+" lolls " + \$this."base:possessive" + " tongue from " + \$this."base:possessive" + " mouth, panting softly with scrunched eyes."); 
        break;\}                   
\} else if(lower_case(\$words[0]) == "belly-rub") \{                   
    \$rand = random(2); 
switch(\$rand) \{ 
    case 0:  
        EmitIn(\$actor."base:environment", Describe(\$this)+" dramatically flops onto " + \$this."base:possessive" + " back while waving " + \$this."base:possessive" + " paws in the air."); 
        break; 
    case 1:                   
    EmitIn(\$actor."base:environment", Describe(\$this)+" flops onto " + \$this."base:possessive" + " back, " + \$this."base:possessive" + " paws flopping loosely in the air overhead."); 
        break;\}                   
\} else if(lower_case(\$words[0]) == "yawn") \{                   
    \$rand = random(2); 
switch(\$rand) \{ 
    case 0:  
        EmitIn(\$actor."base:environment", Describe(\$this)+" yawns as " + \$this."base:possessive" + " eyes scrunch and " + \$this."base:possessive" + " tongue curls."); 
        break; 
    case 1:                   
    EmitIn(\$actor."base:environment", Describe(\$this)+" stretches indulgently while yawning, " + \$this."base:possessive" + " tail and " + \$this."base:possessive" + " eyelids both drooping low."); 
        break;\}                 
\} else if(lower_case(\$words[0]) == "roll") \{                   
    \$rand = random(2); 
switch(\$rand) \{ 
    case 0:  
        EmitIn(\$actor."base:environment", Describe(\$this)+" rolls onto " + \$this."base:possessive" + " back and stands upright again in one clumsy motion."); 
        break; 
    case 1:                   
    EmitIn(\$actor."base:environment", Describe(\$this)+" flops onto " + \$this."base:possessive" + " back and writhes around with a groan before standing up again."); 
        break;\}                   
\} else if(lower_case(\$words[0]) == "sit") \{                   
    Social(this, "sit", nil, nil, "beside", \$actor );   
\} else if(lower_case(\$words[0]) == "growl") \{ 
    \$rand = random(2); 
switch(\$rand) \{ 
    case 0:  
        EmitIn(\$actor."base:environment", Describe(\$this)+" bares " + \$this."base:possessive" + " teeth, a growl rumbling deep in " + \$this."base:possessive" + " chest."); 
        break; 
    case 1:                   
    EmitIn(\$actor."base:environment", Describe(\$this)+" snarls as the hair on " + \$this."base:possessive" + " back raises and " + \$this."base:possessive" + " teeth flash with a growl."); 
        break;\}                    
\} else if(lower_case(\$words[0]) == "sleep") \{                   
    \$rand = random(2); 
switch(\$rand) \{ 
    case 0:  
        EmitIn(\$actor."base:environment", Describe(\$this)+" peacefully sleeps on " + \$this."base:possessive" + " side, " + \$this."base:possessive" + " back legs twitching as though running."); 
        break; 
    case 1:                   
    EmitIn(\$actor."base:environment", Describe(\$this)+" breathes deep and peacefully in slumber as " + \$this."base:possessive" + " tail wags with a mind of its own."); 
        break;\} 
\} else if(lower_case(\$words[0]) == "tilt") \{ 
    \$rand = random(2); 
switch(\$rand) \{ 
    case 0:  
        EmitIn(\$actor."base:environment", Describe(\$this)+" slowly tilts " + \$this."base:possessive" + " head to the side, " + \$this."base:possessive" + " eyes blinking repeatedly."); 
        break; 
    case 1:                   
    EmitIn(\$actor."base:environment", Describe(\$this)+" cocks " + \$this."base:possessive" + " head sideways, " + \$this."base:possessive" + " ears perking upright."); 
        break;\}                         
\} else if(lower_case(\$words[0]) == "dress") \{                
    \$inventory = this."base:inventory";                
    Act(this, "wear", \$articles: \$inventory);                
\} else if(lower_case(\$words[0]) == "undress") \{                
    ::undress();                
\} else if(lower_case(\$words[0]) == "go" \&\& lower_case(\$words[2]) == "ownerone") \{                
    \$home = Get(Obj(\$ownerone), "virtualhome:home");                
    this."base:environment" = \$home;                
    EmitIn(\$actor."base:environment", Describe(\$this) + " trots home.");                
\} else if(lower_case(\$words[0]) == "go" \&\& lower_case(\$words[2]) == "ownertwo") \{                
    if(Obj(\$ownertwo)) \{                
        \$home = Get(Obj(\$ownertwo), "virtualhome:home");                
        this."base:environment" = \$home;                
        EmitIn(\$actor."base:environment", Describe(\$this) + " trots home.");                
    \} else \{                
        EmitTo(\$actor, Describe(this) + " doesn't have a second owner.");                
    \}                
\} else \{                
    EmitTo(\$actor, \$errormsg);                
\}                
                
return FALSE;
      </Core:Property>
      <Core:Property property="export:feeding:accepts">
         (\{ (\{ "base:edible", 1 \}) \})
      </Core:Property>
      <Core:Property property="export:nip-core:consent:allow-all">
         1
      </Core:Property>
      <Core:Property property="export:nip-core:hooks">
         ([ "decide":\<MOVED:20080918-114107:Lib:NIP:base:hooks:decide\>, "delay":\<MOVED:20080918-114107:Lib:NIP:base:hooks:delay\>, "emoting":\<MOVED:20080918-114107:Lib:NIP:lib:emoting\>, "freemoting":\<MOVED:20080918-114107:Lib:NIP:lib:freemoting\>, "internal":\<MOVED:20080918-114107:Lib:NIP:base:hooks:internal\>, "movement":\<MOVED:20080918-114107:Lib:NIP:lib:movement\>, "predator":\<MOVED:20080918-114107:Lib:NIP:lib:predator\>, "resource-control":\<MOVED:20080918-114107:Lib:NIP:lib:resource-control\> ])
      </Core:Property>
      <Core:Property property="export:nip-core:inherits">
         ([ \<MOVED:20080918-114107:Lib:NIP:lib:resource-control\>:(\{ "witness:login%nip:resource-control", "witness:enter-from%nip:resource-control", "witness:teleport%resource-control", "lib:entering" \}), \<MOVED:20080918-114107:Lib:NIP:lib:movement\>:(\{ "lib:core_movement_exit" \}), \<MOVED:20080918-114107:Lib:NIP:base:lib:hooks\>:(\{ "lib:core:find-hook", "lib:core:register-hook", "lib:core:unregister-hook", "lib:modify:hooks", "setprop-post:hook" \}), \<MOVED:20080918-114107:Lib:NIP:base:lib:signals\>:(\{ "lib:modify:signals", "setprop-post:signal", "lib:calc_sighookpath" \}), \<MOVED:20080918-114107:Lib:NIP:base:lib:stream\>:(\{ "setprop-post:sigexecptr", "setprop-post:sigstream" \}), \<MOVED:20080918-114107:Lib:NIP:base:signals:DECIDE\>:(\{ "setprop-post:decide" \}), \<MOVED:20080918-114107:Lib:NIP:lib:eating\>:(\{ "act:eat%nip:core", "lib:handler:offer:eating" \}), \<MOVED:20080918-114107:Lib:NIP:lib:emoting\>:(\{ "lib:handler:emoting:parse", "lib:behave" \}), \<MOVED:20080918-114107:Lib:NIP:lib:freemoting\>:(\{ "lib:handler_freemote" \}), \<MOVED:20080918-114107:Lib:NIP:lib:offers\>:(\{ "react-post:offer-who", "lib:core:add_offer", "lib:core:sub_offer" \}), \<MOVED:20080918-114107:Lib:NIP:lib:spawn-control\>:(\{ "act:stop" \}), \<MOVED:20080918-114107:Lib:NIP:lib:predator\>:(\{ "lib:act:predator:attack", "lib:handler:offer:eating", "act:eat%predator" \}) ])
      </Core:Property>
      <Core:Property property="export:nip-core:libraries">
         (\{ \<MOVED:20080918-114107:Lib:NIP:base:lib:signals\>, \<MOVED:20080918-114107:Lib:NIP:base:lib:hooks\>, \<MOVED:20080918-114107:Lib:NIP:base:lib:stream\>, \<MOVED:20080918-114107:Lib:NIP:lib:resource-control\>, \<Lib:NIP:core\>, \<MOVED:20080918-114107:Lib:NIP:base:signals:DELAY\>, \<MOVED:20080918-114107:Lib:NIP:base:signals:DECIDE\>, \<MOVED:20080918-114107:Lib:NIP:base:signals:INTERNAL\>, \<MOVED:20080918-114107:Lib:NIP:lib:movement\>, \<MOVED:20080918-114107:Lib:NIP:lib:spawn-control\>, \<MOVED:20080918-114107:Lib:NIP:lib:emoting\>, \<MOVED:20080918-114107:Lib:NIP:lib:freemoting\>, \<MOVED:20080918-114107:Lib:NIP:lib:offers\>, \<MOVED:20080918-114107:Lib:NIP:lib:eating\>, \<MOVED:20080918-114107:Lib:NIP:lib:predator\> \})
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:behavior:">
         ([ 4:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:offer:scripts">
         ([ 5:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:stats:agility">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:stats:offense">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:hints:">
         ([ 4:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:movement:frequency">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:predator:cannibal">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:predator:prey">
         ([ 5:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:predator:scavenger">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:resource-control:ttl">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:resource-control:ttl_increase">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:sighookpath">
         (\{ "delay:DELAY-init", "delay:DELAY-exec", "resource-control:INTERNAL", "internal:INTERNAL-exec", "decide:DECIDE-init", "emoting:DECIDE", "freemoting:DECIDE", "movement:DECIDE", "predator:DECIDE", "decide:DECIDE-exec", "decide:DECIDE-post" \})
      </Core:Property>
      <Core:Property property="export:nip-core:signals">
         ([ 10:"DELAY", 500:"INTERNAL", 1000:"DECIDE" ])
      </Core:Property>
      <Core:Property property="export:nip-core:system:revision">
         44
      </Core:Property>
      <Core:Property property="export:nip:behavior:predator">
         \<Allegory:NPCs:NIPs:StrayAnimals:BehaviorPredator\>
      </Core:Property>
      <Core:Property property="export:nip:offer:scripts">
         (\{ "handler:offer:eating" \})
      </Core:Property>
      <Core:Property property="export:nip:stats">
         "offence 5"
      </Core:Property>
      <Core:Property property="export:nip:stats:agility">
         10
      </Core:Property>
      <Core:Property property="export:nip:stats:offense">
         10
      </Core:Property>
      <Core:Property property="export:nip:trait:eating:accepts">
         ([ "base:edible":1, "nip:food":1 ])
      </Core:Property>
      <Core:Property property="export:nip:trait:eating:burn">
         300
      </Core:Property>
      <Core:Property property="export:nip:trait:eating:grammes">
         2000
      </Core:Property>
      <Core:Property property="export:nip:trait:movement:frequency">
         0
      </Core:Property>
      <Core:Property property="export:nip:trait:predator:cannibal">
         0
      </Core:Property>
      <Core:Property property="export:nip:trait:predator:scavenger">
         1
      </Core:Property>
      <Core:Property property="export:nip:trait:resource-control:ttl">
         1800
      </Core:Property>
      <Core:Property property="export:nip:trait:resource-control:ttl_increase">
         600
      </Core:Property>
      <Core:Property property="export:npc:resource-control:live_time">
         1572638752
      </Core:Property>
      <Core:Property property="export:theatre:id">
         "IC"
      </Core:Property>
      <Core:Property property="export:trait:animaltype">
         "dog"
      </Core:Property>
      <Core:Property property="export:trait:commands:default">
         (\{ "access", "allow", "attack", "bark-happy", "bark-warning", "beg", "belly-rub", "cry", "deny", "down", "dress", "follow", "growl", "howl", "pant", "play", "roll", "sniff", "sit", "sleep", "stay", "tilt", "undress", "wag", "yawn" \})
      </Core:Property>
      <Core:Property property="export:trait:objecttype">
         "dog"
      </Core:Property>
      <Core:Property property="export:trait:smell">
         "dog"
      </Core:Property>
      <Core:Property property="export:volition">1</Core:Property>
      <Core:Property property="loading">1</Core:Property>
      <Core:Property property="merry:inherit:act:eat%nip:core">
         \<MOVED:20080918-114107:Lib:NIP:lib:eating\>
      </Core:Property>
      <Core:Property property="merry:inherit:act:eat%predator">
         \<MOVED:20080918-114107:Lib:NIP:lib:predator\>
      </Core:Property>
      <Core:Property property="merry:inherit:act:start">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:act:stop">
         \<MOVED:20080918-114107:Lib:NIP:lib:spawn-control\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:act:predator:attack">
         \<MOVED:20080918-114107:Lib:NIP:lib:predator\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:attack">
         \<Allegory:Lib:Controls:Pets:PetControls\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:behave">
         \<MOVED:20080918-114107:Lib:NIP:lib:emoting\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:calc_sighookpath">
         \<MOVED:20080918-114107:Lib:NIP:base:lib:signals\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:add_offer">
         \<MOVED:20080918-114107:Lib:NIP:lib:offers\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:find-hook">
         \<MOVED:20080918-114107:Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:merry_add">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:merry_delete">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:register-hook">
         \<MOVED:20080918-114107:Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:sub_offer">
         \<MOVED:20080918-114107:Lib:NIP:lib:offers\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:sysupdate">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:unregister-hook">
         \<MOVED:20080918-114107:Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:decide:decide-exec">
         \<MOVED:20080918-114107:Lib:NIP:base:hooks:decide\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:decide:decide-init">
         \<MOVED:20080918-114107:Lib:NIP:base:hooks:decide\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:decide:decide-post">
         \<MOVED:20080918-114107:Lib:NIP:base:hooks:decide\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:delay:delay-exec">
         \<MOVED:20080918-114107:Lib:NIP:base:hooks:delay\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:delay:delay-init">
         \<MOVED:20080918-114107:Lib:NIP:base:hooks:delay\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:eating:decide">
         \<MOVED:20080918-114107:Lib:NIP:lib:eating\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:eating:internal">
         \<MOVED:20080918-114107:Lib:NIP:lib:eating\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:entering">
         \<MOVED:20080918-114107:Lib:NIP:lib:resource-control\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:find_nip_object">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:handler:offer:eating">
         \<MOVED:20080918-114107:Lib:NIP:lib:predator\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:handler_freemote">
         \<MOVED:20080918-114107:Lib:NIP:lib:freemoting\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:heartbeat">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:internal:internal-exec">
         \<MOVED:20080918-114107:Lib:NIP:base:hooks:internal\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:log">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:modify:hooks">
         \<MOVED:20080918-114107:Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:modify:libraries">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:modify:signals">
         \<MOVED:20080918-114107:Lib:NIP:base:lib:signals\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:movement:decide">
         \<MOVED:20080918-114107:Lib:NIP:lib:movement\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:ncs:handler">
         \<MOVED:20080918-114107:Lib:NIP:NCS\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:predator:decide">
         \<MOVED:20080918-114107:Lib:NIP:lib:predator\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:shutdown">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:react-post:offer-who">
         \<MOVED:20080918-114107:Lib:NIP:lib:offers\>
      </Core:Property>
      <Core:Property property="merry:inherit:react-post:show-iob%tracking">
         \<Allegory:Lib:Controls:Pets:PetControls\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:add">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:decide">
         \<MOVED:20080918-114107:Lib:NIP:base:signals:DECIDE\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:del">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:delete">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:error">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:hook">
         \<MOVED:20080918-114107:Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:nip">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:nip-core">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:sigexecptr">
         \<MOVED:20080918-114107:Lib:NIP:base:lib:stream\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:signal">
         \<MOVED:20080918-114107:Lib:NIP:base:lib:signals\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:sigstream">
         \<MOVED:20080918-114107:Lib:NIP:base:lib:stream\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:sub">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:witness-post:login%nip:resource-control">
         \<MOVED:20080918-114107:Lib:NIP:lib:resource-control\>
      </Core:Property>
      <Core:Property property="merry:inherit:witness:enter-from%nip:resource-control">
         \<MOVED:20080918-114107:Lib:NIP:lib:resource-control\>
      </Core:Property>
      <Core:Property property="merry:inherit:witness:teleport%resource-control">
         \<MOVED:20080918-114107:Lib:NIP:lib:resource-control\>
      </Core:Property>
      <Core:Property property="merry:lib:access">
         X[M] if(\$ownerone != Str(\$actor) \&\& \$ownertwo != Str(\$actor)) \{                  
  EmitTo(\$actor, "You are not my owner, so you can't control me.");                  
  return FALSE;                  
\}  
 
\$rstr = "The following people have access to " + Describe(\$this) + ":\\n"; 
if(\$this."trait:ownerone") \{ 
    \$rstr += "Owner 1 - " + Describe(\$this."trait:ownerone") + "\\n"; 
\} 
if(\$this."trait:ownerone") \{ 
    \$rstr += "Owner 2 - " + Describe(\$this."trait:ownertwo") + "\\n"; 
\} 
 
if(\$this."trait:friends") \{ 
    \$friends = \$this."trait:friends"; 
\} else \{ 
    \$friends = (\{ \}); 
\} 
 
\$friends -= (\{ nil \}); 
 
for(\$i = 0; \$i \< sizeof(\$friends); \$i++) \{ 
    \$rstr += "Friend - " + Describe(\$friends[\$i]) + "\\n"; 
\} 
 
EmitTo(\$actor, \$rstr); 
 
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:allow">
         X[M] if(\$ownerone != Str(\$actor) \&\& \$ownertwo != Str(\$actor)) \{                  
  EmitTo(\$actor, "You are not my owner, so you can't control me.");                  
  return FALSE;                  
\}  
 
if(!\$param) \{ 
    EmitTo(\$actor, "[OOC: Give control of your pet to another character.]"); 
    EmitTo(\$actor, "Syntax: control dog 'allow bob'"); 
    return FALSE; 
\} 
 
if(!(\$friend = common::lookup(\$name: \$param))) \{ 
    EmitTo(\$actor, TAG("Cannot find character named " + Str(\$param), "imp")); 
    EmitTo(\$actor, "Syntax: control dog 'allow bob'"); 
    return FALSE; 
\} 
 
if(\$this."trait:friends") \{ 
    \$friends = \$this."trait:friends"; 
\} else \{ 
    \$friends= (\{ \}); 
\} 
 
\$friends \|= (\{ \$friend \}); 
 
\$this."trait:friends" = \$friends; 
 
EmitTo(\$actor, "Access to " + Describe(\$this) + " has been given to " + Describe(\$friend) + "."); 
 
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:amialone">
         X[M] if(\$this."amialone:id") \{                  
    Stop(\$this."amialone:id");                  
    \$this."amialone:id" = nil;                  
\}                  
                  
\$ownerone = Str(\$this."trait:ownerone");                  
\$ownertwo = Str(\$this."trait:ownertwo");                  
                  
\$homeone = Obj(\$ownerone)."virtualhome:home";                  
                  
if(Obj(\$ownertwo)) \{                  
    \$hometwo = Obj(\$ownertwo)."virtualhome:home";                  
\}                  
                  
\$env = \$this."base:environment";                  
\$surroundings = \$env."base:inventory";                  
                  
if(\$env == \$ownerone \|\| \$env == \$ownertwo \|\| \$env == \$homeone \|\| \$env == \$hometwo \|\| \$found == 1 \|\| member(Obj(\$ownerone), \$surroundings) \|\| (Obj(\$ownertwo) \&\& member(Obj(\$ownertwo), \$surroundings))) \{                  
    \$this."amialone:id" = In("amialone", 300);                  
\} else \{                  
    EmitIn(this."base:environment", Describe(this) + " goes home.");                  
                  
    if(this.follow) \{                  
        \$home = Get(this.follow, "virtualhome:home");                  
    \} else \{                  
        \$home = \$homeone;                  
    \}                  
                  
    \$this."base:environment" = \$home;                  
\}                  
                  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:bark-happy">
         X[M] \$rand = random(2); 
switch(\$rand) \{ 
    case 0:  
        EmitIn(\$actor."base:environment", Describe(\$this)+" throws " + \$this."base:possessive" + " head back while barking loudly with excitement."); 
        break; 
    case 1:                   
    EmitIn(\$actor."base:environment", Describe(\$this)+" wags his " + \$this."base:possessive" + " tail to-and-fro while barking animatedly."); 
        break;\}
      </Core:Property>
      <Core:Property property="merry:lib:bark-warning">
         X[M] \$rand = random(2); 
switch(\$rand) \{ 
    case 0:  
        EmitIn(\$actor."base:environment", Describe(\$this)+" bristles " + \$this."base:possessive" + " fur and barks aggressively, " + \$this."base:possessive" + " teeth flashing with a snarl."); 
        break; 
    case 1:                   
    EmitIn(\$actor."base:environment", Describe(\$this)+" narrows " + \$this."base:possessive" + " eyes as " + \$this."base:possessive" + " hackles rise, barking with a warning tone."); 
        break;\}
      </Core:Property>
      <Core:Property property="merry:lib:beg">
         X[M] \$rand = random(2); 
switch(\$rand) \{ 
    case 0:  
        EmitIn(\$actor."base:environment", Describe(\$this)+" looks up with a pitiful, plaintive expression, lifting " + \$this."base:possessive" + " paw subtly from the ground."); 
        break; 
    case 1:                   
    EmitIn(\$actor."base:environment", Describe(\$this)+" shamelessly begs, " + \$this."base:possessive" + " eyes growing round as " + \$this."base:pronoun" + " whines softly."); 
        break;\}
      </Core:Property>
      <Core:Property property="merry:lib:belly-rub">
         X[M] \$rand = random(2); 
switch(\$rand) \{ 
    case 0:  
        EmitIn(\$actor."base:environment", Describe(\$this)+" dramatically flops onto " + \$this."base:possessive" + " back while waving " + \$this."base:possessive" + " paws in the air."); 
        break; 
    case 1:                   
    EmitIn(\$actor."base:environment", Describe(\$this)+" flops onto " + \$this."base:possessive" + " back, " + \$this."base:possessive" + " paws flopping loosely in the air overhead."); 
        break;\}
      </Core:Property>
      <Core:Property property="merry:lib:cry">
         X[M] \$rand = random(2); 
switch(\$rand) \{ 
    case 0:  
        EmitIn(\$actor."base:environment", Describe(\$this)+" lets out a series of small whimpers."); 
        break; 
    case 1:                   
    EmitIn(\$actor."base:environment", Describe(\$this)+" whines pitifully."); 
        break;\}
      </Core:Property>
      <Core:Property property="merry:lib:deny">
         X[M] if(\$ownerone != Str(\$actor) \&\& \$ownertwo != Str(\$actor)) \{                  
  EmitTo(\$actor, "You are not my owner, so you can't control me.");                  
  return FALSE;                  
\}  
 
if(!\$param) \{ 
    EmitTo(\$actor, "[OOC: Revoke control of your pet from another character.]"); 
    EmitTo(\$actor, "Syntax: control dog 'deny bob'"); 
    return FALSE; 
\} 
 
if(!(\$friend = common::lookup(\$name: \$param))) \{ 
    EmitTo(\$actor, TAG("Cannot find character named " + Str(\$param), "imp")); 
    EmitTo(\$actor, "Syntax: control dog 'deny bob'"); 
    return FALSE; 
\} 
 
if(\$this."trait:friends") \{ 
    \$friends = \$this."trait:friends"; 
\} else \{ 
    \$friends= (\{ \}); 
\} 
 
if(!member(\$friend, \$friends)) \{ 
    EmitTo(\$actor, Describe(\$friend) + " does not have access to " + Describe(\$this) + "."); 
    return FALSE; 
\} 
 
\$friends -= (\{ \$friend \}); 
 
\$this."trait:friends" = \$friends; 
 
EmitTo(\$actor, "Access to " + Describe(\$this) + " has been revoked from " + Describe(\$friend) + "."); 
 
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:down">
         X[M] EmitIn(\$actor."base:environment", Describe(\$this)+" sinks " + \$this."base:possessive" + " body slowly down onto the ground."); 
    Social(this, "lie", nil, nil, "beside", \$actor );
      </Core:Property>
      <Core:Property property="merry:lib:dress">
         X[M] \$inventory = this."base:inventory";          
Act(this, "wear", \$articles: \$inventory);
      </Core:Property>
      <Core:Property property="merry:lib:follow">
         X[M] EmitTo(\$actor, Describe(this)+" will now follow you.");                    
this.follow = \$actor;                 
Social(this, "trot", "obediently", nil, "to", \$actor );                 
\$this."amialone:id" = In("amialone", 300);
      </Core:Property>
      <Core:Property property="merry:lib:godad">
         X[M] if(Obj(\$ownertwo)) \{                 
    \$home = Get(Obj(\$ownertwo), "virtualhome:home");                 
    this."base:environment" = \$home;                 
    EmitIn(\$actor."base:environment", Describe(\$this) + " trots home.");                 
\} else \{                 
    EmitTo(\$actor, Describe(this) + " doesn't have a second owner.");                 
\}
      </Core:Property>
      <Core:Property property="merry:lib:gomom">
         X[M] \$home = Get(Obj(\$ownerone), "virtualhome:home");                 
\$this."base:environment" = \$home;                 
EmitIn(\$actor."base:environment", Describe(\$this) + " trots home.");
      </Core:Property>
      <Core:Property property="merry:lib:growl">
         X[M] \$rand = random(2); 
switch(\$rand) \{ 
    case 0:  
        EmitIn(\$actor."base:environment", Describe(\$this)+" bares " + \$this."base:possessive" + " teeth, a growl rumbling deep in " + \$this."base:possessive" + " chest."); 
        break; 
    case 1:                   
    EmitIn(\$actor."base:environment", Describe(\$this)+" snarls as the hair on " + \$this."base:possessive" + " back raises and " + \$this."base:possessive" + " teeth flash with a growl."); 
        break;\}
      </Core:Property>
      <Core:Property property="merry:lib:howl">
         X[M] \$rand = random(2); 
switch(\$rand) \{ 
    case 0:  
        EmitIn(\$actor."base:environment", Describe(\$this)+" lifts " + \$this."base:possessive" + " head and lets out a long, low howl."); 
        break; 
    case 1:                   
    EmitIn(\$actor."base:environment", Describe(\$this)+" tilts " + \$this."base:possessive" + " head skyward before howling long and low."); 
        break;\}
      </Core:Property>
      <Core:Property property="merry:lib:iwantthat">
         X[M] if(\$what) \{             
    if(!NRefOb(\$what[0])."base:edible") return FALSE;             
\}             
             
if(\$dob) \{             
    if(!NRefOb(\$dob[0])."base:edible") return FALSE;             
\}             
             
if(random(10) \>= 7) return TRUE;             
             
\$delay(2, TRUE, "d406");             
             
switch(random(7)) \{             
  case 0:             
  \{             
    Social(\$this, "pant", "softly");             
    break;            
  \}             
  case 1:             
  \{             
    Social(\$this, "pant", "softly");             
    break;             
  \}             
  case 2:             
  \{             
    Social(\$this, "stare", "silently");             
    break;             
  \}             
  case 3:             
  \{             
    Social(\$this, "sniff");             
    break;             
  \}             
  case 4:             
  \{             
    Social(\$this, "stare", "hungrily");             
    break;             
  \}             
  case 5:             
  \{             
    Social(\$this, "whimper", "ever-so-slightly");             
    break;             
  \}             
  case 6:             
  \{             
    Social(\$this, "sigh", "frustratedly");             
    break;             
  \}             
  case 7:             
  \{             
    Social(\$this, "wag", "back-and-forth", nil, nil, NewNRef(\$this, "tail"));             
    break;             
  \}             
  default:             
  \{             
    Social(\$this, "stare", "hungrily");             
    break;             
  \}             
\}             
             
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:pant">
         X[M] \$rand = random(2); 
switch(\$rand) \{ 
    case 0:  
        EmitIn(\$actor."base:environment", Describe(\$this)+" pants heavily, " + \$this."base:possessive" + " tongue hanging from the side of " + \$this."base:possessive" + " mouth."); 
        break; 
    case 1:                   
    EmitIn(\$actor."base:environment", Describe(\$this)+" lolls " + \$this."base:possessive" + " tongue from " + \$this."base:possessive" + " mouth, panting softly with scrunched eyes."); 
        break;\}
      </Core:Property>
      <Core:Property property="merry:lib:play">
         X[M] \$rand = random(2); 
switch(\$rand) \{ 
    case 0:  
        EmitIn(\$actor."base:environment", Describe(\$this)+" abruptly drops " + \$this."base:possessive" + " torso onto the ground, " + \$this."base:possessive" + " tail wagging in an invitation to play."); 
        break; 
    case 1:                   
    EmitIn(\$actor."base:environment", Describe(\$this)+" makes a soft woofing sound before sticking " + \$this."base:possessive" + " rump in the air and wagging " + \$this."base:possessive" + " tail playfully."); 
        break;\}
      </Core:Property>
      <Core:Property property="merry:lib:roll">
         X[M] \$rand = random(2); 
switch(\$rand) \{ 
    case 0:  
        EmitIn(\$actor."base:environment", Describe(\$this)+" rolls onto " + \$this."base:possessive" + " back and stands upright again in one clumsy motion."); 
        break; 
    case 1:                   
    EmitIn(\$actor."base:environment", Describe(\$this)+" flops onto " + \$this."base:possessive" + " back and writhes around with a groan before standing up again."); 
        break;\}
      </Core:Property>
      <Core:Property property="merry:lib:sit">
         X[M] Social(this, "sit", nil, nil, "beside", \$actor );
      </Core:Property>
      <Core:Property property="merry:lib:sleep">
         X[M] \$rand = random(2); 
switch(\$rand) \{ 
    case 0:  
        EmitIn(\$actor."base:environment", Describe(\$this)+" peacefully sleeps on " + \$this."base:possessive" + " side, " + \$this."base:possessive" + " back legs twitching as though running."); 
        break; 
    case 1:                   
    EmitIn(\$actor."base:environment", Describe(\$this)+" breathes deep and peacefully in slumber as " + \$this."base:possessive" + " tail wags with a mind of its own."); 
        break;\}
      </Core:Property>
      <Core:Property property="merry:lib:sniff">
         X[M] \$rand = random(2); 
switch(\$rand) \{ 
    case 0:  
        EmitIn(\$actor."base:environment", Describe(\$this)+" lowers " + \$this."base:possessive" + " head, sniffing here and there with curiosity."); 
        break; 
    case 1:                   
    EmitIn(\$actor."base:environment", Describe(\$this)+" cocks " + \$this."base:possessive" + " head before cautiously sniffing and snuffling."); 
        break;\}
      </Core:Property>
      <Core:Property property="merry:lib:stay">
         X[M] EmitTo(\$actor, Describe(this)+" will no longer follow you."); 
     EmitIn(\$actor."base:environment", Describe(\$this)+" lowers " + \$this."base:possessive" + " head and obediently waits.");                    
this.follow = nil;
      </Core:Property>
      <Core:Property property="merry:lib:tilt">
         X[M] \$rand = random(2); 
switch(\$rand) \{ 
    case 0:  
        EmitIn(\$actor."base:environment", Describe(\$this)+" slowly tilts " + \$this."base:possessive" + " head to the side, " + \$this."base:possessive" + " eyes blinking repeatedly."); 
        break; 
    case 1:                   
    EmitIn(\$actor."base:environment", Describe(\$this)+" cocks " + \$this."base:possessive" + " head sideways, " + \$this."base:possessive" + " ears perking upright."); 
        break;\}
      </Core:Property>
      <Core:Property property="merry:lib:undress">
         X[M] /* undressing ourselves */                
\$delay(0.01, TRUE, "c799");                
                
\$mapping = \$this."base:clothes-worn";                
\$clothes = (\{ \});                
\$indices = map_indices(\$mapping);                
for(\$i=0;\$i\<sizeof(\$indices);\$i++) \{                
  for(\$j=0;\$j\<sizeof(\$mapping[\$indices[\$i]]);\$j++) \{                
    \$item = \$mapping[\$indices[\$i]][\$j];                
    if(member(\$item, \$clothes)) \{                
      /* already in the list */                
      /* add anything covering this item */                
      if(sizeof(\$mapping[\$indices[\$i]]) \> \$j+1) \{                
        /* there are items covering this */                
        \$item."clothing:covered-by" \|= \$mapping[\$indices[\$i]][\$j+1..];                
      \}                
    \} else \{                
      /* not in the list */                
      /* add anything covering this item */                
      \$clothes += (\{ \$item \});                
      if(sizeof(\$mapping[\$indices[\$i]]) \> \$j+1) \{                
        /* there are items covering this */                
        \$item."clothing:covered-by" = \$mapping[\$indices[\$i]][\$j+1..];                
      \} else \{                
        \$item."clothing:covered-by" = (\{ \});                
      \}                
    \}                
  \}                
\}                
                
/* now make a list of what is on top to bottom */                
\$ordered_list = (\{ \});                
while(sizeof(\$clothes)) \{                
  \$tmp_list = (\{ \});                
  for(\$i=0;\$i\<sizeof(\$clothes);\$i++) \{                
    if(sizeof(\$clothes[\$i]."clothing:covered-by")) \{                
      /* this item is covered by something. Is that something already removed? */                
      if(!sizeof(\$clothes \& \$clothes[\$i]."clothing:covered-by")) \{                
        /* no longer covered. Add to the list */                
        \$tmp_list \|= (\{ \$clothes[\$i] \});                
      \}                
    \} else \{                
      /* not covered by anything. Move this to the list */                
      \$tmp_list \|= (\{ \$clothes[\$i] \});                
    \}                
  \}                
  \$ordered_list += (\{ \$tmp_list \});                
  \$clothes -= \$tmp_list;                
\}                
                
/* save this list in the player's body */                
if(sizeof(\$ordered_list))                
  \$this."clothing:last-wearing" = \$ordered_list;                
                
/* remove the clothes */                
for(\$i=0;\$i\<sizeof(\$ordered_list);\$i++) \{                
  Act(\$this, "unwear", \$articles: \$ordered_list[\$i]);                
\}                
                
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:wag">
         X[M] \$rand = random(2); 
switch(\$rand) \{ 
    case 0:  
        EmitIn(\$actor."base:environment", Describe(\$this)+" happily wags " + \$this."base:possessive" + " tail with a look of pleasure on " + \$this."base:possessive" + " face."); 
        break; 
    case 1:                   
    EmitIn(\$actor."base:environment", Describe(\$this)+" animatedly wags " + \$this."base:possessive" + " tail while perking " + \$this."base:possessive" + " ears up."); 
        break;\}
      </Core:Property>
      <Core:Property property="merry:lib:yawn">
         X[M] \$rand = random(2); 
switch(\$rand) \{ 
    case 0:  
        EmitIn(\$actor."base:environment", Describe(\$this)+" yawns as " + \$this."base:possessive" + " eyes scrunch and " + \$this."base:possessive" + " tongue curls."); 
        break; 
    case 1:                   
    EmitIn(\$actor."base:environment", Describe(\$this)+" stretches indulgently while yawning, " + \$this."base:possessive" + " tail and " + \$this."base:possessive" + " eyelids both drooping low."); 
        break;\}
      </Core:Property>
      <Core:Property property="merry:react-post:whistle-iob">
         X[M] EmitTo(\$actor, Describe(this)+" will now follow you.");                    
this.follow = \$actor;                 
Social(this, "trot", "obediently", nil, "to", \$actor );                 
\$this."amialone:id" = In("amialone", 300);
      </Core:Property>
      <Core:Property property="merry:react-pre:take">
         X[M] /* Record what room the actor is in */                       
\$room = \$actor."Base:environment";     
 
\$friends = \$this."trait:friends";    
if(!\$friends) \$friends = (\{ \});                
                       
/* Check if the actor is allowed to pick up the dog */                       
  /* check if \$actor is the dog's owner */                       
if(\$actor == \$this."trait:ownerone" \|\| \$actor == \$this."trait:ownertwo" \|\| member(\$actor, \$friends)) \{                       
  /* if the actor is allowed to pick up the dog */                       
  /* tell the actor that they picked up the dog */                       
  /* tell the room that the actor picked up the dog */                       
  EmitTo(\$actor, "You pick up "+Describe(\$this)+".");                       
  EmitIn(\$room, Describe(\$actor)+" picks up "+ Describe(\$this)+".", \$actor);                       
  \$this."base:environment" = \$actor;                       
                       
\} else \{                       
  /* the actor is not the dog's owner */                       
                       
  /* if the dog is already being held by someone */                       
  if(\$this."base:environment"."base:volition") \{                       
    /* use the normal give/take/offer code */                       
    return TRUE;                       
  \} else \{                       
    /* tell the actor that they can't take the dog */                       
    /* tell the room that the actor is a dognapper! */                       
    EmitTo(\$actor, "That dog is not yours!");                       
    EmitIn(\$room, Describe(\$actor)+" attempts to take "+ Describe(\$this)+".", \$actor);                       
  \}                       
\}                       
                       
/* return false, so that the actor doesn't see a message about not being allowed to pick up the dog */                       
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react:control-dob">
         X[M] int i, sz;                  
int found;               
string* commands, *commandsDefault, *commandsExtra;               
string errormsg, self, possessive, nominative, objective, input, param;               
mixed property, result;               
               
/* Gather commands located in UR baby */               
commandsDefault = (\{ \});               
if(\$this."trait:commands:default") \{               
    commandsDefault = \$this."trait:commands:default";               
\}               
               
/* Gather baby specific commands */               
commandsExtra = (\{ \});               
if(\$this."trait:commands:extra") \{               
    commandsExtra = \$this."trait:commands:extra";               
\}               
               
/* Put them all together */               
commands = commandsDefault \| commandsExtra;               
               
if(!sizeof(commands)) \{               
    commands = (\{ "none" \});               
\}               
               
errormsg = "That is not a valid command for the dog. Valid orders are: \\"" + implode(commands, "\\" \\"") +"\\"";               
               
if(!\$evoke) \{               
    EmitTo(\$actor, errormsg);               
    return FALSE;               
\}               
                  
input = replace_strings(\$evoke, "\\"", "", ".", ""); 
 
if(sizeof(explode(input, " ")) \> 1) \{ 
    param = explode(input, " ")[1]; 
    input = explode(input, " ")[0]; 
\}            
               
               
/* check if we're allowed to command the dog */               
\$ownerone = Str(\$this."trait:ownerone");               
\$ownertwo = Str(\$this."trait:ownertwo");          
\$friends = \$this."trait:friends"; 
 
if(!\$friends) \$friends = (\{ \});      
               
if(\$ownerone != Str(\$actor) \&\& \$ownertwo != Str(\$actor) \&\& !member(\$actor, \$friends)) \{                  
  EmitTo(\$actor, "You are not my owner, so you can't control me.");                  
  return FALSE;                  
\}                  
               
               
/* check if this is a valid order */                 
if(FindMerry(\$this, "lib", input)) \{               
    /* Result is a script. Execute it. */               
    result = Call(\$this, input, \$param: param);               
\} else if(Get(\$this, "command:" + input)) \{               
    /* Result is a simple emote. */               
    property = Get(\$this, "command:" + input);               
               
    if(typeof(property) == 5) \{               
        /* Array of emits. Choose one. */               
        sz = sizeof(property);               
        result = property[random(sz)];               
    \} else \{               
        /* Assuming it's a string. Grab it. */               
        result = Str(property);               
    \}               
\} else \{               
    /* No response was defined. */               
    result = "[OOC: No response was defined for this action. File an assist with this error and include the command you were trying to issue.]";               
    EmitTo(\$actor, result);               
    return FALSE;               
\}               
               
if(typeof(result) == 3) \{               
    /* Precautionary measures to ensure emits display correct gender. */               
    if(\$this."base:genderstring" == "male") \{               
        self = "himself";               
        possessive = "his";               
        nominative = "he";               
        objective = "him";               
    \} else if(\$this."base:genderstring" == "female") \{               
        self = "herself";               
        possessive = "her";               
        nominative = "she";               
        objective = "her";               
    \} else \{               
        self = "itself";               
        possessive = "its";               
        nominative = "it";               
        objective = "it";               
    \}               
               
    /* Display the result. */               
    EmitIn(\$actor."base:environment", replace_strings(result, "THIS", Describe(\$this), "SELF", self, "POSSESSIVE", possessive, "NOMINATIVE", nominative, "OBJECTIVE", objective, "HERE", Describe(\$actor."base:environment"), "OWNER", Describe(\$actor)));               
\}               
               
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react:name-dob">
         X[M] int i;                    
int found;                    
                   
if(\$this."trait:name") \{                 
    EmitTo(\$actor, Describe(this) + " has already been named.");                 
    return FALSE;                 
\}                 
                 
if(!\$evoke) return TRUE;                    
\$words = explode(\$evoke[1..strlen(\$evoke)-2], " ");                    
                    
/* check if we're allowed to command the child */                 
\$ownerone = Str(\$this."trait:ownerone");                 
\$ownertwo = Str(\$this."trait:ownertwo");                 
                 
if(\$ownerone != Str(\$actor) \&\& \$ownertwo != Str(\$actor)) \{                    
  EmitTo(\$actor, "You are not my owner, so you can't name me.");                    
  return FALSE;                    
\}                    
                 
\$name = proper(replace_strings(\$evoke, "\\"", ""));                 
                 
this."trait:name" = \$name;                 
                 
for(\$i = 0; \$i \< sizeof(\$words); \$i++) \{                 
    Set(this, "details:default:sname:" + \$words[\$i], TRUE);                 
\}                 
                 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:appearance:body">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:appearance:color">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:timer:amialone">
         X[M] /* Look for owners */               
               
/* Az: I'm disabling this code */               
/* I can only see it being called with the "follow" command, not sure what's going on there. And I'm told it sends the toddler home when someone is holding it. Don't have time to debug right now, but hopefully someone can later */               
return TRUE;               
               
::amialone();
      </Core:Property>
      <Core:Property property="merry:witness-pre:bite">
         X[M] ::iwantthat();             
             
return TRUE;
      </Core:Property>
      <Core:Property property="merry:witness-pre:eat">
         X[M] ::iwantthat();             
             
return TRUE;
      </Core:Property>
      <Core:Property property="merry:witness-pre:lick">
         X[M] ::iwantthat();             
             
return TRUE;
      </Core:Property>
      <Core:Property property="merry:witness-pre:nibble">
         X[M] ::iwantthat();             
             
return TRUE;
      </Core:Property>
      <Core:Property property="merry:witness-pre:taste">
         X[M] ::iwantthat();             
             
return TRUE;
      </Core:Property>
      <Core:Property property="ndp">
         " *** FINISHED REMOVAL *** "
      </Core:Property>
      <Core:Property property="new property name">
         "New Property Value"
      </Core:Property>
      <Core:Property property="nip-core:hooks">
         ([ "decide":\<MOVED:20080918-114107:Lib:NIP:base:hooks:decide\>, "delay":\<MOVED:20080918-114107:Lib:NIP:base:hooks:delay\>, "emoting":\<MOVED:20080918-114107:Lib:NIP:lib:emoting\>, "freemoting":\<MOVED:20080918-114107:Lib:NIP:lib:freemoting\>, "internal":\<MOVED:20080918-114107:Lib:NIP:base:hooks:internal\>, "movement":\<MOVED:20080918-114107:Lib:NIP:lib:movement\>, "predator":\<MOVED:20080918-114107:Lib:NIP:lib:predator\>, "resource-control":\<MOVED:20080918-114107:Lib:NIP:lib:resource-control\> ])
      </Core:Property>
      <Core:Property property="nip-core:libraries">
         (\{ \<MOVED:20080918-114107:Lib:NIP:base:lib:signals\>, \<MOVED:20080918-114107:Lib:NIP:base:lib:hooks\>, \<MOVED:20080918-114107:Lib:NIP:base:lib:stream\>, \<MOVED:20080918-114107:Lib:NIP:lib:resource-control\>, \<Lib:NIP:core\>, \<MOVED:20080918-114107:Lib:NIP:base:signals:DELAY\>, \<MOVED:20080918-114107:Lib:NIP:base:signals:DECIDE\>, \<MOVED:20080918-114107:Lib:NIP:base:signals:INTERNAL\>, \<MOVED:20080918-114107:Lib:NIP:lib:movement\>, \<MOVED:20080918-114107:Lib:NIP:lib:spawn-control\>, \<MOVED:20080918-114107:Lib:NIP:lib:emoting\>, \<MOVED:20080918-114107:Lib:NIP:lib:freemoting\>, \<MOVED:20080918-114107:Lib:NIP:lib:offers\>, \<MOVED:20080918-114107:Lib:NIP:lib:eating\>, \<MOVED:20080918-114107:Lib:NIP:lib:predator\> \})
      </Core:Property>
      <Core:Property property="nip-core:sighookpath">
         (\{ "delay:DELAY-init", "delay:DELAY-exec", "resource-control:INTERNAL", "internal:INTERNAL-exec", "decide:DECIDE-init", "emoting:DECIDE", "freemoting:DECIDE", "movement:DECIDE", "predator:DECIDE", "decide:DECIDE-exec", "decide:DECIDE-post" \})
      </Core:Property>
      <Core:Property property="nip:trait:predator:cannibal">
         0
      </Core:Property>
      <Core:Property property="nip:trait:predator:scavenger">
         1
      </Core:Property>
      <Core:Property property="nip:trait:resource-control:ttl">
         1800
      </Core:Property>
      <Core:Property property="nip:trait:resource-control:ttl_increase">
         600
      </Core:Property>
      <Core:Property property="npc:master">1</Core:Property>
      <Core:Property property="npc:resource-control:live_time">
         1572638752
      </Core:Property>
      <Core:Property property="npc:status:spawndate">
         1572629903
      </Core:Property>
      <Core:Property property="npc:status:startup">
         1572629903
      </Core:Property>
      <Core:Property property="npc:sys:sighookpath">
         (\{ "delay:DELAY-init", "delay:DELAY-exec", "resource-control:INTERNAL", "internal:INTERNAL-exec", "decide:DECIDE-init", "emoting:DECIDE", "freemoting:DECIDE", "movement:DECIDE", "predator:DECIDE", "decide:DECIDE-exec", "decide:DECIDE-post" \})
      </Core:Property>
      <Core:Property property="npc:sys:sign">1</Core:Property>
      <Core:Property property="petbody">1</Core:Property>
      <Core:Property property="revisions">
         (\{ 1593875560, "jominey", "E", 1596992490, "jominey", "E", 1603490003, "sendnoodlez", "E", 1624482388, "sendnoodlez", "E", 1647050246, "ezralee", "E", 1647050296, "ezralee", "E", 1647051263, "ezralee", "E" \})
      </Core:Property>
      <Core:Property property="sigstream">0</Core:Property>
      <Core:Property property="skill:advancedefensive">
         2
      </Core:Property>
      <Core:Property property="skill:attackingdefensive">
         0
      </Core:Property>
      <Core:Property property="skill:cutoffensive">3</Core:Property>
      <Core:Property property="skill:dodgedefensive">
         1
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="skill:feintoffensive">
         0
      </Core:Property>
      <Core:Property property="skill:fumbledefensive">
         0
      </Core:Property>
      <Core:Property property="skill:guarddefensive">
         3
      </Core:Property>
      <Core:Property property="skill:idledefensive">
         0
      </Core:Property>
      <Core:Property property="skill:recoverdefensive">
         2
      </Core:Property>
      <Core:Property property="skill:restdefensive">
         1
      </Core:Property>
      <Core:Property property="skill:retiredefensive">
         2
      </Core:Property>
      <Core:Property property="skill:salutedefensive">
         0
      </Core:Property>
      <Core:Property property="skill:thrustoffensive">
         3
      </Core:Property>
      <Core:Property property="theatre:id">"IC"</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
