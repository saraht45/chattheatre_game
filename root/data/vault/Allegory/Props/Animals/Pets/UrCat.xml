<object clone="/base/obj/thing" owner="sendnoodlez">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Allegory:Props:Animals:UrMammal)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="true" transparent-container="false" public-container="true" tight="false" capacity="1" maxweight="3" verb2="are carrying in your mouth" verb3="is carrying in its mouth"/>
    <Base:Misc gender="neuter" volition="true" weapon="false" default_stance="standing" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="true">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="cat"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="cats"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             <a_or_an>$(this.trait:appearance:body) $(this.trait:appearance:color) $(this.trait:breed) $(this.trait:animaltype)</a_or_an>
          </Base:Description>
          <Base:Description type="examine">
             <a_or_an>$(this.trait:appearance:body) $(this.trait:appearance:color) $(this.trait:breed) $(this.trait:animaltype)</a_or_an>. $(this.trait:look)
          </Base:Description>
          <Base:Description type="look">
             <a_or_an>$(this.trait:appearance:body) $(this.trait:appearance:color) $(this.trait:breed) $(this.trait:animaltype)</a_or_an>. $(this.trait:look)
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties>
      <Base:InitialProperty property="petbody">
         1
      </Base:InitialProperty>
    </Base:InitialProperties>
    <Core:Properties>
      <Core:Property property="bak:merry:react:control-dob">
         X[M] int i;                     
int found;                     
                  
\$errormsg = "That is not a valid command for the cat. Valid orders are: dress, explore, follow, meow, purr, play, sleep, stay, undress, whine, and yawn.";                     
                     
if(!\$evoke) return TRUE;                     
\$words = explode(\$evoke[1..strlen(\$evoke)-2], " ");                     
                     
/* check if we're allowed to command the cat */                  
\$ownerone = Str(\$this."trait:ownerone");                  
\$ownertwo = Str(\$this."trait:ownertwo");                  
                  
if(\$ownerone != Str(\$actor) \&\& \$ownertwo != Str(\$actor)) \{                     
  EmitTo(\$actor, "You are not my owner, so you can't control me.");                     
  return FALSE;                     
\}                     
                  
if(\$this."base:genderstring" == "male") \{                  
    \$self = "himself";                  
    \$possessive = "his";                  
    \$nominative = "he";                  
    \$objective = "him";                  
\} else \{                  
    \$self = "herself";                  
    \$possessive = "her";                  
    \$nominative = "she";                  
    \$objective = "her";                  
\}                  
                  
/* check if this is a valid order */                     
if(lower_case(\$words[0]) == "follow") \{                     
    EmitTo(\$actor, Describe(this)+" will now follow you.");                     
    this.follow = \$actor;                  
    Social(this, "slink", nil, nil, "to", \$actor );                  
    \$this."amialone:id" = In("amialone", 300);                    
\} else if(lower_case(\$words[0]) == "stay") \{                     
    EmitTo(\$actor, Describe(this)+ " will no longer follow you.");                     
    this.follow = nil;                     
\} else if(lower_case(\$words[0]) == "meow") \{                     
    EmitIn(\$actor."base:environment", Describe(\$this)+" lets out a series of small meows.");                     
\} else if(lower_case(\$words[0]) == "whine") \{                     
    EmitIn(\$actor."base:environment", Describe(\$this)+" whines pitifully.");                     
\} else if(lower_case(\$words[0]) == "play") \{                     
    EmitIn(\$actor."base:environment", Describe(\$this)+" plays happily by " + \$self + ".");                          
\} else if(lower_case(\$words[0]) == "explore") \{                     
    EmitIn(\$actor."base:environment", Describe(\$this)+" curiously explores the area.");                     
\} else if(lower_case(\$words[0]) == "purr") \{                     
    EmitIn(\$actor."base:environment", Describe(\$this)+" purrs blissfully.");                          
\} else if(lower_case(\$words[0]) == "yawn") \{                     
    EmitIn(\$actor."base:environment", Describe(\$this)+" yawns expansively, eyes scrunching as " + \$nominative + " does so.");                                  
\} else if(lower_case(\$words[0]) == "sleep") \{                     
    EmitIn(\$actor."base:environment", Describe(\$this)+" sleeps contentedly.");                                   
\} else if(lower_case(\$words[0]) == "dress") \{                  
    \$inventory = this."base:inventory";                  
    Act(this, "wear", \$articles: \$inventory);                  
\} else if(lower_case(\$words[0]) == "undress") \{                  
    ::undress();                  
\} else if(lower_case(\$words[0]) == "go" \&\& lower_case(\$words[2]) == "owner 1") \{                  
    \$home = Get(Obj(\$ownerone), "virtualhome:home");                  
    this."base:environment" = \$home;                  
    EmitIn(\$actor."base:environment", Describe(\$this) + " scurries home.");                  
\} else if(lower_case(\$words[0]) == "go" \&\& lower_case(\$words[2]) == "owner 2") \{                  
    if(Obj(\$ownertwo)) \{                  
        \$home = Get(Obj(\$ownertwo), "virtualhome:home");                  
        this."base:environment" = \$home;                  
        EmitIn(\$actor."base:environment", Describe(\$this) + " slinks home.");                  
    \} else \{                  
        EmitTo(\$actor, Describe(this) + " doesn't have a second owner.");                  
    \}                  
\} else \{                  
    EmitTo(\$actor, \$errormsg);                  
\}                  
                  
return FALSE;
      </Core:Property>
      <Core:Property property="export:command:explore">
         (\{ "THIS curiously explores the area." \})
      </Core:Property>
      <Core:Property property="export:command:meow">
         (\{ "THIS lets out a series of small meows." \})
      </Core:Property>
      <Core:Property property="export:command:play">
         (\{ "THIS plays happily by SELF." \})
      </Core:Property>
      <Core:Property property="export:command:purr">
         (\{ "THIS purrs blissfully." \})
      </Core:Property>
      <Core:Property property="export:command:sleep">
         (\{ "THIS sleeps contentedly." \})
      </Core:Property>
      <Core:Property property="export:command:whine">
         (\{ "THIS whines pitifully." \})
      </Core:Property>
      <Core:Property property="export:command:yawn">
         (\{ "THIS yawns expansively, eyes scrunching as NOMINATIVE does so." \})
      </Core:Property>
      <Core:Property property="export:nip-core:consent:allow-all">
         1
      </Core:Property>
      <Core:Property property="export:nip-core:hooks">
         ([ "decide":\<MOVED:20080918-114107:Lib:NIP:base:hooks:decide\>, "delay":\<MOVED:20080918-114107:Lib:NIP:base:hooks:delay\>, "eating":\<MOVED:20080918-114107:Lib:NIP:lib:eating\>, "emoting":\<MOVED:20080918-114107:Lib:NIP:lib:emoting\>, "freemoting":\<MOVED:20080918-114107:Lib:NIP:lib:freemoting\>, "internal":\<MOVED:20080918-114107:Lib:NIP:base:hooks:internal\>, "movement":\<MOVED:20080918-114107:Lib:NIP:lib:movement\>, "predator":\<MOVED:20080918-114107:Lib:NIP:lib:predator\>, "resource-control":\<MOVED:20080918-114107:Lib:NIP:lib:resource-control\> ])
      </Core:Property>
      <Core:Property property="export:nip-core:inherits">
         ([ \<MOVED:20080918-114107:Lib:NIP:lib:resource-control\>:(\{ "witness:login%nip:resource-control", "witness:enter-from%nip:resource-control", "witness:teleport%resource-control", "lib:entering" \}), \<MOVED:20080918-114107:Lib:NIP:lib:movement\>:(\{ "lib:core_movement_exit" \}), \<MOVED:20080918-114107:Lib:NIP:base:lib:hooks\>:(\{ "lib:core:find-hook", "lib:core:register-hook", "lib:core:unregister-hook", "lib:modify:hooks", "setprop-post:hook" \}), \<MOVED:20080918-114107:Lib:NIP:base:lib:signals\>:(\{ "lib:modify:signals", "setprop-post:signal", "lib:calc_sighookpath" \}), \<MOVED:20080918-114107:Lib:NIP:base:lib:stream\>:(\{ "setprop-post:sigexecptr", "setprop-post:sigstream" \}), \<MOVED:20080918-114107:Lib:NIP:base:signals:DECIDE\>:(\{ "setprop-post:decide" \}), \<MOVED:20080918-114107:Lib:NIP:lib:eating\>:(\{ "act:eat%nip:core", "lib:handler:offer:eating" \}), \<MOVED:20080918-114107:Lib:NIP:lib:emoting\>:(\{ "lib:handler:emoting:parse", "lib:behave" \}), \<MOVED:20080918-114107:Lib:NIP:lib:freemoting\>:(\{ "lib:handler_freemote" \}), \<MOVED:20080918-114107:Lib:NIP:lib:offers\>:(\{ "react-post:offer-who", "lib:core:add_offer", "lib:core:sub_offer" \}), \<MOVED:20080918-114107:Lib:NIP:lib:spawn-control\>:(\{ "act:stop" \}), \<MOVED:20080918-114107:Lib:NIP:lib:predator\>:(\{ "lib:act:predator:attack", "lib:handler:offer:eating", "act:eat%predator" \}) ])
      </Core:Property>
      <Core:Property property="export:nip-core:libraries">
         (\{ \<MOVED:20080918-114107:Lib:NIP:base:lib:signals\>, \<MOVED:20080918-114107:Lib:NIP:base:lib:hooks\>, \<MOVED:20080918-114107:Lib:NIP:base:lib:stream\>, \<MOVED:20080918-114107:Lib:NIP:lib:resource-control\>, \<Lib:NIP:core\>, \<MOVED:20080918-114107:Lib:NIP:base:signals:DELAY\>, \<MOVED:20080918-114107:Lib:NIP:base:signals:DECIDE\>, \<MOVED:20080918-114107:Lib:NIP:base:signals:INTERNAL\>, \<MOVED:20080918-114107:Lib:NIP:lib:movement\>, \<MOVED:20080918-114107:Lib:NIP:lib:spawn-control\>, \<MOVED:20080918-114107:Lib:NIP:lib:emoting\>, \<MOVED:20080918-114107:Lib:NIP:lib:freemoting\>, \<MOVED:20080918-114107:Lib:NIP:lib:offers\>, \<MOVED:20080918-114107:Lib:NIP:lib:eating\>, \<MOVED:20080918-114107:Lib:NIP:lib:predator\> \})
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:behavior:">
         ([ 4:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:offer:scripts">
         ([ 5:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:stats:agility">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:stats:offense">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:eating:accepts">
         ([ 6:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:eating:burn">
         ([ 1:1, 2:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:eating:grammes">
         ([ 1:1, 2:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:hints:">
         ([ 4:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:movement:frequency">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:predator:cannibal">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:predator:prey">
         ([ 5:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:predator:scavenger">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:resource-control:ttl">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:resource-control:ttl_increase">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:sighookpath">
         (\{ "delay:DELAY-init", "delay:DELAY-exec", "resource-control:INTERNAL", "internal:INTERNAL-exec", "decide:DECIDE-init", "movement:DECIDE", "decide:DECIDE-exec", "decide:DECIDE-post" \})
      </Core:Property>
      <Core:Property property="export:nip-core:signals">
         ([ 10:"DELAY", 500:"INTERNAL", 1000:"DECIDE" ])
      </Core:Property>
      <Core:Property property="export:nip-core:system:revision">
         44
      </Core:Property>
      <Core:Property property="export:nip:behavior:predator">
         \<Allegory:NPCs:NIPs:StrayAnimals:BehaviorPredator\>
      </Core:Property>
      <Core:Property property="export:nip:offer:scripts">
         (\{ "handler:offer:eating" \})
      </Core:Property>
      <Core:Property property="export:nip:stats">
         "offence 5"
      </Core:Property>
      <Core:Property property="export:nip:stats:agility">
         10
      </Core:Property>
      <Core:Property property="export:nip:stats:offense">
         10
      </Core:Property>
      <Core:Property property="export:nip:trait:eating:accepts">
         ([ "base:edible":1, "nip:food":1 ])
      </Core:Property>
      <Core:Property property="export:nip:trait:eating:burn">
         300
      </Core:Property>
      <Core:Property property="export:nip:trait:eating:grammes">
         2000
      </Core:Property>
      <Core:Property property="export:nip:trait:movement:frequency">
         0
      </Core:Property>
      <Core:Property property="export:nip:trait:predator:cannibal">
         0
      </Core:Property>
      <Core:Property property="export:nip:trait:predator:scavenger">
         0
      </Core:Property>
      <Core:Property property="export:nip:trait:resource-control:ttl">
         1800
      </Core:Property>
      <Core:Property property="export:nip:trait:resource-control:ttl_increase">
         600
      </Core:Property>
      <Core:Property property="export:npc:resource-control:live_time">
         1572633523
      </Core:Property>
      <Core:Property property="export:theatre:id">
         "IC"
      </Core:Property>
      <Core:Property property="export:trait:animaltype">
         "cat"
      </Core:Property>
      <Core:Property property="export:trait:commands:default">
         (\{ "access", "allow", "deny", "dress", "explore", "follow", "meow", "purr", "play", "sleep", "stay", "undress", "whine", "yawn" \})
      </Core:Property>
      <Core:Property property="export:trait:look">
         "Standing approximately ten inches high at the shoulders when fully grown, this small mammal is adept at hunting small prey such as birds and rodents. Its round face bears large eyes with slit pupils, a triangular nose, and sharp canine teeth. The cat's body is flexible and agile, with a long tail."
      </Core:Property>
      <Core:Property property="export:trait:objecttype">
         "cat"
      </Core:Property>
      <Core:Property property="export:trait:smell">
         "cat"
      </Core:Property>
      <Core:Property property="export:trait:spawnedtraits">
         ([ "appearance:body":(\{ "small", "plump", "large", "fat", "skinny" \}), "appearance:claws":(\{ "hooked", "sharp", "curved" \}), "appearance:color":(\{ "white", "black", "ginger", "grey", "cream", "brown tabby", "grey tabby", "ginger tabby", "cinnamon", "fawn", "calico", "tortoiseshell" \}), "appearance:ears":(\{ "tapered" \}), "appearance:fur":(\{ "short", "smooth", "silky", "fuzzy", "long" \}), "appearance:nose":(\{ "pink" \}), "appearance:tail":(\{ "long" \}) ])
      </Core:Property>
      <Core:Property property="export:volition">1</Core:Property>
      <Core:Property property="loading">1</Core:Property>
      <Core:Property property="merry:inherit:act:eat%nip:core">
         \<MOVED:20080918-114107:Lib:NIP:lib:eating\>
      </Core:Property>
      <Core:Property property="merry:inherit:act:eat%predator">
         \<MOVED:20080918-114107:Lib:NIP:lib:predator\>
      </Core:Property>
      <Core:Property property="merry:inherit:act:start">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:act:stop">
         \<MOVED:20080918-114107:Lib:NIP:lib:spawn-control\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:act:predator:attack">
         \<MOVED:20080918-114107:Lib:NIP:lib:predator\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:behave">
         \<MOVED:20080918-114107:Lib:NIP:lib:emoting\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:calc_sighookpath">
         \<MOVED:20080918-114107:Lib:NIP:base:lib:signals\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:add_offer">
         \<MOVED:20080918-114107:Lib:NIP:lib:offers\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:find-hook">
         \<MOVED:20080918-114107:Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:merry_add">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:merry_delete">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:register-hook">
         \<MOVED:20080918-114107:Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:sub_offer">
         \<MOVED:20080918-114107:Lib:NIP:lib:offers\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:sysupdate">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:unregister-hook">
         \<MOVED:20080918-114107:Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:decide:decide-exec">
         \<MOVED:20080918-114107:Lib:NIP:base:hooks:decide\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:decide:decide-init">
         \<MOVED:20080918-114107:Lib:NIP:base:hooks:decide\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:decide:decide-post">
         \<MOVED:20080918-114107:Lib:NIP:base:hooks:decide\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:delay:delay-exec">
         \<MOVED:20080918-114107:Lib:NIP:base:hooks:delay\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:delay:delay-init">
         \<MOVED:20080918-114107:Lib:NIP:base:hooks:delay\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:eating:decide">
         \<MOVED:20080918-114107:Lib:NIP:lib:eating\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:eating:internal">
         \<MOVED:20080918-114107:Lib:NIP:lib:eating\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:entering">
         \<MOVED:20080918-114107:Lib:NIP:lib:resource-control\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:find_nip_object">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:handler:offer:eating">
         \<MOVED:20080918-114107:Lib:NIP:lib:predator\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:handler_freemote">
         \<MOVED:20080918-114107:Lib:NIP:lib:freemoting\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:heartbeat">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:internal:internal-exec">
         \<MOVED:20080918-114107:Lib:NIP:base:hooks:internal\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:log">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:modify:hooks">
         \<MOVED:20080918-114107:Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:modify:libraries">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:modify:signals">
         \<MOVED:20080918-114107:Lib:NIP:base:lib:signals\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:movement:decide">
         \<MOVED:20080918-114107:Lib:NIP:lib:movement\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:ncs:handler">
         \<MOVED:20080918-114107:Lib:NIP:NCS\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:predator:decide">
         \<MOVED:20080918-114107:Lib:NIP:lib:predator\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:shutdown">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:react-post:offer-who">
         \<MOVED:20080918-114107:Lib:NIP:lib:offers\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:add">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:decide">
         \<MOVED:20080918-114107:Lib:NIP:base:signals:DECIDE\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:del">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:delete">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:error">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:hook">
         \<MOVED:20080918-114107:Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:nip">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:nip-core">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:sigexecptr">
         \<MOVED:20080918-114107:Lib:NIP:base:lib:stream\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:signal">
         \<MOVED:20080918-114107:Lib:NIP:base:lib:signals\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:sigstream">
         \<MOVED:20080918-114107:Lib:NIP:base:lib:stream\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:sub">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:witness-post:login%nip:resource-control">
         \<MOVED:20080918-114107:Lib:NIP:lib:resource-control\>
      </Core:Property>
      <Core:Property property="merry:inherit:witness:enter-from%nip:resource-control">
         \<MOVED:20080918-114107:Lib:NIP:lib:resource-control\>
      </Core:Property>
      <Core:Property property="merry:inherit:witness:teleport%resource-control">
         \<MOVED:20080918-114107:Lib:NIP:lib:resource-control\>
      </Core:Property>
      <Core:Property property="merry:lib:access">
         X[M] if(\$ownerone != Str(\$actor) \&\& \$ownertwo != Str(\$actor)) \{                  
  EmitTo(\$actor, "You are not my owner, so you can't control me.");                  
  return FALSE;                  
\}  
 
\$rstr = "The following people have access to " + Describe(\$this) + ":\\n"; 
if(\$this."trait:ownerone") \{ 
    \$rstr += "Owner 1 - " + Describe(\$this."trait:ownerone") + "\\n"; 
\} 
if(\$this."trait:ownerone") \{ 
    \$rstr += "Owner 2 - " + Describe(\$this."trait:ownertwo") + "\\n"; 
\} 
 
if(\$this."trait:friends") \{ 
    \$friends = \$this."trait:friends"; 
\} else \{ 
    \$friends = (\{ \}); 
\} 
 
\$friends -= (\{ nil \}); 
 
for(\$i = 0; \$i \< sizeof(\$friends); \$i++) \{ 
    \$rstr += "Friend - " + Describe(\$friends[\$i]) + "\\n"; 
\} 
 
EmitTo(\$actor, \$rstr); 
 
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:allow">
         X[M] if(\$ownerone != Str(\$actor) \&\& \$ownertwo != Str(\$actor)) \{                  
  EmitTo(\$actor, "You are not my owner, so you can't control me.");                  
  return FALSE;                  
\}  
 
if(!\$param) \{ 
    EmitTo(\$actor, "[OOC: Give control of your pet to another character.]"); 
    EmitTo(\$actor, "Syntax: control cat 'allow bob'"); 
    return FALSE; 
\} 
 
if(!(\$friend = common::lookup(\$name: \$param))) \{ 
    EmitTo(\$actor, TAG("Cannot find character named " + Str(\$param), "imp")); 
    EmitTo(\$actor, "Syntax: control cat 'allow bob'"); 
    return FALSE; 
\} 
 
if(\$this."trait:friends") \{ 
    \$friends = \$this."trait:friends"; 
\} else \{ 
    \$friends= (\{ \}); 
\} 
 
\$friends \|= (\{ \$friend \}); 
 
\$this."trait:friends" = \$friends; 
 
EmitTo(\$actor, "Access to " + Describe(\$this) + " has been given to " + Describe(\$friend) + "."); 
 
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:amialone">
         X[M] if(\$this."amialone:id") \{                    
    Stop(\$this."amialone:id");                    
    \$this."amialone:id" = nil;                    
\}                    
                    
\$ownerone = Str(\$this."trait:ownerone");                    
\$ownertwo = Str(\$this."trait:ownertwo");                    
                    
\$homeone = Obj(\$ownerone)."virtualhome:home";                    
                    
if(Obj(\$ownertwo)) \{                    
    \$hometwo = Obj(\$ownertwo)."virtualhome:home";                    
\}                    
                    
\$env = \$this."base:environment";                    
\$surroundings = \$env."base:inventory";                    
                    
if(\$env == \$ownerone \|\| \$env == \$ownertwo \|\| \$env == \$homeone \|\| \$env == \$hometwo \|\| \$found == 1 \|\| member(Obj(\$ownerone), \$surroundings) \|\| (Obj(\$ownertwo) \&\& member(Obj(\$ownertwo), \$surroundings))) \{                    
    \$this."amialone:id" = In("amialone", 300);                    
\} else \{                    
    EmitIn(this."base:environment", Describe(this) + " goes home.");                    
                    
    if(this.follow) \{                    
        \$home = Get(this.follow, "virtualhome:home");                    
    \} else \{                    
        \$home = \$homeone;                    
    \}                    
                    
    \$this."base:environment" = \$home;                    
\}                    
                    
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:deny">
         X[M] if(\$ownerone != Str(\$actor) \&\& \$ownertwo != Str(\$actor)) \{                  
  EmitTo(\$actor, "You are not my owner, so you can't control me.");                  
  return FALSE;                  
\}  
 
if(!\$param) \{ 
    EmitTo(\$actor, "[OOC: Revoke control of your pet from another character.]"); 
    EmitTo(\$actor, "Syntax: control cat 'deny bob'"); 
    return FALSE; 
\} 
 
if(!(\$friend = common::lookup(\$name: \$param))) \{ 
    EmitTo(\$actor, TAG("Cannot find character named " + Str(\$param), "imp")); 
    EmitTo(\$actor, "Syntax: control cat 'deny bob'"); 
    return FALSE; 
\} 
 
if(\$this."trait:friends") \{ 
    \$friends = \$this."trait:friends"; 
\} else \{ 
    \$friends= (\{ \}); 
\} 
 
if(!member(\$friend, \$friends)) \{ 
    EmitTo(\$actor, Describe(\$friend) + " does not have access to " + Describe(\$this) + "."); 
    return FALSE; 
\} 
 
\$friends -= (\{ \$friend \}); 
 
\$this."trait:friends" = \$friends; 
 
EmitTo(\$actor, "Access to " + Describe(\$this) + " has been revoked from " + Describe(\$friend) + "."); 
 
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:dress">
         X[M] \$inventory = this."base:inventory";         
Act(this, "wear", \$articles: \$inventory);
      </Core:Property>
      <Core:Property property="merry:lib:follow">
         X[M] EmitTo(\$actor, Describe(this)+" will now follow you.");                      
this.follow = \$actor;                   
Social(this, "slink", nil, nil, "to", \$actor );                   
\$this."amialone:id" = In("amialone", 300);
      </Core:Property>
      <Core:Property property="merry:lib:godad">
         X[M] if(Obj(\$ownertwo)) \{                   
    \$home = Get(Obj(\$ownertwo), "virtualhome:home");                   
    this."base:environment" = \$home;                   
    EmitIn(\$actor."base:environment", Describe(\$this) + " slinks home.");                   
\} else \{                   
    EmitTo(\$actor, Describe(this) + " doesn't have a second owner.");                   
\}
      </Core:Property>
      <Core:Property property="merry:lib:gomom">
         X[M] \$home = Get(Obj(\$ownerone), "virtualhome:home");                   
\$this."base:environment" = \$home;                   
EmitIn(\$actor."base:environment", Describe(\$this) + " slinks home.");
      </Core:Property>
      <Core:Property property="merry:lib:stay">
         X[M] EmitTo(\$actor, Describe(this)+" will no longer follow you.");                      
this.follow = nil;
      </Core:Property>
      <Core:Property property="merry:lib:undress">
         X[M] /* undressing ourselves */                  
\$delay(0.01, TRUE, "c799");                  
                  
\$mapping = \$this."base:clothes-worn";                  
\$clothes = (\{ \});                  
\$indices = map_indices(\$mapping);                  
for(\$i=0;\$i\<sizeof(\$indices);\$i++) \{                  
  for(\$j=0;\$j\<sizeof(\$mapping[\$indices[\$i]]);\$j++) \{                  
    \$item = \$mapping[\$indices[\$i]][\$j];                  
    if(member(\$item, \$clothes)) \{                  
      /* already in the list */                  
      /* add anything covering this item */                  
      if(sizeof(\$mapping[\$indices[\$i]]) \> \$j+1) \{                  
        /* there are items covering this */                  
        \$item."clothing:covered-by" \|= \$mapping[\$indices[\$i]][\$j+1..];                  
      \}                  
    \} else \{                  
      /* not in the list */                  
      /* add anything covering this item */                  
      \$clothes += (\{ \$item \});                  
      if(sizeof(\$mapping[\$indices[\$i]]) \> \$j+1) \{                  
        /* there are items covering this */                  
        \$item."clothing:covered-by" = \$mapping[\$indices[\$i]][\$j+1..];                  
      \} else \{                  
        \$item."clothing:covered-by" = (\{ \});                  
      \}                  
    \}                  
  \}                  
\}                  
                  
/* now make a list of what is on top to bottom */                  
\$ordered_list = (\{ \});                  
while(sizeof(\$clothes)) \{                  
  \$tmp_list = (\{ \});                  
  for(\$i=0;\$i\<sizeof(\$clothes);\$i++) \{                  
    if(sizeof(\$clothes[\$i]."clothing:covered-by")) \{                  
      /* this item is covered by something. Is that something already removed? */                  
      if(!sizeof(\$clothes \& \$clothes[\$i]."clothing:covered-by")) \{                  
        /* no longer covered. Add to the list */                  
        \$tmp_list \|= (\{ \$clothes[\$i] \});                  
      \}                  
    \} else \{                  
      /* not covered by anything. Move this to the list */                  
      \$tmp_list \|= (\{ \$clothes[\$i] \});                  
    \}                  
  \}                  
  \$ordered_list += (\{ \$tmp_list \});                  
  \$clothes -= \$tmp_list;                  
\}                  
                  
/* save this list in the player's body */                  
if(sizeof(\$ordered_list))                  
  \$this."clothing:last-wearing" = \$ordered_list;                  
                  
/* remove the clothes */                  
for(\$i=0;\$i\<sizeof(\$ordered_list);\$i++) \{                  
  Act(\$this, "unwear", \$articles: \$ordered_list[\$i]);                  
\}                  
                  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:take">
         X[M] /* Record what room the actor is in */                         
\$room = \$actor."Base:environment";     

\$friends = \$this."trait:friends";   
if(!\$friends) \$friends = (\{ \});                     
                         
/* Check if the actor is allowed to pick up the cat */                         
  /* check if \$actor is the cat's owner */                         
if(\$actor == \$this."trait:ownerone" \|\| \$actor == \$this."trait:ownertwo" \|\| member(\$actor, \$friends)) \{                         
  /* if the actor is allowed to pick up the cat */                         
  /* tell the actor that they picked up the cat */                         
  /* tell the room that the actor picked up the cat */                         
  EmitTo(\$actor, "You pick up "+Describe(\$this)+".");                         
  EmitIn(\$room, Describe(\$actor)+" picks up "+ Describe(\$this)+".", \$actor);                         
  \$this."base:environment" = \$actor;                         
                         
\} else \{                         
  /* the actor is not the cat's owner */                         
                         
  /* if the cat is already being held by someone */                         
  if(\$this."base:environment"."base:volition") \{                         
    /* use the normal give/take/offer code */                         
    return TRUE;                         
  \} else \{                         
    /* tell the actor that they can't take the cat */                         
    /* tell the room that the actor is a catnapper! */                         
    EmitTo(\$actor, "That cat is not yours!");                         
    EmitIn(\$room, Describe(\$actor)+" attempts to take "+ Describe(\$this)+".", \$actor);                         
  \}                         
\}                         
                         
/* return false, so that the actor doesn't see a message about not being allowed to pick up the cat */                         
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react:control-dob">
         X[M] int i, sz;                    
int found;                 
string* commands, *commandsDefault, *commandsExtra;                 
string errormsg, self, possessive, nominative, objective, input, param;                 
mixed property, result;                 
                 
/* Gather commands located in UR baby */                 
commandsDefault = (\{ \});                 
if(\$this."trait:commands:default") \{                 
    commandsDefault = \$this."trait:commands:default";                 
\}                 
                 
/* Gather baby specific commands */                 
commandsExtra = (\{ \});                 
if(\$this."trait:commands:extra") \{                 
    commandsExtra = \$this."trait:commands:extra";                 
\}                 
                 
/* Put them all together */                 
commands = commandsDefault \| commandsExtra;                 
                 
if(!sizeof(commands)) \{                 
    commands = (\{ "none" \});                 
\}                 
                 
errormsg = "That is not a valid command for the cat. Valid orders are: \\"" + implode(commands, "\\" \\"") +"\\"";                 
                 
if(!\$evoke) \{                 
    EmitTo(\$actor, errormsg);                 
    return FALSE;                 
\}                 
                    
input = replace_strings(\$evoke, "\\"", "", ".", ""); 
 
if(sizeof(explode(input, " ")) \> 1) \{ 
    param = explode(input, " ")[1]; 
    input = explode(input, " ")[0]; 
\}            
               
               
/* check if we're allowed to command the cat */               
\$ownerone = Str(\$this."trait:ownerone");               
\$ownertwo = Str(\$this."trait:ownertwo");          
\$friends = \$this."trait:friends"; 
 
if(!\$friends) \$friends = (\{ \});      
               
if(\$ownerone != Str(\$actor) \&\& \$ownertwo != Str(\$actor) \&\& !member(\$actor, \$friends)) \{                  
  EmitTo(\$actor, "You are not my owner, so you can't control me.");                  
  return FALSE;                  
\}                     
                 
/* check if this is a valid order */                   
if(FindMerry(\$this, "lib", input)) \{                 
    /* Result is a script. Execute it. */                 
    result = Call(\$this, input, \$param: param);                 
\} else if(Get(\$this, "command:" + input)) \{                 
    /* Result is a simple emote. */                 
    property = Get(\$this, "command:" + input);                 
                 
    if(typeof(property) == 5) \{                 
        /* Array of emits. Choose one. */                 
        sz = sizeof(property);                 
        result = property[random(sz)];                 
    \} else \{                 
        /* Assuming it's a string. Grab it. */                 
        result = Str(property);                 
    \}                 
\} else \{                 
    /* No response was defined. */                 
    result = "[OOC: No response was defined for this action. File an assist with this error and include the command you were trying to issue.]";                 
    EmitTo(\$actor, result);                 
    return FALSE;                 
\}                 
                 
if(typeof(result) == 3) \{                 
    /* Precautionary measures to ensure emits display correct gender. */                 
    if(\$this."base:genderstring" == "male") \{                 
        self = "himself";                 
        possessive = "his";                 
        nominative = "he";                 
        objective = "him";                 
    \} else if(\$this."base:genderstring" == "female") \{                 
        self = "herself";                 
        possessive = "her";                 
        nominative = "she";                 
        objective = "her";                 
    \} else \{                 
        self = "itself";                 
        possessive = "its";                 
        nominative = "it";                 
        objective = "it";                 
    \}                 
                 
    /* Display the result. */                 
    EmitIn(\$actor."base:environment", replace_strings(result, "THIS", Describe(\$this), "SELF", self, "POSSESSIVE", possessive, "NOMINATIVE", nominative, "OBJECTIVE", objective, "HERE", Describe(\$actor."base:environment"), "OWNER", Describe(\$actor)));                 
\}                 
                 
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react:name-dob">
         X[M] int i;                      
int found;                      
                     
if(\$this."trait:name") \{                   
    EmitTo(\$actor, Describe(this) + " has already been named.");                   
    return FALSE;                   
\}                   
                   
if(!\$evoke) return TRUE;                      
\$words = explode(\$evoke[1..strlen(\$evoke)-2], " ");                      
                      
/* check if we're allowed to command the child */                   
\$ownerone = Str(\$this."trait:ownerone");                   
\$ownertwo = Str(\$this."trait:ownertwo");                   
                   
if(\$ownerone != Str(\$actor) \&\& \$ownertwo != Str(\$actor)) \{                      
  EmitTo(\$actor, "You are not my owner, so you can't name me.");                      
  return FALSE;                      
\}                      
                   
\$name = proper(replace_strings(\$evoke, "\\"", ""));                   
                   
this."trait:name" = \$name;                   
                   
for(\$i = 0; \$i \< sizeof(\$words); \$i++) \{                   
    Set(this, "details:default:sname:" + \$words[\$i], TRUE);                   
\}                   
                   
return TRUE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:appearance:body">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:appearance:color">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:timer:amialone">
         X[M] /* Look for owners */                 
                 
/* Az: I'm disabling this code */                 
/* I can only see it being called with the "follow" command, not sure what's going on there. And I'm told it sends the toddler home when someone is holding it. Don't have time to debug right now, but hopefully someone can later */                 
return TRUE;                 
                 
::amialone();
      </Core:Property>
      <Core:Property property="nip-core:sighookpath">
         (\{ "delay:DELAY-init", "delay:DELAY-exec", "resource-control:INTERNAL", "internal:INTERNAL-exec", "decide:DECIDE-init", "movement:DECIDE", "decide:DECIDE-exec", "decide:DECIDE-post" \})
      </Core:Property>
      <Core:Property property="nip:trait:predator:cannibal">
         0
      </Core:Property>
      <Core:Property property="nip:trait:predator:scavenger">
         0
      </Core:Property>
      <Core:Property property="nip:trait:resource-control:ttl">
         1800
      </Core:Property>
      <Core:Property property="nip:trait:resource-control:ttl_increase">
         600
      </Core:Property>
      <Core:Property property="npc:master">1</Core:Property>
      <Core:Property property="npc:resource-control:live_time">
         1131491313
      </Core:Property>
      <Core:Property property="npc:status:spawndate">
         1572629903
      </Core:Property>
      <Core:Property property="npc:status:startup">
         1572629903
      </Core:Property>
      <Core:Property property="npc:sys:sighookpath">
         (\{ "delay:DELAY-init", "delay:DELAY-exec", "resource-control:INTERNAL", "internal:INTERNAL-exec", "decide:DECIDE-init", "movement:DECIDE", "decide:DECIDE-exec", "decide:DECIDE-post" \})
      </Core:Property>
      <Core:Property property="npc:sys:sign">1</Core:Property>
      <Core:Property property="petbody">1</Core:Property>
      <Core:Property property="revisions">
         (\{ 1567217787, "jominey", "E", 1567217834, "jominey", "E", 1567217902, "jominey", "K", 1567217999, "jominey", "E", 1567218027, "jominey", "E", 1567218470, "jominey", "E", 1567219521, "jominey", "K", 1567219693, "jominey", "K", 1567219825, "jominey", "E", 1567221980, "jominey", "K", 1567221987, "jominey", "E", 1567221989, "jominey", "E", 1567221991, "jominey", "E", 1567222721, "jominey", "E", 1567222744, "jominey", "E", 1567222755, "jominey", "E", 1567222807, "jominey", "E", 1570158217, "ezralee", "K", 1570231461, "sendnoodlez", "X", 1570231505, "sendnoodlez", "X", 1570231575, "sendnoodlez", "E", 1570231620, "sendnoodlez", "E", 1570231917, "sendnoodlez", "E", 1570232039, "sendnoodlez", "X", 1570232120, "sendnoodlez", "E", 1570232367, "sendnoodlez", "E", 1570232430, "sendnoodlez", "E", 1570232557, "sendnoodlez", "X", 1570232612, "sendnoodlez", "E", 1570232624, "sendnoodlez", "E", 1570232896, "sendnoodlez", "X", 1570334331, "ezralee", "E", 1570419019, "jominey", "E", 1570419252, "jominey", "E", 1570419355, "jominey", "E", 1571949155, "sendnoodlez", "E", 1571950596, "sendnoodlez", "X", 1571950875, "sendnoodlez", "E", 1571950997, "sendnoodlez", "E", 1571951073, "sendnoodlez", "E", 1571951209, "sendnoodlez", "E", 1572215688, "sendnoodlez", "E", 1572219188, "sendnoodlez", "E", 1572219411, "sendnoodlez", "E", 1572630030, "sendnoodlez", "X", 1572630038, "sendnoodlez", "K", 1572630154, "sendnoodlez", "E", 1572630432, "sendnoodlez", "E", 1572630466, "sendnoodlez", "E", 1572630506, "sendnoodlez", "K", 1572630578, "sendnoodlez", "X", 1572630603, "sendnoodlez", "E", 1572630916, "sendnoodlez", "E", 1572631021, "sendnoodlez", "E", 1572631337, "sendnoodlez", "E", 1572631357, "sendnoodlez", "E", 1572631361, "sendnoodlez", "E", 1572631371, "sendnoodlez", "E", 1572631376, "sendnoodlez", "E", 1572631395, "sendnoodlez", "E", 1572631499, "sendnoodlez", "X", 1572631878, "sendnoodlez", "E", 1572631904, "sendnoodlez", "E", 1572631975, "sendnoodlez", "E", 1572631996, "sendnoodlez", "E", 1572632046, "sendnoodlez", "E", 1572632108, "sendnoodlez", "E", 1572632193, "sendnoodlez", "X", 1572632238, "sendnoodlez", "X", 1572632336, "sendnoodlez", "E", 1572632374, "sendnoodlez", "E", 1572632464, "sendnoodlez", "X", 1572632552, "sendnoodlez", "X", 1572632613, "sendnoodlez", "E", 1572632624, "sendnoodlez", "E", 1572632754, "sendnoodlez", "X", 1572633069, "sendnoodlez", "X", 1572633239, "sendnoodlez", "X", 1572633523, "sendnoodlez", "X", 1572633546, "sendnoodlez", "X", 1572633565, "sendnoodlez", "E", 1572634440, "sendnoodlez", "X", 1572636088, "sendnoodlez", "E", 1572638537, "sendnoodlez", "E", 1572638968, "sendnoodlez", "X", 1572645961, "sendnoodlez", "E", 1583967423, "jominey", "E", 1583967470, "jominey", "E", 1583967491, "jominey", "E", 1583967507, "jominey", "X", 1583967554, "jominey", "E", 1583967623, "jominey", "E", 1588173276, "jominey", "E", 1588174136, "jominey", "E", 1589386132, "jominey", "E", 1593651381, "jominey", "K", 1635985242, "ezralee", "E" \})
      </Core:Property>
      <Core:Property property="sigstream">0</Core:Property>
      <Core:Property property="skill:advancedefensive">
         2
      </Core:Property>
      <Core:Property property="skill:attackingdefensive">
         0
      </Core:Property>
      <Core:Property property="skill:cutoffensive">3</Core:Property>
      <Core:Property property="skill:dodgedefensive">
         1
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="skill:feintoffensive">
         0
      </Core:Property>
      <Core:Property property="skill:fumbledefensive">
         0
      </Core:Property>
      <Core:Property property="skill:guarddefensive">
         3
      </Core:Property>
      <Core:Property property="skill:idledefensive">
         0
      </Core:Property>
      <Core:Property property="skill:recoverdefensive">
         2
      </Core:Property>
      <Core:Property property="skill:restdefensive">
         1
      </Core:Property>
      <Core:Property property="skill:retiredefensive">
         2
      </Core:Property>
      <Core:Property property="skill:salutedefensive">
         0
      </Core:Property>
      <Core:Property property="skill:thrustoffensive">
         3
      </Core:Property>
      <Core:Property property="theatre:id">"IC"</Core:Property>
      <Core:Property property="volition">1</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
