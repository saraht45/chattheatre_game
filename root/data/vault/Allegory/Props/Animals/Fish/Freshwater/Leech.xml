<object clone="/base/obj/thing" owner="slurpeeslurp">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="0.01" density="0.01"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="true"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="true" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="leech"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="leeches"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="barred"/>
          <Base:Adjective adjective="black"/>
          <Base:Adjective adjective="blood-sucking"/>
          <Base:Adjective adjective="brown"/>
          <Base:Adjective adjective="hungry"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             {? | $(this.trait:full) | well-fed, bloated | hungry, blood-sucking} leech
          </Base:Description>
          <Base:Description type="examine">
             A {? | $(this.trait:full) | well-fed, bloated | hungry, blood-sucking} leech, measuring 8 inches in length. It is cross barred in hues of brown and black, and bears suckers at each end of its underside. The sucker at one end contains the animals mouth, while the sucker at the other acts as a suction cup when the leech attaches itself to the victims body.
          </Base:Description>
          <Base:Description type="look">
             A {? | $(this.trait:full) | well-fed, bloated | hungry, blood-sucking} leech, measuring 8 inches in length. It is cross barred and sports hues of brown and black.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="suckers" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="true">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="true" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="suckers"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="suckers"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             the leech's suckers
          </Base:Description>
          <Base:Description type="examine">
             The suckers on each end of the leech's underside. One end contains the mouth of the animal, while the other acts as a suction cup to draw blood from the victims body.
          </Base:Description>
          <Base:Description type="look">
             The suckers on each end of the leech's underside.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:Covered value="wound"/>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="merry:react-post:apply-dob">
         X[M] if(!\$iob) return TRUE;
EmitTo(\$actor, "You safely secure your leech to "+Describe(\$iob)+".");
EmitIn(\$actor."base:environment", Describe(\$this)+" voraciously attaches itself to "+Describe(\$iob)+".", \$actor);

/* move the leech onto the victim */
this."base:environment" = NRefOb(\$iob[0]);
/* end the script if the leech didn't move (because the victim was holding too much) */
if(this."base:environment" != NRefOb(\$iob[0])) return TRUE;
/* make the leech into clothing */
this."base:parts-covered" = (\{ name(this) \});
/* make the victim wear the leech */
this."base:clothing:worn" = TRUE;
this."base:worn-by" = NRefOb(\$iob[0]);
if(!NRefOb(\$iob[0])."base:clothes-worn"[name(this)]) \{
  NRefOb(\$iob[0])."base:clothes-worn"[name(this)] = (\{ this \});
\} else \{
  NRefOb(\$iob[0])."base:clothes-worn"[name(this)] \|= (\{ this \});
\}

\$delay(30, TRUE, "6cfc");
if(\$this."base:clothing:worn")\{
\$this."trait:full" = 1;
EmitTo(\$actor, Describe(\$this)+ " suddenly detaches itself from "+Describe(\$iob)+". It appears to have grown quite fat with all the blood it's sucked up.");
EmitIn(\$actor."base:environment", Describe(\$this)+" suddenly falls off of "+Describe(\$iob)+".");
\$this."base:worn-by" = nil;

return TRUE;
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:hold-dob">
         X[M] /* describe the leech being held */
EmitTo(\$actor, "The leech wriggles incessantly between your fingers as its suckers attempt to find a good place to latch onto."); 
EmitIn(\$actor."base:environment", " The leech wriggles incessantly as its suckers attempt to find a good place to latch onto.", \$actor); 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:cut-dob">
         X[M] \$leech = \$this;
\$wearer = \$this."base:worn-by";
\$healer = \$actor;
if(!\$wearer) \{
    EmitTo(\$actor, Describe(\$leech) + " is not attached to anything.");
    return FALSE;
\}
\$skill = Int(\$actor."skill:career:healer") + Int(\$actor."skill:skill:mental:first-aid");
if(\$skill \> 0) \{
    if(\$healer == \$actor) \{
        EmitTo(\$actor, "You carefully slice the leech from your skin, preserving it in the process.");
        EmitIn(\$actor."base:environment", Describe(\$actor) + " carefully slices the leech from " + \$actor."base:possessive" + " skin, preserving it in the process.", \$actor);
        \$leech."base:worn-by" = nil;
        \$leech."base:environment" = \$healer;
    \} else \{
        EmitTo(\$actor, "You carefully slice the leech from " + Describe(\$wearer) + "'s skin, preserving it in the process.");
        EmitTo(\$wearer, Describe(\$actor) + " carefully slices the leech from your skin, preserving it in the process.");
        EmitIn(\$actor."base:environment", Describe(\$actor) + " carefully slices the leech from " + Describe(\$wearer) + "'s skin, preserving it in the process.", \$actor, \$wearer);
        \$leech."base:worn-by" = nil;
        \$leech."base:environment" = \$healer;
    \}
\} else \{
    if(\$healer == \$actor) \{
        EmitTo(\$actor, "You slice the leech from your skin, destroying it in the process.");
        EmitIn(\$actor."base:environment", Describe(\$actor) + " slices the leech from " + \$actor."base:possessive" + " skin, destroying it in the process.", \$actor);
        \$leech."base:worn-by" = nil;
        Slay(\$leech);
    \} else \{
        EmitTo(\$actor, "You slice the leech from " + Describe(\$wearer) + "'s skin, destroying it in the process.");
        EmitTo(\$wearer, Describe(\$actor) + " slices the leech from your skin, destroying it in the process.");
        EmitIn(\$actor."base:environment", Describe(\$actor) + " slices the leech from " + Describe(\$wearer) + "'s skin, destroying it in the process.", \$actor, \$wearer);
        \$leech."base:worn-by" = nil;
        Slay(\$leech);
    \}
\}
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:unwear">
         X[M] /* describe the leech being held */
EmitTo(\$actor, "You cannot simply remove a leech from your skin. You will need to cut it off."); 
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:wear">
         X[M] EmitTo(\$actor, "You cannot simply wear that. You will need to apply it carefully.");

return FALSE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1173273901, "tonyd", "E", 1173274064, "tonyd", "E", 1173274096, "tonyd", "E", 1173274153, "tonyd", "E", 1173274190, "tonyd", "E", 1173274277, "tonyd", "E", 1173274341, "tonyd", "E", 1173274399, "tonyd", "E", 1173274480, "tonyd", "E", 1205714074, "slurpeeslurp", "E", 1205714082, "slurpeeslurp", "E", 1205714103, "slurpeeslurp", "E", 1205714114, "slurpeeslurp", "E", 1205714128, "slurpeeslurp", "E", 1205714139, "slurpeeslurp", "E", 1210906593, "slurpeeslurp", "E", 1210906824, "slurpeeslurp", "E", 1210906854, "slurpeeslurp", "K", 1210906925, "slurpeeslurp", "E", 1210906989, "slurpeeslurp", "E", 1210907001, "slurpeeslurp", "E", 1210907052, "slurpeeslurp", "E", 1210907162, "slurpeeslurp", "E", 1210907230, "slurpeeslurp", "K", 1210908023, "slurpeeslurp", "E", 1210908297, "slurpeeslurp", "E", 1210908345, "slurpeeslurp", "E", 1210908429, "slurpeeslurp", "E", 1210908455, "slurpeeslurp", "E", 1210908569, "slurpeeslurp", "E", 1210908612, "slurpeeslurp", "E", 210908746, "slurpeeslurp", "E", 1210908848, "slurpeeslurp", "E", 1210908886, "slurpeeslurp", "E", 1210908928, "slurpeeslurp", "E", 1210908988, "slurpeeslurp", "E", 1210909087, "slurpeeslurp", "E", 1210909518, "slurpeeslurp", "E", 1210909551, "slurpeeslurp", "E", 1210909584, "slurpeeslurp", "E", 1210909639, "slurpeeslurp", "E", 1210913285, "slurpeeslurp", "E", 1210913307, "slurpeeslurp", "E", 1210913335, "slurpeeslurp", "E", 1210913465, "slurpeeslurp", "E", 1210917535, "slurpeeslurp", "E", 1211780367, "slurpeeslurp", "E", 1211780432, "slurpeeslurp", "E", 1211781103, "tonyd", "P", 1211781490, "slurpeeslurp", "E", 1211781810, "slurpeeslurp", "E", 1211781953, "slurpeeslurp", "E", 1211782021, "slurpeeslurp", "E", 1211782234, "slurpeeslurp", "E", 1211782352, "slurpeeslurp", "E", 1211782517, "slurpeeslurp", "E", 1211782626, "slurpeeslurp", "E", 1211785695, "tonyd", "P", 1211785891, "tonyd", "P", 1212142078, "slurpeeslurp", "E", 1212193533, "necate", "E", 1212194696, "necate", "P", 1212194720, "necate", "P", 1212194838, "necate", "K", 1212194855, "necate", "P", 1212194870, "necate", "P", 1212194990, "necate", "P", 1212195063, "necate", "P", 1212195276, "necate", "P", 1212195425, "necate", "P", 1212195853, "necate", "P", 1212195941, "necate", "P", 1212195969, "necate", "P", 1212196149, "necate", "P", 1212196244, "necate", "P", 1212196257, "necate", "P", 1212278684, "necate", "P", 1212278835, "necate", "P", 1212278995, "necate", "P", 1212279182, "necate", "P", 1212279274, "necate", "P", 1212279324, "necate", "P", 1212279357, "necate", "P", 1212279422, "necate", "P", 1212279463, "necate", "P", 1212279785, "necate", "P", 1212279914, "necate", "P", 1212279965, "necate", "P", 1212279994, "necate", "P", 1212280097, "necate", "P", 1212280113, "necate", "P", 1212280185, "necate", "P", 1212280292, "necate", "P", 1223146416, "slurpeeslurp", "E", 1223146545, "slurpeeslurp", "E", 1223146569, "slurpeeslurp", "E", 1223146785, "slurpeeslurp", "E", 1223146936, "slurpeeslurp", "E", 1253743163, "jominey", "E", 1253743716, "jominey", "E", 1253743842, "jominey", "E", 1253743928, "jominey", "E", 1348181500, "meandmine", "E", 1621960648, "sendnoodlez", "R" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="trait:trash">1</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
