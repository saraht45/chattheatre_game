<object clone="/base/obj/thing" owner="sinistrelle">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Ironclaw:NPCs:Enemies:UrNPCFighter-old)"/>
    <Base:Bulk immobile="false" mass="0.5" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="5" verb2="are carrying in your mouth" verb3="is carrying in its mouth"/>
    <Base:Misc gender="neuter" volition="true" weapon="false" default_stance="crouching" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="true">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="rat"/>
            <Base:SName sname="animal"/>
            <Base:SName sname="mammal"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="rats"/>
            <Base:PName pname="animals"/>
            <Base:PName pname="mammals"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.trait:build) $(this.trait:color) rat
          </Base:Description>
          <Base:Description type="examine">
             This rat is a small mammal with a $(this.trait:build) body covered in $(this.trait:color) fur. The rodent has a long, hairless tail and rounded ears.
          </Base:Description>
          <Base:Description type="look">
             This rat is a small mammal with a $(this.trait:build) body covered in $(this.trait:color) fur. The rodent has a long, hairless tail and rounded ears.
          </Base:Description>
          <Base:Description type="rotting-brief">
             a rotting rat corpse
          </Base:Description>
          <Base:Description type="rotting-examine">
             A rotting rat corpse, far into the process of decaying.
          </Base:Description>
          <Base:Description type="rotting-look">
             A rotting rat corpse, killed over a day ago.
          </Base:Description>
          <Base:Description type="rotting-pbrief">
             rotting rat corpses
          </Base:Description>
          <Base:Description type="skeleton-brief">
             a rat skeleton
          </Base:Description>
          <Base:Description type="skeleton-examine">
             All that remains of the dead rat are these bones.
          </Base:Description>
          <Base:Description type="skeleton-look">
             The skeleton of a dead rat.
          </Base:Description>
          <Base:Description type="skeleton-pbrief">
             rat skeletons
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="back" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="back"/>
            <Base:SName sname="lines"/>
            <Base:SName sname="stripes"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="backs"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="flexible"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             flexible back
          </Base:Description>
          <Base:Description type="examine">
             The flexible back of $[Describe($this)].
          </Base:Description>
          <Base:Description type="look">
             The flexible back of $[Describe($this)].
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="body" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="body"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="bodies"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="furry"/>
          <Base:Adjective adjective="tiny"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             tiny body
          </Base:Description>
          <Base:Description type="examine">
             The tiny, furry body of $[Describe($this)] is flexible.
          </Base:Description>
          <Base:Description type="look">
             The tiny, furry body of $[Describe($this)].
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="claws" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="claw"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="claws"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="eighteen"/>
          <Base:Adjective adjective="hooked"/>
          <Base:Adjective adjective="tiny"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             tiny claws
          </Base:Description>
          <Base:Description type="examine">
             The eighteen tiny hooked claws of $[Describe($this)].
          </Base:Description>
          <Base:Description type="look">
             The eighteen tiny hooked claws of $[Describe($this)].
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="eyes" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="eye"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="eyes"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="black"/>
          <Base:Adjective adjective="deep"/>
          <Base:Adjective adjective="large"/>
          <Base:Adjective adjective="unblinking"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             beady black eyes
          </Base:Description>
          <Base:Description type="examine">
             The beady eyes of $[Describe($this)] are located on either side of its head. They are perfectly round and completely black.
          </Base:Description>
          <Base:Description type="look">
             The beady, black eyes of $[Describe($this)].
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="forefeet" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="foot"/>
            <Base:SName sname="forefoot"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="forefeet"/>
            <Base:PName pname="feet"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="fore"/>
          <Base:Adjective adjective="prehensile"/>
          <Base:Adjective adjective="tiny"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">forefeet</Base:Description>
          <Base:Description type="examine">
             The tiny forefeet of $[Describe($this)].
          </Base:Description>
          <Base:Description type="look">
             The tiny forefeet of $[Describe($this)].
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="forelegs" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="leg"/>
            <Base:SName sname="foreleg"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="forelegs"/>
            <Base:PName pname="legs"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="fore"/>
          <Base:Adjective adjective="squat"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             squat forelegs
          </Base:Description>
          <Base:Description type="examine">
             The squat forelegs of $[Describe($this)]. They end in tiny feet.
          </Base:Description>
          <Base:Description type="look">
             The squat forelegs of $[Describe($this)].
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="fur" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="fur"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="furs"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="smooth"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.trait:color) fur
          </Base:Description>
          <Base:Description type="examine">
             The smooth $(this.trait:color) fur of $[Describe($this)].
          </Base:Description>
          <Base:Description type="look">
             The smooth $(this.trait:color) fur of $[Describe($this)].
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="head" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="head"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="heads"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="triangular"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             tapered head
          </Base:Description>
          <Base:Description type="examine">
             A triangular head, with beady black eyes, a pointed nose, and a small mouth.
          </Base:Description>
          <Base:Description type="look">
             A tapered head.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="hindfeet" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="foot"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="feet"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="hind"/>
          <Base:Adjective adjective="rear"/>
          <Base:Adjective adjective="splayed"/>
          <Base:Adjective adjective="tiny"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             hind feet
          </Base:Description>
          <Base:Description type="examine">
             The tiny hind feet of $[Describe($this)].
          </Base:Description>
          <Base:Description type="look">
             The tiny hind feet of $[Describe($this)].
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="hindlegs" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="leg"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="legs"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="hind"/>
          <Base:Adjective adjective="rear"/>
          <Base:Adjective adjective="squat"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             squat hind legs
          </Base:Description>
          <Base:Description type="examine">
             The squat hind legs of $[Describe($this)].
          </Base:Description>
          <Base:Description type="look">
             The squat hind legs of $[Describe($this)].
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="mouth" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="mouth"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="mouths"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="small"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             small mouth
          </Base:Description>
          <Base:Description type="examine">
             The small mouth of $[Describe($this)] stretches across the length of the rat's head, ending beneath the eyes.
          </Base:Description>
          <Base:Description type="look">
             The small mouth of $[Describe($this)].
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="nose" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="nose"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="noses"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="tapered"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             tapered nose
          </Base:Description>
          <Base:Description type="examine">
             The tapered nose of $[Describe($this)] comes to a smooth point flanked with whiskers.
          </Base:Description>
          <Base:Description type="look">
             The tapered nose of $[Describe($this)].
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="tail" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="tail"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="tails"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="long"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             long, hairless tail
          </Base:Description>
          <Base:Description type="examine">
             The long, hairless tail of $[Describe($this)] is almost equal to the length of the rat's entire body. It tapers smoothly to a point.
          </Base:Description>
          <Base:Description type="look">
             The long, hairless tail of $[Describe($this)].
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="tongue" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="tongue"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="tongues"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="long"/>
          <Base:Adjective adjective="pink"/>
          <Base:Adjective adjective="sticky"/>
          <Base:Adjective adjective="wet"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             pink tongue
          </Base:Description>
          <Base:Description type="examine">
             The long, wet, pink tongue of $[Describe($this)]. The surface appears sticky, ideal for catching small insects.
          </Base:Description>
          <Base:Description type="look">
             The long, wet, pink tongue of $[Describe($this)].
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:combat:naturalweapon">
         \<Ironclaw:Lib:Combat:Weapons:Claws\>
      </Core:Property>
      <Core:Property property="export:nip-core:consent:allow-all">
         1
      </Core:Property>
      <Core:Property property="export:nip-core:hooks">
         ([ "decide":\<Lib:NIP:base:hooks:decide\>, "delay":\<Lib:NIP:base:hooks:delay\>, "emoting":\<Lib:NIP:lib:emoting\>, "fighting-fake-abc":\<IC:Lib:NIP:lib:fighting-fake-abc\>, "freemoting":\<Lib:NIP:lib:freemoting\>, "internal":\<Lib:NIP:base:hooks:internal\>, "movement":\<Lib:NIP:lib:movement\>, "resource-control":\<Lib:NIP:lib:resource-control\> ])
      </Core:Property>
      <Core:Property property="export:nip-core:inherits">
         ([ \<IC:Lib:NIP:lib:fighting-fake-abc\>:(\{ "act:nip/die", "lib:fighting-fake-abc:decide", "lib:fight_loop", "lib:choose_target", "react:command-dob%nip-fighting", "react:command-iob%nip-fighting", "lib:fight_command", "act-pre:combat_getattacked%nip-fighting", "act-pre:combat_getattacked_preempt%nip-fighting", "witness:enter-into%nip-fighting" \}), \<Lib:NIP:base:lib:hooks\>:(\{ "lib:core:find-hook", "lib:core:register-hook", "lib:core:unregister-hook", "lib:modify:hooks", "setprop-post:hook" \}), \<Lib:NIP:base:lib:signals\>:(\{ "lib:modify:signals", "setprop-post:signal", "lib:calc_sighookpath" \}), \<Lib:NIP:base:lib:stream\>:(\{ "setprop-post:sigexecptr", "setprop-post:sigstream" \}), \<Lib:NIP:base:signals:DECIDE\>:(\{ "setprop-post:decide" \}), \<Lib:NIP:lib:death\>:(\{ "act:nip/die", "lib:handler:start:death" \}), \<Lib:NIP:lib:emoting\>:(\{ "lib:handler:emoting:parse", "lib:behave" \}), \<Lib:NIP:lib:freemoting\>:(\{ "lib:handler_freemote" \}), \<Lib:NIP:lib:movement\>:(\{ "lib:core_movement_exit" \}), \<Lib:NIP:lib:prey\>:(\{ "lib:handler:prey:defend", "lib:handler:prey:die", "lib:handler:start:prey", "lib:handler:prey:eaten", "act:nip/die" \}), \<Lib:NIP:lib:resource-control\>:(\{ "witness:login%nip:resource-control", "witness:enter-from%nip:resource-control", "witness:teleport%resource-control", "lib:entering", "witness-post:login%nip:resource-control" \}), \<Lib:NIP:lib:spawn-control\>:(\{ "act:stop" \}) ])
      </Core:Property>
      <Core:Property property="export:nip-core:libraries">
         (\{ \<Lib:NIP:base:lib:signals\>, \<Lib:NIP:base:lib:hooks\>, \<Lib:NIP:base:lib:stream\>, \<Lib:NIP:lib:resource-control\>, \<Lib:NIP:core\>, \<Lib:NIP:base:signals:DELAY\>, \<Lib:NIP:base:signals:DECIDE\>, \<Lib:NIP:base:signals:INTERNAL\>, \<Lib:NIP:lib:movement\>, \<Lib:NIP:lib:spawn-control\>, \<Lib:NIP:lib:emoting\>, \<Lib:NIP:lib:freemoting\>, \<Lib:NIP:lib:prey\>, \<Lib:NIP:lib:death\>, \<IC:Lib:NIP:lib:fighting-fake-abc\> \})
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:behavior:">
         ([ 4:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:stats:agility">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:stats:defense">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:emoting:frequency">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:freemoting:frequency">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:hints:">
         ([ 4:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:movement:frequency">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:prey:dead-chunks">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:prey:descripts">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:prey:type">
         ([ 5:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:resource-control:ttl">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:resource-control:ttl_increase">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:spawn:area">
         ([ 4:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:sighookpath">
         (\{ "delay:DELAY-init", "delay:DELAY-exec", "internal:INTERNAL-exec", "decide:DECIDE-init", "emoting:DECIDE", "fighting-fake-abc:DECIDE", "freemoting:DECIDE", "movement:DECIDE", "decide:DECIDE-exec", "decide:DECIDE-post" \})
      </Core:Property>
      <Core:Property property="export:nip-core:signals">
         ([ 10:"DELAY", 500:"INTERNAL", 1000:"DECIDE" ])
      </Core:Property>
      <Core:Property property="export:nip-core:system:revision">
         44
      </Core:Property>
      <Core:Property property="export:nip:behavior:db">
         \<Allegory:NPCs:NIPs:StrayAnimals:BehaviorRat\>
      </Core:Property>
      <Core:Property property="export:nip:behavior:prey">
         \<Allegory:NPCs:NIPs:StrayAnimals:BehaviorPrey\>
      </Core:Property>
      <Core:Property property="export:nip:start">
         (\{ "handler:start:prey", "handler:skink-start", "handler:start:death" \})
      </Core:Property>
      <Core:Property property="export:nip:stats:agility">
         5
      </Core:Property>
      <Core:Property property="export:nip:stats:defense">
         1
      </Core:Property>
      <Core:Property property="export:nip:trait:emoting:frequency">
         6
      </Core:Property>
      <Core:Property property="export:nip:trait:fighting:attack-everyone">
         0
      </Core:Property>
      <Core:Property property="export:nip:trait:fighting:attack-when-provoked">
         1
      </Core:Property>
      <Core:Property property="export:nip:trait:fighting:block-message">
         "(npc) blocks (actor) from leaving."
      </Core:Property>
      <Core:Property property="export:nip:trait:fighting:block-runners">
         1
      </Core:Property>
      <Core:Property property="export:nip:trait:fighting:delay-max">
         60
      </Core:Property>
      <Core:Property property="export:nip:trait:fighting:delay-min">
         7
      </Core:Property>
      <Core:Property property="export:nip:trait:fighting:hurtful-verbs">
         (\{ "slash", "cut", "stab", "punch", "hit", "kick" \})
      </Core:Property>
      <Core:Property property="export:nip:trait:fighting:killable">
         0
      </Core:Property>
      <Core:Property property="export:nip:trait:fighting:multiattack">
         2
      </Core:Property>
      <Core:Property property="export:nip:trait:fighting:retarget">
         1
      </Core:Property>
      <Core:Property property="export:nip:trait:fighting:targeting-frequency">
         6
      </Core:Property>
      <Core:Property property="export:nip:trait:freemoting:frequency">
         20
      </Core:Property>
      <Core:Property property="export:nip:trait:freemoting:steal-frequency">
         10
      </Core:Property>
      <Core:Property property="export:nip:trait:movement:frequency">
         6
      </Core:Property>
      <Core:Property property="export:nip:trait:prey:descripts">
         3
      </Core:Property>
      <Core:Property property="export:nip:trait:prey:type">
         (\{ "prey" \})
      </Core:Property>
      <Core:Property property="export:nip:trait:resource-control:ttl">
         1800
      </Core:Property>
      <Core:Property property="export:nip:trait:resource-control:ttl_increase">
         600
      </Core:Property>
      <Core:Property property="export:nip:trait:spawn:area">
         \<Allegory:NPCs:NIPs:StrayAnimals:AreaProperties\>
      </Core:Property>
      <Core:Property property="export:nip:trait:spawn:maxpop">
         5
      </Core:Property>
      <Core:Property property="export:norespawn">0</Core:Property>
      <Core:Property property="export:theatre:id">
         "IC"
      </Core:Property>
      <Core:Property property="export:trait:corpse">
         \<Allegory:Props:Animals:City:RatCorpse\>
      </Core:Property>
      <Core:Property property="export:trait:dexterity">
         8
      </Core:Property>
      <Core:Property property="export:trait:nodelay">
         1
      </Core:Property>
      <Core:Property property="export:trait:size">
         "tiny"
      </Core:Property>
      <Core:Property property="export:trait:smell">
         "sewage"
      </Core:Property>
      <Core:Property property="export:trait:superbrief">
         "rat"
      </Core:Property>
      <Core:Property property="gimli:act-pre:enter%ccombat">
         "E[G]\\n// We don't want skinks leaving during combat\\n\\nif(\$actor.combat) \{\\n  // They are already in combat\\n  \\n  // Can they successfully break from combat?\\n  // Disabled this to stop skinks breaking from combat\\n  // if(Call(\$\{Ironclaw:Lib:Combat:Cards:Combat\}, \\"breakcombat\\", \$char: \$actor)) return TRUE;\\n\\n  // Apparently not...\\n  EmitTo(\$actor, \\"You cannot leave \\"+Describe(\$actor.\\"base:environment\\")+\\" while in combat.\\");\\n  EmitTo(\$actor, \\"You can attempt to 'breakcombat' to end the fight. Or you can defeat or be defeated by your opponents.\\");\\n  return FALSE;\\n\}\\n\\nreturn TRUE;"
      </Core:Property>
      <Core:Property property="gimli:lib:take_combat_action_attack">
         "E[G]\\n// Script gets run when NPC tries to take this action\\nif(\$this.dead) return FALSE; // Charge actions, to end the turn\\n\\n// Does the skink escape?\\n\$escaping = FALSE;\\nif(!\$this.combat \|\| !\$this.combat[\\"target\\"]) \$escaping = TRUE;\\nif(!\$escaping) \{\\n  \$defender_weapon = ccombat::get_weapon(\$char: \$this.combat[\\"target\\"], \$type: \\"parry\\");\\n  \$tmp = ccombat::get_dicepool(\$char: \$this.combat[\\"target\\"], \$pool: \\"defending\\", \$weapon: \$defender_weapon, \$type: \\"parry\\");\\n  \$result = ironclaw::make_opposed_roll(\$val1: 5, \$val2: \$tmp, \$opposed_roll_range: 2);\\n  if(\$result \> 0) \$escaping = TRUE;\\n\}\\n\\nif(\$escaping) \{\\n  switch(random(5)) \{\\n    case 4:\\n      EmitIn(\$this.\\"base:environment\\", Describe(\$this)+\\" flees.\\");\\n      break;\\n    case 3:\\n      EmitIn(\$this.\\"base:environment\\", Describe(\$this)+\\" scurries away.\\");\\n      break;\\n    case 2:\\n      EmitIn(\$this.\\"base:environment\\", Describe(\$this)+\\" ducks into a crack.\\");\\n      break;\\n    case 1:\\n      EmitIn(\$this.\\"base:environment\\", Describe(\$this)+\\" vanishes into a shadow.\\");\\n      break;\\n    default:\\n      EmitIn(\$this.\\"base:environment\\", Describe(\$this)+\\" dives down a small hole.\\");\\n      break;\\n  \}\\n\\n  Slay(\$this);\\n\} else \{\\n  switch(random(5)) \{\\n    case 4:\\n      EmitIn(\$this.\\"base:environment\\", Describe(\$this)+\\" looks for an opening to flee.\\");\\n      break;\\n    case 3:\\n      EmitIn(\$this.\\"base:environment\\", Describe(\$this)+\\" scurries this way and that, trying to get away.\\");\\n      break;\\n    case 2:\\n      EmitIn(\$this.\\"base:environment\\", Describe(\$this)+\\" ducks towards a crack.\\");\\n      break;\\n    case 1:\\n      EmitIn(\$this.\\"base:environment\\", Describe(\$this)+\\" isn't fast enough to vanish into a shadow.\\");\\n      break;\\n    default:\\n      EmitIn(\$this.\\"base:environment\\", Describe(\$this)+\\" is cut off when it tries to dive down a small hole.\\");\\n      break;\\n  \}\\n\}\\n\\nreturn FALSE; // Charge action"
      </Core:Property>
      <Core:Property property="loading">1</Core:Property>
      <Core:Property property="merry:act-post:combat_getattacked%flee">
         X[M] /* make the skink flee away */    
\$delay(5 + random(10), TRUE, "3f81");    
if(\$this.dead) return TRUE;    
    
switch(random(5)) \{    
  case 4:    
    EmitIn(\$this."base:environment", Describe(\$this)+" flees.");    
    break;    
  case 3:    
    EmitIn(\$this."base:environment", Describe(\$this)+" scurries away.");    
    break;    
  case 2:    
    EmitIn(\$this."base:environment", Describe(\$this)+" ducks into a crack.");    
    break;    
  case 1:    
    EmitIn(\$this."base:environment", Describe(\$this)+" vanishes into a shadow.");    
    break;    
  default:    
    EmitIn(\$this."base:environment", Describe(\$this)+" dives down a small hole.");    
    break;    
\}    
Slay(\$this);    
return TRUE;
      </Core:Property>
      <Core:Property property="merry:act-pre:enter%area_checking">
         X[M] /*EmitTo(this, "Entering"); 
EmitTo(this, dump_value(args));*/ 
if(!this."authorized:areas") return TRUE; /* Only limit wandering if we've specified our authorized areas */ 
if(this."udat:possessed") return TRUE; /* Don't stop them wandering if a PC is controlling the NPC */ 
if(!\$what) return TRUE; 
if(\$destination = Get(this."base:environment", "details:"+NRefDetail(\$what)+":exit:dest")) \{ 
  \$destination = NRefOb(\$destination); 
  if(!\$destination."trait:area" \|\| \$destination."trait:area" == this."base:environment"."trait:area") return TRUE; 
  if(!member(lower_case(\$destination."trait:area"), this."authorized:areas")) \{ 
    EmitTo(this, "You are not authorized to enter "+\$destination."trait:area"); 
    return FALSE; 
  \} 
\} 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:act-pre:enter%ccombat">
         X[M] /* Gimli-Powered! Do not edit! Edit gimli:act-pre:enter%ccombat instead! */ 
/* We don't want skinks leaving during combat */ 
 
if(\$actor.combat) \{ 
  /* They are already in combat */ 
   
  /* Can they successfully break from combat? */ 
  /* Disabled this to stop skinks breaking from combat */ 
  /* if(Call(\$\{Ironclaw:Lib:Combat:Cards:Combat\}, "breakcombat", \$char: \$actor)) return TRUE; */ 
 
  /* Apparently not... */ 
  EmitTo(\$actor, "You cannot leave "+Describe(\$actor."base:environment")+" while in combat."); 
  EmitTo(\$actor, "You can attempt to 'breakcombat' to end the fight. Or you can defeat or be defeated by your opponents."); 
  return FALSE; 
\} 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:act:combat_getdamaged">
         X[M] if(\$this.dead) return TRUE; 
if(Int(\$damage) == 0) return TRUE; 
\$this.dead = 1; 
 
/* 
  EmitTo(\$attacker, \$attackdesc[0]+\$defencedesc[0]+"."); 
  EmitTo(\$this, \$attackdesc[1]+\$defencedesc[1]+"."); 
  EmitIn(\$this."base:environment", \$attackdesc[2]+\$defencedesc[2]+".", \$attacker, \$this); 
 
 
\$delay(0.5, TRUE, "6944"); 
*/ 
 
EmitIn(\$this."base:environment", Describe(\$this)+" dies from its wounds."); 
 
::die(); 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:inherit:act-pre:breakcombat">
         \<Ironclaw:Lib:Combat:Cards:Combat\>
      </Core:Property>
      <Core:Property property="merry:inherit:act-pre:fight">
         \<Ironclaw:Lib:Combat:Cards:Combat\>
      </Core:Property>
      <Core:Property property="merry:inherit:act-pre:pass">
         \<Ironclaw:Lib:Combat:Cards:Combat\>
      </Core:Property>
      <Core:Property property="merry:inherit:act:nip/die">
         \<IC:Lib:NIP:lib:fighting-fake-abc\>
      </Core:Property>
      <Core:Property property="merry:inherit:act:start">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:act:stop">
         \<Lib:NIP:lib:spawn-control\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:behave">
         \<Lib:NIP:lib:emoting\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:calc_sighookpath">
         \<MOVED:20080918-114107:Lib:NIP:base:lib:signals\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:choose_target">
         \<IC:Lib:NIP:lib:fighting-fake-abc\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:add_offer">
         \<MOVED:20080918-114107:Lib:NIP:lib:offers\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:find-hook">
         \<MOVED:20080918-114107:Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:merry_add">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:merry_delete">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:register-hook">
         \<MOVED:20080918-114107:Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:sub_offer">
         \<MOVED:20080918-114107:Lib:NIP:lib:offers\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:sysupdate">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:unregister-hook">
         \<MOVED:20080918-114107:Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core_movement_exit">
         \<Lib:NIP:lib:movement\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:decide:decide-exec">
         \<MOVED:20080918-114107:Lib:NIP:base:hooks:decide\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:decide:decide-init">
         \<MOVED:20080918-114107:Lib:NIP:base:hooks:decide\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:decide:decide-post">
         \<MOVED:20080918-114107:Lib:NIP:base:hooks:decide\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:delay:delay-exec">
         \<MOVED:20080918-114107:Lib:NIP:base:hooks:delay\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:delay:delay-init">
         \<MOVED:20080918-114107:Lib:NIP:base:hooks:delay\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:eating:decide">
         \<MOVED:20080918-114107:Lib:NIP:lib:eating\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:eating:internal">
         \<MOVED:20080918-114107:Lib:NIP:lib:eating\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:emoting:decide">
         \<Lib:NIP:lib:emoting\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:entering">
         \<MOVED:20080918-114107:Lib:NIP:lib:resource-control\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:fight_command">
         \<IC:Lib:NIP:lib:fighting-fake-abc\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:fight_loop">
         \<IC:Lib:NIP:lib:fighting-fake-abc\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:fighting-fake-abc:decide">
         \<IC:Lib:NIP:lib:fighting-fake-abc\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:find_nip_object">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:freemoting:decide">
         \<Lib:NIP:lib:freemoting\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:handler:emoting:parse">
         \<Lib:NIP:lib:emoting\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:handler:emoting:preparse">
         \<Lib:NIP:lib:emoting\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:handler:offer:eating">
         \<MOVED:20080918-114107:Lib:NIP:lib:predator\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:handler:prey:defend">
         \<Lib:NIP:lib:prey\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:handler:prey:die">
         \<Lib:NIP:lib:prey\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:handler:prey:eaten">
         \<Lib:NIP:lib:prey\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:handler:start:death">
         \<Lib:NIP:lib:death\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:handler:start:prey">
         \<Lib:NIP:lib:prey\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:handler_freemote">
         \<MOVED:20080918-114107:Lib:NIP:lib:freemoting\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:heartbeat">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:internal:internal-exec">
         \<MOVED:20080918-114107:Lib:NIP:base:hooks:internal\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:log">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:modify:hooks">
         \<MOVED:20080918-114107:Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:modify:libraries">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:modify:signals">
         \<MOVED:20080918-114107:Lib:NIP:base:lib:signals\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:movement:decide">
         \<MOVED:20080918-114107:Lib:NIP:lib:movement\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:ncs:handler">
         \<MOVED:20080918-114107:Lib:NIP:NCS\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:predator:decide">
         \<MOVED:20080918-114107:Lib:NIP:lib:predator\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:shutdown">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:take_combat_actions">
         \<Ironclaw:Lib:Combat:Cards:Libraries:UrActions\>
      </Core:Property>
      <Core:Property property="merry:inherit:react-post:offer-who">
         \<MOVED:20080918-114107:Lib:NIP:lib:offers\>
      </Core:Property>
      <Core:Property property="merry:inherit:react:command-dob%nip-fighting">
         \<IC:Lib:NIP:lib:fighting-fake-abc\>
      </Core:Property>
      <Core:Property property="merry:inherit:react:command-iob%nip-fighting">
         \<IC:Lib:NIP:lib:fighting-fake-abc\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:add">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:decide">
         \<MOVED:20080918-114107:Lib:NIP:base:signals:DECIDE\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:del">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:delete">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:error">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:hook">
         \<MOVED:20080918-114107:Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:nip">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:nip-core">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:sigexecptr">
         \<MOVED:20080918-114107:Lib:NIP:base:lib:stream\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:signal">
         \<MOVED:20080918-114107:Lib:NIP:base:lib:signals\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:sigstream">
         \<MOVED:20080918-114107:Lib:NIP:base:lib:stream\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:sub">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:witness-post:login%nip:resource-control">
         \<MOVED:20080918-114107:Lib:NIP:lib:resource-control\>
      </Core:Property>
      <Core:Property property="merry:inherit:witness:enter-from%nip:resource-control">
         \<MOVED:20080918-114107:Lib:NIP:lib:resource-control\>
      </Core:Property>
      <Core:Property property="merry:inherit:witness:teleport%resource-control">
         \<MOVED:20080918-114107:Lib:NIP:lib:resource-control\>
      </Core:Property>
      <Core:Property property="merry:lib:combat_getdamaged">
         X[M] if(\$this.dead) return TRUE; 
if(Int(\$damage) == 0) return TRUE; 
\$this.dead = 1; 
 
/* 
  EmitTo(\$attacker, \$attackdesc[0]+\$defencedesc[0]+"."); 
  EmitTo(\$this, \$attackdesc[1]+\$defencedesc[1]+"."); 
  EmitIn(\$this."base:environment", \$attackdesc[2]+\$defencedesc[2]+".", \$attacker, \$this); 
 
 
\$delay(0.5, TRUE, "6944"); 
*/ 
 
EmitIn(\$this."base:environment", Describe(\$this)+" dies from its wounds."); 
 
::die(); 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:die">
         X[M] \$corpse = Spawn(\$\{Allegory:Props:Animals:City:RatCorpse\});    
\$corpse."base:environment" = \$this."base:environment";    
\$corpse."trait:build" = \$this."trait:build";    
\$corpse."trait:color" = \$this."trait:color";    
\$corpse."trait:linecolor" = \$this."trait:linecolor";    
\$corpse."base:proximity" = \$this."base:proximity";    

\$inv = \$this."base:inventory";

for(\$i = 0; \$i \< sizeof(\$inv); \$i++) \{
    \$inv[\$i]."base:environment" = \$corpse;
\}
    
Slay(\$this);  
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:handler:skink-start">
         X[M] /* Set a starting colour and build for the rat */     
     
/* Here's a list of valid colours */     
\$color = (\{ nil, nil, nil, nil, "black", "black", "black", "black", "brown", "brown", "brown", "brown", "grey", "grey", "silver", "dark brown", "dark brown", "dark brown" \});     
/* ...and builds */     
\$build = (\{ "large", "plump", "fat", "tiny", "tiny", "small", "small", "minuscule" \});     
     
/* set the traits to be one from the list */     
\$this."trait:color" = \$color[random(sizeof(\$color))];     
\$this."trait:build" = \$build[random(sizeof(\$build))];     
     
/* After a while this object should destroy itself (in case it got trapped), so a new one can take its place */     
\$delay(60*60*24*3, TRUE, "e6fc");     
     
if(\$this."base:environment") EmitIn(\$this."base:environment", Describe(\$this)+" vanishes into a crack in the ground.");     
Slay(\$this);     
     
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:take_combat_action_attack">
         X[M] /* Gimli-Powered! Do not edit! Edit gimli:lib:take_combat_action_attack instead! */ 
/* Script gets run when NPC tries to take this action */ 
if(\$this.dead) return FALSE; /* Charge actions, to end the turn */ 
 
/* Does the skink escape? */ 
\$escaping = FALSE; 
if(!\$this.combat \|\| !\$this.combat["target"]) \$escaping = TRUE; 
if(!\$escaping) \{ 
  \$defender_weapon = ccombat::get_weapon(\$char: \$this.combat["target"], \$type: "parry"); 
  \$tmp = ccombat::get_dicepool(\$char: \$this.combat["target"], \$pool: "defending", \$weapon: \$defender_weapon, \$type: "parry"); 
  \$result = ironclaw::make_opposed_roll(\$val1: 5, \$val2: \$tmp, \$opposed_roll_range: 2); 
  if(\$result \> 0) \$escaping = TRUE; 
\} 
 
if(\$escaping) \{ 
  switch(random(5)) \{ 
    case 4: 
      EmitIn(\$this."base:environment", Describe(\$this)+" flees."); 
      break; 
    case 3: 
      EmitIn(\$this."base:environment", Describe(\$this)+" scurries away."); 
      break; 
    case 2: 
      EmitIn(\$this."base:environment", Describe(\$this)+" ducks into a crack."); 
      break; 
    case 1: 
      EmitIn(\$this."base:environment", Describe(\$this)+" vanishes into a shadow."); 
      break; 
    default: 
      EmitIn(\$this."base:environment", Describe(\$this)+" dives down a small hole."); 
      break; 
  \} 
 
  Slay(\$this); 
\} else \{ 
  switch(random(5)) \{ 
    case 4: 
      EmitIn(\$this."base:environment", Describe(\$this)+" looks for an opening to flee."); 
      break; 
    case 3: 
      EmitIn(\$this."base:environment", Describe(\$this)+" scurries this way and that, trying to get away."); 
      break; 
    case 2: 
      EmitIn(\$this."base:environment", Describe(\$this)+" ducks towards a crack."); 
      break; 
    case 1: 
      EmitIn(\$this."base:environment", Describe(\$this)+" isn't fast enough to vanish into a shadow."); 
      break; 
    default: 
      EmitIn(\$this."base:environment", Describe(\$this)+" is cut off when it tries to dive down a small hole."); 
      break; 
  \} 
\} 
 
return FALSE; /* Charge action */
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:build">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:color">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:linecolor">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="ndp">
         " *** FINISHED ADDITION *** "
      </Core:Property>
      <Core:Property property="nip-core:consent:allow-all">
         1
      </Core:Property>
      <Core:Property property="nip-core:hooks">
         ([ "decide":\<Lib:NIP:base:hooks:decide\>, "delay":\<Lib:NIP:base:hooks:delay\>, "emoting":\<Lib:NIP:lib:emoting\>, "fighting-fake-abc":\<IC:Lib:NIP:lib:fighting-fake-abc\>, "freemoting":\<Lib:NIP:lib:freemoting\>, "internal":\<Lib:NIP:base:hooks:internal\>, "movement":\<Lib:NIP:lib:movement\>, "resource-control":\<Lib:NIP:lib:resource-control\> ])
      </Core:Property>
      <Core:Property property="nip-core:inherits">
         ([ \<IC:Lib:NIP:lib:fighting-fake-abc\>:(\{ "act:nip/die", "lib:fighting-fake-abc:decide", "lib:fight_loop", "lib:choose_target", "react:command-dob%nip-fighting", "react:command-iob%nip-fighting", "lib:fight_command", "act-pre:combat_getattacked%nip-fighting", "act-pre:combat_getattacked_preempt%nip-fighting", "witness:enter-into%nip-fighting" \}), \<Lib:NIP:base:lib:hooks\>:(\{ "lib:core:find-hook", "lib:core:register-hook", "lib:core:unregister-hook", "lib:modify:hooks", "setprop-post:hook" \}), \<Lib:NIP:base:lib:signals\>:(\{ "lib:modify:signals", "setprop-post:signal", "lib:calc_sighookpath" \}), \<Lib:NIP:base:lib:stream\>:(\{ "setprop-post:sigexecptr", "setprop-post:sigstream" \}), \<Lib:NIP:base:signals:DECIDE\>:(\{ "setprop-post:decide" \}), \<Lib:NIP:lib:death\>:(\{ "act:nip/die", "lib:handler:start:death" \}), \<Lib:NIP:lib:emoting\>:(\{ "lib:handler:emoting:parse", "lib:behave" \}), \<Lib:NIP:lib:freemoting\>:(\{ "lib:handler_freemote" \}), \<Lib:NIP:lib:movement\>:(\{ "lib:core_movement_exit" \}), \<Lib:NIP:lib:prey\>:(\{ "lib:handler:prey:defend", "lib:handler:prey:die", "lib:handler:start:prey", "lib:handler:prey:eaten", "act:nip/die" \}), \<Lib:NIP:lib:resource-control\>:(\{ "witness:login%nip:resource-control", "witness:enter-from%nip:resource-control", "witness:teleport%resource-control", "lib:entering", "witness-post:login%nip:resource-control" \}), \<Lib:NIP:lib:spawn-control\>:(\{ "act:stop" \}) ])
      </Core:Property>
      <Core:Property property="nip-core:libraries">
         (\{ \<Lib:NIP:base:lib:signals\>, \<Lib:NIP:base:lib:hooks\>, \<Lib:NIP:base:lib:stream\>, \<Lib:NIP:lib:resource-control\>, \<Lib:NIP:core\>, \<Lib:NIP:base:signals:DELAY\>, \<Lib:NIP:base:signals:DECIDE\>, \<Lib:NIP:base:signals:INTERNAL\>, \<Lib:NIP:lib:movement\>, \<Lib:NIP:lib:spawn-control\>, \<Lib:NIP:lib:emoting\>, \<Lib:NIP:lib:freemoting\>, \<Lib:NIP:lib:prey\>, \<Lib:NIP:lib:death\>, \<IC:Lib:NIP:lib:fighting-fake-abc\> \})
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:behavior:">
         ([ 4:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:stats:agility">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:stats:defense">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:emoting:frequency">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:freemoting:frequency">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:hints:">
         ([ 4:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:movement:frequency">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:prey:dead-chunks">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:prey:descripts">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:prey:type">
         ([ 5:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:resource-control:ttl">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:resource-control:ttl_increase">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:spawn:area">
         ([ 4:1 ])
      </Core:Property>
      <Core:Property property="nip-core:sighookpath">
         (\{ "delay:DELAY-init", "delay:DELAY-exec", "internal:INTERNAL-exec", "decide:DECIDE-init", "emoting:DECIDE", "fighting-fake-abc:DECIDE", "freemoting:DECIDE", "movement:DECIDE", "decide:DECIDE-exec", "decide:DECIDE-post" \})
      </Core:Property>
      <Core:Property property="nip-core:signals">
         ([ 10:"DELAY", 500:"INTERNAL", 1000:"DECIDE" ])
      </Core:Property>
      <Core:Property property="nip-core:system:revision">
         44
      </Core:Property>
      <Core:Property property="nip:behavior:db">
         \<Allegory:NPCs:NIPs:StrayAnimals:BehaviorRat\>
      </Core:Property>
      <Core:Property property="nip:behavior:prey">
         \<Allegory:NPCs:NIPs:StrayAnimals:BehaviorPrey\>
      </Core:Property>
      <Core:Property property="nip:start">
         (\{ "handler:start:prey", "handler:skink-start", "handler:start:death" \})
      </Core:Property>
      <Core:Property property="nip:stats:agility">5</Core:Property>
      <Core:Property property="nip:stats:defense">1</Core:Property>
      <Core:Property property="nip:trait:emoting:frequency">
         6
      </Core:Property>
      <Core:Property property="nip:trait:fighting:attack-everyone">
         0
      </Core:Property>
      <Core:Property property="nip:trait:fighting:attack-when-provoked">
         1
      </Core:Property>
      <Core:Property property="nip:trait:fighting:block-message">
         "(npc) blocks (actor) from leaving."
      </Core:Property>
      <Core:Property property="nip:trait:fighting:block-runners">
         1
      </Core:Property>
      <Core:Property property="nip:trait:fighting:delay-max">
         60
      </Core:Property>
      <Core:Property property="nip:trait:fighting:delay-min">
         7
      </Core:Property>
      <Core:Property property="nip:trait:fighting:hurtful-verbs">
         (\{ "slash", "cut", "stab", "punch", "hit", "kick" \})
      </Core:Property>
      <Core:Property property="nip:trait:fighting:killable">
         0
      </Core:Property>
      <Core:Property property="nip:trait:fighting:multiattack">
         2
      </Core:Property>
      <Core:Property property="nip:trait:fighting:retarget">
         1
      </Core:Property>
      <Core:Property property="nip:trait:fighting:targeting-frequency">
         6
      </Core:Property>
      <Core:Property property="nip:trait:freemoting:frequency">
         20
      </Core:Property>
      <Core:Property property="nip:trait:freemoting:steal-frequency">
         10
      </Core:Property>
      <Core:Property property="nip:trait:movement:frequency">
         6
      </Core:Property>
      <Core:Property property="nip:trait:prey:descripts">
         3
      </Core:Property>
      <Core:Property property="nip:trait:prey:type">
         (\{ "prey" \})
      </Core:Property>
      <Core:Property property="nip:trait:resource-control:ttl">
         1800
      </Core:Property>
      <Core:Property property="nip:trait:resource-control:ttl_increase">
         600
      </Core:Property>
      <Core:Property property="nip:trait:spawn:area">
         \<Allegory:NPCs:NIPs:StrayAnimals:AreaProperties\>
      </Core:Property>
      <Core:Property property="nip:trait:spawn:maxpop">
         5
      </Core:Property>
      <Core:Property property="npc:master">1</Core:Property>
      <Core:Property property="npc:resource-control:live_time">
         1131176559
      </Core:Property>
      <Core:Property property="npc:status:spawndate">
         1131176559
      </Core:Property>
      <Core:Property property="npc:sys:sighookpath">
         (\{ "delay:DELAY-init", "delay:DELAY-exec", "internal:INTERNAL-exec", "decide:DECIDE-init", "emoting:DECIDE", "fighting-fake-abc:DECIDE", "freemoting:DECIDE", "movement:DECIDE", "decide:DECIDE-exec", "decide:DECIDE-post" \})
      </Core:Property>
      <Core:Property property="old:merry:act-post:combat_getattacked%flee">
         X[M] /* make the skink flee away */    
\$delay(0.5, TRUE, "3f81");    
if(\$this.dead) return TRUE;    
    
switch(random(5)) \{    
  case 4:    
    EmitIn(\$this."base:environment", Describe(\$this)+" flees.");    
    break;    
  case 3:    
    EmitIn(\$this."base:environment", Describe(\$this)+" scurries away.");    
    break;    
  case 2:    
    EmitIn(\$this."base:environment", Describe(\$this)+" ducks into a crack.");    
    break;    
  case 1:    
    EmitIn(\$this."base:environment", Describe(\$this)+" vanishes into a shadow.");    
    break;    
  default:    
    EmitIn(\$this."base:environment", Describe(\$this)+" dives down a small hole.");    
    break;    
\}    
Slay(\$this);    
return TRUE;
      </Core:Property>
      <Core:Property property="old:merry:act:combat_getdamaged">
         X[M] if(\$this.dead) return TRUE;    
if(\$this."combat:damage" == 0) return TRUE;    
\$this.dead = 1;    
    
  EmitTo(\$attacker, \$attackdesc[0]+\$defencedesc[0]+".");    
  EmitTo(\$this, \$attackdesc[1]+\$defencedesc[1]+".");    
  EmitIn(\$this."base:environment", \$attackdesc[2]+\$defencedesc[2]+".", \$attacker, \$this);    
    
    
\$delay(0.5, TRUE, "6944");    
    
EmitIn(\$this."base:environment", Describe(\$this)+" dies from its wounds.");    
    
\$corpse = Spawn(\$\{Allegory:Props:Animals:City:RatCorpse\});    
\$corpse."base:environment" = \$this."base:environment";    
\$corpse."trait:build" = \$this."trait:build";    
\$corpse."trait:color" = \$this."trait:color";    
\$corpse."trait:linecolor" = \$this."trait:linecolor";    
\$corpse."base:proximity" = \$this."base:proximity";    
    
Slay(\$this);    
return TRUE;
      </Core:Property>
      <Core:Property property="old:merry:inherit:act-pre:breakcombat">
         \<Ironclaw:Lib:Combat:New:Combat\>
      </Core:Property>
      <Core:Property property="old:merry:lib:combat:got_hit">
         X[M] /* assign actions with this script rather than using the normal combat system */    
\$az = nil /* defunct */;    
    
/*EmitTo(\$az, "Checking damage");*/    
    
if(Int(\$this."combat:damage") \<= 1) return TRUE;    
    
/* high damage. Kill the NPC */    
    
/* is the skink already dead? */    
/*if(\$this."death:dead") return TRUE;*/    
    
Social(\$this, "twitch", "spasmodically", nil);    
EmitIn(\$this."base:environment", Describe(this)+" dies from its wounds.");    
    
Call(\$\{Ironclaw:Lib:Combat:New:Combat\}, "remove_from_combat", \$fighter: \$this);    
    
\$this."death:dead" = 1;    
\$corpse = Spawn(\$\{Allegory:Props:Animals:City:RatCorpse\});    
\$corpse."base:environment" = \$this."base:environment";    
\$corpse."trait:build" = \$this."trait:build";    
\$corpse."trait:color" = \$this."trait:color";    
\$corpse."trait:linecolor" = \$this."trait:linecolor";    
\$corpse."base:proximity" = \$this."base:proximity";    
    
\$inv = \$this."base:inventory";    
    
for(\$i = 0; \$i \< sizeof(\$inv); \$i++) \{    
    \$inv[\$i]."base:environment" = \$corpse;    
\}    
    
Slay(\$this);    
    
return FALSE;
      </Core:Property>
      <Core:Property property="old:merry:lib:combat:perform_actions">
         X[M] /* assign actions with this script rather than using the normal combat system */    
int i;    
\$az = \$\{Chatters:AE:az:azrael\};    
    
/* skinks really just run away */    
/* give a chance to hit them, though */    
if(!random(3)) \{    
 /* 1 in 3 chance it flees successfully */    
 if(this."base:environment")    
  EmitIn(this."base:environment", Describe(this)+" vanishes into a small crack between the cobblestones.");    
 Slay(this);    
 Act(this, "pass");    
\}    
    
/* otherwise, just pass, giving the PCs another chance to hit */    
Act(this, "pass");    
return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1190518153, "tonyd", "E", 1195791022, "rorschakovacs", "K", 1195793910, "rorschakovacs", "K", 1256517002, "balkaar", "E", 1256517041, "balkaar", "E", 1256517052, "balkaar", "E", 1256517055, "balkaar", "E", 1256517059, "balkaar", "E", 1256517243, "balkaar", "E", 1256517259, "balkaar", "E", 1256517279, "balkaar", "E", 1256517306, "balkaar", "E", 1256517382, "balkaar", "E", 1256883971, "tonyd", "E", 1271382573, "jominey", "E", 1271382627, "jominey", "E", 1271382655, "jominey", "E", 1271382714, "jominey", "E", 1271383209, "jominey", "E", 1271384197, "jominey", "E", 1271384526, "jominey", "E", 1271384543, "jominey", "E", 1271384732, "jominey", "E", 1271384800, "jominey", "E", 1271637516, "jominey", "E", 1271637839, "jominey", "E", 1271637974, "jominey", "E", 1271638046, "jominey", "E", 1271638123, "jominey", "E", 1271638170, "jominey", "E", 1271638649, "jominey", "E", 1272131502, "jominey", "E", 1272131547, "jominey", "E", 1278838244, "tonyd", "P", 1278838508, "tonyd", "P", 1278838551, "tonyd", "P", 1294449355, "jominey", "E", 1294449370, "jominey", "E", 1294449430, "jominey", "E", 1294449446, "jominey", "E", 1294449469, "jominey", "E", 1294449473, "jominey", "E", 1294449605, "jominey", "E", 1294449655, "jominey", "E", 1294449722, "jominey", "E", 1294449833, "jominey", "E", 1294449859, "jominey", "E", 1309487918, "rorschakovacs", "R", 1311441610, "morwenlorelie", "E", 1321246966, "tonyd", "P", 1321247121, "tonyd", "X", 1343503025, "jominey", "E", 1343503068, "jominey", "E", 1343503120, "jominey", "E", 1343503131, "jominey", "E", 1343503170, "jominey", "E", 1343503239, "jominey", "E", 1343503308, "jominey", "E", 1343503336, "jominey", "E", 1343503762, "jominey", "E", 1343503931, "jominey", "E", 1343504048, "jominey", "E", 1343504296, "jominey", "S", 1343504371, "jominey", "E", 1343504926, "jominey", "E", 1343505357, "jominey", "E", 1343505820, "jominey", "E", 1379864900, "meandmine", "X", 1380051137, "meandmine", "X", 1390435128, "vandringar", "E", 1390435499, "vandringar", "E", 1390435797, "vandringar", "E", 1390499307, "vandringar", "E", 1402909481, "vandringar", "E", 1418331929, "jominey", "E", 1418331970, "jominey", "E", 1418332011, "jominey", "E", 1453958051, "tonyd", "P", 1453958068, "tonyd", "P", 1454566903, "tonyd", "P", 1454569500, "tonyd", "P", 1454569553, "tonyd", "P", 1456896187, "tonyd", "P", 1456896249, "tonyd", "P", 1456896402, "tonyd", "P", 1456896546, "tonyd", "P", 1456896568, "tonyd", "P", 1456897991, "tonyd", "P", 1456898013, "tonyd", "P", 1456898038, "tonyd", "P", 1456898051, "tonyd", "P", 1456898263, "tonyd", "P", 1456898295, "tonyd", "P", 1456898404, "tonyd", "P", 1456898428, "tonyd", "P", 1456898450, "tonyd", "P", 1456898457, "tonyd", "P", 1456898467, "tonyd", "P", 1456898484, "tonyd", "P", 1456898807, "tonyd", "P", 1456898830, "tonyd", "P", 1456898864, "tonyd", "P", 1456898886, "tonyd", "P", 1456898995, "tonyd", "P", 1456899235, "tonyd", "P", 1456899281, "tonyd", "P", 1456899387, "tonyd", "P", 1456899432, "tonyd", "P", 1456899537, "tonyd", "P", 1456899612, "tonyd", "P", 1456899620, "tonyd", "P", 1456899627, "tonyd", "P", 1456899648, "tonyd", "P", 1456899797, "tonyd", "P", 1456899833, "tonyd", "P", 1456899875, "tonyd", "P", 1456899981, "tonyd", "P", 1456900019, "tonyd", "P", 1456900063, "tonyd", "P", 1456900139, "tonyd", "P", 1510423670, "jominey", "E", 1510423700, "jominey", "E", 1571550264, "sendnoodlez", "R", 1571550525, "sendnoodlez", "X", 1571550548, "sendnoodlez", "E", 1571550656, "sendnoodlez", "E", 1571550930, "sendnoodlez", "K", 1571550947, "sendnoodlez", "X", 1571551000, "sendnoodlez", "K", 1571551004, "sendnoodlez", "E", 1571551007, "sendnoodlez", "E", 1571552464, "sendnoodlez", "E", 1571552493, "sendnoodlez", "E", 1572633194, "sendnoodlez", "X", 1573690505, "jominey", "E", 1573690526, "jominey", "E", 1593787999, "jominey", "E", 1593975406, "jominey", "E" \})
      </Core:Property>
      <Core:Property property="sigstream">2</Core:Property>
      <Core:Property property="skill:attackingdefensive">
         0
      </Core:Property>
      <Core:Property property="skill:cutoffensive">3</Core:Property>
      <Core:Property property="skill:dodgedefensive">
         1
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="skill:feintoffensive">
         0
      </Core:Property>
      <Core:Property property="skill:fumbledefensive">
         0
      </Core:Property>
      <Core:Property property="skill:guarddefensive">
         3
      </Core:Property>
      <Core:Property property="skill:idledefensive">
         0
      </Core:Property>
      <Core:Property property="skill:recoverdefensive">
         2
      </Core:Property>
      <Core:Property property="skill:restdefensive">
         1
      </Core:Property>
      <Core:Property property="skill:retiredefensive">
         2
      </Core:Property>
      <Core:Property property="skill:salutedefensive">
         0
      </Core:Property>
      <Core:Property property="skill:thrustoffensive">
         3
      </Core:Property>
      <Core:Property property="theatre:id">"IC"</Core:Property>
      <Core:Property property="volition">1</Core:Property>
      <Core:Property property="x_gimliinstance">
         ([  ])
      </Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
