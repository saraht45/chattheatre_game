<object clone="/base/obj/thing" owner="jominey">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(IronClaw:Props:Lighting:Source:UrLightSource)"/>
    <Base:Bulk immobile="false" mass="0.5" density="8"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0.6" maxweight="1.1" verb2="hold" verb3="holds"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details/>
    <Base:Combat>
      <Base:Strength value="5"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:alteration:add:default:gempieces">
         ([ "adj-prop":(\{ "trait:color", "trait:material" \}), "names":(\{ (\{ "sname", "gem" \}), (\{ "pname", "gems" \}) \}), "properties":(\{ (\{ "trait:color", "trait:gem:color" \}), (\{ "trait:material", "trait:gem:material" \}), (\{ "trait:gem:inlay", "trait:gem:inlay" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:lightsource:details"/>
      <Core:Property property="export:lightsource:holds">
         "torch"
      </Core:Property>
      <Core:Property property="export:lightsource:objects"/>
      <Core:Property property="export:lightsource:quantity:max">
         1
      </Core:Property>
      <Core:Property property="merry:lib:show_contents">
         X[M] string rstr;
int i;

rstr = "";
if(NRefOb(\$target)."lightsource:objects" \&\& sizeof(NRefOb(\$target)."lightsource:objects")) \{
    \$objects = NRefOb(\$target)."lightsource:objects";

    if(sizeof(\$objects) == 1) \{
        rstr = \$objects[0][1];
    \} else if(sizeof(\$objects) == 2) \{
        rstr = \$objects[0][1] + " and " + \$objects[1][1];
    \} else if(sizeof(\$objects) == 3) \{
        rstr = \$objects[0][1] + ", " + \$objects[1][1] + " and " + \$objects[2][1];
    \} else \{
        for(i = 0; i \< sizeof(\$objects); i++) \{
            if(i \< sizeof(\$objects) - 2) \{
                rstr += \$objects[i][1] + ", ";
            \} else if(i == sizeof(\$objects) - 2) \{
                rstr += \$objects[i][1] + " and ";
            \} else \{
                rstr += \$objects[i][1];
            \}
        \}
    \}

    return rstr;
\}

return "";
      </Core:Property>
      <Core:Property property="merry:react-pre:empty-dob">
         X[M] mixed* details;

/* Retrieve the lightsources from the base. */

if(\$dob \&\& sizeof(\$dob) == 1) \{        
    if(!\$this."lightsource:quantity") \{
        /* Nothing to retrieve. */
        EmitTo(\$actor, Describe(\$this) + " is already empty.");    
        return FALSE;    
    \} else \{
        /* Retrieve info about the lightsource(s) that was stored in the base. */
        \$lightsources = \$this."lightsource:objects";
        \$newLSArr = (\{ \});

        for(\$i = 0; sizeof(\$lightsources) \&\& \$i \< sizeof(\$lightsources); \$i++) \{
            \$ls = \$lightsources[\$i];
            \$lsOb = \$ls[0];
            \$lsProp = \$ls[2];

            /* Spawn the lightsource and set the properties */
            \$newLS = Spawn(\$lsOb);
            \$newLS."base:environment" = \$actor;
            \$newLSArr += (\{ \$newLS \});
            \$delay(0.1, FALSE, "e52e");

            for(\$j = 0; sizeof(\$lsProp) \&\& \$j \< sizeof(\$lsProp); \$j+=2) \{
                Set(\$newLS, \$lsProp[\$j], \$lsProp[\$j+1]);
            \}

            if(!\$this."details:light:hidden") \{
                \$newLS."details:light:hidden" = FALSE;
            \}
        \}

        /* Emit the action. */
        EmitTo(\$actor, "You take " + Describe(\$newLSArr, nil, nil, STYLE_NONPOSS) + " from " + Describe(\$this) + ".");              
        EmitIn(\$actor."base:environment", Describe(\$actor)+ " takes " +Describe(\$newLSArr, nil, nil, STYLE_NONPOSS)+ " from " + Describe(\$this) + ".", \$actor);          
      
        /* Hide lightsource details. */
        details = \$this."lightsource:details";
        for(\$i = 0; \$i \< sizeof(details); \$i++) \{
            Set(\$this, "details:" + details[\$i] + ":hidden", TRUE);
        \}

        Set(\$this, "details:light:hidden", TRUE);

        \$this."lightsource:objects" = nil;
        \$this."lightsource:quantity" = 0;
        \$this."trait:light:lightable" = nil;
      
        return FALSE;              
    \}
\}
           
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:extinguish-dob">
         X[M] if(Int(\$this."lightsource:quantity") == 0) \{
    EmitTo(\$actor, Describe(\$this) + " is empty. There is nothing to extinguish.");
    return FALSE;
\}

/* Make sure light source is lit. */
if(\$this."details:light:hidden") \{
    EmitTo(\$actor, Describe(\$this, nil, \$actor) + " is not lit.");
    return FALSE;
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:light-dob">
         X[M] if(Int(\$this."lightsource:quantity") == 0) \{
    EmitTo(\$actor, Describe(\$this) + " is empty. There is nothing to light.");
    return FALSE;
\}

/* Make sure light source is not already lit. */
if(!\$this."details:light:hidden") \{
    EmitTo(\$actor, Describe(\$this, nil, \$actor) + " is already lit.");
    return FALSE;
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:place-where">
         X[M] int max, i;
mixed* details;

if(!\$what) \{
    EmitTo(\$actor, "What did you want to put in " + Describe(\$this) + ".");
    return FALSE;
\}

if(!sizeof(\$what)) \{
    EmitTo(\$actor, "What did you want to put in " + Describe(\$this) + ".");
    return FALSE;
\}

/* Only let them add one thing at a time for (my) simplicity sake. */
if(sizeof(\$what) \> 1) \{
    EmitTo(\$actor, "You can only place one thing at a time in " + Describe(\$this) + ".");
    return FALSE;
\}

\$lightsource = NRefOb(\$what[0]);

/* Make sure the base will accept the lightsource. */
if(!\$lightsource."trait:objecttype" \|\| \$lightsource."trait:objecttype" != \$this."lightsource:holds") \{
    if(\$this."lightsource:holds" == "torch") \{
        \$plural = \$this."lightsource:holds" + "es";
    \} else \{
        \$plural = \$this."lightsource:holds" + "s";
    \}
    EmitTo(\$actor, Describe(\$this) + " will only hold " + \$plural + ".");
    return FALSE;
\}

/* Make sure we didn't exceed the number of lightsources this base can hold. */
max = 1;
if(\$this."lightsource:quantity:max") \{
    max = Int(\$this."lightsource:quantity:max");
\}

if(Int(\$this."lightsource:quantity") \>= max) \{
    EmitTo(\$actor, Describe(\$this) + " cannot hold anything else.");
    return FALSE;
\}

/* Emit the action. */
EmitTo(\$actor, "You place " + Describe(\$lightsource, nil, \$actor) + " in " + Describe(\$this, nil, nil, STYLE_NONPOSS)+ ".");
EmitIn(\$actor."base:environment", Describe(\$actor) + " places " + Describe(\$lightsource, \$actor) + " in " + Describe(\$this, nil, nil, STYLE_NONPOSS) + ".", \$actor);

/* Unhide details. */
details = \$this."lightsource:details";
for(i = 0; i \< sizeof(details); i++) \{
    Set(\$this, "details:" + details[i] + ":hidden", FALSE);
\}

/* Unhide light detail if lightsource is lit. */
if(!\$lightsource."details:light:hidden") \{
  Set(\$this, "details:light:hidden", FALSE);
\}

/* Store lightsource info in the base. To be used for retrieval purposes later. */
if(\$this."lightsource:objects") \{
    \$properties = (\{ \});
    if(\$lightsource."trait:material") \{
        \$properties += (\{ "trait:material", \$lightsource."trait:material" \});
    \}

    if(\$lightsource."trait:color") \{
        \$properties += (\{ "trait:color", \$lightsource."trait:color" \}); 
    \}

    if(\$lightsource."trait:scent") \{
        \$properties += (\{ "trait:scent", \$lightsource."trait:scent" \});
    \}

    if(\$lightsource."trait:variation") \{
        \$properties += (\{ "trait:variation", \$lightsource."trait:variation" \});
    \}

    \$this."lightsource:objects" += (\{ (\{ \$lightsource."base:urparent", Describe(\$lightsource, nil, nil, STYLE_NONPOSS), \$properties \}) \});
\}

\$this."lightsource:quantity" = Int(\$this."lightsource:quantity") + 1;
\$this."trait:light:lightable" = 1;

/* Slay the lightsource. */
if(!\$lightsource."no:slay") \{
    Slay(\$lightsource);
\}

return FALSE;
      </Core:Property>
      <Core:Property property="new property name">
         "New Property Value"
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1288665286, "jominey", "E", 1288665665, "jominey", "E", 1288665905, "jominey", "E", 1288666277, "jominey", "E", 1288666293, "jominey", "E", 1288666719, "jominey", "E", 1288666872, "jominey", "E", 1288666930, "jominey", "E", 1288667130, "jominey", "E", 1288667178, "jominey", "E", 1288667208, "jominey", "E", 1288667358, "jominey", "E", 1288667393, "jominey", "E", 1288667925, "jominey", "E", 1288667947, "jominey", "E", 1288667973, "jominey", "E", 1288668085, "jominey", "E", 1288668112, "jominey", "E", 1288668438, "jominey", "E", 1288668969, "jominey", "E", 1288669679, "jominey", "E", 1288670187, "jominey", "E", 1288670683, "jominey", "E", 1288670815, "jominey", "E", 1288670860, "jominey", "E", 1288671017, "jominey", "E", 1288671590, "jominey", "E", 1288671662, "jominey", "E", 1288671848, "jominey", "E", 1288672063, "jominey", "E", 1288739761, "jominey", "R", 1288741167, "jominey", "E", 1288742192, "jominey", "E", 1288742228, "jominey", "E", 1288742257, "jominey", "E", 1288742324, "jominey", "E", 1288742465, "jominey", "E", 1288742520, "jominey", "E", 1288742626, "jominey", "E", 1288931422, "jominey", "E", 1630646284, "ezralee", "R", 1630650413, "ezralee", "E", 1630650441, "ezralee", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="trait:smells:lastchecked">
         1187898159
      </Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
