<object clone="/base/obj/thing" owner="annemairi">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Ironclaw:Props:Armorsmith:UrArmorContainer)"/>
    <Base:Bulk immobile="false" mass="4" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="2" maxweight="10"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="lying" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="false" inside="true" near="true" over="false" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="armor"/>
            <Base:SName sname="suit"/>
            <Base:SName sname="strap"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="suits"/>
            <Base:PName pname="armors"/>
            <Base:PName pname="straps"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="leather"/>
          <Base:Adjective adjective="of"/>
          <Base:Adjective adjective="set"/>
          <Base:Adjective adjective="suit"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             {? | $[sizeof($this."base:inventory")] | suit of $(this.trait:color) $(this.trait:material) armor | set of leather armor straps }
          </Base:Description>
          <Base:Description type="examine">
             {? | $[sizeof($this."base:inventory")] | A suit of $(this.trait:color) $(this.trait:material) armor. | A set of armor straps made from natural leather and complete with small brass buckles. They have been engineered to fasten armor more securely to the body. }
          </Base:Description>
          <Base:Description type="look">
             {? | $[sizeof($this."base:inventory")] | A suit of $(this.trait:color) $(this.trait:material) armor. | A set of armor straps made from natural leather and complete with small brass buckles. }
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:Covered value="back"/>
      <Base:Covered value="right-shoulder"/>
      <Base:Covered value="left-shoulder"/>
      <Base:Covered value="chest"/>
      <Base:Covered value="waist"/>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:armor:penalty">
         0
      </Core:Property>
      <Core:Property property="export:armor:rating">
         0
      </Core:Property>
      <Core:Property property="export:nip:item:cost">
         20000
      </Core:Property>
      <Core:Property property="export:trait:armor:type">
         "rigid"
      </Core:Property>
      <Core:Property property="export:trait:objecttype">
         "suitofarmor"
      </Core:Property>
      <Core:Property property="merry:lib:update_armor">
         X[M] int i; 
mixed* inventory; 
object armor; 
 
inventory = \$this."base:inventory"; 
 
\$this."armor:penalty" = 0; 
\$this."armor:rating" = 0; 
\$this."armor:covers" = (\{ \}); 
\$material = "empty"; 
\$color = "empty"; 
for(i = 0; i \< sizeof(inventory); i++) \{ 
    armor = NRefOb(inventory[i]); 
 
    \$this."armor:covers" += armor."armor:covers"; 
    \$this."armor:penalty" += armor."armor:penalty"; 
    \$this."armor:rating" += armor."armor:rating"; 
 
    if(\$material != "") \{ 
        if(\$material == "empty") \{ 
            \$material = Str(armor."trait:material"); 
        \} else \{ 
            if(armor."trait:material" != \$material) \{ 
                \$material = ""; 
            \} 
        \} 
    \} 
 
    if(\$color != "") \{ 
        if(\$color == "empty") \{ 
            \$color = Str(armor."trait:color"); 
        \} else \{ 
            if(armor."trait:color" != \$color) \{ 
                \$color = ""; 
            \} 
        \} 
    \} 
\} 
 
if(\$material == "empty") \$material = ""; 
\$this."trait:material" = \$material; 
 
if(\$color == "empty") \$color = ""; 
\$this."trait:color" = \$color; 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:empty-dob">
         X[M] \$delay(1, FALSE, "951d"); 
 
::update_armor(); 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:place-where">
         X[M] ::update_armor(); 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:take-from">
         X[M] ::update_armor(); 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:empty-dob">
         X[M] if(\$this."base:worn-by") \{ 
    EmitTo(\$actor, "You will need to remove " + Describe(\$this, nil, \$actor) + " first."); 
    return FALSE; 
\} 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:place-where">
         X[M] int i, j, stop; 
mixed* armors, coverageAll, coverage; 
 
if(\$this."base:worn-by") \{ 
    EmitTo(\$actor, "You will need to remove it first."); 
    return FALSE; 
\} 
 
armors = (\{ \}); 
 
coverageAll = \$this."armor:covers"; 
if(!coverageAll) coverageAll = (\{ \});
for(i = 0; i \< sizeof(\$what); i++) \{ 
    if(NRefOb(\$what[i])."armor:covers") \{ 
        coverage = NRefOb(\$what[i])."armor:covers"; 
  
        stop = 0; 
        for(j = 0; j \< sizeof(coverage) \&\& stop == 0; j++) \{ 
            if(member(coverage[j], coverageAll)) \{ 
                stop = 1; 
                EmitTo(\$actor, TAG("You already have armor covering your " + coverage[j] + ".", "imp")); 
            \} 
        \} 
 
        if(stop == 0) \{ 
            coverageAll += coverage; 
            armors += (\{ \$what[i] \}); 
        \} 
    \} else \{ 
        EmitTo(\$actor, TAG(Describe(NRefOb(\$what[i])) + " is not a valid piece of armor.", "imp")); 
    \} 
\} 
 
if(sizeof(armors)) \{ 
    \$what = armors; 
    return TRUE; 
\}  
 
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:take-from">
         X[M] if(\$this."base:worn-by") \{ 
    EmitTo(\$actor, "You will need to remove " + Describe(\$this, nil, \$actor) + " first."); 
    return FALSE; 
\} 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:wear">
         X[M] if(!sizeof(\$this."base:inventory")) \{ 
    EmitTo(\$actor, Describe(\$this, nil, \$actor) + " is empty."); 
    return FALSE; 
\} 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:empty-dob">
         X[M] \$delay(1, TRUE, "951d"); 
 
::update_armor(); 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:color">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:material">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-pre:trait:damage">
         X[M] EmitTo(nil /* defunct */, "damage"); 
 
\$damage = \$(hook-value); 
\$armors = \$this."base:inventory"; 
 
\$damage_to_take = \$damage; 
\$damage_reduced = \$damage; 
\$armors_damaged = (\{ \}); 
 
for(\$i = 0; \$i \< 20 \&\& \$damage_to_take \> 0 \&\& \$damage_reduced \> 0 \&\& sizeof(\$armors); \$i++) \{ 
    \$sz = sizeof(\$armors); 
    \$rand_armor = \$armors[random(\$sz)]; 
 
    /* Armor takes the hit */ 
    \$armors_damaged += (\{ \$rand_armor \}); 
    \$armors -= (\{ \$rand_armor \}); 
    \$damage_reduced -= Int(\$rand_armor."armor:rating"); 
\} 
 
EmitTo(nil /* defunct */, dump_value(\$armors_damaged)); 
 
if(sizeof(\$armors_damaged)) \{ 
    for(\$i = 0; \$i \< sizeof(\$armors_damaged); \$i++) \{ 
        \$armors_damaged[\$i]."trait:damage" = Int(\$armors_damaged[\$i]."trait:damage") + 1; 
    \} 
\} 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:setprop:trait:damage">
         X[M] EmitTo(nil /* defunct */, "damage"); 
 
\$damage = \$(hook-value); 
\$armors = \$this."base:inventory"; 
 
\$damage_to_take = \$damage; 
\$damage_reduced = \$damage; 
\$armors_damaged = (\{ \}); 
 
for(\$i = 0; \$i \< 20 \&\& \$damage_to_take \> 0 \&\& \$damage_reduced \> 0 \&\& sizeof(\$armors); \$i++) \{ 
    \$sz = sizeof(\$armors); 
    \$rand_armor = \$armors[random(\$sz)]; 
 
    /* Armor takes the hit */ 
    \$armors_damaged += (\{ \$rand_armor \}); 
    \$armors -= (\{ \$rand_armor \}); 
    \$damage_reduced -= Int(\$rand_armor."armor:rating"); 
\} 
 
if(sizeof(\$armors_damaged)) \{ 
    for(\$i = 0; \$i \< sizeof(\$armors_damaged); \$i++) \{ 
        \$armors_damaged[\$i]."trait:damage" = Int(\$armors_damaged[\$i]."trait:damage") + 1; 
    \} 
\} 
 
return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1434477663, "jominey", "E", 1434477720, "jominey", "E", 1434477779, "jominey", "E", 1434477809, "jominey", "E", 1434477814, "jominey", "E", 1434477850, "jominey", "E", 1434477919, "jominey", "E", 1434477941, "jominey", "E", 1440126876, "jominey", "E", 1440126942, "jominey", "E", 1440126968, "jominey", "E", 1440127015, "jominey", "E", 1440127054, "jominey", "E", 1440127133, "jominey", "E", 1440127219, "jominey", "R", 1440127348, "jominey", "E", 1440127356, "jominey", "E", 1441162402, "jominey", "E", 1441162490, "jominey", "E", 1441162550, "jominey", "E", 1441162590, "jominey", "E", 1441162606, "jominey", "E", 1441163181, "jominey", "K", 1441249445, "jominey", "K", 1441249464, "jominey", "K", 1441249712, "jominey", "K", 1441249787, "jominey", "K", 1441250029, "jominey", "K", 1441254599, "jominey", "E", 1459563104, "jominey", "E", 1459563176, "jominey", "K", 1520804816, "jominey", "E", 1520804871, "jominey", "E", 1520804897, "jominey", "E", 1572309930, "sendnoodlez", "X", 1576691133, "jominey", "E", 1576691172, "jominey", "E", 1621096472, "sendnoodlez", "K", 1701727009, "annemairi", "E", 1701727042, "annemairi", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
