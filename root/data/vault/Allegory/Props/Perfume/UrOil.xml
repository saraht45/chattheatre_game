<object clone="/base/obj/thing" owner="tunk_bodin">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="0.02" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="standing" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="vial"/>
            <Base:SName sname="bottle"/>
            <Base:SName sname="oil"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="bottles"/>
            <Base:PName pname="vials"/>
            <Base:PName pname="oils"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.trait:color) bottle of $(this.trait:variation) oil
          </Base:Description>
          <Base:Description type="examine">
             A $(this.trait:color) bottle of $(this.trait:variation) oil with a $(this.trait:material) stopper.<sbr/> There seems to be enough oil for another $(this.trait:quantity) applications.
          </Base:Description>
          <Base:Description type="glance">
             A $(this.trait:color) bottle of $(this.trait:variation) oil.
          </Base:Description>
          <Base:Description type="look">
             A $(this.trait:color) bottle of $(this.trait:variation) oil with a stopper.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="oil" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="oil"/>
            <Base:SName sname="liquid"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="oils"/>
            <Base:PName pname="liquids"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             some $(this.trait:variation) oil
          </Base:Description>
          <Base:Description type="look">
             Some $(this.trait:variation) oil inside of the $(this.trait:color) bottle.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="stopper" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="stopper"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="stoppers"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.trait:material) stopper
          </Base:Description>
          <Base:Description type="examine">
             A $(this.trait:material) stopper.
          </Base:Description>
          <Base:Description type="glance">
             A stopper.
          </Base:Description>
          <Base:Description type="look">
             A $(this.trait:material) stopper.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:nip:item:cost">
         1000
      </Core:Property>
      <Core:Property property="export:objecttype:oil">
         1
      </Core:Property>
      <Core:Property property="export:trait:quantity">
         10
      </Core:Property>
      <Core:Property property="merry:react-pre:apply-dob">
         X[M] \$victim = \$iob;
if(\$victim \&\& (sizeof(\$victim) == 1)) \{


EmitIn( \$actor."base:environment", Describe(\$actor)+" dabs "+Describe(this)+" on " +Describe(\$victim, \$actor)+ ".", \$actor );
EmitTo( \$actor, "You dab "+Describe(this)+" on " +Describe(\$victim, nil, \$actor)+ "." );

/*\$actor."trait:smell" = \$this."trait:smell";
\$actor."trait:taste" = "of " +\$this."trait:smell";*/

  if(!NRefOb(\$victim[0])."trait:smells") NRefOb(\$victim[0])."trait:smells" = ([ ]);
  NRefOb(\$victim[0])."trait:smells"[\$this."trait:smell"] = (\{ 30, time() \});


  \$this."trait:quantity" -= 1;
  if(\$this."trait:quantity" == 0) \{
    \$delay(0.1, FALSE, "4cbf");
    EmitTo(\$actor, Describe(\$this, nil, \$actor)+" has run out.");
    Slay(\$this);
  \}


/* this part references the effect library*/
\$target = NRefOb(\$iob[0]); 
\$paste = \$this;
Call(\$\{Ironclaw:Props:Herbalism:EffectLib\}, "effect");
  return FALSE;
\} else if(\$iob \&\& (sizeof(\$iob) \>= 1)) \{
  EmitTo( \$actor, "You may only dab " +Describe(this)+" on one thing at a time." );
  return FALSE;
\} else \{
  EmitTo( \$actor, "What do you intend to dab " +Describe(this)+" on?" );
  return FALSE;
\}

return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:dab-dob">
         X[M] \$victim = \$iob;
if(\$victim \&\& (sizeof(\$victim) == 1)) \{
EmitIn( \$actor."base:environment", Describe(\$actor)+" dabs "+Describe(this)+" on " +Describe(\$victim, \$actor)+ ".", \$actor );
EmitTo( \$actor, "You dab "+Describe(this)+" on " +Describe(\$victim, nil, \$actor)+ "." );
/*\$actor."trait:smell" = \$this."trait:smell";
\$actor."trait:taste" = "of " +\$this."trait:smell";*/

  if(!NRefOb(\$victim[0])."trait:smells") NRefOb(\$victim[0])."trait:smells" = ([ ]);
  NRefOb(\$victim[0])."trait:smells"[\$this."trait:smell"] = (\{ 30, time() \});

  \$this."trait:quantity" -= 1;
  if(\$this."trait:quantity" == 0) \{
    \$delay(0.1, FALSE, "70d9");
    EmitTo(\$actor, Describe(\$this, nil, \$actor)+" has run out.");
    Slay(\$this);
  \}
/* this part references the effect library*/
\$target = NRefOb(\$iob[0]); 
\$paste = \$this;
Call(\$\{Ironclaw:Props:Herbalism:EffectLib\}, "effect");
  return FALSE;
\} else if(\$iob \&\& (sizeof(\$iob) \>= 1)) \{
  EmitTo( \$actor, "You may only dab " +Describe(this)+" on one thing at a time." );
  return FALSE;
\} else \{
  EmitTo( \$actor, "What do you intend to dab " +Describe(this)+" on?" );
  return FALSE;
\}
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:dab-using">
         X[M] \$victim = \$dob;
if(\$victim \&\& (sizeof(\$victim) == 1)) \{
EmitIn( \$actor."base:environment", Describe(\$actor)+" dabs "+Describe(this)+" on " +Describe(\$victim, \$actor)+ ".", \$actor );
EmitTo( \$actor, "You dab "+Describe(this)+" on " +Describe(\$victim, nil, \$actor)+ "." );
/*\$actor."trait:smell" = \$this."trait:smell";
\$actor."trait:taste" = "of " +\$this."trait:smell";*/

  if(!NRefOb(\$victim[0])."trait:smells") NRefOb(\$victim[0])."trait:smells" = ([ ]);
  NRefOb(\$victim[0])."trait:smells"[\$this."trait:smell"] = (\{ 30, time() \});

  \$this."trait:quantity" -= 1;
  if(\$this."trait:quantity" == 0) \{
    \$delay(0.1, FALSE, "67f1");
    EmitTo(\$actor, Describe(\$this, nil, \$actor)+" has run out.");
    Slay(\$this);
  \}
/* this part references the effect library*/
\$target = NRefOb(\$dob[0]); 
\$paste = \$this;
Call(\$\{Ironclaw:Props:Herbalism:EffectLib\}, "effect");
  return FALSE;
\} else if(\$iob \&\& (sizeof(\$iob) \>= 1)) \{
  EmitTo( \$actor, "You may only dab " +Describe(this)+" on one thing at a time." );
  return FALSE;
\} else \{
  EmitTo( \$actor, "What do you intend to dab " +Describe(this)+" on?" );
  return FALSE;
\}
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:massage-using">
         X[M] \$victim = \$dob;
if(\$victim \&\& (sizeof(\$victim) == 1)) \{
EmitIn( \$actor."base:environment", Describe(\$actor)+" massages "+Describe(\$victim, \$actor)+" with " +Describe(this)+ ".", \$actor );
EmitTo( \$actor, "You massage "+Describe(\$victim, nil, \$actor)+" with " +Describe(this)+ "." );
/*\$actor."trait:smell" = \$this."trait:smell";
\$actor."trait:taste" = "of " +\$this."trait:smell";*/

  if(!NRefOb(\$victim[0])."trait:smells") NRefOb(\$victim[0])."trait:smells" = ([ ]);
  NRefOb(\$victim[0])."trait:smells"[\$this."trait:smell"] = (\{ 30, time() \});

  \$this."trait:quantity" -= 1;
  if(\$this."trait:quantity" == 0) \{
    \$delay(0.1, FALSE, "656d");
    EmitTo(\$actor, Describe(\$this, nil, \$actor)+" has run out.");
    Slay(\$this);
  \}
/* this part references the effect library*/
\$target = NRefOb(\$dob[0]); 
\$paste = \$this;
Call(\$\{Ironclaw:Props:Herbalism:EffectLib\}, "effect");
  return FALSE;
\} else if(\$iob \&\& (sizeof(\$iob) \>= 1)) \{
  EmitTo( \$actor, "You may only massage " +Describe(this)+" on one thing at a time." );
  return FALSE;
\} else \{
  EmitTo( \$actor, "Whom do you intend to massage " +Describe(this)+" onto?" );
  return FALSE;
\}
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:melt-iob">
         X[M] /* sanity check */
if(!\$dob) \{return TRUE;\}

/* only one item */
if(sizeof(\$dob) \> 1) \{
 EmitTo(\$actor, "You need full focus when you melt things into the oil, so melting multiple things isn't an option.");
 return FALSE;
\}

/* check for sname of candle */
\$candle = Match(\$actor, "candle");

/* if actor has no candle in hand */
   if(!sizeof(\$candle)) \{ 
      EmitTo(\$actor, "You need to find wax, that you can melt into the oil.");
      return FALSE; \} 

for(\$i = 0; \$i \< sizeof(\$candle); \$i++) \{
    \$candle[\$i] = NRefOb(\$candle[\$i]);
\}

\$wax = NRefOb(\$dob[0]);

/* if actor is not USING the candle even though actor has candle in hand */
    if(!member(\$wax, \$candle)) \{ 
    EmitTo(\$actor, "Sorry, but you can not melt that into the oil.");
    return FALSE; \} 

/* if it is candle */
/* check if they have skill */
\$gardener = Int(\$actor."skill:career:gardener") + Int(\$actor."skill:alteration:gardening")+ Int(\$actor."skill:career:healer")/2;

if(\$gardener \< 3) \{
   EmitTo(\$actor, "You don't really know how to do that.");
   return FALSE;
\} else \{
   EmitTo(\$actor, "You slowly melt the candle into the oil making a uniform substance known as paraffin.");
   EmitIn(\$actor."base:environment", Describe(\$actor)+" melts the candle into the oil making a uniform substance known as paraffin.", \$actor);

/* slay candle, slay this and spawn paraffin, set traits */
   \$paraffin = Spawn(\$\{Ironclaw:Props:Herbalism:Paraffin:UrParaffin\});
   \$paraffin."base:environment" = \$this."base:environment";
   \$paraffin."trait:material" = \$this."trait:variation";
   \$paraffin."trait:effect" = \$this."trait:effect";
   \$paraffin."trait:smell" = Str(\$wax."trait:smell")+". You also note an aroma that smells of "+Str(\$this."trait:smell");
   \$paraffin."trait:taste" = Str(\$wax."trait:taste")+". Further you can distinguish another taste, which is like "+Str(\$this."trait:taste");

   Slay(\$wax);
   Slay(this);
   return FALSE;
\}
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:color">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:material">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:variation">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="new property name">
         "New Property Value"
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1127923051, "tunk_bodin", "X", 1127923345, "tunk_bodin", "X", 1127923680, "tunk_bodin", "X", 1127923815, "tunk_bodin", "X", 1127924823, "tunk_bodin", "X", 1127930010, "tunk_bodin", "X", 1127968158, "tunk_bodin", "X", 1127968319, "tunk_bodin", "X", 1127969815, "tunk_bodin", "X", 1127970910, "tunk_bodin", "X", 1127971625, "tunk_bodin", "E", 1128056257, "tunk_bodin", "X", 1129048001, "tunk_bodin", "E", 1129771495, "tunk_bodin", "S", 1129773643, "tunk_bodin", "S", 1129787113, "tunk_bodin", "X", 1136586185, "tunk_bodin", "X", 1136707572, "tunk_bodin", "X", 1136709214, "tunk_bodin", "X", 1136709377, "tunk_bodin", "X", 1136709513, "tunk_bodin", "X", 1136709537, "tunk_bodin", "X", 1136709687, "tunk_bodin", "X", 1136709792, "tunk_bodin", "X", 1136709831, "tunk_bodin", "X", 1136709873, "tunk_bodin", "X", 1136710143, "tunk_bodin", "X", 1136710275, "tunk_bodin", "X", 1136710300, "tunk_bodin", "X", 1136710401, "tunk_bodin", "X", 1136712006, "tunk_bodin", "X", 1136757751, "roccon", "X", 1136757874, "roccon", "X", 1136757953, "roccon", "X", 1136772933, "tunk_bodin", "X", 1136773254, "tunk_bodin", "X", 1136774798, "tunk_bodin", "X", 1136776241, "tunk_bodin", "X", 1138913572, "tunk_bodin", "X", 1138919541, "tunk_bodin", "X", 1138919766, "tunk_bodin", "X", 1138919850, "tunk_bodin", "X", 1138920047, "tunk_bodin", "X", 1138920133, "tunk_bodin", "X", 1138920327, "tunk_bodin", "X", 1138920377, "tunk_bodin", "X", 1138920784, "tunk_bodin", "X", 1138920847, "tunk_bodin", "X", 1146701394, "tunk_bodin", "X", 1146701556, "tunk_bodin", "X", 1175884195, "tonyd", "P", 1175884256, "tonyd", "E", 1175884340, "tonyd", "P", 1175884359, "tonyd", "P", 1179801382, "necate", "E", 1186526244, "rorschakovacs", "E", 1186526377, "rorschakovacs", "E", 1186526984, "rorschakovacs", "E", 1186527921, "rorschakovacs", "E", 1186527976, "rorschakovacs", "E", 1186528318, "rorschakovacs", "E", 1186528409, "rorschakovacs", "E", 1186528698, "rorschakovacs", "E", 1186528728, "rorschakovacs", "E", 1186528854, "rorschakovacs", "E", 1186528922, "rorschakovacs", "E", 1186529012, "rorschakovacs", "E", 1186529125, "rorschakovacs", "E", 1186529255, "rorschakovacs", "P", 1186529298, "rorschakovacs", "P", 1186529310, "rorschakovacs", "P", 1186529332, "rorschakovacs", "P", 1186529349, "rorschakovacs", "P", 1186883950, "tonyd", "P", 1186884078, "tonyd", "P", 1186884283, "tonyd", "P", 1186884402, "tonyd", "P", 1186884431, "tonyd", "P", 1186884450, "tonyd", "P", 1186884469, "tonyd", "P", 1186884556, "tonyd", "P", 1186884680, "tonyd", "P", 1201554535, "jsfox", "X", 1205805673, "slurpeeslurp", "E", 1205805715, "slurpeeslurp", "E", 1205805860, "slurpeeslurp", "E", 1218646587, "rorschakovacs", "K", 1251308753, "balkaar", "E", 1251308982, "balkaar", "E", 1251309120, "balkaar", "E", 1251309167, "balkaar", "E", 1251309252, "balkaar", "E", 1251309359, "balkaar", "E", 1251309947, "balkaar", "E", 1251310062, "balkaar", "E", 1251310322, "balkaar", "E", 1251315911, "balkaar", "E", 1251320762, "jominey", "E", 1251321233, "balkaar", "E", 1251322224, "balkaar", "E", 1251322393, "balkaar", "E", 1251322598, "balkaar", "E", 1251322654, "balkaar", "E", 1252322409, "tonyd", "E", 1252766058, "balkaar", "E", 1252768912, "balkaar", "E", 1252769170, "balkaar", "E", 1252769685, "balkaar", "E", 1252770077, "balkaar", "E", 1252773097, "balkaar", "E", 1252773395, "balkaar", "E", 1252773499, "balkaar", "E", 1252773544, "balkaar", "E", 1252775107, "jominey", "E", 1252787340, "balkaar", "E", 1440424386, "slurpeeslurp", "E", 1440440745, "slurpeeslurp", "E", 1575503854, "sendnoodlez", "R", 1587418281, "sendnoodlez", "K", 1587418287, "sendnoodlez", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="trait:effect">"aloe"</Core:Property>
      <Core:Property property="trait:quantity">10</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
