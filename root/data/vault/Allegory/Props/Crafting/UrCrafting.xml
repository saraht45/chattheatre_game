<object clone="/base/obj/thing" owner="SkotOS">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             {? equal | $(this.trait:fittedto) | $(this.base:worn-by) | $(this.trait:fit) } {? | $(this.trait:ribbon:material) | beribboned } {? | $(this.trait:gem:type) | {? equal | $(this.trait:gem:type) | impearled | impearled | $(this.trait:gem:material)-$(this.trait:gem:type) } } {? equal | $(this.trait:bead:type) | none || $(this.trait:bead:type) } {? | $(this.trait:pearl) | impearled } {? | $(this.details:feather:snames) | feathered } {? | $(this.details:lining:snames) | $(this.trait:lining:material)-lined } {? | $(this.details:flower:snames) | flowered } {? | $(this.trait:color) | $(this.trait:color) } {? | $(this.trait:embroidery) | {? | $(this.trait:embroidery:pattern) | $(this.trait:embroidery:pattern)} embroidered } {? | $(this.trait:material) | $(this.trait:material) } $(this.trait:brief)
          </Base:Description>
          <Base:Description type="examine">
             {? equal | $(this.trait:fittedto) | $(this.base:worn-by) | $(this.trait:fit) } {? | $(this.trait:color) | $(this.trait:color) } {? | $(this.trait:material) | $(this.trait:material) } $(this.trait:brief){? | $(this.details:button:snames) | adorned with $(this.trait:buttons:color) $(this.trait:buttons:material) $(this.trait:buttons:type) buttons}{? | $(this.details:bead:snames) | {? | $(this.details:button:snames) | and | adorned with } $(this.trait:bead:color) $(this.trait:bead:material) {? equal | $(this.trait:bead:type) | none | beads| {? equal | $(this.trait:bead:type) | studded | studs.}}} {? | $(this.details:gempieces:snames) | Remarkable $(this.trait:gem:color) $(this.trait:gem:material)s cover the fabric.} {? | $(this.details:flower:snames) | Delicate $(this.trait:flower:color) $(this.trait:flower:material) $(this.trait:flower:brief)s are tactically scattered here and there.} {? | $(this.details:trimming:snames) | A $(this.trait:trimming:color) $(this.trait:trimming:material) trimming runs along the edge.} {? | $(this.details:lining:snames) | A $(this.trait:lining:color) $(this.trait:lining:material) lining has been sewn along the inside contours.} {? | $(this.details:lace:snames) | The $(this.trait:brief) is decorated with a $(this.trait:lace:color) $(this.trait:lace:material) lace.} {? | $(this.details:fringe:snames) | {? | $(this.details:lace:snames) | and a |The $(this.trait:brief) is decorated with a } $(this.trait:fringe:color) $(this.trait:fringe:material) fringe.} {? | $(this.details:feather:snames) | You also note the $(this.trait:feather:color) $(this.trait:feather:type) feather, which is carefully attached to the clothing.} {? | $(this.details:ribbon:snames) | The material is entwined with $(this.trait:ribbon:color) $(this.trait:ribbon:material) ribbons.} {? | $(this.trait:embroidery) | $(this.trait:embroidery)} $(this.details:default:descriptions:look) <makers-mark/> {? equal | $(this.trait:quality) | -1 || <sbr/> <quality-full/> }
          </Base:Description>
          <Base:Description type="look">
             {? equal | $(this.trait:fittedto) | $(this.base:worn-by) | $(this.trait:fit) } {? | $(this.trait:color) | $(this.trait:color) | {? | $(this.trait:material) | $(this.trait:material) } {? | $(this.trait:material) | $(this.trait:material) } } $(this.trait:brief){? | $(this.details:button:snames) | adorned with $(this.trait:buttons:color) $(this.trait:buttons:material) $(this.trait:buttons:type) buttons}{? | $(this.details:bead:snames) | {? | $(this.details:button:snames) | and | adorned with } $(this.trait:bead:color) $(this.trait:bead:material) {? equal | $(this.trait:bead:type) | none | beads| {? equal | $(this.trait:bead:type) | studded | studs.}}} {? | $(this.details:gempieces:snames) | Remarkable $(this.trait:gem:color) $(this.trait:gem:material)s cover the fabric.} {? | $(this.details:flower:snames) | Delicate $(this.trait:flower:color) $(this.trait:flower:material) $(this.trait:flower:brief)s are tactically scattered here and there.} {? | $(this.details:trimming:snames) | A $(this.trait:trimming:color) $(this.trait:trimming:material) trimming runs along the edge.} {? | $(this.details:lining:snames) | A $(this.trait:lining:color) $(this.trait:lining:material) lining has been sewn along the inside contours.} {? | $(this.details:lace:snames) | The $(this.trait:brief) is decorated with a $(this.trait:lace:color) $(this.trait:lace:material) lace.} {? | $(this.details:fringe:snames) | {? | $(this.details:lace:snames) | and a |The $(this.trait:brief) is decorated with a } $(this.trait:fringe:color) $(this.trait:fringe:material) fringe.} {? | $(this.details:feather:snames) | You also note the $(this.trait:feather:color) $(this.trait:feather:type) feather, which is carefully attached to the clothing.} {? | $(this.details:ribbon:snames) | The material is entwined with $(this.trait:ribbon:color) $(this.trait:ribbon:material) ribbons.} {? | $(this.trait:embroidery) | $(this.trait:embroidery)} $(this.details:default:descriptions:look)
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="backup:merry:react:add-iob">
         X[M] /*EmitTo(\$actor, "Args = " + dump_value(args));*/ 
/* Check if we were given a direct object to add to the indirect object */ 
if(!\$dob) \{ 
return TRUE; 
\} 
 
/* check we were only given one direct object */ 
if(sizeof(\$dob) \> 1) \{ 
  EmitTo(\$actor, "You can only add one object at a time"); 
  return FALSE; 
\} else \{ 
  \$dob = NRefOb(\$dob[0]); 
\} 
 
/* this check should also be in the object being added */ 
if(sizeof(\$iob) \> 1) \{ 
  EmitTo(\$actor, "You can only add to one object at a time"); 
  return FALSE; 
\} else \{ 
\} 
 
/* Check if we are allowed to add the iob to the dob */ 
EmitTo(\$actor, "Adding " + Describe(\$dob) + " to " + Describe(\$iob)); 
if(!(\$addlist = Get(NRefOb(\$iob[0]), "alteration:add:" + NRefDetail(\$iob[0]) + ":" + Str(\$dob."trait:objecttype")))) 
\{ 
  EmitTo(\$actor, "You can't combine these objects"); 
  return FALSE; 
\} 
 
/* We can combine the objects */ 
 
 
/* Check if these two combined creates a new object */ 
/* (assume it doesn't, until I write this code) */ 
/* set whichever is the updated object to be \$object */ 
\$object = NRefOb(\$iob[0]); 
 
/* If this is going to the existing object */ 
/* Check if we already have this object type added 
(i.e. adding lace to a shirt that already has lace) */ 
/* what if this detail doesn't exist in the target? */ 
if(sizeof(Get(\$object, "details:" + \$dob."trait:objecttype" + ":snames")) \> 0) 
\{ 
  /* The object already has snames for this detail, so we assume it has already been added previously */ 
  EmitTo(\$actor, "You cannot combine these, " + Describe(\$object, nil, \$actor) + " already has " + Describe(NewNRef(\$object, \$dob."trait:objecttype"), \$actor, nil, STYLE_NONPOSS) + "."); 
  return FALSE; 
\} 
 
/* Check which new details need to be added to the new object */ 
  /* add detail snames/pnames and adjectives */ 
if(\$addlist["names"]) 
\{ 
  for(\$i = 0; \$i \< sizeof(\$addlist["names"]); \$i++) 
  \{ 
    if(sizeof(\$addlist["names"][\$i]) == 2) 
    \{ 
      Set(\$object, "details:" + \$dob."trait:objecttype" + ":" + \$addlist["names"][\$i][0] + ":" + \$addlist["names"][\$i][1], 1); 
    \} 
  \} 
\} 
 
/* Check which old adjectives need to be removed from the object */ 
/* Adjectives to be removed from the detail. E.g. removing the current colour of an object when adding a new colour */ 
/* Based on the objects current properties, NOT the dob's properties */ 
if(\$addlist["adj-remove"]) 
\{ 
  /* Code goes here. */ 
\} 
 
/* Check which new adjectives need to be added to the object */ 
/* Adjectives for the detail, copied from a property */ 
if(\$addlist["adj-prop"]) 
\{ 
  for(\$i=0;\$i\<sizeof(\$addlist["adj-prop"]);\$i++) 
  \{ 
    if(Get(\$dob, \$addlist["adj-prop"][\$i])) 
    \{ 
      Set(\$object, "details::" + \$dob."trait:objecttype" + ":adjective:" + Get(\$dob, \$addlist["adj-prop"][\$i]), 1); 
    \} 
  \} 
\} 
 
/* Adjectives for the default, copied from a property */ 
if(\$addlist["adj-prop-default"]) 
\{ 
  for(\$i=0;\$i\<sizeof(\$addlist["adj-prop-default"]);\$i++) 
  \{ 
    Set(\$object, "details:default:adjective:" + Get(\$dob, \$addlist["adj-prop-default"][\$i]), 1); 
  \} 
\} 
 
/* Adjectives for the default, copied from a list */ 
if(\$addlist["adj-list-default"]) 
\{ 
  for(\$i=0;\$i\<sizeof(\$addlist["adj-list-default"]);\$i++) 
  \{ 
    Set(\$object, "details:default:adjective:" + \$addlist["adj-list-default"][\$i], 1); 
  \} 
\} 
 
/* Check which properties should be copied to the new object */ 
if(\$addlist["properties"]) 
\{ 
  for(\$i=0;\$i\<sizeof(\$addlist["properties"]);\$i++) 
  \{ 
    if((sizeof(\$addlist["properties"][\$i]) == 2) \&\& Get(\$dob, \$addlist["properties"][\$i][0])) 
    \{ 
      Set(\$object, \$addlist["properties"][\$i][1], Get(\$dob, \$addlist["properties"][\$i][0])); 
    \} 
  \} 
\} 
 
/* Slay the original object(s) */ 
if(!\$addlist["noslay"]) 
\{ 
  Slay(\$dob); 
\} 
 
return TRUE;
      </Core:Property>
      <Core:Property property="backup:merry:react:change-dob">
         X[M] /*Check if we have a target to alter the object to*/ 
EmitTo(\$actor, "checking for raw input"); 
 
if(!\$(into:words)) \{ 
  EmitTo(\$actor, "No input"); 
  return TRUE; 
\} 
 
/* We have a target to alter the object to */ 
EmitTo(\$actor, "We have raw input of size " + sizeof(\$(into:words))); 
\$targetwords = implode(\$(into:words), " "); 
EmitTo(\$actor, "target is " + \$targetwords); 
 
/* Check we only have one dob */ 
 
/* check we were only given one direct object */ 
if(sizeof(\$dob) \> 1) \{ 
  EmitTo(\$actor, "You can only alter one object at a time"); 
  return FALSE; 
\} 
 
/* verify this is a valid target */ 
 
/* Check if the actor is using any necessary tools */ 
 
  /* if not, check if the actor has the tools in their posession */ 
 
return FALSE;
      </Core:Property>
      <Core:Property property="export:alteration:add:default:ribbon">
         ([ "adj-prop":(\{ "trait:color", "trait:material" \}), "names":(\{ (\{ "sname", "ribbon" \}), (\{ "pname", "ribbons" \}) \}), "properties":(\{ (\{ "trait:color", "trait:ribbon:color" \}), (\{ "trait:material", "trait:ribbon:material" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:quality_description">
         X[S] This \$(this.details:default:descriptions:brief) appears to be of
\{?when\| \$(this.trait:quality) \| 1 \|                         terrible                         \| 2 \|                         bad                         \| 3 \|                         poor                         \| 4 \|                         average                         \| 5 \|                         average                         \| 6 \|                         good                         \| 7 \|                         very good                         \| 8 \|                         superb                         \| 9 \|                         outstanding                         \| 10 \|                         exceptional                         \| 11 \|                         magnificent                         \| 12 \|                         unsurpassed                         \| * \|                         average \}
quality.
      </Core:Property>
      <Core:Property property="merry:inherit:react-pre:engrave-dob">
         \<Allegory:Lib:Crafting:Custom:Engraving\>
      </Core:Property>
      <Core:Property property="merry:lib:create">
         X[M] EmitTo(nil /* defunct */, "Create script needs updating"); 
EmitTo(nil /* defunct */, dump_value(args)); 
EmitTo(nil /* defunct */, "Create script needs updating"); 
EmitTo(nil /* defunct */, dump_value(args)); 
return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "create");
      </Core:Property>
      <Core:Property property="merry:lib:get_quality">
         X[M] switch(Int(\$quality)) \{  
  case 0: return "average"; break; 
  case 1: return "terrible"; break; 
  case 2: return "bad"; break; 
  case 3: return "poor"; break; 
  case 4: return "average"; break; 
  case 5: return "average"; break; 
  case 6: return "good"; break; 
  case 7: return "very good"; break; 
  case 8: return "superb"; break; 
  case 9: return "outstanding"; break; 
  case 10: return "exceptional"; break; 
  case 11: return "magnificent"; break; 
  case 12: return "unsurpassed"; break; 
\}  
return "average";
      </Core:Property>
      <Core:Property property="merry:lib:replaceadj">
         X[M] EmitTo(nil /* defunct */, "Adjective script needs updating"); 
EmitTo(nil /* defunct */, dump_value(args)); 
EmitTo(nil /* defunct */, "Adjective script needs updating"); 
EmitTo(nil /* defunct */, dump_value(args)); 
return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj");
      </Core:Property>
      <Core:Property property="merry:lib:replacesname">
         X[M] EmitTo(nil /* defunct */, "Sname script needs updating"); 
EmitTo(nil /* defunct */, dump_value(args)); 
EmitTo(nil /* defunct */, "Sname script needs updating"); 
EmitTo(nil /* defunct */, dump_value(args)); 
return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replacesname");
      </Core:Property>
      <Core:Property property="merry:lib:setquality">
         X[M] /* set the quality if we don't already have a quality rating */ 
if(this."trait:quality" \|\| \$this."trait:objecttype" == "trap") \{ 
    Set(this, "details:default:adjective:" + ::get_quality(\$quality: \$this."trait:quality"), TRUE); 
    return TRUE; 
\} 
 
\$result = ironclaw::roll(\$roller: \$actor, \$skills: (\{"social:appraise"\}), \$bonus: (\{ "trait:mind" \})); 
 
if(\$result \> 12) \{ 
  \$result = ironclaw::roll(\$roller: \$actor, \$skills: (\{"social:appraise"\}), \$bonus: (\{ "trait:mind" \})); 
  if(\$result \< 12) \$result = 12; 
\} 
 
\$result = \$result / 2; 
 
if(\$result \< 1) \$result = 1; 
 
this."trait:quality" = \$result; 
 
Set(this, "details:default:adjective:" + ::get_quality(\$quality: \$this."trait:quality"), TRUE); 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:valid-check">
         X[M] EmitTo(nil /* defunct */, "Valid-check script needs updating"); 
EmitTo(nil /* defunct */, dump_value(args)); 
EmitTo(nil /* defunct */, "Valid-check script needs updating"); 
EmitTo(nil /* defunct */, dump_value(args)); 
return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "valid-check");
      </Core:Property>
      <Core:Property property="merry:react-post:add-iob">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "add", \$addition: \$dob, \$target: \$iob);
      </Core:Property>
      <Core:Property property="merry:react-post:hang-dob">
         X[M] if(\$iob \&\& (sizeof(\$iob) == 1)) \{                        
  if(NRefOb(\$iob[0])."base:volition")                        
    return TRUE;        
                  
  if(NRefOb(\$iob[0])."base:environment") \{                        
    \$this."base:environment" = NRefOb(\$iob[0])."base:environment";                        
  \} else \{                        
    \$this."base:environment" = NRefOb(\$iob[0]);                        
  \}                        
  \$this."base:proximity" = \$iob[0];                        
  \$this."base:stance" = 6;   
  \$this."base:preposition" = 8;    
 
  if(\$(iob:preposition) == "over") \{ 
    \$this."base:prepositionstring" = "above";  
  \}                                         
\}                        
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:add-iob">
         X[M] if(!\$dob) return TRUE; 
return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "valid-check", \$addition: \$dob, \$object: \$iob);
      </Core:Property>
      <Core:Property property="merry:react-pre:paint-iob">
         X[M] if((sizeof(Match(\$actor, "paint")) == 0) \&\& (sizeof(Match(\$actor, "paintbrush")) == 0)) \{                        
  EmitTo(\$actor, "You need a paintbrush and some paint.");                        
  return FALSE;                        
\} else if(sizeof(Match(\$actor, "paintbrush")) == 0) \{                        
  EmitTo(\$actor, "You need a paintbrush.");                        
  return FALSE;                        
\} else if(sizeof(Match(\$actor, "paint")) == 0) \{                        
  EmitTo(\$actor, "You need some paint.");                        
  return FALSE;                        
\}       
  
if(\$this."base:environment" != \$actor) \{  
  EmitTo(\$actor, "You must be holding " + Describe(\$this, nil, \$actor) + " to paint on it.");  
  return FALSE;  
\}  
  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:paint-iob">
         X[M] if(\$dob \&\& NRefOb(\$dob[0])) \{  
    Call(\$\{Allegory:Lib:Crafting:Custom:Painting\}, "paint", \$item: \$this, \$brief: Describe(\$dob[0]));  
    return TRUE;  
\} else \{  
    Popup(\$actor, \$\{Allegory:Lib:Crafting:Custom:Painting\}, "html:index", \$actor: \$actor, \$action: "paint", \$item: Str(\$this), \$using: Str(NRefOb(\$using[0])));  
\}
      </Core:Property>
      <Core:Property property="merry:react:take%setquality">
         X[M] /* set the quality if we don't already have a quality rating */ 
if(this."trait:quality" \|\| \$this."trait:objecttype" == "trap") \{ 
    Set(this, "details:default:adjective:" + ::get_quality(\$quality: \$this."trait:quality"), TRUE); 
    return TRUE; 
\} 
 
\$result = allegory::roll(\$roller: \$actor, \$skills: (\{"social:appraise"\}), \$bonus: (\{ "trait:intelligence" \})); 
 
if(\$result \< 1) \$result = 1; 
 
this."trait:quality" = \$result; 
 
Set(this, "details:default:adjective:" + ::get_quality(\$quality: \$this."trait:quality"), TRUE); 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:material">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:shape">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:type">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1418533224, "jominey", "E", 1421251122, "abigail", "E", 1421251177, "abigail", "E", 1421253169, "abigail", "E", 1421989693, "slurpeeslurp", "E", 1431570199, "jominey", "E", 1431570333, "jominey", "E", 1431570362, "jominey", "E", 1431570425, "jominey", "E", 1434658972, "slurpeeslurp", "K", 1434659099, "slurpeeslurp", "K", 1434659164, "slurpeeslurp", "K", 1503021232, "jominey", "E", 1503021788, "jominey", "E", 1503021802, "jominey", "E", 1524013272, "jominey", "E", 1524013873, "jominey", "E", 1539826142, "jominey", "E", 1539826149, "jominey", "E", 1539826153, "jominey", "E", 1598548209, "jominey", "E", 1641262770, "ezralee", "E", 1641262790, "ezralee", "E", 1641262930, "ezralee", "E", 1641262977, "ezralee", "R", 1641267550, "ezralee", "E", 1642034858, "sendnoodlez", "X", 1645163288, "ezralee", "K" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
