<object clone="/base/obj/thing" owner="rorschakovacs">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="true" inside="false" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="table"/>
            <Base:SName sname="blackjack"/>
            <Base:SName sname="game"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="games"/>
            <Base:PName pname="blackjacks"/>
            <Base:PName pname="tables"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="blackjack"/>
          <Base:Adjective adjective="card"/>
          <Base:Adjective adjective="cards"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.trait:material) blackjack table
          </Base:Description>
          <Base:Description type="examine">
             A long $(this.trait:material) blackjack table standing near the southern wall. The top of the table has been covered in bright green felt. At each of the four places to sit at the table the outline of a rectangle has been painted with white paint. This table is surrounded on three sides by four $(this.trait:material) stools. A brass plaque has been affixed to the front of the table.
          </Base:Description>
          <Base:Description type="look">
             A long $(this.trait:material) blackjack table standing near the southern wall. It is surrounded on three sides by four $(this.trait:material) stools. A brass plaque has been affixed to the front of the table.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="plaque" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="false" under="true" on="false" inside="false" near="true" over="true" behind="false" before="false" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="plaque"/>
            <Base:SName sname="sign"/>
            <Base:SName sname="rule"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="rules"/>
            <Base:PName pname="plaques"/>
            <Base:PName pname="signs"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="blackjack"/>
          <Base:Adjective adjective="brass"/>
          <Base:Adjective adjective="card"/>
          <Base:Adjective adjective="cards"/>
          <Base:Adjective adjective="rule"/>
          <Base:Adjective adjective="rules"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             brass plaque affixed to the front of the blackjack table
          </Base:Description>
          <Base:Description type="examine">
             A brass plaque affixed to the front of the blackjack table dictating the rules for the game:<br></br> <br></br> * The object is to collect enough cards so that their value is as close to 21 as possible without exceeding it.<br></br> * The value of the number cards corresponds to the number on the card (1-9).<br></br> * The value of the face cards (king, queen, jack) is 10 points.<br></br> * The value of the ace card can be 1 or 11, whichever the player decides.<br></br> * To begin, the dealer will deal two cards to the player.<br></br> * The player must decide to "hit" (take another card) or "stand" (end his/her turn).<br></br> * After the player has taken his/her turn, the dealer will draw cards until he exceeds 17 or 21, whichever happens first.<br></br> * If the dealer has exceeded 17, but not 21, the player wins only if his/her hand is higher than the dealer's hand.<br></br> * If the dealer has exceeded 21, and the player has not, the player wins. <br></br>* If both the dealer and the player have 21, there is no winner and the player's bet is returned.
          </Base:Description>
          <Base:Description type="look">
             A brass plaque affixed to the front of the blackjack table dictating the rules for the game.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="stool-1" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="true" inside="false" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="stool"/>
            <Base:SName sname="chair"/>
            <Base:SName sname="seat"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="stools"/>
            <Base:PName pname="chairs"/>
            <Base:PName pname="seats"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="blackjack"/>
          <Base:Adjective adjective="card"/>
          <Base:Adjective adjective="cards"/>
          <Base:Adjective adjective="mahogany"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.trait:material) stool at the blackjack table
          </Base:Description>
          <Base:Description type="examine">
             A simple $(this.trait:material) stool. Standing approximately ten hands high, this stool provides a place to sit at the blackjack table. Bearing no back, the stool's seat is slightly worn, but overall it is in good condition.
          </Base:Description>
          <Base:Description type="look">
             A simple $(this.trait:material) stool at the blackjack table.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="stool-2" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="true" inside="false" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="stool"/>
            <Base:SName sname="chair"/>
            <Base:SName sname="seat"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="stools"/>
            <Base:PName pname="chairs"/>
            <Base:PName pname="seats"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="blackjack"/>
          <Base:Adjective adjective="card"/>
          <Base:Adjective adjective="cards"/>
          <Base:Adjective adjective="mahogany"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.trait:material) stool at the blackjack table
          </Base:Description>
          <Base:Description type="examine">
             A simple $(this.trait:material) stool. Standing approximately ten hands high, this stool provides a place to sit at the blackjack table. Bearing no back, the stool's seat is slightly worn, but overall it is in good condition.
          </Base:Description>
          <Base:Description type="look">
             A simple $(this.trait:material) stool at the blackjack table.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="stool-3" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="true" inside="false" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="stool"/>
            <Base:SName sname="chair"/>
            <Base:SName sname="seat"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="stools"/>
            <Base:PName pname="chairs"/>
            <Base:PName pname="seats"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="blackjack"/>
          <Base:Adjective adjective="card"/>
          <Base:Adjective adjective="cards"/>
          <Base:Adjective adjective="mahogany"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.trait:material) stool at the blackjack table
          </Base:Description>
          <Base:Description type="examine">
             A simple $(this.trait:material) stool. Standing approximately ten hands high, this stool provides a place to sit at the blackjack table. Bearing no back, the stool's seat is slightly worn, but overall it is in good condition.
          </Base:Description>
          <Base:Description type="look">
             A simple $(this.trait:material) stool at the blackjack table.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="stool-4" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="true" inside="false" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="stool"/>
            <Base:SName sname="chair"/>
            <Base:SName sname="seat"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="stools"/>
            <Base:PName pname="chairs"/>
            <Base:PName pname="seats"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="blackjack"/>
          <Base:Adjective adjective="card"/>
          <Base:Adjective adjective="cards"/>
          <Base:Adjective adjective="mahogany"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.trait:material) stool at the blackjack table
          </Base:Description>
          <Base:Description type="examine">
             A simple $(this.trait:material) stool. Standing approximately ten hands high, this stool provides a place to sit at the blackjack table. Bearing no back, the stool's seat is slightly worn, but overall it is in good condition.
          </Base:Description>
          <Base:Description type="look">
             A simple $(this.trait:material) stool at the blackjack table.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:deck:full">
         (\{ "the ace of spades", "the two of spades", "the three of spades", "the four of spades", "the five of spades", "the six of spades", "the seven of spades", "the eight of spades", "the nine of spades", "the ten of spades", "the Jack of spades", "the Queen of spades", "the King of spades", "the ace of diamonds", "the two of diamonds", "the three of diamonds", "the four of diamonds", "the five of diamonds", "the six of diamonds", "the seven of diamonds", "the eight of diamonds", "the nine of diamonds", "the ten of diamonds", "the Jack of diamonds", "the Queen of diamonds", "the King of diamonds", "the ace of hearts", "the two of hearts", "the three of hearts", "the four of hearts", "the five of hearts", "the six of hearts", "the seven of hearts", "the eight of hearts", "the nine of hearts", "the ten of hearts", "the Jack of hearts", "the Queen of hearts", "the King of hearts", "the ace of clubs", "the two of clubs", "the three of clubs", "the four of clubs", "the five of clubs", "the six of clubs", "the seven of clubs", "the eight of clubs", "the nine of clubs", "the ten of clubs", "the Jack of clubs", "the Queen of clubs", "the King of clubs" \})
      </Core:Property>
      <Core:Property property="export:trait:material">
         "mahogany"
      </Core:Property>
      <Core:Property property="merry:lib:ante_up">
         X[M] /* We joined the game so let's place a bet. */ 
/* Options are 3, 6, 12, 24. Can also back out of the game at this point. */ 
\$better = \$par["better"]; 
 
if(Int(\$better."trait:money") \>= 24) \{ 
    interaction::question(\$actor: \$better, \$question: "How much do you want to bet?", \$expires: 30, \$env: "TRUE", \$a: "3 florins", \$a_ob: \$this, \$a_fun: "place_bet_3", \$b: "6 florins", \$b_ob: \$this, \$b_fun: "place_bet_6", \$c: "12 florins", \$c_ob: \$this, \$c_fun: "place_bet_12", \$d: "24 florins", \$d_ob: \$this, \$d_fun: "place_bet_24", \$e: "I changed my mind. I don't want to play.", \$e_ob: \$this, \$e_fun: "quit", \$expire_ob: \$this, \$expire_fun: "quit", \$par: \$par); 
\} else if(Int(\$better."trait:money") \< 24 \&\& Int(\$better."trait:money") \>= 12) \{ 
    interaction::question(\$actor: \$better, \$question: "How much do you want to bet?", \$expires: 30, \$env: "TRUE", \$a: "3 florins", \$a_ob: \$this, \$a_fun: "place_bet_3", \$b: "6 florins", \$b_ob: \$this, \$b_fun: "place_bet_6", \$c: "12 florins", \$c_ob: \$this, \$c_fun: "place_bet_12", \$d: "I changed my mind. I don't want to play.", \$d_ob: \$this, \$d_fun: "quit", \$expire_ob: \$this, \$expire_fun: "quit", \$par: \$par); 
\} else if(Int(\$better."trait:money") \< 12 \&\& Int(\$better."trait:money") \>= 6) \{ 
    interaction::question(\$actor: \$better, \$question: "How much do you want to bet?", \$expires: 30, \$env: "TRUE", \$a: "3 flroins", \$a_ob: \$this, \$a_fun: "place_bet_3", \$b: "6 florins", \$b_ob: \$this, \$b_fun: "place_bet_6", \$c: "I changed my mind. I don't want to play.", \$c_ob: \$this, \$c_fun: "quit", \$expire_ob: \$this, \$expire_fun: "quit", \$par: \$par); 
\} else if(Int(\$better."trait:money") \< 6 \&\& Int(\$better."trait:money") \>= 3) \{ 
    interaction::question(\$actor: \$better, \$question: "How much do you want to bet?", \$expires: 30, \$env: "TRUE", \$a: "3 florins", \$a_ob: \$this, \$a_fun: "place_bet_3", \$b: "I changed my mind. I don't want to play.", \$b_ob: \$this, \$b_fun: "quit", \$expire_ob: \$this, \$expire_fun: "quit", \$par: \$par); 
\} else \{ 
    EmitTo(\$better, TAG("You need at least 3 florins in order to play.", "social:first")); 
\} 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:bet">
         X[M] /* Make sure we have enough to place this bet */ 
/* Change: move this check to pre-bet question and make it impossible to even get this far if better doesn't have enough money. */ 
if(\$amount \> Int(\$better."trait:money")) \{ 
    EmitTo(\$better, "You don't have enough money."); 
    return FALSE; 
\} 
 
EmitTo(\$better, TAG("You place a bet of " + Str(\$amount/100) + " florins.", "social:first")); 
EmitIn(\$this."base:environment", TAG(Describe(\$better) + " places a bet of " + Str(\$amount/100) + " florins.", "social:third"), \$better); 
 
/* Deduct the amount */ 
\$better."trait:money" -= \$amount; 
 
\$this."bet:payins" = Int(\$this."bet:payins") + Int(\$amount/100); 
 
if(!\$this."betting:history:payins") \$this."betting:history:payins" = ([ ]); 
 
if(\$this."betting:history:payins"[\$actor]) \{  
    \$this."betting:history:payins"[\$actor] += Int(\$amount/100); 
\} else \{ 
    \$this."betting:history:payins" += ([ \$actor:Int(\$amount/100) ]); 
\} 
 
/* First bet of a new game. Alert the room. */ 
if(!\$this.bets) \{ 
    EmitIn(\$this."base:environment", TAG("The blackjack dealer announces that the next round is about to begin. Step up and place your bets!", "social:third")); 
    \$this.bets = ([ ]); 
    \$this.bets += ([ \$better:\$amount ]); 
 
    /* Wait 30 seconds before starting the game */ 
    \$delay(30, FALSE, "b7f4"); 
 
    /* Let's deal! */ 
    ::deal(); 
\} 
 
/* Add player to list of betters */ 
\$this.bets += ([ \$better:\$amount ]); 
 
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:count_cards">
         X[M] \$total = 0; 
\$acecount = 0; 
for(\$j = 0; \$j \< sizeof(\$hand); \$j++) \{ 
    \$card = explode(lower_case(\$hand[\$j]), " "); 
 
    if(member("ace", \$card)) \$acecount ++; 
    if(member("two", \$card)) \$total += 2; 
    if(member("three", \$card)) \$total += 3; 
    if(member("four", \$card)) \$total += 4; 
    if(member("five", \$card)) \$total += 5; 
    if(member("six", \$card)) \$total += 6; 
    if(member("seven", \$card)) \$total += 7; 
    if(member("eight", \$card)) \$total += 8; 
    if(member("nine", \$card)) \$total += 9; 
    if(member("ten", \$card)) \$total += 10; 
    if(member("jack", \$card)) \$total += 10; 
    if(member("queen", \$card)) \$total += 10; 
    if(member("king", \$card)) \$total += 10; 
\} 
 
if(\$acecount == 1) \{ 
    if((\$total + 11) \> 21) \{ 
        \$total++; 
    \} else \{ 
        \$total += 11; 
    \} 
\} 
 
/* If we have more than one, assume that all but one is counted as 1 point */ 
if(\$acecount \> 1) \{ 
    \$total += (\$acecount-1); 
 
    if((\$total + 11) \> 21) \{ 
        \$total++; 
    \} else \{ 
        \$total += 11; 
    \} 
\} 
 
return \$total;
      </Core:Property>
      <Core:Property property="merry:lib:deal">
         X[M] \$this.playing = 1; 
 
/* Get a list of all betters */ 
\$betsAll = \$this.bets; 
\$betters = map_indices(\$betsAll); 
 
/* Reset our deck */ 
\$this."deck:current" = copy(\$this."deck:full"); 
 
/* Database to keep track of deals */ 
\$this."deck:deals" = ([ ]); 
\$this."deck:dealing:to" = copy(\$betters) + (\{ \$this \}); 
\$betters = copy(\$this."deck:dealing:to"); 
 
for(\$i = 0; \$i \< sizeof(\$betters); \$i++) \{ 
    /* Deal the first card face-down */ 
    \$card = \$this."deck:current"[random(sizeof(\$this."deck:current"))]; 
    \$this."deck:current" -= (\{ \$card \}); 
    \$this."deck:deals" += ([ \$betters[\$i]:(\{ \$card \}) ]); 
 
    if(\$betters[\$i] == \$this) \{ 
        EmitIn(\$this."base:environment", TAG("The blackjack dealer deals himself a card face-down.", "social:third")); 
    \} else \{ 
        EmitTo(\$betters[\$i], TAG("The blackjack dealer deals you " + \$card + " face-down.", "social:first")); 
        EmitIn(\$this."base:environment", TAG("The blackjack dealer deals " + Describe(\$betters[\$i]) + " a card face-down.", "social:third"), \$betters[\$i]); 
    \} 
 
    \$delay(3, FALSE, "514e"); 
 
    /* Deal the second card face-up */ 
    \$card = \$this."deck:current"[random(sizeof(\$this."deck:current"))]; 
    \$this."deck:current" -= (\{ \$card \}); 
    \$this."deck:deals"[\$betters[\$i]] += (\{ \$card \}); 
 
    if(\$betters[\$i] == \$this) \{ 
        EmitIn(\$this."base:environment", TAG("The blackjack dealer deals himself " + \$card + " face-up.", "social:third")); 
    \} else \{ 
        EmitTo(\$betters[\$i], TAG("The blackjack dealer deals you " + \$card + " face-up.", "social:first")); 
        EmitIn(\$this."base:environment", TAG("The blackjack dealer deals " + Describe(\$betters[\$i]) + " " + \$card + " face-up.", "social:third"), \$betters[\$i]); 
    \} 
 
    \$delay(3, FALSE, "1782"); 
\} 
 
::deal_to_player(\$player: \$betters[0]); 
 
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:deal_to_player">
         X[M] /* Deal to first player on stack. Players will be removed as their turn ends. */ 
\$betters = \$this."deck:dealing:to"; 
 
\$total = ::count_cards(\$hand: \$this."deck:deals"[\$player]); 
 
if(\$player."base:environment" != \$this."base:environment") return ::stay(\$par: ([ "player":\$player ])); 
 
if(\$total \<= 21) \{ 
    interaction::question(\$actor: \$player, \$question: "You currently have " + Str(\$total) + ". Do you want to continue?", \$expires: 30, \$env: "TRUE", \$a: "Hit me.", \$a_ob: \$this, \$a_fun: "hit_me", \$b: "Stay.", \$b_ob: \$this, \$b_fun: "stay", \$expire_ob: \$this, \$expire_fun: "stay", \$par: ([ "player":\$betters[0] ])); 
\} else \{ 
    interaction::question(\$actor: \$player, \$question: "You bust.", \$expires: 30, \$env: "TRUE", \$a: "Stay.", \$a_ob: \$this, \$a_fun: "stay", \$expire_ob: \$this, \$expire_fun: "stay", \$par: ([ "player":\$player ])); 
\} 
 
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:end_game">
         X[M] /* Determine winners */ 
\$betsAll = \$this.bets; 
\$betters = map_indices(\$betsAll); 
 
\$high = 0; 
for(\$i = 0; \$i \< sizeof(\$betters); \$i++) \{ 
    \$hand = \$this."deck:deals"[\$betters[\$i]]; 
    \$total = ::count_cards(\$hand: \$hand); 
    if(\$total \> \$high \&\& \$high \<= 21) \$high = \$total; 
\} 
 
/* Deal for dealer */ 
for(\$i = 0; \$i \< 10 \&\& !\$bust \&\& !\$stay; \$i++) \{ 
    \$dealer = ::count_cards(\$hand: \$this."deck:deals"[\$this]); 
 
    if(\$dealer \> 21) \{ 
        \$bust = 1; 
    \} else if(\$dealer == 21) \{ 
        /* Dealer wins */ 
        \$stay = 1; 
    \} else \{ 
        if(\$dealer \<= 17) \{ 
            \$card = \$this."deck:current"[random(sizeof(\$this."deck:current"))]; 
            \$this."deck:current" -= (\{ \$card \}); 
            \$this."deck:deals"[\$this] += (\{ \$card \}); 
            EmitIn(\$this."base:environment", TAG("The blackjack dealer deals himself " + \$card + " face-up.", "social:third")); 
        \} else \{ 
            \$stay = 1; 
        \} 
    \} 
    \$delay(2, FALSE, "bc47"); 
\} 
 
\$delay(3, FALSE, "fc80"); 
EmitIn(\$this."base:environment", TAG("The blackjack dealer stays.", "social:third")); 
\$delay(3, FALSE, "9433"); 
EmitIn(\$this."base:environment", TAG("The blackjack dealer reveals his cards: " + implode(\$this."deck:deals"[\$this], ", ") + " [" + Str(\$dealer) + "].", "social:third")); 
\$delay(3, FALSE, "2bc5"); 
\$bets = \$this.bets; 
for(\$i = 0; \$i \< sizeof(\$betters); \$i++) \{ 
    \$hand = \$this."deck:deals"[\$betters[\$i]]; 
    \$total = ::count_cards(\$hand: \$hand); 
 
    if(\$total == 21 \|\| (\$dealer \> 21 \&\& \$total \<= 21) \|\| (\$total \> \$dealer \&\& \$total \<= 21)) \{ 
        if(\$hand == (\{ "the ace of spades", "the Jack of clubs" \}) \|\| \$hand == (\{ "the Jack of clubs", "the ace of spades" \})) \{ 
            /* Bonus payout (x10) */ 
            \$payout = Int(\$bets[\$betters[\$i]])*10; 
        \} else if(\$total == 21 \&\& \$dealer == 21) \{ 
            /* Get your money back (x1) */ 
            \$payout = Int(\$bets[\$betters[\$i]])*1; 
        \} else \{ 
            /* Standard payout (x2) */ 
            \$payout = Int(\$bets[\$betters[\$i]])*2; 
        \} 
        \$betters[\$i]."trait:money" += Int(\$payout); 
 
        if(!\$this."betting:history:payouts") \$this."betting:history:payouts" = ([ ]); 
 
        if(\$this."betting:history:payouts"[\$betters[\$i]]) \{  
            \$this."betting:history:payouts"[\$betters[\$i]] += Int(\$payout/100); 
        \} else \{ 
            \$this."betting:history:payouts" += ([ \$betters[\$i]:Int(\$payout/100) ]); 
        \} 
 
        \$this."bet:payouts" = Int(\$this."bet:payouts") + Int(\$payout/100); 
     
        EmitTo(\$betters[\$i], TAG("You WIN " + Str(\$payout/100) + " florins with " + implode(\$hand, ", ") + " [" + Str(\$total) + "].", "social:third")); 
        EmitIn(\$this."base:environment", TAG(Describe(\$betters[\$i]) + " WINS " + Str(\$payout/100) + " florins with " + implode(\$hand, ", ") + " [" + Str(\$total) + "].", "social:third"), \$betters[\$i]); 
    \} else if(\$total \> 21) \{ 
        EmitTo(\$betters[\$i], TAG("You BUST with " + implode(\$hand, ", ") + " [" + Str(\$total) + "].", "social:third")); 
        EmitIn(\$this."base:environment", TAG(Describe(\$betters[\$i]) + " BUSTS with " + implode(\$hand, ", ") + " [" + Str(\$total) + "].", "social:third"), \$betters[\$i]); 
    \} else \{ 
        EmitTo(\$betters[\$i], TAG("You LOSE with " + implode(\$hand, ", ") + " [" + Str(\$total) + "].", "social:third")); 
        EmitIn(\$this."base:environment", TAG(Describe(\$betters[\$i]) + " LOSES with " + implode(\$hand, ", ") + " [" + Str(\$total) + "].", "social:third"), \$betters[\$i]); 
    \} 
\} 
 
\$this.playing = nil; 
\$this.bets = nil; 
\$this."deck:current" = nil; 
\$this."deck:dealing:to" = nil; 
\$this."deck:deals" = nil; 
 
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:hit_me">
         X[M] \$player = \$par["player"]; 
 
\$card = \$this."deck:current"[random(sizeof(\$this."deck:current"))]; 
\$this."deck:current" -= (\{ \$card \}); 
\$this."deck:deals"[\$player] += (\{ \$card \}); 
 
EmitTo(\$player, TAG("The blackjack dealer deals you " + \$card + " face-up.", "social:first")); 
EmitIn(\$this."base:environment", TAG("The blackjack dealer deals " + Describe(\$player) + " " + \$card + " face-up.", "social:third"), \$player); 
 
\$delay(1, FALSE, "ed62"); 
 
::deal_to_player(\$player: \$player); 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:place_bet_12">
         X[M] ::bet(\$better: \$par["better"], \$amount: 12*100); 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:place_bet_24">
         X[M] ::bet(\$better: \$par["better"], \$amount: 24*100); 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:place_bet_3">
         X[M] ::bet(\$better: \$par["better"], \$amount: 3*100); 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:place_bet_6">
         X[M] ::bet(\$better: \$par["better"], \$amount: 6*100); 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:quit">
         X[M] EmitTo(\$actor, "You decide not to play."); 
 
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:stay">
         X[M] \$player = \$par["player"]; 
 
EmitTo(\$player, TAG("The blackjack dealer nods to you.", "social:first")); 
EmitIn(\$this."base:environment", TAG("The blackjack dealer nods to " + Describe(\$player) + ".", "social:third"), \$player); 
 
\$this."deck:dealing:to" -= (\{ \$player \}); 
 
if(sizeof(\$this."deck:dealing:to") == 1) \{ 
    ::end_game(); 
\} else \{ 
    ::deal_to_player(\$player: \$this."deck:dealing:to"[0]); 
\} 
 
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react:play-dob">
         X[M] /* If we've already joined the game, we don't want to join again. */ 
if((\$this."bets:pending" \&\& member(\$actor, \$this."bets:pending")) \|\| (\$this.bets \&\& \$this.bets[\$actor])) \{ 
    EmitTo(\$actor, "You are already playing."); 
    return FALSE; 
\} 
 
/* Don't let people join mid-game. */ 
if(\$this.playing) \{ 
    EmitTo(\$actor, "A game is already in progress. You can join when it's over."); 
    return FALSE; 
\} 
 
::ante_up(\$par: ([ "better":\$actor ])); 
 
return FALSE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1415508717, "jominey", "E", 1415508943, "jominey", "E", 1415509254, "jominey", "E", 1415509270, "jominey", "E", 1415977326, "pp74", "K", 1445849464, "lidiab", "K", 1572478143, "sendnoodlez", "R", 1572487346, "sendnoodlez", "K", 1572892169, "jominey", "E", 1587175589, "sendnoodlez", "K", 1587175616, "sendnoodlez", "X" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
