<object clone="/base/obj/thing" owner="abiwan">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="fireplace"/>
            <Base:SName sname="hearth"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="fireplaces"/>
            <Base:PName pname="hearths"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="NEW"/>
          <Base:Adjective adjective="oversized"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             oversized dark maple fireplace
          </Base:Description>
          <Base:Description type="look">
             An oversized dark maple fireplace spans a great portion of the western wall and is flanked by two narrow windows.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="fire" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="false" under="false" on="true" inside="true" near="true" over="false" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="fire"/>
            <Base:SName sname="blaze"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="fires"/>
            <Base:PName pname="blazes"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="warmly"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">fire</Base:Description>
          <Base:Description type="examine">
             Large logs blaze warmly in the hearth.
          </Base:Description>
          <Base:Description type="look">
             Large logs blaze warmly in the hearth.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="iron rack" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="true" inside="true" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="frame"/>
            <Base:SName sname="box"/>
            <Base:SName sname="rack"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="frames"/>
            <Base:PName pname="boxes"/>
            <Base:PName pname="racks"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="iron"/>
          <Base:Adjective adjective="twisted"/>
          <Base:Adjective adjective="wood"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             iron rack filled with wood
          </Base:Description>
          <Base:Description type="examine">
             A frame of twisted iron molded in a diagonal pattern, just the right size to hold enough wood to warm the room for days.
          </Base:Description>
          <Base:Description type="look">
             A large iron rack filled with wood for the fireplace.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="mantel" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="true" inside="false" near="true" over="true" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="mantel"/>
            <Base:SName sname="mantle"/>
            <Base:SName sname="mantelpiece"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="mantels"/>
            <Base:PName pname="mantles"/>
            <Base:PName pname="mantelpieces"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="wood"/>
          <Base:Adjective adjective="wooden"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">mantel</Base:Description>
          <Base:Description type="examine">
             A thick wooden shelf made from the trunk of a walnut tree, worn dark and smooth with age. The image of large simple petal flowers tucked into a few leaves has been carved at each end of the large mantlepiece.
          </Base:Description>
          <Base:Description type="look">
             A large shelf made of a full walnut log spanning the width of the fireplace.  A simple flower and leaf design has been carved into each end of the mantelpiece.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="wood" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="wood"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="woods"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             some wood from the rack
          </Base:Description>
          <Base:Description type="look">
             Chunks of wood offcuts and blocks, useless for crafting, but good for feeding a fire.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="backup:merry:react:add-iob">
         X[M] /*EmitTo(\$actor, "Args = " + dump_value(args));*/
/* Check if we were given a direct object to add to the indirect object */
if(!\$dob) \{
return TRUE;
\}

/* check we were only given one direct object */
if(sizeof(\$dob) \> 1) \{
  EmitTo(\$actor, "You can only add one object at a time");
  return FALSE;
\} else \{
  \$dob = NRefOb(\$dob[0]);
\}

/* this check should also be in the object being added */
if(sizeof(\$iob) \> 1) \{
  EmitTo(\$actor, "You can only add to one object at a time");
  return FALSE;
\} else \{
\}

/* Check if we are allowed to add the iob to the dob */
/*EmitTo(\$actor, "Adding " + Describe(\$dob) + " to " + Describe(\$iob));*/
if(!(\$addlist = Get(NRefOb(\$iob[0]), "alteration:add:" + NRefDetail(\$iob[0]) + ":" + Str(\$dob."trait:objecttype"))))
\{
  EmitTo(\$actor, "You can't combine these objects");
  return FALSE;
\}

/* We can combine the objects */


/* Check if these two combined creates a new object */
/* (assume it doesn't, until I write this code) */
/* set whichever is the updated object to be \$object */
\$object = NRefOb(\$iob[0]);

/* If this is going to the existing object */
/* Check if we already have this object type added
(i.e. adding lace to a shirt that already has lace) */
/* what if this detail doesn't exist in the target? */
if(sizeof(Get(\$object, "details:" + \$dob."trait:objecttype" + ":snames")) \> 0)
\{
  /* The object already has snames for this detail, so we assume it has already been added previously */
  EmitTo(\$actor, "You cannot combine these, " + Describe(\$object, nil, \$actor) + " already has " + Describe(NewNRef(\$object, \$dob."trait:objecttype"), \$actor, nil, STYLE_NONPOSS) + ".");
  return FALSE;
\}

/* Check which new details need to be added to the new object */
  /* add detail snames/pnames and adjectives */
if(\$addlist["names"])
\{
  for(\$i = 0; \$i \< sizeof(\$addlist["names"]); \$i++)
  \{
    if(sizeof(\$addlist["names"][\$i]) == 2)
    \{
      Set(\$object, "details:" + \$dob."trait:objecttype" + ":" + \$addlist["names"][\$i][0] + ":" + \$addlist["names"][\$i][1], 1);
    \}
  \}
\}

/* Check which old adjectives need to be removed from the object */
/* Adjectives to be removed from the detail. E.g. removing the current colour of an object when adding a new colour */
/* Based on the objects current properties, NOT the dob's properties */
if(\$addlist["adj-remove"])
\{
  /* Code goes here. */
\}

/* Check which new adjectives need to be added to the object */
/* Adjectives for the detail, copied from a property */
if(\$addlist["adj-prop"])
\{
  for(\$i=0;\$i\<sizeof(\$addlist["adj-prop"]);\$i++)
  \{
    if(Get(\$dob, \$addlist["adj-prop"][\$i]))
    \{
      Set(\$object, "details::" + \$dob."trait:objecttype" + ":adjective:" + Get(\$dob, \$addlist["adj-prop"][\$i]), 1);
    \}
  \}
\}

/* Adjectives for the default, copied from a property */
if(\$addlist["adj-prop-default"])
\{
  for(\$i=0;\$i\<sizeof(\$addlist["adj-prop-default"]);\$i++)
  \{
    Set(\$object, "details:default:adjective:" + Get(\$dob, \$addlist["adj-prop-default"][\$i]), 1);
  \}
\}

/* Adjectives for the default, copied from a list */
if(\$addlist["adj-list-default"])
\{
  for(\$i=0;\$i\<sizeof(\$addlist["adj-list-default"]);\$i++)
  \{
    Set(\$object, "details:default:adjective:" + \$addlist["adj-list-default"][\$i], 1);
  \}
\}

/* Check which properties should be copied to the new object */
if(\$addlist["properties"])
\{
  for(\$i=0;\$i\<sizeof(\$addlist["properties"]);\$i++)
  \{
    if((sizeof(\$addlist["properties"][\$i]) == 2) \&\& Get(\$dob, \$addlist["properties"][\$i][0]))
    \{
      Set(\$object, \$addlist["properties"][\$i][1], Get(\$dob, \$addlist["properties"][\$i][0]));
    \}
  \}
\}

/* Slay the original object(s) */
if(!\$addlist["noslay"])
\{
  Slay(\$dob);
\}

return TRUE;
      </Core:Property>
      <Core:Property property="backup:merry:react:change-dob">
         X[M] /*Check if we have a target to alter the object to*/
EmitTo(\$actor, "checking for raw input");

if(!\$(into:words)) \{
  EmitTo(\$actor, "No input");
  return TRUE;
\}

/* We have a target to alter the object to */
EmitTo(\$actor, "We have raw input of size " + sizeof(\$(into:words)));
\$targetwords = implode(\$(into:words), " ");
EmitTo(\$actor, "target is " + \$targetwords);

/* Check we only have one dob */

/* check we were only given one direct object */
if(sizeof(\$dob) \> 1) \{
  EmitTo(\$actor, "You can only alter one object at a time");
  return FALSE;
\}

/* verify this is a valid target */

/* Check if the actor is using any necessary tools */

  /* if not, check if the actor has the tools in their posession */

return FALSE;
      </Core:Property>
      <Core:Property property="export:quality_description">
         X[S] This \$(this.details:default:descriptions:brief) appears to be of
\{?when\| \$(this.trait:quality) \| 1 \|             terrible             \| 2 \|             bad             \| 3 \|             poor             \| 4 \|             average             \| 5 \|             average             \| 6 \|             good             \| 7 \|             very good             \| 8 \|             superb             \| 9 \|             outstanding             \| 10 \|             exceptional             \| 11 \|             magnificent             \| 12 \|             unsurpassed             \| * \|             average \}
quality.
      </Core:Property>
      <Core:Property property="export:trait:quality">
         4
      </Core:Property>
      <Core:Property property="merry:lib:add">
         X[M] int counter;
/*EmitTo(\$actor, "Args = " + dump_value(args));*/

/* We should have already checked that we have two valid objects that can be added */
/* Make sure that the react-pre:add-iob is there, it does the checking */

/* Check again anyway */
if(!\$addition) return TRUE;
if(!Call(\$\{Allegory:Props:Crafting:UrCrafting\}, "valid-check", \$addition: \$addition, \$object: \$target))
\{ return FALSE; \}

\$addition = NRefOb(\$addition[0]);

/* Check if we are allowed to add the addition to the object */
/*EmitTo(\$actor, "Adding " + Describe(\$addition) + " to " + Describe(\$target));*/
if(!(\$addlist = Get(NRefOb(\$target[0]), "alteration:add:" + NRefDetail(\$target[0]) + ":" + Str(\$addition."trait:objecttype"))))
\{
  EmitTo(\$actor, "You can't combine these objects");
  return FALSE;
\}

/* We can combine the objects */

/* Check that this modification hasn't already been made */
if(\$addlist["stopvalue"]) \{
  /* We have a stopvalue. Check if we are allowed to continue */
  /* If this property exists in the object, then we need to stop, unless it matches the value */
  if(Get(NRefOb(\$target[0]), \$addlist["stopvalue"][0])) \{
    /* if stopvalue doesn't match the property, then exit with message*/
    if((sizeof(\$addlist["stopvalue"]) \> 1) \&\& (Get(NRefOb(\$target[0]), \$addlist["stopvalue"][0]) != \$addlist["stopvalue"][1])) \{
      /* Stopvalue doesn't match. Output error message */
      if(sizeof(\$addlist["stopvalue"]) \> 2) \{
        EmitTo(\$actor, \$addlist["stopvalue"][2]);
      \} else \{
        EmitTo(\$actor, Describe(\$target[0], nil, \$actor) + " already has a modification of that type.");
      \}
      return FALSE;
    \}
  \}
\}


/* Check if the actor is carrying any necessary tools */
if(\$tmp = \$addlist["requiredtools"])
\{
  /*We require tools*/
  for(counter=1; counter\<sizeof(\$tmp); counter++)
  \{
    /*We need a tool*/
    \$found = nil;
    for(\$i = 0; (\$i \< sizeof(\$tmp[counter]))\&\&(!\$found); \$i++)
    \{
      /*We need a tool of type \$tmp[counter][\$i] */
      for(\$j = 0; (\$j \< sizeof(\$actor."base:inventory"))\&\&(!\$found); \$j++)
      \{
        if(\$actor."base:inventory"[\$j]."trait:objecttype" == \$tmp[counter][\$i])
        \{
          /*We found the tool!*/
          \$found = 1;
        \}
      \}

      /* We didn't find the tool in our inventory. Is the player "using" the tool? */
      if(!\$found \&\& \$using)
      \{
        for(\$j=0; (\$j \< sizeof(\$using))\&\&(!\$found); \$j++)
        \{
          if(NRefOb(\$using[\$j])."trait:objecttype" == \$tmp[counter][\$i])
          \{
            /*We found the tool!*/
            /* make sure someone else isn't holding it */
            if(NRefOb(\$using[\$j])."base:environment"."base:volition")
            \{
              EmitTo(\$actor, "You can't use a tool that's being held by someone else.");
              return FALSE;
            \} else \{
              \$found = 1;
            \}
          \}
        \}
      \}
    \}
    /* If we are missing a tool we need */
    if(!\$found)
    \{
      EmitTo(\$actor, "You can't combine "+Describe(\$target[0], nil, \$actor)+" and "+Describe(\$addition, nil, \$actor)+" without "+\$tmp[0]+".");
      return FALSE;
    \}
  \}
\}


/* Check if these two combined creates a new object */
/* set whichever is the updated object to be \$object */
if(\$addlist["newobject"])
\{
  \$target = NRefOb(\$target[0]);
  \$object = Spawn(\$addlist["newobject"]);
  \$object."base:environment" = \$target."base:environment";
\} else \{
  \$object = NRefOb(\$target[0]);
  \$target = NRefOb(\$target[0]);

  /* If this is going to the existing object */
  /* Check if we already have this object type added
  (i.e. adding lace to a shirt that already has lace) */
  /* what if this detail doesn't exist in the target? */
  if(sizeof(Get(\$object, "details:" + \$addition."trait:objecttype" + ":snames")) \> 0)
  \{
    /* The object already has snames for this detail, so we assume it has already been added previously */
    EmitTo(\$actor, "You cannot combine these, " + Describe(\$object, nil, \$actor) + " already has " + Describe(NewNRef(\$object, \$addition."trait:objecttype"), \$actor, nil, STYLE_NONPOSS) + ".");
    return FALSE;
  \}

\}

/* Check which new details need to be added to the new object */
  /* add detail snames/pnames and adjectives */
if(\$addlist["names"])
\{
  for(\$i = 0; \$i \< sizeof(\$addlist["names"]); \$i++)
  \{
    if(sizeof(\$addlist["names"][\$i]) == 2)
    \{
      Set(\$object, "details:" + \$addition."trait:objecttype" + ":" + \$addlist["names"][\$i][0] + ":" + \$addlist["names"][\$i][1], 1);
    \} else if(sizeof(\$addlist["names"][\$i]) \> 2)
    \{
      for(\$j = 1; \$j \< sizeof(\$addlist["names"][\$i]); \$j++)
      \{
        Set(\$object, "details:" + \$addition."trait:objecttype" + ":" + \$addlist["names"][\$i][0] + ":" + \$addlist["names"][\$i][\$j], 1);
      \}
    \}
  \}
\}

/* Adjectives to be removed from the detail. E.g. removing the current colour of an object when adding a new colour */
/* This should be in the object as a setprop-post trigger */

/* Check which new adjectives need to be added to the object */
/* This should probably also be set as a setprop post. But it's useful, so I've got both options */
/* Adjectives for the detail, copied from a property */
if(\$addlist["adj-prop"])
\{
  for(\$i=0;\$i\<sizeof(\$addlist["adj-prop"]);\$i++)
  \{
    if(Get(\$addition, \$addlist["adj-prop"][\$i]))
    \{
      Set(\$object, "details:" + \$addition."trait:objecttype" + ":adjective:" + Get(\$addition, \$addlist["adj-prop"][\$i]), 1);
    \}
  \}
\}

/* Adjectives for the default, copied from a property */
if(\$addlist["adj-prop-default"])
\{
  for(\$i=0;\$i\<sizeof(\$addlist["adj-prop-default"]);\$i++)
  \{
    Set(\$object, "details:default:adjective:" + Get(\$addition, \$addlist["adj-prop-default"][\$i]), 1);
  \}
\}

/* Adjectives for the default, copied from a list */
if(\$addlist["adj-list-default"])
\{
  for(\$i=0;\$i\<sizeof(\$addlist["adj-list-default"]);\$i++)
  \{
    Set(\$object, "details:default:adjective:" + \$addlist["adj-list-default"][\$i], 1);
  \}
\}

/* Check which properties should be copied to the new object */
if(\$addlist["properties"])
\{
  for(\$i=0;\$i\<sizeof(\$addlist["properties"]);\$i++)
  \{
    if((sizeof(\$addlist["properties"][\$i]) == 2) \&\& Get(\$addition, \$addlist["properties"][\$i][0]))
    \{
      Set(\$object, \$addlist["properties"][\$i][1], Get(\$addition, \$addlist["properties"][\$i][0]));
    \}
  \}
\}

/* Check which properties should be copied to the new object */
if(\$addlist["properties-this"])
\{
  for(\$i=0;\$i\<sizeof(\$addlist["properties-this"]);\$i++)
  \{
    if((sizeof(\$addlist["properties-this"][\$i]) == 2) \&\& Get(\$addition, \$addlist["properties-this"][\$i][0]))
    \{
      Set(\$object, \$addlist["properties-this"][\$i][1], Get(\$addition, \$addlist["properties-this"][\$i][0]));
    \}
  \}
\}

/* Check which properties should be copied to the new object */
if(\$addlist["properties-list"])
\{
  for(\$i=0;\$i\<sizeof(\$addlist["properties-list"]);\$i++)
  \{
    if(sizeof(\$addlist["properties-list"][\$i]) == 2)
    \{
      Set(\$object, \$addlist["properties-list"][\$i][0], \$addlist["properties-list"][\$i][1]);
    \}
  \}
\}

/* Check if we should make a skill roll, to see if the quality changes */
if(\$addlist["skill"])
\{
  \$result = Call(\$\{IronClaw:Lib:UrPeople:System\}, "roll", \$dicearray: (\{ \$actor."trait:mind", Get(\$actor, "skill:alteration:"+\$addlist["skill"]), Get(\$actor, "career:alteration:"+\$addlist["skill"]) \}) );
  if(!\$addition."trait:quality") \$addition."trait:quality" = 4;
  if(!\$target."trait:quality") \$target."trait:quality" = 4;
  if(\$addition."trait:quality" \> \$target."trait:quality")
  \{
    \$max = \$addition."trait:quality";
    \$min = \$target."trait:quality";
  \} else \{
    \$max = \$target."trait:quality";
    \$min = \$addition."trait:quality";
  \}
  if(\$result \> \$max) \{
    \$object."trait:quality" = \$max+1;
  \} else if(\$result \< \$min) \{
    \$object."trait:quality" = \$min-1;
  \} else \{
    \$object."trait:quality" = \$result;
  \}
\}

/* Slay the original object(s) */
if(!\$addlist["noslay"])
\{
  Slay(\$addition);
  if(\$addlist["newobject"])
  \{
    Slay(\$target);
  \}
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:create">
         X[M] /*Check if we have a target to alter the object to*/
string * blocklist;
int counter;
string input_words;
mapping changemap;
mapping changemap2;
object new_object;
string * valid_options;
string tmp_string;

blocklist = (\{ "input-list", "input-list-actor", "requiredtools", "description", "newobject", "newobject-properties", "noslay", "properties", "stopvalue", "skill", "fixed", "noskillroll", "cost" \});

/* check we were only given one direct object */
if(!\$target \|\| sizeof(\$target) \> 1) \{
  EmitTo(\$actor, "You can only alter one object at a time");
  return FALSE;
\}

if(!\$words) \{
  if(\$words_string) \{
    input_words = \$words_string;
    sscanf(input_words, "\\"%s\\"", input_words);
  \} else \{
    input_words = "default";
  \}
\} else \{
  /* We have a target to alter the object to */
  input_words = implode(\$words, " ");
\}

/* Remove any "a" "the" "an" etc. from the targetwords */
sscanf(input_words, "a %s", input_words);
sscanf(input_words, "an %s", input_words);
sscanf(input_words, "the %s", input_words);

/* Replace any apostrophes. Players are too erratic in their use */
input_words = replace_strings(input_words, "'", "");

/* Check that input_words isn't included in the blocklist */
for(counter = 0; counter \< sizeof(blocklist); counter++)
\{
  if(input_words == blocklist[counter])
  \{
    EmitTo(\$actor, "Invalid input.");
    return FALSE;
  \}
\}

/* Check what modification is being made */
/* E.g. A symbol being sewn onto a shirt, or iron being forged into something new */
if(!\$modification) \{
  EmitTo(\$actor, "Unknown modification.");
  return FALSE;
\}

/* verify this is a valid modification */
if(!(changemap = Get(NRefOb(\$target[0]), "alteration:create:" + NRefDetail(\$target[0]) + ":" + \$modification))) \{
  EmitTo(\$actor, "You can't " + \$modification + " " + Describe(\$target[0], nil, \$actor) + ".");
  return FALSE;
\}

/* Check that we are holding the object we are modifying */
  /* Unless we are allowed to modify without holding */
if(!changemap["fixed"])
\{
  if(NRefOb(\$target[0])."base:environment" != \$actor)
  \{
    EmitTo(\$actor, "You can't " + \$modification + " " + Describe(\$target[0], nil, \$actor) + " if you are not holding it.");
    return FALSE;
  \}
\}

/* Check if the actor is carrying any necessary tools */
if(\$tmp = changemap["requiredtools"])
\{
  /*We require tools*/
  for(counter=1; counter\<sizeof(\$tmp); counter++)
  \{
    /*We need a tool*/
    \$found = nil;
    for(\$i = 0; (\$i \< sizeof(\$tmp[counter]))\&\&(!\$found); \$i++)
    \{
      /*We need a tool of type \$tmp[counter][\$i] */
      for(\$j = 0; (\$j \< sizeof(\$actor."base:inventory"))\&\&(!\$found); \$j++)
      \{
        if(\$actor."base:inventory"[\$j]."trait:objecttype" == \$tmp[counter][\$i])
        \{
          /*We found the tool!*/
          \$found = 1;
        \}
      \}
      /* We didn't find the tool in our inventory. Is the player "using" the tool? */
      if(!\$found \&\& \$using)
      \{
        for(\$j=0; (\$j \< sizeof(\$using))\&\&(!\$found); \$j++)
        \{
          if(NRefOb(\$using[\$j])."trait:objecttype" == \$tmp[counter][\$i])
          \{
            /*We found the tool!*/
            /* make sure someone else isn't holding it */
            if(NRefOb(\$using[\$j])."base:environment"."base:volition")
            \{
              EmitTo(\$actor, "You can't use a tool that's being held by someone else.");
              return FALSE;
            \} else \{
              \$found = 1;
            \}
          \}
        \}
      \}
    \}
    /* If we are missing a tool we need */
    if(!\$found)
    \{
      EmitTo(\$actor, "You can't "+\$modification+" "+Describe(\$target[0], nil, \$actor)+" without "+\$tmp[0]+".");
      return FALSE;
    \}
  \}
\}

/* Check that the character isn't wearing the object */
if(NRefOb(\$target[0])."base:clothing:worn")
\{
  EmitTo(\$actor, "You can't "+\$modification+" "+Describe(\$target[0], nil, \$actor)+" while you are wearing it.");
  return FALSE;
\}

/* Check if we were passed the input, and if so, if it's valid */
/* Get details for the modification */
if(!(changemap2 = changemap[input_words]))
\{
  /* if property set, check in the actor for valid input */
  if(changemap["input-list-actor"])
  \{
    for(counter = 0; counter \< sizeof(changemap["input-list-actor"]); counter++)
    \{
      if(Get(\$actor, changemap["input-list-actor"][counter]) \&\& (changemap2 = Get(\$actor, changemap["input-list-actor"][counter])[input_words])) break;
    \}
  \}
  /* if not found, and property set, search other places for valid input */
  if(!changemap2 \&\& changemap["input-list"])
  \{
    for(counter = 0; counter \< sizeof(changemap["input-list"]); counter++)
    \{
      /* Check if the object exists, and if we can retrieve the property */
      if(changemap["input-list"][counter][0] \&\& Get(changemap["input-list"][counter][0], changemap["input-list"][counter][1]) \&\& (changemap2 = Get(changemap["input-list"][counter][0], changemap["input-list"][counter][1])[input_words])) break;
    \}
  \}

  /* If we don't have valid input to modify the object */
  /* Output valid options, then exit */
  if(!changemap2)
  \{
    /* Check if we are allowed to continue, or if there is a stopvalue */
    if(changemap["stopvalue"]) \{
      /* We have a stopvalue. Check if we are allowed to continue */
      /* If this property exists in the object, then we need to stop, unless it matches the value */
      if(Get(NRefOb(\$target[0]), changemap["stopvalue"][0])) \{
        /* if stopvalue doesn't match the property, then we have no tailoring options*/
        if((sizeof(changemap["stopvalue"]) \> 1) \&\& (Get(NRefOb(\$target[0]), changemap["stopvalue"][0]) != changemap["stopvalue"][1])) \{
          /* Stopvalue doesn't match. Output error message */
          if(sizeof(changemap["stopvalue"]) \> 2) \{
            EmitTo(\$actor, changemap["stopvalue"][2]);
          \} else \{
            EmitTo(\$actor, Describe(\$target[0], nil, \$actor) + " already has a modification of that type.");
          \}
          return FALSE;
        \}
      \}
    \}

    /* Output valid options */
    valid_options = map_indices(changemap);
    if(changemap["input-list-actor"])
    \{
      for(counter = 0; counter \< sizeof(changemap["input-list-actor"]); counter++)
      \{
        if(Get(\$actor, changemap["input-list-actor"][counter]) \&\& map_indices(Get(\$actor, changemap["input-list-actor"][counter])))
        \{
          valid_options += map_indices(Get(\$actor, changemap["input-list-actor"][counter]));
        \}
      \}
    \}
    if(changemap["input-list"])
    \{
      for(counter = 0; counter \< sizeof(changemap["input-list"]); counter++)
      \{
        if(Get(changemap["input-list"][counter][0], changemap["input-list"][counter][1]) \&\& map_indices(Get(changemap["input-list"][counter][0], changemap["input-list"][counter][1])))
        \{
          valid_options += map_indices(Get(changemap["input-list"][counter][0], changemap["input-list"][counter][1]));
        \}
      \}
    \}

    /* Remove results that aren't options */
    valid_options -= blocklist;

    /* Put options in alphabetical order */
    valid_options = map_indices(arr_to_set(valid_options));

    tmp_string = "Valid options are: ";
    for(counter = 0; counter \< sizeof(valid_options); counter++)
    \{
      tmp_string += "\\"" + valid_options[counter] + "\\" ";
    \}
    EmitTo(\$actor, "That is not valid input to " + \$modification + " " + Describe(\$target[0], nil, \$actor));
    EmitTo(\$actor, tmp_string);
    return FALSE;
  \}
\}

/* We have valid input for this modification */

/* Check that this modification hasn't already been made */
if(changemap["stopvalue"]) \{
  /* We have a stopvalue. Check if we are allowed to continue */
  /* If this property exists in the object, then we need to stop, unless it matches the value */
  if(Get(NRefOb(\$target[0]), changemap["stopvalue"][0])) \{
    /* if stopvalue doesn't match the property, then exit with message*/
    if((sizeof(changemap["stopvalue"]) \> 1) \&\& (Get(NRefOb(\$target[0]), changemap["stopvalue"][0]) != changemap["stopvalue"][1])) \{
      /* Stopvalue doesn't match. Output error message */
      if(sizeof(changemap["stopvalue"]) \> 2) \{
        EmitTo(\$actor, changemap["stopvalue"][2]);
      \} else \{
        EmitTo(\$actor, Describe(\$target[0], nil, \$actor) + " already has a modification of that type.");
      \}
      return FALSE;
    \}
  \}
\}

/* Check if the actor is carrying any necessary tools */
if(\$tmp = changemap2["requiredtools"])
\{
  /*We require tools*/
  for(counter=1; counter\<sizeof(\$tmp); counter++)
  \{
    /*We need a tool*/
    \$found = nil;
    for(\$i = 0; (\$i \< sizeof(\$tmp[counter]))\&\&(!\$found); \$i++)
    \{
      /*We need a tool of type \$tmp[counter][\$i] */
      for(\$j = 0; (\$j \< sizeof(\$actor."base:inventory"))\&\&(!\$found); \$j++)
      \{
        if(\$actor."base:inventory"[\$j]."trait:objecttype" == \$tmp[counter][\$i])
        \{
          /*We found the tool!*/
          \$found = 1;
        \}
      \}
      /* We didn't find the tool in our inventory. Is the player "using" the tool? */
      if(!\$found \&\& \$using)
      \{
        for(\$j=0; (\$j \< sizeof(\$using))\&\&(!\$found); \$j++)
        \{
          if(NRefOb(\$using[\$j])."trait:objecttype" == \$tmp[counter][\$i])
          \{
            /*We found the tool!*/
            /* make sure someone else isn't holding it */
            if(NRefOb(\$using[\$j])."base:environment"."base:volition")
            \{
              EmitTo(\$actor, "You can't use a tool that's being held by someone else.");
              return FALSE;
            \} else \{
              \$found = 1;
            \}
          \}
        \}
      \}
    \}
    /* If we are missing a tool we need */
    if(!\$found)
    \{
      EmitTo(\$actor, "You can't "+\$modification+" "+Describe(\$target[0], nil, \$actor)+" without "+\$tmp[0]+".");
      return FALSE;
    \}
  \}
\}

/* -------------------------------------------------------------------------*/
/* -------------------------------------------------------------------------*/
/* -------------------------------------------------------------------------*/

/* Check if we should decrease the quantity of our original object */
if(changemap2["cost"]) \{
  \$cost = changemap2["cost"][0];
\} else if(changemap["cost"]) \{
  \$cost = changemap["cost"][0];
\}

if(\$cost == 0) \$cost = nil;

if(\$cost)
\{
  if(NRefOb(\$target[0])."trait:quantity" \&\& NRefOb(\$target[0])."trait:quantity" \> \$cost)
  \{
    NRefOb(\$target[0])."trait:quantity" -= \$cost;
    \$cost = nil;
  \}
\}


if(\$cost)
\{
  if(changemap2["cost"] \&\& (sizeof(changemap2["cost"]) \> 1)) \{
    \$message = changemap2["cost"][1];
  \} else if(changemap["cost"] \&\& (sizeof(changemap["cost"]) \> 1)) \{
    \$message = changemap["cost"][1];
  \} else \{
    \$message = "You haven't got enough remaining of "+Describe(\$target[0], nil, \$actor)+" to make this.";
  \}

  \$message = replace_strings(\$message, "ORIGINAL_OBJECT", Describe(\$target[0], nil, \$actor));
  EmitTo(\$actor, \$message);

  return FALSE;
\}

/* -------------------------------------------------------------------------*/
/* -------------------------------------------------------------------------*/
/* -------------------------------------------------------------------------*/

/* Check if this turns the object into a new object */
if(((changemap2["newobject"]) \&\& (new_object = Spawn(changemap2["newobject"]))) \|\| ((changemap["newobject"]) \&\& (new_object = Spawn(changemap["newobject"]))))
\{
  new_object."base:environment" = Get(NRefOb(\$target[0]), "base:environment");
/* If this is a new object, check what properties we should copy from the existing object */
  if(changemap["newobject-properties"]) \{
    /* loop through the properties, adding each one */
    for(counter = 0; counter \< sizeof(changemap["newobject-properties"]); counter++) \{
      Set(new_object, changemap["newobject-properties"][counter][1], Get(NRefOb(\$target[0]), changemap["newobject-properties"][counter][0]));
    \}
  \}
  /* And again for changemap 2 */
  if(changemap2["newobject-properties"]) \{
    /* loop through the properties, adding each one */
    for(counter = 0; counter \< sizeof(changemap2["newobject-properties"]); counter++) \{
      Set(new_object, changemap2["newobject-properties"][counter][1], Get(NRefOb(\$target[0]), changemap2["newobject-properties"][counter][0]));
    \}
  \}
\} else \{
  new_object = NRefOb(\$target[0]);
\}

/* Check if we need to copy new properties to the object */
if(changemap["properties"]) \{
  /* loop through the properties, adding each one */
  for(counter = 0; counter \< sizeof(changemap["properties"]); counter++) \{
    /* Do we have a value specified? */
    if(sizeof(changemap["properties"][counter]) \> 1)
    \{
      Set(new_object, changemap["properties"][counter][0], changemap["properties"][counter][1]);
    \} else \{
      /* Otherwise, use the modification description */
      if(changemap2["value"]) \{
        Set(new_object, changemap["properties"][counter][0], changemap2["value"]);
      \} else if(changemap2["brief"]) \{
        Set(new_object, changemap["properties"][counter][0], changemap2["brief"]);
      \}
    \}
  \}
\}
/* And again for changemap 2 */
if(changemap2["properties"]) \{
  /* loop through the properties, adding each one */
  for(counter = 0; counter \< sizeof(changemap2["properties"]); counter++) \{
    /* Do we have a value specified? */
    if(sizeof(changemap2["properties"][counter]) \> 1)
    \{
      Set(new_object, changemap2["properties"][counter][0], changemap2["properties"][counter][1]);
    \} else \{
      /* Otherwise, use the modification description */
      if(changemap2["value"]) \{
        Set(new_object, changemap2["properties"][counter][0], changemap2["value"]);
      \} else if(changemap2["brief"]) \{
        Set(new_object, changemap2["properties"][counter][0], changemap2["brief"]);
      \}
    \}
  \}
\}

/* Check if we should make a skill roll, to see if the quality changes */
if((tmp_string = changemap2["skill"]) \|\| (tmp_string = changemap["skill"]))
\{
  counter = Call(\$\{IronClaw:Lib:UrPeople:System\}, "roll", \$dicearray: (\{ \$actor."trait:mind", Get(\$actor, "skill:alteration:"+tmp_string), Get(\$actor, "career:alteration:"+tmp_string) \}) );
  if(!new_object."trait:quality") new_object."trait:quality" = 4;
  if(counter \> new_object."trait:quality") \{
    new_object."trait:quality"++;
  \} else if(counter \< new_object."trait:quality") \{
    new_object."trait:quality"--;
  \}
\}

/* Output an appropriate description of the action */

/* Generate the descriptions */
if((changemap["description"] \&\& sizeof(changemap["description"]) \> 1) \|\| (changemap2["description"] \&\& sizeof(changemap2["description"]) \> 1)) \{
  /* properties for the 1st person and 3rd person description */
  string description1;
  string description3;

  if(changemap2["description"] \&\& (sizeof(changemap2["description"]) \> 1)) \{
    description1 = changemap2["description"][0];
    description3 = Describe(\$actor) +" "+ changemap2["description"][1];
  \} else \{
    description1 = changemap["description"][0];
    description3 = Describe(\$actor) +" "+ changemap["description"][1];
  \}

  /* replace keywords */
  if(changemap2["brief"])
  \{
    description1 = replace_strings(description1, "BRIEF", changemap2["brief"]);
    description3 = replace_strings(description3, "BRIEF", changemap2["brief"]);
  \}
  description1 = replace_strings(description1, "ORIGINAL_OBJECT", Describe(\$target, nil, \$actor));
  description1 = replace_strings(description1, "NEW_OBJECT", Describe(new_object, nil, \$actor, STYLE_NONPOSS));
  description1 = replace_strings(description1, "PRONOUN", \$actor."base:pronoun");
  description1 = replace_strings(description1, "POSSESSIVE", \$actor."base:possessive");

  description3 = replace_strings(description3, "ORIGINAL_OBJECT", Describe(\$target, \$actor));
  description3 = replace_strings(description3, "NEW_OBJECT", Describe(new_object, \$actor, nil, STYLE_NONPOSS));
  description3 = replace_strings(description3, "PRONOUN", \$actor."base:pronoun");
  description3 = replace_strings(description3, "POSSESSIVE", \$actor."base:possessive");

  /* Check what the modification is, for the description */
  if(changemap2["modification"])
  \{
    description1 = replace_strings(description1, "MODIFICATION", changemap2["modification"]);
    description3 = replace_strings(description3, "MODIFICATION", changemap2["modification"]);
  \} else if(changemap["modification"]) \{
    description1 = replace_strings(description1, "MODIFICATION", changemap["modification"]);
    description3 = replace_strings(description3, "MODIFICATION", changemap["modification"]);
  \}

  /* Should add an evoke, if any, to the end of the description */
  if(\$evoke) \{
    description1 += ", " + \$evoke;
    description3 += ", " + \$evoke;
  \} else \{
    description1 += ".";
    description3 += ".";
  \}

  EmitTo(\$actor, description1);
  EmitIn(\$actor."base:environment", description3, \$actor);

  /* Slay the original object, if appropriate */
  if((changemap["newobject"] \|\| changemap2["newobject"]) \&\& (!(changemap["noslay"]) \|\| (changemap["noslay"] == "false")) \&\& (!(changemap2["noslay"]) \|\| (changemap2["noslay"] == "false")))
  \{
    Slay(NRefOb(\$target[0]));
  \}

  return FALSE;
\} else \{
  /* Slay the original object, if appropriate */
  if((changemap["newobject"] \|\| changemap2["newobject"]) \&\& (!(changemap["noslay"]) \|\| (changemap["noslay"] == "false")) \&\& (!(changemap2["noslay"]) \|\| (changemap2["noslay"] == "false")))
  \{
    Slay(NRefOb(\$target[0]));
  \}

  return TRUE;
\}
      </Core:Property>
      <Core:Property property="merry:lib:replaceadj">
         X[M] string * words;
int i;
\$actor = nil /* defunct */;
if(!\$object) return FALSE;
if(!\$detail) \$detail = "default";

/* remove plain as an adjective */
\$object."details:default:adjective:plain" = nil;

/* remove old adjective */
if(\$(hook-oldvalue)) \{
  words = explode(\$(hook-oldvalue), " ");
  for(i = 0; i \< sizeof(words); i++)
  \{
    Set(\$object, "details:"+\$detail+":adjective:" + words[i], nil);
  \}
\}
/* add new adjective */
if(!Get(\$object, \$(hook-property))) return TRUE;
words = explode(Get(\$object, \$(hook-property)), " ");
for(i = 0; i \< sizeof(words); i++)
\{
  Set(\$object, "details:"+\$detail+":adjective:" + words[i], 1);
\}
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:replacesname">
         X[M] string * words;
int i;

if(!\$object) return FALSE;

/* remove old adjective */
if(\$(hook-oldvalue)) \{
  words = explode(\$(hook-oldvalue), " ");
  for(i = 0; i \< sizeof(words); i++)
  \{
    Set(\$object, "details:default:sname:" + words[i], nil);
  \}
\}
/* add new adjective */
if(!\$(hook-property)) return TRUE;
if(!Get(\$object, \$(hook-property))) return TRUE;
words = explode(Get(\$object, \$(hook-property)), " ");
for(i = 0; i \< sizeof(words); i++)
\{
  Set(\$object, "details:default:sname:" + words[i], 1);
\}
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:valid-check">
         X[M] /*EmitTo(\$actor, "Args = " + dump_value(args));*/
/* Check if we were given a direct object to add to the indirect object */
/* Check if we were given a \$addition to add to the \$object */
if(!\$addition) \{
return TRUE;
\}

if(!\$object[0])
\{
  return FALSE;
\}

/* check we were only given one direct object */
if(sizeof(\$addition) \> 1) \{
  EmitTo(\$actor, "You can only add one object at a time");
  return FALSE;
\}

/* this check should also be in the object being added */
if(sizeof(\$object) \> 1) \{
  EmitTo(\$actor, "You can only add to one object at a time");
  return FALSE;
\}

/* Check if we are allowed to add the addition to the object */
/*EmitTo(\$actor, "Adding " + Describe(\$addition) + " to " + Describe(\$object));*/
if(!(Get(NRefOb(\$object[0]), "alteration:add:" + NRefDetail(\$object[0]) + ":" + Str(Get(NRefOb(\$addition[0]), "trait:objecttype")))))
\{
  EmitTo(\$actor, "You can't combine these objects");
  return FALSE;
\}

/* We can combine the objects */
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:add-iob">
         X[M] return Call(\$\{Allegory:Props:Crafting:UrCrafting\}, "add", \$addition: \$dob, \$target: \$iob);
      </Core:Property>
      <Core:Property property="merry:react-pre:add-iob">
         X[M] if(!\$dob) return TRUE;
return Call(\$\{Allegory:Props:Crafting:UrCrafting\}, "valid-check", \$addition: \$dob, \$object: \$iob);
      </Core:Property>
      <Core:Property property="misc:lastdropped">
         "1132429451 Bast[abiwan]"
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1102723921, "tonyd", "E", 1102723956, "tonyd", "E", 1102724019, "tonyd", "E", 1102724114, "tonyd", "E", 1102724202, "tonyd", "E", 1102725013, "tonyd", "E", 1102728100, "tonyd", "P", 1102728123, "tonyd", "P", 1102728154, "tonyd", "P", 1102728210, "tonyd", "P", 1102728259, "tonyd", "P", 1102728279, "tonyd", "P", 1102728295, "tonyd", "P", 1102728427, "tonyd", "P", 1102728449, "tonyd", "P", 1102728503, "tonyd", "P", 1102728574, "tonyd", "P", 1102728599, "tonyd", "P", 1102728693, "tonyd", "P", 1102728713, "tonyd", "P", 1102728733, "tonyd", "P", 1102728844, "tonyd", "P", 1102728955, "tonyd", "P", 1102729140, "tonyd", "P", 1102729190, "tonyd", "P", 1102729306, "tonyd", "P", 1102729382, "tonyd", "P", 1102729482, "tonyd", "P", 1102729693, "tonyd", "P", 1102729866, "tonyd", "P", 1102729928, "tonyd", "P", 1102729962, "tonyd", "P", 1102730111, "tonyd", "P", 1102730153, "tonyd", "P", 1102730181, "tonyd", "P", 1102730195, "tonyd", "P", 1102730210, "tonyd", "P", 1102730226, "tonyd", "P", 1102730239, "tonyd", "P", 1102730325, "tonyd", "P", 1102730844, "tonyd", "P", 1102730997, "tonyd", "P", 1102731039, "tonyd", "P", 1102732638, "tonyd", "P", 1102732679, "tonyd", "P", 1102732769, "tonyd", "P", 1102732793, "tonyd", "P", 1102733358, "tonyd", "P", 1102734535, "tonyd", "P", 1102734577, "tonyd", "P", 1102734643, "tonyd", "P", 1102734657, "tonyd", "P", 1102734690, "tonyd", "P", 1102734766, "tonyd", "P", 1102734990, "tonyd", "P", 1102736094, "tonyd", "P", 1102736294, "tonyd", "P", 1102736600, "tonyd", "P", 1102736813, "tonyd", "P", 1102749105, "tonyd", "P", 1102749135, "tonyd", "P", 1102749216, "tonyd", "P", 1102749236, "tonyd", "P", 1102749378, "tonyd", "P", 1102749417, "tonyd", "P", 1102750241, "tonyd", "P", 1102750270, "tonyd", "P", 1102818175, "tonyd", "P", 1102818210, "tonyd", "P", 1102818410, "tonyd", "P", 1102818441, "tonyd", "P", 1102818639, "tonyd", "P", 1102821075, "tonyd", "P", 1102821191, "tonyd", "P", 1102821348, "tonyd", "P", 1102821379, "tonyd", "P", 1102822592, "tonyd", "P", 1102822623, "tonyd", "P", 1102822782, "tonyd", "P", 1102822822, "tonyd", "P", 1102822888, "tonyd", "P", 1102823270, "tonyd", "P", 1102823326, "tonyd", "P", 1102823726, "tonyd", "P", 1102824737, "tonyd", "P", 1102824967, "tonyd", "P", 1102999822, "tonyd", "P", 1103000063, "tonyd", "P", 1103000226, "tonyd", "P", 1103000925, "tonyd", "P", 1103069819, "tonyd", "P", 1103069893, "tonyd", "P", 1103070001, "tonyd", "P", 1103070068, "tonyd", "P", 1103070114, "tonyd", "P", 1103070210, "tonyd", "P", 1103070278, "tonyd", "P", 1103070338, "tonyd", "P", 1103070556, "tonyd", "P", 1103070822, "tonyd", "P", 1103071366, "tonyd", "P", 1103071776, "tonyd", "P", 1103071910, "tonyd", "P", 1103072049, "tonyd", "P", 1103072453, "tonyd", "P", 1103072896, "tonyd", "P", 1103072956, "tonyd", "P", 1103078958, "tonyd", "P", 1103079085, "tonyd", "P", 1103079203, "tonyd", "P", 1103079229, "tonyd", "P", 1103079877, "tonyd", "P", 1103079956, "tonyd", "P", 1103080017, "tonyd", "P", 1103083541, "tonyd", "P", 1103083657, "tonyd", "P", 1103083785, "tonyd", "P", 1103083842, "tonyd", "P", 1103089473, "tonyd", "P", 1103089598, "tonyd", "P", 1103089828, "tonyd", "P", 1103090730, "tonyd", "P", 1103090776, "tonyd", "P", 1103091007, "tonyd", "P", 1103091074, "tonyd", "P", 1103091096, "tonyd", "P", 1103091181, "tonyd", "P", 1103091211, "tonyd", "P", 1103091264, "tonyd", "P", 1103091267, "tonyd", "P", 1103091285, "tonyd", "P", 1103091450, "tonyd", "P", 1103091674, "tonyd", "P", 1103091731, "tonyd", "P", 1103092053, "tonyd", "P", 1103092542, "tonyd", "P", 1103092579, "tonyd", "P", 1103092617, "tonyd", "P", 1103092690, "tonyd", "P", 1103092756, "tonyd", "P", 1103092782, "tonyd", "P", 1103092811, "tonyd", "P", 1103092829, "tonyd", "P", 1103092896, "tonyd", "P", 1103092928, "tonyd", "P", 1103093194, "tonyd", "P", 1103093239, "tonyd", "P", 1103093592, "tonyd", "P", 1103093869, "tonyd", "P", 1103094901, "tonyd", "P", 1103095101, "tonyd", "P", 1103095152, "tonyd", "P", 1103095185, "tonyd", "P", 1103095208, "tonyd", "P", 1103095271, "tonyd", "P", 1103095350, "tonyd", "P", 1103095389, "tonyd", "P", 1103095878, "tonyd", "P", 1103095899, "tonyd", "P", 1103097684, "tonyd", "P", 1103097741, "tonyd", "P", 1103254261, "tonyd", "P", 1103330981, "tonyd", "E", 1103331127, "tonyd", "E", 1103331540, "tonyd", "E", 1103332517, "tonyd", "E", 1103598369, "tonyd", "P", 1103598389, "tonyd", "P", 1103598553, "tonyd", "P", 1103598653, "tonyd", "P", 1103598739, "tonyd", "P", 1103598768, "tonyd", "P", 1103598987, "tonyd", "P", 1104015355, "tonyd", "P", 1104015539, "tonyd", "P", 1104015636, "tonyd", "P", 1104016199, "tonyd", "P", 1104016458, "tonyd", "P", 1104017774, "tonyd", "P", 1104018981, "tonyd", "P", 1104019534, "tonyd", "P", 1104019744, "tonyd", "P", 1104019794, "tonyd", "P", 1104019881, "tonyd", "P", 1104019892, "tonyd", "P", 1104105178, "tonyd", "P", 1104105210, "tonyd", "P", 1104105232, "tonyd", "P", 1104105247, "tonyd", "P", 1104105370, "tonyd", "P", 1104105440, "tonyd", "P", 1104105727, "tonyd", "P", 1104105746, "tonyd", "P", 1104105758, "tonyd", "P", 1104105769, "tonyd", "P", 1104105893, "tonyd", "P", 1104106090, "tonyd", "P", 1104106564, "tonyd", "P", 1104106592, "tonyd", "P", 1105072468, "tonyd", "E", 1106280978, "tonyd", "P", 1106283096, "tonyd", "P", 1106283244, "tonyd", "P", 1106292984, "tonyd", "P", 1106293208, "tonyd", "P", 1106457231, "tonyd", "P", 1106457322, "tonyd", "P", 1106457359, "tonyd", "P", 1106457715, "tonyd", "P", 1106457762, "tonyd", "P", 1106457810, "tonyd", "P", 1106458243, "tonyd", "P", 1106458313, "tonyd", "P", 1106458473, "tonyd", "P", 1106459303, "tonyd", "P", 1106459360, "tonyd", "P", 1106459683, "tonyd", "P", 1106459822, "tonyd", "E", 1106459952, "tonyd", "P", 1106460203, "tonyd", "P", 1106460242, "tonyd", "E", 1106460276, "tonyd", "E", 1106462106, "tonyd", "P", 1106462295, "tonyd", "P", 1106462400, "tonyd", "P", 1106462620, "tonyd", "P", 1106462685, "tonyd", "P", 1106462795, "tonyd", "P", 1106462904, "tonyd", "P", 1106463249, "tonyd", "P", 1106463322, "tonyd", "P", 1106463662, "tonyd", "P", 1106463786, "tonyd", "P", 1106463911, "tonyd", "P", 1106464078, "tonyd", "P", 1106464123, "tonyd", "P", 1106464383, "tonyd", "P", 1106464402, "tonyd", "P", 1106464428, "tonyd", "P", 1106464534, "tonyd", "P", 1106464707, "tonyd", "P", 1106464773, "tonyd", "P", 1106465329, "tonyd", "P", 1106465561, "tonyd", "P", 1106465586, "tonyd", "P", 1106465639, "tonyd", "P", 1106465680, "tonyd", "P", 1106465706, "tonyd", "P", 1106465725, "tonyd", "P", 1106465745, "tonyd", "P", 1106465934, "tonyd", "P", 1106466087, "tonyd", "P", 1106466494, "tonyd", "P", 1106466526, "tonyd", "P", 1106466627, "tonyd", "P", 1106466678, "tonyd", "P", 1106466702, "tonyd", "P", 1106466834, "tonyd", "P", 1106467965, "tonyd", "P", 1106469030, "tonyd", "P", 1106469352, "tonyd", "P", 1106469510, "tonyd", "P", 1106523885, "tonyd", "P", 1106523971, "tonyd", "P", 1106524006, "tonyd", "P", 1106524137, "tonyd", "P", 1106524429, "tonyd", "P", 1106525796, "tonyd", "P", 1106526413, "tonyd", "P", 1106526657, "tonyd", "P", 1106526701, "tonyd", "P", 1106526758, "tonyd", "P", 1106526993, "tonyd", "P", 1106527183, "tonyd", "P", 1106527247, "tonyd", "P", 1106527538, "tonyd", "P", 1106527801, "tonyd", "P", 1106527924, "tonyd", "P", 1106529456, "tonyd", "P", 1106530164, "tonyd", "P", 1106533000, "tonyd", "P", 1106533349, "tonyd", "P", 1106534596, "tonyd", "P", 1106534661, "tonyd", "P", 1106535633, "tonyd", "P", 1106535675, "tonyd", "P", 1106535748, "tonyd", "P", 1106536174, "tonyd", "P", 1106536462, "tonyd", "P", 1106536577, "tonyd", "P", 1106536672, "tonyd", "P", 1106536759, "tonyd", "P", 1106536843, "tonyd", "P", 1106537067, "tonyd", "P", 1106537269, "tonyd", "P", 1106537518, "tonyd", "P", 1106537729, "tonyd", "P", 1106539101, "tonyd", "P", 1106539174, "tonyd", "P", 1106539224, "tonyd", "P", 1106539347, "tonyd", "P", 1106539393, "tonyd", "P", 1106539492, "tonyd", "P", 1106539589, "tonyd", "P", 1106539944, "tonyd", "P", 1106540357, "tonyd", "P", 1106540387, "tonyd", "P", 1106540444, "tonyd", "P", 1106540507, "tonyd", "P", 1106540698, "tonyd", "P", 1106540907, "tonyd", "P", 1106541016, "tonyd", "P", 1106541124, "tonyd", "P", 1106541165, "tonyd", "P", 1106541233, "tonyd", "P", 1106541263, "tonyd", "P", 1106541295, "tonyd", "P", 1106955199, "tonyd", "P", 1106955232, "tonyd", "P", 1106955275, "tonyd", "P", 1106957563, "tonyd", "P", 1106957715, "tonyd", "P", 1106957893, "tonyd", "P", 1106957959, "tonyd", "P", 1106958037, "tonyd", "P", 1106958099, "tonyd", "P", 1106960155, "tonyd", "P", 1106960347, "tonyd", "P", 1106960449, "tonyd", "P", 1106960564, "tonyd", "P", 1106961086, "tonyd", "P", 1106961828, "tonyd", "P", 1106961940, "tonyd", "P", 1106962052, "tonyd", "P", 1106962114, "tonyd", "P", 1106962163, "tonyd", "P", 1106962224, "tonyd", "P", 1106962375, "tonyd", "P", 1106962417, "tonyd", "P", 1106965674, "tonyd", "P", 1106965837, "tonyd", "P", 1106969344, "tonyd", "P", 1106969969, "tonyd", "P", 1106970221, "tonyd", "P", 1106970382, "tonyd", "P", 1106975694, "tonyd", "P", 1106976836, "tonyd", "P", 1106980665, "tonyd", "P", 1106983600, "tonyd", "P", 1106983713, "tonyd", "P", 1106983747, "tonyd", "P", 1106983820, "tonyd", "P", 1106983936, "tonyd", "P", 1106984013, "tonyd", "P", 1106984186, "tonyd", "P", 1106984370, "tonyd", "P", 1106984428, "tonyd", "P", 1106984486, "tonyd", "P", 1106984512, "tonyd", "P", 1106984547, "tonyd", "P", 1106984644, "tonyd", "P", 1106984708, "tonyd", "P", 1106984735, "tonyd", "P", 1106984779, "tonyd", "P", 1106984798, "tonyd", "P", 1106984835, "tonyd", "P", 1106984904, "tonyd", "P", 1106984936, "tonyd", "P", 1106984963, "tonyd", "P", 1106985016, "tonyd", "P", 1107043011, "tonyd", "P", 1107043043, "tonyd", "P", 1107043701, "tonyd", "P", 1109149816, "tonyd", "P", 1109149933, "tonyd", "P", 1109149988, "tonyd", "P", 1109150024, "tonyd", "P", 1109150071, "tonyd", "P", 1109150175, "tonyd", "P", 1109150696, "tonyd", "P", 1109151170, "tonyd", "P", 1109151231, "tonyd", "P", 1109151258, "tonyd", "P", 1109151279, "tonyd", "P", 1109152154, "tonyd", "P", 1109152493, "tonyd", "P", 1109152601, "tonyd", "P", 1109152777, "tonyd", "P", 1109152896, "tonyd", "P", 1109153031, "tonyd", "P", 1109153105, "tonyd", "P", 1109153203, "tonyd", "P", 1109153571, "tonyd", "P", 1109153605, "tonyd", "P", 1109153632, "tonyd", "P", 1109153836, "tonyd", "P", 1109154008, "tonyd", "P", 1109154293, "tonyd", "P", 1109154711, "tonyd", "P", 1109157052, "tonyd", "P", 1109157118, "tonyd", "P", 1109157148, "tonyd", "P", 1109317077, "tonyd", "E", 1109317752, "tonyd", "E", 1109318003, "tonyd", "E", 1109318141, "tonyd", "E", 1109318148, "tonyd", "E", 1109370443, "tonyd", "E", 1116907785, "tonyd", "E", 1117940775, "tonyd", "E", 1118027511, "tonyd", "E", 1118027557, "tonyd", "E", 1118028781, "tonyd", "E", 1118031829, "tonyd", "P", 1118032054, "tonyd", "P", 1118033127, "tonyd", "P", 1118033419, "tonyd", "P", 1118033480, "tonyd", "P", 1118037315, "tonyd", "P", 1118037431, "tonyd", "P", 1118037511, "tonyd", "P", 1118043321, "tonyd", "P", 1118044004, "tonyd", "P", 1118044790, "tonyd", "P", 1118044869, "tonyd", "P", 1118044897, "tonyd", "P", 1118044965, "tonyd", "P", 1118044991, "tonyd", "P", 1118055612, "tonyd", "P", 1118057124, "tonyd", "P", 1118057277, "tonyd", "P", 1118057650, "tonyd", "P", 1118057966, "tonyd", "P", 1118058133, "tonyd", "P", 1118058431, "tonyd", "P", 1118058543, "tonyd", "P", 1118058658, "tonyd", "P", 1118058900, "tonyd", "P", 1118059312, "tonyd", "P", 1118059460, "tonyd", "P", 1118060279, "tonyd", "P", 1118060729, "tonyd", "P", 1118060782, "tonyd", "P", 1118060878, "tonyd", "P", 1118061086, "tonyd", "P", 1118061128, "tonyd", "P", 1118061273, "tonyd", "P", 1118061306, "tonyd", "P", 1118061888, "tonyd", "P", 1118382403, "tonyd", "E", 1119157953, "tonyd", "E", 1119228847, "tonyd", "E", 1119752386, "tonyd", "P", 1119752467, "tonyd", "P", 1119752504, "tonyd", "P", 1119752794, "tonyd", "P", 1119752961, "tonyd", "P", 1119753017, "tonyd", "P", 1119753048, "tonyd", "P", 1119753824, "tonyd", "P", 1119753868, "tonyd", "P", 1119754029, "tonyd", "P", 1119768306, "tonyd", "E", 1119768793, "tonyd", "E", 1119768862, "tonyd", "E", 1121821169, "tonyd", "E", 1123499220, "tonyd", "E", 1123499307, "tonyd", "P", 1123499358, "tonyd", "P", 1123499414, "tonyd", "P", 1123499449, "tonyd", "P", 1123499571, "tonyd", "P", 1123499679, "tonyd", "P", 1123499709, "tonyd", "P", 1124522779, "tonyd", "P", 1124873260, "tonyd", "P", 1124873312, "tonyd", "P", 1124877017, "tonyd", "P", 1124877345, "tonyd", "P", 1124883770, "tonyd", "P", 1124884021, "tonyd", "P", 1124884336, "tonyd", "P", 1124884716, "tonyd", "P", 1124887912, "tonyd", "P", 1124891368, "tonyd", "P", 1124891711, "tonyd", "P", 1124893456, "tonyd", "P", 1124893781, "tonyd", "P", 1124893870, "tonyd", "P", 1125064236, "tonyd", "P", 1125064587, "tonyd", "P", 1125064672, "tonyd", "P", 1125210455, "tonyd", "P", 1125210740, "tonyd", "P", 1125210847, "tonyd", "P", 1125211153, "tonyd", "P", 1125211245, "tonyd", "P", 1125211404, "tonyd", "P", 1125211438, "tonyd", "P", 1125211550, "tonyd", "P", 1125211599, "tonyd", "P", 1125211660, "tonyd", "P", 1125211830, "tonyd", "P", 1125211981, "tonyd", "P", 1125212030, "tonyd", "P", 1125212092, "tonyd", "P", 1125214679, "tonyd", "P", 1125214926, "tonyd", "P", 1125216765, "tonyd", "P", 1126066738, "tonyd", "E", 1126066946, "tonyd", "E", 1130050751, "tonyd", "P", 1130052026, "tonyd", "P", 1130052205, "tonyd", "P", 1130053851, "tonyd", "P", 1130054172, "tonyd", "P", 1130054398, "tonyd", "P", 1130054536, "tonyd", "P", 1130054690, "tonyd", "P", 1130054767, "tonyd", "P", 1130054941, "tonyd", "P", 1130055030, "tonyd", "P", 1130055050, "tonyd", "P", 1130717246, "tonyd", "P", 1130717872, "tonyd", "P", 1130720771, "tonyd", "P", 1131426363, "tonyd", "P", 1132362881, "abiwan", "K", 1132363689, "abiwan", "K", 1132429265, "abiwan", "E", 1132429284, "abiwan", "K", 1132429319, "abiwan", "E", 1138203772, "abiwan", "K", 1138204103, "abiwan", "E", 1144978402, "tonyd", "E", 1144978516, "tonyd", "E", 1144978549, "tonyd", "E", 1144978601, "tonyd", "E", 1144978648, "tonyd", "E", 1144978688, "tonyd", "E", 1144978795, "tonyd", "E", 1238776085, "slurpeeslurp", "K", 1307223855, "tunk_bodin", "R", 1308405922, "morwenlorelie", "K", 1571156941, "sendnoodlez", "R", 1588259310, "sendnoodlez", "E", 1588259775, "sendnoodlez", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
