<object clone="/base/obj/thing" owner="tunk_bodin">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="140" density="2.5"/>
    <Base:Container flexible="false" transparent-container="false" public-container="true" tight="true" capacity="1" maxweight="10"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="standing" combinable="false" discrete="false" by_weight="false" tight="true" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="true"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="false" inside="false" near="true" over="false" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="fountain"/>
            <Base:SName sname="fount"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="fountains"/>
            <Base:PName pname="founts"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="cherub"/>
          <Base:Adjective adjective="marble"/>
          <Base:Adjective adjective="small"/>
          <Base:Adjective adjective="spraying"/>
          <Base:Adjective adjective="stone"/>
          <Base:Adjective adjective="wet"/>
          <Base:Adjective adjective="white"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             marble fountain with a cherub statue
          </Base:Description>
          <Base:Description type="examine">
             The small white marble fountain stands firmly in the center of the bathhouse's lobby. The center of this fountain holds a small winged cherub atop three descending tiers. Water flows from his pursed mouth into the top basin and from there it slips fluidly onto each tier until it reaches the lowest basin. A short wall surrounds the lowest pool of water.
          </Base:Description>
          <Base:Description type="look">
             The small white marble fountain stands firmly in the center of the bathhouse's lobby. The center of this fountain holds a small winged cherub atop three descending tiers.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="true" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="basin-lower" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="false" inside="true" near="true" over="false" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="basin"/>
            <Base:SName sname="holder"/>
            <Base:SName sname="bowl"/>
            <Base:SName sname="tier"/>
            <Base:SName sname="pool"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="basins"/>
            <Base:PName pname="holders"/>
            <Base:PName pname="bowls"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="bottom"/>
          <Base:Adjective adjective="lower"/>
          <Base:Adjective adjective="simple"/>
          <Base:Adjective adjective="stone"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the lower basin of the fountain
          </Base:Description>
          <Base:Description type="examine">
             The lower basin of the fountain is filled to the brim with water and is surrounded by the short marble wall that creates it.
          </Base:Description>
          <Base:Description type="look">
             The lower basin of the fountain is filled to the brim with water and is surrounded by the short marble wall that creates it.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="basin-middle" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="false" inside="false" near="true" over="false" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="basin"/>
            <Base:SName sname="holder"/>
            <Base:SName sname="bowl"/>
            <Base:SName sname="tier"/>
            <Base:SName sname="pool"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="basins"/>
            <Base:PName pname="holders"/>
            <Base:PName pname="bowls"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="center"/>
          <Base:Adjective adjective="central"/>
          <Base:Adjective adjective="mid"/>
          <Base:Adjective adjective="middle"/>
          <Base:Adjective adjective="simple"/>
          <Base:Adjective adjective="stone"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the middle basin of the fountain
          </Base:Description>
          <Base:Description type="examine">
             The middle basin of the fountain is filled to the brim with water and overflows fluidly into the lowest basin.
          </Base:Description>
          <Base:Description type="look">
             The middle basin of the fountain is filled to the brim with water and overflows fluidly into the lowest basin.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="basin-upper" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="false" inside="false" near="true" over="false" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="basin"/>
            <Base:SName sname="holder"/>
            <Base:SName sname="bowl"/>
            <Base:SName sname="tier"/>
            <Base:SName sname="pool"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="basins"/>
            <Base:PName pname="holders"/>
            <Base:PName pname="bowls"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="higher"/>
          <Base:Adjective adjective="highest"/>
          <Base:Adjective adjective="simple"/>
          <Base:Adjective adjective="stone"/>
          <Base:Adjective adjective="top"/>
          <Base:Adjective adjective="upper"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the upper basin of the fountain
          </Base:Description>
          <Base:Description type="examine">
             The upper basin of the fountain is filled to the brim with water and overflows fluidly into the middle basin. It is within this small pool that the cherub stands.
          </Base:Description>
          <Base:Description type="look">
             The upper basin of the fountain is filled to the brim with water and overflows fluidly into the middle basin.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="statue" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="false" inside="false" near="true" over="false" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="sculpture"/>
            <Base:SName sname="statue"/>
            <Base:SName sname="cherub"/>
            <Base:SName sname="carving"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="carvings"/>
            <Base:PName pname="statues"/>
            <Base:PName pname="sculptures"/>
            <Base:PName pname="cherubs"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="carved"/>
          <Base:Adjective adjective="marble"/>
          <Base:Adjective adjective="small"/>
          <Base:Adjective adjective="white"/>
          <Base:Adjective adjective="winged"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="adjectives">
             small
          </Base:Description>
          <Base:Description type="brief">
             small marble cherub
          </Base:Description>
          <Base:Description type="examine">
             A small, white marble cherub statue stands atop the central fountain and sprays water from his pursed mouth. His wings are spread as if just alighting upon this perch. His clad in a flowing white cloth that barely covers the appropriate parts of his anatomy.
          </Base:Description>
          <Base:Description type="look">
             A small, white marble cherub statue stands atop the central fountain and sprays water from his pursed mouth.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="stone" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="stone"/>
            <Base:SName sname="rock"/>
            <Base:SName sname="marble"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="stones"/>
            <Base:PName pname="rocks"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="carved"/>
          <Base:Adjective adjective="white"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the white marble of a fountain
          </Base:Description>
          <Base:Description type="examine">
             The white marble of the fountain is carved professionally and appears almost seamless.
          </Base:Description>
          <Base:Description type="look">
             The white marble of the fountain is carved professionally and appears almost seamless.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="wall" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="true" inside="false" near="true" over="true" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="wall"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="walls"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="low"/>
          <Base:Adjective adjective="marble"/>
          <Base:Adjective adjective="short"/>
          <Base:Adjective adjective="stone"/>
          <Base:Adjective adjective="white"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the short wall surrounding the fountain
          </Base:Description>
          <Base:Description type="examine">
             The short white marble wall that encompasses the fountain and is the barrier for the lowest basin of water.
          </Base:Description>
          <Base:Description type="look">
             The short white marble wall that encompasses the fountain and is the barrier for the lowest basin of water.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="water" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="false" under="true" on="false" inside="true" near="true" over="false" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="water"/>
            <Base:SName sname="liquid"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="liquids"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="flowing"/>
          <Base:Adjective adjective="fluid"/>
          <Base:Adjective adjective="splashing"/>
          <Base:Adjective adjective="wet"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the water in the fountain
          </Base:Description>
          <Base:Description type="examine">
             The water in the fountain begins its descent from the pursed mouth of a marble cherub and flows easily into each descending tier until it arrives at its final destination in the lowest pool.
          </Base:Description>
          <Base:Description type="look">
             The water in the fountain begins its descent from the pursed mouth of a marble cherub and flows easily into each descending tier until it arrives at its final destination in the lowest pool.
          </Base:Description>
          <Base:Description type="react-post:sense/smell-dob">
             The light scent of sulfur.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="merry:react-pre:cast-where">
         X[M] if(\$what \&\& (sizeof(\$what) == 1) \&\& (NRefOb(\$what[0])."cash:value"))                                          
\{                               
\$coin = NRefOb(\$what[0]);                            
if(\$evoke) \{                                                  
chat::send_msg(\$message: \$evoke, \$line: "wish", \$actor: \$actor);                   
                     
EmitTo( \$actor, "You feel your wish may have been heard as you watch the coin sparkle during its descent into the fountain." );                                   
EmitIn( \$actor."base:environment", Describe(\$actor)+ " casts a coin into the fountain.", \$actor );                
\} else \{                                     
    EmitTo(\$actor, "Next time, speak your wish aloud -as- you cast the coin in the fountain.");                                     
\}                                                 
Slay(\$coin);                                     
  return FALSE;               
\} else if(\$what \&\& (sizeof(\$what) \> 1)) \{           
EmitTo(\$actor, "The power of wishes are tied to a single coin at a time, however the fountain will gladly swallow your coins. Some lessons are learned through loss.");           
while(\$what \&\& (sizeof(\$what) \> 0))          
\{          
\$coin = NRefOb(\$what[0]);        
Slay(\$coin);          
\}          
return FALSE;           
\} else \{                                         
return TRUE;                                           
\}                                           
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:chuck-where">
         X[M] if(\$what \&\& (sizeof(\$what) == 1) \&\& (NRefOb(\$what[0])."cash:value"))                                          
\{                               
\$coin = NRefOb(\$what[0]);                            
if(\$evoke) \{                                                  
chat::send_msg(\$message: \$evoke, \$line: "wish", \$actor: \$actor);                   
                     
EmitTo( \$actor, "You feel your wish may have been heard as you watch the coin sparkle during its descent into the fountain." );                                   
EmitIn( \$actor."base:environment", Describe(\$actor)+ " chucks a coin into the fountain.", \$actor );                
\} else \{                                     
    EmitTo(\$actor, "Next time, speak your wish aloud -as- you chuck the coin in the fountain.");                                     
\}                                                 
Slay(\$coin);                                     
  return FALSE;                                          
\} else \{                                         
return TRUE;                                           
\}                                           
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:drink-what">
         X[M] if(NRefDetail(\$what[0]) == "water") \{         
EmitTo(\$actor, "You drink from " +Describe(\$what[0])+ " and it is delicious, refreshing and carries a sulfuric aftertaste.");         
EmitIn(\$actor."base:environment", Describe(\$actor)+ " drinks " +Describe(\$what[0])+ ".", \$actor);         
return FALSE;         
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:drop-where">
         X[M] if(\$what \&\& (sizeof(\$what) == 1) \&\& (NRefOb(\$what[0])."cash:value"))                                          
\{                               
\$coin = NRefOb(\$what[0]);                            
if(\$evoke) \{                                                  
chat::send_msg(\$message: \$evoke, \$line: "wish", \$actor: \$actor);                   
                     
EmitTo( \$actor, "You feel your wish may have been heard as you watch the coin sparkle during its descent into the fountain." );                                   
EmitIn( \$actor."base:environment", Describe(\$actor)+ " drops a coin into the fountain.", \$actor );                
\} else \{                                     
    EmitTo(\$actor, "Next time, speak your wish aloud -as- you drop the coin in the fountain.");                                     
\}                                                 
Slay(\$coin);                                     
  return FALSE;                                          
\} else \{                                         
return TRUE;                                           
\}                                           
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:fling-where">
         X[M] if(\$what \&\& (sizeof(\$what) == 1) \&\& (NRefOb(\$what[0])."cash:value"))                                         
\{                              
\$coin = NRefOb(\$what[0]);                           
if(\$evoke) \{                                                 
chat::send_msg(\$message: \$evoke, \$line: "wish", \$actor: \$actor);                  
                    
EmitTo( \$actor, "You feel your wish may have been heard as you watch the coin sparkle during its descent into the fountain." );                                  
EmitIn( \$actor."base:environment", Describe(\$actor)+ " flings a coin into the fountain.", \$actor );               
\} else \{                                    
    EmitTo(\$actor, "Next time, speak your wish aloud -as- you fling the coin in the fountain.");                                    
\}                                                
Slay(\$coin);                                    
  return FALSE;                                         
\} else \{                                        
return TRUE;                                          
\}                                          
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:gulp-iob">
         X[M] if(NRefDetail(\$iob[0]) == "water") \{         
EmitTo(\$actor, "You gulp loudly from " +Describe(\$iob[0])+ " and it is delicious, refreshing and carries a sulfuric aftertaste.");         
EmitIn(\$actor."base:environment", Describe(\$actor)+ " gulps " +Describe(\$iob[0])+ " loudly.", \$actor);         
return FALSE;         
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:guzzle-iob">
         X[M] if(NRefDetail(\$iob[0]) == "water") \{         
EmitTo(\$actor, "You guzzle from " +Describe(\$iob[0])+ " and it is delicious, refreshing and carries a sulfuric aftertaste.");         
EmitIn(\$actor."base:environment", Describe(\$actor)+ " guzzles " +Describe(\$iob[0])+ " loudly.", \$actor);         
return FALSE;         
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:lap-iob">
         X[M] if(NRefDetail(\$iob[0]) == "water") \{         
EmitTo(\$actor, "You lap from " +Describe(\$iob[0])+ " and it is delicious, refreshing and carries a sulfuric aftertaste.");         
EmitIn(\$actor."base:environment", Describe(\$actor)+ " laps " +Describe(\$iob[0])+ ".", \$actor);         
return FALSE;         
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:lick-dob">
         X[M] if(NRefDetail(\$dob[0]) == "water") \{         
EmitTo(\$actor, "You lick " +Describe(\$dob[0])+ " and it is delicious, refreshing and carries a sulfuric aftertaste.");         
EmitIn(\$actor."base:environment", Describe(\$actor)+ " licks " +Describe(\$dob[0])+ ".", \$actor);         
return FALSE;         
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:pitch-where">
         X[M] if(\$what \&\& (sizeof(\$what) == 1) \&\& (NRefOb(\$what[0])."cash:value"))                                          
\{                               
\$coin = NRefOb(\$what[0]);                            
if(\$evoke) \{                                                  
chat::send_msg(\$message: \$evoke, \$line: "wish", \$actor: \$actor);                   
                     
EmitTo( \$actor, "You feel your wish may have been heard as you watch the coin sparkle during its descent into the fountain." );                                   
EmitIn( \$actor."base:environment", Describe(\$actor)+ " pitches a coin into the fountain.", \$actor );                
\} else \{                                     
    EmitTo(\$actor, "Next time, speak your wish aloud -as- you pitch the coin in the fountain.");                                     
\}                                                 
Slay(\$coin);                                     
  return FALSE;                                          
\} else \{                                         
return TRUE;                                           
\}                                           
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:quaff-iob">
         X[M] if(NRefDetail(\$iob[0]) == "water") \{         
EmitTo(\$actor, "You quaff sloppily from " +Describe(\$iob[0])+ " and it is delicious, refreshing and carries a sulfuric aftertaste.");         
EmitIn(\$actor."base:environment", Describe(\$actor)+ " quaffs " +Describe(\$iob[0])+ " sloppily.", \$actor);         
return FALSE;         
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:savor-dob">
         X[M] if(NRefDetail(\$dob[0]) == "water") \{         
EmitTo(\$actor, "You savor " +Describe(\$dob[0])+ " and it is delicious, refreshing and carries a sulfuric aftertaste.");         
EmitIn(\$actor."base:environment", Describe(\$actor)+ " savors " +Describe(\$dob[0])+ ".", \$actor);         
return FALSE;         
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:savour-dob">
         X[M] if(NRefDetail(\$dob[0]) == "water") \{         
EmitTo(\$actor, "You savour " +Describe(\$dob[0])+ " and it is delicious, refreshing and carries a sulfuric aftertaste.");         
EmitIn(\$actor."base:environment", Describe(\$actor)+ " savours " +Describe(\$dob[0])+ ".", \$actor);         
return FALSE;         
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:sip-iob">
         X[M] if(NRefDetail(\$iob[0]) == "water") \{         
EmitTo(\$actor, "You sip from " +Describe(\$iob[0])+ " and it is delicious, refreshing and carries a sulfuric aftertaste.");         
EmitIn(\$actor."base:environment", Describe(\$actor)+ " sips " +Describe(\$iob[0])+ ".", \$actor);         
return FALSE;         
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:slurp-iob">
         X[M] if(NRefDetail(\$iob[0]) == "water") \{         
EmitTo(\$actor, "You slurp from " +Describe(\$iob[0])+ " and it is delicious, refreshing and carries a sulfuric aftertaste.");         
EmitIn(\$actor."base:environment", Describe(\$actor)+ " slurps " +Describe(\$iob[0])+ ".", \$actor);         
return FALSE;         
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:swallow-dob">
         X[M] if(NRefDetail(\$dob[0]) == "water") \{         
EmitTo(\$actor, "You swallow " +Describe(\$dob[0])+ ", making you cough and sputter yet leaves a sulfuric aftertaste.");         
EmitIn(\$actor."base:environment", Describe(\$actor)+ " swallows " +Describe(\$dob[0])+ " before coughing and sputtering.", \$actor);         
return FALSE;         
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:swill-iob">
         X[M] if(NRefDetail(\$iob[0]) == "water") \{         
EmitTo(\$actor, "You swill " +Describe(\$iob[0])+ " and it is delicious, refreshing and carries a sulfuric aftertaste.");         
EmitIn(\$actor."base:environment", Describe(\$actor)+ " swills " +Describe(\$iob[0])+ ".", \$actor);         
return FALSE;         
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:taste-dob">
         X[M] if(NRefDetail(\$dob[0]) == "water") \{         
EmitTo(\$actor, "You taste " +Describe(\$dob[0])+ " and it is delicious, refreshing and carries a sulfuric aftertaste.");         
EmitIn(\$actor."base:environment", Describe(\$actor)+ " tastes " +Describe(\$dob[0])+ ".", \$actor);         
return FALSE;         
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:throw-where">
         X[M] if(\$what \&\& (sizeof(\$what) == 1) \&\& (NRefOb(\$what[0])."cash:value"))                                          
\{                               
\$coin = NRefOb(\$what[0]);                            
if(\$evoke) \{                                                  
chat::send_msg(\$message: \$evoke, \$line: "wish", \$actor: \$actor);                   
                     
EmitTo( \$actor, "You feel your wish may have been heard as you watch the coin sparkle during its descent into the fountain." );                                   
EmitIn( \$actor."base:environment", Describe(\$actor)+ " throws a coin into the fountain.", \$actor );                
\} else \{                                     
    EmitTo(\$actor, "Next time, speak your wish aloud -as- you throw the coin in the fountain.");                                     
\}                                                 
Slay(\$coin);                                     
  return FALSE;                                          
\} else \{                                         
return TRUE;                                           
\}                                           
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:toss-where">
         X[M] if(\$what \&\& (sizeof(\$what) == 1) \&\& (NRefOb(\$what[0])."cash:value"))                                          
\{                               
\$coin = NRefOb(\$what[0]);                            
if(\$evoke) \{                                                  
chat::send_msg(\$message: \$evoke, \$line: "wish", \$actor: \$actor);                   
                     
EmitTo( \$actor, "You feel your wish may have been heard as you watch the coin sparkle during its descent into the fountain." );                                   
EmitIn( \$actor."base:environment", Describe(\$actor)+ " tosses a coin into the fountain.", \$actor );                
\} else \{                                     
    EmitTo(\$actor, "Next time, speak your wish aloud -as- you toss the coin in the fountain.");                                     
\}                                                 
Slay(\$coin);                                     
  return FALSE;                                          
\} else \{                                         
return TRUE;                                           
\}                                           
return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1167181560, "tunk_bodin", "X", 1167181941, "tunk_bodin", "X", 1168673637, "tunk_bodin", "X", 1168675843, "tunk_bodin", "X", 1171936532, "tunk_bodin", "E", 1171936560, "tunk_bodin", "E", 1307402429, "tunk_bodin", "R", 1569521175, "sendnoodlez", "R", 1569521487, "sendnoodlez", "X", 1569799656, "sendnoodlez", "R" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
