<object clone="/base/obj/thing" owner="sinistrelle">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="0.2" density="0.1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="true" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="false" under="false" on="true" inside="false" near="true" over="true" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="basket"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="baskets"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="woven"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             trembling basket
          </Base:Description>
          <Base:Description type="examine">
             A tightly woven lidded basket made of dried rushes. The lid is set slightly off revealing something shiny within it. As you take a closer look inside the basket you notice a small black snake with glowing amber eyes which appears to be heavily agitated. Several shiny tokens can be spotted at the bottom of the basket.
          </Base:Description>
          <Base:Description type="look">
             An average sized lidded basket made of woven dry rushes which appears to be trembling.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="snake" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="false" under="false" on="true" inside="false" near="true" over="true" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="snake"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="snakes"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="black"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             small black snake
          </Base:Description>
          <Base:Description type="examine">
             A small black snake roughly two feet long coiled loosely within a woven basket. Haunting amber eyes stare back at you from above a slightly tapered head.
          </Base:Description>
          <Base:Description type="look">
             A small black snake laying within a tightly woven basket with glowing amber eyes.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="merry:lib:actor_poisoned">
         X[M] /* give the actor the effects of being poisoned */
\$actor.snakepoison = time();
while(\$actor.snakepoison \&\& \$actor.snakepoison+600 \> time()) \{
  \$delay(random(120), TRUE, "33db");
  switch(random(8)) \{
    case 8:
      Social(\$actor, "collapse");
      break;
    case 7:
      Social(\$actor, "stagger", "weakly");
      break;
    case 6:
      Social(\$actor, "stagger");
      break;
    case 5:
      Social(\$actor, "sweat", "profusely");
      break;
    case 4:
      Social(\$actor, "sweat");
      break;
    case 3:
      Social(\$actor, "faint");
      break;
    case 2:
      Social(\$actor, "vomit", nil, nil, "in", \$actor."base:environment");
      break;
    case 1:
      Social(\$actor, "shiver", "violently");
      break;
    default:
      Social(\$actor, "shiver");
      break;
  \}
\}


EmitTo(\$actor, "You no longer feel the effects of the snake's poison.");
\$actor.snakepoison = nil;
      </Core:Property>
      <Core:Property property="merry:lib:expired_play">
         X[M] /* player didn't answer in time */  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:give_bite">
         X[M] /* give the side effects of the actor being bitten */  
  
/* give a bite */  
Call(\$\{IronClaw:Lib:Combat:Lib-old\}, "add-wound", \$target: NewNRef(\$actor, "right-hand"), \$singular: "bite", \$adj: "snake", \$detail_adj: "bitten", \$value: 2);  
  
/* set them as poisoned */  
Call(\$this, "actor_poisoned");  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:no_play">
         X[M] /* decided not to play */  
EmitTo(\$actor, "You decide to preserve your health, and not try to grab the snake.");  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:play_game">
         X[M] object CDO; 
 
/* disabled until we update the injuries to use new injury code */ 
EmitTo(\$actor, "The assistant tells you that at this time of year the snake is hibernating, so you can't play the game."); 
return FALSE; 
 
 
/* check if they are already poisoned */ 
if(\$actor.snakepoison) \{ 
  EmitTo(\$actor, "The assistant tells you that you need to wait for the poison to wear off before playing again. Give it ten minutes or so."); 
  return FALSE; 
\} 
/* charge cost to play */ 
CDO = \$\{Ironclaw:Data:Trading:Money\}; 
/* Grab global properties from CDO. */ 
if( !CDO ) 
\{ 
  EmitTo( \$actor, "Oops! No CDO. This is a bug. :(" ); 
  return FALSE; 
\} 
\$hide_decimals = CDO."cash:hide-decimals"; 
if( !Call( \$\{Ironclaw:Lib:Economy:TradingTables\}, "core_trading_deduct", \$CDO: CDO, \$query: 100, \$item: \$this, \$sales_assistant: "the snake handler" )) 
\{ 
  return FALSE; 
\} 
 
/* skill tester code */ 
EmitTo(\$actor, "You stick your hand into the snake's basket."); 
EmitIn(\$actor."base:environment", Describe(\$actor)+" sticks "+\$actor."base:possessive"+" hand into the snake's basket.", \$actor); 
\$delay(random(10)+5, TRUE, "8e7d"); 
\$skill = Call(\$\{IronClaw:Lib:UrPeople:System\}, "roll", \$dicearray: (\{ \$actor."trait:speed" \})); 
\$skill += random(5); 
switch(\$skill) \{ 
  case 1: 
    EmitTo(\$actor, "The snake curls into the corner, far away from your feebly groping hand. Better luck next time."); 
    EmitIn(\$actor."base:environment", "The snake curls into the corner, far away from "+Describe(\$actor)+"'s feebly groping hand.", \$actor); 
    break; 
  case 2: 
    EmitTo(\$actor, "As your fingers brush the snake, it bites the back of your hand."); 
    EmitIn(\$actor."base:environment", "As "+Describe(\$actor)+" sticks "+\$actor."base:possessive"+" hand in the basket, the snake bites it.", \$actor); 
    break; 
  case 3: 
    EmitTo(\$actor, "In a whipping frenzy, the snake repeatedly lays its fangs into your hand."); 
    EmitIn(\$actor."base:environment", "In a whipping frenzy, the snake repeatedly lays its fangs into "+Describe(\$actor)+"'s hand.", \$actor); 
    Call(\$this, "give_bite"); 
    break; 
  case 4: 
    EmitTo(\$actor, "You feel an intense pain, and pull your hand back quickly."); 
    EmitIn(\$actor."base:environment", Describe(\$actor)+" yelps and pulls "+\$actor."base:possessive"+" hand quickly out of the basket.", \$actor); 
    Call(\$this, "give_bite"); 
    break; 
  case 5: 
EmitTo(\$actor, "The snake hisses threateningly at you."); 
    EmitIn(\$actor."base:environment", "The snake hisses threateningly at "+Describe(\$actor)+".", \$actor); 
    break; 
  case 6: 
    EmitTo(\$actor, "You grab the snake for a moment, before it twists free."); 
    EmitIn(\$actor."base:environment", Describe(\$actor)+" grabs the snake for a moment, before it twists free.", \$actor); 
    break; 
  default: 
    EmitTo(\$actor, "You quickly snatch the snake, catching it right behind its head."); 
    EmitIn(\$actor."base:environment", Describe(\$actor)+" quickly snatches the snake, catching it right behind its head.", \$actor); 
    /* give a prize */ 
    \$prize = Spawn(\$\{Ironclaw:Props:Clothing:Misc:ClothDoll\}); 
    \$prize."trait:type" = "snake"; 
    \$prize."trait:color" = "none"; 
Set(\$prize, "details:feet:hidden", 1); 
Set(\$prize, "details:arms:hidden", 1); 
Set(\$prize, "details:hair:hidden", 1); 
Set(\$prize, "details:hands:hidden", 1); 
Set(\$prize, "details:left-hand:hidden", 1); 
Set(\$prize, "details:left-arm:hidden", 1); 
Set(\$prize, "details:left-leg:hidden", 1); 
Set(\$prize, "details:left-foot:hidden", 1); 
Set(\$prize, "details:legs:hidden", 1); 
Set(\$prize, "details:right-arm:hidden", 1); 
Set(\$prize, "details:right-leg:hidden", 1); 
Set(\$prize, "details:right-hand:hidden", 1); 
Set(\$prize, "details:right-foot:hidden", 1); 
    \$prize."trait:material" = "none"; 
    \$prize."trait:extradesc" = "This doll has a flexible wire running through it, so it can be twisted into a bracelet and worn."; 
    /* make doll wearable */ 
    \$prize."base:parts-covered" = (\{ "wrist-right" \}); 
    EmitTo(\$actor, "The assistant contgratulates you, and hands you "+Describe(\$prize)+"."); 
    EmitIn(\$actor."base:environment", "The assistant contgratulates "+Describe(\$actor)+", and hands "+\$actor."base:objective"+" "+Describe(\$prize)+".", \$actor); 
    \$prize."base:environment" = \$actor; 
\} 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:grab-dob">
         X[M] /*  
  
  D=Ask if actor wants to play game.  
  
*/  
  
/* ask if the player wants to play this */  
interaction::question(\$question: "The assistant shakes the basket at you, \\"There's a black snake in here. If you can grab it without getting bitten, I'll give you a prize. Only one denar, what do you say?\\"", \$expires: 80, \$env: "TRUE", \$yes_ob: \$this, \$no_ob: \$this, \$expire_ob: \$this, \$yes_fun: "play_game", \$no_fun: "no_play", \$expire_fun: "expired_play");  
  
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:play-dob">
         X[M] /*  
  
  D=Ask if actor wants to play game.  
  
*/  
  
/* ask if the player wants to play this */  
interaction::question(\$question: "The assistant shakes the basket at you, \\"There's a black snake in here. If you can grab it without getting bitten, I'll give you a prize. Only one denar, what do you say?\\"", \$expires: 80, \$env: "TRUE", \$yes_ob: \$this, \$no_ob: \$this, \$expire_ob: \$this, \$yes_fun: "play_game", \$no_fun: "no_play", \$expire_fun: "expired_play");  
  
return FALSE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1145058270, "tonyd", "E", 1145058412, "tonyd", "P", 1145058453, "tonyd", "P", 1145058833, "tonyd", "P", 1145058871, "tonyd", "P", 1145059014, "tonyd", "P", 1145059033, "tonyd", "P", 1145059140, "tonyd", "P", 1145059567, "tonyd", "P", 1145059700, "tonyd", "P", 1145059803, "tonyd", "P", 1145060501, "tonyd", "P", 1145060583, "tonyd", "P", 1145060644, "tonyd", "P", 1145060701, "tonyd", "P", 1145060781, "tonyd", "P", 1145060834, "tonyd", "P", 1145060885, "tonyd", "P", 1145061541, "tonyd", "P", 1145230455, "tonyd", "P", 1145231998, "tonyd", "P", 1145232135, "tonyd", "P", 1145232255, "tonyd", "P", 1145232345, "tunk_bodin", "X", 1145232350, "tonyd", "P", 1145232367, "tonyd", "P", 1145232415, "tunk_bodin", "X", 1145232484, "tonyd", "P", 1145232639, "tonyd", "P", 1145232790, "tonyd", "P", 1145233871, "tonyd", "P", 1145233940, "tonyd", "P", 1145234087, "tonyd", "P", 1145234614, "tonyd", "P", 1151729793, "tonyd", "P", 1151729850, "tonyd", "P", 1151736868, "tonyd", "P", 1178161949, "necate", "E", 1178162250, "necate", "P", 1187151405, "tonyd", "P", 1227852031, "rastalabor", "X", 1237848173, "morwenlorelie", "R", 1519184196, "ezralee", "R", 1569787065, "sendnoodlez", "R", 1569799846, "sendnoodlez", "R" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
