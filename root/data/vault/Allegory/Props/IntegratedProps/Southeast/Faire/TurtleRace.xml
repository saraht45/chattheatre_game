<object clone="/base/obj/thing" owner="tunk_bodin">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="0.2" density="0.1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="true" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="false" under="false" on="true" inside="false" near="true" over="true" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="track"/>
            <Base:SName sname="racetrack"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="tracks"/>
            <Base:PName pname="racetracks"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="oval"/>
          <Base:Adjective adjective="race"/>
          <Base:Adjective adjective="turtle"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             miniature oval race track
          </Base:Description>
          <Base:Description type="examine">
             A miniature oval race track upon which four turtles rest just behind a crudely drawn white line of chalk. Each turtle has a chalky number on its back from one to four. [OOC: play track]
          </Base:Description>
          <Base:Description type="look">
             A miniature oval race track upon which four turtles rest just behind a white line.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="turtle" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="false" under="false" on="true" inside="false" near="true" over="true" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="turtle"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="turtle"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="green"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             small green turtle
          </Base:Description>
          <Base:Description type="examine">
             One of the small green turtles that are part of the racing event, it has a number crudely chalked on its back.
          </Base:Description>
          <Base:Description type="look">
             One of the small green turtles that are part of the racing event.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="merry:lib:choice_four">
         X[M] EmitTo(\$actor, "You have chosen Dinky, from the River Granvert. Good luck.");                    
EmitIn(\$actor."base:environment", Describe(\$actor)+ " bets on Dinky, from the River Granvert.", \$actor);                              
\$this."bet:turtle" = "Dinky";                   
\$delay(2, TRUE, "030f");                                    
Call(this, "race_emits");                              
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:choice_one">
         X[M] EmitTo(\$actor, "You have chosen the quick racer, Tuna from Aube Lake. Good luck.");                    
EmitIn(\$actor."base:environment", Describe(\$actor)+ " bets on the quick racer, Tuna from Aube Lake.", \$actor);                              
\$this."bet:turtle" = "Tuna";              
\$delay(2, TRUE, "030f");                                         
Call(this, "race_emits");                              
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:choice_three">
         X[M] EmitTo(\$actor, "You have chosen the stalwart Petri of Muire Forest. Good luck.");                        
EmitIn(\$actor."base:environment", Describe(\$actor)+ " bets on the stalwart Petri of Muire Forest.", \$actor);                          
\$this."bet:turtle" = "Petri";               
\$delay(2, TRUE, "030f");                                       
Call(this, "race_emits");                              
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:choice_two">
         X[M] EmitTo(\$actor, "You have chosen the lover, Sandy from the Broken Coast. Good luck.");                    
EmitIn(\$actor."base:environment", Describe(\$actor)+ " bets on the lover, Sandy from the Broken Coast.", \$actor);                              
\$this."bet:turtle" = "Sandy";                     
\$delay(2, TRUE, "030f");                                  
Call(this, "race_emits");                              
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:expired_play">
         X[M] /* player didn't answer in time */                                          
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:no_play">
         X[M] /* decided not to play */                                          
EmitTo(\$actor, "You choose not to bet on the turtle races.");                                          
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:option_fail">
         X[M] /* player chose no turtle */                                    
EmitTo(\$actor, "You fail to choose a turtle.");                                    
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:option_four">
         X[M] \$delay(1, TRUE, "030f");                                           
interaction::question(\$question: "The race master informs you, \\"Turtle number four is a recent arrival from along the banks of the River Granvert. He has little experience as a racer but shows alot of potential. He did succeed to come in second place overall at the Wilderlands Annual Challenge just before he was shipped here. Shall you bet on Dinky, turtle number four?\\"", \$expires: 80, \$env: "TRUE", \$yes_ob: \$this, \$no_ob: \$this, \$expire_ob: \$this, \$yes_fun: "choice_four", \$no_fun: "option_fail", \$expire_fun: "expired_play");                                          
                                          
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:option_one">
         X[M] \$delay(1, TRUE, "030f");                                        
interaction::question(\$question: "The race master informs you, \\"Turtle number one is a quick little bugger from the region around Aube Lake. He is the favorite to win. Shall you bet on Tuna, turtle number one?\\"", \$expires: 80, \$env: "TRUE", \$yes_ob: \$this, \$no_ob: \$this, \$expire_ob: \$this, \$yes_fun: "choice_one", \$no_fun: "option_two", \$expire_fun: "expired_play");                                          
                                          
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:option_three">
         X[M] \$delay(1, TRUE, "030f");                                          
interaction::question(\$question: "The race master informs you, \\"Turtle number three is a hardy old beast. Strong as an ox of equivalant size and never gives up. He hails from Muire Forest. Shall you bet on Petri, turtle number three?\\"", \$expires: 80, \$env: "TRUE", \$yes_ob: \$this, \$no_ob: \$this, \$expire_ob: \$this, \$yes_fun: "choice_three", \$no_fun: "option_four", \$expire_fun: "expired_play");                                          
                                          
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:option_two">
         X[M] \$delay(1, TRUE, "030f");                                           
interaction::question(\$question: "The race master informs you, \\"Turtle number two has a sweet personality. Quite the little lovebug. She is currently on vacation from the Broken Coast. Shall you bet on Sandy, turtle number two?\\"", \$expires: 80, \$env: "TRUE", \$yes_ob: \$this, \$no_ob: \$this, \$expire_ob: \$this, \$yes_fun: "choice_two", \$no_fun: "option_three", \$expire_fun: "expired_play");                                          
                                          
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:play_game">
         X[M] \$delay(3, TRUE, "030f");            
switch(random(4)+1) \{                        
  case 1:                       
    EmitIn(\$this."base:environment", "The winner is Tuna.");                        
if(\$this."bet:turtle" == "Tuna") \{                        
Call(\$this, "won_race");                        
\}  else \{   
     \$this."bet:turtle" = nil;   
\}                        
    break;                        
  case 2:                      
    EmitIn(\$this."base:environment", "The winner is Sandy.");                        
if(\$this."bet:turtle" == "Sandy") \{                        
Call(\$this, "won_race");                        
\}  else \{   
     \$this."bet:turtle" = nil;   
\}                        
    break;                        
  case 3:                      
    EmitIn(\$this."base:environment", "The winner is Petri.");                        
if(\$this."bet:turtle" == "Petri") \{                        
Call(\$this, "won_race");                        
\}  else \{   
     \$this."bet:turtle" = nil;   
\}                        
    break;                        
  case 4:                       
    EmitIn(\$this."base:environment", "The winner is Dinky.");                        
if(\$this."bet:turtle" == "Dinky") \{                        
Call(\$this, "won_race");                        
\}  else \{   
     \$this."bet:turtle" = nil;   
\}                      
    break;                        
  default:                      
    EmitIn(\$this."base:environment", "A tie! This is not programmed to actually occur. Please @bug seeing this result.");                        
\}                        
                        
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:race_emits">
         X[M] \$tokens = Match(\$actor, "token", \$actor, "faire");                                    
if(sizeof(\$tokens) \< 1) \{                                    
  EmitTo(\$actor, "You don't have a token. Buy one from the faire attendant.");     
     \$this."bet:turtle" = nil;                                   
  return TRUE;                                    
\} else \{                                    
  EmitTo(\$actor, "You turn a token over to the race master.");                                    
  Slay(NRefOb(\$tokens[0]));                                    
\}                 
             
   \$delay(5, TRUE, "030f");           
/* Give first emit message */                
EmitIn(\$this."base:environment", "The race master gives a small half-hidden hand gesture and they're off! The turtles " +oneof("begin moving", "start traveling", "proceed", "embark", "takeoff", "set off", "commence", "set forth")+ " around the track. " +oneof("Sandy", "Dinky", "Petri", "Tuna")+ " " +oneof("pulls ahead", "leaps in front", "speeds away", "takes first position", "battles for the lead")+ " from the " +oneof("start", "onset")+ " and the " +oneof("others", "rest", "remaining racers")+ " are " +oneof("following strong", "falling behind", "taking the outer edge", "stumbling to catch up", "at a fast trot", "keeping an eye on the lead position", "straining to keep pace", "losing ground", "gaining ground")+ ".");                
                
/* Delay for 10 seconds */                
\$delay(13, TRUE, "4540");                
                
/* Give second emit message */                
EmitIn(\$this."base:environment", "The " +oneof("turtles", "racers", "contestants", "small creatures")+ " " +oneof("proceed", "continue", "pull")+ " around the first " +oneof("bend", "curve", "turn")+ " " +oneof("in", "of")+ " the " +oneof("track", "racetrack", "small oval")+ ". It " +oneof("looks", "appears", "seems")+ " to be a " +oneof("close", "fast", "strong", "near")+ " " +oneof("race", "battle of wits", "contest of speed")+ ". The " +oneof("ultimate", "final")+ " winner is still not " +oneof("showing themselves", "revealing their hand", "determined")+ ". " +oneof("Sandy", "Dinky", "Petri", "Tuna")+ " has a " +oneof("definitive", "small", "large", "big", "slight", "major", "minor")+ " lead but " +oneof("seems to be", "appears to be", "might be")+ " " +oneof("slowing down", "tapering off", "slacking", "tiring")+ " after the initial burst of " +oneof("energy", "speed")+ ". The " +oneof("others", "rest", "remaining racers")+ " are " +oneof("pulling up", "straining", "moving in")+ " " +oneof("right", "just")+ " " +oneof("behind", "to the right of", "to the left of")+ " the " +oneof("leader", "lead", "lead turtle")+ ".");                
                
/* Delay for 10 seconds */                
\$delay(13, TRUE, "9295");                
                
/* Give third emit message */                
EmitIn(\$this."base:environment", "The " +oneof("racers", "turtles", "contestants", "striving creatures")+ " " +oneof("pull", "proceed", "toil", "race")+ " " +oneof("past", "beyond", "around", "towards")+ " the halfway point and the " +oneof("race", "contest", "battle")+ " has " +oneof("truly", "definately", "surely")+ " " +oneof("reached", "achieved")+ " its peak as each " +oneof("contestant", "turtle", "racer", "animal")+ " " +oneof("strives", "strains", "toils", "battles", "pushes themselves")+ " to " +oneof("take", "overtake")+ " and hold the " +oneof("lead", "fore", "first")+ " position. " +oneof("Sandy", "Dinky", "Petri", "Tuna")+ " is " +oneof("slightly", "hardly", "barely")+ " ahead but the " +oneof("others", "rest", "remaining racers")+ " are keeping pace. This race is far from " +oneof("determined", "decided", "over")+ ". There is no clear winner as all the " +oneof("racers", "turtles", "contestants", "striving creatures")+ " are doing a " +oneof("great", "splendid", "wonderful", "awesome", "spectacular")+ " job of keeping up.");                
                
/* Delay for 10 seconds */                
\$delay(13, TRUE, "4824");                
                
/* Give fourth emit message */                
EmitIn(\$this."base:environment", "The " +oneof("finish line", "end", "last chance")+ " " +oneof("approaches", "nears", "is here")+ ". The " +oneof("battle", "contest", "race")+ " continues. The " +oneof("racers", "turtles", "contestants", "striving creatures")+ " are " +oneof("tiring", "slowing", "breathing heavily")+ ". A " +oneof("burst", "spray", "sudden jump")+ " of speed from " +oneof("Sandy", "Dinky", "Petri", "Tuna")+ " " +oneof("may end this matchup", "might prove fatal for the rest", "could be just what is needed to win")+ ". The " +oneof("others", "rest", "remaining racers")+ " are " +oneof("pushing", "forcing", "straining")+ " their " +oneof("little", "tiny", "wee")+ " " +oneof("necks", "noses", "heads")+ " " +oneof("out", "forward")+ " and " +oneof("paddling their feet", "moving their legs", "pushing themselves")+ " as fast as they can. Here it comes! The final moment and...");                
Call(this, "play_game");                 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:won_race">
         X[M] /* give a prize */                     
    \$den = Spawn(\$\{Allegory:Props:Finance:Cash:Florin\});                     
    \$prize = Spawn(\$\{Ironclaw:Props:Clothing:Misc:ClothDoll\});                     
    \$prize."trait:type" = "turtle";                     
    \$prize."trait:color" = "green";                     
    \$prize."trait:material" = "felt";                     
    EmitTo(\$actor, "The race master congratulates you, and hands you "+Describe(\$prize)+" and " +Describe(\$den)+ ".");                     
    EmitIn(\$actor."base:environment", "The race master congratulates "+Describe(\$actor)+", and hands "+\$actor."base:objective"+" "+Describe(\$prize)+" and " +Describe(\$den)+ ".", \$actor);                     
    \$prize."base:environment" = \$actor;                     
     \$den."base:environment" = \$actor;     
     \$this."bet:turtle" = nil;
      </Core:Property>
      <Core:Property property="merry:react-pre:play-dob">
         X[M] /*                                          
                                          
  D=Ask if actor wants to play game.                                          
                                          
*/                 
if(\$this."bet:turtle") \{     
EmitTo(\$actor, "A race is currently in progress. Please try again momentarily.");     
\} else \{                              
                                          
/* ask if the player wants to play this */                                          
interaction::question(\$question: "The assistant points out the race track to you, \\"There are four turtles here. If you successfully bet on the one who moves faster then the others, you will win a prize. Only one token, what do you say?\\"", \$expires: 80, \$env: "TRUE", \$yes_ob: \$this, \$no_ob: \$this, \$expire_ob: \$this, \$yes_fun: "option_one", \$no_fun: "no_play", \$expire_fun: "expired_play");                                          
    \}                                      
return FALSE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1145236853, "tunk_bodin", "X", 1145240244, "tunk_bodin", "X", 1145241065, "tunk_bodin", "X", 1145241178, "tunk_bodin", "X", 1145241982, "tunk_bodin", "X", 1145242093, "tunk_bodin", "X", 1145242194, "tunk_bodin", "X", 1145244477, "tunk_bodin", "P", 1145244880, "tunk_bodin", "X", 1145245205, "tunk_bodin", "X", 1145245312, "tunk_bodin", "X", 1145245343, "tunk_bodin", "X", 1145245826, "tunk_bodin", "X", 1145245899, "tunk_bodin", "X", 1145246002, "tunk_bodin", "X", 1145246075, "tunk_bodin", "X", 1145292374, "tunk_bodin", "X", 1145292475, "tunk_bodin", "X", 1145293204, "tunk_bodin", "X", 1145293526, "tunk_bodin", "X", 1145294065, "tunk_bodin", "X", 1145294191, "tunk_bodin", "X", 1145294234, "tunk_bodin", "X", 1145295733, "tunk_bodin", "X", 1145296894, "tunk_bodin", "X", 1145297952, "tunk_bodin", "X", 1145298132, "tunk_bodin", "X", 1145299405, "tunk_bodin", "X", 1145299509, "tunk_bodin", "X", 1145299578, "tunk_bodin", "X", 1145301195, "tunk_bodin", "X", 1151732782, "tunk_bodin", "X", 1151732891, "tunk_bodin", "X", 1237848205, "morwenlorelie", "R", 1519184212, "ezralee", "R", 1569787081, "sendnoodlez", "R", 1569799858, "sendnoodlez", "R" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
