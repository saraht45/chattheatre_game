<object clone="/base/obj/thing" owner="tunk_bodin">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="standing" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="game"/>
            <Base:SName sname="table"/>
            <Base:SName sname="gametable"/>
            <Base:SName sname="shellgame"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="games"/>
            <Base:PName pname="gametables"/>
            <Base:PName pname="tables"/>
            <Base:PName pname="shellgames"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="game"/>
          <Base:Adjective adjective="shell"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             shell game table
          </Base:Description>
          <Base:Description type="examine">
             A small wooden table with three halved walnut shells on top along with a small green pea-sized ball. The idea of the game of to watch the game master put the ball under a shell and then quickly shift the shells around tha table. After which you attempt to determine the shell that hides that ball. [OOC: play shellgame]
          </Base:Description>
          <Base:Description type="look">
             A small wooden table with three halved walnut shells on top along with a small green pea-sized ball.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="shell" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="shell"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="shells"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="padded"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             halved walnut shell
          </Base:Description>
          <Base:Description type="examine">
             One of the halved walnut shells.
          </Base:Description>
          <Base:Description type="look">
             One of the halved walnut shells.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="merry:lib:choice_one">
         X[M] EmitTo(\$actor, "You choose to bet on the first shell.");                          
EmitIn(\$actor."base:environment", Describe(\$actor)+ " bets on the first shell.", \$actor);                                    
\$this."bet:shell" = "first";                    
\$delay(1, TRUE, "030f");                                               
Call(this, "play_game");                                    
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:choice_three">
         X[M] EmitTo(\$actor, "You choose to bet on the third shell.");                          
EmitIn(\$actor."base:environment", Describe(\$actor)+ " bets on the third shell.", \$actor);                                    
\$this."bet:shell" = "third";                    
\$delay(1, TRUE, "030f");                                               
Call(this, "play_game");                                    
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:choice_two">
         X[M] EmitTo(\$actor, "You choose to bet on the second shell.");                          
EmitIn(\$actor."base:environment", Describe(\$actor)+ " bets on the second shell.", \$actor);                                    
\$this."bet:shell" = "second";                    
\$delay(1, TRUE, "030f");                                               
Call(this, "play_game");                                    
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:expired_play">
         X[M] /* player didn't answer in time */                                                
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:no_play">
         X[M] /* decided not to play */                                                
EmitTo(\$actor, "You choose not to bet on the shell game.");                                                
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:option_fail">
         X[M] /* player chose no shell */                                          
EmitTo(\$actor, "You fail to choose a shell.");                                          
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:option_one">
         X[M] \$delay(1, TRUE, "030f");                                              
interaction::question(\$question: "The shell master asks you, \\"Shall you bet on the first shell?\\"", \$expires: 80, \$env: "TRUE", \$yes_ob: \$this, \$no_ob: \$this, \$expire_ob: \$this, \$yes_fun: "choice_one", \$no_fun: "option_two", \$expire_fun: "expired_play");                                                
                                                
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:option_three">
         X[M] \$delay(1, TRUE, "030f");                                                
interaction::question(\$question: "The shell master asks you, \\"Shall you bet on the third shell?\\"", \$expires: 80, \$env: "TRUE", \$yes_ob: \$this, \$no_ob: \$this, \$expire_ob: \$this, \$yes_fun: "choice_three", \$no_fun: "option_fail", \$expire_fun: "expired_play");                                                
                                                
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:option_two">
         X[M] \$delay(1, TRUE, "030f");                                                 
interaction::question(\$question: "The shell master asks you, \\"Shall you bet on the second shell?\\"", \$expires: 80, \$env: "TRUE", \$yes_ob: \$this, \$no_ob: \$this, \$expire_ob: \$this, \$yes_fun: "choice_two", \$no_fun: "option_three", \$expire_fun: "expired_play");                                                
                                                
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:play_game">
         X[M] /* charge cost to play */
\$tokens = Match(\$actor, "token", \$actor, "faire");
if(sizeof(\$tokens) \< 1) \{
  EmitTo(\$actor, "You don't have a token. Buy one from the faire attendant.");
\$this."bet:shell" = nil;
  return TRUE;
\} else \{
  EmitTo(\$actor, "You hand a token to the shell master.");
  Slay(NRefOb(\$tokens[0]));
\}


/* skill tester code */
EmitIn(\$this."base:environment", "The shell master slowly passes his hand over the shells and begins to lift one...");
\$skill = ironclaw::roll(\$roller: \$actor, \$skills: (\{ \}), \$bonus: (\{ "trait:intelligence", "trait:luck" \}));
\$skill += random(5);
switch(\$skill) \{
  case 1:
    EmitIn(\$this."base:environment", "...revealing no ball under the " +\$this."bet:shell"+ " shell. The player has lost.");
\$this."bet:shell" = nil;
    break;
  case 2:
    EmitIn(\$this."base:environment", "...suddenly revealing that there is no hidden ball beneath the " +\$this."bet:shell"+ " shell. The player has lost.");
\$this."bet:shell" = nil;
    break;
  case 3:
    EmitIn(\$this."base:environment", "...showing a distinct lack of any ball-shaped object within the " +\$this."bet:shell"+ " shell. The contestant has lost.");
\$this."bet:shell" = nil;
    break;
  case 4:
    EmitIn(\$this."base:environment", "...beneath which is not a ball. The ball was not hidden amidst the " +\$this."bet:shell"+ " shell. The bettor failed.");
\$this."bet:shell" = nil;
    break;
  case 5:
    EmitIn(\$this."base:environment", "...clearly showing no ball whatsoever hiding under the " +\$this."bet:shell"+ " shell. The player has lost.");
\$this."bet:shell" = nil;
    break;
  case 6:
    EmitIn(\$this."base:environment", "...presenting empty space beneath the " +\$this."bet:shell"+ " shell. The contestant has failed.");
\$this."bet:shell" = nil;
    break;
  case 7:
    EmitIn(\$this."base:environment", "...presenting the fact that there is no ball to see beneath the " +\$this."bet:shell"+ " shell. The bettor has failed.");
\$this."bet:shell" = nil;
    break;
  case 8:
    EmitIn(\$this."base:environment", "...revealing absolutely nothing under the " +\$this."bet:shell"+ " shell. The contestant missed his bet.");
\$this."bet:shell" = nil;
    break;
  default:
    EmitIn(\$this."base:environment", "...revealing the ball!! It was neatly tucked away beneath the " +\$this."bet:shell"+ " shell and the bettor successfully determined its location.");
Call(this, "won_bet");
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:won_bet">
         X[M] /* give a prize */                           
    \$den = Spawn(\$\{Allegory:Props:Finance:Cash:Florin\});                           
    \$prize = Spawn(\$\{Ironclaw:Props:Clothing:Misc:ClothDoll\});                           
    \$prize."trait:type" = "walnut";                           
    \$prize."trait:color" = "tan";                           
    \$prize."trait:material" = "leather";                           
    EmitTo(\$actor, "The shell master congratulates you, and hands you "+Describe(\$prize)+" and " +Describe(\$den)+ ".");                           
    EmitIn(\$actor."base:environment", "The shell master congratulates "+Describe(\$actor)+", and hands "+\$actor."base:objective"+" "+Describe(\$prize)+" and " +Describe(\$den)+ ".", \$actor);                           
    \$prize."base:environment" = \$actor;                           
     \$den."base:environment" = \$actor;           
     \$this."bet:shell" = nil;
      </Core:Property>
      <Core:Property property="merry:react-pre:play-dob">
         X[M] /*                                                
                                                
  D=Ask if actor wants to play game.                                                
                                                
*/                       
if(\$this."bet:shell") \{           
EmitTo(\$actor, "A game is currently in progress. Please try again momentarily.");           
\} else \{                                    
                                                
/* ask if the player wants to play this */                                                
interaction::question(\$question: "The shell master shows you a small pea-sized ball before tucking it beneath a halved walnut shell. After shifting and spinning the shells on the table, the game master asks you, \\"There are three shells here but only one hides the ball. The idea is to guess or determine which shell hides the ball. The game costs a single token. Will you play?\\"", \$expires: 80, \$env: "TRUE", \$yes_ob: \$this, \$no_ob: \$this, \$expire_ob: \$this, \$yes_fun: "option_one", \$no_fun: "no_play", \$expire_fun: "expired_play");                                                
    \}                                            
return FALSE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1145303436, "tunk_bodin", "X", 1145304121, "tunk_bodin", "X", 1145305179, "tunk_bodin", "X", 1145305261, "tunk_bodin", "X", 1151731902, "tunk_bodin", "X", 1151732054, "tunk_bodin", "X", 1151732912, "tunk_bodin", "X", 1151733024, "tunk_bodin", "X", 1151739064, "tonyd", "P", 1237848164, "morwenlorelie", "R", 1321244210, "tonyd", "P", 1421817719, "rorschakovacs", "E", 1519184178, "ezralee", "R", 1569787060, "sendnoodlez", "R", 1569799842, "sendnoodlez", "R", 1580102379, "jominey", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
