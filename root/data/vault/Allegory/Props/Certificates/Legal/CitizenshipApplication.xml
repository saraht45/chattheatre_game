<object clone="/base/obj/thing" owner="ezralee">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="0.001" density="0.1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="lying" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="application"/>
            <Base:SName sname="document"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="documents"/>
            <Base:PName pname="applications"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="citizenship"/>
          <Base:Adjective adjective="italian"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             Italian citizenship application
          </Base:Description>
          <Base:Description type="examine">
             An application for legal citizenship in the country of Italy. It reads: <br/><br/> The undersigned, heretofore listed as sponsor, sponsee, and notary, do recognize and hold true the sponsee's intent to apply for full legal citizenship in the country of Italy. If accepted, the sponsee will be granted the full legal rights, protections, and honors of a citizen of Italy, held liable to their laws and honoring all oaths taken to the effect. <br/><br/> {? | $(this.application:terms) | $(this.application:terms) | }<br/><br/>{? | $[$this."contract:signatures"] | $[Call(${Allegory:Props:Certificates:Legal:CitizenshipApplication}, "showsignatures", $what: ({ $this }))] | It is unsigned. <br/>[OOC: sign my contract 'signature (optional)' - to sign the contract] }<br/><br/>{? | $(this.notarized) | $(this.notarized) notarized: $[Str(NRefOb($target).notarized)] }
          </Base:Description>
          <Base:Description type="look">
             An application for legal citizenship in the country of Italy.
          </Base:Description>
          <Base:Description type="pbrief">
             applications
          </Base:Description>
          <Base:Description type="writing">
             An application for legal citizenship in the country of Italy. It reads: <br/><br/> The undersigned, heretofore listed as sponsor, sponsee, and notary, do recognize and hold true the sponsee's intent to apply for full legal citizenship in the country of Italy. If accepted, the sponsee will be granted the full legal rights, protections, and honors of a citizen of Italy, held liable to their laws and honoring all oaths taken to the effect. <br/><br/> {? | $[NRefOb($what[0])."application:terms"] | $[NRefOb($what[0])."application:terms"] | }<br/><br/>{? | $[NRefOb($what[0])."contract:signatures"] | $[Call(${Allegory:Props:Certificates:Legal:CitizenshipApplication}, "showsignatures")] | It is unsigned. }<br/><br/> $[Str(NRefOb($target).notarized)]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="10"/>
      <Base:MaxFatigue value="100"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties>
      <Base:InitialProperty property="bilbo:inherit:react:chant">
         \<Generic:DB:ScrollDB\>
      </Base:InitialProperty>
      <Base:InitialProperty property="bilbo:inherit:react:cite">
         \<Generic:DB:ScrollDB\>
      </Base:InitialProperty>
      <Base:InitialProperty property="bilbo:inherit:react:instruct">
         \<Generic:DB:ScrollDB\>
      </Base:InitialProperty>
      <Base:InitialProperty property="bilbo:inherit:react:orate">
         \<Generic:DB:ScrollDB\>
      </Base:InitialProperty>
      <Base:InitialProperty property="bilbo:inherit:react:preach">
         \<Generic:DB:ScrollDB\>
      </Base:InitialProperty>
      <Base:InitialProperty property="bilbo:inherit:react:recite">
         \<Generic:DB:ScrollDB\>
      </Base:InitialProperty>
      <Base:InitialProperty property="bilbo:inherit:react:sing">
         \<Generic:DB:ScrollDB\>
      </Base:InitialProperty>
      <Base:InitialProperty property="bilbo:inherit:react:translate">
         \<Generic:DB:ScrollDB\>
      </Base:InitialProperty>
      <Base:InitialProperty property="writable">
         "1"
      </Base:InitialProperty>
    </Base:InitialProperties>
    <Core:Properties>
      <Core:Property property="bilbo:inherit:react:chant">
         \<Generic:DB:ScrollDB\>
      </Core:Property>
      <Core:Property property="bilbo:inherit:react:cite">
         \<Generic:DB:ScrollDB\>
      </Core:Property>
      <Core:Property property="bilbo:inherit:react:instruct">
         \<Generic:DB:ScrollDB\>
      </Core:Property>
      <Core:Property property="bilbo:inherit:react:orate">
         \<Generic:DB:ScrollDB\>
      </Core:Property>
      <Core:Property property="bilbo:inherit:react:preach">
         \<Generic:DB:ScrollDB\>
      </Core:Property>
      <Core:Property property="bilbo:inherit:react:recite">
         \<Generic:DB:ScrollDB\>
      </Core:Property>
      <Core:Property property="bilbo:inherit:react:sing">
         \<Generic:DB:ScrollDB\>
      </Core:Property>
      <Core:Property property="bilbo:inherit:react:translate">
         \<Generic:DB:ScrollDB\>
      </Core:Property>
      <Core:Property property="bilbo:solo:refresh">
         "run"
      </Core:Property>
      <Core:Property property="bilbo:solo:refresh:0010">
         "set this.scrollrefreshtemp to \$lookup(Generic:DB:ScrollDB)"
      </Core:Property>
      <Core:Property property="bilbo:solo:refresh:0020">
         "set this.bilbo:inherit:react:chant to this.scrollrefreshtemp"
      </Core:Property>
      <Core:Property property="bilbo:solo:refresh:0030">
         "set this.bilbo:inherit:react:cite to this.scrollrefreshtemp"
      </Core:Property>
      <Core:Property property="bilbo:solo:refresh:0040">
         "set this.bilbo:inherit:react:instruct to this.scrollrefreshtemp"
      </Core:Property>
      <Core:Property property="bilbo:solo:refresh:0050">
         "set this.bilbo:inherit:react:sing to this.scrollrefreshtemp"
      </Core:Property>
      <Core:Property property="bilbo:solo:refresh:0060">
         "set this.bilbo:inherit:react:orate to this.scrollrefreshtemp"
      </Core:Property>
      <Core:Property property="bilbo:solo:refresh:0070">
         "set this.bilbo:inherit:react:preach to this.scrollrefreshtemp"
      </Core:Property>
      <Core:Property property="bilbo:solo:refresh:0080">
         "set this.bilbo:inherit:react:recite to this.scrollrefreshtemp"
      </Core:Property>
      <Core:Property property="bilbo:solo:refresh:0090">
         "set this.bilbo:inherit:react:translate to nil"
      </Core:Property>
      <Core:Property property="bilbo:solo:refresh:0100">
         "set writable 1"
      </Core:Property>
      <Core:Property property="bilbo:solo:refresh:0110">
         "set this.scrollrefreshtemp to nil"
      </Core:Property>
      <Core:Property property="export:nip:item:cost">
         0
      </Core:Property>
      <Core:Property property="export:trait:trash">1</Core:Property>
      <Core:Property property="export:writable">
         "true"
      </Core:Property>
      <Core:Property property="merry:lib:showsignatures">
         X[M] \$contract = NRefOb(\$what[0]);
\$sigs = \$contract."contract:signatures";

\$str = "The following signatures are listed below: \<br/\>";
for(\$i = 0; \$i \< sizeof(\$sigs); \$i++) \{
    if(\$sigs[\$i][0]) \{
        \$str += \$sigs[\$i][0] + " by " + \$sigs[\$i][1] + "\<br/\>";
    \} else \{
        \$str += \$sigs[\$i][1] + "\<br/\>";
    \}
\}

return ParseXML(\$str);
      </Core:Property>
      <Core:Property property="merry:lib:witness_certificate">
         X[M] this.witness = Describe(\$actor);

/* sign the certificate */

EmitTo(\$actor, "You witness "+Describe(this, nil, \$actor)+".");
EmitIn(\$actor."base:environment", Describe(\$actor)+" witnesses "+Describe(this, \$actor)+".", \$actor);

EmitIn(\$actor."base:environment", "A court clerk takes note of the citizenship application, and rushes off to file them in the archives.");

/* We should replace the below code with the ictime() function! */

\{
string icmonth, days;
int daynumber, year;
string *daynames;

daynames = (\{ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" \});

/* Find the details we want */
sscanf(ctime( time() ), "%*s %s %d %*s %d", icmonth, daynumber, year);

/* find in-character day of week */
days = daynames[time()/(60*60*16)%7];

/* Replace strings */
icmonth = replace_strings(icmonth, "Jan", "January", "Feb", "February", "Mar", "March", "Apr", "April", "May", "May", "Jun", "June", "Jul", "July", "Aug", "August", "Sep", "September", "Oct", "October", "Nov", "November", "Dec", "December" );

 
 this.writing = "This is to certify that";
 this.writing += " The undersigned signatures were lawfully witnessed on the "+Str(desc_ordinal(daynumber))+" day of "+Str(icmonth)+", "+Str(year-420)+" according to and in conformity of the laws of the Kingdom of Italy. It bears the official seal of the Kingdom of Italy.\\n"; 
this.writing += "The application has been signed and has been legally witnessed by "+this.witness+".";
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:sign-what">
         X[M] if(\$this."base:environment"."udat:possessed" \&\& \$this."base:environment" != \$actor) \{
    EmitTo(\$actor, Describe(\$this, nil, \$actor) + " is not in your possession.");
    return FALSE;
\}

if(!\$this."application:terms") \{
    EmitTo(\$actor, Describe(\$this, nil, \$actor) + " has not been filled out yet.");
    return FALSE;
\}

\$sigs = (\{ \});
if(\$this."contract:signatures") \{
    \$sigs = \$this."contract:signatures";
\}

if(\$evoke) \{
    \$sig = \$evoke;
\}

for(\$i = 0; \$i \< sizeof(\$sigs); \$i++) \{
    if(\$sigs[\$i][2] == \$actor) \{
        EmitTo(\$actor, "You already signed " + Describe(\$this, nil, \$actor) + ".");
        return FALSE;
    \}
\}

\$sigs += (\{ (\{ \$sig, Describe(\$actor), \$actor \}) \});
\$this."contract:signatures" = \$sigs;

if(\$sig) \{
    EmitTo(\$actor, "You sign " + Describe(\$this, nil, \$actor) + ", " + \$sig);
\} else \{
    EmitTo(\$actor, "You sign " + Describe(\$this, nil, \$actor) + ".");
\}

EmitIn(\$actor."base:environment", Describe(\$actor) + " signs " + Describe(\$this, \$actor) + ".", \$actor);

return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:witness-what">
         X[M] /* are we holding the certificate? */
if(this."base:environment" != \$actor) return TRUE;

 /* are we an ordained priest? */
 if(\$actor.judge) \{
  EmitTo(\$actor, "Signing this citizenship application will mean that you officially witness that the above-signed wishes to become an Italian citizen and that it is a valid application.");
  EmitTo(\$actor, "Upon taking an oath, this application will be accepted.");

  interaction::question(\$actor: \$actor, \$question: "Are you sure you want to verify this application?", \$expires: 80, \$env: "FALSE", \$yes_ob: \$this, \$no_ob: \$this, \$expire_ob: \$this, \$yes_fun: "witness_certificate", \$no_fun: "not_witness_certificate", \$expire_fun: "witness_certificate_expire", \$par: ([ "actor": \$actor]));

  return FALSE;
 \} else \{
  EmitTo(\$actor, "Sorry, only a judge can finalize a citizenship application.");
  return FALSE;
 \}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:write-what">
         X[M] if(\$this."base:environment"."udat:possessed" \&\& \$this."base:environment" != \$actor) \{
    EmitTo(\$actor, Describe(\$this, nil, \$actor) + " is not in your possession.");
    return FALSE;
\}

if(\$this."contract:signatures") \{
    EmitTo(\$actor, "You cannot modify the terms of a contract that has already been signed.");
    return FALSE;
\}

\$terms = replace_strings(\$evoke, "\\"", "");

if(\$this."application:terms") \{
    \$this."application:terms" += "\\n" + \$terms;
\} else \{
    \$this."application:terms" = \$terms;
\}

EmitTo(\$actor, "You write on " + Describe(\$this, nil, \$actor) + ", " + \$evoke);
EmitIn(\$actor."base:environment", Describe(\$actor) + " writes on "+ Describe(\$this, \$actor) + ".", nil, \$actor);

return FALSE;
      </Core:Property>
      <Core:Property property="misc:lastdopped">
         "1048692858 /usr/SkotOS/merry/fe76fdbb6793c3e6fedfa42659af22d0"
      </Core:Property>
      <Core:Property property="nip:item:cost">0</Core:Property>
      <Core:Property property="revisions">
         (\{ 1170617073, "necate", "E", 1172544909, "tonyd", "E", 1172544951, "tonyd", "E", 1172545016, "tonyd", "E", 1174582510, "tunk_bodin", "E", 1174582644, "tunk_bodin", "E", 1174582665, "tunk_bodin", "E", 1174583948, "tunk_bodin", "E", 1174584099, "tunk_bodin", "E", 1174584337, "tunk_bodin", "E", 1175593500, "necate", "E", 1175668147, "necate", "E", 1176609116, "necate", "E", 1213693116, "slurpeeslurp", "E", 1213693120, "slurpeeslurp", "E", 1213693136, "slurpeeslurp", "E", 1213693151, "slurpeeslurp", "E", 1213693162, "slurpeeslurp", "E", 1213693213, "slurpeeslurp", "E", 1213693732, "slurpeeslurp", "E", 1213693755, "slurpeeslurp", "E", 1213694099, "slurpeeslurp", "E", 1213694153, "slurpeeslurp", "E", 1213694223, "slurpeeslurp", "E", 1213694228, "slurpeeslurp", "E", 1213694249, "slurpeeslurp", "E", 1213694280, "slurpeeslurp", "E", 1213694283, "slurpeeslurp", "E", 1213694312, "slurpeeslurp", "E", 1213694326, "slurpeeslurp", "E", 1213694371, "slurpeeslurp", "K", 1213694430, "slurpeeslurp", "E", 1213694433, "slurpeeslurp", "E", 1213694435, "slurpeeslurp", "E", 1213694846, "slurpeeslurp", "E", 1213694858, "slurpeeslurp", "E", 1237847632, "morwenlorelie", "R", 1237847644, "morwenlorelie", "R", 1239743858, "slurpeeslurp", "E", 1239743862, "slurpeeslurp", "E", 1239743870, "slurpeeslurp", "E", 1239744242, "slurpeeslurp", "E", 1460190531, "tonyd", "R", 1698261081, "annemairi", "K", 1698261114, "annemairi", "R", 1698261128, "annemairi", "E", 1698261141, "annemairi", "E", 1698262204, "annemairi", "K", 1698262240, "annemairi", "K", 1698262269, "annemairi", "K", 1698262565, "annemairi", "K", 1698262637, "annemairi", "K", 1698263731, "annemairi", "K", 1698279470, "ezralee", "R", 1699769485, "ezralee", "R", 1699769576, "ezralee", "K", 1704075511, "ezralee", "K", 1704075513, "ezralee", "E", 1704075521, "ezralee", "E", 1704075602, "ezralee", "E", 1704075668, "ezralee", "E", 1704075738, "ezralee", "E", 1704075796, "ezralee", "K", 1704075815, "ezralee", "K", 1704075874, "ezralee", "K", 1704075934, "ezralee", "K", 1704076011, "ezralee", "E", 1704076059, "ezralee", "K", 1704076165, "ezralee", "K", 1704076273, "ezralee", "K", 1704076784, "ezralee", "K", 1704077127, "ezralee", "E", 1704077354, "ezralee", "E", 1704077533, "ezralee", "E", 1704077760, "ezralee", "E", 1704077775, "ezralee", "E", 1704077806, "ezralee", "E", 1704078122, "ezralee", "K", 1704078195, "ezralee", "E", 1704078534, "ezralee", "E", 1704078732, "ezralee", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">100.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
      <Core:Property property="writable">"1"</Core:Property>
    </Core:Properties>
    <Notes:Notes>
      <Notes:Category cat="QA" catstate="Open">
        <Notes:Note ix="966637404" state="Open" user="michaelb">
           The basic, original scroll.
        </Notes:Note>
      </Notes:Category>
    </Notes:Notes>
  </Base:Thing>
</object>
