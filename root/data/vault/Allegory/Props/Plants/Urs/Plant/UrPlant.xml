<object clone="/base/obj/thing" owner="SkotOS">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="0.05" density="0.8"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="true">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="plant"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="plants"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="mature"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             {? | $[::resolve_desc($desc: "brief")] | $[::resolve_desc($desc: "brief")] | plant}
          </Base:Description>
          <Base:Description type="examine">
             {? | $[::resolve_desc($desc: "examine")] | $[::resolve_desc($desc: "examine")] | A plant.} {? | $[$this."trait:plant:planter" || $this."trait:stage" == 0 || (!$this."guild:fixedby" && $this."base:immobile" && !$this."trait:plant:planter")] | | Tendrils of root hang down and will eventually dry out the plant if not placed in a proper planter. }$[::examine()]
          </Base:Description>
          <Base:Description type="look">
             {? | $[::resolve_desc($desc: "look")] | $[::resolve_desc($desc: "look")] | A plant.}$[::look()]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="harvest-bark" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $[::resolve_desc($desc: "brief")]
          </Base:Description>
          <Base:Description type="examine">
             $[::resolve_desc($desc: "examine")]
          </Base:Description>
          <Base:Description type="look">
             $[::resolve_desc($desc: "look")]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="harvest-bean" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $[::resolve_desc($desc: "brief")]
          </Base:Description>
          <Base:Description type="examine">
             $[::resolve_desc($desc: "examine")]
          </Base:Description>
          <Base:Description type="look">
             $[::resolve_desc($desc: "look")]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="harvest-clove" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $[::resolve_desc($desc: "brief")]
          </Base:Description>
          <Base:Description type="examine">
             $[::resolve_desc($desc: "examine")]
          </Base:Description>
          <Base:Description type="look">
             $[::resolve_desc($desc: "look")]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="harvest-clover" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $[::resolve_desc($desc: "brief")]
          </Base:Description>
          <Base:Description type="examine">
             $[::resolve_desc($desc: "examine")]
          </Base:Description>
          <Base:Description type="look">
             $[::resolve_desc($desc: "look")]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="harvest-flower" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $[::resolve_desc($desc: "brief")]
          </Base:Description>
          <Base:Description type="examine">
             $[::resolve_desc($desc: "examine")]
          </Base:Description>
          <Base:Description type="look">
             $[::resolve_desc($desc: "look")]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="harvest-fruit" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $[::resolve_desc($desc: "brief")]
          </Base:Description>
          <Base:Description type="examine">
             $[::resolve_desc($desc: "examine")]
          </Base:Description>
          <Base:Description type="look">
             $[::resolve_desc($desc: "look")]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="harvest-leaf" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $[::resolve_desc($desc: "brief")]
          </Base:Description>
          <Base:Description type="examine">
             $[::resolve_desc($desc: "examine")]
          </Base:Description>
          <Base:Description type="look">
             $[::resolve_desc($desc: "look")]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="harvest-nettle" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $[::resolve_desc($desc: "brief")]
          </Base:Description>
          <Base:Description type="examine">
             $[::resolve_desc($desc: "examine")]
          </Base:Description>
          <Base:Description type="look">
             $[::resolve_desc($desc: "look")]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="harvest-resin" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $[::resolve_desc($desc: "brief")]
          </Base:Description>
          <Base:Description type="examine">
             $[::resolve_desc($desc: "examine")]
          </Base:Description>
          <Base:Description type="look">
             $[::resolve_desc($desc: "look")]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="harvest-root" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $[::resolve_desc($desc: "brief")]
          </Base:Description>
          <Base:Description type="examine">
             $[::resolve_desc($desc: "examine")]
          </Base:Description>
          <Base:Description type="look">
             $[::resolve_desc($desc: "look")]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="harvest-seed" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $[::resolve_desc($desc: "brief")]
          </Base:Description>
          <Base:Description type="examine">
             $[::resolve_desc($desc: "examine")]
          </Base:Description>
          <Base:Description type="look">
             $[::resolve_desc($desc: "look")]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="harvest-sprig" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $[::resolve_desc($desc: "brief")]
          </Base:Description>
          <Base:Description type="examine">
             $[::resolve_desc($desc: "examine")]
          </Base:Description>
          <Base:Description type="look">
             $[::resolve_desc($desc: "look")]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="harvest-stalk" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $[::resolve_desc($desc: "brief")]
          </Base:Description>
          <Base:Description type="examine">
             $[::resolve_desc($desc: "examine")]
          </Base:Description>
          <Base:Description type="look">
             $[::resolve_desc($desc: "look")]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="harvest-stigma" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $[::resolve_desc($desc: "brief")]
          </Base:Description>
          <Base:Description type="examine">
             $[::resolve_desc($desc: "examine")]
          </Base:Description>
          <Base:Description type="look">
             $[::resolve_desc($desc: "look")]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="harvest-vegetable" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $[::resolve_desc($desc: "brief")]
          </Base:Description>
          <Base:Description type="examine">
             $[::resolve_desc($desc: "examine")]
          </Base:Description>
          <Base:Description type="look">
             $[::resolve_desc($desc: "look")]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="mature-plant" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.trait:color) $(this.trait:flowertype) $(this.trait:brief)
          </Base:Description>
          <Base:Description type="examine">
             A $(this.trait:color) $(this.trait:flowertype) $(this.trait:brief).
          </Base:Description>
          <Base:Description type="look">
             A $(this.trait:color) $(this.trait:flowertype) $(this.trait:brief).
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="seed" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             small round seed
          </Base:Description>
          <Base:Description type="examine">
             A small round seed. A knowledgeable individual may be able to grow something from it.
          </Base:Description>
          <Base:Description type="look">
             A small round seed.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="sprout" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             small green sprout
          </Base:Description>
          <Base:Description type="examine">
             A small $(this.trait:state) green sprout poking from the soil.
          </Base:Description>
          <Base:Description type="look">
             A small $(this.trait:state) green sprout poking from the soil.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="young-plant" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             young $(this.trait:type) plant
          </Base:Description>
          <Base:Description type="examine">
             The young $(this.trait:state) green plant is starting to take the form of <a_or_an>$(this.trait:type)</a_or_an> plant.
          </Base:Description>
          <Base:Description type="look">
             A young $(this.trait:state) green plant poking from the soil.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties>
      <Base:InitialProperty property="new property name">
         "New Property Value"
      </Base:InitialProperty>
      <Base:InitialProperty property="trait:stage">
         3
      </Base:InitialProperty>
    </Base:InitialProperties>
    <Core:Properties>
      <Core:Property property="bak:export:trait:plant:stages">
         ([ 0:24, 1:48, 2:48, 3:48 ])
      </Core:Property>
      <Core:Property property="export:nip:item:cost">
         1500
      </Core:Property>
      <Core:Property property="export:plants:mature-plant:adjectives">
         (\{ "mature" \})
      </Core:Property>
      <Core:Property property="export:plants:mature-plant:pnames">
         (\{ "plants" \})
      </Core:Property>
      <Core:Property property="export:plants:mature-plant:snames">
         (\{ "plant" \})
      </Core:Property>
      <Core:Property property="export:plants:seed:adjectives">
         (\{ "small", "round" \})
      </Core:Property>
      <Core:Property property="export:plants:seed:pnames">
         (\{ "seeds" \})
      </Core:Property>
      <Core:Property property="export:plants:seed:snames">
         (\{ "seed" \})
      </Core:Property>
      <Core:Property property="export:plants:sprout:pnames">
         (\{ "sprouts" \})
      </Core:Property>
      <Core:Property property="export:plants:sprout:snames">
         (\{ "sprout" \})
      </Core:Property>
      <Core:Property property="export:plants:young-plant:adjectives">
         (\{ "young" \})
      </Core:Property>
      <Core:Property property="export:plants:young-plant:pnames">
         (\{ "plants" \})
      </Core:Property>
      <Core:Property property="export:plants:young-plant:snames">
         (\{ "plant" \})
      </Core:Property>
      <Core:Property property="export:trait:objecttype">
         "plant"
      </Core:Property>
      <Core:Property property="export:trait:plant:acceptsfertilizer">
         1
      </Core:Property>
      <Core:Property property="export:trait:plant:maxsize">
         1
      </Core:Property>
      <Core:Property property="export:trait:plant:size">
         1
      </Core:Property>
      <Core:Property property="export:trait:plant:stages">
         ([ 0:24, 1:48, 2:48, 3:48 ])
      </Core:Property>
      <Core:Property property="export:trait:planter:allowed">
         (\{ "soil" \})
      </Core:Property>
      <Core:Property property="export:trait:quality">
         5
      </Core:Property>
      <Core:Property property="export:trait:stage">3</Core:Property>
      <Core:Property property="merry:act:start">
         X[M] if(\$this."trait:color:variations" \&\& sizeof(\$this."trait:color:variations")) \$this."trait:color" = \$this."trait:color:variations"[random(sizeof(\$this."trait:color:variations"))]; 
 
\$delay(0.5, TRUE, "4e55"); 
if(\$this."trait:stage" == 3) plants::regenerate_produce(\$plant: \$this); 
     
return FALSE;
      </Core:Property>
      <Core:Property property="merry:inherit:lib:death:timer">
         \<Allegory:Lib:Plants:PlantLib\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:grow">
         \<Allegory:Lib:Plants:PlantLib\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:harvest">
         \<Allegory:Lib:Plants:PlantLib\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:resolve_desc">
         \<Allegory:Lib:Plants:PlantLib\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:stop_death">
         \<Allegory:Lib:Plants:PlantLib\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:stop_growth">
         \<Allegory:Lib:Plants:PlantLib\>
      </Core:Property>
      <Core:Property property="merry:inherit:react-post:prune-dob">
         \<Allegory:Lib:Plants:PlantLib\>
      </Core:Property>
      <Core:Property property="merry:inherit:react-post:water-dob">
         \<Allegory:Lib:Plants:PlantLib\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:trait:color">
         \<Allegory:Lib:Plants:PlantLib\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:trait:quality">
         \<Allegory:Lib:Plants:PlantLib\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:trait:stage">
         \<Allegory:Lib:Plants:PlantLib\>
      </Core:Property>
      <Core:Property property="merry:inherit:timer:death:timer">
         \<Allegory:Lib:Plants:PlantLib\>
      </Core:Property>
      <Core:Property property="merry:inherit:timer:grow">
         \<Allegory:Lib:Plants:PlantLib\>
      </Core:Property>
      <Core:Property property="merry:lib:examine">
         X[M] string emit; 

if(\$this."trait:stage" == 0) \{ 
    if(Int(\$actor."skill:general:gardening") \> plants::get_level(\$plant: \$this)) \{ 
        return UnSAM(ParseXML("You recognize this to be the seed of a " + UnSAM(ParseXML(replace_strings(dump_value(\$this."details:mature-plant:descriptions:brief"), "\$(this.trait:color)", "", "X[S] ", ""))) + ".")); 
    \} else \{ 
        return ""; 
    \} 
\} 
 
if(\$this."trait:stage" == 1) \{ 
    if(Int(\$actor."skill:general:gardening") \> plants::get_level(\$plant: \$this)) \{ 
        return UnSAM(ParseXML("You recognize this to be a " + UnSAM(ParseXML(replace_strings(dump_value(\$this."details:mature-plant:descriptions:brief"), "\$(this.trait:color)", "", "X[S] ", ""))) + " plant.")); 
    \} else \{ 
        return ""; 
    \} 
\} 
 
if(\$this."trait:stage" == 2) \{ 
    if(Int(\$actor."skill:general:gardening") \> plants::get_level(\$plant: \$this)) \{   
        /* emit = UnSAM(ParseXML("You recognize this to be a " + UnSAM(ParseXML(replace_strings(dump_value(\$this."details:mature-plant:descriptions:brief"), "\$(this.trait:color)", "", "X[S] ", ""))) + " plant.")); */ 
        if(\$this."trait:color") emit = UnSAM(ParseXML(" Small " + Str(\$this."trait:color") + " blooms are forming.")); 
        return emit; 
    \} else \{ 
        return ""; 
    \} 
\} 
 
 
if(\$this."trait:stage" == 3 \&\& \$this."trait:plant:noupkeeprequired") return ""; 
 
if(\$this."trait:plant:watered" \&\& sizeof(\$this."trait:plant:watered")) \{ 
    if((time() - \$this."trait:plant:watered"[0]) \< 60*60*24*2) \{ 
        \$watered = 1; 
    \} else \{ 
        \$watered = 0; 
    \} 
\} else \{ 
    \$watered = 0; 
\} 
 
if(\$this."trait:plant:pruned" \&\& sizeof(\$this."trait:plant:pruned")) \{ 
    if((time() - \$this."trait:plant:pruned"[0]) \< 60*60*24*2) \{ 
        \$pruned = 1; 
    \} else \{ 
        \$pruned = 0; 
    \} 
\} else \{ 
    \$pruned = 0; 
\} 
 
if(Int(\$this."trait:plant:fertilized") \> 0) \{ 
    \$fertilized = 1; 
\} else \{ 
    \$fertilized = 0; 
\} 

if(\$watered == 0 \&\& \$pruned == 0) \{ 
    \$emit = "It has become overgrown and is in need of watering."; 
    if(\$fertilized) \$emit += " It has been fertilized."; 
\} 
 
if(\$watered == 0 \&\& \$pruned == 1) \{ 
    \$emit = "It has been recently trimmed and is in need of watering."; 
    if(\$fertilized) \$emit += " It has been fertilized."; 
\} 
 
if(\$watered == 1 \&\& \$pruned == 0) \{ 
    \$emit = "It has become overgrown and has been recently watered."; 
    if(\$fertilized) \$emit += " It has been fertilized."; 
\} 
 
if(\$watered == 1 \&\& \$pruned == 1 \&\& \$fertilized == 1) \{ 
    \$emit = "It has been recently trimmed, watered, and fertilized."; 
\} 
 
if(\$watered == 1 \&\& \$pruned == 1 \&\& \$fertilized == 0) \{ 
    \$emit = "It has been recently trimmed and watered."; 
\} 
 
return UnSAM(ParseXML(\$emit));
      </Core:Property>
      <Core:Property property="merry:lib:getage">
         X[M] switch(\$stage) \{   
    case 1:   
        return "sprout";   
        break;   
    case 2:   
        return "young-plant";   
        break;   
    case 3:   
        return "mature-plant";   
        break;   
    default:   
 return "seed";   
        break;   
\}
      </Core:Property>
      <Core:Property property="merry:lib:look">
         X[M] string emit; 
/* 
if(\$this."trait:stage" == 0) \{ 
    if(Int(\$actor."skill:general:gardening") \> plants::get_level(\$plant: \$this)) \{ 
        return UnSAM(ParseXML("You recognize this to be the seed of a " + UnSAM(ParseXML(replace_strings(dump_value(\$this."details:mature-plant:descriptions:brief"), "\$(this.trait:color)", "", "X[S] ", ""))) + ".")); 
    \} else \{ 
        return ""; 
    \} 
\} 
 
if(\$this."trait:stage" == 1) \{ 
    if(Int(\$actor."skill:general:gardening") \> plants::get_level(\$plant: \$this)) \{ 
        return UnSAM(ParseXML("You recognize this to be a " + UnSAM(ParseXML(replace_strings(dump_value(\$this."details:mature-plant:descriptions:brief"), "\$(this.trait:color)", "", "X[S] ", ""))) + " plant.")); 
    \} else \{ 
        return ""; 
    \} 
\} 
 
if(\$this."trait:stage" == 2) \{ 
    if(Int(\$actor."skill:general:gardening") \> plants::get_level(\$plant: \$this)) \{   
         emit = UnSAM(ParseXML("You recognize this to be a " + UnSAM(ParseXML(replace_strings(dump_value(\$this."details:mature-plant:descriptions:brief"), "\$(this.trait:color)", "", "X[S] ", ""))) + " plant."));  
        if(\$this."trait:color") emit = UnSAM(ParseXML(" Small " + Str(\$this."trait:color") + " blooms are forming.")); 
        return emit; 
    \} else \{ 
        return ""; 
    \} 
\} 
 
 
if(\$this."trait:stage" == 3 \&\& \$this."trait:plant:noupkeeprequired") return ""; 
*/ 
 
if(\$this."trait:plant:watered" \&\& sizeof(\$this."trait:plant:watered")) \{ 
    if((time() - \$this."trait:plant:watered"[0]) \< 60*60*24*2) \{ 
        \$watered = 1; 
    \} else \{ 
        \$watered = 0; 
    \} 
\} else \{ 
    \$watered = 0; 
\} 
 
if(\$this."trait:plant:pruned" \&\& sizeof(\$this."trait:plant:pruned")) \{ 
    if((time() - \$this."trait:plant:pruned"[0]) \< 60*60*24*2) \{ 
        \$pruned = 1; 
    \} else \{ 
        \$pruned = 0; 
    \} 
\} else \{ 
    \$pruned = 0; 
\} 
 
\$emit = ""; 
if(\$watered == 0 \&\& \$pruned == 0) \{ 
    \$emit = "It has become overgrown and is in need of watering."; 
\} 
 
if(\$watered == 0 \&\& \$pruned == 1) \{ 
    \$emit = "It has been recently trimmed and is in need of watering."; 
\} 
 
if(\$watered == 1 \&\& \$pruned == 0) \{ 
    \$emit = "It has become overgrown and has been recently watered."; 
\} 
 
return UnSAM(ParseXML(\$emit));
      </Core:Property>
      <Core:Property property="merry:react:add-iob%fertilizer">
         X[M] \$plant = \$this; 
 
if(!\$dob \|\| !sizeof(\$dob)) \{ 
    EmitTo(\$actor, "What did you want to add to " + Describe(\$this, nil, \$actor) + "?"); 
    return FALSE; 
\} 
 
if(sizeof(\$dob) \> 1) \{ 
    EmitTo(\$actor, "You can only add one thing to " + Describe(\$this, nil, \$actor) + " at a time."); 
    return FALSE; 
\} 
 
\$fertilizer = NRefOb(\$dob[0]); 
 
if(\$fertilizer."base:environment" != \$actor) \{ 
    EmitTo(\$actor, "You must be holding " + Describe(\$fertilizer) + "."); 
    return FALSE; 
\} 
 
if(\$fertilizer."trait:objecttype" != "fertilizer") \{ 
    EmitTo(\$actor, "You can't combine those objects."); 
    return FALSE; 
\} 
 
if(\$fertilizer."trait:empty") \{ 
    EmitTo(\$actor, Describe(\$fertilizer) + " is empty."); 
    return FALSE; 
\} 
 
if(!\$plant."trait:plant:acceptsfertilizer") \{ 
    EmitTo(\$actor, "You can't combine those objects."); 
    return FALSE; 
\} 

if(\$plant."trait:plant:fertilized") \{ 
    EmitTo(\$actor, Describe(\$plant, nil, \$actor) + " has already been fertilized."); 
    return FALSE; 
\} 
 
\$skill = Int(\$actor."skill:general:gardening"); 
 
if(\$skill \< plants::get_level(\$plant: \$plant) \&\& \$plant."trait:stage" != 3) \{ 
    EmitTo(\$actor, "Upkeep for " + Describe(\$this) + " will require the hands of a more skilled gardener. At least until it's fully grown."); 
    return FALSE; 
\} 
 
\$plant."trait:plant:fertilized" = \$fertilizer."trait:quality"; 
 
\$fertilizer."trait:quantity" = Int(\$fertilizer."trait:quantity") - 1; 
if(\$fertilizer."trait:quantity" == 0) \$fertilizer."trait:empty" = "empty"; 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:harvest-dob">
         X[M] Call(\$this, "harvest");         
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react:pick-dob">
         X[M] Call(\$this, "harvest");         
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react:poke-dob">
         X[M] plants::describe_growth(\$plant: \$this);     
return FALSE;
      </Core:Property>
      <Core:Property property="merry:witness:enter-from">
         X[M] if(!\$this."trait:plant:planter" \&\& \$this."base:immobile" \&\& !\$this."guild:fixedby" \&\& !\$this."handles:growth:timer") \{ 
    \$this."trait:stage" = \$this."trait:stage"; 
    \$nogrow = plants::regenerate_produce(\$plant: \$this, \$newquality: 0); 
 
    if(!\$this."handles:growth:timer" \&\& !\$nogrow) \{ 
        if(\$this."trait:quality" == 0) \$this."trait:quality" = 8; 
        Call(\$this, "grow", \$plant: \$this, \$stage: \$this."trait:stage"); 
    \} 
\} 
 
return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1510762027, "jominey", "E", 1510762032, "jominey", "E", 1517349009, "jominey", "E", 1528312651, "jominey", "E", 1528313847, "jominey", "E", 1567961973, "sendnoodlez", "R", 1567962120, "sendnoodlez", "R", 1572190129, "sendnoodlez", "X", 1572752760, "jominey", "E", 1572752802, "jominey", "E", 1572753246, "jominey", "E", 1572753454, "jominey", "E", 1572753477, "jominey", "E", 1572753504, "jominey", "E", 1575514755, "jominey", "E", 1575514798, "jominey", "E", 1575514886, "jominey", "E", 1575515183, "jominey", "E", 1596067779, "jominey", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="trait:stage">3</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes>
      <Notes:Category cat="QA" catstate="Open">
        <Notes:Note ix="1356913357" state="Open" user="jominey">
           empty
        </Notes:Note>
      </Notes:Category>
    </Notes:Notes>
  </Base:Thing>
</object>
