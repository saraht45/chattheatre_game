<object clone="/base/obj/thing" owner="jominey">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Allegory:Setting:Outlands:UrOutlands)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="1"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             an ocean shoreline
          </Base:Description>
          <Base:Description type="examine">
             <describe what="NREF(Allegory:Setting:UrOutside|sky)" looker="$(object)" cap="1"/> glitters<night> dimly</night> upon the <describe what="NREF(Allegory:Setting:Outlands:UrOutlands|waves)" looker="$(object)"/> lapping at the shoreline, <describe what="NREF(Allegory:Setting:Outlands:UrOutlands|sand)" looker="$(object)"/> <spring> warm</spring><summer> hot</summer><autumn> cool</autumn><winter> cold</winter> beneath you. $(parent-desc)<sbr/><sbr/> <show-exits/>
          </Base:Description>
          <Base:Description type="glance">
             <describe what="NREF(Allegory:Setting:UrOutside|sky)" looker="$(object)" cap="1"/> glitters<night> dimly</night> upon the <describe what="NREF(Allegory:Setting:Outlands:UrOutlands|waves)" looker="$(object)"/> lapping at the shoreline, <describe what="NREF(Allegory:Setting:Outlands:UrOutlands|sand)" looker="$(object)"/> <spring> warm</spring><summer> hot</summer><autumn> cool</autumn><winter> cold</winter> beneath you. $(parent-desc)<sbr/><sbr/> <show-exits/>
          </Base:Description>
          <Base:Description type="look">
             <describe what="NREF(Allegory:Setting:UrOutside|sky)" looker="$(object)" cap="1"/> glitters<night> dimly</night> upon the <describe what="NREF(Allegory:Setting:Outlands:UrOutlands|waves)" looker="$(object)"/> lapping at the shoreline, <describe what="NREF(Allegory:Setting:Outlands:UrOutlands|sand)" looker="$(object)"/> <spring> warm</spring><summer> hot</summer><autumn> cool</autumn><winter> cold</winter> beneath you. $(parent-desc)<sbr/><sbr/> <show-exits/>
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="city" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="rinascita"/>
            <Base:SName sname="city"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="cities"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             the city of Rinascita in the distance
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="cliff" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="cliff"/>
            <Base:SName sname="face"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="cliffs"/>
            <Base:PName pname="faces"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             the rocky face of the cliff
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="dirt" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="dirt"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="dirts"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="distance" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="distance"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="distances"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             the distance
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="horizon" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="horizon"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="horizons"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="ocean" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="ocean"/>
            <Base:SName sname="sea"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="oceans"/>
            <Base:PName pname="seas"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="sand" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="sand"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="sands"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="scents" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="scent"/>
            <Base:SName sname="smell"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="scents"/>
            <Base:PName pname="smells"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="sounds" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="sound"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="sounds"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="view" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="view"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="views"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="water" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="water"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="waters"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="waves" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="wave"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="waves"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:backup:fishing:ocean:fisharray">
         (\{ \<Allegory:Props:Animals:Fish:OddCatches:Seaweed\>, \<Allegory:Props:Animals:Fish:OddCatches:BrokenShell\>, \<Allegory:Props:Animals:Fish:OddCatches:Driftwood\>, \<Allegory:Props:Animals:Fish:OddCatches:EmptyContainer\>, \<Allegory:Props:Animals:Fish:OddCatches:FishingLine\>, \<Allegory:Props:Animals:Fish:OddCatches:SoggyScroll\>, \<Allegory:Props:Animals:Fish:OddCatches:Boots\>, \<Allegory:Props:Animals:Fish:OddCatches:RustyBucket\>, \<Allegory:Props:Animals:Fish:Saltwater:Bonefish\>, \<Allegory:Props:Animals:Fish:Saltwater:Weakfish\>, \<Allegory:Props:Animals:Fish:Saltwater:Gag\>, \<Allegory:Props:Animals:Fish:Saltwater:Scamp\>, \<Allegory:Props:Animals:Fish:Saltwater:SilverPerch\>, \<Allegory:Props:Animals:Fish:Saltwater:Bluefish\>, \<Allegory:Props:Animals:Fish:Saltwater:BlackDrum\>, \<Allegory:Props:Animals:Fish:Saltwater:BlackGrouper\>, \<Allegory:Props:Animals:Fish:Saltwater:Croaker\>, \<Allegory:Props:Animals:Fish:Saltwater:RedDrum\>, \<Allegory:Props:Animals:Fish:Saltwater:SandSeatrout\>, \<Allegory:Props:Animals:Fish:Saltwater:YellowfinGrouper\>, \<Allegory:Props:Animals:Fish:Saltwater:Spearfish\>, \<Allegory:Props:Animals:Fish:Saltwater:Jewfish\>, \<Allegory:Props:Animals:Fish:Saltwater:LefteyeFlounder\>, \<Allegory:Props:Animals:Fish:Saltwater:RedGrouper\>, \<Allegory:Props:Animals:Fish:Saltwater:Cobia\>, \<Allegory:Props:Animals:Fish:Saltwater:SilverSeatrout\>, \<Allegory:Props:Animals:Fish:Saltwater:BlueMarlin\> \})
      </Core:Property>
      <Core:Property property="export:backup:fishing:water:fisharray">
         (\{ \<Allegory:Props:Animals:Fish:OddCatches:Seaweed\>, \<Allegory:Props:Animals:Fish:OddCatches:BrokenShell\>, \<Allegory:Props:Animals:Fish:OddCatches:Driftwood\>, \<Allegory:Props:Animals:Fish:OddCatches:EmptyContainer\>, \<Allegory:Props:Animals:Fish:OddCatches:FishingLine\>, \<Allegory:Props:Animals:Fish:OddCatches:SoggyScroll\>, \<Allegory:Props:Animals:Fish:OddCatches:Boots\>, \<Allegory:Props:Animals:Fish:OddCatches:RustyBucket\>, \<Allegory:Props:Animals:Fish:Saltwater:Bonefish\>, \<Allegory:Props:Animals:Fish:Saltwater:Weakfish\>, \<Allegory:Props:Animals:Fish:Saltwater:Gag\>, \<Allegory:Props:Animals:Fish:Saltwater:Scamp\>, \<Allegory:Props:Animals:Fish:Saltwater:SilverPerch\>, \<Allegory:Props:Animals:Fish:Saltwater:Bluefish\>, \<Allegory:Props:Animals:Fish:Saltwater:BlackDrum\>, \<Allegory:Props:Animals:Fish:Saltwater:BlackGrouper\>, \<Allegory:Props:Animals:Fish:Saltwater:Croaker\>, \<Allegory:Props:Animals:Fish:Saltwater:RedDrum\>, \<Allegory:Props:Animals:Fish:Saltwater:SandSeatrout\>, \<Allegory:Props:Animals:Fish:Saltwater:YellowfinGrouper\>, \<Allegory:Props:Animals:Fish:Saltwater:Spearfish\>, \<Allegory:Props:Animals:Fish:Saltwater:Jewfish\>, \<Allegory:Props:Animals:Fish:Saltwater:LefteyeFlounder\>, \<Allegory:Props:Animals:Fish:Saltwater:RedGrouper\>, \<Allegory:Props:Animals:Fish:Saltwater:Cobia\>, \<Allegory:Props:Animals:Fish:Saltwater:SilverSeatrout\>, \<Allegory:Props:Animals:Fish:Saltwater:BlueMarlin\> \})
      </Core:Property>
      <Core:Property property="export:fishing:ocean:fisharray">
         (\{ \<Allegory:Props:Animals:Fish:OddCatches:Seaweed\>, \<Allegory:Props:Animals:Fish:OddCatches:BrokenShell\>, \<Allegory:Props:Animals:Fish:OddCatches:Driftwood\>, \<Allegory:Props:Animals:Fish:OddCatches:EmptyContainer\>, \<Allegory:Props:Animals:Fish:OddCatches:FishingLine\>, \<Allegory:Props:Animals:Fish:OddCatches:SoggyScroll\>, \<Allegory:Props:Animals:Fish:OddCatches:Boots\>, \<Allegory:Props:Animals:Fish:OddCatches:RustyBucket\>, \<Allegory:Props:Animals:Fish:Saltwater:Bonefish\>, \<Allegory:Props:Animals:Fish:Saltwater:Bonefish\>, \<Allegory:Props:Animals:Fish:Saltwater:Bonefish\>, \<Allegory:Props:Animals:Fish:Saltwater:Weakfish\>, \<Allegory:Props:Animals:Fish:Saltwater:Weakfish\>, \<Allegory:Props:Animals:Fish:Saltwater:Weakfish\>, \<Allegory:Props:Animals:Fish:Saltwater:Gag\>, \<Allegory:Props:Animals:Fish:Saltwater:Gag\>, \<Allegory:Props:Animals:Fish:Saltwater:Gag\>, \<Allegory:Props:Animals:Fish:Saltwater:Scamp\>, \<Allegory:Props:Animals:Fish:Saltwater:Scamp\>, \<Allegory:Props:Animals:Fish:Saltwater:Scamp\>, \<Allegory:Props:Animals:Fish:Saltwater:SilverPerch\>, \<Allegory:Props:Animals:Fish:Saltwater:SilverPerch\>, \<Allegory:Props:Animals:Fish:Saltwater:SilverPerch\>, \<Allegory:Props:Animals:Fish:Saltwater:Bluefish\>, \<Allegory:Props:Animals:Fish:Saltwater:Bluefish\>, \<Allegory:Props:Animals:Fish:Saltwater:Bluefish\>, \<Allegory:Props:Animals:Fish:Saltwater:BlackDrum\>, \<Allegory:Props:Animals:Fish:Saltwater:BlackDrum\>, \<Allegory:Props:Animals:Fish:Saltwater:BlackDrum\>, \<Allegory:Props:Animals:Fish:Saltwater:BlackGrouper\>, \<Allegory:Props:Animals:Fish:Saltwater:BlackGrouper\>, \<Allegory:Props:Animals:Fish:Saltwater:BlackGrouper\>, \<Allegory:Props:Animals:Fish:Saltwater:Croaker\>, \<Allegory:Props:Animals:Fish:Saltwater:Croaker\>, \<Allegory:Props:Animals:Fish:Saltwater:Croaker\>, \<Allegory:Props:Animals:Fish:Saltwater:RedDrum\>, \<Allegory:Props:Animals:Fish:Saltwater:RedDrum\>, \<Allegory:Props:Animals:Fish:Saltwater:RedDrum\>, \<Allegory:Props:Animals:Fish:Saltwater:SandSeatrout\>, \<Allegory:Props:Animals:Fish:Saltwater:SandSeatrout\>, \<Allegory:Props:Animals:Fish:Saltwater:SandSeatrout\>, \<Allegory:Props:Animals:Fish:Saltwater:YellowfinGrouper\>, \<Allegory:Props:Animals:Fish:Saltwater:YellowfinGrouper\>, \<Allegory:Props:Animals:Fish:Saltwater:YellowfinGrouper\>, \<Allegory:Props:Animals:Fish:Saltwater:Spearfish\>, \<Allegory:Props:Animals:Fish:Saltwater:Spearfish\>, \<Allegory:Props:Animals:Fish:Saltwater:Spearfish\>, \<Allegory:Props:Animals:Fish:Saltwater:Jewfish\>, \<Allegory:Props:Animals:Fish:Saltwater:Jewfish\>, \<Allegory:Props:Animals:Fish:Saltwater:Jewfish\>, \<Allegory:Props:Animals:Fish:Saltwater:LefteyeFlounder\>, \<Allegory:Props:Animals:Fish:Saltwater:LefteyeFlounder\>, \<Allegory:Props:Animals:Fish:Saltwater:LefteyeFlounder\>, \<Allegory:Props:Animals:Fish:Saltwater:RedGrouper\>, \<Allegory:Props:Animals:Fish:Saltwater:RedGrouper\>, \<Allegory:Props:Animals:Fish:Saltwater:RedGrouper\>, \<Allegory:Props:Animals:Fish:Saltwater:Cobia\>, \<Allegory:Props:Animals:Fish:Saltwater:Cobia\>, \<Allegory:Props:Animals:Fish:Saltwater:Cobia\>, \<Allegory:Props:Animals:Fish:Saltwater:SilverSeatrout\>, \<Allegory:Props:Animals:Fish:Saltwater:SilverSeatrout\>, \<Allegory:Props:Animals:Fish:Saltwater:SilverSeatrout\>, \<Allegory:Props:Animals:Fish:Saltwater:BlueMarlin\>, \<Allegory:Props:Animals:Fish:Saltwater:BlueMarlin\>, \<Allegory:Props:Animals:Fish:Saltwater:BlueMarlin\> \})
      </Core:Property>
      <Core:Property property="export:fishing:stock">
         10
      </Core:Property>
      <Core:Property property="export:fishing:water:fisharray">
         (\{ \<Allegory:Props:Animals:Fish:OddCatches:Seaweed\>, \<Allegory:Props:Animals:Fish:OddCatches:BrokenShell\>, \<Allegory:Props:Animals:Fish:OddCatches:Driftwood\>, \<Allegory:Props:Animals:Fish:OddCatches:EmptyContainer\>, \<Allegory:Props:Animals:Fish:OddCatches:FishingLine\>, \<Allegory:Props:Animals:Fish:OddCatches:SoggyScroll\>, \<Allegory:Props:Animals:Fish:OddCatches:Boots\>, \<Allegory:Props:Animals:Fish:OddCatches:RustyBucket\>, \<Allegory:Props:Animals:Fish:Saltwater:Bonefish\>, \<Allegory:Props:Animals:Fish:Saltwater:Bonefish\>, \<Allegory:Props:Animals:Fish:Saltwater:Bonefish\>, \<Allegory:Props:Animals:Fish:Saltwater:Weakfish\>, \<Allegory:Props:Animals:Fish:Saltwater:Weakfish\>, \<Allegory:Props:Animals:Fish:Saltwater:Weakfish\>, \<Allegory:Props:Animals:Fish:Saltwater:Gag\>, \<Allegory:Props:Animals:Fish:Saltwater:Gag\>, \<Allegory:Props:Animals:Fish:Saltwater:Gag\>, \<Allegory:Props:Animals:Fish:Saltwater:Scamp\>, \<Allegory:Props:Animals:Fish:Saltwater:Scamp\>, \<Allegory:Props:Animals:Fish:Saltwater:Scamp\>, \<Allegory:Props:Animals:Fish:Saltwater:SilverPerch\>, \<Allegory:Props:Animals:Fish:Saltwater:SilverPerch\>, \<Allegory:Props:Animals:Fish:Saltwater:SilverPerch\>, \<Allegory:Props:Animals:Fish:Saltwater:Bluefish\>, \<Allegory:Props:Animals:Fish:Saltwater:Bluefish\>, \<Allegory:Props:Animals:Fish:Saltwater:Bluefish\>, \<Allegory:Props:Animals:Fish:Saltwater:BlackDrum\>, \<Allegory:Props:Animals:Fish:Saltwater:BlackDrum\>, \<Allegory:Props:Animals:Fish:Saltwater:BlackDrum\>, \<Allegory:Props:Animals:Fish:Saltwater:BlackGrouper\>, \<Allegory:Props:Animals:Fish:Saltwater:BlackGrouper\>, \<Allegory:Props:Animals:Fish:Saltwater:BlackGrouper\>, \<Allegory:Props:Animals:Fish:Saltwater:Croaker\>, \<Allegory:Props:Animals:Fish:Saltwater:Croaker\>, \<Allegory:Props:Animals:Fish:Saltwater:Croaker\>, \<Allegory:Props:Animals:Fish:Saltwater:RedDrum\>, \<Allegory:Props:Animals:Fish:Saltwater:RedDrum\>, \<Allegory:Props:Animals:Fish:Saltwater:RedDrum\>, \<Allegory:Props:Animals:Fish:Saltwater:SandSeatrout\>, \<Allegory:Props:Animals:Fish:Saltwater:SandSeatrout\>, \<Allegory:Props:Animals:Fish:Saltwater:SandSeatrout\>, \<Allegory:Props:Animals:Fish:Saltwater:YellowfinGrouper\>, \<Allegory:Props:Animals:Fish:Saltwater:YellowfinGrouper\>, \<Allegory:Props:Animals:Fish:Saltwater:YellowfinGrouper\>, \<Allegory:Props:Animals:Fish:Saltwater:Spearfish\>, \<Allegory:Props:Animals:Fish:Saltwater:Spearfish\>, \<Allegory:Props:Animals:Fish:Saltwater:Spearfish\>, \<Allegory:Props:Animals:Fish:Saltwater:Jewfish\>, \<Allegory:Props:Animals:Fish:Saltwater:Jewfish\>, \<Allegory:Props:Animals:Fish:Saltwater:Jewfish\>, \<Allegory:Props:Animals:Fish:Saltwater:LefteyeFlounder\>, \<Allegory:Props:Animals:Fish:Saltwater:LefteyeFlounder\>, \<Allegory:Props:Animals:Fish:Saltwater:LefteyeFlounder\>, \<Allegory:Props:Animals:Fish:Saltwater:RedGrouper\>, \<Allegory:Props:Animals:Fish:Saltwater:RedGrouper\>, \<Allegory:Props:Animals:Fish:Saltwater:RedGrouper\>, \<Allegory:Props:Animals:Fish:Saltwater:Cobia\>, \<Allegory:Props:Animals:Fish:Saltwater:Cobia\>, \<Allegory:Props:Animals:Fish:Saltwater:Cobia\>, \<Allegory:Props:Animals:Fish:Saltwater:SilverSeatrout\>, \<Allegory:Props:Animals:Fish:Saltwater:SilverSeatrout\>, \<Allegory:Props:Animals:Fish:Saltwater:SilverSeatrout\>, \<Allegory:Props:Animals:Fish:Saltwater:BlueMarlin\>, \<Allegory:Props:Animals:Fish:Saltwater:BlueMarlin\>, \<Allegory:Props:Animals:Fish:Saltwater:BlueMarlin\> \})
      </Core:Property>
      <Core:Property property="export:float:script">
         X[M] return Call(\$\{IronClaw:Lib:Common\}, "float_on_water");
      </Core:Property>
      <Core:Property property="export:place:script">
         X[M] return Call(\$\{IronClaw:Lib:Common\}, "place_in_water");
      </Core:Property>
      <Core:Property property="export:swimming:waterdetails">
         (\{ "ocean", "water", "waves" \})
      </Core:Property>
      <Core:Property property="float:script">
         X[M] return Call(\$\{IronClaw:Lib:Common\}, "float_on_water");
      </Core:Property>
      <Core:Property property="merry:react-post:enter-from">
         X[M] \$actor."merry:act-post:stance" = \$this."float:script";            
\$actor."merry:act-post:approach" = \$this."float:script";            
\$actor."merry:act-post:leave" = \$this."float:script";            
\$actor."merry:act-post:place" = \$this."place:script";            
\$actor."merry:act-post:zthrow" = \$this."place:script";            
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:fill-iob">
         X[M] /* D=Refill first appropriate container in actor's inventory from this vessel. */        
constant THE = STYLE_DEFINITE \| STYLE_NONPOSS;        
object liquid, container, refiller, holder;        
int    potential;        
if (!sizeof(this."base:inventory")) \{        
    EmitTo(\$actor, Describe(this, nil, nil, THE) + " can not provide you any water now.");        
    return FALSE;        
\}        
container = shared_drink::find_container_for(\$what: this."base:inventory"[0]."core:ur:parent", \$where: \$actor, \$tight: 1);        
if (!container) \{        
    EmitTo(\$actor, "You are not holding a vessel of any kind which could be filled with " + Describe(this."base:inventory"[0]) + ".");        
    return FALSE;        
\}        
holder = this."base:holder";        
if (holder \&\& holder."base:volition" \&\& holder != \$actor) \{        
    if (\$actor."base:proximity" != holder \&\& holder."base:proximity" != \$actor) \{        
        EmitTo(\$actor, "You must approach " + Describe(holder) + " in order to do that.");        
        return FALSE;        
    \}        
\}        
if (shared_drink::liquid_transfer(\$from: this, \$into: container)) \{        
    /* Transfer was successful. */        
    EmitTo(\$actor, "You collect " + Describe(this, nil, nil, THE) + "'s contents into " + Describe(container, nil, \$actor) + "." + (\$emptied ? " " + capitalize(Describe(this, nil, nil, THE)) + " can not provide any water now." : ""));        
    EmitIn(\$actor."base:environment", Describe(\$actor) + " collects some of " + Describe(this, nil, nil, THE) + "'s contents into " + Describe(container, \$actor) + "." + (\$emptied ? " " + capitalize(Describe(this, nil, nil, THE)) + " can not provide any water now." : ""), \$actor);        
\}
      </Core:Property>
      <Core:Property property="merry:react-post:refill-iob">
         X[M] /* D=Refill first appropriate container in actor's inventory from this vessel. */        
constant THE = STYLE_DEFINITE \| STYLE_NONPOSS;        
object liquid, container, refiller, holder;        
int    potential;        
if (!sizeof(this."base:inventory")) \{        
    EmitTo(\$actor, Describe(this, nil, nil, THE) + " can not provide you any water now.");        
    return FALSE;        
\}        
container = shared_drink::find_container_for(\$what: this."base:inventory"[0]."core:ur:parent", \$where: \$actor, \$tight: 1);        
if (!container) \{        
    EmitTo(\$actor, "You are not holding a vessel of any kind which could be filled with " + Describe(this."base:inventory"[0]) + ".");        
    return FALSE;        
\}        
holder = this."base:holder";        
if (holder \&\& holder."base:volition" \&\& holder != \$actor) \{        
    if (\$actor."base:proximity" != holder \&\& holder."base:proximity" != \$actor) \{        
        EmitTo(\$actor, "You must approach " + Describe(holder) + " in order to do that.");        
        return FALSE;        
    \}        
\}        
if (shared_drink::liquid_transfer(\$from: this, \$into: container)) \{        
    /* Transfer was successful. */        
    EmitTo(\$actor, "You collect " + Describe(this, nil, nil, THE) + "'s contents into " + Describe(container, nil, \$actor) + "." + (\$emptied ? " " + capitalize(Describe(this, nil, nil, THE)) + " can not provide any water now." : ""));        
    EmitIn(\$actor."base:environment", Describe(\$actor) + " collects some of " + Describe(this, nil, nil, THE) + "'s contents into " + Describe(container, \$actor) + "." + (\$emptied ? " " + capitalize(Describe(this, nil, nil, THE)) + " can not provide any water now." : ""), \$actor);        
\}
      </Core:Property>
      <Core:Property property="merry:react-post:tap-iob">
         X[M] /* D=Refill first appropriate container in actor's inventory from this vessel. */        
constant THE = STYLE_DEFINITE \| STYLE_NONPOSS;        
object liquid, container, refiller, holder;        
int    potential;        
if (!sizeof(this."base:inventory")) \{        
    EmitTo(\$actor, Describe(this, nil, nil, THE) + " can not provide you any water now.");        
    return FALSE;        
\}        
container = shared_drink::find_container_for(\$what: this."base:inventory"[0]."core:ur:parent", \$where: \$actor, \$tight: 1);        
if (!container) \{        
    EmitTo(\$actor, "You are not holding a vessel of any kind which could be filled with " + Describe(this."base:inventory"[0]) + ".");        
    return FALSE;        
\}        
holder = this."base:holder";        
if (holder \&\& holder."base:volition" \&\& holder != \$actor) \{        
    if (\$actor."base:proximity" != holder \&\& holder."base:proximity" != \$actor) \{        
        EmitTo(\$actor, "You must approach " + Describe(holder) + " in order to do that.");        
        return FALSE;        
    \}        
\}        
if (shared_drink::liquid_transfer(\$from: this, \$into: container)) \{        
    /* Transfer was successful. */        
    EmitTo(\$actor, "You collect " + Describe(this, nil, nil, THE) + "'s contents into " + Describe(container, nil, \$actor) + "." + (\$emptied ? " " + capitalize(Describe(this, nil, nil, THE)) + " can not provide any water now." : ""));        
    EmitIn(\$actor."base:environment", Describe(\$actor) + " collects some of " + Describe(this, nil, nil, THE) + "'s contents into " + Describe(container, \$actor) + "." + (\$emptied ? " " + capitalize(Describe(this, nil, nil, THE)) + " can not provide any water now." : ""), \$actor);        
\}
      </Core:Property>
      <Core:Property property="place:script">
         X[M] return Call(\$\{IronClaw:Lib:Common\}, "place_in_water");
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1144052085, "-", "SYNC", 1221752477, "???", "R", 1563594167, "jominey", "E", 1563598496, "jominey", "E", 1569183832, "sendnoodlez", "K", 1569183965, "sendnoodlez", "E", 1569184086, "sendnoodlez", "E", 1569360192, "sendnoodlez", "K", 1569360197, "sendnoodlez", "E", 1569360234, "sendnoodlez", "K", 1569360545, "sendnoodlez", "K", 1569360670, "sendnoodlez", "K", 1569360696, "sendnoodlez", "K", 1573412232, "sendnoodlez", "E", 1591298337, "sendnoodlez", "X", 1591298380, "sendnoodlez", "X", 1591298446, "sendnoodlez", "X" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
