<object clone="/base/obj/thing" owner="librarysage">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Allegory:Setting:Rinascita:Sewers:UrJunction)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="1"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="true" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="mapurl">
             <mapurl interior="1" cat="Sewers">Sewer33.jpg</mapurl>
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="exit-north" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="tunnel"/>
            <Base:SName sname="north"/>
            <Base:SName sname="exit"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="tunnels"/>
            <Base:PName pname="exits"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="north"/>
          <Base:Adjective adjective="northern"/>
          <Base:Adjective adjective="sewer"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             a sewer tunnel leading north
          </Base:Description>
          <Base:Description type="look">
             A sewer tunnel continues to the north. $(parent-desc)
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit dest="NREF(Allegory:Setting:Rinascita:Sewers:32|exit-south)" door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false">
          <Base:Direction dir="north"/>
        </Base:Exit>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="exit-west" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="br"/>
            <Base:SName sname="bridge"/>
            <Base:SName sname="west"/>
            <Base:SName sname="exit"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="bridges"/>
            <Base:PName pname="exits"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="iron"/>
          <Base:Adjective adjective="west"/>
          <Base:Adjective adjective="western"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             an iron bridge leading west
          </Base:Description>
          <Base:Description type="examine">
             The sewer tunnel ends abruptly to the west. Continuing beyond the opening is a narrow iron bridge that extends over a yawning expanse that stretches out ahead.  At the opposite end you can barely see a stone platform. Dropping about 100 feet down is a huge basin of collected sewage. To the south of the abyss is a huge pipe that gushes a waterfall of dirty water down below. $(parent-desc)
          </Base:Description>
          <Base:Description type="look">
             The sewer tunnel ends abruptly to the west. Extending from it is an iron bridge that reaches over a vast collected basin of sewage far below. To the south a waterfall of filthy water gushes down constantly. $(parent-desc)
          </Base:Description>
          <Base:Description type="react-desc:movement/arrive">
             You arrive from the bridge to the west, the metal complaining with creaks.
          </Base:Description>
          <Base:Description type="react-desc:movement/leave">
             You move from the sewer tunnel, mounting the metal bridge.
          </Base:Description>
          <Base:Description type="react3-desc:movement/arrive">
             <describe what="$(Actor)" cap="1"/> arrives from the bridge to the west, the metal complaining with creaks.
          </Base:Description>
          <Base:Description type="react3-desc:movement/leave">
             <describe what="$(Actor)" cap="1"/> moves from the sewer tunnel, mounting the metal bridge.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit dest="NREF(Allegory:Setting:Rinascita:Sewers:34|exit-east)" door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false">
          <Base:Direction dir="west"/>
        </Base:Exit>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="corner-northeast" prime="false" def="false" abstract="false" hidden="true" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="corner-northwest" prime="false" def="false" abstract="false" hidden="true" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="corner-southeast" prime="false" def="false" abstract="false" hidden="true" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="corner-southwest" prime="false" def="false" abstract="false" hidden="true" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="corners" prime="false" def="false" abstract="false" hidden="true" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="wall-north" prime="false" def="false" abstract="false" hidden="true" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="wall-south" prime="false" def="false" abstract="false" hidden="true" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="wall-west" prime="false" def="false" abstract="false" hidden="true" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="10"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="active-freq">6</Core:Property>
      <Core:Property property="cday">142</Core:Property>
      <Core:Property property="export:active-freq">6</Core:Property>
      <Core:Property property="export:ironclaw:time">
         12
      </Core:Property>
      <Core:Property property="export:ironclaw:weatherblizzard">
         0
      </Core:Property>
      <Core:Property property="export:ironclaw:weatherclear">
         0
      </Core:Property>
      <Core:Property property="export:ironclaw:weathercloudy">
         0
      </Core:Property>
      <Core:Property property="export:ironclaw:weatherrain">
         0
      </Core:Property>
      <Core:Property property="export:ironclaw:weathersnowground">
         0
      </Core:Property>
      <Core:Property property="export:ironclaw:weathersnowy ">
         0
      </Core:Property>
      <Core:Property property="export:ironclaw:weatherstormy">
         1
      </Core:Property>
      <Core:Property property="is_clear">1</Core:Property>
      <Core:Property property="is_night">1</Core:Property>
      <Core:Property property="is_summer">1</Core:Property>
      <Core:Property property="merry:lib:partition:approach">
         X[M] /* are they climbing up from the basin? */      
if(\$startpartition == "at the bottom of the pit") \{      
 if(\$this."rope:tied") \{      
  EmitTo(\$actor, "You climb up "+Describe(\$this."rope:tied", nil, \$actor)+".");      
  EmitIn(\$actor."base:environment", Describe(\$actor)+" climbs up "+Describe(\$this."rope:tied", \$actor)+".", \$actor);      
 \} else \{      
  EmitTo(\$actor, "You laboriously climb up the extruding pipes, until you reach the top.");      
  EmitIn(\$actor."base:environment", Describe(\$actor)+" laboriously climbs up the extruding pipes, until "+\$actor."base:pronoun"+" reaches the top.", \$actor);      
 \}      
 \$actor."room:partition" = \$targetpartition;      
 return TRUE;      
\}      
/* are they trying to climb down to the basin? */      
if(\$startpartition == nil \&\& \$targetpartition == "at the bottom of the pit") \{      
 if(\$this."rope:tied") \{      
  EmitTo(\$actor, "You climb down "+Describe(\$this."rope:tied", nil, \$actor)+".");      
  EmitIn(\$actor."base:environment", Describe(\$actor)+" climbs down "+Describe(\$this."rope:tied", \$actor)+".", \$actor);      
  \$actor."room:partition" = \$targetpartition;      
  return TRUE;      
 \} else \{      
  EmitTo(\$actor, "You'll need to find some way to climb down.");      
  return FALSE;      
 \}      
\}      
      
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-post:door/opens">
         X[M] /* auto-close the door 10 to 45 seconds after opening it */  
if (NRefDetail(\$target) == "exit-south")  
  Call(\$\{Lib:door\}, "self-closing", \$target: \$target, \$time: random(35) + 10);  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:zthrow-through%sinking">
         X[M] if(!\$target) return TRUE;      
if(!\$what) return TRUE;      
if(NRefDetail(\$target) != "basin") return TRUE;      
      
EmitIn(NRefOb(\$what[0])."base:environment", Describe(\$what)+" sinks into the murky water, and is lost from sight.");      
ironclaw::safedelete(\$what: \$what);      
      
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:enter-from%rope">
         X[M] /* are they entering another room? */      
if(\$this."rope:tied") \{      
 /* A rope is tied. Does \$actor have it? */      
 if(member(\$this."rope:tied", \$actor."base:deep-inventory")) \{      
  /* they have it. */      
  /* link the rope to our coil rather than the exit */      
  \$this."rope:first".secondend = NewNRef(\$this."rope:tied", "default");      
  /* and destroy the rope in the tunnel */      
  if(\$this."rope:second")      
   Slay(\$this."rope:second");      
 \}      
\}      
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:enter-into%rope">
         X[M] /* are they trying to swim? */      
if(NRefDetail(\$target) == "basin") \{      
 /* can they go through the water? */      
 /* are they a swimming creature? */      
 if(!\$actor."bonus:mental:swimming") \{      
  /* they're a swimming creature */      
  if(!\$this."rope:second") \{      
   EmitTo(\$actor, "You really don't think it'd be a good idea to try swimming through there. Without something to guide your way through the underwater tunnel like, say, a rope, you are convinced you'd get lost. You'd better let someone better at swimming go through instead.");      
   return FALSE;      
  \}      
 \}      
 /* trying to swim. They can't swim through when carrying things */      
 for(\$i=0;\$i\<sizeof(\$actor."base:deep-inventory");\$i++) \{      
  if(!\$actor."base:deep-inventory"[\$i].skyclad \&\& Int(\$actor."base:deep-inventory"[\$i]."last:waterproofed") \< time()-60*60*24*3) \{      
   /* they're carrying something they can't swim with */      
   EmitTo(\$actor, "You are wearing or carrying too much to swim through here. You'd need to strip down for swimming, and waterproof any items you're taking.");      
   return FALSE;      
  \}      
 \}      
\}      
      
      
/* are they entering another room? */      
if(\$this."rope:tied") \{      
 /* A rope is tied. Does \$actor have it? */      
 if(member(\$this."rope:tied", \$actor."base:deep-inventory")) \{      
  /* they have it. Is the exit through the tunnel? */      
  if(NRefDetail(\$target) != "basin") \{      
   EmitTo(\$actor, "Do you really want to leave this room, while holding a rope that's still tied to the bridge?");      
   return FALSE;      
  \}      
  /* they're swimming through with the rope */      
  \$this."rope:first".secondend = \$target;      
  if(!\$this."rope:second") \{      
   \$newrope = Spawn(\$\{Ironclaw:Props:Misc:Items:Rope-tied\});      
   \$newrope."base:environment" = \$\{Ironclaw:Props:Plot:Spider:QueenRoomTunnel\};      
   \$newrope."tied:owner" = \$this;      
   \$newrope.firstend = NewNRef(\$\{Ironclaw:Props:Plot:Spider:QueenRoomTunnel\}, "exit-south");      
   \$newrope.secondend = NewNRef(\$this."rope:tied", "default");      
   \$newrope."base:stance" = 3;      
   \$newrope."base:immobile" = TRUE;      
   \$this."rope:second" = \$newrope;      
  \}      
 \}      
\}      
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:jab-dob">
         X[M] /* Open a secret passage */  
if (NRefDetail(\$target) ==  "holes") \{  
  EmitTo(\$actor, "You jab "+Describe(\$target, nil, \$actor)+", and faintly hear a click.");  
  EmitIn(\$actor."base:environment", Describe(\$actor)+" rummages in the shadows until a fain click is heard.", \$actor);  
  if (this."details:exit-south:exit:closed") \{           
    this."details:exit-south:exit:closed" = FALSE;           
  \}           
  return FALSE; /* Return false to stop the normal emote from happening */  
\}  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:tie-iob%rope">
         X[M] /* let them tie a rope to the metal bar, to reach the basin */      
if(\$iob \&\& \$dob      
  \&\& sizeof(\$iob) == 1      
  \&\& sizeof(\$dob) == 1      
  \&\& NRefOb(\$dob[0])."trait:rope"      
  \&\& NRefDetail(\$iob[0]) == "metalbar") \{      
   if(\$this."rope:tied") \{      
    EmitTo(\$actor, "There already appears to be a rope attached to "+Describe(\$iob)+".");      
    return FALSE;      
   \}      
   EmitTo(\$actor, "You tie one end of "+Describe(\$dob, nil, \$actor)+" to "+Describe(\$iob)+", lowering a length down to "+Describe(NewNRef(\$this, "basin"))+".");      
   EmitIn(\$actor."base:environment", Describe(\$actor)+" ties one end of "+Describe(\$dob, \$actor)+" to "+Describe(\$iob)+", lowering a length down to "+Describe(NewNRef(\$this, "basin"))+".", \$actor);      
   \$newrope = Spawn(\$\{Ironclaw:Props:Misc:Items:Rope-tied\});      
   \$newrope."base:environment" = \$this;      
   \$newrope."tied:owner" = \$this;      
   \$newrope.firstend = \$iob[0];      
   \$newrope.secondend = \$dob[0];      
   \$newrope."base:stance" = 3;      
   \$newrope."base:immobile" = TRUE;      
   NRefOb(\$dob[0])."rope:tied" = \$iob[0];      
   \$this."rope:tied" = NRefOb(\$dob[0]);      
   \$this."rope:first" = \$newrope;      
   return FALSE;      
\}      
return TRUE;
      </Core:Property>
      <Core:Property property="oprops">
         (\{ "is_clear", "is_summer", "is_night" \})
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1337322887, "meandmine", "X", 1337322950, "meandmine", "E", 1337351292, "meandmine", "X", 1337351393, "meandmine", "X", 1345403983, "meandmine", "E", 1345936208, "meandmine", "E", 1570817015, "sendnoodlez", "R", 1570826120, "sendnoodlez", "E", 1570826254, "sendnoodlez", "X", 1570826338, "sendnoodlez", "K", 1570826533, "sendnoodlez", "E", 1570827013, "sendnoodlez", "K", 1622381981, "sendnoodlez", "K", 1622382027, "sendnoodlez", "K" \})
      </Core:Property>
      <Core:Property property="room:partition:basin">
         "at the bottom of the pit"
      </Core:Property>
      <Core:Property property="searching:random:floor">
         (\{ (\{ \<IronClaw:Props:Fishing:Tools:Rock\> \}), (\{ \<IronClaw:Props:Misc:Moss\> \}), (\{ \<IronClaw:Props:Medic:Witchmoss\> \}), (\{ \<IronClaw:Props:Medic:Witchmoss\> \}) \})
      </Core:Property>
      <Core:Property property="searching:randomobjects">
         8
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="sys:emit:population">
         (\{ nil \})
      </Core:Property>
      <Core:Property property="trait:smells">([  ])</Core:Property>
      <Core:Property property="trait:smells:lastchecked">
         1586913497
      </Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes>
      <Notes:Category cat="QA" catstate="Open">
        <Notes:Note ix="1141351211" state="Open" user="librarysage">
           The junction has been equipted with all 4 exits, all four walls, and the 3 details associated with walls, holes, sewergrates, and pipes.  Walls and details are currently hidden however.  Activate them if a junction is not a complete 4-way as needed.
        </Notes:Note>
      </Notes:Category>
    </Notes:Notes>
  </Base:Thing>
</object>
