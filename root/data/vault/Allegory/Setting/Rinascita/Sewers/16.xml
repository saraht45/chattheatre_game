<object clone="/base/obj/thing" owner="librarysage">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Allegory:Setting:Rinascita:Sewers:UrJunction)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="1"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="-5" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="true" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="mapurl">
             <mapurl interior="1" cat="Sewers">Sewer16.jpg</mapurl>
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="exit-east" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="door"/>
            <Base:SName sname="exit"/>
            <Base:SName sname="east"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="doors"/>
            <Base:PName pname="exits"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="east"/>
          <Base:Adjective adjective="eastern"/>
          <Base:Adjective adjective="hidden"/>
          <Base:Adjective adjective="secret"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             {? | $(this.details:exit-east:exit:closed) |the wet, slimy eastern wall|a secret door leading east}
          </Base:Description>
          <Base:Description type="examine-bright">
             A secret door has appeared in the eastern wall.
          </Base:Description>
          <Base:Description type="examine-dark">
             A secret door has appeared in the eastern wall.
          </Base:Description>
          <Base:Description type="examine-dim">
             A secret door has appeared in the eastern wall.
          </Base:Description>
          <Base:Description type="look-bright">
             A secret door has appeared in the eastern wall.
          </Base:Description>
          <Base:Description type="look-dark">
             A secret door has appeared in the eastern wall.
          </Base:Description>
          <Base:Description type="look-dim">
             A secret door has appeared in the eastern wall.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit dest="NREF(Allegory:Setting:Rinascita:Sewers:17|exit-west)" door="true" never_obvious="false" obvious_when_open="true" hidden_when_closed="true" separate="false" self-locking="false" deadbolt="false">
          <Base:Direction dir="east"/>
        </Base:Exit>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="exit-south" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="tunnel"/>
            <Base:SName sname="south"/>
            <Base:SName sname="exit"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="tunnels"/>
            <Base:PName pname="exits"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="sewer"/>
          <Base:Adjective adjective="south"/>
          <Base:Adjective adjective="southern"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             a sewer tunnel leading south
          </Base:Description>
          <Base:Description type="look">
             A sewer tunnel continues to the south. $(parent-desc)
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit dest="NREF(Allegory:Setting:Rinascita:Sewers:18|exit-north)" door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false">
          <Base:Direction dir="south"/>
        </Base:Exit>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="exit-west" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="tunnel"/>
            <Base:SName sname="west"/>
            <Base:SName sname="exit"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="tunnels"/>
            <Base:PName pname="exits"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="sewer"/>
          <Base:Adjective adjective="west"/>
          <Base:Adjective adjective="western"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             a sewer tunnel leading west
          </Base:Description>
          <Base:Description type="look">
             A sewer tunnel continues to the west. $(parent-desc)
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit dest="NREF(Allegory:Setting:Rinascita:Sewers:15|exit-east)" door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false">
          <Base:Direction dir="west"/>
        </Base:Exit>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="corner-northeast" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames>
            <Base:PName pname="corners"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="corner-northwest" prime="false" def="false" abstract="false" hidden="true" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="corner-southeast" prime="false" def="false" abstract="false" hidden="true" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="corner-southwest" prime="false" def="false" abstract="false" hidden="true" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="corners" prime="false" def="false" abstract="false" hidden="true" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="loose_pipe" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="false" near="true" over="true" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="pipe"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="battered"/>
          <Base:Adjective adjective="iron"/>
          <Base:Adjective adjective="loose"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             battered iron pipe
          </Base:Description>
          <Base:Description type="look">
             A battered iron pipe extending from the east wall. It looks a little loose.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="pipes" prime="false" def="false" abstract="false" hidden="true" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="wall-south" prime="false" def="false" abstract="false" hidden="true" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="wall-west" prime="false" def="false" abstract="false" hidden="true" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="10"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="active-freq">6</Core:Property>
      <Core:Property property="cday">142</Core:Property>
      <Core:Property property="export:active-freq">6</Core:Property>
      <Core:Property property="export:ironclaw:time">
         12
      </Core:Property>
      <Core:Property property="export:ironclaw:weatherblizzard">
         0
      </Core:Property>
      <Core:Property property="export:ironclaw:weatherclear">
         0
      </Core:Property>
      <Core:Property property="export:ironclaw:weathercloudy">
         0
      </Core:Property>
      <Core:Property property="export:ironclaw:weatherrain">
         0
      </Core:Property>
      <Core:Property property="export:ironclaw:weathersnowground">
         0
      </Core:Property>
      <Core:Property property="export:ironclaw:weathersnowy ">
         0
      </Core:Property>
      <Core:Property property="export:ironclaw:weatherstormy">
         1
      </Core:Property>
      <Core:Property property="is_clear">1</Core:Property>
      <Core:Property property="is_night">1</Core:Property>
      <Core:Property property="is_summer">1</Core:Property>
      <Core:Property property="merry:lib:injure">
         X[M] /*                
** \$who                
** \$where                
*/                
                
\$armor_rating = Int(\$who."career:combat:armor")+Int(\$who."skill:combat:armor");                
if(\$armor_rating \> Int(\$who."combat:armor:rating")) \$armor_rating = Int(\$who."combat:armor:rating");                
                
\$hit = random(12) + 12;                
\$defense = ironclaw::roll(\$roller: \$who, \$skills: (\{ \}), \$bonus: (\{ "trait:body", "skill:combat:endurance", "career:combat:endurance", \$armor_rating \}));                
\$hit = \$hit - \$defense;                
                
if(\$hit \< 1) \$hit = 1;                
if(\$hit \> 6) \$hit = 6;                
                
switch(\$hit) \{                
    case 1:                
        \$adverb = "slight";                
        break;                
    case 2:                
        \$adverb = nil;                
    case 3:                
        \$adverb = "bad";                
        break;                
    case 4:                
        \$adverb = "deep";                
        break;                
    default:                
        \$adverb = "serious";                
\}                
                
Call(\$\{Ironclaw:Lib:Combat:New:hitdescription\}, "describe_hit", \$attacker: \$this, \$action: (\{ "attack", "hurt", \$adverb, \$hit, ([ "injury":\$injury, "lib":\$this ]) \}), \$hitlocation: NewNRef(\$who, \$where), \$victim: \$who);                
                
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:injury:spike">
         X[M] mapping output;               
               
\$desc1 = Describe(\$victim) + " is struck with a  poisoned dart, leaving a " + \$adverb + " wound on " + Describe(\$hitlocation, \$victim) + ".";               
\$desc2 = TAG("You are struck with a poisoned  dart, leaving a " + \$adverb + " wound on " + Describe(\$hitlocation, nil, \$victim) + ".", "imp");               
\$desc3 = Describe(\$victim) + " is struck with a poisoned dart, leaving a " + \$adverb + " wound on " + Describe(\$hitlocation, \$victim) + ".";               
               
output = ([ "desc":nil, "longdesc":nil, "desc1":\$desc1, "desc2":\$desc2, "desc3":\$desc3, "extras":([ ]) ]);               
return output;
      </Core:Property>
      <Core:Property property="merry:lib:trap:spikes">
         X[M] int i;               
               
EmitTo(\$actor, "A muffled click is heard as you step down on a loose brick. A few moments later, small needle-like darts rain down on the entire area.");               
               
EmitIn(\$actor."base:environment", "A muffled click is heard as " + Describe(\$actor) + " steps down on a loose brick. A few moments later, small needle-like darts  rain down on the entire area.", \$actor);               
               
\$delay(3, FALSE, "d2c7");               
               
\$inv = \$this."base:inventory";               
               
for(i = 0; i \< sizeof(\$inv); i++) \{               
    if(\$inv[i]."skotos:charname" \&\& (random(2) \> 0 \|\| \$inv[i] == \$actor)) \{               
        \$hit = random(24) + 1;               
        \$bonus = (\{ "trait:speed" \});               
        \$skills = (\{ "combat:dodge", "mental:observation" \});               
               
        \$dodge = ironclaw::roll(\$roller: \$inv[i], \$skills: (\{ "combat:dodge", "mental:observation" \}), \$bonus: (\{ "trait:speed" \}));               
        \$block = 0;               
               
        if(\$inv[i]."base:shield") \{               
            \$block = ironclaw::roll(\$roller: \$inv[i], \$skills: (\{ "combat:shield", "mental:observation" \}), \$bonus: (\{ "trait:speed" \}));               
        \}               
               
        if(\$dodge \>= \$hit) \{               
            EmitTo(\$inv[i], TAG("You dodge out of the way.", "imp"));               
            EmitIn(\$inv[i]."base:environment", Describe(\$inv[i]) + " dodges out of the way.", \$inv[i]);               
        \} else if(\$block \>= \$hit) \{               
            EmitTo(\$inv[i], TAG("You deflect a spike with your shield", "imp"));               
            EmitIn(\$inv[i]."base:environment", Describe(\$inv[i]) + " deflects a dart with " + Str(\$inv[i]."base:possessive") + " shield.", \$inv[i]);               
        \} else \{               
            \$details = (\{ "back", "right-shoulder", "left-shoulder", "right-ear", "left-ear", "head", "right-arm", "left-arm", "right-side", "left-side", "right-leg", "left-leg", "right-hand", "left-hand" \});               
            \$detail = \$details[random(sizeof(\$details))];               
               
            ::injure(\$who: \$inv[i], \$where: \$detail, \$injury: "injury:spike");               
        \}               
    \}               
\}               
               
\$delay(2, FALSE, "0d2a");               
EmitIn(\$actor."base:environment", "The dart eventually settle and all is still again.");               
               
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:door/opens">
         X[M] if (NRefDetail(\$target) == "exit-east")          
\{          
  Call(\$\{Lib:door\}, "self-closing",          
    \$target: \$target, \$time: random(5) + 10          
  );          
\}
      </Core:Property>
      <Core:Property property="merry:react-post:examine-what">
         X[M] \$delay(1, TRUE, "acfa");              
\$detail = NRefDetail(\$what[0]);              
              
if(Get(\$this, "trap:" + \$detail)) \{              
    \$trap = Get(\$this, "trap:" + \$detail);              
              
    \$difficulty = 8;              
    if(\$trap["difficulty"]) \$difficulty = \$trap["difficulty"];              
              
    if(Get(\$actor, "trap:" + \$trap["type"] + ":spotted:roll")) \{              
        \$roll = Get(\$actor, "trap:" + \$trap["type"] + ":spotted:roll");              
    \} else \{              
        \$roll = ironclaw::roll(\$roller: \$actor, \$skills: (\{ "career:spy", "career:thief", "mental:observation" \}), \$bonus: (\{ \}));              
    \}              
              
    if(\$roll \>= \$difficulty) \{                      
        if(\$trap["disarmed"]) \{              
            EmitTo(\$actor, "Upon closer examination, you notice a pressure plate has been placed beneath a loose brick  here. It has been recently disarmed and is safe to pass over.");              
        \} else \{              
            EmitTo(\$actor, "Upon closer examination, you notice a pressure plate has been placed beneath a loose brick here. It should be disarmed before anyone attempts to go near it.");              
        \}              
              
        if(!Get(\$actor, "trap:" + \$detail + ":spotted")) \{              
            Set(\$actor, "trap:" + \$detail + ":spotted", 1);              
            \$delay(300, FALSE, "7d7d");              
            Set(\$actor, "trap:" + \$detail + ":spotted", nil);              
        \}              
    \}              
\}              
              
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:twist-dob">
         X[M] \$delay(3, TRUE, "acfa");             
\$detail = NRefDetail(\$target) == "loose_pipe";             
             
if(Get(\$this, "trap:" + \$detail)) \{             
    \$trap = Get(\$this, "trap:" + \$detail);             
             
    /* Only do something if the trap hasn't be disarmed */             
    if(!\$trap["disarmed"]) \{             
        /* Check if \$actor has spotted the trap. If so, let them approach safely. */             
        /* Otherwise, trigger the trap and set it as disarmed. */             
        if(Get(\$actor, "trap:" + \$detail + ":spotted")) \{             
            EmitTo(\$actor, "You carefully approach " + Describe(\$what) + " and avoid triggering it in the process.");             
        \} else \{             
            if(FindMerry(\$this, "lib", "trap:" + \$trap["type"])) \{             
                Call(\$this, "trap:" + \$trap["type"]);             
            \}             
             
            \$trap["disarmed"] = 1;             
            Set(\$this, "trap:" + \$detail, \$trap);             
        \}             
    \}             
\}             
             
return TRUE;  
  
  
  
if (NRefDetail(\$target) == "loose_pipe")          
  \{          
  if (this."details:exit-east:exit:closed")          
    \{          
    this."details:exit-east:exit:closed" = 0;          
  \}          
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:disarm-dob">
         X[M] \$detail = NRefDetail(\$dob[0]);             
             
if(Get(\$this, "trap:" + \$detail)) \{             
    \$trap = Get(\$this, "trap:" + \$detail);             
    \$difficulty = \$trap["difficulty"];             
             
    if(!Get(\$actor, "trap:" + \$detail + ":spotted")) \{             
        return TRUE;             
    \}             
             
    if(\$trap["disarmed"]) \{             
        EmitTo(\$actor, "That trap has already been disarmed.");             
    \} else \{             
        EmitTo(\$actor, "You carefully uncover a pressure plate beneath a loose brick and proceed to disarm it. It is now safe to pass over.");             
        EmitIn(\$actor."base:environment", Describe(\$actor) + " carefully uncovers a pressure plate beneath a loose brick and proceeds to disarm it.", \$actor);             
                 
        \$trap["disarmed"] = 0;             
               
        Set(\$this, "trap:" + \$detail, \$trap);             
    \}             
\}
      </Core:Property>
      <Core:Property property="oprops">
         (\{ "is_clear", "is_summer", "is_night" \})
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1349304021, "meandmine", "X", 1349304763, "meandmine", "X", 1349304919, "meandmine", "X", 1349305124, "meandmine", "X", 1570816787, "sendnoodlez", "R", 1570823202, "sendnoodlez", "X", 1570823239, "sendnoodlez", "K", 1570823274, "sendnoodlez", "E", 1570823397, "sendnoodlez", "K", 1622381740, "sendnoodlez", "K" \})
      </Core:Property>
      <Core:Property property="searching:random:floor">
         (\{ (\{ \<IronClaw:Props:Fishing:Tools:Rock\> \}), (\{ \<IronClaw:Props:Fishing:Tools:Rock\> \}), (\{ \<Allegory:Props:Animals:Fish:OddCatches:Boots\> \}), (\{ \<Allegory:Props:Animals:Fish:OddCatches:Boots\> \}), (\{ \<IronClaw:Props:Cleaning:Rags:Random\> \}), (\{ \<IronClaw:Props:Cleaning:Rags:Random\> \}), (\{ \<IronClaw:Props:Misc:Moss\> \}), (\{ \<IronClaw:Props:Misc:Moss\> \}), (\{ \<IronClaw:Props:Misc:Moss\> \}), (\{ \<IronClaw:Props:Medic:Witchmoss\> \}) \})
      </Core:Property>
      <Core:Property property="searching:randomobjects">
         5
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="trait:smells">([  ])</Core:Property>
      <Core:Property property="trait:smells:lastchecked">
         1586026579
      </Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
