<object clone="/base/obj/thing" owner="sendnoodlez">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Allegory:Setting:UrPier)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="1"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             an expanse of beach
          </Base:Description>
          <Base:Description type="examine">
             <describe what="NREF(Allegory:Setting:Rinascita:Coast:Beach:Ur|water)" looker="$(object)" cap="1"/> of the ocean sprawls as far as the eye can see to the south, its waves lapping at<mid> <describe what="NREF(Allegory:Setting:Rinascita:Coast:Beach:Ur|sand)" looker="$(object)"/> at mid</mid><low> <describe what="NREF(Allegory:Setting:Rinascita:Coast:Beach:Ur|sand)" looker="$(object)"/> at low</low><high>the limestone promenade of Via d'Acqua at high</high> tide. The reflection of <describe what="NREF(Allegory:Setting:UrOutside|sky)" looker="$(object)"/> overhead glitters<night> dimly</night> upon <describe what="NREF(Allegory:Setting:Rinascita:Coast:Beach:Ur|waves)" looker="$(object)"/>.<sbr/><sbr/> <show-exits/>
          </Base:Description>
          <Base:Description type="glance">
             <describe what="NREF(Allegory:Setting:Rinascita:Coast:Beach:Ur|water)" looker="$(object)" cap="1"/> of the ocean sprawls as far as the eye can see to the south, its waves lapping at<mid> <describe what="NREF(Allegory:Setting:Rinascita:Coast:Beach:Ur|sand)" looker="$(object)"/> at mid</mid><low> <describe what="NREF(Allegory:Setting:Rinascita:Coast:Beach:Ur|sand)" looker="$(object)"/> at low</low><high>the limestone promenade of Via d'Acqua at high</high> tide. The reflection of <describe what="NREF(Allegory:Setting:UrOutside|sky)" looker="$(object)"/> overhead glitters<night> dimly</night> upon <describe what="NREF(Allegory:Setting:Rinascita:Coast:Beach:Ur|waves)" looker="$(object)"/>.<sbr/><sbr/> <show-exits/>
          </Base:Description>
          <Base:Description type="look">
             <describe what="NREF(Allegory:Setting:Rinascita:Coast:Beach:Ur|water)" looker="$(object)" cap="1"/> of the ocean sprawls as far as the eye can see to the south, its waves lapping at<mid> <describe what="NREF(Allegory:Setting:Rinascita:Coast:Beach:Ur|sand)" looker="$(object)"/> at mid</mid><low> <describe what="NREF(Allegory:Setting:Rinascita:Coast:Beach:Ur|sand)" looker="$(object)"/> at low</low><high>the limestone promenade of Via d'Acqua at high</high> tide. The reflection of <describe what="NREF(Allegory:Setting:UrOutside|sky)" looker="$(object)"/> overhead glitters<night> dimly</night> upon <describe what="NREF(Allegory:Setting:Rinascita:Coast:Beach:Ur|waves)" looker="$(object)"/>.<sbr/><sbr/> <show-exits/>
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="exit-east" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="react-desc:movement/arrive">
             <high>You wade in through the waters of the high tide from an expanse of beach leading east.</high>
          </Base:Description>
          <Base:Description type="react-desc:movement/leave">
             <high>You wade out through the waters of the high tide to an expanse of beach leading east.</high>
          </Base:Description>
          <Base:Description type="react3-desc:movement/arrive">
             <high><describe what="$(Actor)" cap="1"/> wades in through the waters of the high tide from an expanse of beach leading east.</high>
          </Base:Description>
          <Base:Description type="react3-desc:movement/leave">
             <high><describe what="$(Actor)" cap="1"/> wades out through the waters of the high tide to an expanse of beach leading east.</high>
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="exit-northeast" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="react-desc:movement/arrive">
             <high>You wade in through the waters of the high tide from an expanse of beach leading northeast.</high>
          </Base:Description>
          <Base:Description type="react-desc:movement/leave">
             <high>You wade out through the waters of the high tide to an expanse of beach leading northeast.</high>
          </Base:Description>
          <Base:Description type="react3-desc:movement/arrive">
             <high><describe what="$(Actor)" cap="1"/> wades in through the waters of the high tide from an expanse of beach leading northeast.</high>
          </Base:Description>
          <Base:Description type="react3-desc:movement/leave">
             <high><describe what="$(Actor)" cap="1"/> wades out through the waters of the high tide to an expanse of beach leading northeast.</high>
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="exit-northwest" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="react-desc:movement/arrive">
             <high>You wade in through the waters of the high tide from an expanse of beach leading northwest.</high>
          </Base:Description>
          <Base:Description type="react-desc:movement/leave">
             <high>You wade out through the waters of the high tide to an expanse of beach leading northwest.</high>
          </Base:Description>
          <Base:Description type="react3-desc:movement/arrive">
             <high><describe what="$(Actor)" cap="1"/> wades in through the waters of the high tide from an expanse of beach leading northwest.</high>
          </Base:Description>
          <Base:Description type="react3-desc:movement/leave">
             <high><describe what="$(Actor)" cap="1"/> wades out through the waters of the high tide to an expanse of beach leading northwest.</high>
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="exit-southeast" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="react-desc:movement/arrive">
             <high>You wade in through the waters of the high tide from an expanse of beach leading southeast.</high>
          </Base:Description>
          <Base:Description type="react-desc:movement/leave">
             <high>You wade out through the waters of the high tide to an expanse of beach leading southeast.</high>
          </Base:Description>
          <Base:Description type="react3-desc:movement/arrive">
             <high><describe what="$(Actor)" cap="1"/> wades in through the waters of the high tide from an expanse of beach leading southeast.</high>
          </Base:Description>
          <Base:Description type="react3-desc:movement/leave">
             <high><describe what="$(Actor)" cap="1"/> wades out through the waters of the high tide to an expanse of beach leading southeast.</high>
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="exit-southwest" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="react-desc:movement/arrive">
             <high>You wade in through the waters of the high tide from an expanse of beach leading southwest.</high>
          </Base:Description>
          <Base:Description type="react-desc:movement/leave">
             <high>You wade out through the waters of the high tide to an expanse of beach leading southwest.</high>
          </Base:Description>
          <Base:Description type="react3-desc:movement/arrive">
             <high><describe what="$(Actor)" cap="1"/> wades in through the waters of the high tide from an expanse of beach leading southwest.</high>
          </Base:Description>
          <Base:Description type="react3-desc:movement/leave">
             <high><describe what="$(Actor)" cap="1"/> wades out through the waters of the high tide to an expanse of beach leading southwest.</high>
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="exit-west" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="react-desc:movement/arrive">
             <high>You wade in through the waters of the high tide from an expanse of beach leading west.</high>
          </Base:Description>
          <Base:Description type="react-desc:movement/leave">
             <high>You wade out through the waters of the high tide to an expanse of beach leading west.</high>
          </Base:Description>
          <Base:Description type="react3-desc:movement/arrive">
             <high><describe what="$(Actor)" cap="1"/> wades in through the waters of the high tide from an expanse of beach leading west.</high>
          </Base:Description>
          <Base:Description type="react3-desc:movement/leave">
             <high><describe what="$(Actor)" cap="1"/> wades out through the waters of the high tide to an expanse of beach leading west.</high>
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="ocean" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="ocean"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="sand" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="sand"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="water" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="water"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="waves" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="wave"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:float:script">
         X[M] return Call(\$\{IronClaw:Lib:Common\}, "float_on_water");
      </Core:Property>
      <Core:Property property="export:place:script">
         X[M] return Call(\$\{IronClaw:Lib:Common\}, "place_in_water");
      </Core:Property>
      <Core:Property property="export:swimming:waterdetails">
         (\{ "ocean", "water", "waves" \})
      </Core:Property>
      <Core:Property property="float:script">
         X[M] return Call(\$\{IronClaw:Lib:Common\}, "float_on_water");
      </Core:Property>
      <Core:Property property="merry:react-post:enter-from">
         X[M] \$actor."merry:act-post:stance" = \$this."float:script";         
\$actor."merry:act-post:approach" = \$this."float:script";         
\$actor."merry:act-post:leave" = \$this."float:script";         
\$actor."merry:act-post:place" = \$this."place:script";         
\$actor."merry:act-post:zthrow" = \$this."place:script";         
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:fill-iob">
         X[M] /* D=Refill first appropriate container in actor's inventory from this vessel. */     
constant THE = STYLE_DEFINITE \| STYLE_NONPOSS;     
object liquid, container, refiller, holder;     
int    potential;     
if (!sizeof(this."base:inventory")) \{     
    EmitTo(\$actor, Describe(this, nil, nil, THE) + " can not provide you any water now.");     
    return FALSE;     
\}     
container = shared_drink::find_container_for(\$what: this."base:inventory"[0]."core:ur:parent", \$where: \$actor, \$tight: 1);     
if (!container) \{     
    EmitTo(\$actor, "You are not holding a vessel of any kind which could be filled with " + Describe(this."base:inventory"[0]) + ".");     
    return FALSE;     
\}     
holder = this."base:holder";     
if (holder \&\& holder."base:volition" \&\& holder != \$actor) \{     
    if (\$actor."base:proximity" != holder \&\& holder."base:proximity" != \$actor) \{     
        EmitTo(\$actor, "You must approach " + Describe(holder) + " in order to do that.");     
        return FALSE;     
    \}     
\}     
if (shared_drink::liquid_transfer(\$from: this, \$into: container)) \{     
    /* Transfer was successful. */     
    EmitTo(\$actor, "You collect " + Describe(this, nil, nil, THE) + "'s contents into " + Describe(container, nil, \$actor) + "." + (\$emptied ? " " + capitalize(Describe(this, nil, nil, THE)) + " can not provide any water now." : ""));     
    EmitIn(\$actor."base:environment", Describe(\$actor) + " collects some of " + Describe(this, nil, nil, THE) + "'s contents into " + Describe(container, \$actor) + "." + (\$emptied ? " " + capitalize(Describe(this, nil, nil, THE)) + " can not provide any water now." : ""), \$actor);     
\}
      </Core:Property>
      <Core:Property property="merry:react-post:refill-iob">
         X[M] /* D=Refill first appropriate container in actor's inventory from this vessel. */     
constant THE = STYLE_DEFINITE \| STYLE_NONPOSS;     
object liquid, container, refiller, holder;     
int    potential;     
if (!sizeof(this."base:inventory")) \{     
    EmitTo(\$actor, Describe(this, nil, nil, THE) + " can not provide you any water now.");     
    return FALSE;     
\}     
container = shared_drink::find_container_for(\$what: this."base:inventory"[0]."core:ur:parent", \$where: \$actor, \$tight: 1);     
if (!container) \{     
    EmitTo(\$actor, "You are not holding a vessel of any kind which could be filled with " + Describe(this."base:inventory"[0]) + ".");     
    return FALSE;     
\}     
holder = this."base:holder";     
if (holder \&\& holder."base:volition" \&\& holder != \$actor) \{     
    if (\$actor."base:proximity" != holder \&\& holder."base:proximity" != \$actor) \{     
        EmitTo(\$actor, "You must approach " + Describe(holder) + " in order to do that.");     
        return FALSE;     
    \}     
\}     
if (shared_drink::liquid_transfer(\$from: this, \$into: container)) \{     
    /* Transfer was successful. */     
    EmitTo(\$actor, "You collect " + Describe(this, nil, nil, THE) + "'s contents into " + Describe(container, nil, \$actor) + "." + (\$emptied ? " " + capitalize(Describe(this, nil, nil, THE)) + " can not provide any water now." : ""));     
    EmitIn(\$actor."base:environment", Describe(\$actor) + " collects some of " + Describe(this, nil, nil, THE) + "'s contents into " + Describe(container, \$actor) + "." + (\$emptied ? " " + capitalize(Describe(this, nil, nil, THE)) + " can not provide any water now." : ""), \$actor);     
\}
      </Core:Property>
      <Core:Property property="merry:react-post:tap-iob">
         X[M] /* D=Refill first appropriate container in actor's inventory from this vessel. */     
constant THE = STYLE_DEFINITE \| STYLE_NONPOSS;     
object liquid, container, refiller, holder;     
int    potential;     
if (!sizeof(this."base:inventory")) \{     
    EmitTo(\$actor, Describe(this, nil, nil, THE) + " can not provide you any water now.");     
    return FALSE;     
\}     
container = shared_drink::find_container_for(\$what: this."base:inventory"[0]."core:ur:parent", \$where: \$actor, \$tight: 1);     
if (!container) \{     
    EmitTo(\$actor, "You are not holding a vessel of any kind which could be filled with " + Describe(this."base:inventory"[0]) + ".");     
    return FALSE;     
\}     
holder = this."base:holder";     
if (holder \&\& holder."base:volition" \&\& holder != \$actor) \{     
    if (\$actor."base:proximity" != holder \&\& holder."base:proximity" != \$actor) \{     
        EmitTo(\$actor, "You must approach " + Describe(holder) + " in order to do that.");     
        return FALSE;     
    \}     
\}     
if (shared_drink::liquid_transfer(\$from: this, \$into: container)) \{     
    /* Transfer was successful. */     
    EmitTo(\$actor, "You collect " + Describe(this, nil, nil, THE) + "'s contents into " + Describe(container, nil, \$actor) + "." + (\$emptied ? " " + capitalize(Describe(this, nil, nil, THE)) + " can not provide any water now." : ""));     
    EmitIn(\$actor."base:environment", Describe(\$actor) + " collects some of " + Describe(this, nil, nil, THE) + "'s contents into " + Describe(container, \$actor) + "." + (\$emptied ? " " + capitalize(Describe(this, nil, nil, THE)) + " can not provide any water now." : ""), \$actor);     
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:gather-dob">
         X[M] if(NRefDetail(\$dob[0]) != "sand") return TRUE;     
     
EmitTo(\$actor, "You gather up a pile of sand and start to build a sand castle.");     
EmitIn(\$actor."base:environment", Describe(\$actor) + " gathers up a pile of sand and starts to build a sand castle.", \$actor);     
     
\$castle = Spawn(\$\{Ironclaw:Staff:Props:sandcastle\});     
\$castle."base:environment" = \$actor."base:environment";     
\$actor."base:proximity" = \$castle;     
\$actor."base:stancestring" = "kneeling";     
     
return FALSE;
      </Core:Property>
      <Core:Property property="place:script">
         X[M] return Call(\$\{IronClaw:Lib:Common\}, "place_in_water");
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1569429829, "sendnoodlez", "R", 1569430503, "sendnoodlez", "K", 1569430544, "sendnoodlez", "E", 1569430550, "sendnoodlez", "E", 1569430552, "sendnoodlez", "E", 1569430553, "sendnoodlez", "E", 1569439431, "sendnoodlez", "K", 1569439443, "sendnoodlez", "E", 1569439496, "sendnoodlez", "E", 1569440026, "sendnoodlez", "K", 1569440657, "sendnoodlez", "K", 1569812705, "sendnoodlez", "K", 1569812790, "sendnoodlez", "E", 1569812809, "sendnoodlez", "E", 1569812912, "sendnoodlez", "K", 1570809674, "sendnoodlez", "X", 1570809817, "sendnoodlez", "X", 1570809932, "sendnoodlez", "X", 1570809943, "sendnoodlez", "E", 1570809958, "sendnoodlez", "E", 1570810002, "sendnoodlez", "X", 1570810054, "sendnoodlez", "X", 1570810160, "sendnoodlez", "X", 1620274697, "ezralee", "K" \})
      </Core:Property>
      <Core:Property property="searching:random:sand">
         (\{ \<Allegory:Props:Animals:Fish:OddCatches:Book\>, \<Allegory:Props:Animals:Fish:OddCatches:BrokenShell\>, \<Allegory:Props:Animals:Fish:OddCatches:Driftwood\>, \<IronClaw:Props:Fishing:FishitUp:Fishbones\>, \<Allegory:Props:Animals:Fish:OddCatches:SoggyScroll\>, \<Allegory:Props:Animals:Fish:OddCatches:BrokenSandDollar\>, \<IronClaw:Props:Fishing:FishitUp:ColoredSandBottle\>, \<IronClaw:Props:Fishing:FishitUp:DeadSeaCreature\>, \<IronClaw:Props:Fishing:FishitUp:Sand-BlastedGlass\>, \<IronClaw:Props:Fishing:FishitUp:LoveNote\>, \<IronClaw:Props:Fishing:FishitUp:Seashell\>, \<IronClaw:Props:FishitUp:Mussel\>, \<IronClaw:Props:Fishing:FishitUp:ColoredSandBottle\>, \<IronClaw:Props:Fishing:FishitUp:DeadSeaCreature\>, \<IronClaw:Props:Fishing:FishitUp:Sand-BlastedGlass\>, \<IronClaw:Props:Fishing:FishitUp:LoveNote\>, \<IronClaw:Props:Fishing:FishitUp:Seashell\>, \<IronClaw:Props:FishitUp:Mussel\>, \<Allegory:Props:Animals:Fish:OddCatches:AbaloneShell\>, \<IronClaw:Props:Fishing:FishitUp:ForeignCurrency\>, \<IronClaw:Props:Fishing:FishitUp:SandDollar\>, \<IronClaw:Props:Fishing:FishitUp:SeashellGem\>, \<Allegory:Props:Animals:Fish:OddCatches:AbaloneShell\>, \<IronClaw:Props:Fishing:FishitUp:ForeignCurrency\>, \<IronClaw:Props:Fishing:FishitUp:SandDollar\>, \<IronClaw:Props:Fishing:FishitUp:SeashellGem\> \})
      </Core:Property>
      <Core:Property property="searching:randomobjects">
         0
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
