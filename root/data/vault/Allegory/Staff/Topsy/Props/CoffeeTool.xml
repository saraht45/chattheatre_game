<object clone="/base/obj/thing" owner="ezralee">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Shared:Systems:ItemBuilder:DefaultObject)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="1"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="false" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="duster"/>
            <Base:SName sname="featherduster"/>
            <Base:SName sname="feather-duster"/>
            <Base:SName sname="tool"/>
            <Base:SName sname="mug"/>
            <Base:SName sname="coffee"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="dusters"/>
            <Base:PName pname="featherdusters"/>
            <Base:PName pname="feather-dusters"/>
            <Base:PName pname="tools"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="black"/>
          <Base:Adjective adjective="duster"/>
          <Base:Adjective adjective="feather"/>
          <Base:Adjective adjective="gray"/>
          <Base:Adjective adjective="wood"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             mug of coffee
          </Base:Description>
          <Base:Description type="examine">
             A giant mug of hot black coffee.
          </Base:Description>
          <Base:Description type="look">
             A giant mug of hot black coffee.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="approval:description">
         "Fun things for slaves to clean with!"
      </Core:Property>
      <Core:Property property="approval:time">
         1216864322
      </Core:Property>
      <Core:Property property="approval:unapproved">
         1
      </Core:Property>
      <Core:Property property="merry:react-post:boop-dob">
         X[M] EmitTo(\$actor, "Sparkles and glitter erupt everywhere!!"); EmitIn(\$actor."base:environment", "Sparkles and glitter explode everywhere! Joy and exclamation!!", \$actor);   
  
Call(\$\{Ironclaw:Lib:Characters:DailyFunctions\}, "run_daily_functions");  
   
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:bop-dob">
         X[M] EmitTo(\$actor, "Sparkles and glitter erupt everywhere!!"); EmitIn(\$actor."base:environment", "Sparkles and glitter explode everywhere! Joy and exclamation!!", \$actor);   
  
Call(\$\{Allegory:Lib:Weather:DB\}, "change_weather");  
   
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:enjoy-dob">
         X[M] EmitTo(\$actor, "You drink the coffee and do the things."); EmitIn(\$actor."base:environment", Describe(\$actor)+" drinks the coffee and does the things.", \$actor);                    
                    
Set(\$actor, "effect:hunger:severity", nil);                        
                    
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:gesture-using">
         X[M] \$room = NRefOb(\$iob[0]);                       
\$detail = NRefDetail(\$iob[0]);                           
                               
EmitTo(\$actor, "You drink the coffee and do the things."); EmitIn(\$actor."base:environment", Describe(\$actor)+" drinks the coffee and does the things.", \$actor);                    
                    
Set(\$room, "details:" + \$detail + ":prepositions:close to", TRUE);              
Set(\$room, "details:" + \$detail + ":prepositions:against", TRUE);           
Set(\$room, "details:" + \$detail + ":prepositions:under", TRUE);           
Set(\$room, "details:" + \$detail + ":prepositions:in", TRUE);           
Set(\$room, "details:" + \$detail + ":prepositions:near", TRUE);             
Set(\$room, "details:" + \$detail + ":prepositions:over", TRUE);           
Set(\$room, "details:" + \$detail + ":prepositions:behind", TRUE);           
Set(\$room, "details:" + \$detail + ":prepositions:before", TRUE);           
Set(\$room, "details:" + \$detail + ":prepositions:beside", TRUE);            
Set(\$room, "details:" + \$detail + ":prepositions:on", TRUE);             
                    
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:point-dob">
         X[M] if(!\$evoke) \{
    EmitTo(\$actor, TAG(PRE("point my tester \<direction\> '\<alley/road/plaza\> \<name\>'"), "imp"));
    return FALSE;
\}

\$temp = explode(replace_strings(\$evoke, "\\"", "", ".", ""), " ");

if(sizeof(\$temp) != 2) \{
    EmitTo(\$actor, TAG(PRE("point my tester \<direction\> '\<alley/road/plaza\> \<name\>'"), "imp"));
    return FALSE;
\}

if(!member(\$temp[0], (\{ "alley", "road", "plaza" \}))) \{
    EmitTo(\$actor, TAG(PRE("point my tester \<direction\> '\<alley/road/plaza\> \<name\>'"), "imp"));
    return FALSE;
\}

\$type = \$temp[0];

switch(\$type) \{
    case "alley": 
    \{
        \$urobject = \$\{Allegory:Setting:UrAlley\};
        \$name = "Allegory:Setting:Rinascita:Alleys:";
        break;
    \}

    case "road":
    \{
        \$urobject = \$\{Allegory:Setting:UrRoad\};
        \$name = "Allegory:Setting:Rinascita:Roads:";
        break;
    \}

    default:
    \{
        \$urobject = \$\{Allegory:Setting:UrRoad\};
        \$name = "Allegory:Setting:Rinascita:Plazas:";
        break;
    \}
\}

if(!\$adverb) \{
    EmitTo(\$actor, TAG(PRE("point my tester \<direction\> '\<alley/road/plaza\> \<name\>'"), "imp"));
    return FALSE;
\}

if(!member(\$adverb, (\{ "westwardly", "eastwardly", "northwardly", "southwardly", "northeastwardly", "southeastwardly", "southwestwardly", "northwestwardly" \}))) \{
    EmitTo(\$actor, TAG(PRE("point my tester \<direction\> '\<alley/road/plaza\> \<name\>'"), "imp"));
    return FALSE;
\}

if(!Obj(\$name+\$temp[1])) \{
    \$room = Spawn(\$urobject);
    \$room."base:objectname" = \$name + \$temp[1];
    \$room."core:objectname" = \$name + \$temp[1];
\} else \{
    EmitTo(\$actor, "Room already exists. Creating exit.");
    \$room = Obj(\$name+\$temp[1]);
\}

\$env = \$actor."base:environment";

switch(\$adverb) \{
    case "westwardly":
    \{
        \$dir = "west";
        \$opp = "east";
        break;
    \}

    case "westward":
    \{
        \$dir = "west";
        \$opp = "east";
        break;
    \}

    case "eastwardly":
    \{
        \$dir = "east";
        \$opp = "west";
        break;
    \}

    case "eastward":
    \{
        \$dir = "east";
        \$opp = "west";
        break;
    \}

    case "northwardly":
    \{
        \$dir = "north";
        \$opp = "south";
        break;
    \}

    case "northward":
    \{
        \$dir = "north";
        \$opp = "south";
        break;
    \}

    case "southwardly":
    \{
        \$dir = "south";
        \$opp = "north";
        break;
    \}

    case "southward":
    \{
        \$dir = "south";
        \$opp = "north";
        break;
    \}

    case "northeastwardly":
    \{
        \$dir = "northeast";
        \$opp = "southwest";
        break;
    \}

    case "northeastward":
    \{
        \$dir = "northeast";
        \$opp = "southwest";
        break;
    \}

    case "southeastwardly":
    \{
        \$dir = "southeast";
        \$opp = "northwest";
        break;
    \}

    case "southeastward":
    \{
        \$dir = "southeast";
        \$opp = "northwest";
        break;
    \}

    case "southwestwardly":
    \{
        \$dir = "southwest";
        \$opp = "northeast";
        break;
    \}

    case "southwestward":
    \{
        \$dir = "southwest";
        \$opp = "northeast";
        break;
    \}

    case "northwestwardly":
    \{
        \$dir = "northwest";
        \$opp = "southeast";
        break;
    \}

    case "northwestward":
    \{
        \$dir = "northwest";
        \$opp = "southeast";
        break;
    \}

    default:
    \{
        \$dir = "exit";
        \$opp = "exit";
        break;
    \}
\}

Set(\$room, "details:default:description:glance", ParseXML(\$temp[1] + "\<show-exits/\>")); 

/* Set the details in each room */
Set(\$room, "details:exit-" + \$opp + ":sname:" + \$opp, TRUE);
Set(\$room, "details:exit-" + \$opp + ":description:brief", ParseXML(\$opp + " exit"));
Set(\$env, "details:exit-" + \$dir + ":sname:" + \$dir, TRUE);
Set(\$env, "details:exit-" + \$dir+ ":description:brief", ParseXML(\$dir + " exit"));

/* Reference to exit details */
\$t = NewNRef(\$room, "exit-" + \$opp);
\$t2 = NewNRef(\$env, "exit-" + \$dir);

/* Set the exits */
Set(\$room, "details:exit-" + \$opp + ":exit:dest", \$t2);
Set(\$room, "details:exit-" + \$opp + ":exit:direction:" + \$opp, TRUE);
Set(\$env, "details:exit-" + \$dir + ":exit:dest", \$t);
Set(\$env, "details:exit-" + \$dir + ":exit:directions:" + \$dir, TRUE);

Set(\$room, "details:exit-" + \$opp + ":prepositions:close to", TRUE);              
Set(\$room, "details:exit-" + \$opp + ":prepositions:against", TRUE);           
Set(\$room, "details:exit-" + \$opp + ":prepositions:under", TRUE);           
Set(\$room, "details:exit-" + \$opp + ":prepositions:in", TRUE);           
Set(\$room, "details:exit-" + \$opp + ":prepositions:near", TRUE);             
Set(\$room, "details:exit-" + \$opp + ":prepositions:over", TRUE);           
Set(\$room, "details:exit-" + \$opp + ":prepositions:behind", TRUE);           
Set(\$room, "details:exit-" + \$opp + ":prepositions:before", TRUE);           
Set(\$room, "details:exit-" + \$opp + ":prepositions:beside", TRUE);            
Set(\$room, "details:exit-" + \$opp + ":prepositions:on", TRUE); 

Set(\$env, "details:exit-" + \$dir + ":prepositions:close to", TRUE);              
Set(\$env, "details:exit-" + \$dir + ":prepositions:against", TRUE);           
Set(\$env, "details:exit-" + \$dir + ":prepositions:under", TRUE);           
Set(\$env, "details:exit-" + \$dir + ":prepositions:in", TRUE);           
Set(\$env, "details:exit-" + \$dir + ":prepositions:near", TRUE);             
Set(\$env, "details:exit-" + \$dir + ":prepositions:over", TRUE);           
Set(\$env, "details:exit-" + \$dir + ":prepositions:behind", TRUE);           
Set(\$env, "details:exit-" + \$dir + ":prepositions:before", TRUE);           
Set(\$env, "details:exit-" + \$dir + ":prepositions:beside", TRUE);            
Set(\$env, "details:exit-" + \$dir + ":prepositions:on", TRUE);

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:smack-using">
         X[M] \$room = NRefOb(\$dob[0]);                       
\$detail = NRefDetail(\$dob[0]);         
         
if(!\$evoke) \{             
    return FALSE;             
\}             
             
\$evoke = replace_strings(\$evoke, "\\"", "", ".", "");             
                         
Set(\$room, "details:" + \$detail + ":prepositions:" + \$evoke, FALSE);             
             
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:tap-dob">
         X[M] \$env = \$actor."base:environment";

if(!\$env."allegory:transition") \{
    return TRUE;
\}

\$room = \$env."allegory:transition"[0];
\$actor."base:environment" = \$room;

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:thrust-dob">
         X[M] if(!\$evoke) \{
    EmitTo(\$actor, TAG(PRE("thrust my duster \<direction\> '\<woename\>'"), "imp"));
    return FALSE;
\}

\$temp = explode(replace_strings(\$evoke, "\\"", "", ".", ""), " ");

if(sizeof(\$temp) \> 1) \{
    EmitTo(\$actor, TAG(PRE("thrust my duster \<direction\> '\<woename\>'"), "imp"));
    return FALSE;
\}

if(!Obj(\$temp[0])) \{
    EmitTo(\$actor, TAG("That object does not exist.", "imp"));
    return FALSE;
\}

\$room = Obj(\$temp[0]);

if(!\$adverb) \{
    EmitTo(\$actor, TAG(PRE("point my tester \<direction\> '\<alley/road/plaza\> \<name\>'"), "imp"));
    return FALSE;
\}

if(!member(\$adverb, (\{ "westwardly", "westward", "eastwardly", "eastward", "northwardly", "northward", "southwardly", "southward", "northeastward", "northeastwardly", "southeastward", "southeastwardly", "southwestwardly", "southwestward", "northwestward", "northwestwardly" \}))) \{
    EmitTo(\$actor, TAG(PRE("thrust my duster \<direction\> '\<woename\>'"), "imp"));
    return FALSE;
\}

\$env = \$actor."base:environment";

switch(\$adverb) \{
    case "westwardly":
    \{
        \$dir = "west";
        \$opp = "east";
        break;
    \}

    case "westward":
    \{
        \$dir = "west";
        \$opp = "east";
        break;
    \}

    case "eastwardly":
    \{
        \$dir = "east";
        \$opp = "west";
        break;
    \}

    case "eastward":
    \{
        \$dir = "east";
        \$opp = "west";
        break;
    \}

    case "northwardly":
    \{
        \$dir = "north";
        \$opp = "south";
        break;
    \}

    case "northward":
    \{
        \$dir = "north";
        \$opp = "south";
        break;
    \}

    case "southwardly":
    \{
        \$dir = "south";
        \$opp = "north";
        break;
    \}

    case "southward":
    \{
        \$dir = "south";
        \$opp = "north";
        break;
    \}

    case "northeastwardly":
    \{
        \$dir = "northeast";
        \$opp = "southwest";
        break;
    \}

    case "northeastward":
    \{
        \$dir = "northeast";
        \$opp = "southwest";
        break;
    \}

    case "southeastwardly":
    \{
        \$dir = "southeast";
        \$opp = "northwest";
        break;
    \}

    case "southeastward":
    \{
        \$dir = "southeast";
        \$opp = "northwest";
        break;
    \}

    case "southwestwardly":
    \{
        \$dir = "southwest";
        \$opp = "northeast";
        break;
    \}

    case "southwestward":
    \{
        \$dir = "southwest";
        \$opp = "northeast";
        break;
    \}

    case "northwestwardly":
    \{
        \$dir = "northwest";
        \$opp = "southeast";
        break;
    \}

    case "northwestward":
    \{
        \$dir = "northwest";
        \$opp = "southeast";
        break;
    \}

    default:
    \{
        \$dir = "exit";
        \$opp = "exit";
        break;
    \}
\}

/* Set the details in each room */
Set(\$room, "allegory:transition", (\{ \$env, \$opp \}) );

if(Get(\$room, "details:exit-" + \$opp + ":exit:dest")) \{
    \$oldRoad = NRefOb(Get(\$room, "details:exit-" + \$opp + ":exit:dest")); 
    
    EmitTo(\$actor, TAG("Copying " + Str(\$dir) + " exit detail from " + Str(\$oldRoad), "imp"));
    
    Set(\$env, "details:exit-" + \$dir + ":description:brief", Get(\$oldRoad, "details:exit-" + \$dir + ":description:brief"));
    Set(\$env, "details:exit-" + \$dir + ":description:look", Get(\$oldRoad, "details:exit-" + \$dir + ":description:look"));
    Set(\$env, "details:exit-" + \$dir + ":description:examine", Get(\$oldRoad, "details:exit-" + \$dir + ":description:examine"));

    \$snames = Get(\$oldRoad, "details:exit-" + \$dir + ":snames:local");
            EmitTo(\$actor, dump_value(\$snames));
    for(\$i = 0; \$i \< sizeof(\$snames); \$i++) \{
        Set(\$env, "details:exit-" + \$dir + ":sname:" + \$snames[\$i], TRUE);
    \}

    \$pnames = Get(\$oldRoad, "details:exit-" + \$dir + ":pnames:local");
            EmitTo(\$actor, dump_value(\$pnames));
    for(\$i = 0; \$i \< sizeof(\$pnames); \$i++) \{
        Set(\$env, "details:exit-" + \$dir + ":pname:" + \$pnames[\$i], TRUE);
    \}

    \$adjectives = Get(\$oldRoad, "details:exit-" + \$dir + ":adjectives:local");
            EmitTo(\$actor, dump_value(\$adjectives));
    for(\$i = 0; \$i \< sizeof(\$adjectives); \$i++) \{
        Set(\$env, "details:exit-" + \$dir + ":adjective:" + \$adjectives[\$i], TRUE);
    \}

\} else \{
    if(Get(\$room, "details:exit-" + \$opp + ":description:brief")) \{
    
        EmitTo(\$actor, TAG("Copying " + Str(\$opp) + " exit detail from " + Str(\$room), "imp"));
        
        Set(\$env, "details:exit-" + \$dir + ":description:brief", Get(\$room, "details:exit-" + \$opp + ":description:brief"));
        Set(\$env, "details:exit-" + \$dir + ":description:look", Get(\$room, "details:exit-" + \$opp + ":description:look"));
        Set(\$env, "details:exit-" + \$dir + ":description:examine", Get(\$room, "details:exit-" + \$opp + ":description:examine"));

        \$snames = Get(\$room, "details:exit-" + \$opp + ":snames:local");
        EmitTo(\$actor, dump_value(\$snames));
        for(\$i = 0; \$i \< sizeof(\$snames); \$i++) \{
            Set(\$env, "details:exit-" + \$dir + ":sname:" + \$snames[\$i], TRUE);
        \}

        \$pnames = Get(\$room, "details:exit-" + \$opp + ":pnames:local");
        EmitTo(\$actor, dump_value(\$pnames));
        for(\$i = 0; \$i \< sizeof(\$pnames); \$i++) \{
            Set(\$env, "details:exit-" + \$dir + ":pname:" + \$pnames[\$i], TRUE);
        \}

        \$adjectives = Get(\$room, "details:exit-" + \$opp + ":adjectives:local");
        EmitTo(\$actor, dump_value(\$adjectives));
        for(\$i = 0; \$i \< sizeof(\$adjectives); \$i++) \{
            Set(\$env, "details:exit-" + \$dir + ":adjective:" + \$adjectives[\$i], TRUE);
        \}
    \} else \{
        EmitTo(\$actor, TAG("No exit detail could be found. You will need to create this yourself.", "imp"));
    \}
\}

Set(\$env, "details:exit-" + \$dir + ":sname:" + \$dir, TRUE);

/* Reference to exit details */
\$t = NewNRef(\$room, "exit-" + \$opp);
\$t2 = NewNRef(\$env, "exit-" + \$dir);

/* Set the exits */
Set(\$env, "details:exit-" + \$dir + ":exit:dest", \$t);
Set(\$env, "details:exit-" + \$dir + ":exit:directions:" + \$dir, TRUE);


Set(\$env, "details:exit-" + \$dir + ":prepositions:close to", TRUE);
Set(\$env, "details:exit-" + \$dir + ":prepositions:against", TRUE);
Set(\$env, "details:exit-" + \$dir + ":prepositions:under", TRUE);
Set(\$env, "details:exit-" + \$dir + ":prepositions:in", TRUE);
Set(\$env, "details:exit-" + \$dir + ":prepositions:near", TRUE);
Set(\$env, "details:exit-" + \$dir + ":prepositions:over", TRUE);
Set(\$env, "details:exit-" + \$dir + ":prepositions:behind", TRUE);
Set(\$env, "details:exit-" + \$dir + ":prepositions:before", TRUE);
Set(\$env, "details:exit-" + \$dir + ":prepositions:beside", TRUE);
Set(\$env, "details:exit-" + \$dir + ":prepositions:on", TRUE);

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:tickle-dob">
         X[M] EmitTo(\$actor, dump_value("month"));

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:trust-using">
         X[M] \$person = NRefOb(\$iob[0]); 

if(!\$evoke) \{             
    return FALSE;             
\}             
             
\$evoke = replace_strings(\$evoke, "\\"", "", ".", "");             
                         
Set(\$person, "appearance:groin:name", "\$evoke");
             
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:wave-using">
         X[M] \$room = NRefOb(\$iob[0]);                       
\$detail = NRefDetail(\$iob[0]);                           
                               
EmitTo(\$actor, "You are not a hot mess, you're a spicy disaster."); EmitIn(\$actor."base:environment", Describe(\$actor)+" is not a hot mess but maybe a little bit of a spicy disaster.", \$actor);                    
                               
Set(\$room, "details:" + \$detail + ":definite:local", TRUE);            
Set(\$room, "details:" + \$detail + ":definite", TRUE);    
         
                    
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:shake-dob">
         X[M] if(!\$evoke) return TRUE; 
 
\$searchstr = replace_strings(\$evoke, "\\"", "", ".", ""); 
 
\$roo = \$actor; 
 
EmitTo(\$roo, "Searching trading lists for " + dump_value(\$searchstr)); 
\$this.charupdating = 1; 
 
\$folder = "Allegory:NPCs:NIPs:TradingLists"; 
\$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders"); 
 
for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{ 
  \$folder = "Allegory:NPCs:NIPs:TradingLists:"+\$folders[\$i]; 
  \$folders2 = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders"); 
 
  for(\$j=0; \$j\<sizeof(\$folders2);\$j++) \{ 
      \$folder = "Allegory:NPCs:NIPs:TradingLists:"+\$folders[\$i]+":"+\$folders2[\$j]; 
      \$objects = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects"); 
 
      for(\$k=0;\$k\<sizeof(\$objects);\$k++) \{ 
        \$object = Obj("Allegory:NPCs:NIPs:TradingLists:"+\$folders[\$i]+":"+\$folders2[\$j]+":"+\$objects[\$k]); 
        /* CODE GOES HERE */ 
 
        \$temp = Str(dump_value(\$object."*")); 
 
        if(contains(\$temp, \$searchstr)) EmitTo(\$actor, dump_value(\$object)); 
 
        \$delay(0.002, TRUE, "8ea5"); 
      \} 
  \} 
\} 
EmitTo(\$roo, "Done!"); 
\$this.charupdating = nil; 
return TRUE;
      </Core:Property>
      <Core:Property property="new property name">
         "New Property Value"
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1563847206, "jominey", "E", 1563847294, "jominey", "E", 1563847319, "jominey", "E", 1563847350, "jominey", "E", 1599536735, "ezralee", "R", 1599536737, "ezralee", "E", 1599536739, "ezralee", "E", 1600626802, "ezralee", "E", 1600626905, "ezralee", "E", 1600626944, "ezralee", "E", 1619058244, "ezralee", "E", 1619058847, "ezralee", "E", 1619058960, "ezralee", "E", 1619059069, "ezralee", "K", 1619059406, "ezralee", "E", 1619143153, "ezralee", "E", 1625723341, "ezralee", "E", 1625723406, "ezralee", "E", 1625723609, "ezralee", "E", 1625723666, "ezralee", "E", 1625922962, "ezralee", "E", 1626009370, "sendnoodlez", "E", 1628349659, "ezralee", "E", 1628350713, "ezralee", "E", 1628352424, "ezralee", "E", 1641014211, "ezralee", "E", 1641014468, "ezralee", "E", 1641022207, "ezralee", "E", 1694660561, "ezralee", "E", 1694660693, "ezralee", "E", 1694665393, "ezralee", "E", 1694667095, "ezralee", "E", 1694667277, "ezralee", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
