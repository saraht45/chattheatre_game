<object clone="/base/obj/thing" owner="SkotOS">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Allegory:NPCs:UrNPC)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="1"/>
    <Base:Misc gender="male" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="true">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details/>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:appearance:browshape">
         "high"
      </Core:Property>
      <Core:Property property="export:appearance:build">
         "strapping"
      </Core:Property>
      <Core:Property property="export:appearance:cheekshape">
         "gaunt"
      </Core:Property>
      <Core:Property property="export:appearance:earshape">
         "large"
      </Core:Property>
      <Core:Property property="export:appearance:eyebrowshape">
         "scant"
      </Core:Property>
      <Core:Property property="export:appearance:eyecolor">
         "dark grey"
      </Core:Property>
      <Core:Property property="export:appearance:eyeshape">
         "hooded"
      </Core:Property>
      <Core:Property property="export:appearance:feet">
         "small"
      </Core:Property>
      <Core:Property property="export:appearance:haircolor">
         "black"
      </Core:Property>
      <Core:Property property="export:appearance:hairlength">
         "long"
      </Core:Property>
      <Core:Property property="export:appearance:hairtype">
         "smooth"
      </Core:Property>
      <Core:Property property="export:appearance:hands">
         "calloused"
      </Core:Property>
      <Core:Property property="export:appearance:height">
         "short"
      </Core:Property>
      <Core:Property property="export:appearance:lipshape">
         "big"
      </Core:Property>
      <Core:Property property="export:appearance:mouthshape">
         "tiny"
      </Core:Property>
      <Core:Property property="export:appearance:nailapp">
         "dirty"
      </Core:Property>
      <Core:Property property="export:appearance:noseshape">
         "chiseled"
      </Core:Property>
      <Core:Property property="export:appearance:skin">
         "ruddy"
      </Core:Property>
      <Core:Property property="export:chargen:age">
         "23"
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:trading:stock">
         ([ 4:1 ])
      </Core:Property>
      <Core:Property property="export:nip:trait:trading-advanced:inventories">
         \<Allegory:NPCs:NIPs:Buyers:Southwest:RatCatcher\>
      </Core:Property>
      <Core:Property property="export:trading:lists">
         (\{ \<Allegory:NPCs:NIPs:TradingLists:Southwest:RatCatcher\> \})
      </Core:Property>
      <Core:Property property="export:trait:age">
         "23"
      </Core:Property>
      <Core:Property property="export:trait:brief">
         "short strapping man"
      </Core:Property>
      <Core:Property property="export:trait:sex">
         "man"
      </Core:Property>
      <Core:Property property="merry:inherit:react:ask-dob%trading">
         \<Allegory:Lib:Economy:TradingLib\>
      </Core:Property>
      <Core:Property property="merry:lib:quest:gather_rats">
         X[M] /* Asks the PC to gather rats */  
if(!\$actor) return FALSE;  
  
\$questname = "gather_rats";  
/* How much should this quest pay? (modified for the current economy) */  
\$payment = Call(\$\{Ironclaw:Lib:Quests:Autoquests:miniquests\}, "questpayment", \$amount: 1500);  
  
if(!\$actor."quest:miniquests") \$actor."quest:miniquests" = ([ ]);  
  
if(\$imperative == "@yes") \{  
  Social(this, "smile", nil, "Great! Well, bring me five dead rats. Just offer them to me when you've got them.", "at", \$actor);  
  /* Quest expires after a week */  
  \$expires = 60*60*24*7;  
  \$id = random(1000000);  
  \$actor."quest:miniquests"[\$questname] = ([  
      "description":"Gather five rats and deliver them to the vermin catcher.",  
      "name":"Skin Hunt",  
      "id":\$id,  
      "payment": \$payment,  
      "rat_count": 5,  
      "expires":time()+\$expires,  
      "reward": \$payment ? ironclaw::describe_money(\$amount: \$payment) : "Gratitude" ]);  
  /* Make the quest expire */  
  if(\$expires) \{  
    \$delay(\$expires, TRUE, "5e77");  
    if(\$actor."quest:miniquests" \&\& \$actor."quest:miniquests"[\$questname] \&\& \$actor."quest:miniquests"[\$questname]["id"] == \$id)  
      \$actor."quest:miniquests"[\$questname] = nil;  
  \}  
  return TRUE;  
\} else if(\$imperative == "@no") \{  
  Social(this, "nod", nil, "OK then. Too fancy for your tastes, I guess.", "to", \$actor);  
  return TRUE;  
\} else if(\$expire_fun == "quest:"+\$questname) \{  
  Social(this, "nod", nil, "Hmm, well, come back if you decide to take the job.", "to", \$actor);  
  return TRUE;  
\}  
  
/* Here's the start of the quest (usually where the PC gets asked if they want to accept the quest) */  
  
/* Check if it's a valid quest */  
  
/* Don't ask, if they are already doing this quest */  
if(\$actor."quest:miniquests"[\$questname]) return FALSE;  
/* Don't ask if they are already answering a question */  
if(\$actor."question:id") return FALSE;  
/* They won't get offered this quest if they've already earned too much daily income */  
if(Int(\$actor."trait:income:paiduntil") \> time()) return FALSE;  
/* Make sure they aren't busy */  
if(ironclaw::busy_check(\$character: \$actor)) return FALSE;  
  
Social(this, "appraise", nil, "Hmm...", nil, \$actor);  
Social(this, "decide", nil, "You look quite capable. Interested in earning some coin?");  
Social(this, "explain", nil, "I'm a vermin catcher, gotta keep the streets clear. Want to do some work for me? Bring me five dead rats, and I'll see you rewarded.");  
Social(this, "ask", nil, "How does "+ironclaw::describe_money(\$amount: \$payment)+" sound?");  
  
interaction::question(\$question: "Will you accept this job?", \$expires: 60, \$env: "TRUE", \$yes_ob: this, \$expire_ob: this, \$no_ob: this, \$yes_fun: "quest:"+\$questname, \$no_fun: "quest:"+\$questname, \$expire_fun: "quest:"+\$questname);  
  
  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:offer-who%quest">
         X[M] /* Accepts rats from PCs on quests */  
if(!\$what) return TRUE;  
  
/* remove the offer so the player doesn't have to revoke */  
Call(\$this, "base:removeoffer", \$from: \$actor);  
  
if(!\$actor."quest:miniquests") return TRUE;  
/* What quests are they doing? */  
if(\$actor."quest:miniquests"["gather_rats"]) \{  
  /* How many rats are still needed? */  
  \$needed = \$actor."quest:miniquests"["gather_rats"]["rat_count"];  
  /* Are they offering any rats to the merchant? */  
  \$matches = (\{ \});  
  for(\$i=0;\$i\<sizeof(\$what) \&\& sizeof(\$matches) \< \$needed;\$i++) \{  
    if(\$what[\$i]."core:ur:parent" == \$\{Allegory:Props:Animals:City:RatCorpse\})  
      \$matches += (\{ \$what[\$i] \});  
  \}  
  if(!sizeof(\$matches)) \{  
    Social(this, "state", nil, "Sorry, I'm not buying none of that");  
    return TRUE;  
  \}  
  
  Social(this, "collect", nil, nil, nil, \$matches);  
  \$needed -= sizeof(\$matches);  
  if(\$needed) \{  
    /* Still more rats to go */  
    Social(this, "state", nil, "Good catch. Only "+desc_cardinal(\$needed)+" more to go.");  
    \$actor."quest:miniquests"["gather_rats"]["rat_count"] = \$needed;  
    \$actor."quest:miniquests"["gather_rats"]["description"] = "Gather "+desc_cardinal(\$needed)+" rats and deliver them to the vermin catcher.";  
  \} else \{  
    Social(this, "smile", nil, "That's the last of 'em! Good job!");  
    \$payment = \$actor."quest:miniquests"["gather_rats"]["payment"];  
    /* EXTENSION - update below to pay money better. Through a miniquest script. */  
    \$actor."trait:money" = Int(\$actor."trait:money")+\$payment;  
    EmitTo(\$actor, Describe(this)+" pays you.");  
    /* Clear the quest */  
    \$actor."quest:miniquests"["gather_rats"] = nil;  
  \}  
  /* Slay the skink corpses */  
  \$delay(0.1, TRUE, "b0cb");  
  for(\$i=0;\$i\<sizeof(\$matches);\$i++) \{  
    Slay(\$matches[\$i]);  
  \}  
  return TRUE;  
\}  
  
Social(this, "apologize", nil, "Sorry - can't buy that from you. I only buy from employees doing a specific job. Guild rules, y'know?");  
  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:witness:enter-from%quest">
         X[M] /* Offer the PC a quest to catch rats */  
if(!\$actor."udat:object") return TRUE;  
  
\$delay(2, TRUE, "ed85");  
if(\$actor."base:environment" != this."base:environment") return TRUE;  
  
/* Don't ask, if they are already doing a quest */  
if(!\$actor."quest:miniquests") \$actor."quest:miniquests" = ([ ]);  
if(\$actor."quest:miniquests"["gather_rats"]) return FALSE;  
  
return Call(this, "quest:gather_rats");
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:trading:stock">
         ([ 4:1 ])
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1571935702, "sendnoodlez", "E", 1571935763, "sendnoodlez", "X", 1571935983, "sendnoodlez", "X", 1573501966, "jominey", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="stage">"complete"</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
