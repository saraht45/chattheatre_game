<object clone="/usr/SkotOS/obj/meracha" owner="tonyd">
  <SkotOS:MerAcHa action_id="eat">
    <Core:PCProperties>
      <Core:Property property="desc:finish:ldef">
         X[S] \$(You) \$(Verb:Finish) eating \{? \| \$(WhatName) \| \$(WhatName)\| \$(DobName)\}.
      </Core:Property>
      <Core:Property property="desc:finish:vdef:finish">
         (\{ "finish", "finishes" \})
      </Core:Property>
      <Core:Property property="desc:takebite:ldef">
         X[S] \$(You) \$(Verb:Take) a bite of \{? \| \$(WhatName) \| \$(WhatName)\| \$(DobName)\}.
      </Core:Property>
      <Core:Property property="desc:takebite:vdef:take">
         (\{ "take", "takes" \})
      </Core:Property>
      <Core:Property property="merry:global-post:action">
         X[M] if(\$dob \&\& !\$what) \$what = \$dob;
if(\$iob \&\& !\$what) \$what = \$iob;

if (!IsPrime(\$what[0]) \|\|
    !NRefOb(\$what[0])."base:edible") \{
    return TRUE;
\}

/*

if (Int(NRefOb(\$what[0])."trait:quantity") \> 10) \{
  describe bite-taking
  \$(exarg-propbase) = "desc:takebite";
\} else \{
  describe finish
  \$(exarg-propbase) = "desc:finish";
\}
\$(exarg-object) = this;

*/

EmitTo(\$actor, TAG("You take a bite of " + Describe(\$what[0], nil, \$actor) + ".", "social:first"));
EmitIn(\$actor."base:environment", TAG(Describe(\$actor) + " takes a bite of " + Describe(\$what[0], \$actor) + ".", "social:third"), \$actor);

\$thing = NRefOb(\$what[0]);

if(NRefOb(\$what[0])."trait:taste") \{
    \$(food:taste) = UnSAM(NRefOb(\$what[0])."trait:taste");
    \$emit = Describe(\$what[0], nil, \$actor) + " tastes " + \$(food:taste) + ".";
    \$delay(0.1, FALSE, "6ab6");
    EmitTo(\$actor, \$emit);
\}

consume::consume(\$amount: 10, \$type: "food");

if(\$what \&\& \$what[0] \&\& !\$what[0]."base:possessed" \&\& Int(NRefOb(\$what[0])."trait:quantity") \<= 0) \{
    Slay(NRefOb(\$what[0]));
\}

return FALSE;
      </Core:Property>
      <Core:Property property="merry:global:action">
         X[M] if(\$(what:words) \&\& \$(what:words) != "") \{
    int x;
    mapping replaceMap;
    mixed* replace;

    replaceMap = ([ "first":"1st", "second":"2nd", "third":"3rd", "fourth":"4th", "fifth":"5th", "sixth":"6th", "seventh":"7th", "eighth":"8th", "ninth":"9th", "tenth":"10th" ]);
    replace = map_indices(replaceMap);
    for(x = 0; x \< sizeof(\$(what:words)); x++) \{
        if(member(\$(what:words)[x], replace)) \{
            \$(what:words)[x] = replaceMap[\$(what:words)[x]];
        \}
    \}
    \$what = Call(\$\{Allegory:Lib:Consumables:FoodScripts\}, "find_food_target", \$point: implode(\$(what:words), " "));
\}

if(!\$what \|\| !sizeof(\$what)) \{
    EmitTo(\$actor, "What did you want to eat?");
    return FALSE;
\}

if(!\$dob \&\& !\$what) return FALSE;

if(\$dob \&\& !\$what) \$what = \$dob;
if(\$iob \&\& !\$what) \$what = \$iob;

/*
if(\$iob \&\& sizeof(\$iob)) \{

    if(\$actor != NRefOb(\$iob[0])) \{
        EmitTo(\$actor, TAG("You bite " + Describe(\$iob[0]) + ".", "social:first"));
    \} else \{
        EmitTo(\$actor, TAG("You bite " + Describe(\$iob[0], nil, \$actor) + ".", "social:first"));
    \}

    if(\$actor != NRefOb(\$iob[0])) \{
        EmitTo(NRefOb(\$iob[0]), TAG(Describe(\$actor) + " bite " + Describe(\$iob[0], nil, \$actor) + ".", "social:second"));
    \}

    if(\$actor == NRefOb(\$iob[0])) \{
        EmitIn(\$actor."base:environment", TAG(Describe(\$actor) + " bites " + Describe(\$iob[0], \$actor) + ".", "social:third"), \$actor, NRefOb(\$iob[0]));
    \} else \{
        EmitIn(\$actor."base:environment", TAG(Describe(\$actor) + " bites " + Describe(\$iob[0]) + ".", "social:third"), \$actor, NRefOb(\$iob[0]));
    \}

    return FALSE;
\} */

if (!IsPrime(\$what[0])
\|\| !NRefOb(\$what[0])."base:edible") \{
    if(\$verb == "eat") \{
        \$food = NRefOb(\$what[0]);

        if(!sizeof(\$food."base:inventory")) \{
             EmitTo(\$actor, "You cannot eat " + Describe(\$what[0], nil, \$actor) + ".");
            return FALSE;
        \}

        if(sizeof(\$food."base:inventory") == 1) \{
            if(\$food."base:inventory"[0]."base:edible") \{
                \$what2 = (\{ NewNRef(\$food."base:inventory"[0], "default") \});
            \} else \{
                EmitTo(\$actor, "You cannot eat " + Describe(\$what[0], nil, \$actor) + ".");
                return FALSE;
            \}
        \} else \{

            \$what2 = Call(\$\{Allegory:Lib:Consumables:FoodScripts\}, "find_food_target", \$point: implode(\$(what:words), " "), \$prime_source: \$food);

            if(!\$what2 \|\| !sizeof(\$what2)) \{
                /* Choose something randomly */
                \$what2 = (\{ \$food."base:inventory"[random(sizeof(\$food."base:inventory"))] \});
            \}

            if(!NRefOb(\$what2[0])."base:edible") \{
                EmitTo(\$actor, "You cannot eat " + Describe(\$what[0], nil, \$actor) + ".");
                return FALSE;
            \}
        \}

        \$vessel = NRefOb(\$what[0]);
        \$what = \$what2;
    \}
    if(\$verb == "bite") \{ /* \$roles = (\{ "what" \}); */ return TRUE; \}
\}

if(Int(NRefOb(\$what[0])."trait:quantity") \> 10) \{ 
    EmitTo(\$actor, TAG("You take a bite of " + Describe(\$what[0], nil, \$actor) + ".", "social:first"));
    EmitIn(\$actor."base:environment", TAG(Describe(\$actor) + " takes a bite of " + Describe(\$what[0], \$actor) + ".", "social:third"), \$actor);
\} else\{
    EmitTo(\$actor, TAG("You finish eating " + Describe(\$what[0], nil, \$actor) + ".", "social:first"));
    EmitIn(\$actor."base:environment", TAG(Describe(\$actor) + " finishes eating " + Describe(\$what[0], \$actor) + ".", "social:third"), \$actor);
\}

\$thing = NRefOb(\$what[0]); 

if(NRefOb(\$what[0])."trait:taste") \{
    \$(food:taste) = UnSAM(NRefOb(\$what[0])."trait:taste");
    \$emit = Describe(\$what[0], nil, \$actor) + " tastes " + \$(food:taste) + ".";
    \$delay(0.1, FALSE, "056e");
    EmitTo(\$actor, \$emit);
\}

consume::consume(\$amount: 10, \$type: "food"); 

if(\$what \&\& \$what[0] \&\& !\$what[0]."base:possessed" \&\& Int(NRefOb(\$what[0])."trait:quantity") \<= 0) \{
    Slay(NRefOb(\$what[0]));
\}

if(\$vessel) \{
    if(FindMerry(\$vessel, "react-post", "place-where%foodcontainer")) \{
        Call(\$\{Allegory:Lib:Consumables:FoodScripts\}, "update", \$container: \$vessel);
    \}
\}


return FALSE;
      </Core:Property>
      <Core:Property property="old:merry:global-desc:action">
         X[M] if(\$dob \&\& !\$what) \$what = \$dob;
if(\$iob \&\& !\$what) \$what = \$iob;

if (!IsPrime(\$what[0]) \|\|
    !NRefOb(\$what[0])."base:edible") \{
    return TRUE;
\}

/*

if (Int(NRefOb(\$what[0])."trait:quantity") \> 10) \{
  describe bite-taking
  \$(exarg-propbase) = "desc:takebite";
\} else \{
  describe finish
  \$(exarg-propbase) = "desc:finish";
\}
\$(exarg-object) = this;

*/

EmitTo(\$actor, TAG("You take a bite of " + Describe(\$what[0], nil, \$actor) + ".", "social:first"));
EmitIn(\$actor."base:environment", TAG(Describe(\$actor) + " takes a bite of " + Describe(\$what[0], \$actor) + ".", "social:third"), \$actor);

\$thing = NRefOb(\$what[0]);

if(NRefOb(\$what[0])."trait:taste") \{
    \$(food:taste) = UnSAM(NRefOb(\$what[0])."trait:taste");
    \$emit = Describe(\$what[0], nil, \$actor) + " tastes " + \$(food:taste) + ".";
    \$delay(0.1, TRUE, "6ab6");
    EmitTo(\$actor, \$emit);
\}

consume::consume(\$amount: 10, \$type: "food");

if(\$what \&\& \$what[0] \&\& !\$what[0]."base:possessed" \&\& Int(NRefOb(\$what[0])."trait:quantity") \<= 0) \{
    Slay(NRefOb(\$what[0]));
\}

return FALSE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1596658956, "jominey", "E", 1596659551, "jominey", "E", 1596659607, "jominey", "P", 1596659669, "jominey", "E", 1596659793, "jominey", "E", 1596659906, "jominey", "E", 1596659938, "jominey", "E", 1596660101, "jominey", "E", 1596660171, "jominey", "P", 1596660200, "jominey", "E", 1596660333, "jominey", "E", 1596660352, "jominey", "E", 1596660356, "jominey", "E", 1596660436, "jominey", "E", 1596660535, "jominey", "E", 1596660705, "jominey", "E", 1596660760, "jominey", "E", 1596660934, "jominey", "E", 1596664091, "jominey", "E", 1596666523, "jominey", "E", 1598133669, "jominey", "P" \})
      </Core:Property>
    </Core:PCProperties>
  </SkotOS:MerAcHa>
</object>
