<object clone="/obj/properties" owner="SkotOS">
  <Core:PropertyContainer>
    <Ur:UrObject/>
    <Core:PCProperties>
      <Core:Property property="eventlog">
         ([ "adventure":(\{ nil, 1538809480, 1, \<Ironclaw:World:DockTown:Roads:Streets:Dock01A\> \}), "audience hours":(\{ \<Chatters:AE:el:elle\>, 1652576917, 0, \<Allegory:Setting:Rinascita:Buildings:Palace:Citadel:FirstFloor:GreatHall\> \}), "avoirdupois ball":(\{ \<Chatters:Backup:IC:no:noe0\>, 1392494309, 1 \}), "avoirdupois house meeting":(\{ \<Chatters:AE:fr:frederic\>, 1565118917, 1, \<Allegory:Setting:Rinascita:Buildings:Northwest:FrenchEstate:GroundFloor:LivingRoom\> \}), "avoirdupois party":(\{ \<Chatters:AE:fr:frederic\>, 1559265178, 0, \<Allegory:Setting:Rinascita:Buildings:Northwest:FrenchEstate:GroundFloor:Ballroom\> \}), "ball":(\{ nil, 1520124108, 0, \<Allegory:Setting:Rinascita:Buildings:Northeast:Ballroom:FirstFloor:Ballroom\> \}), "beer meet":(\{ \<Chatters:AE:tr:trevyn\>, 1544920395, 1, \<Ironclaw:World:NewTown:North:Roads:Auriville:One\> \}), "bisclavret house meeting":(\{ \<Chatters:AE:em:emeraude\>, 1544908164, 0, \<Allegory:Setting:Rinascita:Buildings:Southwest:ScottishEstate:SecondFloor:LivingRoom\> \}), "bisclavret party":(\{ \<Chatters:Backup:AE:ro:roderick0\>, 1543101708, 0, \<Ironclaw:World:Manors:Bisclavret:SecondFloor:BarracksRecRoom\> \}), "blacksmith hours":(\{ \<Chatters:AE:he:heather\>, 1602470016, 1, \<[Allegory:Setting:Rinascita:Buildings:Southwest:Warehouse2:GroundFloor:Main]#116188\> \}), "bonfire party":(\{ \<Chatters:AE:le:levison\>, 1555011571, 0, \<Ironclaw:AAs:Adventures:Wilderness:GrasslandsEast:05\> \}), "bookbinder hours":(\{ \<Chatters:AE:ma:maena\>, 1585765857, 0, \<Allegory:Setting:Rinascita:Buildings:Northwest:StationeryShop:Main\> \}), "cafe social":(\{ \<Chatters:AE:fr:frederic\>, 1558280072, 0, \<Allegory:Setting:Rinascita:Buildings:Southwest:Cafe:Main\> \}), "carpenter hours":(\{ \<Chatters:AE:bj:bjorn\>, 1582311069, 0, \<Allegory:Setting:Rinascita:Buildings:Northeast:Carpenter:Main\> \}), "casual get-together":(\{ \<Chatters:Backup:IC:fl:fluffy0\>, 1572578419, 1, \<Allegory:Setting:ForteRicchezza:Squares:MainSquareSouth\> \}), "chapel sermon":(\{ nil, 1517148530, 0, \<Allegory:Setting:Rinascita:Buildings:Northeast:Chapel:Entrance\> \}), "church open-hours":(\{ \<Chatters:Backup:IC:ed:edric0\>, 1563930389, 1, \<Ironclaw:World:NewTown:North:Plazas:MarketCircle:Northwest\> \}), "clean-up":(\{ \<Chatters:AE:ka:kaine\>, 1386737392, 0 \}), "clothiers hours":(\{ \<Chatters:AE:mi:mitena\>, 1550028719, 1, \<Allegory:Setting:Rinascita:Buildings:Northeast:Tailors:FirstFloor:Front\> \}), "combat spar":(\{ \<Chatters:AE:va:valdus\>, 1557632559, 1, \<Ironclaw:World:DockTown:Buildings:TrainingYard:DockSquare\> \}), "combat training":(\{ nil, 1540623825, 1, \<[Allegory:Setting:Rinascita:Buildings:Southwest:Warehouse2:SecondFloor:Main]#295276\> \}), "constabulary hour":(\{ \<Chatters:IC:da:dakota\>, 1545351205, 1, nil \}), "consulate meeting":(\{ \<Chatters:AE:ma:mara\>, 1679017066, 0, \<Allegory:Setting:Rinascita:Buildings:Palace:ItalianEstate:FirstFloor:LivingRoom\> \}), "dockstreet-repairs":(\{ \<Chatters:AE:ma:maximilian\>, 1405546556, 0 \}), "doloreaux house meeting":(\{ \<Chatters:AE:tr:trevyn\>, 1565561828, 0, \<Allegory:Setting:Rinascita:Buildings:Southeast:GermanEstate:FirstFloor:LivingRoom\> \}), "doloreaux party":(\{ \<Chatters:AE:tr:trevyn\>, 1549681543, 0, \<Allegory:Setting:Rinascita:Buildings:Southeast:GermanEstate:FirstFloor:Ballroom\> \}), "doloreaux pond digging":(\{ nil, 1418606728, 0 \}), "duel":(\{ nil, 1495040675, 1, \<Ironclaw:World:DockTown:Buildings:TrainingYard:DockSquare\> \}), "dyer hours":(\{ \<Chatters:AE:rh:rhol\>, 1680741363, 1, \<Allegory:Setting:Rinascita:Buildings:Northeast:Tailors:FirstFloor:Back\> \}), "fashion show":(\{ \<Chatters:AE:or:orla\>, 1502643239, 1, \<Allegory:Setting:Rinascita:Buildings:Northeast:Tailors:FirstFloor:Front\> \}), "formal ball":(\{ \<Chatters:AE:fr:frederic\>, 1545184975, 1, \<Allegory:Setting:Rinascita:Buildings:Northwest:FrenchEstate:GroundFloor:Ballroom\> \}), "formal ceremony":(\{ nil, 1541278375, 0, \<Allegory:Setting:Rinascita:Buildings:Southwest:AnasetteApartments:FirstFloor:Main\> \}), "formal hunt":(\{ \<Chatters:AE:ma:matteo\>, 1544035605, 1, \<Ironclaw:World:NewTown:North:Roads:NorthgateSquare:One\> \}), "gambling meet":(\{ \<Chatters:AE:sa:salvatore\>, 1550457783, 1, \<Allegory:Setting:Rinascita:Buildings:Southwest:GamblingHall:Main\> \}), "game-session":(\{ \<Chatters:AE:el:elspeth\>, 1572038545, 1, \<Allegory:Setting:Rinascita:Buildings:Southeast:Tavern:FirstFloor:Main\> \}), "gathering":(\{ \<Chatters:AE:el:elle\>, 1699841430, 0, \<Allegory:Setting:Rinascita:Buildings:Palace:Citadel:FirstFloor:GreatHall\> \}), "guild council":(\{ \<Chatters:AE:br:bruno\>, 1551661592, 0, \<Allegory:Setting:Rinascita:Buildings:Northeast:GuildAdministration:MeetingHall\> \}), "guild meeting":(\{ \<Chatters:Backup:AE:ro:roderick0\>, 1572705443, 0, \<Allegory:Setting:Rinascita:Buildings:Southwest:EnglishEstate:SecondFloor:LivingRoom\> \}), "hairstyling hours":(\{ \<Chatters:AE:ar:arlo\>, 1657552777, 0, \<Allegory:Setting:Rinascita:Buildings:Southeast:BarberShop:SmithandDunst\> \}), "hospital hours":(\{ \<Chatters:AE:el:elle\>, 1619920589, 0, \<Allegory:Setting:Rinascita:Buildings:Northwest:Hospital:Garden\> \}), "hunt":(\{ \<Chatters:AE:ja:jayland\>, 1615074135, 0, \<Allegory:Setting:Rinascita:Buildings:Northeast:Ballroom:FirstFloor:Ballroom\> \}), "infirmary hours":(\{ nil, 1553924161, 0, \<Allegory:Setting:ForteRicchezza:Buildings:Infirmary:RecoveryRoom\> \}), "jeweler hours":(\{ \<Chatters:AE:gu:gus\>, 1599865375, 0, \<Allegory:Setting:Rinascita:Buildings:Northeast:Blacksmith:Main\> \}), "mass":(\{ \<Chatters:AE:ro:roberto\>, 1649636532, 1, \<Allegory:Setting:Rinascita:Buildings:Northeast:Abbey:Entrance\> \}), "music performance":(\{ nil, 1485542386, 0, \<Allegory:Setting:Rinascita:Buildings:Southwest:AnasetteApartments:FirstFloor:Main\> \}), "party":(\{ \<Chatters:AE:ra:rainier\>, 1698624207, 0, \<Allegory:Setting:Rinascita:Buildings:Northwest:Library:SecondFloor:SittingArea\> \}), "poetry reading":(\{ nil, 1557427034, 0, \<Allegory:Setting:Rinascita:Buildings:Northwest:FrenchEstate:GroundFloor:LivingRoom\> \}), "rinaldi dinner":(\{ \<Chatters:Backup:IC:cr:cross0\>, 1519267054, 0, nil \}), "rinaldi house meeting":(\{ \<Chatters:AE:ca:calypso\>, 1565298070, 1, nil \}), "rinaldi tea":(\{ nil, 1522432752, 0, nil \}), "royal retainer hours":(\{ \<Chatters:AE:fr:frederic\>, 1619396806, 1, \<Allegory:Setting:Rinascita:Buildings:Palace:Citadel:FirstFloor:Entryway\> \}), "seamstress hours":(\{ \<Chatters:AE:or:orla\>, 1586822265, 0, \<Allegory:Setting:Rinascita:Buildings:Northwest:SeamstressShop:Main\> \}), "shooting competition":(\{ nil, 1501013875, 0, \<Allegory:Setting:Rinascita:Buildings:Northwest:ArcheryRange:MainRoom\> \}), "shooting practice":(\{ nil, 1555651192, 1, \<Allegory:Setting:Rinascita:Buildings:Northwest:FrenchEstate:GroundFloor:YardSide\> \}), "shop hours":(\{ \<Chatters:AE:st:steve\>, 1494365187, 0, \<Allegory:Setting:Rinascita:Buildings:Northeast:Carpenter:Main\> \}), "smith hours":(\{ \<Chatters:AE:el:elspeth\>, 1563597398, 1, \<Allegory:Setting:Rinascita:Buildings:Northeast:Blacksmith:Main\> \}), "spar":(\{ \<Chatters:AE:et:ethan\>, 1648862912, 0, \<Allegory:Setting:Rinascita:Buildings:Northeast:Colosseum:MainArena\> \}), "stone mason hours":(\{ nil, 1501772159, 1, \<Allegory:Setting:Rinascita:Buildings:Northeast:Stonemason:Main\> \}), "stonemason hours":(\{ \<Chatters:AE:wa:waylon\>, 1585873634, 1, \<Allegory:Setting:Rinascita:Buildings:Northeast:Stonemason:Main\> \}), "swamp trip":(\{ nil, 1528612763, 1, \<Ironclaw:World:DockTown:Commons:WestCommons\> \}), "tattoo bells":(\{ nil, 1408591895, 1 \}), "tattoobells":(\{ \<Chatters:IC:ni:nikita\>, 1558399030, 1, \<Allegory:Setting:Rinascita:Buildings:Southwest:AnasetteApartments:FirstFloor:Main\> \}), "tournament":(\{ \<Chatters:AE:sa:salvatore\>, 1617407957, 1, \<Allegory:Setting:Rinascita:Buildings:Southwest:GamblingHall:Main\> \}), "tournament fight":(\{ \<Chatters:AE:be:beth\>, 1542765938, 0, \<Allegory:Setting:Rinascita:Buildings:Northeast:Colosseum:MainArena\> \}), "weaver hours":(\{ \<Chatters:AE:ma:mallory\>, 1601858910, 1, \<Allegory:Setting:Rinascita:Buildings:Northeast:Weavers:FrontRoom\> \}), "wedding":(\{ \<Chatters:IC:ma:maniae\>, 1494364467, 0, \<Allegory:Setting:Rinascita:Buildings:Southeast:Bank:Lobby\> \}), "wedding-cathedral":(\{ nil, 1459623605, 1, \<Allegory:Setting:Rinascita:Buildings:Northwest:Cathedral:Old:Nave\> \}), "wedding-chapel":(\{ \<Chatters:IC:ti:titia\>, 1456600510, 0, \<Allegory:Setting:Rinascita:Buildings:Northeast:Chapel:Entrance\> \}) ])
      </Core:Property>
      <Core:Property property="gimli:lib:event:bonfire party:announcement">
         "E[G]\\n/* Announce the event */\\nfor(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{\\n  EmitTo(\$pcs[\$i], \\"[\\"+TAG(\\"Event\\", \\"Imp\\")+\\"] A street urchin runs through the streets telling everyone, \\"+Describe(\$actor)+\\" is building a huge fire! I think \\"+Describe(\$actor)+\\" is going to host a bonfire party at \\"+upper_case(Describe(\$event_location))+\\".\\");\\n\}\\n\\nif(!\$actor.\\"bonfireparty:location\\") \{\\n  \$actor.\\"bonfireparty:location\\" = \$actor.\\"base:environment\\";\\n  \$location = \$actor.\\"base:environment\\";\\n  \$bonfire = Spawn(\$\{IronClaw:Props:Lighting:Source:Misc:Bonfire\});\\n  \$bonfire.\\"base:environment\\" = \$location;\\n  \$bonfire.\\"base:immobile\\" = 1;\\n  \$bonfire.\\"base:proximity\\" = \$actor.\\"base:proximity\\";\\n  \$bonfire.\\"base:prepositionstring\\" = \$actor.\\"base:prepositionstring\\";\\n  \$delay(60*60*3, TRUE, \\"8016\\");\\n  if(\$actor) \$actor.\\"bonfireparty:location\\" = nil;\\n  if(\$location) EmitIn(\$location, \\"Some workmen clean up the remains of the bonfire.\\");\\n  if(\$bonfire) Slay(\$bonfire);\\n\}\\n\\nreturn TRUE;"
      </Core:Property>
      <Core:Property property="gimli:lib:event:bonfire party:start">
         "E[G]\\n/* Start the event */\\nfor(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{\\n  EmitTo(\$pcs[\$i], \\"[\\"+TAG(\\"Event Start\\", \\"Imp\\")+\\"] The bonfire crackles and pops as sparks fly.\\");\\n  if(sizeof(\$pcs) \> 1) \{\\n    \$points = 2;\\n    \$hostpoints = 2;\\n    if(sizeof(\$pcs) \> 5) \$hostpoints = 4;\\n    ::givepoints(\$pc: \$pcs[\$i], \$points: \$points, \$hostpoints: \$hostpoints, \$eventname: \$eventname, \$eventtype: \$eventname, \$host: \$actor);\\n  \}\\n\}\\n\\nreturn TRUE;"
      </Core:Property>
      <Core:Property property="gimli:lib:event_command">
         "E[G]\\n// Command that allows players to announce or trigger an event\\n// Called from the @event command\\n\$az = \$\{Chatters:IC:az:azrael\};\\n\$events = ::eventlist();\\n\\nif (\$(event:words) \&\& sizeof(\$(event:words)) \>= 2 \&\& lower_case(\$(event:words)[0]) == \\"announce\\") \{\\n    \$event = lower_case(implode(\$(event:words)[1..], \\" \\"));\\n    // Is event in the list?\\n    if(!member(\$event, \$events)) \{\\n        EmitTo(\$actor, \\"Sorry, that isn't a valid event.\\");\\n        return FALSE;\\n    \}\\n    // Are they already running an event?\\n    if(\$actor.\\"event:type\\" \&\& \$actor.\\"event:type\\" != \$event) \{\\n        EmitTo(\$actor, \\"You are already hosting a \\"+\$actor.\\"event:type\\"+\\" event.\\");\\n        return FALSE;\\n    \}\\n\\n    if(!\$event_location) \$event_location = \$actor.\\"base:environment\\";\\n    if(FindMerry(\$events_object, \\"lib\\", \\"event:\\"+\$event+\\":announcement\\")) \{\\n      Call(\$events_object, \\"event:\\"+\$event+\\":announcement\\", \$eventname: \$event, \$pcs: common::wholist());\\n    \} else \{\\n      EmitTo(\$actor, \\"There is no announcement set for the \\"+\$event+\\" event.\\");\\n    \}\\n    // Store this event is running and the location. Store this for 40 mins\\n    if(!\$actor.\\"event:type\\") ironclaw::set_prop(\$obj: \$actor, \$prop: \\"event:announce_delay\\", \$value: \$event, \$timer: 60*5);\\n    if(!\$actor.\\"event:type\\") ironclaw::set_prop(\$obj: \$actor, \$prop: \\"event:type\\", \$value: \$event, \$timer: 60*40);\\n    ironclaw::set_prop(\$obj: \$actor, \$prop: \\"event:location\\", \$value: \$event_location, \$timer: 60*40);\\n    \$this.eventlog[\$event] = (\{ \$actor, time(), 1, \$event_location \});\\n\} else if (\$(event:words) \&\& sizeof(\$(event:words)) \>= 2 \&\& lower_case(\$(event:words)[0]) == \\"start\\") \{\\n    \$event = lower_case(implode(\$(event:words)[1..], \\" \\"));\\n    // Is event in the list?\\n    if(!member(\$event, \$events)) \{\\n        EmitTo(\$actor, \\"Sorry, that isn't a valid event.\\");\\n        return FALSE;\\n    \}\\n    // Did they announce this event more than 5 mins ago?\\n    if(\$actor.\\"event:announce_delay\\" \|\|  !\$actor.\\"event:type\\" \|\| !\$actor.\\"event:location\\") \{\\n        EmitTo(\$actor, \\"You need to announce an event at least five minutes before you start it. Otherwise how will other PCs attend?\\");\\n        return FALSE;\\n    \}\\n    // Are they already running a different event?\\n    if(\$actor.\\"event:type\\" != \$event) \{\\n        EmitTo(\$actor, \\"You are already hosting a \\"+\$actor.\\"event:type\\"+\\" event.\\");\\n        return FALSE;\\n    \}\\n    // Are they at the right location?\\n    if(\$actor.\\"event:location\\" != \$actor.\\"base:environment\\") \{\\n      EmitTo(\$actor, \\"You must be at \\"+Describe(\$actor.\\"event:location\\")+\\" to begin this event.\\");\\n      return TRUE;\\n    \}\\n    // Set the location (and reset the timer to give another 40 mins\\n    \$event_location = \$actor.\\"event:location\\";\\n    ironclaw::set_prop(\$obj: \$actor, \$prop: \\"event:location\\", \$value: \$event_location, \$timer: 60*40);\\n    ironclaw::set_prop(\$obj: \$actor, \$prop: \\"event:type\\", \$value: \$event, \$timer: 60*40);\\n\\n    if(FindMerry(\$events_object, \\"lib\\", \\"event:\\"+\$event+\\":start\\")) \{\\n      \$pcs = Match(\$actor.\\"base:environment\\", \\"pc\\");\\n      for(\$i=0;\$i\<sizeof(\$pcs);\$i++)\\n        \$pcs[\$i] = NRefOb(\$pcs[\$i]);\\n      Call(\$events_object, \\"event:\\"+\$event+\\":start\\", \$eventname: \$event, \$pcs: \$pcs);\\n    \} else \{\\n      EmitTo(\$actor, \\"There is no start script set for the \\"+\$event+\\" event.\\");\\n    \}\\n    \$this.eventlog[\$event] = (\{ \$actor, time(), 0, \$event_location \});\\n\} else \{\\n    if(!sizeof(\$events)) \{\\n      EmitTo(\$actor, \\"Sorry, you do not have any events available for this PC.\\");\\n      EmitTo(\$actor, \\"If you would like to run events, p    lease contact the game staff.\\");\\n      return FALSE;\\n    \}\\n    /* List all the events that this PC can trigger */\\n    EmitTo(\$actor, \\"Command: @event announce\|start EVENTNAME\\");\\n    EmitTo(\$actor, \\"Valid events:\\");\\n    for(\$i=0;\$i\<sizeof(\$events);\$i++)\\n      EmitTo(\$actor, \$events[\$i]);\\n\}\\n\\nreturn FALSE;\\n/*\\nif (!\$adverb \&\& !\$dob) \{\\n  \$data = \\"Data:DB:assist:AssistGeneralDB\\";\\n  \$data = Obj(\$data);\\n  if (sizeof(explode(\$(raw-evoke), \\" \\")) \< 5) \{\\n    EmitTo(\$actor, \\"**[Your description is under the minimum word length. Please elaborate on the nature of the event]**\\");\\n    return FALSE;\\n  \}\\n  assist::dofileassist(\$data: \$data, \$char: Str(\$actor), \$queue: \\"events\\", \$assisttext: \$(raw-evoke), \$log: \\"[TAS]\\");\\n  return FALSE;\\n\}\\n*/"
      </Core:Property>
      <Core:Property property="gimli:lib:givepoints">
         "E[G]\\n/* Give PC points for hosting or attending an event */\\nif(!\$pc) return FALSE;\\nif(!\$points) return FALSE;\\nif(!\$eventname) return FALSE;\\nif(!\$eventtype) \$eventtype = \$eventname;\\nif(!\$host) \$host = \$actor;\\nif(!\$group) \$group = \$pc.\\"loyalty:group\\";\\nif(!\$group) \$group = \$host.\\"loyalty:group\\";\\nif(!\$group) \$group = \\"all\\";\\n\$pc = NRefOb(\$pc);\\n\\n// Is this the host?\\nif(\$pc == \$host) \{\\n  if(\$hostpoints) \$points = \$hostpoints;\\n  if(!\$pc.\\"event:hosted\\") \$pc.\\"event:hosted\\" = (\{ \});\\n  if(Int(\$pc.\\"event:hosted:lasttracked\\")+60*60*2 \< time()) \{\\n    \$pc.\\"event:hosted:lasttracked\\" = time();\\n    \$pc.\\"event:hosted\\" += (\{ (\{ \$eventname, \$group, time() \}) \});\\n  \}\\n\}\\n\\nif(!\$pc.\\"event:points\\") \$pc.\\"event:points\\" = ([ ]);\\nif(!\$pc.\\"event:points\\"[\$group]) \$pc.\\"event:points\\"[\$group] = ([ ]);\\nif(!\$pc.\\"event:points\\"[\$group][\$eventtype]) \{\\n  \$pc.\\"event:points\\"[\$group][\$eventtype] = (\{ \$points, time(), 0 \});\\n\} else \{\\n  if(\$points \> \$pc.\\"event:points\\"[\$group][\$eventtype][0])\\n    \$pc.\\"event:points\\"[\$group][\$eventtype] = (\{ \$points, time(), Int(\$pc.\\"event:points\\"[\$group][\$eventtype][2]) \});\\n\}\\n\\n// Are we already doing idleness checking?\\nif(\$pc.\\"tmp:event_idle_checking\\") return TRUE;\\n\\nfor(\$idle_counter=0; \$idle_counter\<12; \$idle_counter++) \{\\n  \$pc.\\"tmp:event_idle_checking\\" = TRUE;\\n  \$delay(60*15, TRUE);\\n  // Are they idle?\\n  // This isn't a perfect check... but it'll do\\n  if(\$pc.\\"udat:idle\\" \&\& \$pc.\\"udat:idle\\" \< 60*10) \{\\n    if(sizeof(\$pc.\\"event:points\\"[\$group][\$eventtype]) \> 2) \{\\n        \$pc.\\"event:points\\"[\$group][\$eventtype][2] = Int(\$pc.\\"event:points\\"[\$group][\$eventtype][2])+1;\\n    \} else \{\\n        \$pc.\\"event:points\\"[\$group][\$eventtype] += (\{ 1 \});\\n    \}\\n  \}\\n\}\\n\$pc.\\"tmp:event_idle_checking\\" = nil;\\n\\nreturn TRUE;"
      </Core:Property>
      <Core:Property property="merry:lib:event:audience hours:announcement">
         X[M] /* Announce the event */                         
                         
  \$location = \$actor."base:environment";

  if(\$location."trait:area" \&\& \$location."trait:area" != Describe(\$location)) \{
    \$location = upper_case(Describe(\$location)) + " inside of " + upper_case(Str(\$location."trait:area"));
  \} else \{
    \$location = Describe(\$location);
  \}                                        
             
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{                     
  EmitTo(\$pcs[\$i], "["+TAG("Event", "Imp")+"] A page boy passes through announcing that "+Describe(\$actor)+" is hosting audience hours at "+\$location+".");            
       
                
\}           
                  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:audience hours:start">
         X[M] /* Start the event */       
      
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{       
  EmitTo(\$pcs[\$i], "["+TAG("Event Start", "Imp")+"] "+Describe(\$actor)+" announces that the audience hours have now begun.");       
  if(sizeof(\$pcs) \> 1)                                      
    ::givepoints(\$pc: \$pcs[\$i], \$points: 1, \$eventname: \$eventname);                                      
\}                                      
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:blacksmith hours:announcement">
         X[M] /* Announce the event */                          
                          
  \$location = \$actor."base:environment";

  if(\$location."trait:area" \&\& \$location."trait:area" != Describe(\$location)) \{
    \$location = upper_case(Describe(\$location)) + " inside of " + upper_case(Str(\$location."trait:area"));
  \} else \{
    \$location = Describe(\$location);
  \}                                                
              
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{                          
  EmitTo(\$pcs[\$i], "["+TAG("Event", "Imp")+"] A page boy passes through announcing that "+Describe(\$actor)+" is hosting blacksmith hours at "+\$location+".");             
        
                 
\}            
                   
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:blacksmith hours:start">
         X[M] /* Start the event */        
       
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{        
  EmitTo(\$pcs[\$i], "["+TAG("Event Start", "Imp")+"] "+Describe(\$actor)+" announces that the blacksmith hours have now begun.");        
  if(sizeof(\$pcs) \> 1)                                       
    ::givepoints(\$pc: \$pcs[\$i], \$points: 1, \$eventname: \$eventname);                                       
\}                                       
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:bookbinder hours:announcement">
         X[M] /* Announce the event */                           
                           
  \$location = \$actor."base:environment";    

  if(\$location."trait:area" \&\& \$location."trait:area" != Describe(\$location)) \{
    \$location = upper_case(Describe(\$location)) + " inside of " + upper_case(Str(\$location."trait:area"));
  \} else \{
    \$location = Describe(\$location);
  \}                                             
               
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{                           
  EmitTo(\$pcs[\$i], "["+TAG("Event", "Imp")+"] A page boy passes through announcing that "+Describe(\$actor)+" is hosting bookbinder hours at "+\$location+".");              
         
                  
\}             
                    
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:bookbinder hours:start">
         X[M] /* Start the event */         
        
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{         
  EmitTo(\$pcs[\$i], "["+TAG("Event Start", "Imp")+"] "+Describe(\$actor)+" announces that the bookbinder hours have now begun.");         
  if(sizeof(\$pcs) \> 1)                                        
    ::givepoints(\$pc: \$pcs[\$i], \$points: 1, \$eventname: \$eventname);                                        
\}                                        
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:carpenter hours:announcement">
         X[M] /* Announce the event */                            
                            
  \$location = \$actor."base:environment";   

  if(\$location."trait:area" \&\& \$location."trait:area" != Describe(\$location)) \{
    \$location = upper_case(Describe(\$location)) + " inside of " + upper_case(Str(\$location."trait:area"));
  \} else \{
    \$location = Describe(\$location);
  \}                                               
                
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{                            
  EmitTo(\$pcs[\$i], "["+TAG("Event", "Imp")+"] A page boy passes through announcing that "+Describe(\$actor)+" is hosting carpenter hours at "+\$location+".");               
          
                   
\}              
                     
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:carpenter hours:start">
         X[M] /* Start the event */          
         
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{          
  EmitTo(\$pcs[\$i], "["+TAG("Event Start", "Imp")+"] "+Describe(\$actor)+" announces that the carpenter hours have now begun.");          
  if(sizeof(\$pcs) \> 1)                                         
    ::givepoints(\$pc: \$pcs[\$i], \$points: 1, \$eventname: \$eventname);                                         
\}                                         
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:consulate meeting:announcement">
         X[M] /* Announce the event */                         
                         
  \$location = \$actor."base:environment";      

  if(\$location."trait:area" \&\& \$location."trait:area" != Describe(\$location)) \{
    \$location = upper_case(Describe(\$location)) + " inside of " + upper_case(Str(\$location."trait:area"));
  \} else \{
    \$location = Describe(\$location);
  \}                                         
             
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{                         
  EmitTo(\$pcs[\$i], "["+TAG("Event", "Imp")+"] A page boy passes through announcing that "+Describe(\$actor)+" is hosting a consulate meeting at "+\$location+".");            
       
                
\}           
                  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:consulate meeting:start">
         X[M] /* Start the event */       
      
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{       
  EmitTo(\$pcs[\$i], "["+TAG("Event Start", "Imp")+"] "+Describe(\$actor)+" announces that the consulate meeting has now begun.");       
  if(sizeof(\$pcs) \> 1)                                      
    ::givepoints(\$pc: \$pcs[\$i], \$points: 1, \$eventname: \$eventname);                                      
\}                                      
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:dyer hours:announcement">
         X[M] /* Announce the event */                         
                         
  \$location = \$actor."base:environment";     

  if(\$location."trait:area" \&\& \$location."trait:area" != Describe(\$location)) \{
    \$location = upper_case(Describe(\$location)) + " inside of " + upper_case(Str(\$location."trait:area"));
  \} else \{
    \$location = Describe(\$location);
  \}                                          
             
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{                         
  EmitTo(\$pcs[\$i], "["+TAG("Event", "Imp")+"] A page boy passes through announcing that "+Describe(\$actor)+" is hosting dyer hours at "+\$location+".");            
       
                
\}           
                  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:dyer hours:start">
         X[M] /* Start the event */       
      
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{       
  EmitTo(\$pcs[\$i], "["+TAG("Event Start", "Imp")+"] "+Describe(\$actor)+" announces that the dyer hours have now begun.");       
  if(sizeof(\$pcs) \> 1)                                      
    ::givepoints(\$pc: \$pcs[\$i], \$points: 1, \$eventname: \$eventname);                                      
\}                                      
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:gathering:announcement">
         X[M] /* Announce the event */                         
                         
  \$location = \$actor."base:environment";     

  if(\$location."trait:area" \&\& \$location."trait:area" != Describe(\$location)) \{
    \$location = upper_case(Describe(\$location)) + " inside of " + upper_case(Str(\$location."trait:area"));
  \} else \{
    \$location = Describe(\$location);
  \}                                          
             
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{                         
  EmitTo(\$pcs[\$i], "["+TAG("Event", "Imp")+"] A page boy passes through announcing that "+Describe(\$actor)+" is hosting a gathering at "+\$location+".");            
       
                
\}           
                  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:gathering:start">
         X[M] /* Start the event */       
      
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{       
  EmitTo(\$pcs[\$i], "["+TAG("Event Start", "Imp")+"] "+Describe(\$actor)+" announces that the gathering has now begun.");       
  if(sizeof(\$pcs) \> 1)                                      
    ::givepoints(\$pc: \$pcs[\$i], \$points: 1, \$eventname: \$eventname);                                      
\}                                      
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:guild meeting:announcement">
         X[M] /* Announce the event */                         
                         
  \$location = \$actor."base:environment";    

  if(\$location."trait:area" \&\& \$location."trait:area" != Describe(\$location)) \{
    \$location = upper_case(Describe(\$location)) + " inside of " + upper_case(Str(\$location."trait:area"));
  \} else \{
    \$location = Describe(\$location);
  \}                                           
             
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{                         
  EmitTo(\$pcs[\$i], "["+TAG("Event", "Imp")+"] A page boy passes through announcing that "+Describe(\$actor)+" is hosting a guild meeting at "+\$location+".");            
       
                
\}           
                  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:guild meeting:start">
         X[M] /* Start the event */       
      
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{       
  EmitTo(\$pcs[\$i], "["+TAG("Event Start", "Imp")+"] "+Describe(\$actor)+" announces that the guild meeting has now begun.");       
  if(sizeof(\$pcs) \> 1)                                      
    ::givepoints(\$pc: \$pcs[\$i], \$points: 1, \$eventname: \$eventname);                                      
\}                                      
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:hairstyling hours:announcement">
         X[M] /* Announce the event */                          
                          
  \$location = \$actor."base:environment";     

  if(\$location."trait:area" \&\& \$location."trait:area" != Describe(\$location)) \{
    \$location = upper_case(Describe(\$location)) + " inside of " + upper_case(Str(\$location."trait:area"));
  \} else \{
    \$location = Describe(\$location);
  \}                                           
              
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{                          
  EmitTo(\$pcs[\$i], "["+TAG("Event", "Imp")+"] A page boy passes through announcing that "+Describe(\$actor)+" is hosting hairstyling hours at "+\$location+".");             
        
                 
\}            
                   
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:hairstyling hours:start">
         X[M] /* Start the event */        
       
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{        
  EmitTo(\$pcs[\$i], "["+TAG("Event Start", "Imp")+"] "+Describe(\$actor)+" announces that the hairstyling hours have now begun.");        
  if(sizeof(\$pcs) \> 1)                                       
    ::givepoints(\$pc: \$pcs[\$i], \$points: 1, \$eventname: \$eventname);                                       
\}                                       
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:hospital hours:announcement">
         X[M] /* Announce the event */                         
                         
  \$location = \$actor."base:environment";              

  if(\$location."trait:area" \&\& \$location."trait:area" != Describe(\$location)) \{
    \$location = upper_case(Describe(\$location)) + " inside of " + upper_case(Str(\$location."trait:area"));
  \} else \{
    \$location = Describe(\$location);
  \}                                 
             
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{                         
  EmitTo(\$pcs[\$i], "["+TAG("Event", "Imp")+"] A page boy passes through announcing that "+Describe(\$actor)+" is hosting hospital hours at "+\$location+".");            
       
                
\}           
                  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:hospital hours:start">
         X[M] /* Start the event */       
      
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{       
  EmitTo(\$pcs[\$i], "["+TAG("Event Start", "Imp")+"] "+Describe(\$actor)+" announces that the hospital hours have now begun.");       
  if(sizeof(\$pcs) \> 1)                                      
    ::givepoints(\$pc: \$pcs[\$i], \$points: 1, \$eventname: \$eventname);                                      
\}                                      
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:hunt:announcement">
         X[M] /* Announce the event */                         
                         
  \$location = \$actor."base:environment";       

  if(\$location."trait:area" \&\& \$location."trait:area" != Describe(\$location)) \{
    \$location = upper_case(Describe(\$location)) + " inside of " + upper_case(Str(\$location."trait:area"));
  \} else \{
    \$location = Describe(\$location);
  \}                                        
             
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{                         
  EmitTo(\$pcs[\$i], "["+TAG("Event", "Imp")+"] A page boy passes through announcing that "+Describe(\$actor)+" is hosting a hunt at "+\$location+".");            
       
                
\}           
                  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:hunt:start">
         X[M] /* Start the event */       
      
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{       
  EmitTo(\$pcs[\$i], "["+TAG("Event Start", "Imp")+"] "+Describe(\$actor)+" announces that the hunt has now begun.");       
  if(sizeof(\$pcs) \> 1)                                      
    ::givepoints(\$pc: \$pcs[\$i], \$points: 1, \$eventname: \$eventname);                                      
\}                                      
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:jeweler hours:announcement">
         X[M] /* Announce the event */                          
                          
  \$location = \$actor."base:environment";              

  if(\$location."trait:area" \&\& \$location."trait:area" != Describe(\$location)) \{
    \$location = upper_case(Describe(\$location)) + " inside of " + upper_case(Str(\$location."trait:area"));
  \} else \{
    \$location = Describe(\$location);
  \}                                  
              
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{                          
  EmitTo(\$pcs[\$i], "["+TAG("Event", "Imp")+"] A page boy passes through announcing that "+Describe(\$actor)+" is hosting jeweler hours at "+\$location+".");             
        
                 
\}            
                   
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:jeweler hours:start">
         X[M] /* Start the event */        
       
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{        
  EmitTo(\$pcs[\$i], "["+TAG("Event Start", "Imp")+"] "+Describe(\$actor)+" announces that the jeweler hours have now begun.");        
  if(sizeof(\$pcs) \> 1)                                       
    ::givepoints(\$pc: \$pcs[\$i], \$points: 1, \$eventname: \$eventname);                                       
\}                                       
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:mass:announcement">
         X[M] /* Announce the event */                         
                         
  \$location = \$actor."base:environment"; 

  if(\$location."trait:area" \&\& \$location."trait:area" != Describe(\$location)) \{
    \$location = upper_case(Describe(\$location)) + " inside of " + upper_case(Str(\$location."trait:area"));
  \} else \{
    \$location = Describe(\$location);
  \}                                              
             
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{                         
  EmitTo(\$pcs[\$i], "["+TAG("Event", "Imp")+"] A page boy passes through announcing that "+Describe(\$actor)+" is hosting mass at "+\$location+".");            
       
                
\}           
                  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:mass:start">
         X[M] /* Start the event */       
      
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{       
  EmitTo(\$pcs[\$i], "["+TAG("Event Start", "Imp")+"] "+Describe(\$actor)+" announces that mass has now begun.");       
  if(sizeof(\$pcs) \> 1)                                      
    ::givepoints(\$pc: \$pcs[\$i], \$points: 1, \$eventname: \$eventname);                                      
\}                                      
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:party:announcement">
         X[M] /* Announce the event */                         
                         
  \$location = \$actor."base:environment";  
  if(\$location."trait:area" \&\& \$location."trait:area" != Describe(\$location)) \{
    \$location = upper_case(Describe(\$location)) + " inside of " + upper_case(Str(\$location."trait:area"));
  \} else \{
    \$location = Describe(\$location);
  \}                                             
             
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{                         
  EmitTo(\$pcs[\$i], "["+TAG("Event", "Imp")+"] A page boy passes through announcing that "+Describe(\$actor)+" is hosting a party at "+\$location+".");            
       
                
\}           
                  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:party:start">
         X[M] /* Start the event */       
      
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{       
  EmitTo(\$pcs[\$i], "["+TAG("Event Start", "Imp")+"] "+Describe(\$actor)+" announces that the party has now begun.");       
  if(sizeof(\$pcs) \> 1)                                      
    ::givepoints(\$pc: \$pcs[\$i], \$points: 1, \$eventname: \$eventname);                                      
\}                                      
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:royal retainer hours:announcement">
         X[M] /* Announce the event */                           
                           
  \$location = \$actor."base:environment";      

  if(\$location."trait:area" \&\& \$location."trait:area" != Describe(\$location)) \{
    \$location = upper_case(Describe(\$location)) + " inside of " + upper_case(Str(\$location."trait:area"));
  \} else \{
    \$location = Describe(\$location);
  \}                                           
               
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{                           
  EmitTo(\$pcs[\$i], "["+TAG("Event", "Imp")+"] A page boy passes through announcing that "+Describe(\$actor)+" is hosting royal retainer hours at "+\$location+".");              
         
                  
\}             
                    
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:royal retainer hours:start">
         X[M] /* Start the event */         
        
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{         
  EmitTo(\$pcs[\$i], "["+TAG("Event Start", "Imp")+"] "+Describe(\$actor)+" announces that the royal retainer hours hours have now begun.");         
  if(sizeof(\$pcs) \> 1)                                        
    ::givepoints(\$pc: \$pcs[\$i], \$points: 1, \$eventname: \$eventname);                                        
\}                                        
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:seamstress hours:announcement">
         X[M] /* Announce the event */                           
                           
  \$location = \$actor."base:environment";       

  if(\$location."trait:area" \&\& \$location."trait:area" != Describe(\$location)) \{
    \$location = upper_case(Describe(\$location)) + " inside of " + upper_case(Str(\$location."trait:area"));
  \} else \{
    \$location = Describe(\$location);
  \}                                          
               
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{                           
  EmitTo(\$pcs[\$i], "["+TAG("Event", "Imp")+"] A page boy passes through announcing that "+Describe(\$actor)+" is hosting seamstress hours at "+\$location+".");              
         
                  
\}             
                    
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:seamstress hours:start">
         X[M] /* Start the event */         
        
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{         
  EmitTo(\$pcs[\$i], "["+TAG("Event Start", "Imp")+"] "+Describe(\$actor)+" announces that the seamstress hours have now begun.");         
  if(sizeof(\$pcs) \> 1)                                        
    ::givepoints(\$pc: \$pcs[\$i], \$points: 1, \$eventname: \$eventname);                                        
\}                                        
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:spar:announcement">
         X[M] /* Announce the event */                         
                         
  \$location = \$actor."base:environment";

  if(\$location."trait:area" \&\& \$location."trait:area" != Describe(\$location)) \{
    \$location = upper_case(Describe(\$location)) + " inside of " + upper_case(Str(\$location."trait:area"));
  \} else \{
    \$location = Describe(\$location);
  \}                                               
             
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{                         
  EmitTo(\$pcs[\$i], "["+TAG("Event", "Imp")+"] A page boy passes through announcing that "+Describe(\$actor)+" is hosting a spar at "+\$location+".");            
       
                
\}           
                  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:spar:start">
         X[M] /* Start the event */       
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{       
  EmitTo(\$pcs[\$i], "["+TAG("Event Start", "Imp")+"] "+Describe(\$actor)+" announces that the spar has now begun.");       
  if(sizeof(\$pcs) \> 1)                                      
    ::givepoints(\$pc: \$pcs[\$i], \$points: 1, \$eventname: \$eventname);                                      
\}                                      
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:stonemason hours:announcement">
         X[M] /* Announce the event */                          
                          
  \$location = \$actor."base:environment";    

  if(\$location."trait:area" \&\& \$location."trait:area" != Describe(\$location)) \{
    \$location = upper_case(Describe(\$location)) + " inside of " + upper_case(Str(\$location."trait:area"));
  \} else \{
    \$location = Describe(\$location);
  \}                                            
              
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{                          
  EmitTo(\$pcs[\$i], "["+TAG("Event", "Imp")+"] A page boy passes through announcing that "+Describe(\$actor)+" is hosting stonemason hours at "+\$location+".");             
        
                 
\}            
                   
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:stonemason hours:start">
         X[M] /* Start the event */        
       
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{        
  EmitTo(\$pcs[\$i], "["+TAG("Event Start", "Imp")+"] "+Describe(\$actor)+" announces that the stonemason hours have now begun.");        
  if(sizeof(\$pcs) \> 1)                                       
    ::givepoints(\$pc: \$pcs[\$i], \$points: 1, \$eventname: \$eventname);                                       
\}                                       
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:tournament:announcement">
         X[M] /* Announce the event */                         
                         
  \$location = \$actor."base:environment";  
  if(\$location."trait:area" \&\& \$location."trait:area" != Describe(\$location)) \{
    \$location = upper_case(Describe(\$location)) + " inside of " + upper_case(Str(\$location."trait:area"));
  \} else \{
    \$location = Describe(\$location);
  \}                                             
             
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{                         
  EmitTo(\$pcs[\$i], "["+TAG("Event", "Imp")+"] A page boy passes through announcing that "+Describe(\$actor)+" is hosting a tournament at "+\$location+".");            
       
                
\}           
                  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:tournament:start">
         X[M] /* Start the event */       
      
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{       
  EmitTo(\$pcs[\$i], "["+TAG("Event Start", "Imp")+"] "+Describe(\$actor)+" announces that the tournament has now begun.");       
  if(sizeof(\$pcs) \> 1)                                      
    ::givepoints(\$pc: \$pcs[\$i], \$points: 1, \$eventname: \$eventname);                                      
\}                                      
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:weaver hours:announcement">
         X[M] /* Announce the event */                           
                           
  \$location = \$actor."base:environment";   

  if(\$location."trait:area" \&\& \$location."trait:area" != Describe(\$location)) \{
    \$location = upper_case(Describe(\$location)) + " inside of " + upper_case(Str(\$location."trait:area"));
  \} else \{
    \$location = Describe(\$location);
  \}                                              
               
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{                           
  EmitTo(\$pcs[\$i], "["+TAG("Event", "Imp")+"] A page boy passes through announcing that "+Describe(\$actor)+" is hosting weaver hours at "+\$location+".");              
         
                  
\}             
                    
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event:weaver hours:start">
         X[M] /* Start the event */         
        
for(\$i=0;\$i\<sizeof(\$pcs);\$i++) \{         
  EmitTo(\$pcs[\$i], "["+TAG("Event Start", "Imp")+"] "+Describe(\$actor)+" announces that the weaver hours have now begun.");         
  if(sizeof(\$pcs) \> 1)                                        
    ::givepoints(\$pc: \$pcs[\$i], \$points: 1, \$eventname: \$eventname);                                        
\}                                        
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:event_command">
         X[M] /* Gimli-Powered! Do not edit! Edit gimli:lib:event_command instead! */         
/* Command that allows players to announce or trigger an event */         
/* Called from the @event command */         
\$az = \$\{Chatters:AE:az:azrael\};         
\$events = ::eventlist();         
         
if(\$(event:words) \&\& sizeof(\$(event:words)) == 1 \&\& lower_case(\$(event:words)[0]) == "calendar") \{
    EmitTo(\$actor, "");
    \$delay(0.1, FALSE, "045b");
    Popup(\$actor, \$\{Allegory:Lib:Events:calendar\}, "index", \$actor: \$actor);
    return FALSE;
\} else if(\$(event:words) \&\& sizeof(\$(event:words)) \>= 2 \&\& lower_case(\$(event:words)[0]) == "announce") \{   
    \$event = lower_case(implode(\$(event:words)[1..], " "));         
    /* Is event in the list? */         
    if(!member(\$event, \$events)) \{         
        EmitTo(\$actor, "Sorry, that isn't a valid event.");         
        return FALSE;         
    \}  

    \$onthefly = (\{ "blacksmith hours", "bookbinder hours", "carpenter hours", "dyer hours", "hairstyling hours", "jeweler hours", "seamstress hours", "stonemason hours", "weaver hours", "hospital hours", "spar" \});

    \$eventDB = \$\{Allegory:Data:Events\};
    \$months = (\{ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" \});

    \$day = get_day(time());
    \$month = \$months[get_month(time())-1];
    \$hour = Str(get_hour(time()));

    if(Int(\$hour) \< 10) \$hours = "0" + \$hour;

    \$events = Get(\$eventDB, "event:" + lower_case(\$month));

    if(!\$events[Str(\$day)]) \{
        if(!member(\$event, \$onthefly)) \{
            EmitTo(\$actor, "You have not scheduled any events for today. Use the syntax '@event calendar' to access the calendar.");
        \} else \{
            if(FindMerry(\$events_object, "lib", "event:"+\$event+":announcement")) \{         
                Call(\$events_object, "event:"+\$event+":announcement", \$eventname: \$event, \$pcs: common::wholist());  
                EmitTo(\$actor, TAG("Remember, no favor points are awarded for on the fly events.", "imp"));       
            \} else \{         
                EmitTo(\$actor, "There is no announcement set for the "+\$event+" event.");         
            \} 
        \}  
        return FALSE;
    \}

    \$hourListMap = \$events[Str(\$day)];
    \$hourList = map_indices(\$hourListMap);
    \$found = 0;

    for(\$i = 0; \$i \< sizeof(\$hourList); \$i++) \{
        if(\$hourList[\$i][0..1] == \$hour) \{
            \$temp = \$hourListMap[\$hourList[\$i]];
            for(\$j = 0; \$j \< sizeof(\$temp); \$j++) \{
                if(\$actor == \$temp[\$j][4]) \{
                    if(\$event == \$temp[\$j][5]) \{
                        \$found++;
                        \$foundEvent = \$temp;
                    \}
                \}
            \}
        \}

        \$t = Int(\$hourList[\$i][0..1]);
        \$t = Str(\$t);
        if(Int(\$t) \< 10) \$t = "0" + \$t;
        if(\$t == \$hour) \{
            \$temp = \$hourListMap[\$hourList[\$i]];
            for(\$j = 0; \$j \< sizeof(\$temp); \$j++) \{
                if(\$actor == \$temp[\$j][4]) \{
                    if(\$event == \$temp[\$j][5]) \{
                        \$found++;
                        \$foundEvent = \$temp;
                    \}
                \}
            \}
        \}

        \$t = Int(\$hourList[\$i][0..1]) - 1;
        \$t = Str(\$t);
        if(Int(\$t) \< 10) \$t = "0" + \$t;
        if(\$t == \$hour) \{
            \$temp = \$hourListMap[\$hourList[\$i]];
            for(\$j = 0; \$j \< sizeof(\$temp); \$j++) \{
                if(\$actor == \$temp[\$j][4]) \{
                    if(\$event == \$temp[\$j][5]) \{
                        \$found++;
                        \$foundEvent = \$temp;
                    \}
                \}
            \}
        \}
    \}

    if(!\$found) \{
        if(!member(\$event, \$onthefly)) \{
            EmitTo(\$actor, "No event found in the event calendar matching this description. Check the time of your scheduled event and try again. Events can be announced an hour before or an hour after the scheduled time. Use the syntax '@event calendar' to access the calendar.");
        \} else \{
            if(FindMerry(\$events_object, "lib", "event:"+\$event+":announcement")) \{         
                Call(\$events_object, "event:"+\$event+":announcement", \$eventname: \$event, \$pcs: common::wholist());    
                EmitTo(\$actor, TAG("Remember, no favor points are awarded for on the fly events.", "imp"));      
            \} else \{         
                EmitTo(\$actor, "There is no announcement set for the "+\$event+" event.");         
            \}   
        \}
        return FALSE;
    \}
/*    if(\$found \> 1) \{
        EmitTo(\$actor, "Multiple events found in the calendar matching this entry. Contact staff for assistance.");
        return FALSE;
    \} */
             
    /* Are they already running an event? */         
    if(\$actor."event:type" \&\& \$actor."event:type" != \$event) \{         
        EmitTo(\$actor, "You are already hosting a "+\$actor."event:type"+" event.");         
        return FALSE;         
    \}         
         
    if(!\$event_location) \$event_location = \$actor."base:environment";         
    if(FindMerry(\$events_object, "lib", "event:"+\$event+":announcement")) \{         
      Call(\$events_object, "event:"+\$event+":announcement", \$eventname: \$event, \$pcs: common::wholist());         
    \} else \{         
      EmitTo(\$actor, "There is no announcement set for the "+\$event+" event.");         
    \}         
    /* Store this event is running and the location. Store this for 40 mins */         
    if(!\$actor."event:type") ironclaw::set_prop(\$obj: \$actor, \$prop: "event:announce_delay", \$value: \$event, \$timer: 60*5);         
    if(!\$actor."event:type") ironclaw::set_prop(\$obj: \$actor, \$prop: "event:type", \$value: \$event, \$timer: 60*40);         
    ironclaw::set_prop(\$obj: \$actor, \$prop: "event:location", \$value: \$event_location, \$timer: 60*40);         
    \$this.eventlog[\$event] = (\{ \$actor, time(), 1, \$event_location \});         
\} else if (\$(event:words) \&\& sizeof(\$(event:words)) \>= 2 \&\& lower_case(\$(event:words)[0]) == "start") \{         
    \$event = lower_case(implode(\$(event:words)[1..], " "));         
    /* Is event in the list? */         
    if(!member(\$event, \$events)) \{         
        EmitTo(\$actor, "Sorry, that isn't a valid event.");         
        return FALSE;         
    \}         
    /* Did they announce this event more than 5 mins ago? */         
    if(\$actor."event:announce_delay" \|\|  !\$actor."event:type" \|\| !\$actor."event:location") \{         
        EmitTo(\$actor, "You need to announce an event at least five minutes before you start it. Otherwise how will other PCs attend?");         
        return FALSE;         
    \}         
    /* Are they already running a different event? */         
    if(\$actor."event:type" != \$event) \{         
        EmitTo(\$actor, "You are already hosting a "+\$actor."event:type"+" event.");         
        return FALSE;         
    \}         
    /* Are they at the right location? */         
    if(\$actor."event:location" != \$actor."base:environment") \{         
      EmitTo(\$actor, "You must be at "+Describe(\$actor."event:location")+" to begin this event.");         
      return TRUE;         
    \}         
    /* Set the location (and reset the timer to give another 40 mins */         
    \$event_location = \$actor."event:location";         
    ironclaw::set_prop(\$obj: \$actor, \$prop: "event:location", \$value: \$event_location, \$timer: 60*40);         
    ironclaw::set_prop(\$obj: \$actor, \$prop: "event:type", \$value: \$event, \$timer: 60*40);         
 
    if(FindMerry(\$events_object, "lib", "event:"+\$event+":start")) \{   
      
      \$pcs = Match(\$actor."base:environment", "pc");      
      for(\$i=0;\$i\<sizeof(\$pcs);\$i++)         
        \$pcs[\$i] = NRefOb(\$pcs[\$i]);         
      Call(\$events_object, "event:"+\$event+":start", \$eventname: \$event, \$pcs: \$pcs);         
    \} else \{         
      EmitTo(\$actor, "There is no start script set for the "+\$event+" event.");         
    \}         
    \$this.eventlog[\$event] = (\{ \$actor, time(), 0, \$event_location \});         
\} else \{         
    if(!sizeof(\$events)) \{         
      EmitTo(\$actor, "Sorry, you do not have any events available for this PC.");         
      EmitTo(\$actor, "If you would like to run events, p    lease contact the game staff.");         
      return FALSE;         
    \}         
    /* List all the events that this PC can trigger */         
    EmitTo(\$actor, "Command: @event calendar\|announce\|start EVENTNAME");         
    EmitTo(\$actor, "Valid events:");         
    for(\$i=0;\$i\<sizeof(\$events);\$i++)         
      EmitTo(\$actor, \$events[\$i]);         
\}         
         
return FALSE;         
/*         
if (!\$adverb \&\& !\$dob) \{         
  \$data = "Data:DB:assist:AssistGeneralDB";         
  \$data = Obj(\$data);         
  if (sizeof(explode(\$(raw-evoke), " ")) \< 5) \{         
    EmitTo(\$actor, "**[Your description is under the minimum word length. Please elaborate on the nature of the event]**");         
    return FALSE;         
  \}         
  assist::dofileassist(\$data: \$data, \$char: Str(\$actor), \$queue: "events", \$assisttext: \$(raw-evoke), \$log: "[TAS]");         
  return FALSE;         
\}         
*/
      </Core:Property>
      <Core:Property property="merry:lib:eventlist">
         X[M] /* Gather a list of valid events */      
\$events = (\{ \});       
\$events += (\{ "hunt" \});      
\$events += (\{ "party" \});      
\$events += (\{ "gathering" \});      
\$events += (\{ "spar" \});      
\$events += (\{ "tournament" \});      
      
/* Events limited to consulate members */      
if(\$actor.guild == \$\{Allegory:Guilds:england\} \|\| \$actor.guild == \$\{Allegory:Guilds:france\} \|\| \$actor.guild == \$\{Allegory:Guilds:germany\} \|\| \$actor.guild == \$\{Allegory:Guilds:italy\} \|\| \$actor.guild == \$\{Allegory:Guilds:scotland\} \|\| \$actor.guild == \$\{Allegory:Guilds:spain\}) \{      
  \$events += (\{ "consulate meeting" \});      
  \$events += (\{ "audience hours" \});      
\}      
      
/* Events limited to constabulary members */      
if(\$actor.guild == \$\{Allegory:Guilds:cityguard\}) \{      
  \$events += (\{ "audience hours" \});      
\}      
      
/* Events limited to church members */      
if(\$actor.guild == \$\{Allegory:Guilds:church\}) \{      
  \$events += (\{ "audience hours" \});      
  \$events += (\{ "mass" \});      
\}      
 
/* Events limited to household members */  
if(\$actor.householdtier1) \{      
  \$events += (\{ "royal retainer hours" \});      
\}  
 
  
/* Events limited to types of classes */      
if(\$actor."trait:class1" == "healer" \|\| \$actor."trait:class2" == "healer") \{      
  \$events += (\{ "hospital hours" \});      
\}  
if(\$actor."trait:class1" == "blacksmith" \|\| \$actor."trait:class2" == "blacksmith") \{      
  \$events += (\{ "blacksmith hours" \});      
\}  
if(\$actor."trait:class1" == "bookbinder" \|\| \$actor."trait:class2" == "bookbinder") \{      
  \$events += (\{ "bookbinder hours" \});      
\}  
if(\$actor."trait:class1" == "carpenter" \|\| \$actor."trait:class2" == "carpenter") \{      
  \$events += (\{ "carpenter hours" \});      
\}      
if(\$actor."trait:class1" == "dyer" \|\| \$actor."trait:class2" == "dyer") \{      
  \$events += (\{ "dyer hours" \});      
\}  
if(\$actor."trait:class1" == "body-servant" \|\| \$actor."trait:class2" == "body-servant") \{      
  \$events += (\{ "hairstyling hours" \});      
\}  
if(\$actor."trait:class1" == "jeweler" \|\| \$actor."trait:class2" == "jeweler") \{      
  \$events += (\{ "jeweler hours" \});      
\}  
if(\$actor."trait:class1" == "seamstress" \|\| \$actor."trait:class2" == "seamstress") \{      
  \$events += (\{ "seamstress hours" \});      
\}  
if(\$actor."trait:class1" == "stonemason" \|\| \$actor."trait:class2" == "stonemason") \{      
  \$events += (\{ "stonemason hours" \});      
\}  
if(\$actor."trait:class1" == "weaver" \|\| \$actor."trait:class2" == "weaver") \{      
  \$events += (\{ "weaver hours" \});      
\}  
      
/* Prevent VP guild members from calling guild meetings */      
if(\$actor.guild != \$\{Allegory:Guilds:england\} \&\& \$actor.guild != \$\{Allegory:Guilds:france\} \&\& \$actor.guild != \$\{Allegory:Guilds:germany\} \&\& \$actor.guild != \$\{Allegory:Guilds:italy\} \&\& \$actor.guild != \$\{Allegory:Guilds:scotland\} \&\& \$actor.guild != \$\{Allegory:Guilds:spain\} \&\& \$actor.guild != \$\{Allegory:Guilds:cityguard\} \&\& \$actor.guild != \$\{Allegory:Guilds:church\}) \{      
  \$events += (\{ "guild meeting" \});      
\}      
      
for(\$i=0;\$i\<sizeof(\$events);\$i++) \{      
  /* If someone has announced an event, it's "locked" to them for 40 mins. Or 20 mins after the event starts */      
  if(!\$this.eventlog[\$events[\$i]]) continue;      
  if(\$this.eventlog[\$events[\$i]][0] == \$actor) continue;      
  if(!\$this.eventlog[\$events[\$i]][0] \|\| !\$this.eventlog[\$events[\$i]][0]."base:environment") continue;      
  if(\$this.eventlog[\$events[\$i]][2] == 1 \&\& \$this.eventlog[\$events[\$i]][1]+60*40 \< time()) continue;      
  if(\$this.eventlog[\$events[\$i]][2] == 0 \&\& \$this.eventlog[\$events[\$i]][1]+60*20 \< time()) continue;      
  \$events -= (\{ \$events[\$i] \});      
\}      
      
return \$events;
      </Core:Property>
      <Core:Property property="merry:lib:givepoints">
         X[M] /* Gimli-Powered! Do not edit! Edit gimli:lib:givepoints instead! */      
/* Give PC points for hosting or attending an event */      
if(!\$pc) return FALSE;      
if(!\$points) return FALSE;      
if(!\$eventname) return FALSE;      
if(!\$eventtype) \$eventtype = \$eventname;      
if(!\$host) \$host = \$actor;      
if(!\$group) \$group = \$host."loyalty:group";      
if(!\$group) \$group = \$pc."loyalty:group";      
if(!\$group) \$group = "all";      
\$pc = NRefOb(\$pc);      
          
/* Is this the host? */      
if(\$pc == \$host) \{      
  if(\$hostpoints) \$points = \$hostpoints;      
  if(!\$pc."event:hosted") \$pc."event:hosted" = (\{ \});      
  if(Int(\$pc."event:hosted:lasttracked")+60*60*2 \< time()) \{      
    \$pc."event:hosted:lasttracked" = time();      
    \$pc."event:hosted" += (\{ (\{ \$eventname, \$group, time() \}) \});      
  \}      
\}      
      
if(!\$pc."event:points") \$pc."event:points" = ([ ]);      
if(!\$pc."event:points"[\$group]) \$pc."event:points"[\$group] = ([ ]);      
if(!\$pc."event:points"[\$group][\$eventtype]) \{      
  \$pc."event:points"[\$group][\$eventtype] = (\{ \$points, time(), 0 \});      
\} else \{      
  if(\$points \> \$pc."event:points"[\$group][\$eventtype][0])      
    \$pc."event:points"[\$group][\$eventtype] = (\{ \$points, time(), Int(\$pc."event:points"[\$group][\$eventtype][2]) \});      
\}      
      
/* Are we already doing idleness checking? */      
if(\$pc."tmp:event_idle_checking") return TRUE;      
      
for(\$idle_counter=0; \$idle_counter\<12; \$idle_counter++) \{      
  \$pc."tmp:event_idle_checking" = TRUE;      
  \$delay(60*15, TRUE, "1d4a");      
  /* Are they idle? */      
  /* This isn't a perfect check... but it'll do */      
  if(\$pc."udat:idle" \&\& \$pc."udat:idle" \< 60*10) \{      
    if(sizeof(\$pc."event:points"[\$group][\$eventtype]) \> 2) \{      
        \$pc."event:points"[\$group][\$eventtype][2] = Int(\$pc."event:points"[\$group][\$eventtype][2])+1;      
    \} else \{      
        \$pc."event:points"[\$group][\$eventtype] += (\{ 1 \});      
    \}      
  \}      
\}      
\$pc."tmp:event_idle_checking" = nil;      
      
return TRUE;
      </Core:Property>
      <Core:Property property="new property name">
         "New Property Value"
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1537023756, "jominey", "E", 1561504106, "sendnoodlez", "E", 1561869234, "jominey", "E", 1572707781, "sendnoodlez", "E", 1572709685, "sendnoodlez", "E", 1572709718, "sendnoodlez", "E", 1572709813, "sendnoodlez", "E", 1572709937, "sendnoodlez", "E", 1572709982, "sendnoodlez", "E", 1572710195, "sendnoodlez", "E", 1572710328, "sendnoodlez", "E", 1572710687, "sendnoodlez", "X", 1572710798, "sendnoodlez", "X", 1572710879, "sendnoodlez", "X", 1572711103, "sendnoodlez", "X", 1572712086, "sendnoodlez", "E", 1572712163, "sendnoodlez", "X", 1573708010, "sendnoodlez", "R", 1573708073, "sendnoodlez", "E", 1574176651, "jominey", "E", 1576621607, "jominey", "E", 1576621676, "jominey", "E", 1576683383, "jominey", "E", 1576683869, "jominey", "E", 1576683983, "jominey", "E", 1576684098, "jominey", "E", 1576684118, "jominey", "E", 1579316273, "sendnoodlez", "E", 1579316652, "sendnoodlez", "X", 1583181589, "jominey", "E", 1583181725, "jominey", "E", 1583182015, "jominey", "E", 1585957648, "jominey", "E", 1586009647, "jominey", "E", 1586009985, "jominey", "E", 1586010066, "jominey", "E", 1586010147, "jominey", "E", 1586010177, "jominey", "E", 1586010217, "jominey", "E", 1586010463, "jominey", "E", 1586010559, "jominey", "E", 1586010583, "jominey", "E", 1586010608, "jominey", "E", 1586010732, "jominey", "E", 1586010857, "jominey", "E", 1586011159, "jominey", "E", 1586011182, "jominey", "E", 1586011299, "jominey", "E", 1586011583, "jominey", "E", 1586011626, "jominey", "E", 1586011652, "jominey", "E", 1586011702, "jominey", "E", 1586011730, "jominey", "E", 1586011756, "jominey", "E", 1586011785, "jominey", "E", 1586011823, "jominey", "E", 1586032613, "jominey", "E", 1586032752, "jominey", "E", 1586034525, "jominey", "E", 1586053880, "jominey", "E", 1586053919, "jominey", "E", 1586053937, "jominey", "E", 1592149117, "jominey", "E", 1592149234, "jominey", "E", 1592149567, "jominey", "E", 1592149924, "jominey", "E", 1647651114, "sendnoodlez", "E", 1647651229, "sendnoodlez", "E" \})
      </Core:Property>
      <Core:Property property="x_gimliinstance">
         ([  ])
      </Core:Property>
    </Core:PCProperties>
    <Notes:Notes/>
  </Core:PropertyContainer>
</object>
