<object clone="/obj/properties" owner="jominey">
  <Core:PropertyContainer>
    <Ur:UrObject/>
    <Core:PCProperties>
      <Core:Property property="merry:lib:key:copy_brass">
         X[M] object customer, key, locksmith;

customer = \$par["customer"];
key = \$par["key"];
locksmith = \$par["locksmith"];

return Call(\$\{Allegory:Lib:Crafting:AutomatedKeyCopy\}, "key:prepare_copy", \$customer: customer, \$locksmith: locksmith, \$key: key, \$material: "brass", \$price: 1000);
      </Core:Property>
      <Core:Property property="merry:lib:key:copy_bronze">
         X[M] object customer, key, locksmith;

customer = \$par["customer"];
key = \$par["key"];
locksmith = \$par["locksmith"];

return Call(\$\{Allegory:Lib:Crafting:AutomatedKeyCopy\}, "key:prepare_copy", \$customer: customer, \$locksmith: locksmith, \$key: key, \$material: "bronze", \$price: 200);
      </Core:Property>
      <Core:Property property="merry:lib:key:copy_copper">
         X[M] object customer, key, locksmith;

customer = \$par["customer"];
key = \$par["key"];
locksmith = \$par["locksmith"];

return Call(\$\{Allegory:Lib:Crafting:AutomatedKeyCopy\}, "key:prepare_copy", \$customer: customer, \$locksmith: locksmith, \$key: key, \$material: "copper", \$price: 100);
      </Core:Property>
      <Core:Property property="merry:lib:key:copy_expire">
         X[M] object customer, key, locksmith;

customer = \$par["customer"];
key = \$par["key"];
locksmith = \$par["locksmith"];

EmitTo(customer, Describe(locksmith) + " tends to the next customer while you make up your mind.");
EmitIn(customer."base:environment", Describe(locksmith) + " tends to the next customer while " + Describe(customer) + " makes up " + Str(customer."base:possessive") + " mind.", customer);

locksmith.busy = nil;

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:key:copy_iron">
         X[M] object customer, key, locksmith;

customer = \$par["customer"];
key = \$par["key"];
locksmith = \$par["locksmith"];

return Call(\$\{Allegory:Lib:Crafting:AutomatedKeyCopy\}, "key:prepare_copy", \$customer: customer, \$locksmith: locksmith, \$key: key, \$material: "iron", \$price: 500);
      </Core:Property>
      <Core:Property property="merry:lib:key:copy_one">
         X[M] object customer, key, locksmith;
int price;
string material, color;

customer = \$par["customer"];
key = \$par["key"];
locksmith = \$par["locksmith"];
price = \$par["price"];
material = \$par["material"];
color = \$par["color"];

return Call(\$\{Allegory:Lib:Crafting:AutomatedKeyCopy\}, "key:verify_copy", \$customer: customer, \$locksmith: locksmith, \$key: key, \$color: color, \$material: material, \$price: price, \$number: 1);
      </Core:Property>
      <Core:Property property="merry:lib:key:copy_pay">
         X[M] object customer, key, locksmith, newkey;
string material, color;
int totalprice, i, number;

customer = \$par["customer"];
key = \$par["key"];
locksmith = \$par["locksmith"];
totalprice = Int(\$par["totalprice"]);
material = \$par["material"];
color = \$par["color"];
number = Int(\$par["number"]);

/* Money check goes here */
if(Int(customer."trait:money") \>= totalprice) \{
  \$original_price = totalprice;
  \$haggle_roll = ironclaw::roll(\$roller: customer, \$skills: (\{"haggle"\}), \$bonus: 0);
  if(totalprice \> 0) \{
      totalprice = totalprice * (100-\$haggle_roll)/100;
      if(totalprice \< 1) totalprice = 1;
  \}

  if(totalprice \< \$original_price) \{
    EmitTo(customer, "You manage to haggle "+Describe(locksmith)+" down from "+ironclaw::describe_money(\$amount: \$original_price)+" to "+ironclaw::describe_money(\$amount: totalprice)+".");
  \} else \{
    EmitTo(customer, "You pay "+Describe(locksmith)+" "+ironclaw::describe_money(\$amount: totalprice)+".");
  \}
    customer."trait:money" = Int(customer."trait:money") - totalprice;
    \$keys = (\{ \});
    for(i = 0; i \< number; i++) \{
        newkey = Call(\$\{Allegory:Lib:Crafting:AutomatedKeyCopy\}, "key:do_copy", \$key: key, \$material: material, \$color: color);
        newkey."base:environment" = customer;
        \$keys += (\{ newkey \});
    \}

    EmitTo(customer, Describe(locksmith) + " hands you " + Describe(\$keys, nil, nil, STYLE_NONPOSS) + ".");
    EmitIn(customer."base:environment", Describe(locksmith) + " hands " + Describe(customer) + " " + Describe(\$keys, nil, nil, STYLE_NONPOSS) + ".", customer);
\} else \{
    EmitTo(\$buyer, "That costs "+ironclaw::describe_money(\$amount: totalprice)+", and you only have "+ironclaw::describe_money(\$amount: customer."trait:money")+".");
    return FALSE;  
\}

locksmith.busy = nil;

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:key:copy_three">
         X[M] object customer, key, locksmith;
int price;
string material, color;

customer = \$par["customer"];
key = \$par["key"];
locksmith = \$par["locksmith"];
price = \$par["price"];
material = \$par["material"];
color = \$par["color"];

return Call(\$\{Allegory:Lib:Crafting:AutomatedKeyCopy\}, "key:verify_copy", \$customer: customer, \$locksmith: locksmith, \$key: key, \$color: color, \$material: material, \$price: price, \$number: 3);
      </Core:Property>
      <Core:Property property="merry:lib:key:copy_two">
         X[M] object customer, key, locksmith;
int price;
string material, color;

customer = \$par["customer"];
key = \$par["key"];
locksmith = \$par["locksmith"];
price = \$par["price"];
material = \$par["material"];
color = \$par["color"];

return Call(\$\{Allegory:Lib:Crafting:AutomatedKeyCopy\}, "key:verify_copy", \$customer: customer, \$locksmith: locksmith, \$key: key, \$color: color, \$material: material, \$price: price, \$number: 2);
      </Core:Property>
      <Core:Property property="merry:lib:key:do_copy">
         X[M] /*
** \$key - key to be copied
** \$color - color of key
** \$material - material to be used
*/

object masterkey, newkey;

masterkey = Get(\$key, "base:urparent");
newkey = Duplicate(\$key);

newkey."trait:size" = \$key."trait:size";
if(newkey."trait:size") Set(newkey, "details:default:adjectives:" + newkey."trait:size", TRUE);

newkey."trait:color" = \$color;
if(newkey."trait:color") Set(newkey, "details:default:adjectives:" + newkey."trait:color", TRUE);

newkey."trait:material" = \$material;
if(newkey."trait:material") Set(newkey, "details:default:adjectives:" + newkey."trait:material", TRUE);

newkey."trait:type" = \$key."trait:type";
if(newkey."trait:type") Set(newkey, "details:default:adjectives:" + newkey."trait:type", TRUE);

newkey."base:keycode" = \$key."base:keycode";

return newkey;
      </Core:Property>
      <Core:Property property="merry:lib:key:prepare_copy">
         X[M] /*
** \$customer - person to give the key to
** \$locksmith
** \$key - key to be copied
** \$color - color of key
** \$material - material to be used
** \$price
*/

string question;
\$delay(0.01, FALSE, "7e9f");
question = "How many copies do you want?";
interaction::question(\$actor: \$customer, \$question: question, \$a: "1 copy", \$b: "2 copies", \$c: "3 copies", \$d: "I need more time to think.", \$expire_ob: \$\{Allegory:Lib:Crafting:AutomatedKeyCopy\}, \$a_ob: \$\{Allegory:Lib:Crafting:AutomatedKeyCopy\}, \$b_ob: \$\{Allegory:Lib:Crafting:AutomatedKeyCopy\}, \$c_ob: \$\{Allegory:Lib:Crafting:AutomatedKeyCopy\}, \$d_ob: \$\{Allegory:Lib:Crafting:AutomatedKeyCopy\}, \$e_ob: \$\{Allegory:Lib:Crafting:AutomatedKeyCopy\}, \$a_fun: "key:copy_one", \$b_fun: "key:copy_two", \$c_fun: "key:copy_three", \$d_fun: "key:copy_expire", \$e_fun: "key:copy_expire", \$expire_fun: "key:copy_expire", \$expires: 60, \$par: (["customer":\$customer, "locksmith":\$locksmith, "key":\$key, "color":\$color, "material":\$material, "price":\$price]));

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:key:verify_copy">
         X[M] /*
** \$customer - person to give the key to
** \$key - key to be copied
** \$color - color of key
** \$material - material to be used
** \$price
** \$number
*/

string question;
int totalprice;
\$delay(0.02, FALSE, "0858");
totalprice = Int(\$price) * Int(\$number);

if(totalprice == 0) \{
    EmitTo(\$actor, "ERROR: There was a problem processing your request. Please notify staff.");
    \$locksmith.busy = nil;
\}

question = "Your total comes to " + Str(totalprice/100) + " florins for " + Str(\$number) + " " + Str(\$material) + " " + " keys. Do you still want to place this order?";
interaction::question(\$actor: \$customer, \$question: question, \$a: "Yes", \$b: "I changed my mind", \$expire_ob: \$\{Allegory:Lib:Crafting:AutomatedKeyCopy\}, \$a_ob: \$\{Allegory:Lib:Crafting:AutomatedKeyCopy\}, \$b_ob: \$\{Allegory:Lib:Crafting:AutomatedKeyCopy\}, \$a_fun: "key:copy_pay", \$b_fun: "key:copy_expire", \$expire_fun: "key:copy_expire", \$expires: 60, \$par: (["customer":\$customer, "locksmith":\$locksmith, "key":\$key, "color":\$color, "material":\$material, "totalprice":totalprice, "number":\$number]));

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:offer-who%copy_key">
         X[M] object key, locksmith, customer;
string question;

locksmith = \$this;
customer = \$actor;

if(\$this.busy) \{
    EmitTo(\$actor, Describe(\$this) + " is busy with a customer.");
    return FALSE;
\}

if(!\$what) \{
    return FALSE;
\}

if(!sizeof(\$what)) \{
    return FALSE;
\}

if(sizeof(\$what) \> 1) \{
    EmitTo(\$actor, "One item at a time, please.");
    return FALSE;
\}

key = NRefOb(\$what[0]);

if(key."trait:objecttype" != "key") \{
    EmitTo(\$actor, "The locksmith will only accept keys.");
    return FALSE;
\}

locksmith.busy = 1;

Social(locksmith, "inspect", "closely", "Sure, I can copy that for you.", nil, key );
question = "From what material would you like your key to be made?";
interaction::question(\$actor: \$actor, \$question: question, \$a: "Copper (1 florin)", \$b: "Bronze (2 florins)", \$c: "Iron (5 florins)", \$d: "Brass (10 florins)", \$e: "I need more time to think.", \$expire_ob: \$\{Allegory:Lib:Crafting:AutomatedKeyCopy\}, \$a_ob: \$\{Allegory:Lib:Crafting:AutomatedKeyCopy\}, \$b_ob: \$\{Allegory:Lib:Crafting:AutomatedKeyCopy\}, \$c_ob: \$\{Allegory:Lib:Crafting:AutomatedKeyCopy\}, \$d_ob: \$\{Allegory:Lib:Crafting:AutomatedKeyCopy\}, \$e_ob: \$\{Allegory:Lib:Crafting:AutomatedKeyCopy\}, \$a_fun: "key:copy_copper", \$b_fun: "key:copy_bronze", \$c_fun: "key:copy_iron", \$d_fun: "key:copy_brass", \$e_fun: "key:copy_expire", \$expire_fun: "key:copy_expire", \$expires: 60, \$par: (["customer":customer, "locksmith":locksmith, "key":key]));

return FALSE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1144052088, "-", "SYNC", 1172365159, "tonyd", "E", 1304981132, "jominey", "E", 1304981467, "jominey", "E", 1304982433, "jominey", "E", 1304982966, "jominey", "E", 1304982976, "jominey", "E", 1304982981, "jominey", "E", 1304982988, "jominey", "E", 1304982995, "jominey", "E", 1304983005, "jominey", "E", 1304983219, "jominey", "E", 1304983287, "jominey", "E", 1304983498, "jominey", "E", 1304983623, "jominey", "E", 1304983655, "jominey", "E", 1304983664, "jominey", "E", 1304983673, "jominey", "E", 1304983686, "jominey", "E", 1304983748, "jominey", "E", 1304983776, "jominey", "E", 1304983788, "jominey", "E", 1304983865, "jominey", "E", 1304984004, "jominey", "E", 1304984150, "jominey", "E", 1304984196, "jominey", "E", 1304984260, "jominey", "E", 1304984392, "jominey", "E", 1304984411, "jominey", "E", 1304984432, "jominey", "E", 1304984452, "jominey", "E", 1304984471, "jominey", "E", 1304984492, "jominey", "E", 1304984574, "jominey", "E", 1304984647, "jominey", "E", 1304984881, "jominey", "E", 1304984955, "jominey", "E", 1304985471, "jominey", "E", 1304985602, "jominey", "E", 1304985665, "jominey", "E", 1304985944, "jominey", "E", 1304986141, "jominey", "E", 1304986244, "jominey", "E", 1304986253, "jominey", "E", 1304986261, "jominey", "E", 1304986379, "jominey", "E", 1304986468, "jominey", "E", 1304986491, "jominey", "E", 1304986530, "jominey", "E", 1304986574, "jominey", "E", 1304986652, "jominey", "E", 1304986672, "jominey", "E", 1304986753, "jominey", "E", 1304986767, "jominey", "E", 1304986775, "jominey", "E", 1304986884, "jominey", "E", 1304986901, "jominey", "E", 1304986912, "jominey", "E", 1304987050, "jominey", "E", 1304987060, "jominey", "E", 1304987304, "jominey", "E", 1304987339, "jominey", "E", 1304987497, "jominey", "E", 1304989858, "jominey", "E", 1304990053, "jominey", "E", 1304991557, "jominey", "E", 1304991721, "jominey", "E", 1304991775, "jominey", "E", 1304991779, "jominey", "E", 1304992767, "jominey", "E", 1304992810, "jominey", "E", 1304993067, "jominey", "E", 1304993128, "jominey", "E", 1304993173, "jominey", "E", 1304993624, "jominey", "E", 1304998522, "jominey", "E", 1304998544, "jominey", "E", 1304998883, "jominey", "E", 1304998975, "jominey", "E", 1520560231, "jominey", "E", 1520560917, "jominey", "E", 1520561011, "jominey", "E", 1520561064, "jominey", "E", 1520561229, "jominey", "E", 1570295038, "jominey", "R", 1580571744, "sendnoodlez", "E" \})
      </Core:Property>
    </Core:PCProperties>
    <Notes:Notes/>
  </Core:PropertyContainer>
</object>
