<object clone="/obj/properties" owner="sendnoodlez">
  <Core:PropertyContainer>
    <Ur:UrObject/>
    <Core:PCProperties>
      <Core:Property property="db">
         ([ "feldspar":([ "object":\<Allegory:Props:Materials:Mining:Stone:Feldspar\>, "sellprice":200 ]), "granite":([ "object":\<Allegory:Props:Materials:Mining:Stone:GraniteMedium\>, "sellprice":500 ]), "limestone":([ "object":\<Allegory:Props:Materials:Mining:Stone:Limestone\>, "sellprice":200 ]), "pumice":([ "object":\<Allegory:Props:Materials:Mining:Stone:Pumice\>, "sellprice":200 ]), "rare granite":([ "object":\<Allegory:Props:Materials:Mining:Stone:GraniteRare\>, "sellprice":1000 ]) ])
      </Core:Property>
      <Core:Property property="merry:lib:do_nothing">
         X[M] \$npc = \$par["npc"];  
\$actor = \$par["actor"];  
\$stone = \$par["stone"];  
  
Act(\$npc, "refuse", \$what: \$materials, \$who: \$actor);  
Social(\$npc, "smile", "amiably", "You know where I'll be if you want to sell!", "at", \$actor);  
  
\$npc.busy = nil;  
  
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:sell_stone">
         X[M] \$npc = \$par["npc"];  
\$actor = \$par["actor"];  
\$stone = \$par["stone"];  
\$sellprice = \$par["sellprice"];  
\$returnables = \$par["returnables"];  
  
Act(\$npc, "accept", \$what: \$stone, \$who: \$actor);  
  
/* Do a haggling roll, to see how much more the PC gets */  
\$original_price = \$sellprice;  
  
\$sellprice = allegory::do_haggle(\$price: \$sellprice, \$act: "selling");  
  
if(\$sellprice \> \$original_price) \{  
    EmitTo(\$actor, TAG("You manage to haggle " + Describe(\$npc) + " from " + Str(allegory::get_cost(\$cost: Flt(\$original_price)/100.0)) + " to " + Str(allegory::get_cost(\$cost: Flt(\$sellprice)/100.0)) + ".", "imp"));  
\} else \{  
    EmitTo(\$actor, TAG(capitalize(Describe(\$npc)) + " pays you " + allegory::get_cost(\$cost: Flt(\$sellprice)/100.0) + ".", "imp"));  
\}  
  
EmitIn(\$actor."base:environment", TAG(capitalize(Describe(\$npc)) + " hands " + Describe(\$actor) + " some coins.", "social:third"), \$actor);  
  
\$actor."trait:money" = Int(\$actor."trait:money") + Int(\$sellprice);  
  
/* Call(\$\{Allegory:Lib:Tradesmen:StoneBuyer\}, "regenerate_stock", \$stone: \$stone); */  
  
for(\$i = 0; \$i \< sizeof(\$stone); \$i++) \{  
  
    if(sizeof(\$returnables)) \{  
        if(member(\$stone[\$i], \$returnables)) \{  
            \$inv = \$stone[\$i]."base:inventory";  
  
            for(\$k = 0; sizeof(\$inv) \&\& \$k \< sizeof(\$inv); \$k++) \{  
                Slay(\$inv[\$k]);  
            \}  
  
            \$stone[\$i]."base:environment" = \$actor;  
        \} else \{  
            Slay(NRefOb(\$stone[\$i]));  
        \}  
    \} else \{  
        Slay(NRefOb(\$stone[\$i]));  
    \}  
\}  
\$delay(0.01, FALSE, "2a41");  
if(sizeof(\$returnables)) \{  
    EmitTo(\$actor, TAG(capitalize(Describe(\$npc)) + " returns " + Describe(\$returnables, nil, nil, STYLE_NONPOSS) + " to you.", "social:first"));  
    EmitIn(\$npc."base:environment", TAG(capitalize(Describe(\$npc)) + " returns " + Describe(\$returnables, nil, nil, STYLE_NONPOSS) + " to " + Describe(\$actor) + ".", "social:third"), \$actor);  
\}  
  
\$npc.busy = nil;  
  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:offer-who%stone">
         X[M] if(!\$what) \{  
    EmitTo(\$actor, "What did you want to offer to " + Describe(\$this) + "?");  
    return FALSE;  
\}  
  
if(!sizeof(\$what)) \{   
    EmitTo(\$actor, "What did you want to offer to " + Describe(\$this) + "?");  
    return FALSE;  
\}  
  
if(\$this.busy) \{  
    Act(this, "refuse", \$what: \$what, \$who: \$actor);  
    Social(\$this, "smile", "distractedly", "Hi! It's good to see you! I'll be with you shortly.", "at", \$actor);  
    return FALSE;  
\}  
  
\$buyableMap = Get(\$\{Allegory:Lib:Tradesmen:StoneBuyer\}, "db");  
  
\$buyableList = map_indices(\$buyableMap);  
  
\$buyables = (\{ \});  
\$notbuyable = (\{ \});  
\$returnables = (\{ \});  
\$totalSellprice = 0.0;  
  
for(\$i = 0; \$i \< sizeof(\$what); \$i++) \{  
    \$matched = nil;  
    \$container = nil;  
    for(\$j = 0; !\$matched \&\& \$j \< sizeof(\$buyableList); \$j++) \{  
        \$ob = \$buyableMap[\$buyableList[\$j]]["object"];  
  
        if(NRefOb(\$what[\$i])."base:urparent" == \$ob) \{  
            if(\$buyableMap[\$buyableList[\$j]]["sellprice"]) \{  
                \$sellprice = \$buyableMap[\$buyableList[\$j]]["sellprice"];  
            \} else \{  
                \$sellprice = Int(NRefOb(\$what[\$i])."trait:sellprice");  
            \}  
  
            if(\$sellprice == 0) \$sellprice = 100;  
  
            if(\$buyableMap[\$buyableList[\$j]]["contents"]) \{  
                \$requiredContents = \$buyableMap[\$buyableList[\$j]]["contents"][0];  
                \$requiredQuantity = \$buyableMap[\$buyableList[\$j]]["contents"][1];  
   
                \$qty = 0;  
                \$inv = NRefOb(\$what[\$i])."base:inventory";  
  
                for(\$k = 0; sizeof(\$inv) \&\& \$k \< sizeof(\$inv); \$k++) \{  
                    if(\$inv[\$k]."base:urparent" == \$requiredContents) \$qty++;  
                \}  
  
                if(\$qty == \$requiredQuantity) \{  
                    \$matched = 1;  
                    \$returnables += (\{ \$what[\$i] \});  
                    \$container = 1;  
                \}  
            \} else \{  
                \$matched = 1;  
            \}  
        \}  
    \}  
  
    if(\$matched) \{  
        if(FindMerry(NRefOb(\$what[\$i]), "lib", "is_full")) \{  
            if(!Call(NRefOb(\$what[\$i]), "is_full")) \{  
                Act(this, "refuse", \$what: \$what, \$who: \$actor);  
                Social(\$this, "smile", "apologetically", "I'm sorry! " + capitalize(Describe(\$what[\$i], nil, nil, STYLE_NONPOSS)) + " is partially filled and we only accept full containers. Come back when you have more.", "at", \$actor);  
                return FALSE;  
            \}  
        \}  
  
        \$buyables += (\{ \$what[\$i] \});  
  
        if(!\$container \&\& NRefOb(\$what[\$i])."trait:quality") \$sellprice = Flt(\$sellprice) * allegory::get_quality_modifier(\$quality: Int(NRefOb(\$what[\$i])."trait:quality"));  
  
        \$totalSellprice += Flt(\$sellprice);  
    \} else \{  
        \$notbuyable += (\{ \$what[\$i] \});  
    \}  
\}  
  
if(sizeof(\$notbuyable)) \{  
    Act(this, "refuse", \$what: \$notbuyable, \$who: \$actor);  
\}  
  
if(!sizeof(\$buyables)) \{  
    Social(\$this, "apologize", "sheepishly", "Sorry! I only buy " + common::string_list(\$list: \$buyableList) + ".", "to", \$actor);  
    return FALSE;  
\}  
  
\$par = ([ ]);  
\$par["actor"] = \$actor;  
\$par["npc"] = \$this;  
\$par["stone"] = \$buyables;  
\$par["returnables"] = \$returnables;  
  
\$a = "Sell it (" + Str(allegory::get_cost(\$cost: Flt(\$totalSellprice)/100.0))+ ")";  
\$a_ob = \$\{Allegory:Lib:Tradesmen:StoneBuyer\};  
\$a_fun = "sell_stone";  
\$par["sellprice"] = \$totalSellprice;  
  
\$b = "I need more time to think about it.";  
\$b_ob = \$\{Allegory:Lib:Tradesmen:StoneBuyer\};  
\$b_fun = "do_nothing";  
  
Social(\$this, "hum", "thoughtfully", "I will buy " + Describe(\$buyables, nil, nil, STYLE_NONPOSS) + " from you for " + Str(allegory::get_cost(\$cost: Flt(\$totalSellprice)/100.0)) +".", "at", \$actor);  
  
interaction::question(\$question: "", \$expires: 30, \$expire_ob: \$\{Allegory:Lib:Tradesmen:StoneBuyer\}, \$expire_fun: "do_nothing", \$par: \$par);  
return FALSE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1589156532, "jominey", "E", 1589156629, "jominey", "E", 1589156948, "jominey", "E", 1589157038, "jominey", "E", 1589157072, "jominey", "E", 1589157147, "jominey", "E", 1589157933, "jominey", "E", 1591539055, "sendnoodlez", "X", 1591539279, "sendnoodlez", "E", 1591539517, "sendnoodlez", "E", 1591539775, "sendnoodlez", "E", 1591540990, "sendnoodlez", "E", 1591541198, "sendnoodlez", "E", 1591542218, "sendnoodlez", "E", 1591542412, "sendnoodlez", "E", 1624571318, "sendnoodlez", "X", 1624571345, "sendnoodlez", "E", 1624571441, "sendnoodlez", "E", 1624571475, "sendnoodlez", "E", 1624571535, "sendnoodlez", "E", 1624571790, "sendnoodlez", "E", 1624571809, "sendnoodlez", "E", 1624571959, "sendnoodlez", "E" \})
      </Core:Property>
    </Core:PCProperties>
    <Notes:Notes/>
  </Core:PropertyContainer>
</object>
