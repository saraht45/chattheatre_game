<object clone="/obj/properties" owner="sendnoodlez">
  <Core:PropertyContainer>
    <Ur:UrObject/>
    <Core:PCProperties>
      <Core:Property property="db">
         ([ "abalone":([ "object":\<Allegory:Props:Animals:Fish:Saltwater:Abalone\>, "sellprice":100 ]), "banded rudderfish":([ "object":\<Allegory:Props:Animals:Fish:Saltwater:BandedRudderfish\>, "sellprice":100 ]), "bitterling":([ "object":\<Allegory:Props:Animals:Fish:Freshwater:Bitterling\>, "sellprice":100 ]), "black drum":([ "object":\<Allegory:Props:Animals:Fish:Saltwater:BlackDrum\>, "sellprice":150 ]), "black grouper":([ "object":\<Allegory:Props:Animals:Fish:Saltwater:BlackGrouper\>, "sellprice":150 ]), "blue marlin":([ "object":\<Allegory:Props:Animals:Fish:Saltwater:BlueMarlin\>, "sellprice":300 ]), "blue runner":([ "object":\<Allegory:Props:Animals:Fish:Saltwater:BlueRunner\>, "sellprice":100 ]), "bluefish":([ "object":\<Allegory:Props:Animals:Fish:Saltwater:Bluefish\>, "sellprice":150 ]), "bluegill":([ "object":\<Allegory:Props:Animals:Fish:Freshwater:Bluegill\>, "sellprice":100 ]), "bonefish":([ "object":\<Allegory:Props:Animals:Fish:Saltwater:Bonefish\>, "sellprice":100 ]), "boots":([ "object":\<Allegory:Props:Animals:Fish:OddCatches:Boots\>, "sellprice":10 ]), "bream":([ "object":\<Allegory:Props:Animals:Fish:Freshwater:Bream\>, "sellprice":100 ]), "broken shell":([ "object":\<Allegory:Props:Animals:Fish:OddCatches:BrokenShell\>, "sellprice":10 ]), "brown trout":([ "object":\<Allegory:Props:Animals:Fish:Freshwater:BrownTrout\>, "sellprice":150 ]), "catfish":([ "object":\<Allegory:Props:Animals:Fish:Freshwater:Catfish\>, "sellprice":150 ]), "cobia":([ "object":\<Allegory:Props:Animals:Fish:Saltwater:Cobia\>, "sellprice":300 ]), "croaker":([ "object":\<Allegory:Props:Animals:Fish:Saltwater:Croaker\>, "sellprice":200 ]), "crucian carp":([ "object":\<Allegory:Props:Animals:Fish:Freshwater:CrucianCarp\>, "sellprice":100 ]), "dace":([ "object":\<Allegory:Props:Animals:Fish:Freshwater:Dace\>, "sellprice":100 ]), "driftwood":([ "object":\<Allegory:Props:Animals:Fish:OddCatches:Driftwood\>, "sellprice":50 ]), "empty container":([ "object":\<Allegory:Props:Animals:Fish:OddCatches:EmptyContainer\>, "sellprice":10 ]), "fishing line":([ "object":\<Allegory:Props:Animals:Fish:OddCatches:FishingLine\>, "sellprice":10 ]), "freshwater yabby":([ "object":\<Allegory:Props:Animals:Fish:Freshwater:FreshwaterYabby\>, "sellprice":100 ]), "gag":([ "object":\<Allegory:Props:Animals:Fish:Saltwater:Gag\>, "sellprice":100 ]), "goldfish":([ "object":\<Allegory:Props:Animals:Fish:Freshwater:Goldfish\>, "sellprice":100 ]), "jackfish":([ "object":\<Allegory:Props:Animals:Fish:Freshwater:Jackfish\>, "sellprice":100 ]), "jewfish":([ "object":\<Allegory:Props:Animals:Fish:Saltwater:Jewfish\>, "sellprice":250 ]), "largemouth bass":([ "object":\<Allegory:Props:Animals:Fish:Freshwater:LargemouthBass\>, "sellprice":100 ]), "leaves":([ "object":\<Allegory:Props:Animals:Fish:OddCatches:Leaves\>, "sellprice":10 ]), "lefteye flounder":([ "object":\<Allegory:Props:Animals:Fish:Saltwater:LefteyeFlounder\>, "sellprice":250 ]), "minnow":([ "object":\<Allegory:Props:Animals:Fish:Freshwater:Minnow\>, "sellprice":150 ]), "potamon crab":([ "object":\<Allegory:Props:Animals:Fish:Freshwater:PotamonCrab\>, "sellprice":100 ]), "ray-finned barbel":([ "object":\<Allegory:Props:Animals:Fish:Freshwater:RayFinnedBarbel\>, "sellprice":100 ]), "red drum":([ "object":\<Allegory:Props:Animals:Fish:Saltwater:RedDrum\>, "sellprice":200 ]), "red grouper":([ "object":\<Allegory:Props:Animals:Fish:Saltwater:RedGrouper\>, "sellprice":250 ]), "redfin perch":([ "object":\<Allegory:Props:Animals:Fish:Freshwater:RedfinPerch\>, "sellprice":100 ]), "rusty bucket":([ "object":\<Allegory:Props:Animals:Fish:OddCatches:RustyBucket\>, "sellprice":15 ]), "sand seatrout":([ "object":\<Allegory:Props:Animals:Fish:Saltwater:SandSeatrout\>, "sellprice":200 ]), "scamp":([ "object":\<Allegory:Props:Animals:Fish:Saltwater:Scamp\>, "sellprice":100 ]), "seaweed":([ "object":\<Allegory:Props:Animals:Fish:OddCatches:Seaweed\>, "sellprice":10 ]), "shad":([ "object":\<Allegory:Props:Animals:Fish:Saltwater:Shad\>, "sellprice":100 ]), "silver chub":([ "object":\<Allegory:Props:Animals:Fish:Freshwater:SilverChub\>, "sellprice":100 ]), "silver perch":([ "object":\<Allegory:Props:Animals:Fish:Saltwater:SilverPerch\>, "sellprice":150 ]), "silver salmon":([ "object":\<Allegory:Props:Animals:Fish:Freshwater:SilverSalmon\>, "sellprice":100 ]), "silver seatrout":([ "object":\<Allegory:Props:Animals:Fish:Saltwater:SilverSeatrout\>, "sellprice":300 ]), "soggy scroll":([ "object":\<Allegory:Props:Animals:Fish:OddCatches:SoggyScroll\>, "sellprice":10 ]), "spearfish":([ "object":\<Allegory:Props:Animals:Fish:Saltwater:Spearfish\>, "sellprice":250 ]), "spotted seatrout":([ "object":\<Allegory:Props:Animals:Fish:Saltwater:SpottedSeatrout\>, "sellprice":100 ]), "spring goby":([ "object":\<Allegory:Props:Animals:Fish:Freshwater:SpringGoby\>, "sellprice":100 ]), "weakfish":([ "object":\<Allegory:Props:Animals:Fish:Saltwater:Weakfish\>, "sellprice":100 ]), "white bleak":([ "object":\<Allegory:Props:Animals:Fish:Freshwater:WhiteBleak\>, "sellprice":100 ]), "white grunt":([ "object":\<Allegory:Props:Animals:Fish:Saltwater:WhiteGrunt\>, "sellprice":100 ]), "yellow eel":([ "object":\<Allegory:Props:Animals:Fish:Freshwater:YellowEel\>, "sellprice":100 ]), "yellowfin grouper":([ "object":\<Allegory:Props:Animals:Fish:Saltwater:YellowfinGrouper\>, "sellprice":200 ]), "yellowmouth grouper":([ "object":\<Allegory:Props:Animals:Fish:Saltwater:YellowmouthGrouper\>, "sellprice":100 ]) ])
      </Core:Property>
      <Core:Property property="merry:lib:do_nothing">
         X[M] \$npc = \$par["npc"]; 
\$actor = \$par["actor"]; 
\$fish = \$par["fish"]; 
 
Act(\$npc, "refuse", \$what: \$materials, \$who: \$actor); 
Social(\$npc, "smile", "amiably", "You know where I'll be if you want to sell!", "at", \$actor); 
 
\$npc.busy = nil; 
 
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:sell_fish">
         X[M] \$npc = \$par["npc"]; 
\$actor = \$par["actor"]; 
\$fish = \$par["fish"]; 
\$sellprice = \$par["sellprice"]; 
\$returnables = \$par["returnables"]; 
 
Act(\$npc, "accept", \$what: \$fish, \$who: \$actor); 
 
/* Do a haggling roll, to see how much more the PC gets */ 
\$original_price = \$sellprice; 
 
\$sellprice = allegory::do_haggle(\$price: \$sellprice, \$act: "selling"); 
 
if(\$sellprice \> \$original_price) \{ 
    EmitTo(\$actor, TAG("You manage to haggle " + Describe(\$npc) + " from " + Str(allegory::get_cost(\$cost: Flt(\$original_price)/100.0)) + " to " + Str(allegory::get_cost(\$cost: Flt(\$sellprice)/100.0)) + ".", "imp")); 
\} else \{ 
    EmitTo(\$actor, TAG(capitalize(Describe(\$npc)) + " pays you " + allegory::get_cost(\$cost: Flt(\$sellprice)/100.0) + ".", "imp")); 
\} 
 
EmitIn(\$actor."base:environment", TAG(capitalize(Describe(\$npc)) + " hands " + Describe(\$actor) + " some coins.", "social:third"), \$actor); 
 
\$actor."trait:money" = Int(\$actor."trait:money") + Int(\$sellprice); 
 
/* Call(\$\{Allegory:Lib:Tradesmen:FishBuyer\}, "regenerate_stock", \$fish: \$fish); */ 
 
for(\$i = 0; \$i \< sizeof(\$fish); \$i++) \{ 
 
    if(sizeof(\$returnables)) \{ 
        if(member(\$fish[\$i], \$returnables)) \{ 
            \$inv = \$fish[\$i]."base:inventory"; 
 
            for(\$k = 0; sizeof(\$inv) \&\& \$k \< sizeof(\$inv); \$k++) \{ 
                Slay(\$inv[\$k]); 
            \} 
 
            \$fish[\$i]."base:environment" = \$actor; 
        \} else \{ 
            Slay(NRefOb(\$fish[\$i])); 
        \} 
    \} else \{ 
        Slay(NRefOb(\$fish[\$i])); 
    \} 
\} 
\$delay(0.01, FALSE, "2a41"); 
if(sizeof(\$returnables)) \{ 
    EmitTo(\$actor, TAG(capitalize(Describe(\$npc)) + " returns " + Describe(\$returnables, nil, nil, STYLE_NONPOSS) + " to you.", "social:first")); 
    EmitIn(\$npc."base:environment", TAG(capitalize(Describe(\$npc)) + " returns " + Describe(\$returnables, nil, nil, STYLE_NONPOSS) + " to " + Describe(\$actor) + ".", "social:third"), \$actor); 
\} 
 
\$npc.busy = nil; 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:offer-who%fish">
         X[M] if(!\$what) \{ 
    EmitTo(\$actor, "What did you want to offer to " + Describe(\$this) + "?"); 
    return FALSE; 
\} 
 
if(!sizeof(\$what)) \{  
    EmitTo(\$actor, "What did you want to offer to " + Describe(\$this) + "?"); 
    return FALSE; 
\} 
 
if(\$this.busy) \{ 
    Act(this, "refuse", \$what: \$what, \$who: \$actor); 
    Social(\$this, "smile", "distractedly", "Hi! It's good to see you! I'll be with you shortly.", "at", \$actor); 
    return FALSE; 
\} 
 
\$buyableMap = Get(\$\{Allegory:Lib:Tradesmen:FishBuyer\}, "db"); 
 
\$buyableList = map_indices(\$buyableMap); 
 
\$buyables = (\{ \}); 
\$notbuyable = (\{ \}); 
\$returnables = (\{ \}); 
\$totalSellprice = 0.0; 
 
for(\$i = 0; \$i \< sizeof(\$what); \$i++) \{ 
    \$matched = nil; 
    \$container = nil; 
    for(\$j = 0; !\$matched \&\& \$j \< sizeof(\$buyableList); \$j++) \{ 
        \$ob = \$buyableMap[\$buyableList[\$j]]["object"]; 
 
        if(NRefOb(\$what[\$i])."base:urparent" == \$ob) \{ 
            if(\$buyableMap[\$buyableList[\$j]]["sellprice"]) \{ 
                \$sellprice = \$buyableMap[\$buyableList[\$j]]["sellprice"]; 
            \} else \{ 
                \$sellprice = Int(NRefOb(\$what[\$i])."trait:sellprice"); 
            \} 
 
            if(\$sellprice == 0) \$sellprice = 100; 
 
            if(\$buyableMap[\$buyableList[\$j]]["contents"]) \{ 
                \$requiredContents = \$buyableMap[\$buyableList[\$j]]["contents"][0]; 
                \$requiredQuantity = \$buyableMap[\$buyableList[\$j]]["contents"][1]; 
  
                \$qty = 0; 
                \$inv = NRefOb(\$what[\$i])."base:inventory"; 
 
                for(\$k = 0; sizeof(\$inv) \&\& \$k \< sizeof(\$inv); \$k++) \{ 
                    if(\$inv[\$k]."base:urparent" == \$requiredContents) \$qty++; 
                \} 
 
                if(\$qty == \$requiredQuantity) \{ 
                    \$matched = 1; 
                    \$returnables += (\{ \$what[\$i] \}); 
                    \$container = 1; 
                \} 
            \} else \{ 
                \$matched = 1; 
            \} 
        \} 
    \} 
 
    if(\$matched) \{ 
        if(FindMerry(NRefOb(\$what[\$i]), "lib", "is_full")) \{ 
            if(!Call(NRefOb(\$what[\$i]), "is_full")) \{ 
                Act(this, "refuse", \$what: \$what, \$who: \$actor); 
                Social(\$this, "smile", "apologetically", "I'm sorry! " + capitalize(Describe(\$what[\$i], nil, nil, STYLE_NONPOSS)) + " is partially filled and we only accept full containers. Come back when you have more.", "at", \$actor); 
                return FALSE; 
            \} 
        \} 
 
        \$buyables += (\{ \$what[\$i] \}); 
 
        if(!\$container \&\& NRefOb(\$what[\$i])."trait:quality") \$sellprice = Flt(\$sellprice) * allegory::get_quality_modifier(\$quality: Int(NRefOb(\$what[\$i])."trait:quality")); 
 
        \$totalSellprice += Flt(\$sellprice); 
    \} else \{ 
        \$notbuyable += (\{ \$what[\$i] \}); 
    \} 
\} 
 
if(sizeof(\$notbuyable)) \{ 
    Act(this, "refuse", \$what: \$notbuyable, \$who: \$actor); 
\} 
 
if(!sizeof(\$buyables)) \{ 
    Social(\$this, "apologize", "sheepishly", "Sorry! I only buy " + common::string_list(\$list: \$buyableList) + ".", "to", \$actor); 
    return FALSE; 
\} 
 
\$par = ([ ]); 
\$par["actor"] = \$actor; 
\$par["npc"] = \$this; 
\$par["fish"] = \$buyables; 
\$par["returnables"] = \$returnables; 
 
\$a = "Sell it (" + Str(allegory::get_cost(\$cost: Flt(\$totalSellprice)/100.0))+ ")"; 
\$a_ob = \$\{Allegory:Lib:Tradesmen:FishBuyer\}; 
\$a_fun = "sell_fish"; 
\$par["sellprice"] = \$totalSellprice; 
 
\$b = "I need more time to think about it."; 
\$b_ob = \$\{Allegory:Lib:Tradesmen:FishBuyer\}; 
\$b_fun = "do_nothing"; 
 
Social(\$this, "hum", "thoughtfully", "I will buy " + Describe(\$buyables, nil, nil, STYLE_NONPOSS) + " from you for " + Str(allegory::get_cost(\$cost: Flt(\$totalSellprice)/100.0)) +".", "at", \$actor); 
 
interaction::question(\$question: "", \$expires: 30, \$expire_ob: \$\{Allegory:Lib:Tradesmen:FishBuyer\}, \$expire_fun: "do_nothing", \$par: \$par); 
return FALSE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1589156532, "jominey", "E", 1589156629, "jominey", "E", 1589156948, "jominey", "E", 1589157038, "jominey", "E", 1589157072, "jominey", "E", 1589157147, "jominey", "E", 1589157933, "jominey", "E", 1591539055, "sendnoodlez", "X", 1591539279, "sendnoodlez", "E", 1591539517, "sendnoodlez", "E", 1591539775, "sendnoodlez", "E", 1591540990, "sendnoodlez", "E", 1591541198, "sendnoodlez", "E", 1591542218, "sendnoodlez", "E", 1591542412, "sendnoodlez", "E" \})
      </Core:Property>
    </Core:PCProperties>
    <Notes:Notes/>
  </Core:PropertyContainer>
</object>
