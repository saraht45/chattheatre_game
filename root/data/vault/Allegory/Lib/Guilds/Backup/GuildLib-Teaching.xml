<object clone="/obj/properties" owner="jominey">
  <Core:PropertyContainer>
    <Ur:UrObject urobject="OBJ(Allegory:Lib:Guilds:GuildLib-DailyFunctions)"/>
    <Core:PCProperties>
      <Core:Property property="merry:lib:add_npc_teacher_skills">
         X[M] string output; 
int i, j; 

output = "";
 
  /* list the skills (not the skill categories) for the NPC teacher */ 
 /* only let them see if they are authorized */ 
 if(!\$guildrank) return FALSE; 
 if(!\$guildleader \&\& !member("guild_teacher_skills", Arr(\$char."guild:authority"))) 
  return FALSE; 
 
 if(\$guild."npc:teacher") \{ 
  /* CODE TO HANDLE OLD object-based NPC TEACHERS */ 
  /* should be able to remove the old teachers, then assume that we'll always find a mapping */ 
  if(typeof(\$guild."npc:teacher") == T_OBJECT) \{ 
   \$teacher = ([ ]); 
   \$teacher["skills"] = Arr(\$guild."npc:teacher"."teaching:skills"); 
  \} else if(typeof(\$guild."npc:teacher") == T_MAPPING) \{ 
   \$teacher = \$guild."npc:teacher"; 
  \} 
 \} else \{ 
  \$teacher = ([ ]); 
 \} 
 
 /* list the skills that can be added */ 
 output += "\<select onchange=\\"display_block('addskilllist', 'confirm_adding_npc_teacher_skills', value);\\"\>\\n"; 
 output += "\<option value=\\"\\"\>\</option\>\\n"; 
 
 /* list the careers that can be added */ 
 \$tmp = map_indices(Get(\$\{Ironclaw:Lib:Teaching:newCareersDB\}, "*")); 
 \$tmp -= (\{ "revisions" \}); 
 for(i=0;i\<sizeof(\$tmp);i++) \{ 
  /* don't list the skill if the teacher already knows it */ 
  if(member("skill:career:"+\$tmp[i], Arr(\$teacher["skills"]))) \{ 
   \$tmp -= (\{ \$tmp[i] \}); 
   i--; 
  \} else \{ 
   /* check guild requirements */ 
   \$requirements = Get(\$\{Ironclaw:Lib:Teaching:newCareersDB\}, \$tmp[i])["guild_requirements"]; 
   if(\$requirements) \{ 
    /* does it meet the requirements? */ 
    \$valid = TRUE; 
    for(j=0;j\<sizeof(\$requirements) \&\& \$valid;j++) \{ 
     if(!member(Get(\$guild, \$requirements[j][0]), \$requirements[j])) \{ 
      \$valid = nil; 
      \$tmp -= (\{ \$tmp[i] \}); 
      i--; 
     \} 
    \} 
   \} 
  \} 
 \} 
 if(sizeof(\$tmp)) 
  output += "\<option value=\\"\\"\>-=Careers=-\</option\>\\n"; 
 for(i=0;i\<sizeof(\$tmp);i++) 
  output += "\<option value=\\"skill:career:"+\$tmp[i]+"\\"\>"+capitalize(\$tmp[i])+"\</option\>\\n"; 
 
 /* list the skills that can be added */ 
 \$tmp = map_indices(Get(\$\{Ironclaw:Lib:Teaching:SkillsDB\}, "*")); 
 \$tmp -= (\{ "revisions" \}); 
 
 for(i=0;i\<sizeof(\$tmp);i++) \{ 
  /* don't list the skill if the teacher already knows it */ 
  if(member("skill:"+\$tmp[i], Arr(\$teacher["skills"]))) \{ 
   \$tmp -= (\{ \$tmp[i] \}); 
   i--; 
  \} else \{ 
   /* check guild requirements */ 
   \$requirements = Get(\$\{Ironclaw:Lib:Teaching:SkillsDB\}, \$tmp[i])["guild_requirements"]; 
   if(\$requirements) \{ 
    /* does it meet the requirements? */ 
    \$valid = TRUE; 
    for(j=0;j\<sizeof(\$requirements) \&\& \$valid;j++) \{ 
     if(!member(Get(\$guild, \$requirements[j][0]), \$requirements[j])) \{ 
      \$valid = nil; 
      \$tmp -= (\{ \$tmp[i] \}); 
      i--; 
     \} 
    \} 
   \} 
  \} 
 \} 
 if(sizeof(\$tmp)) 
  output += "\<option value=\\"\\"\>-=Skills=-\</option\>\\n"; 
 \$category = nil; 
 for(i=0;i\<sizeof(\$tmp);i++) \{ 
  \$exploded = explode(\$tmp[i], ":"); 
  \$skill_name = \$exploded[1]; 
  if(\$exploded[0] != \$category) \{ 
   \$category = \$exploded[0]; 
   output += "\<option value=\\"\\"\>="+capitalize(\$category)+"=\</option\>\\n"; 
  \} 
  output += "\<option value=\\"skill:"+\$tmp[i]+"\\"\>"+capitalize(\$skill_name)+"\</option\>\\n"; 
 \} 
 
 output += "\</select\>\\n"; 
 
 output += "\<span id=\\"addskilllist\\"\>\\n"; 
 output += "\</span\>\\n";

return output;
      </Core:Property>
      <Core:Property property="merry:lib:check_learning_cost">
         X[M] /* returns the cost of studying \$subject to level \$level */ 
 if(!\$subject) return 0; 
 if(!\$level) return 0; 
 \$nsubject = explode(\$subject, ":"); 
 if(sizeof(\$nsubject) != 3) return 0; 

\$cost = Call(\$\{Ironclaw:Lib:Teaching:TeachingLib\}, "get_skill_cost", \$category: \$nsubject[1], \$level: \$level);
/*
 if(\$nsubject[1] == "career") \{ 
  \$cost = \$level*10; 
  if(\$cost \> 100) \$cost = 100; 
 \} else if (\$nsubject[1] == "lang") \{ 
  \$cost = \$level*3; 
  if(\$cost \> 30) \$cost = 30; 
 \} else \{ 
  \$cost = \$level*5; 
  if(\$cost \> 50) \$cost = 50; 
 \}
*/ 
 \$cost = Int(Flt(\$cost)*1.1); 
 return \$cost;
      </Core:Property>
      <Core:Property property="merry:lib:confirm_add_npc_teacher_skills">
         X[M] string output; 
int i, j; 
 output = "";
 /* ask if they want to add this skill */ 
 /* only let them see this if they are in the guild */ 
 if(!\$guildrank) return FALSE; 
 if(!\$guildleader \&\& !member("guild_teacher_skills", Arr(\$char."guild:authority"))) 
  return FALSE; 
 
 if(\$vars \&\& sizeof(\$vars)) \{ 
  \$skill = \$vars[0]; 
 \} else \{ 
  return ""; 
 \} 
 
 /* set the guild teacher */ 
 if(\$guild."npc:teacher") \{ 
  /* CODE TO HANDLE OLD object-based NPC TEACHERS */ 
  /* should be able to remove the old teachers, then assume that we'll always find a mapping */ 
  if(typeof(\$guild."npc:teacher") == T_OBJECT) \{ 
   \$teacher = ([ ]); 
   \$teacher["skills"] = Arr(\$guild."npc:teacher"."teaching:skills"); 
  \} else if(typeof(\$guild."npc:teacher") == T_MAPPING) \{ 
   \$teacher = \$guild."npc:teacher"; 
  \} 
 \} else \{ 
  \$teacher = ([ ]); 
 \} 
 
 /* check the teacher doesn't already know this skill */ 
 if(member(\$skill, Arr(\$teacher["skills"]))) 
  return "Your guild teacher is already teaching that skill."; 
 
 \$explode = explode(\$skill, ":"); 
 \$skill_name = \$explode[2]; 
 /* any extra checks? */ 
 /* does it meet the requirements? */ 
 if(\$explode[1] == "career") \{ 
  \$requirements = Get(\$\{Ironclaw:Lib:Teaching:newCareersDB\}, \$skill_name)["guild_requirements"]; 
 \} else \{ 
  \$requirements = Get(\$\{Ironclaw:Lib:Teaching:SkillsDB\}, \$explode[1]+":"+\$skill_name)["guild_requirements"]; 
 \} 
 if(\$requirements) \{ 
  for(i=0;i\<sizeof(\$requirements);i++) \{ 
   if(!member(Get(\$guild, \$requirements[i][0]), \$requirements[i])) return "This teacher isn't able to train members in "+\$skill_name+".\<br/\>\\n"; 
  \} 
 \} 
 
 
 /* charge the cost */ 
 if(!Call( this, "general_script", \$script: "charge_tokens", \$token: "academic", \$amount: (sizeof(Arr(\$teacher["skills"]))+1)*20)) 
  return "Your guild does not have enough academic tokens."; 
 
/* if( Int(\$guild."tokens:teacher") \>= (sizeof(Arr(\$teacher["skills"]))+1)*20) \{ 
  \$guild."tokens:teacher" = Int(\$guild."tokens:teacher"); 
  \$guild."tokens:teacher" -= (sizeof(Arr(\$teacher["skills"]))+1)*20; 
 \} else \{ 
  return "Your guild does not have enough academic tokens."; 
 \} 
*/ 
 
 /* add to the skill list */ 
 \$teacher["skills"] = Arr(\$teacher["skills"]); 
 \$teacher["skills"] \|= (\{ \$skill \}); 
 
 /* set the guild teacher */ 
 if(\$guild."npc:teacher") \{ 
  /* CODE TO HANDLE OLD object-based NPC TEACHERS */ 
  /* should be able to remove the old teachers, then assume that we'll always find a mapping */ 
  if(typeof(\$guild."npc:teacher") == T_OBJECT) \{ 
   \$guild."npc:teacher"."teaching:skills" = \$teacher["skills"]; 
  \} else if(typeof(\$guild."npc:teacher") == T_MAPPING) \{ 
   \$teacher = \$teacher; 
  \} 
 \} else \{ 
  \$guild."npc:teacher" = \$teacher; 
 \} 
 
 output += "The teacher now can offer lessons in "+\$skill_name+" - Please refresh this page to see it.\<br/\>\\n"; 
 
 return output; 
 
 if(\$message = ironclaw::busy_check(\$character: \$actor)) 
  return "You cannot take this lesson, you are already busy "+\$message+". If you wish to stop that action so you can take this lesson, use the in-game @stop command. [\<u class=\\"clickable\\" onclick=\\"display_block('skilllist_confirm', 'confirm_npc_teacher_skills', '"+\$vars[0]+"');\\"\>Try again\</u\>]"; 
 
 \$skill_name = explode(\$subject, ":"); 
 
 if(sizeof(\$skill_name) != 3) return "Something has gone wrong. Please @assist and report this."; 
 \$skill_name = \$skill_name[2]; 
 \$level = Int(Get(\$actor, \$subject)); 
 \$cost = Call(\$this, "general_script", \$script: "check_learning_cost", \$level: \$level+1); 
 output += "Studying this will raise you to level "+Str(\$level+1)+" in "+\$skill_name+".\<br/\>\\n"; 
 
 if(\$char."guild:guild_lessons") \{ 
  output += "This will cost "+Str(\$cost)+" learning points, and will cost your guild "+Str((\$level+1)*(\$level+1))+" denarii.\<br/\>\\n"; 
  /* check if they can pay the costs */ 
  if(Int(\$actor."student:learningpoints") \< \$cost) \{ 
   output += "You currently only have "+Str(Int(\$actor."student:learningpoints"))+" learning points.\<br/\>\\n"; 
   if(Int(\$guild.kitty) \< (\$level+1)*(\$level+1)*100) 
    output += "Your guild cannot afford this lesson.\<br/\>\\n"; 
   return output; 
  \} 
  if(Int(\$guild.kitty) \< (\$level+1)*(\$level+1)*100) \{ 
   /* can they pay it with their own money? */ 
   if(Int(\$guild.kitty)+Int(\$actor."trait:money") \< (\$level+1)*(\$level+1)*100) \{ 
    output += "Your guild cannot afford this lesson.\<br/\>\\n"; 
    return output; 
   \} else \{ 
    output += "Your guild cannot afford the entire cost of this lesson. "+Str(Int(Flt((\$level+1)*(\$level+1)*100-Int(\$guild.kitty))/100.0))+" denarii will need to be paid from your personal bank account.\<br/\>\\n"; 
   \} 
  \} 
 \} else \{ 
  output += "This will cost "+Str(\$cost)+" learning points, and will cost you "+Str((\$level+1)*(\$level+1))+" denarii from your bank account to pay the teacher.\<br/\>\\n"; 
  if(\$guildleader \|\| member("guild_lessons", Arr(\$char."guild:authority"))) 
   output += "(However, you have authority to set who can get their lessons paid by the guild by going into the members list, then edit the settings. You should see the option \\"Pay NPC teacher from guild resources\\")\<br/\>\\n"; 
  /* check if they can pay the costs */ 
  if(Int(\$actor."student:learningpoints") \< \$cost) \{ 
   output += "You currently only have "+Str(Int(\$actor."student:learningpoints"))+" learning points.\<br/\>\\n"; 
   if(Int(\$actor."trait:money") \< (\$level+1)*(\$level+1)*100) 
    output += "You cannot afford this lesson.\<br/\>\\n"; 
   return output; 
  \} 
  if(Int(\$actor."trait:money") \< (\$level+1)*(\$level+1)*100) \{ 
   output += "You cannot afford this lesson.\<br/\>\\n"; 
   return output; 
  \} 
 \} 
 output += "[\<u class=\\"clickable\\" onclick=\\"display_block('skilllist_confirm', 'teach_npc_teacher_skills', '"+Str(\$subject)+"');\\"\>Study "+\$skill_name+" now\</u\>]"; 
return output;
      </Core:Property>
      <Core:Property property="merry:lib:confirm_adding_npc_teacher_skills">
         X[M] string output; 
int i, j; 
 
output = "";

 /* ask if they want to add this skill */ 
 /* only let them see this if they are in the guild */ 
 if(!\$guildrank) return FALSE; 
 if(!\$guildleader \&\& !member("guild_teacher_skills", Arr(\$char."guild:authority"))) 
  return FALSE; 
 
 if(\$vars \&\& sizeof(\$vars)) \{ 
  \$skill = \$vars[0]; 
 \} else \{ 
  return ""; 
 \} 
 
 /* set the guild teacher */ 
 if(\$guild."npc:teacher") \{ 
  /* CODE TO HANDLE OLD object-based NPC TEACHERS */ 
  /* should be able to remove the old teachers, then assume that we'll always find a mapping */ 
  if(typeof(\$guild."npc:teacher") == T_OBJECT) \{ 
   \$teacher = ([ ]); 
   \$teacher["skills"] = Arr(\$guild."npc:teacher"."teaching:skills"); 
  \} else if(typeof(\$guild."npc:teacher") == T_MAPPING) \{ 
   \$teacher = \$guild."npc:teacher"; 
  \} 
 \} else \{ 
  \$teacher = ([ ]); 
 \} 
 
 /* check the teacher doesn't already know this skill */ 
 if(member(\$skill, Arr(\$teacher["skills"]))) 
  return "Your guild teacher is already teaching that skill."; 
 
 \$explode = explode(\$skill, ":"); 
 \$skill_name = \$explode[2]; 
 /* any extra checks? */ 
 /* does it meet the requirements? */ 
 if(\$explode[1] == "career") \{ 
  \$requirements = Get(\$\{Ironclaw:Lib:Teaching:newCareersDB\}, \$skill_name)["guild_requirements"]; 
 \} else \{ 
  \$requirements = Get(\$\{Ironclaw:Lib:Teaching:SkillsDB\}, \$explode[1]+":"+\$skill_name)["guild_requirements"]; 
 \} 
 if(\$requirements) \{ 
  for(i=0;i\<sizeof(\$requirements);i++) \{ 
   EmitTo(\$actor, "Check "+dump_value(\$requirements[i])); 
   if(!member(Get(\$guild, \$requirements[i][0]), \$requirements[i])) return "This teacher isn't able to train members in "+\$skill_name+".\<br/\>\\n"; 
  \} 
 \} 
 
 /* count academic tokens */ 
 \$academic_tokens = Call(this, "general_script", \$script: "count_tokens", \$token: "academic"); 
 
 output += "Your teacher already has "+Str(sizeof(Arr(\$teacher["skills"])))+" skills.\<br/\>\\n"; 
 output += "So adding "+\$skill_name+" will cost "+Str((sizeof(Arr(\$teacher["skills"]))+1)*20)+" academic tokens.\<br/\>\\n"; 
 output += capitalize(\$guild.fullname)+" has "+dump_value(\$academic_tokens)+" tokens.\<br/\>\\n"; 
 if(Int(\$academic_tokens) \>= (sizeof(Arr(\$teacher["skills"]))+1)*20) \{ 
  output += "[\<u class=\\"clickable\\" onclick=\\"display_block('addskilllist', 'confirm_add_npc_teacher_skills', '"+Str(\$skill)+"');\\"\>Add the "+\$skill_name+" skill now\</u\>]\<br/\>\\n"; 
 \} 
 return output;
      </Core:Property>
      <Core:Property property="merry:lib:confirm_npc_teacher_skills">
         X[M] string output; 
int i, j; 

output = "";

 /* ask if they want to study this skill */ 
 /* only let them see the teacher list if they are in the guild */ 
 if(!\$guildrank) return FALSE; 
 
 if(\$vars \&\& sizeof(\$vars)) \{ 
  \$subject = \$vars[0]; 
 \} else \{ 
  return ""; 
 \} 
 
 if(\$message = ironclaw::busy_check(\$character: \$actor)) 
  return "You cannot take this lesson, you are already busy "+\$message+". If you wish to stop that action so you can take this lesson, use the in-game @stop command. [\<u class=\\"clickable\\" onclick=\\"display_block('skilllist_confirm', 'confirm_npc_teacher_skills', '"+\$vars[0]+"');\\"\>Try again\</u\>]"; 
 
 \$skill_name = explode(\$subject, ":"); 
 
 if(sizeof(\$skill_name) != 3) return "Something has gone wrong. Please @assist and report this."; 
 \$skill_name = \$skill_name[2]; 
 \$level = Int(Get(\$actor, \$subject)); 
 \$cost = Call(\$this, "general_script", \$script: "check_learning_cost", \$level: \$level+1); 
 output += "Studying this will raise you to level "+Str(\$level+1)+" in "+\$skill_name+".\<br/\>\\n"; 
 
 if(\$char."guild:guild_lessons") \{ 
  output += "This will cost "+Str(\$cost)+" learning points, and will cost your guild "+Str((\$level+1)*(\$level+1))+" denarii.\<br/\>\\n"; 
  /* check if they can pay the costs */ 
  if(Int(\$actor."student:learningpoints") \< \$cost) \{ 
   output += "You currently only have "+Str(Int(\$actor."student:learningpoints"))+" learning points.\<br/\>\\n"; 
   if(Int(\$guild.kitty) \< (\$level+1)*(\$level+1)*100) 
    output += "Your guild cannot afford this lesson.\<br/\>\\n"; 
   return output; 
  \} 
  if(Int(\$guild.kitty) \< (\$level+1)*(\$level+1)*100) \{ 
   /* can they pay it with their own money? */ 
   if(Int(\$guild.kitty)+Int(\$actor."trait:money") \< (\$level+1)*(\$level+1)*100) \{ 
    output += "Your guild cannot afford this lesson.\<br/\>\\n"; 
    return output; 
   \} else \{ 
    output += "Your guild cannot afford the entire cost of this lesson. "+Str(Int(Flt((\$level+1)*(\$level+1)*100-Int(\$guild.kitty))/100.0))+" denarii will need to be paid from your personal bank account.\<br/\>\\n"; 
   \} 
  \} 
 \} else \{ 
  output += "This will cost "+Str(\$cost)+" learning points, and will cost you "+Str((\$level+1)*(\$level+1))+" denarii from your bank account to pay the teacher.\<br/\>\\n"; 
  if(\$guildleader \|\| member("guild_lessons", Arr(\$char."guild:authority"))) 
   output += "(However, you have authority to set who can get their lessons paid by the guild by going into the members list, then edit the settings. You should see the option \\"Pay NPC teacher from guild resources\\")\<br/\>\\n"; 
  /* check if they can pay the costs */ 
  if(Int(\$actor."student:learningpoints") \< \$cost) \{ 
   output += "You currently only have "+Str(Int(\$actor."student:learningpoints"))+" learning points.\<br/\>\\n"; 
   if(Int(\$actor."trait:money") \< (\$level+1)*(\$level+1)*100) 
    output += "You cannot afford this lesson.\<br/\>\\n"; 
   return output; 
  \} 
  if(Int(\$actor."trait:money") \< (\$level+1)*(\$level+1)*100) \{ 
   output += "You cannot afford this lesson.\<br/\>\\n"; 
   return output; 
  \} 
 \} 
 output += "[\<u class=\\"clickable\\" onclick=\\"display_block('skilllist_confirm', 'teach_npc_teacher_skills', '"+Str(\$subject)+"');\\"\>Study "+\$skill_name+" now\</u\>]"; 
return output;
      </Core:Property>
      <Core:Property property="merry:lib:list_npc_teacher">
         X[M] string output; 
int i; 
 
output = "";

  /* only let them see the teacher list if they are in the guild */ 
  if(!\$guildrank) return FALSE; 
 
  if(\$guild."npc:teacher") \{ 
   /* CODE TO HANDLE OLD object-based NPC TEACHERS */ 
   /* should be able to remove the old teachers, then assume that we'll always find a mapping */ 
   if(typeof(\$guild."npc:teacher") == T_OBJECT) \{ 
    \$teacher = ([ ]); 
    \$teacher["skills"] = Arr(\$guild."npc:teacher"."teaching:skills"); 
   \} else if(typeof(\$guild."npc:teacher") == T_MAPPING) \{ 
    \$teacher = \$guild."npc:teacher"; 
   \} 
  \} else \{ 
   \$teacher = ([ ]); 
  \} 
 
  if(\$teacher["name"]) \{ 
   output = capitalize(\$teacher["name"]); 
  \} else \{ 
   output = capitalize(\$guild.fullname)+" teacher"; 
  \} 
  if(!\$teacher["skills"] \|\| !sizeof(\$teacher["skills"])) \{ 
   output += " doesn't know anything useful to teach you."; 
  \} else \{ 
   output += " can teach the following skills:\<br/\>\\n"; 
   /* list skills */ 
   /* gather categories */ 
   \$categories = (\{ \}); 
   for(\$i=0;\$i\<sizeof(\$teacher["skills"]);\$i++) \{ 
    \$tmp = explode(\$teacher["skills"][\$i], ":"); 
    if(sizeof(\$tmp) \>= 3) 
     \$categories \|= (\{ \$tmp[1] \}); 
   \} 
   /* list the categories */ 
   output += "\<select onchange=\\"display_block('skilllist', 'list_npc_teacher_skills', value);\\"\>\\n"; 
   output += "\<option value=\\"nil\\"\>\</option\>\\n"; 
   if(member("career", \$categories)) 
    output += "\<option value=\\"career\\"\>Careers\</option\>\\n"; 
   if(member("social", \$categories)) 
    output += "\<option value=\\"social\\"\>Social\</option\>\\n"; 
   if(member("academics", \$categories)) 
    output += "\<option value=\\"academics\\"\>Academics\</option\>\\n"; 
   if(member("lang", \$categories)) 
    output += "\<option value=\\"lang\\"\>Languages\</option\>\\n"; 
   if(member("mental", \$categories)) 
    output += "\<option value=\\"mental\\"\>Mental\</option\>\\n"; 
   if(member("hunting", \$categories)) 
    output += "\<option value=\\"hunting\\"\>Hunting\</option\>\\n"; 
   if(member("combat", \$categories)) 
    output += "\<option value=\\"combat\\"\>Combat\</option\>\\n"; 
   if(member("alteration", \$categories)) 
    output += "\<option value=\\"alteration\\"\>Crafting\</option\>\\n"; 
   if(member("thief", \$categories)) 
    output += "\<option value=\\"thief\\"\>Thief\</option\>\\n"; 
   output += "\</select\>\\n"; 
 
   /* now list the skills in this category */ 
   output += "\<span id=\\"skilllist\\"\>\<br/\>\\n"; 
   output += Call(this, "general_script", \$script: "list_npc_teacher_skills"); 
   output += "\</span\>\\n"; 
 
  \} 
 
 
  /* if they should be able to add skills to the teacher */ 
  if(\$guildleader \|\| member("guild_teacher_skills", Arr(\$char."guild:authority"))) \{ 
   /* now list the skills in this category */ 
   output += "Add new skills:\<br/\>\\n"; 
   output += "\<span id=\\"teachlist\\"\>\\n"; 
   output += Call(this, "general_script", \$script: "add_npc_teacher_skills"); 
   output += "\</span\>\\n"; 
  \} 
 
  /* if they should be able to see the teaching record */ 
  if(\$guildleader \|\| member("guild_lessons", Arr(\$char."guild:authority"))) \{ 
   if(!\$guild."costs:teaching") \$guild."costs:teaching" = ([ ]); 
   /* clear out the old records */ 
    /* NOT CODED YET */ 
   \$index = map_indices(\$guild."costs:teaching"); 
   if(sizeof(\$index)) \{ 
    output += "\<div id=\\"teaching_record\\"\>"; 
    for(i=0;i\<sizeof(\$index);i++) \{ 
     \$char = Obj(\$index[i]); 
     if(\$char) \{ 
      if(\$char."skotos:playercapname") \{ 
       output += Str(\$char."skotos:playercapname")+"\<br/\>"; 
      \} else if(\$char."skotos:charname") \{ 
       output += capitalize(Str(\$char."skotos:charname"))+"\<br/\>"; 
      \} else \{ 
       output += Describe(\$char)+"\<br/\>"; 
      \} 
 
      \$info = \$guild."costs:teaching"[\$index[i]]; 
      output += "\<ul\>"; 
      for(\$j=0;\$j\<sizeof(map_indices(\$info));\$j++) \{ 
       \$cost = \$info[map_indices(\$info)[\$j]][1]; 
       if(\$cost == 1) \{ 
        \$cost = "1 denar"; 
       \} else \{ 
        \$cost = Str(\$cost)+" denarii"; 
       \} 
       output += "\<li\>"+Str(map_indices(\$info)[\$j])+" - "+\$cost+"\</li\>\\n"; 
      \} 
      output += "\</ul\>"; 
     \} else \{ 
      output += "Deleted character\<br/\>\\n"; 
     \} 
    \} 
    output += "\</div\>\\n"; 
   \} else \{ 
    output += "No records\\n"; 
   \} 
  \} 
 
return output;
      </Core:Property>
      <Core:Property property="merry:lib:list_npc_teacher_skills">
         X[M] string output; 
int i, j; 

output = "";

 /* list the skills (not the skill categories) for the NPC teacher */ 
 /* only let them see the teacher list if they are in the guild */ 
 if(!\$guildrank) return FALSE; 
 
 if(\$vars \&\& sizeof(\$vars)) \{ 
  \$startcat = \$vars[0]; 
 \} else \{ 
  \$startcat = "nil"; 
 \} 
 
 if(\$startcat == "undefined" \|\| \$startcat == "nil") return ""; 
 
 if(\$guild."npc:teacher") \{ 
  /* CODE TO HANDLE OLD object-based NPC TEACHERS */ 
  /* should be able to remove the old teachers, then assume that we'll always find a mapping */ 
  if(typeof(\$guild."npc:teacher") == T_OBJECT) \{ 
   \$teacher = ([ ]); 
   \$teacher["skills"] = Arr(\$guild."npc:teacher"."teaching:skills"); 
  \} else if(typeof(\$guild."npc:teacher") == T_MAPPING) \{ 
   \$teacher = \$guild."npc:teacher"; 
  \} 
 \} else \{ 
  \$teacher = ([ ]); 
 \} 
 
 if(!\$teacher["skills"] \|\| !sizeof(\$teacher["skills"])) 
  return FALSE; 
 
 output += "\<select onchange=\\"display_block('skilllist_confirm', 'confirm_npc_teacher_skills', value);\\"\>\\n"; 
 
 output += "\<option value=\\"\\"\>\</option\>\\n"; 
 for(\$i=0;\$i\<sizeof(\$teacher["skills"]);\$i++) \{ 
  \$tmp = explode(\$teacher["skills"][\$i], ":"); 
  if(sizeof(\$tmp) \>= 3 \&\& \$tmp[1] == \$startcat) \{ 
   output += "\<option value=\\""+\$teacher["skills"][\$i]+"\\"\>"+capitalize(\$tmp[2])+"\</option\>\\n"; 
  \} 
 \} 
 output += "\</select\>\<br/\>\\n"; 
 output += "\<div id=\\"skilllist_confirm\\"\>\</div\>\\n"; 
return output;
      </Core:Property>
      <Core:Property property="merry:lib:teach_npc_teacher_skills">
         X[M] string output; 
int i, j; 

output = "";

 /* going to learn the skill */ 
 /* only let them see the teacher list if they are in the guild */ 
 if(!\$guildrank) return FALSE; 
 
 if(\$vars \&\& sizeof(\$vars)) \{ 
  \$subject = \$vars[0]; 
 \} else \{ 
  return ""; 
 \} 
 
 if(\$message = ironclaw::busy_check(\$character: \$actor)) 
  return "You cannot take this lesson, you are already busy "+\$message+". If you wish to stop that action so you can take this lesson, use the in-game @stop command. [\<u class=\\"clickable\\" onclick=\\"display_block('skilllist_confirm', 'confirm_npc_teacher_skills', '"+\$vars[0]+"');\\"\>Try again\</u\>]"; 
 
 /* sanity check before teaching */ 
 if(\$message = ironclaw::busy_check(\$character: \$actor)) 
  return "You cannot take this lesson, you are already busy "+\$message+". If you wish to stop that action so you can take this lesson, use the in-game @stop command."; 
 \$skill_name = explode(\$subject, ":"); 
 if(sizeof(\$skill_name) != 3) return "Something has gone wrong. Please @assist and report this."; 
 \$skill_name = \$skill_name[2]; 
 \$level = Int(Get(\$actor, \$subject))+1; 
 \$cost = Call(\$this, "general_script", \$script: "check_learning_cost", \$level: \$level); 
 if(Int(\$actor."student:learningpoints") \< \$cost) 
  return "The lesson could not continue because you only have "+Str(Int(\$actor."student:learningpoints"))+" learning points.\\n"; 
 if(!\$guild.kitty) \$guild.kitty = 0; 
 if(\$char."guild:guild_lessons") \{ 
  if(Int(\$guild.kitty)+Int(\$actor."trait:money") \< (\$level)*(\$level)*100) 
   return "Your guild cannot afford this lesson."; 
 \} else if(Int(\$actor."trait:money") \< (\$level)*(\$level)*100) \{ 
  return "You cannot afford this lesson."; 
 \} 
 /* check that the teacher knows this (check again) */ 
 if(!\$guild."npc:teacher") return "Your guild no longer has a teacher."; 
 /* CODE TO HANDLE OLD object-based NPC TEACHERS */ 
 /* should be able to remove the old teachers, then assume that we'll always find a mapping */ 
 if(typeof(\$guild."npc:teacher") == T_OBJECT) \{ 
  if(!member(\$subject, Arr(\$guild."npc:teacher"."teaching:skills"))) 
   return "Your guild teacher isn't able to teach that skill."; 
 \} else \{ 
  if(!\$guild."npc:teacher"["skills"] \|\| !member(\$subject, \$guild."npc:teacher"["skills"])) 
   return "Your guild teacher isn't able to teach that skill."; 
 \} 
 /* check skill limits */ 
 if(\$nsubject[1] == "career") \{ 
  /* Check they don't learn over 48 levels in this skill */ 
  /* temporarily do this check even if they aren't learning a career. Until all \>48 level people have dropped down to the right number of careers. */ 
  int count, i; 
  string *list; 
  list = map_indices(prefixed_map(\$actor."*", "skill:career:")); 
  count = 0; 
  for(i=0;i\<sizeof(list);i++) \{ 
   count += Int(Get(\$actor, list[i])); 
  \} 
  if(count \>= 48) \{ 
   output = "You have too many careers to learn anything more. You may only have 48 ranks of careers (although you may have any number of skills).\<br/\>\\n"; 
   output += "You will be unable to learn any more skills until you reduce the number of careers you have down to 48."; 
   return output; 
  \} 
 \} else if(\$level \> 24) \{ 
  return "Your skill level is too high, you cannot learn any more."; 
 \} 
 /* start teaching the skill */ 
 \$id = ironclaw::busy_start(\$character: \$actor, \$action: "practicing "+\$skill_name); 
 \$actor."teaching:npc:lesson_end_time" = time()+60*60*4;

 if(\$actor."base:environment") \{ 
  EmitTo(\$actor, "You begin to practice the "+\$skill_name+" skills that you were studying with your guild teacher."); 
  EmitIn(\$actor."base:environment", Describe(\$actor)+" begins to practice "+\$actor."base:possessive"+" "+\$skill_name+" skills.", \$actor); 
 \} 
 \$delay(60*3, "You begin to study "+\$skill_name+". If you wish to end this lesson early, just use the in-game @stop command.\<br/\>Other PCs near your character will be able to see you practicing this skill.\<br/\>The lesson will take around four hours, but you will continue studying "+\$skill_name+" even after you log off.", "0f5b"); 
 while(time() \< \$actor."teaching:npc:lesson_end_time") \{ 
  if(\$actor."busy:id" != \$id) return TRUE; 
  if(\$actor."base:environment") \{ 
   EmitTo(\$actor, "You continue to practice "+\$skill_name+"."); 
   EmitIn(\$actor."base:environment", Describe(\$actor)+" continues to practice "+\$actor."base:possessive"+" "+\$skill_name+" skills.", \$actor); 
  \} 
  \$delay(60*10+(random(10)*60), TRUE, "433d");
 \} 
 if(\$actor."busy:id" != \$id) return TRUE; 
 ironclaw::busy_stop(\$character: \$actor, \$id: \$id); 
 
 /* another sanity check */ 
 
 if(\$char."guild:guild_lessons") \{ 
  if(Int(\$guild.kitty)+Int(\$actor."trait:money") \< \$level*\$level*100) 
   return "Your guild cannot afford this lesson."; 
 \} else if(Int(\$actor."trait:money") \< \$level*\$level*100) \{ 
  return "You cannot afford this lesson."; 
 \} 
 
 if(\$char."guild:guild_lessons") \{ 
  if(Int(\$guild.kitty)+Int(\$actor."trait:money") \< \$level*\$level*100) \{ 
   if(\$actor."base:environment") \{ 
    EmitTo(\$actor, "You finish practicing "+\$skill_name+", but don't increase your understanding. [OOC: Your guild can't afford to pay for the NPC lesson.]"); 
    EmitIn(\$actor."base:environment", Describe(\$actor)+" finishes practicing "+\$skill_name+".", \$actor); 
   \} else \{ 
    if(!\$actor."login:messages") \$actor."login:messages" = (\{ \}); 
    \$actor."login:messages" \|= (\{ "You have finished practicing your "+\$skill_name+" skills, but don't increase your understanding. [OOC: Your guild couldn't afford to pay for the NPC lesson.]" \}); 
   \} 
   return FALSE; 
  \} 
 \} else \{ 
  if(Int(\$actor."trait:money") \< \$level*\$level*100) \{ 
   if(\$actor."base:environment") \{ 
    EmitTo(\$actor, "You finish practicing "+\$skill_name+", but don't increase your understanding. [OOC: You can't afford to pay for the NPC lesson.]"); 
    EmitIn(\$actor."base:environment", Describe(\$actor)+" finishes practicing "+\$skill_name+".", \$actor); 
   \} else \{ 
    if(!\$actor."login:messages") \$actor."login:messages" = (\{ \}); 
    \$actor."login:messages" \|= (\{ "You have finished practicing your "+\$skill_name+" skills, but don't increase your understanding. [OOC: You couldn't afford to pay for the NPC lesson.]" \}); 
   \} 
   return FALSE; 
  \} 
 \} 
 
 /* another sanity check */ 
 if(\$level != Int(Get(\$actor, \$subject))+1) return FALSE; 
 
 /* charge the cost and grant the skill */ 
 if(Int(\$actor."student:learningpoints") \>= \$cost) \{ 
  \$actor."student:learningpoints" -= \$cost; 
 \} else \{ 
  return FALSE; 
 \} 
 
 if(\$char."guild:guild_lessons") \{ 
  \$spent = 0; 
  if(Int(\$guild.kitty) \>= \$level*\$level*100) \{ 
   \$guild.kitty -= \$level*\$level*100; 
   \$spent = \$level*\$level*100; 
   \$spent = Int(Flt(\$spent)/100.0); 
  \} else \{ 
   /* take the money from both guild kitty and personal account */ 
   \$spent = \$guild.kitty; 
   \$guild.kitty = 0; 
   \$actor."trait:money" -= (\$level*\$level*100 - \$spent); 
   \$spent = Int(Flt(\$spent)/100.0); 
  \} 
 \} else \{ 
  \$actor."trait:money" -= \$level*\$level*100; 
 \} 
 
 Set(\$actor, \$subject, \$level); 
 
 /* record this in the guild */ 
 if(\$char."guild:guild_lessons" \&\& \$spent) \{ 
  if(!\$guild."costs:teaching") \$guild."costs:teaching" = ([ ]); 
  if(\$guild."costs:teaching"[name(\$actor)]) \{ 
   \$info = \$guild."costs:teaching"[name(\$actor)]; 
  \} else \{ 
   \$info = ([ ]); 
  \} 
  if(\$info[\$skill_name] \&\& time() \< \$info[\$skill_name][0] + 60*60*24*14 ) \{ 
   /* Add the cost of this lesson */ 
   \$info[\$skill_name][0] = time(); 
   \$info[\$skill_name][1] = \$info[\$skill_name][1] + \$spent; 
  \} else \{ 
   /* add this lesson */ 
   \$info[\$skill_name] = (\{ time(), \$spent \}); 
  \} 
  \$guild."costs:teaching"[name(\$actor)] = \$info; 
 \} 
 return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1346705870, "jominey", "E", 1346706403, "jominey", "R", 1346706705, "jominey", "R", 1346706716, "jominey", "E", 1346707369, "jominey", "E", 1346708768, "jominey", "E", 1346712339, "jominey", "E", 1346712341, "jominey", "E", 1349556896, "jominey", "E", 1349557029, "jominey", "E", 1349557551, "jominey", "E", 1349585847, "jominey", "E", 1420353321, "tonyd", "E", 1571338777, "jominey", "E", 1571350516, "jominey", "R" \})
      </Core:Property>
    </Core:PCProperties>
    <Notes:Notes/>
  </Core:PropertyContainer>
</object>
