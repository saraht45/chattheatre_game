<object clone="/obj/properties" owner="jominey">
  <Core:PropertyContainer>
    <Ur:UrObject/>
    <Core:PCProperties>
      <Core:Property property="html:addpage">
         X[S] \<z dat="\$(UDat.Dat)" name="\$(UDat.Name)"\>
\$[/* run some initial code */ 
   ::popup_initialize();]
\$["\<!DOCTYPE HTML PUBLIC \\"-//W3C//DTD HTML 4.01 Transitional//EN\\" \\"http://www.w3.org/TR/html4/loose.dtd\\"/\>"]
\<html lang="en"\>
\<head\>
    \<title\>Create page - \$(guild.shortname)\</title\>
    \<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/\>
    \$(Ironclaw:Theatre:CreateCharacter.xtra:stylesheet)
\</head\>
   \<body\>
      \$(this.xtra:header)
      \<div id="main"\>
        \<div id="textareafull"\>
            \<h1\>Create new page\</h1\>
            \<zform char="\$(char.name)" guild="\$(guild)" guildpages="\$(guildpages)" page="\$(page)" edit="\$(edit)" info="\$(info)"\>
              \<font color="red" size="3"\>\$(error)\</font\>\<br/\>\<sbr/\>
Page name:
        \<p\>
        \<textarea style="BORDER-RIGHT: #CCCCCC 1pt solid; BORDER-TOP: #000000 1pt solid; BORDER-LEFT: #000000 1pt solid; BORDER-BOTTOM: #CCCCCC 1pt solid; BACKGROUND: transparent; WIDTH: 100%; HEIGHT: 130px" name="body"\>PAGE_NAME\</textarea\>
          \<input type="submit" value="Submit" class="submit-button"/\>
       \</p\>
       \<action\>
         \{? \| \$[if(!\$body \|\| \$body == "") return TRUE; return FALSE;] \|
           \<redirect base="/SAM/Prop/Ironclaw:Lib:Guilds:Guild/addpage" char="\$(char)" page="\$(page)" editmode="1" error="No page name given!"/\>
         \|
           \{? \| \$[if(Get(\$guildpages, "page:"+lower_case(\$body))) return TRUE; return FALSE;] \|
             \<redirect base="/SAM/Prop/Ironclaw:Lib:Guilds:Guild/addpage" char="\$(char)" page="\$(page)" editmode="1" error="Page \$(body) already exists!"/\>
           \|
             \$[/* create the page */ 
               \$page = lower_case(\$body); 
               Set(\$guildpages, "page:"+lower_case(\$body), (\{ (\{ 6, 6 \}), (\{ "paragraph", "Nothing has been added to this page yet." \}), (\{ "page", "Main Page", "default" \}) \}) ); 
               return TRUE;]
               \<redirect base="/SAM/Prop/Ironclaw:Lib:Guilds:Guild/popup" char="\$(char)" page="\$(page)" editmode="1"/\>
           \}
         \}
      \</action\>
    \</zform\>
\<zform char="\$(char.name)" page="\$(page)"\>
  \<p\>\<input type="submit" value="Cancel" class="submit-button"/\>\</p\>
  \<action\>
    \<redirect base="/SAM/Prop/Ironclaw:Lib:Guilds:Guild/popup" char="\$(char)" page="\$(page)" editmode="1"/\>
  \</action\>
\</zform\>
        \</div\>
        \<span id="bottombox"\>
          \<div id="footer"\>\\\&nbsp;\</div\>
        \</span\>
      \</div\>
   \</body\>
\</html\>
\</z\>
      </Core:Property>
      <Core:Property property="html:bid">
         X[S] \<z dat="\$(UDat.Dat)" name="\$(UDat.Name)" biditem="\$[Get(\$\{Ironclaw:Guilds:Trading:bidding\}, \$item)]"\>
\$[/* run some initial code */   
   ::popup_initialize();]
\$["\<!DOCTYPE HTML PUBLIC \\"-//W3C//DTD HTML 4.01 Transitional//EN\\" \\"http://www.w3.org/TR/html4/loose.dtd\\"/\>"]
\<html lang="en"\>
\<head\>
    \<title\>Bidding on \$(biditem.2) - \$(guild.shortname)\</title\>
    \<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/\>
\</head\>
   \<body\>
      \$(this.xtra:header)
      \<div id="main"\>
          \<b\>[OOC: Please use @newguild to place bids.]\</b\>
      \</div\>
   \</body\>
\</html\>
\</z\>
      </Core:Property>
      <Core:Property property="html:character">
         X[S] \<z dat="\$(UDat.Dat)" name="\$(UDat.Name)"\>
\$[/* run some initial code */ 
  ::popup_initialize(); 
  return nil;]
\$["\<!DOCTYPE HTML PUBLIC \\"-//W3C//DTD HTML 4.01 Transitional//EN\\" \\"http://www.w3.org/TR/html4/loose.dtd\\"/\>"]
\<html lang="en"\>
\<head\>
    \<title\>\{? \| \$(guild) \| \$(guild.shortname) \| Not in a guild \}\</title\>
    \<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/\>
    \$(Ironclaw:Theatre:CreateCharacter.xtra:stylesheet)
\</head\>
   \<body\>
      \$(this.xtra:header)
      \<div id="main"\>
        \<div id="textareafull"\>
          \\\<!--Display guild header, and links to other guilds --\\\>
          \<zform char="\$(charname)" guild="\$(guild)" guildname="\$(guildname)"\>
            Character: \<zlink base="/SAM/Prop/Ironclaw:Lib:Guilds:Guild/character" char="\$(charname)"\>\$(char)\</zlink\>
            \{? \| \$(guild) \| - Guild:
            \<zlink base="/SAM/Prop/Ironclaw:Lib:Guilds:Guild/popup" char="\$(char)" guild="\$(guildname)"\>\$[Get(Obj("Ironclaw:Guilds:"+\$guildname), "shortname")]\</zlink\>\}
            - View another guild:
            \<select name="viewguild"\>
              \$[/* get a list of all guilds */ 
                \$folder = "Ironclaw:Guilds"; 
                \$guilds = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects"); 
                \$output = ""; 
                for(\$i=0;\$i\<sizeof(\$guilds);\$i++) \{ 
                  \$output += "\<option value=\\""+\$guilds[\$i]+"\\"\>"+Get(Obj("Ironclaw:Guilds:"+\$guilds[\$i]), "shortname")+"\</option\>"; 
                \} 
                return \$output;]
            \</select\>
            \<input type="submit" value="Go!" class="submit-button"/\>
            \<action\>
              \<redirect base="/SAM/Prop/Ironclaw:Lib:Guilds:Guild/popup" char="\$(char)" guild="\$(viewguild)"/\>
            \</action\>
          \</zform\>
          \<h1\>Character information for \<capitalize what="\$(charname)"/\>\</h1\>
          \<p\>
          \{? \| \$(char.guild) \| You are a member of \$(char.guild.fullname). \| You are not a member of a guild. \}\<break/\>
          \{? \| \$(char.trait:religion) \| You are a member of \{? equal \| \$(char.trait:religion) \| sallumer \| The church of S'allumer. \} \{? equal \| \$(char.trait:religion) \| lutara \| The Lutarist faith. \} \| You are not faithful to any specific religion. \}
          \</p\>
          \{? \| \$(char.guild) \|
          \<h3\>What jobs are you willing to do for \$(char.guild.fullname)?\</h3\>
          \<p\>
          \$[/* gather a list of jobs we will do */ 
          \$jobs = map_indices(prefixed_map(\$char."*", "skill:career:")); 
          \$jobs = Call(\$\{Ironclaw:Lib:Guilds:BluebookedJobsDB\}, "get_jobs", \$jobs: \$jobs); 
          \$currentjobs = Arr(\$char."guild:jobs"); 
          return nil;]
          \{? \| \$[!sizeof(\$jobs)] \|
            The only bluebooked job you can do for your guild is earning. There is no need to select that.\<break/\>
          \|
            Note: The administrators of your guild will be able to see any jobs you select. They will not know how skilled you are at the jobs.\<break/\>
          \<zform jobs="\$(jobs)" char="\$(char)"\>
            \<for var="job" val="\$(jobs)"\>
            \{? \| \$[member(\$job, \$currentjobs)] \|
              \<input TYPE="CHECKBOX" NAME="\$(job)" checked="1"/\>\$(job)\<break/\>
            \|
              \<input TYPE="CHECKBOX" NAME="\$(job)"/\>\$(job)\<break/\>
            \}
            \</for\>
            \<input type="submit" value="Submit" class="submit-button"/\>
            \<action\>
            \$[/* set these jobs into an array */ 
            int i; 
            for(i=0;i\<sizeof(\$jobs);i++) \{ 
              if(!args[\$jobs[i]]) 
                \$jobs[i] = nil; 
            \} 
            \$jobs -= (\{ nil \}); 
            \$char."guild:jobs" = \$jobs; 
            return nil;]
            \<redirect base="/SAM/Prop/Ironclaw:Lib:Guilds:Guild/character" char="\$(char)"/\>\</action\>
          \</zform\>
          \}
          \</p\>
          \}
        \</div\>
        \<span id="bottombox"\>
          \<div id="footer"\>\\\&nbsp;\</div\>
        \</span\>
      \</div\>
   \</body\>
\</html\>
\</z\>
      </Core:Property>
      <Core:Property property="html:edit">
         X[S] \<z dat="\$(UDat.Dat)" name="\$(UDat.Name)"\>
\$[/* run some initial code */ 
   ::popup_initialize();]
\$["\<!DOCTYPE HTML PUBLIC \\"-//W3C//DTD HTML 4.01 Transitional//EN\\" \\"http://www.w3.org/TR/html4/loose.dtd\\"/\>"]
\<html lang="en"\>
\<head\>
    \<title\>Edit - \$(page) - \$(guild.shortname)\</title\>
    \<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/\>
    \$(Ironclaw:Theatre:CreateCharacter.xtra:stylesheet)
\</head\>
   \<body\>
      \$(this.xtra:header)
      \<div id="main"\>
        \<div id="textareafull"\>
          \$[if(\$page) 
            \$info = Get(\$guildpages, "page:"+\$page); 
          if(!\$info) \$info = (\{ \}); 
          /* do we know what textblock we're editing? */ 
          if(\$edit) \{ 
            \$edit = Int(\$edit); 
          \} else \{ 
            \$edit = sizeof(\$info); 
          \}]
          \{? \| \$(info) \|
            \<h1\>Editing page "\$(page)"\</h1\>
            \<zform char="\$(char.name)" guild="\$(guild)" guildpages="\$(guildpages)" page="\$(page)" edit="\$(edit)" info="\$(info)"\>
              \<font color="red" size="3"\>\$(error)\</font\>\<br/\>\<sbr/\>
This textblock is: \<select name="type"\>
\{? \| \$[sizeof(\$info) \<= \$edit] \|
  \<option value="paragraph"\>a paragraph\</option\>
  \<option value="h1"\>header 1\</option\>
  \<option value="h2"\>header 2\</option\>
  \<option value="h3"\>header 3\</option\>
  \<option value="page"\>a link to another guild page\</option\>
  \<option value="link"\>a link to another website\</option\>
  \<option value="image"\>an image\</option\>
  \<option value="text"\>html (write what you like)\</option\>
  \<option value="members_list"\>Members List\</option\>
  \<option value="inventory"\>Guild Inventory\</option\>
  \<option value="guild_bidding"\>Guild Bidding Market\</option\>
  \<option value="trading_deals"\>Guild Trading Deals\</option\>
  \<option value="trading_notices"\>Trading Notices\</option\>
  \<option value="npc_tokens"\>NPC Tokens\</option\>
  \<option value="ring_listing"\>Guild Ring Listing\</option\>
\|
  \<option value="paragraph"\>a paragraph\</option\>
  \{? \| \$[\$info[\$edit][0] == "h1"] \|\<option value="h1" selected="1"\>header 1\</option\>\|\<option value="h1"\>header 1\</option\>\}
  \{? \| \$[\$info[\$edit][0] == "h2"] \|\<option value="h2" selected="1"\>header 2\</option\>\|\<option value="h2"\>header 2\</option\>\}
  \{? \| \$[\$info[\$edit][0] == "h3"] \|\<option value="h3" selected="1"\>header 3\</option\>\|\<option value="h3"\>header 3\</option\>\}
  \{? \| \$[\$info[\$edit][0] == "page"] \|\<option value="page" selected="1"\>a link to another guild page\</option\>\|\<option value="page"\>a link to another guild page\</option\>\}
  \{? \| \$[\$info[\$edit][0] == "link"] \|\<option value="link" selected="1"\>a link to another website\</option\>\|\<option value="link"\>a link to another website\</option\>\}
  \{? \| \$[\$info[\$edit][0] == "image"] \|\<option value="image" selected="1"\>an image\</option\>\|\<option value="image"\>an image\</option\>\}
  \{? \| \$[\$info[\$edit][0] == "text"] \|\<option value="text" selected="1"\>html (write what you like)\</option\>\|\<option value="text"\>html (write what you like)\</option\>\}
  \{? \| \$[\$info[\$edit][0] == "members_list"] \|\<option value="members_list" selected="1"\>Members List\</option\>\|\<option value="members_list"\>Members List\</option\>\}
  \{? \| \$[\$info[\$edit][0] == "inventory"] \|\<option value="inventory" selected="1"\>Guild Inventory\</option\>\|\<option value="inventory"\>Guild Inventory\</option\>\}
  \{? \| \$[\$info[\$edit][0] == "guild_bidding"] \|\<option value="guild_bidding" selected="1"\>Guild Bidding Market\</option\>\|\<option value="guild_bidding"\>Guild Bidding Market\</option\>\}
  \{? \| \$[\$info[\$edit][0] == "trading_deals"] \|\<option value="trading_deals" selected="1"\>Guild Trading Deals\</option\>\|\<option value="trading_deals"\>Guild Trading Deals\</option\>\}
  \{? \| \$[\$info[\$edit][0] == "trading_notices"] \|\<option value="trading_notices" selected="1"\>Trading Notices\</option\>\|\<option value="trading_notices"\>Trading Notices\</option\>\}
  \{? \| \$[\$info[\$edit][0] == "ring_listing"] \|\<option value="ring_listing" selected="1"\>Guild Ring Listing\</option\>\|\<option value="ring_listing"\>Guild Ring Listing\</option\>\}
  \{? \| \$[\$info[\$edit][0] == "npc_tokens"] \|\<option value="npc_tokens" selected="1"\>NPC Tokens\</option\>\|\<option value="npc_tokens"\>NPC Tokens\</option\>\}
\}
\</select\>
- If this links to another guild page, which page? \<select name="linkpage"\>
  \<option\>default\</option\>
\$[\$pages = prefixed_map(\$guildpages."*", "page:"); 
\$pages=map_indices(\$pages); 
\$pages-=(\{ "page:default" \}); 
\$choices = ""; 
if(sizeof(\$info) \<= \$edit \|\| sizeof(\$info[\$edit]) \< 3) \{ 
  for(\$i=0;\$i\<sizeof(\$pages);\$i++) \{ 
    sscanf(\$pages[\$i], "page:%s", \$out); 
    \$choices += "\<option\>"+\$out+"\</option\>"; 
  \} 
\} else \{ 
  /* support for the pre-selected link */ 
  for(\$i=0;\$i\<sizeof(\$pages);\$i++) \{ 
    sscanf(\$pages[\$i], "page:%s", \$out); 
    if(\$info[\$edit][2] == \$out) \{ 
      \$choices += "\<option selected\>"+\$out+"\</option\>"; 
    \} else \{ 
      \$choices += "\<option\>"+\$out+"\</option\>"; 
    \} 
  \} 
\} 
return \$choices;]
\</select\>
        \<p\>
        \<textarea style="BORDER-RIGHT: #CCCCCC 1pt solid; BORDER-TOP: #000000 1pt solid; BORDER-LEFT: #000000 1pt solid; BORDER-BOTTOM: #CCCCCC 1pt solid; BACKGROUND: transparent; WIDTH: 100%; HEIGHT: 130px" name="body"\>\$[if(sizeof(\$info) \> \$edit) 
          return \$info[\$edit][1];]\</textarea\>
          \<input type="submit" value="Submit" class="submit-button"/\>
       \</p\>
       \<action\>
         \$[/* save these changes */ 
         if(sizeof(\$info) \> \$edit) \{ 
           \$newarray = (\{ \}); 
           if(\$edit \> 0) 
             \$newarray = \$info[0..\$edit-1]; 
           if(\$type == "page") \{ 
             \$newarray += (\{ (\{ \$type, \$body, \$linkpage \}) \}); 
           \} else \{ 
             \$newarray += (\{ (\{ \$type, \$body \}) \}); 
           \} 
           if(sizeof(\$info) \> \$edit+1) 
             \$newarray += \$info[\$edit+1..sizeof(\$info)-1]; 
         \} else \{ 
           if(\$type == "page") \{ 
             \$newarray = \$info+ (\{ (\{ \$type, \$body, \$linkpage \}) \}); 
           \} else \{ 
             \$newarray = \$info+ (\{ (\{ \$type, \$body \}) \}); 
           \} 
         \} 
         /* set the array */ 
         Set(\$guildpages, "page:"+\$page, \$newarray);]
         \<redirect base="/SAM/Prop/Ironclaw:Lib:Guilds:Guild/popup" char="\$(char)" page="\$(page)" editmode="1"/\>
      \</action\>
    \</zform\>
\<zform char="\$(char.name)" page="\$(page)"\>
  \<p\>\<input type="submit" value="Cancel" class="submit-button"/\>\</p\>
  \<action\>
    \<redirect base="/SAM/Prop/Ironclaw:Lib:Guilds:Guild/popup" char="\$(char)" page="\$(page)" editmode="1"/\>
  \</action\>
\</zform\>
          \|
            \<h1\>404 error (sorta) - Page not found!\</h1\>
          \}
        \</div\>
        \<span id="bottombox"\>
          \<div id="footer"\>\\\&nbsp;\</div\>
        \</span\>
      \</div\>
   \</body\>
\</html\>
\</z\>
      </Core:Property>
      <Core:Property property="html:imports">
         X[S] \<z dat="\$(UDat.Dat)" name="\$(UDat.Name)"\>
\$(this.page:header)
\$[/* Get the imports object */
\$imports = \$\{Ironclaw:Lib:Economy:TradingImports\};]
\<h1\>Imports\</h1\>
\<h2\>Current Imports\</h2\>
\<table\>
  \<tr\>
    \<th\>Item\</th\>
    \<th\>Stock\$["\<br/\>"]Remaining\</th\>
    \<th\>Time\$["\<br/\>"]Remaining\</th\>
    \<th\>Selling to\</th\>
    \<th\>Cost\</th\>
    \<th\>Profit\</th\>
  \</tr\>
\$[/* List all the imports managed by this PC */
\$text = "";
\$list = map_indices(prefixed_map(\$imports."*", "importitem:"));
for(\$i=0;\$i\<sizeof(\$list);\$i++) \{
  \$item = Get(\$imports, \$list[\$i]);
  \$name = \$item["name"] ? \$item["name"] : Describe(\$item["object"]);
  \$text += "\<tr\>\<td\>"+capitalize(\$name)+"\</td\>\<td\>31\</td\>\<td\>2 days\</td\>\<td\>Everyone\</td\>\<td\>375\</td\>\<td\>13.65\</td\>\</tr\>\\n";
\}
if(\$text == "") return "\<p\>You are not currently importing any items\</p\>\\n";
return \$text;]
\</table\>
\<h2\>Possible Imports - The \$(guild.fullname)\</h2\>
\<table\>
  \<tr\>\<th\>Item\</th\>\<th\>Stock\</th\>\<th\>Duration\</th\>\<th\>Sell to\</th\>\<th\>Selling\$["\<br/\>"]Price\</th\>\<th\>Import\$["\<br/\>"]Cost\</th\>\<th\>Available\$["\<br/\>"]From\</th\>\<th\>Import\</th\>\</tr\>
\$[/* List all the imports available to this PC */
\$text = "";
\$list = map_indices(prefixed_map(\$imports."*", "importitem:"));
for(\$i=0;\$i\<sizeof(\$list);\$i++) \{
  \$item = Get(\$imports, \$list[\$i]);
  \$name = \$item["name"] ? \$item["name"] : Describe(\$item["object"]);
  \$duration = \$item["import:duration"] ? \$item["import:duration"]/(60*60*24) : 30;
  \$cost = \$item["import:cost"] ? Flt(\$item["import:cost"]) : Flt(\$item["stock"]*\$item["price"])/2.0;
  \$seller = \$item["import:sellername"] ? \$item["import:sellername"] : "Find out IG";
  \$text += "\<tr\>\<td\>"+capitalize(\$name)+"\</td\>\<td\>"+\$item["stock"]+"\</td\>\<td\>"+\$duration+" days\</td\>\<td\>\\n";
  \$text += "\<select id='"+\$list[\$i]+"'\>\\n\<option\>Everyone\</option\>\\n\<option selected='1'\>Supporters\</option\>\\n\<option\>Guild members\</option\>\\n\</select\>\\n";
  \$text += "\</td\>\<td\>"+Flt(\$item["price"])/100.0+"\</td\>\<td\>"+\$cost/100.0+"\</td\>\<td\>"+\$seller+"\</td\>\<td\>[Import now]\</td\>\</tr\>\\n";
\}
if(\$text == "") return "\<p\>No imports are available\</p\>\\n";
return \$text;]
\</table\>
\$(this.page:footer)
\</z\>
      </Core:Property>
      <Core:Property property="html:index">
         X[S] \<z dat="\$(UDat.Dat)" name="\$(UDat.Name)"\>
\$(this.page:header)
\$(guild.fullname) \$["\<br/\>"]
\$["\<br/\>"]
\$(this.page:footer)
\</z\>
      </Core:Property>
      <Core:Property property="html:popup">
         X[S] \<z dat="\$(UDat.Dat)" name="\$(UDat.Name)"\>
\$[/* run some initial code */  
  ::popup_initialize();  
  return nil;]
\$["\<!DOCTYPE HTML PUBLIC \\"-//W3C//DTD HTML 4.01 Transitional//EN\\" \\"http://www.w3.org/TR/html4/loose.dtd\\"/\>"]
\<html lang="en"\>
\<head\>
    \<title\>\{? \| \$(guild) \| \$(guild.shortname) \| Not in a guild \}\</title\>
    \<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/\>
    \$(Ironclaw:Theatre:CreateCharacter.xtra:stylesheet)
\</head\>
   \<body\>
      \$(this.xtra:header)
      \<div id="main"\>
        \<div id="textareafull"\>
\$[/* dirty hack */ \$savedguild = \$guild;]
\$[/* find what page to display */  
 
if(!\$page)\{  
  /* is this our guild? */  
  if(\$char.guild \&\& \$char.guild == \$guild) \{  
    \$page = "default";  
  \} else \{  
    \$page = "guest";  
  \}  
\}  
  
if(\$guild) \{  
  \$info = Get(\$guildpages, "page:"+\$page);  
\} else \{  
  \$info = (\{ (\{ 6, 6 \}), (\{ "h1", "You are not a member of a guild yet." \}), (\{ "paragraph", "You can either socialize in-game, and join an existing guild, or visit the record house, to buy a guild charter from the clerk, and start your own guild." \}) \});  
\}  
  
if(!\$info) \{  
  /* page not found. Return error, or create page */  
  if(\$guildrank \<= 3) \{  
    /* create page */  
    Set(\$guild, "page:"+\$page, (\{ (\{ 4, 3 \}) \}));  
    \$info = (\{ (\{ 4, 3 \}) \});  
  \} else \{  
    /* are they trying to view the guest page? */  
    if(\$page == "guest") \{  
      /* There is no guest page */  
      \$info = (\{ (\{ 4, 3 \}), (\{ "h2", "This guild does not have a guest page." \}), (\{ "paragraph", "You could suggest to the guild members that they create a page named \\"guest\\"" \}) \});  
    \} else \{  
      /* Not high enough rank to make this page */  
      \$info = (\{ (\{ 4, 3 \}), (\{ "h1", "404 error (sorta) - Page not found!" \}) \});  
    \}  
  \}  
\}]
          \\\<!--Display guild header, and links to other guilds --\\\>
          \<zform char="\$(charname)" guild="\$(guild)" guildname="\$(guildname)"\>
            Character: \<zlink base="/SAM/Prop/Ironclaw:Lib:Guilds:Guild/character" char="\$(charname)"\>\$(char)\</zlink\>
            \{? \| \$(guild) \| - Guild:
            \<zlink base="/SAM/Prop/Ironclaw:Lib:Guilds:Guild/popup" char="\$(char)" guild="\$(guildname)"\>\$[Get(Obj("Ironclaw:Guilds:"+\$guildname), "shortname")]\</zlink\>\}
            - View another guild:
            \<select name="viewguild"\>
              \$[/* get a list of all guilds */  
                \$folder = "Ironclaw:Guilds";  
                \$guilds = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");  
                \$output = "";  
                for(\$i=0;\$i\<sizeof(\$guilds);\$i++) \{ 
                  if(Get(Obj("Ironclaw:Guilds:"+\$guilds[\$i]), "shortname")) \{ 
                      \$output += "\<option value=\\""+\$guilds[\$i]+"\\"\>"+Get(Obj("Ironclaw:Guilds:"+\$guilds[\$i]), "shortname")+"\</option\>";  
                  \} 
                \}  
                return \$output;]
            \</select\>
            \<input type="submit" value="Go!" class="submit-button"/\>
            \<action\>
              \<redirect base="/SAM/Prop/Ironclaw:Lib:Guilds:Guild/popup" char="\$(char)" guild="\$(viewguild)"/\>
            \</action\>
          \</zform\>
          \\\<!--Display links to other pages for this guild --\\\>
          \{? \| \$(guild) \|
          \<zform char="\$(charname)" guild="\$(guild)" guildpages="\$(guildpages)" guildname="\$(guildname)"\>
            Jump to page:
            \<select name="viewpage"\>
              \$[/* get a list of all pages for this guild */  
                \$pages = prefixed_map(\$guildpages."*", "page:");  
                \$pages=map_indices(\$pages);  
                \$choices = "";  
                for(\$i=0;\$i\<sizeof(\$pages);\$i++)\{  
                  if(\$guildrank \<= Get(\$guildpages, \$pages[\$i])[0][0]) \{  
                    \$out = \$pages[\$i][5..strlen(\$pages[\$i])-1];  
                    if(\$out == \$page) \{  
                      \$choices += "\<option value=\\""+\$out+"\\" selected\>"+capitalize(\$out)+"\</option\>";  
                    \} else \{  
                      \$choices += "\<option value=\\""+\$out+"\\"\>"+capitalize(\$out)+"\</option\>";  
                    \}  
                  \}  
                \}  
                return \$choices;]
            \</select\>
            \<input type="submit" value="Jump" class="submit-button"/\>
            \<action\>
              \<redirect base="/SAM/Prop/Ironclaw:Lib:Guilds:Guild/popup" char="\$(char)" guild="\$(guildname)" page="\$(viewpage)"/\>
            \</action\>
          \</zform\>
          \}
          \\\<!-- Allow settings for this page to be changed, if in editmode --\\\>
          \{? \| \$[if(\$editmode \&\& \$guildrank \<= 3 \&\& \$guildrank \<= \$info[0][1]) return TRUE; return FALSE;] \|
          \<zform char="\$(char.name)" guild="\$(guild)" guildname="\$(guildname)" page="\$(page)" info="\$(info)" guildrank="\$(guildrank)" guildpages="\$(guildpages)"\>
            This page can be viewed by:
            \<select name="viewedby"\>
            \$[\$content = "";  
if(\$guildrank \<= 1) \{  
  \$content += "\<option value=\\"1\\"";  
  if(\$info[0][0] == 1) \$content += " selected";  
  \$content += "\>only gold members\</option\>";  
\}  
 
if(\$guildrank \<= 2) \{  
  \$content += "\<option value=\\"2\\"";  
  if(\$info[0][0] == 2) \$content += " selected";  
  \$content += "\>gold or silver members\</option\>";  
\}  
\$content += "\<option value=\\"3\\"";  
if(\$info[0][0] == 3) \$content += " selected";  
\$content += "\>gold silver or bronze members\</option\>\<option value=\\"4\\"";  
if(\$info[0][0] == 4) \$content += " selected";  
\$content += "\>guild members\</option\>\<option value=\\"5\\"";  
if(\$info[0][0] == 5) \$content += " selected";  
\$content += "\>allied guilds\</option\>\<option value=\\"6\\"";  
if(\$info[0][0] == 6) \$content += " selected";  
\$content += "\>anyone\</option\>";  
return \$content;]
            \</select\>
            and edited by:
            \<select name="editedby"\>
            \$[\$content = "";  
if(\$guildrank \<= 1) \{  
  \$content += "\<option value=\\"1\\"";  
  if(\$info[0][1] == 1) \$content += " selected";  
  \$content += "\>only gold members\</option\>";  
\}  
if(\$guildrank \<= 2) \{  
  \$content += "\<option value=\\"2\\"";  
  if(\$info[0][1] == 2) \$content += " selected";  
  \$content += "\>gold or silver members\</option\>";  
\}  
\$content += "\<option value=\\"3\\"";  
if(\$info[0][1] == 3) \$content += " selected";  
\$content += "\>gold silver or bronze members\</option\>\<option value=\\"4\\"";  
if(\$info[0][1] == 4) \$content += " selected";  
\$content += "\>guild members\</option\>\<option value=\\"5\\"";  
if(\$info[0][1] == 5) \$content += " selected";  
\$content += "\>allied guilds\</option\>\<option value=\\"6\\"";  
if(\$info[0][1] == 6) \$content += " selected";  
\$content += "\>anyone\</option\>";  
return \$content;]
            \</select\>
            \<input type="submit" value="Set" class="submit-button"/\>
            \<action\>
              \$[if(sizeof(\$info) == 1) \{  
                  \$info = (\{ \});  
                \} else \{  
                  \$info = \$info[1..sizeof(\$info)-1];  
                \}  
                Set(\$guildpages, "page:"+\$page, (\{ (\{ Int(\$viewedby), Int(\$editedby) \}) \}) + \$info);]
              \<redirect base="/SAM/Prop/Ironclaw:Lib:Guilds:Guild/popup" char="\$(char)" guild="\$(guildname)" page="\$(page)" editmode="1"/\>
            \</action\>
          \</zform\>
          \}
          Rank is \$(guildrank)\<break/\>
          \$[/* do any page shuffling, as appropriate */  
/* check we have enough rank to edit this page */  
if(\$guildrank \<= \$info[0][1]) \{  
  if(\$delete) \{  
    /* recalculate a new array */  
    \$delete = Int(\$delete);  
    \$newarr = (\{ \});  
    if(\$delete == 0) \{  
      \$newarr = \$info[1..sizeof(\$info)-1];  
    \} else \{  
      \$newarr += \$info[0..\$delete-1];  
      if(sizeof(\$info) \> \$delete+1)  
        \$newarr += \$info[\$delete+1..sizeof(\$info)-1];  
    \}  
    /* set the changes */  
    \$info = \$newarr;  
    Set(\$guildpages, "page:"+\$page, \$info);  
  \}  
  if(\$moveup) \{  
    /* recalculate a new array */  
    \$moveup = Int(\$moveup);  
    \$newarr = (\{ \});  
    if(\$moveup \> 1) \{  
      \$newarr += \$info[0..\$moveup-2];  
      \$newarr += (\{ \$info[\$moveup] \});  
      \$newarr += (\{ \$info[\$moveup-1] \});  
      if(sizeof(\$info) \> \$moveup+1)  
        \$newarr += \$info[\$moveup+1..sizeof(\$info)-1];  
    \} else \{  
      \$newarr = (\{ \$info[1], \$info[0] \});  
      if(sizeof(\$info) \> 2)  
        \$newarr += \$info[2..sizeof(\$info)-1];  
    \}  
    /* set the changes */  
    \$info = \$newarr;  
    Set(\$guildpages, "page:"+\$page, \$info);  
  \}  
  if(\$movedown) \{  
    /* recalculate a new array */  
    \$movedown = Int(\$movedown);  
    \$newarr = (\{ \});  
    if(\$movedown \> 0) \{  
      \$newarr += \$info[0..\$movedown-1];  
      \$newarr += (\{ \$info[\$movedown+1] \});  
      \$newarr += (\{ \$info[\$movedown] \});  
      if(sizeof(\$info) \> \$movedown+1)  
        \$newarr += \$info[\$movedown+2..sizeof(\$info)-1];  
    \} else \{  
      \$newarr = (\{ \$info[1], \$info[0] \});  
      if(sizeof(\$info) \> 2)  
        \$newarr += \$info[2..sizeof(\$info)-1];  
    \}  
    /* set the changes */  
    \$info = \$newarr;  
    Set(\$guildpages, "page:"+\$page, \$info);  
  \}  
\}]
          \\\<!--check we have enough rank to view this page--\\\>
          \{? \| \$[(\$guildrank \> \$info[0][0])] \|
            \<h1\>Not enough Access\</h1\>\<p\>Sorry, you do not have high enough access to view this page.\</p\>
          \|
          \$[\$counter=1; return nil;]
          \<for var="element" val="\$[\$info[1..sizeof(\$info)-1]]"\>
            \{? \| \$(editmode) \| \$["\<table border=1 width=100%\>\<tr\>\<td\>"] \}
            \{?when\| \$(element.0) \| 1 \|                          \| 2 \|                          \| 3 \|                          \| 4 \|                          \| 5 \|                          \| 6 \| 
                         \| text \|              \$(element.1)
                         \| paragraph \|              \<p\>\$(element.1)\</p\>
                         \| h1 \|              \<h1\>\$(element.1)\</h1\>
                         \| h2 \|              \<h2\>\$(element.1)\</h2\>
                         \| h3 \|              \<h3\>\$(element.1)\</h3\>
                         \| page \|              \<zlink base="/SAM/Prop/Ironclaw:Lib:Guilds:Guild/popup" char="\$(charname)" guild="\$(guildname)" page="\$(element.2)"\>\$(element.1)\</zlink\>\<break/\>
                         \| link \|              \{? \| \$[sscanf(Str(\$element[1]), "%s\|%s", \$url, \$linkname)] \| \<a href="\$(url)"\>\$(linkname)\</a\> \| \<a href="\$(element.1)"\>\$(element.1)\</a\> \}\<break/\>
                         \| image \|              \<img src="\$(element.1)"/\>\<break/\>
                         \| inventory \|              \$[Call(this, "display_guild_inventory", \$guild: \$savedguild)]
                         \| guild_bidding \|              \$[Call(this, "display_guild_bidding")]
                         \| members_list \|              \$(this.xtra:display_members_list)
                         \| npc_notices \|              \$[Call(this, "display_npc_notices")]
                         \| npc_tokens \|              \$(this.xtra:display_npc_tokens) \$[nil; Call(this, "display_npc_tokens")]
                         \| ring_listing \|              \$(this.xtra:display_guild_rings) \$[nil; Call(this, "display_npc_tokens")]
                         \| trading_deals \|           \$[Call(this, "display_trading_deals")]
                         \| trading_notices \|              \$[Call(this, "display_trading_notices")]
                         \| * \|              \$(element.0) - \$[dump_value(\$element)]\<break/\> \}
            \{? \| \$(editmode) \|
              \<div align="right"\>
                \<zlink base="/SAM/Prop/Ironclaw:Lib:Guilds:Guild/edit" char="\$(char)" page="\$(page)" editmode="1" edit="\$(counter)"\>Edit\</zlink\>
                - \<zlink base="/SAM/Prop/Ironclaw:Lib:Guilds:Guild/popup" char="\$(char)" page="\$(page)" editmode="1" delete="\$(counter)"\>Delete\</zlink\>
                \{? \| \$[\$counter \> 1] \| - \<zlink base="/SAM/Prop/Ironclaw:Lib:Guilds:Guild/popup" char="\$(char)" page="\$(page)" editmode="1" moveup="\$(counter)"\>Move Up\</zlink\> \| - Move Up\}
                \{? \| \$[\$counter\<sizeof(\$info)-1] \| - \<zlink base="/SAM/Prop/Ironclaw:Lib:Guilds:Guild/popup" char="\$(char)" page="\$(page)" editmode="1" movedown="\$(counter)"\>Move Down\</zlink\> \| - Move Down \}
              \</div\>
              \$["\</td\>\</tr\>\</table\>"]
            \}
            \$[\$counter++; return nil;]
          \</for\>
\$[string content; content = "";  
if(\$editmode) \{  
  if(\$guildrank \<= \$info[0][1])  
    content += UnSAM(ParseXML("\<div align=\\"right\\"\>[\<ZLINK base=\\"/SAM/Prop/Ironclaw:Lib:Guilds:Guild/edit\\" char=\$(charname) editmode=1 page=\$(page) guild=\$(guildname)\>Add new Textblock\</ZLINK\>]\</div\>"));  
  if(\$guildrank \<= 3)  
    content += UnSAM(ParseXML("\<div align=\\"right\\"\>[\<ZLINK base=\\"/SAM/Prop/Ironclaw:Lib:Guilds:Guild/addpage\\" char=\$(charname) editmode=1 guild=\$(guildname)\>Add new Page\</ZLINK\>]\</div\>"));  
  content += UnSAM(ParseXML("\<div align=\\"right\\"\>\<ZLINK base=\\"/SAM/Prop/Ironclaw:Lib:Guilds:Guild/popup\\" char=\$(charname) page=\$(page) guild=\$(guildname)\>View mode\</ZLINK\>\</div\>"));  
\} else if(\$guild \&\& \$guildrank \<= \$info[0][1]) \{  
  content += UnSAM(ParseXML("\<div align=\\"right\\"\>\<ZLINK base=\\"/SAM/Prop/Ironclaw:Lib:Guilds:Guild/popup\\" char=\$(charname) page=\$(page) guild=\$(guildname) editmode=1\>Edit mode\</ZLINK\>\</div\>"));  
\}  
return content;]
          \}
        \</div\>
        \<span id="bottombox"\>
          \<div id="footer"\>\\\&nbsp;\</div\>
        \</span\>
      \</div\>
   \</body\>
\</html\>
\</z\>
      </Core:Property>
      <Core:Property property="merry:lib:createguild">
         X[M] int counter, i; 
string *guilds; 
object guild; 
 
/* who is creating the guild? */ 
if(!\$creator \&\& \$actor) 
  \$creator = \$actor; 
 
if(!\$guild) 
  return "You need to fill out the name of this guild before I can accept the charter. [hint: use @compose my charter]"; 
\$guild=lower_case(Str(\$guild)); 
 
/* is this name already taken? (either by a player or guild) */ 
if(Obj("Chatters:IC:" + \$guild[0..1] + ":" + \$guild)) 
  return "That name is already taken by a player."; 
 
if(Obj("Ironclaw:Guilds:"+\$guild)) 
  return "That name is already taken by another guild."; 
 
/* create the new guild */ 
catch(Call(\$\{Lib:objects\}, "create_of_type", \$name: "Ironclaw:Guilds:"+\$guild, \$type: "propcontainer")); 
 
\$spawn = Obj("Ironclaw:Guilds:"+\$guild); 

if(!\$spawn) \{ EmitTo(\$actor, "Guild creation failed. " + Str(\$guild)); \} else \{ EmitTo(\$actor, Str(\$spawn)); \}
 
/* set properties in new guild */ 
/* set parent object */ 
\$spawn."core:ur:parent" = \$\{Allegory:Lib:Guilds:UrGuild\}; 
/* set names */ 
if(\$shortname \&\& \$shortname != "") \{ 
  \$spawn.shortname = \$shortname; 
\} else \{ 
  \$spawn.shortname = capitalize(\$guild); 
\} 
 
if(\$fullname \&\& \$fullname != "") \{ 
  \$spawn.fullname = \$fullname; 
\} else \{ 
  \$spawn.fullname = "the Guild of "+\$spawn.shortname; 
\} 
/* set crest */ 
if(\$crest) 
  \$spawn.crest = \$crest; 
 
if(\$manifesto \&\& \$manifesto != "") 
  \$spawn.manifesto = \$manifesto; 
 
/* set the guild pages */ 
 
return \$spawn;
      </Core:Property>
      <Core:Property property="merry:lib:display_guild_bidding">
         X[M] string content, tmp_str;
int i, sz;

/*\$az = \$\{Chatters:IC:az:azrael\};*/
/*\$az = nil;*/

/* don't display if in editmode */
if(\$editmode)
  return "\&lt;GUILD BIDDING MARKET\&gt;";

/* display the goods up for bidding */
\$bidding_object = \$\{Ironclaw:Guilds:Trading:bidding\};

/* display the inventory for this guild */
\$inventory_list = prefixed_map(\$bidding_object."*", "bidding:");
\$inventory_list = map_indices(\$inventory_list);

if(!sizeof(\$inventory_list)) return "\<p\>There is nothing to bid on right now.\</p\>";

if(\$char \&\& \$guild \&\& \$char.guild \&\& \$char.guild == \$guild \&\& (\$guildrank == 1 \|\| \$char."guild:trader"))\{
  content = "Guild kitty: ";
  i = Int(Flt(\$guild.kitty)/100.0);
  if(i==1) \{
    content += "1 denar";
  \} else \{
    content += Str(i)+" denarii";
  \}
  content += "\<br/\>";
\} else \{
  content = "";
\}
content += "\<table border=1 cellspacing=0 cellpadding=10\>\<tr\>\<td\>Item\&nbsp;\&nbsp;\</td\>\<td\>Quantity\&nbsp;\&nbsp;\</td\>\<td\>Notes\&nbsp;\&nbsp;\</td\>\<td\>Recurring\</td\>\<td\>Transport\&nbsp;\&nbsp;\</td\>\<td\>Highest Bid\&nbsp;\&nbsp;\</td\>\<td\>Remaining time\</td\>\</tr\>";
/* for each item in the inventory... */
sz = sizeof(\$inventory_list);

for(i=0;i\<sz;i++) \{
/*  content += dump_value(\$inventory_list[i]);*/
  \$item = Get(\$bidding_object, \$inventory_list[i]);
  /* item */
  content += "\<tr\>\<td\>"+\$item[2]+"\</td\>\<td\>";
  /* quantity */
  content += \$item[0]+"\</td\>\<td\>";
  /* notes */
  content += \$item[3]+"\</td\>\<td\>";
  /* how often does this item recur? */
  if(\$item[5]) \{
    if(\$item[5][1] == -1) \{
      content += "a new shipment";
    \} else if(\$item[5][1] == 1) \{
      content += "1 shipment";
    \} else \{
      content += Str(\$item[5][1])+" shipments, one sent";
    \}
    if(\$item[5][2] == 1) \{
      content += " every day.";
    \} else if(\$item[5][2] != 0) \{
      content += " every "+Str(\$item[5][2])+" days";
    \}
  \} else if (\$item[1].stocktype) \{
    switch(\$item[1].stocktype) \{
      case "property":
        content += "rent due once a week";
        break;
      default:
        content += "Unknown stock type";
        break;
    \}
  \} else \{
    content += "-";
  \}
  content += "\</td\>\<td\>";
  /* what is the mode of transport? */
  if(\$item[5] \&\& \$item[5][0]) \{
    content += \$item[5][0]+"\</td\>\<td\>";
  \} else \{
    content += "-\</td\>\<td\>";
  \}
  /* give bid price, and allow the chance to bid */
  if(\$item[6]) \{
    tmp_str = Str(\$item[6]);
  \} else \{
    tmp_str = "no bid";
  \}
EmitTo(\$az, "1");
/*  content += UnSAM(ParseXML("\<div align=\\"right\\"\>[\<ZLINK base=\\"/SAM/Prop/Ironclaw:Lib:Guilds:Guild/edit\\" char=\$(char) editmode=1 page=\$(page) guild=\$(guildname)\>Add new Textblock\</ZLINK\>]\</div\>"));*/
  if(\$item[7] == \$guild) \{
    tmp_str = "\<font color=\\"red\\"\>"+tmp_str+"\</font\>";
  \} else \{
    tmp_str = "\<font color=\\"blue\\"\>"+tmp_str+"\</font\>";
  \}
  if(\$guild == \$char.guild \&\& (\$guildrank == 1 \|\| \$char."guild:trader")) \{
    \$biditem = \$inventory_list[i];
    tmp_str = "\<ZLINK base=\\"/SAM/Prop/Ironclaw:Lib:Guilds:Guild/bid\\" char=\$(char) item=\$(biditem) guild=\$(guildname) page=\$(page)\>"+tmp_str+"\</ZLINK\>";
  \}
  content += UnSAM(ParseXML(tmp_str))+"\</td\>\<td\>";
  /* display how much time is left to bid on this */
  if(\$item[8]) \{
    \$output = \$item[8] - time();
    if(\$output \>= 0) \{
      /* now work it out in seconds, hours, and days */
      \$days = (\$output/(60*60*24));
      if(\$days == 0) \{
        \$days = nil;
      \} else if(\$days == 1) \{
        \$days = "1 day";
      \} else \{
        \$days = Str(\$days)+" days";
      \}
      \$hours = (\$output/(60*60))%24;
      if(\$hours == 0) \{
        \$hours = nil;
      \} else if(\$hours == 1) \{
        \$hours = "1 hour";
      \} else \{
        \$hours = Str(\$hours)+" hours";
      \}
      \$minutes = (\$output/60)%60;
      if(\$minutes == 0) \{
        \$minutes = nil;
      \} else if(\$minutes == 1) \{
        \$minutes = "1 minute";
      \} else \{
        \$minutes = Str(\$minutes)+" minutes";
      \}
      \$seconds = \$output%60;
      if(\$seconds == 1) \{
        \$seconds = "1 second";
      \} else \{
        \$seconds = Str(\$seconds)+" seconds";
      \}

      if(\$days \&\& \$hours) \{
        \$output = \$days+", "+\$hours;
      \} else if(\$days) \{
        \$output = \$days;
      \} else if (\$hours) \{
        \$output = \$hours+", "+\$minutes;
      \} else if (\$minutes) \{
        \$output = \$minutes+", "+\$seconds;
      \} else \{
        \$output = \$seconds;
      \}

      /*content += \$output+" (estimate)\</td\>\</tr\>";*/
      
      \$output = \$item[8] - time();

    if((\$output/(60*60*24)) \>= 3) \{
     \$output = Str(\$days)+" remaining.";
    
    \} else if(((\$output+60*60*3)/(60*60*24)) \>= 1) \{
     \$output = "less than three days remaining.";    
    \} else \{
     \$output = "less than a day remaining."; 
    \}
    content += \$output+"\</td\>\</tr\>";
      
      
      
    \} else \{
      content += "UNKNOWN\</td\>\</tr\>";
    \}
  \} else \{
    content += "-\</td\>\</tr\>";
  \}
  if(i\<sz-1) content += "\<br/\>";
\}
content += "\</table\>";
return content;
      </Core:Property>
      <Core:Property property="merry:lib:display_guild_inventory">
         X[M] string content, *items;
object inventory, item;
int i, sz;
\$az = \$\{Chatters:AE:az:azrael\};

\$guild = \$actor.guild;
/* don't display if in editmode */
if(\$editmode)
  return "\&lt;GUILD INVENTORY\&gt;";

if(!\$guild.inventory)\{
  catch(Call(\$\{Lib:objects\}, "create_of_type", \$name: "Ironclaw:Guilds:Inventories:"+name(\$guild)[16..strlen(name(\$guild))-1], \$type: "propcontainer"));
  \$guild.inventory = Obj("Ironclaw:Guilds:Inventories:"+name(\$guild)[16..strlen(name(\$guild))-1]);
\}

inventory = \$guild.inventory;

/*if(\$guildrank == 1 \|\| \$char."guild:trader"*/

/* were we asked to dump stock? */
if(\$dump_stock \&\& \$char.guild \&\& \$char.guild == \$guild \&\& (\$guildrank == 1 \|\| \$char."guild:trader")) \{
  if(Get(inventory, \$dump_stock)) \{
    Set(inventory, \$dump_stock, nil);
    Set(inventory, "settings:"+\$dump_stock+":properties", nil);
  \}
\}

/* display the inventory for this guild */
items = map_indices(prefixed_map(inventory."*", "tradingitem:"));

if(!sizeof(items) \&\& !(\$char.guild \&\& \$char.guild == \$guild \&\& (\$guildrank == 1 \|\| \$char."guild:trader"))) return "\<p\>The warehouses are currently empty.\</p\>";

content = "\<p\>";
/* were we asked to spawn an item? */
if(\$inventory_item_taking \&\& \$char.guild \&\& \$char.guild == \$guild \&\& (\$guildrank == 1 \|\| \$char."guild:trader")) \{
  if(sizeof(items) \> Int(\$inventory_item_taking)) \{
    if(Get(inventory, items[Int(\$inventory_item_taking)])[1] == Int(\$inventory_item_size)-1 \&\& (Int(\$inventory_item_size)-1 \> 0 \|\| Int(\$inventory_item_size)-1 == -1)) \{
      content += "\<font color=red\>"+Get(inventory, items[Int(\$inventory_item_taking)])[0]+" spawned in your inventory.\</font\>\<br/\>";
      /* create the item */
      item = Spawn(Get(inventory, items[Int(\$inventory_item_taking)])[2]);
      item."base:environment" = \$char;
      /* set quality */
      \$result = ironclaw::roll(\$roller: \$actor, \$skills: (\{"social:trading"\}), \$bonus: (\{ "trait:mind" \}));

      if(\$result \> 12) \{
          \$result = ironclaw::roll(\$roller: \$actor, \$skills: (\{"social:trading"\}), \$bonus: (\{ "trait:mind" \}));
          if(\$result \< 12) \$result = 12;
      \}

      \$result = \$result / 2;

      if(\$result \< 1) \$result = 1;

      item."trait:quality" = \$result;
      /* 
      i=random(4)+random(4)+random(4)+random(4);
      if(i\>8) i=random(4)+random(4)+random(4)+random(4);
      if(i\<1) i=1;
      item."trait:quality" = i; 
      */

      /* set properties */
      item.guild = \$guild;
      if(Get(inventory, "settings:"+items[Int(\$inventory_item_taking)]+":properties")) \{
        sz = sizeof(Get(inventory, "settings:"+items[Int(\$inventory_item_taking)]+":properties"));
        for(i=0;i\<sz-1;i=i+2) \{
          if(Get(inventory, "settings:"+items[Int(\$inventory_item_taking)]+":properties")[i] == "trait:quantity" \|\| Get(inventory, "settings:"+items[Int(\$inventory_item_taking)]+":properties")[i] == "trait:quality") \{
              Set(item, Get(inventory, "settings:"+items[Int(\$inventory_item_taking)]+":properties")[i], Int(Get(inventory, "settings:"+items[Int(\$inventory_item_taking)]+":properties")[i+1]));
          \} else \{
              Set(item, Get(inventory, "settings:"+items[Int(\$inventory_item_taking)]+":properties")[i], Get(inventory, "settings:"+items[Int(\$inventory_item_taking)]+":properties")[i+1]);
          \}
        \}
      \}
      /* reduce number in inventory */
      if(Int(\$inventory_item_size)-1 \> 0) \{
        Get(inventory, items[Int(\$inventory_item_taking)])[1]--;
      \}
    \}
  \}
\}
/* were we asked to spawn a guild ring? */
if(\$take_silver_ring \&\& \$char.guild \&\& \$char.guild == \$guild \&\& \$guildrank == 1) \{
  item = Spawn(\$\{IronClaw:Props:Guilds:GuildRing\});
  item."base:environment" = \$char;
  /* set properties */
  if(!\$guild.ringlist) \$guild.ringlist = (\{ \});
  \$guild.ringlist += (\{ item \});
  item.guild = \$guild;
  item."guild:officer" = TRUE;
  item."guild:rank" = 2;
  item."trait:material" = "silver";
  content += "\<font color=red\>Silver Guild Ring spawned in your inventory.\</font\>\<br/\>";
\}
if(\$take_bronze_ring \&\& \$char.guild \&\& \$char.guild == \$guild \&\& \$guildrank == 1) \{
  item = Spawn(\$\{IronClaw:Props:Guilds:GuildRing\});
  item."base:environment" = \$char;
  /* set properties */
  if(!\$guild.ringlist) \$guild.ringlist = (\{ \});
  \$guild.ringlist += (\{ item \});
  item.guild = \$guild;
  item."guild:officer" = TRUE;
  item."guild:rank" = 3;
  item."trait:material" = "bronze";
  content += "\<font color=red\>Bronze Guild Ring spawned in your inventory.\</font\>\<br/\>";
\}
/* were we asked to spawn a guild pin? */
if(\$guild.cloak \&\& \$take_guild_cloak \&\& \$char.guild \&\& \$char.guild == \$guild \&\& \$guildrank \<= 2) \{
  item = Spawn(\$guild.cloak);
  item."base:environment" = \$char;
  item.guild = \$guild;
  content += "\<font color=red\>Guild Pin spawned in your inventory.\</font\>\<br/\>";
\}


content += "\<table border=0 cellspacing=5\>\<tr\>\<td\>Quantity\</td\>\<td\>Item\</td\>\<td\>Notes";
if(\$char.guild \&\& \$char.guild == \$guild \&\& (\$guildrank == 1 \|\| \$char."guild:trader")) \{
  content += "\</td\>\<td width=100\>Take Item";
  content += "\</td\>\<td width=110\>Dump Stock";
\}
content += "\</td\>\</tr\>";
/* offer the guild rings to the guild leader */
if(\$char.guild \&\& \$char.guild == \$guild \&\& \$guildrank == 1) \{
  content += "\<tr\>\<td\>unlimited\</td\>\<td\>silver guild ring\</td\>\<td\>Used for administering the guild\</td\>\<td\>";
  content += UnSAM(ParseXML("[\<ZLINK base=\\"/SAM/Prop/Ironclaw:Lib:Guilds:Guild/popup\\" char=\$(char) page=\$(page) take_silver_ring=1\>take item\</ZLINK\>]"));
  content += "\&nbsp;\</td\>\<td\>\</td\>\</tr\>";
  content += "\<tr\>\<td\>unlimited\</td\>\<td\>bronze guild ring\</td\>\<td\>and recruiting new members\</td\>\<td\>";
  content += UnSAM(ParseXML("[\<ZLINK base=\\"/SAM/Prop/Ironclaw:Lib:Guilds:Guild/popup\\" char=\$(char) page=\$(page) take_bronze_ring=1\>take item\</ZLINK\>]"));
  content += "\&nbsp;\</td\>\<td\>\</td\>\</tr\>";
\}
/* offer pins to gold and silver members */
if(\$guild.cloak \&\& \$char.guild \&\& \$char.guild == \$guild \&\& \$guildrank \<= 2) \{
  content += "\<tr\>\<td\>unlimited\</td\>\<td\>guild pin\</td\>\<td\>Wear your crest proudly!\</td\>\<td\>";
  content += UnSAM(ParseXML("[\<ZLINK base=\\"/SAM/Prop/Ironclaw:Lib:Guilds:Guild/popup\\" char=\$(char) page=\$(page) take_guild_cloak=1\>take item\</ZLINK\>]"));
  content += "\&nbsp;\</td\>\<td\>\</td\>\</tr\>";
\}
/* for each item in the inventory... */
sz = sizeof(items);
for(i=0;i\<sz;i++) \{
  content += "\<tr\>\<td\>";
  if(Get(inventory, items[i])[1] == -1) \{
    content += "unlimited";
  \} else \{
    content += Str(Get(inventory, items[i])[1]);
  \}
  content += "\</td\>\<td\>"+Get(inventory, items[i])[0]+"\</td\>\<td\>";
  content += "\&nbsp;";
  if(\$char.guild \&\& \$char.guild == \$guild \&\& (\$guildrank == 1 \|\| \$char."guild:trader")) \{
    content += "\</td\>\<td\>"+UnSAM(ParseXML("[\<ZLINK base=\\"/SAM/Prop/Ironclaw:Lib:Guilds:Guild/popup\\" char=\$(char) page=\$(page) inventory_item_taking="+Str(i)+" inventory_item_size="+Str(Get(inventory, items[i])[1]+1)+"\>take item\</ZLINK\>]"));
    content += "\</td\>\<td\>"+UnSAM(ParseXML("[\<ZLINK base=\\"/SAM/Prop/Ironclaw:Lib:Guilds:Guild/popup\\" char=\$(char) page=\$(page) dump_stock="+items[i]+"\>dump stock\</ZLINK\>]"));
  \}
  content += "\</td\>\</tr\>";
\}
content += "\</table\>";
content += "\</p\>";
return content;
      </Core:Property>
      <Core:Property property="merry:lib:display_members_list">
         X[M] /* display a list of members in this guild */ 
string content, tmp_str; 
object *members, *displaylist; 
int i, sz; 

/* don't display if we are in editmode */ 
if(\$editmode) return "\&lt;MEMBERS LIST\&gt;"; 
 
/* display a dropdown asking how active the members must be */ 
if(!\$activetime) \$activetime = "week"; 
content = "Display members active in the last week\<br/\>"; 
 
switch(\$activetime)\{ 
  case "start": 
    \$activetime = nil; 
    break; 
  default: 
    \$activetime = time() - (60*60*24*7); 
    break; 
\} 
 
displaylist = (\{ \}); 
\$guild.members -= (\{ nil \}); 
members = \$guild.members; 
sz = sizeof(members); 
for(i=0;i\<sz;i++) \{ 
  /* check if this member is active enough to be displayed */ 

  if(\$activetime) \{ 
    if(members[i]."cdat:lastlogin" \&\& members[i]."cdat:lastlogin" \> \$activetime) 
      displaylist += (\{ members[i] \}); 
  \} else \{ 
    displaylist += (\{ members[i] \}); 
  \} 
\} 
 
if(sizeof(displaylist) == 0) \{ 
  content += "\<p\>No members were active over this time period.\</p\>"; 
  return content; 
\} 
 
 
content += "\<p\>"; 
content += "\<table\>\<tr\>\<td\>Name\</td\>\<td\>Position\</td\>\<td\>Notes\</td\>"; 
if(\$guildrank \<= 1) content += "\<td\>Trader\</td\>"; 
if(\$guildrank \<= 2) content += "\<td\>Bluebooked Job\</td\>"; 
content += "\</tr\>"; 
sz = sizeof(displaylist); 
for(i=0;i\<sz;i++) \{ 
  content += "\<tr\>\<td\>"+capitalize(displaylist[i]."skotos:charname")+"\</td\>"; 
  if(displaylist[i]."guild:position") \{ 
    content += "\<td\>"+displaylist[i]."guild:position"+"\</td\>"; 
  \} else \{ 
    content += "\<td\>-\</td\>"; 
  \} 
  if(displaylist[i]."guild:notes") \{ 
    content += "\<td\>"+displaylist[i]."guild:notes"+"\</td\>"; 
  \} else \{ 
    content += "\<td\>-\</td\>"; 
  \} 
  if(\$guildrank \<= 1) content += "\<td\>No\</td\>"; 
  if(\$guildrank \<= 2)\{ 
    content += "\<td\>"+UnSAM(ParseXML(this."xtra:display_members_list_working"))+"\</td\>"; 
  \} 
  content += "\</tr\>"; 
\} 
content += "\</table\>\</p\>"; 
 
 
return content; 
 
/* ------------------------------------------------------------------------ */ 
 
/* display the goods up for bidding */ 
\$bidding_object = \$\{Ironclaw:Guilds:Trading:bidding\}; 
 
/* display the inventory for this guild */ 
\$inventory_list = prefixed_map(\$bidding_object."*", "bidding:"); 
\$inventory_list = map_indices(\$inventory_list); 
 
if(!sizeof(\$inventory_list)) return "\<p\>There is nothing to bid on right now.\</p\>"; 
 
content = "\<table border=1 cellspacing=0 cellpadding=10\>\<tr\>\<td\>Item\&nbsp;\&nbsp;\</td\>\<td\>Quantity\&nbsp;\&nbsp;\</td\>\<td\>Notes\&nbsp;\&nbsp;\</td\>\<td\>Recurring\</td\>\<td\>Transport\&nbsp;\&nbsp;\</td\>\<td\>Highest Bid\&nbsp;\&nbsp;\</td\>\<td\>Remaining time\</td\>\</tr\>"; 
/* for each item in the inventory... */ 
sz = sizeof(\$inventory_list); 
for(i=0;i\<sz;i++) \{ 
/*  content += dump_value(\$inventory_list[i]);*/ 
  \$item = Get(\$bidding_object, \$inventory_list[i]); 
  /* item */ 
  content += "\<tr\>\<td\>"+\$item[2]+"\</td\>\<td\>"; 
  /* quantity */ 
  content += \$item[0]+"\</td\>\<td\>"; 
  /* notes */ 
  content += \$item[3]+"\</td\>\<td\>"; 
  /* how often does this item recur? */ 
  if(\$item[5][1] == -1) \{ 
    content += "a new shipment"; 
  \} else if(\$item[5][1] == 1) \{ 
    content += "1 shipment"; 
  \} else \{ 
    content += Str(\$item[5][1])+" shipments, one sent"; 
  \} 
  if(\$item[5][2] == 1) \{ 
    content += " every day."; 
  \} else if(\$item[5][2] != 0) \{ 
    content += " every "+Str(\$item[5][2])+" days"; 
  \} 
  content += "\</td\>\<td\>"; 
  /* what is the mode of transport? */ 
  content += \$item[5][0]+"\</td\>\<td\>"; 
  /* give bid price, and allow the chance to bid */ 
  if(\$item[6]) \{ 
    tmp_str = Str(\$item[6]); 
  \} else \{ 
    tmp_str = "no bid"; 
  \} 
/*  content += UnSAM(ParseXML("\<div align=\\"right\\"\>[\<ZLINK base=\\"/SAM/Prop/Ironclaw:Lib:Guilds:Guild/edit\\" char=\$(char) editmode=1 page=\$(page) guild=\$(guildname)\>Add new Textblock\</ZLINK\>]\</div\>"));*/ 
  if(\$item[7] == \$guild) \{ 
    tmp_str = "\<font color=\\"red\\"\>"+tmp_str+"\</font\>"; 
  \} else \{ 
    tmp_str = "\<font color=\\"blue\\"\>"+tmp_str+"\</font\>"; 
  \} 
  if(\$guild = \$actor.guild) \{ 
    \$biditem = \$inventory_list[i]; 
    tmp_str = "\<ZLINK base=\\"/SAM/Prop/Ironclaw:Lib:Guilds:Guild/bid\\" char=\$(char) item=\$(biditem) guild=\$(guildname) page=\$(page)\>"+tmp_str+"\</ZLINK\>"; 
  \} 
  content += UnSAM(ParseXML(tmp_str))+"\</td\>\<td\>"; 
  /* display how much time is left to bid on this */ 
  if(\$item[8]) \{ 
    \$output = \$item[8] - time(); 
    /* now work it out in seconds, hours, and days */ 
    \$days = (\$output/(60*60*24)); 
    if(\$days == 0) \{ 
      \$days = nil; 
    \} else if(\$days == 1) \{ 
      \$days = "1 day"; 
    \} else \{ 
      \$days = Str(\$days)+" days"; 
    \} 
    \$hours = (\$output/(60*60))%24; 
    if(\$hours == 0) \{ 
      \$hours = nil; 
    \} else if(\$hours == 1) \{ 
      \$hours = "1 hour"; 
    \} else \{ 
      \$hours = Str(\$hours)+" hours"; 
    \} 
    \$minutes = (\$output/60)%60; 
    if(\$minutes == 0) \{ 
      \$minutes = nil; 
    \} else if(\$minutes == 1) \{ 
      \$minutes = "1 minute"; 
    \} else \{ 
      \$minutes = Str(\$minutes)+" minutes"; 
    \} 
    \$seconds = \$output%60; 
    if(\$seconds == 1) \{ 
      \$seconds = "1 second"; 
    \} else \{ 
      \$seconds = Str(\$seconds)+" seconds"; 
    \} 
 
    if(\$days) \{ 
      \$output = \$days+", "+\$hours; 
    \} else if (\$hours) \{ 
      \$output = \$hours+", "+\$minutes; 
    \} else if (\$minutes) \{ 
      \$output = \$minutes+", "+\$seconds; 
    \} else \{ 
      \$output = \$seconds; 
    \} 
 
    content += \$output+"\</td\>\</tr\>"; 
  \} else \{ 
    content += "-\</td\>\</tr\>"; 
  \} 
  if(i\<sz-1) content += "\<br/\>"; 
\} 
content += "\</table\>"; 
return content;
      </Core:Property>
      <Core:Property property="merry:lib:display_npc_notices">
         X[M] string content, *notices; 
int i, sz; 
 
/* don't display if in editmode */ 
if(\$editmode) 
  return "\&lt;NPC NOTICES\&gt;"; 
 
/* display the notices for the npcs */ 
if(!\$guild."npc:notes" \|\| !sizeof(\$guild."npc:notes")) 
  return ""; 
 
 
content = "\<p\>"; 
 
/* are we deleting a npc notice? */ 
if(\$delete_npc_notice \&\& \$guild."npc:notes" \&\& sizeof(\$guild."npc:notes") == Int(\$npc_notice_size)) \{ 
  if(\$char \&\& \$guild \&\& \$char.guild \&\& \$char.guild == \$guild \&\& \$guildrank \<= 2)\{ 
    \$guild."npc:notes"[Int(\$delete_npc_notice)] = nil; 
    \$guild."npc:notes" -= (\{ nil \}); 
  \} 
\} 
 
notices = \$guild."npc:notes"; 
sz = sizeof(notices); 
for(i=0;i\<sz;i++) \{ 
  content += notices[i]; 
  /* if they are an officer, allow them to delete this */ 
  if(\$char \&\& \$guild \&\& \$char.guild \&\& \$char.guild == \$guild \&\& \$guildrank \<= 2)\{ 
    content += UnSAM(ParseXML(" [\<ZLINK base=\\"/SAM/Prop/Ironclaw:Lib:Guilds:Guild/popup\\" char=\$(char) page=\$(page) delete_npc_notice="+Str(i)+" npc_notice_size="+Str(sizeof(notices))+"\>Delete\</ZLINK\>]")); 
  \} 
  content += "\<br/\>"; 
\} 
content += "\</p\>"; 
return content;
      </Core:Property>
      <Core:Property property="merry:lib:display_npc_tokens">
         X[M] string content, sam, *topics, topic, category; 
object item; 
int i, sz, cost; 
 
/* redundant code */ 
return TRUE; 
 
/* don't display if in editmode */ 
if(\$editmode) 
  return "\&lt;NPC TOKEN LISTING\&gt;"; 
 
/* display the inventory for this guild */ 
\$token_list = prefixed_map(\$guild."*", "tokens:"); 
\$token_list = map_indices(\$token_list); 
 
if(!sizeof(\$token_list)) return "\<p\>No NPC Tokens.\</p\>"; 
 
content = "\<p\>"; 
 
/* were we asked to spawn a teacher? */ 
if(\$hire_teacher \&\& !\$guild."npc:teacher" \&\& \$guildrank \<= 2) \{ 
  content += "\<font color=red\>This code is not yet functional.\</font\>\<br/\>"; 
  if(!\$char."base:environment") \{ 
    content += "\<font color=red\>"+Describe(NewNRef(\$char, "default"))+" is not currently logged into the game.\</font\>\<br/\>"; 
  \} else \{ 
    item = Spawn(\$\{Ironclaw:NPCs:Teachers:GuildNPCTeacher\}); 
    item."base:environment" = \$char."base:environment"; 
    /* set properties */ 
    item.guild = \$guild; 
    \$guild."npc:teacher" = item; 
    EmitIn(\$char."base:environment", Describe(item)+" arrives."); 
    content += "\<font color=red\>A teacher has been hired, and is standing beside you.\</font\>\<br/\>"; 
  \} 
\} 
 
content += "\<table border=0 cellspacing=0\>\<tr\>\<td\>Token\&nbsp;\&nbsp;\</td\>\<td\>Quantity\</td\>"; 
if(\$guildrank \<= 2) content += "\<td\>\&nbsp;\</td\>"; 
content += "\</tr\>"; 
 
/* list teaching tokens */ 
if(member("tokens:teacher", \$token_list)) \{ 
  content += "\<tr\>\<td\>Teacher\</td\>\<td\>"+Str(\$guild."tokens:teacher"); 
  if(\$guildrank \<= 2) \{ 
    content += "\</td\>\<td\>"; 
    if(!\$guild."npc:teacher") \{ 
      if(\$guild."tokens:teacher" \>= 2) \{ 
        content += UnSAM(ParseXML("[\<ZLINK base=\\"/SAM/Prop/Ironclaw:Lib:Guilds:Guild/popup\\" char=\$(char) page=\$(page) hire_teacher=1\>Hire Teacher\</ZLINK\>] (20 tokens)")); 
      \} else \{ 
        content += "[Hire Teacher] (20 tokens)"; 
      \} 
    \} else \{ 
      topics = (\{ "career:armorsmith", "career:healer" \}); 
      if(\$guild."npc:teacher"."teaching:skills")\{ 
        topics -= \$guild."npc:teacher"."teaching:skills"; 
      \} 
      sam = ""; 
      for(i=0;i\<sizeof(topics);i++)\{ 
        sscanf(topics[i], "%s:%s", category, topic); 
        sam += "("+category+":"+topic+" - "+topic+") "; 
      \} 
      sam += "\{test one\|test two\|test three\}"; 
      cost = sizeof(Arr(\$guild."npc:teacher"."teaching:skills"))*20; 
      content += "[Add a new topic for guild teacher ("+Str(cost)+" tokens) "+sam+"]"; 
    \} 
  \} 
  content += "\</td\>\</tr\>"; 
\} 
 
/* remove tokens we've already dealt with */ 
\$token_list -= (\{ "tokens:teacher" \}); 
 
/* for each token in the list... */ 
sz = sizeof(\$token_list); 
for(i=0;i\<sz;i++) \{ 
/*  content += dump_value(\$inventory_list[i]);*/ 
  \$quantity = Get(\$guild, \$token_list[i]); 
  content += "\<tr\>\<td\>"+capitalize(\$token_list[i][7..strlen(\$token_list[i])-1])+"\</td\>\<td\>"+\$quantity+"\</td\>\</tr\>"; 
  if(i\<sz-1) content += "\<br/\>"; 
\} 
content += "\</table\>"; 
content += "\</p\>"; 
return content;
      </Core:Property>
      <Core:Property property="merry:lib:display_trading_deals">
         X[M] string content, tmp_str; 
int i, sz, t, day; 
 
/* don't display if in editmode */ 
if(\$editmode) 
  return "\&lt;CURRENT TRADING DEALS LIST\&gt;"; 
 
/* display the current trading deals */ 
\$trading_object = \$guild.trades; 
 
if(!\$trading_object) return "\<p\>No trading deals.\</p\>"; 
 
content = "\<table border=1 cellspacing=0 cellpadding=10\>\<tr\>\<td\>Guild\&nbsp;\&nbsp;\</td\>\<td\>Giving\&nbsp;\&nbsp;\</td\>\<td\>Receiving\&nbsp;\&nbsp;\</td\>\<td\>Notes\&nbsp;\&nbsp;\</td\>\<td\>Recurring\&nbsp;\&nbsp;\</td\>\<td\>When\&nbsp;\&nbsp;\</td\>\</tr\>"; 
 
/* display the deals from guild bidding */ 
\$trading_list = map_indices(prefixed_map(\$trading_object."*", "bidding:")); 
sz = sizeof(\$trading_list); 
if(!sz) 
  return "\<p\>No trading deals.\</p\>"; 
for(i=0;i\<sz;i++) \{ 
  \$item = Get(\$trading_object, \$trading_list[i]); 
  content += "\<tr\>\<td\>Auction\</td\>\<td\>"; 
  if(\$item[6] == 1) \{ 
    content += Str(\$item[6])+" denar\</td\>\<td\>"; 
  \} else \{ 
    content += Str(\$item[6])+" denarii\</td\>\<td\>"; 
  \} 
  content += Str(\$item[0])+" "+Str(\$item[2])+"\</td\>\<td\>"; 
  content += Str(\$item[3])+"\</td\>\<td\>"; 
 
  /* how many/often do the shipments arrive? */ 
  if(\$item[5]) \{ 
    if(\$item[5][1] == -1) \{ 
      content += "a new shipment"; 
    \} else if(\$item[5][1] == 1) \{ 
      content += "1 shipment"; 
    \} else \{ 
      content += Str(\$item[5][1])+" shipments, one sent"; 
    \} 
    if(\$item[5][2] == 1) \{ 
      content += " every day."; 
    \} else if(\$item[5][2] != 0) \{ 
      content += " every "+Str(\$item[5][2])+" days"; 
    \} 
  \} else if (\$item[1].stocktype) \{ 
    switch(\$item[1].stocktype) \{ 
      case "property": 
        content += "rent due once a week"; 
        break; 
      default: 
        content += "Unknown stock type"; 
        break; 
    \} 
  \} else \{ 
    content += "-"; 
  \} 
  content += "\</td\>\<td\>"; 
 
 
  /* calculate when the deal will next happen */ 
 
  /* FOR DEBUGGING - IF THERE IS NO TIME SET */ 
  if(!\$item[8]) \$item[8] = time(); 
 
  t = \$item[8]-time(); 
  day = (24*60*60); 
  if(t \< day) \{ 
    /* less than a day */ 
    content += "Today"; 
  \} else if(t \< day*2) \{ 
    /* one day to go */ 
    content += "1 day"; 
  \} else \{ 
    /* list the days */ 
    content += Str(Int(t/day))+" days"; 
  \} 
  content += "\</td\>\</tr\>"; 
\} 
 
/* display the deals between guilds */ 
 
content += "\</table\>"; 
 
return content; 
 
if(!sizeof(\$inventory_list)) return "\<p\>There is nothing to bid on right now.\</p\>"; 
 
/* for each item in the inventory... */ 
sz = sizeof(\$inventory_list); 
for(i=0;i\<sz;i++) \{ 
/*  content += dump_value(\$inventory_list[i]);*/ 
  \$item = Get(\$bidding_object, \$inventory_list[i]); 
  /* item */ 
  content += "\<tr\>\<td\>"+\$item[2]+"\</td\>\<td\>"; 
  /* quantity */ 
  content += \$item[0]+"\</td\>\<td\>"; 
  /* notes */ 
  content += \$item[3]+"\</td\>\<td\>"; 
  /* how often does this item recur? */ 
  if(\$item[5]) \{ 
    if(\$item[5][1] == -1) \{ 
      content += "a new shipment"; 
    \} else if(\$item[5][1] == 1) \{ 
      content += "1 shipment"; 
    \} else \{ 
      content += Str(\$item[5][1])+" shipments, one sent"; 
    \} 
    if(\$item[5][2] == 1) \{ 
      content += " every day."; 
    \} else if(\$item[5][2] != 0) \{ 
      content += " every "+Str(\$item[5][2])+" days"; 
    \} 
  \} else if (\$item[1].stocktype) \{ 
    switch(\$item[1].stocktype) \{ 
      case "property": 
        content += "rent due once a week"; 
        break; 
      default: 
        content += "Unknown stock type"; 
        break; 
    \} 
  \} else \{ 
    content += "-"; 
  \} 
  content += "\</td\>\<td\>"; 
  /* what is the mode of transport? */ 
  if(\$item[5] \&\& \$item[5][0]) \{ 
    content += \$item[5][0]+"\</td\>\<td\>"; 
  \} else \{ 
    content += "-\</td\>\<td\>"; 
  \} 
  /* give bid price, and allow the chance to bid */ 
  if(\$item[6]) \{ 
    tmp_str = Str(\$item[6]); 
  \} else \{ 
    tmp_str = "no bid"; 
  \} 
/*  content += UnSAM(ParseXML("\<div align=\\"right\\"\>[\<ZLINK base=\\"/SAM/Prop/Ironclaw:Lib:Guilds:Guild/edit\\" char=\$(char) editmode=1 page=\$(page) guild=\$(guildname)\>Add new Textblock\</ZLINK\>]\</div\>"));*/ 
  if(\$item[7] == \$guild) \{ 
    tmp_str = "\<font color=\\"red\\"\>"+tmp_str+"\</font\>"; 
  \} else \{ 
    tmp_str = "\<font color=\\"blue\\"\>"+tmp_str+"\</font\>"; 
  \} 
  if(\$guild = \$actor.guild) \{ 
    \$biditem = \$inventory_list[i]; 
    tmp_str = "\<ZLINK base=\\"/SAM/Prop/Ironclaw:Lib:Guilds:Guild/bid\\" char=\$(char) item=\$(biditem) guild=\$(guildname) page=\$(page)\>"+tmp_str+"\</ZLINK\>"; 
  \} 
  content += UnSAM(ParseXML(tmp_str))+"\</td\>\<td\>"; 
  /* display how much time is left to bid on this */ 
  if(\$item[8]) \{ 
    \$output = \$item[8] - time(); 
    if(\$output \>= 0) \{ 
      /* now work it out in seconds, hours, and days */ 
      \$days = (\$output/(60*60*24)); 
      if(\$days == 0) \{ 
        \$days = nil; 
      \} else if(\$days == 1) \{ 
        \$days = "1 day"; 
      \} else \{ 
        \$days = Str(\$days)+" days"; 
      \} 
      \$hours = (\$output/(60*60))%24; 
      if(\$hours == 0) \{ 
        \$hours = nil; 
      \} else if(\$hours == 1) \{ 
        \$hours = "1 hour"; 
      \} else \{ 
        \$hours = Str(\$hours)+" hours"; 
      \} 
      \$minutes = (\$output/60)%60; 
      if(\$minutes == 0) \{ 
        \$minutes = nil; 
      \} else if(\$minutes == 1) \{ 
        \$minutes = "1 minute"; 
      \} else \{ 
        \$minutes = Str(\$minutes)+" minutes"; 
      \} 
      \$seconds = \$output%60; 
      if(\$seconds == 1) \{ 
        \$seconds = "1 second"; 
      \} else \{ 
        \$seconds = Str(\$seconds)+" seconds"; 
      \} 
 
      if(\$days) \{ 
        \$output = \$days+", "+\$hours; 
      \} else if (\$hours) \{ 
        \$output = \$hours+", "+\$minutes; 
      \} else if (\$minutes) \{ 
        \$output = \$minutes+", "+\$seconds; 
      \} else \{ 
        \$output = \$seconds; 
      \} 
 
      content += \$output+"\</td\>\</tr\>"; 
    \} else \{ 
      content += "EXPIRED\</td\>\</tr\>"; 
    \} 
  \} else \{ 
    content += "-\</td\>\</tr\>"; 
  \} 
  if(i\<sz-1) content += "\<br/\>"; 
\} 
content += "\</table\>"; 
return content;
      </Core:Property>
      <Core:Property property="merry:lib:display_trading_notices">
         X[M] string content, *notices; 
int i, sz; 
 
/* don't display if in editmode */ 
if(\$editmode) 
  return "\&lt;GUILD TRADING NOTICES\&gt;"; 
 
/* display the notices for this guild */ 
if(!\$guild.trades \|\| !\$guild.trades."trading:notes" \|\| !sizeof(\$guild.trades."trading:notes")) 
  return ""; 
 
 
content = "\<p\>"; 
 
/* are we deleting a trading notice? */ 
if(\$delete_trading_notice \&\& \$guild.trades."trading:notes" \&\& sizeof(\$guild.trades."trading:notes") == Int(\$trading_notice_size)) \{ 
  if(\$char \&\& \$guild \&\& \$char.guild \&\& \$char.guild == \$guild \&\& (\$guildrank == 1 \|\| \$char."guild:trader"))\{ 
    \$guild.trades."trading:notes"[Int(\$delete_trading_notice)] = nil; 
    \$guild.trades."trading:notes" -= (\{ nil \}); 
  \} 
\} 
 
notices = \$guild.trades."trading:notes"; 
sz = sizeof(notices); 
for(i=0;i\<sz;i++) \{ 
  content += notices[i]; 
  /* if they are a trader, allow them to delete this */ 
  if(\$char \&\& \$guild \&\& \$char.guild \&\& \$char.guild == \$guild \&\& (\$guildrank == 1 \|\| \$char."guild:trader"))\{ 
    content += UnSAM(ParseXML(" [\<ZLINK base=\\"/SAM/Prop/Ironclaw:Lib:Guilds:Guild/popup\\" char=\$(char) page=\$(page) delete_trading_notice="+Str(i)+" trading_notice_size="+Str(sizeof(notices))+"\>Delete\</ZLINK\>]")); 
  \} 
  content += "\<br/\>"; 
\} 
content += "\</p\>"; 
return content;
      </Core:Property>
      <Core:Property property="merry:lib:end_bid">
         X[M] /* finalize the bidding */ 
 
\$az = nil /* defunct */; /* defunct */; 
EmitTo(\$az, "Bidding over"); 
EmitTo(\$az, "Item is: "+dump_value(\$item)); 
 
/* get details for this bidding */ 
\$details = Get(\$\{Ironclaw:Guilds:Trading:bidding\}, \$item); 
/* if this item doesn't exist, exit */ 
if(!\$details) 
  return FALSE; 
 
/* check that the winning guild exists, and has the money */ 
if(!\$details[7]) \{ 
  /* guild doesn't exist */ 
  Call(\$this, "end_bid_reset", \$item: \$item); 
  return TRUE; 
\} 
 
/* add the item to the guild trading deals */ 
/* check if the guild has a trading deals container set */ 
if(!\$details[7].trades)\{ 
  /* nope. So create one */ 
  /* pick a name */ 
  \$tmp = "Ironclaw:Guilds:Trades:"+name(\$details[7])[16..strlen(name(\$details[7]))-1]; 
  \$trades = Duplicate(\$\{Allegory:Guilds:Trades:default_trades\}); 
  /* this line doesn't seem to work - it sets it as a property instead of changing the name */ 
  \$trades."core:objectname" = \$tmp; 
  \$details[7].trades = \$trades; 
\} else \{ 
  \$trades = \$details[7].trades; 
\} 
 
/* place the item into the guild trading */ 
Set(\$trades, \$item, copy(\$details)); 
 
/* remove the item from guild bidding */ 
Set(\$\{Ironclaw:Guilds:Trading:bidding\}, \$item, nil); 
 
/* send a note to the winning guild */ 
if(!\$trades."trading:notes") \{ 
  \$trades."trading:notes" = (\{ \}); 
\} 
\$trades."trading:notes" += (\{ "Your guild has successfully won a trade deal for "+Str(\$details[0])+" "+\$details[2]+"." \}); 
 
 
/* and for debug purposes, make changes and set the item back again */ 
/* remove bidding information */ 
/* 
\$details[6] = nil; 
\$details[7] = nil; 
\$details[8] = nil; 
*/ 
/* set item back again */ 
/*Set(\$\{Ironclaw:Guilds:Trading:bidding\}, \$item, \$details);*/ 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:end_bid_countdown">
         X[M] /* delay while time remains in the bidding */ 
 
/* how long should we wait? */ 
\$time = \$time-time(); 
if(\$time\>0) 
  \$delay(\$time, TRUE, "0281"); 
 
return Call(\$this, "end_bid", \$item: \$item);
      </Core:Property>
      <Core:Property property="merry:lib:end_bid_reset">
         X[M] int shipment_remaining; 
/* reset the bidding */ 
 
/* get details for this bidding */ 
if(typeof(\$item) == T_ARRAY) \{ 
  \$details = \$item; 
  /* set the new name for \$item */ 
  if(\$name) \{ 
    \$item = \$name; 
  \} else \{ 
    \$item = "bidding:"+Str(random(100))+":"+Str(time()); 
  \} 
\} else \{ 
  \$details = Get(\$\{Ironclaw:Guilds:Trading:bidding\}, \$item); 
  /* remove the item from bidding */ 
  Set(\$\{Ironclaw:Guilds:Trading:bidding\}, \$item, nil); 
  /* if this item doesn't exist, exit */ 
  if(!\$details) 
    return FALSE; 
\} 
 
/* make changes and set the item back again */ 
\$details[6] = nil; 
\$details[7] = nil; 
\$details[8] = nil; 
/* reduce the shipments remaining, if applicable */ 
shipment_remaining = FALSE; 
if(\$details[5] \&\& \$details[5][1] != "-1") \{ 
  if(\$details[5][1] \> 0) \{ 
    \$details[5][1]--; 
    shipment_remaining = TRUE; 
  \} 
\} else if(\$details[5] \&\& \$details[5][1] == "-1") \{ 
  shipment_remaining = TRUE; 
\} 
 
/* set item back again */ 
/* only if there are more shipments remaining */ 
if(\$details[5] \&\& \$details[5][1] != "-1" \&\& \$details[5][1] \<= 0) \{ 
  Set(\$\{Ironclaw:Guilds:Trading:bidding\}, "nostock:"+\$item, \$details); 
\} else \{ 
  Set(\$\{Ironclaw:Guilds:Trading:bidding\}, \$item, \$details); 
\} 
 
/* if this is something that can be sold off the docks, give one shipment to the docks */ 
if(shipment_remaining \&\& typeof(\$details[1]) == T_ARRAY) \{ 
  \$dock_inv = \$\{Allegory:Guilds:Inventories:dock_overflow_inventory\}; 
  /* what is the name of this item? */ 
  \$itemname = \$item[7..strlen(\$item)-1]; 
  \$itemname = "tradingitem"+\$itemname; 
  /* does this item already exist? */ 
  if(Get(\$dock_inv, \$itemname)) \{ 
    /* item already exists. Increase quantity. */ 
    \$tmp = Get(\$dock_inv, \$itemname); 
    \$tmp[1] += \$details[0]; 
    Set(\$dock_inv, \$itemname, \$tmp); 
  \} else \{ 
    /* item doesn't exist, so add it */ 
    \$tmp = \$details[1]; 
    \$tmp[1] = \$details[0]; 
    Set(\$dock_inv, \$itemname, \$tmp); 
    Set(\$dock_inv, "settings:"+\$itemname+":properties", \$details[4]); 
  \} 
\} 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:gather_guild_backwards_rankings">
         X[M] /* building a list of guild ranking, backwards, from the guild we want to check rank in */ 
int recalculate, found; 
int i, j, k; 
/* this is almost an exponentially increasingly function. If we end up with hundreds of guilds, we may need to update it */ 
 
recalculate = FALSE; 
for(i=0;i\<sizeof(\$guildlist);i++) \{ 
  /* Check if this guild has a list of other guilds that it shares rank with */ 
  if(\$guildlist[i][0].sharedrank) \{ 
    \$shared = \$guildlist[i][0].sharedrank; 
    \$rank = Int(\$guildlist[i][1]); 
    for(j=0;j\<sizeof(\$shared);j++) \{ 
      /* check if this guild is already in the list */ 
      found = FALSE; 
      for(k=0;(k\<sizeof(\$guildlist))\&\&!found;k++) \{ 
        if(\$guildlist[k][0] == \$shared[j][0]) \{ 
          found = TRUE; 
          if(\$guildlist[k][1] \< Int(\$rank+\$shared[j][1])) \{ 
            \$guildlist[k][1] = Int(\$rank+\$shared[j][1]); 
            recalculate = TRUE; 
          \} 
        \} 
        /* check if this new rank is higher thank the old rank */ 
      \} 
      /* if it wasn't in the list, add it */ 
      if(!found) \{ 
        if(Int(\$rank+\$shared[j][1]) \> 0) \{ 
          \$guildlist += (\{ (\{ \$shared[j][0], Int(\$rank+\$shared[j][1]) \}) \}); 
          recalculate = TRUE; 
        \} 
      \} 
    \} 
  \} 
\} 
 
/* if we've made changes, and should recalculate values */ 
if(recalculate) \{ 
  return Call(this, "gather_guild_backwards_rankings"); 
\} else \{ 
  return \$guildlist; 
\}
      </Core:Property>
      <Core:Property property="merry:lib:get_owner">
         X[M] if(\$what."guilds:owner") return \$what."guilds:owner";  
if(\$what."guilds:linkedroom") return Call(this, "get_owner", \$what: \$what."guilds:linkedroom");  
return nil;
      </Core:Property>
      <Core:Property property="merry:lib:get_rank">
         X[M] /* calculate \$who's rank in \$guild */ 
if(!\$who) return 0; 
 
/* if we don't have a guild to test for, return 1 - everyone has rank 1 when there is no guild involved */ 
if(!\$guild) return 1; 
 
/* if the player isn't in a guild, they have no rank in this guild. */ 
if(!\$who.guild) return 0; 
 
/* get the players rank in their guild */ 
if(\$who."guild:rank") \{ 
  \$rank = Int(\$who."guild:rank"); 
\} else \{ 
  \$rank = 1; 
\} 
if(\$who."guild:rank:bonus") \{ 
  \$rank += \$who."guild:rank:bonus"; 
\} 
 
if(\$rank \< 0) \$rank = 0; 
 
/* if we belong to this guild, return our rank */ 
if(\$who.guild == \$guild) return \$rank; 
 
/* We don't belong to the guild we're checking for. Check if we have equivalent rank in the guild */ 
/* recursively build a list of guild alliances, so see if/where our guild fits */ 
\$guildlist = (\{ (\{ \$guild, \$rank \}) \}); 
\$guildlist = Call(this, "gather_guild_backwards_rankings"); 
 
/* check if our guild is in the list */ 
\$rank = 0; 
for(\$i=0;\$i\<sizeof(\$guildlist);\$i++) \{ 
  if(\$guildlist[\$i][0] == \$who.guild) 
    \$rank = \$guildlist[\$i][1]; 
\} 
 
return \$rank;
      </Core:Property>
      <Core:Property property="merry:lib:pay_npc_employees">
         X[M] int counter, i; 
string *guilds; 
object guild; 
 
\$az = nil /* defunct */; 
 
\$delay(0.1, TRUE, "7480"); 
 
/* get a list of all guilds */ 
\$folder = "Ironclaw:Guilds"; 
guilds = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects"); 
 
for(counter=0;counter\<sizeof(guilds);counter++) \{ 
  guild = Obj(\$folder+":"+guilds[counter]); 
  if(guild.employees) \{ 
    /* this guild has some employees. Check we can pay them */ 
    guild.employees \|= (\{ nil \}); 
    \$employees = guild.employees; 
    for(i=0;i\<sizeof(\$employees);i++) \{ 
      if(\$employees[i]."guild:cost") \{ 
        /* this employee costs money to maintain */ 
        if(!guild.kitty \|\| guild.kitty \< \$employees[i]."guild:cost") \{ 
          /* can't afford to keep this employee */ 
          Slay(\$employees[i]); 
        \} else \{ 
          /* pay the employee */ 
          guild.kitty -= \$employees[i]."guild:cost"; 
        \} 
      \} 
    \} 
  \} 
\} 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:popup_displaypage">
         X[M] /* OBSOLETE CODE */ 
/* return information for this page */ 
int i, rank, sz; 
string content, guildshort; 
object *inventory; 
 
content = ""; 
 
/* Are we in a guild? */ 
if(!\$guild) \{ 
  content += "\<h1\>You are not a member of a guild yet.\</h1\>"; 
  content += "\<p\>You can either socialize in-game, and join an existing guild, or visit the record house, to buy a guild charter from the clerk, and start your own guild.\</p\>"; 
  return content; 
\} 
 
content += "My Rank is: "+dump_value(\$guildrank)+"\<br\>"; 
 
/* what page? */ 
/* find what page to display */ 
if(!\$page)\{ 
  /* is this our guild? */ 
  if(\$char.guild \&\& \$char.guild == \$guild) \{ 
    \$page = "default"; 
  \} else \{ 
    \$page = "guest"; 
  \} 
\} 
\$info = Get(\$guild, "page:"+\$page); 
 
if(!\$info) \{ 
  /* page not found. Return error, or create page */ 
  if(rank \<= 3) \{ 
    /* create page */ 
    Set(\$guild, "page:"+\$page, (\{ (\{ 4, 3 \}) \})); 
    \$info = (\{ (\{ 4, 3 \}) \}); 
  \} else \{ 
    /* are they trying to view the guest page? */ 
    if(\$page == "guest") \{ 
      /* There is no guest page */ 
      return content+"\<h2\>This guild does not have a guest page.\</h2\>\<p\>You could suggest to the guild members that they create a page named \\"guest\\"\</p\>"; 
    \} else \{ 
      /* Not high enough rank to make this page */ 
      return content+"\<h1\>404 error (sorta) - Page not found!\</h1\>"; 
    \} 
  \} 
\} 
 
/* check we have enough rank to view this page */ 
content += "\<h2\>Rank is "+dump_value(\$rank)+" and access level required is "+dump_value(\$info[0][0])+"\</h2\>"; 
if(\$rank \> \$info[0][0]) \{ 
      return content+"\<h1\>Not enough Access\</h1\>\<p\>Sorry, you do not have high enough access to view this page.\</p\>"; 
\} 
 
 
/* do any page shuffling, as appropriate */ 
if(\$delete) \{ 
  /* recalculate a new array */ 
  \$delete = Int(\$delete); 
  \$newarr = (\{ \}); 
  if(\$delete == 0) \{ 
    \$newarr = \$info[1..sizeof(\$info)-1]; 
  \} else \{ 
    \$newarr += \$info[0..\$delete-1]; 
    if(sizeof(\$info) \> \$delete+1) 
      \$newarr += \$info[\$delete+1..sizeof(\$info)-1]; 
  \} 
  /* set the changes */ 
  \$info = \$newarr; 
  Set(\$guild, "page:"+\$page, \$info); 
\} 
if(\$moveup) \{ 
  /* recalculate a new array */ 
  \$moveup = Int(\$moveup); 
  \$newarr = (\{ \}); 
  if(\$moveup \> 1) \{ 
    \$newarr += \$info[0..\$moveup-2]; 
    \$newarr += (\{ \$info[\$moveup] \}); 
    \$newarr += (\{ \$info[\$moveup-1] \}); 
    if(sizeof(\$info) \> \$moveup+1) 
      \$newarr += \$info[\$moveup+1..sizeof(\$info)-1]; 
  \} else \{ 
    \$newarr = (\{ \$info[1], \$info[0] \}); 
    if(sizeof(\$info) \> 2) 
      \$newarr += \$info[2..sizeof(\$info)-1]; 
  \} 
  /* set the changes */ 
  \$info = \$newarr; 
  Set(\$guild, "page:"+\$page, \$info); 
\} 
if(\$movedown) \{ 
  /* recalculate a new array */ 
  \$movedown = Int(\$movedown); 
  \$newarr = (\{ \}); 
  if(\$movedown \> 0) \{ 
    \$newarr += \$info[0..\$movedown-1]; 
    \$newarr += (\{ \$info[\$movedown+1] \}); 
    \$newarr += (\{ \$info[\$movedown] \}); 
    if(sizeof(\$info) \> \$movedown+1) 
      \$newarr += \$info[\$movedown+2..sizeof(\$info)-1]; 
  \} else \{ 
    \$newarr = (\{ \$info[1], \$info[0] \}); 
    if(sizeof(\$info) \> 2) 
      \$newarr += \$info[2..sizeof(\$info)-1]; 
  \} 
  /* set the changes */ 
  \$info = \$newarr; 
  Set(\$guild, "page:"+\$page, \$info); 
\} 
 
 
/* display the guild page */ 
 
/* display the elements on the page */ 
for(i=1;i\<sizeof(\$info);i++) \{ 
  if(\$editmode) \{ 
    content += "\<table border=1 width=100%\>\<tr\<td\>"; 
  \} 
  switch(\$info[i][0]) \{ 
/* 
  \<option value="paragraph"\>a paragraph\</option\> 
  \<option value="h1"\>header 1\</option\> 
  \<option value="h2"\>header 2\</option\> 
  \<option value="h3"\>header 3\</option\> 
  \<option value="page"\>a link to another guild page\</option\> 
  \<option value="link"\>a link to another website\</option\> 
  \<option value="image"\>an image\</option\> 
  \<option value="text"\>html (write what you like)\</option\> 
*/ 
  case "text": 
    content += Str(\$info[i][1]); 
    break; 
  case "paragraph": 
    content += "\<p\>"+Str(\$info[i][1])+"\</p\>"; 
    break; 
  case "h1": 
    content += "\<h1\>"+Str(\$info[i][1])+"\</h1\>"; 
    break; 
  case "h2": 
    content += "\<h2\>"+Str(\$info[i][1])+"\</h2\>"; 
    break; 
  case "h3": 
    content += "\<h3\>"+Str(\$info[i][1])+"\</h3\>"; 
    break; 
  case "page": 
    content += "\<br/\>"+UnSAM(ParseXML("\<ZLINK base=\\"/SAM/Prop/Ironclaw:Lib:Guilds:Guild/popup\\" char=\$(char) page="+Str(\$info[i][2])+"\>"+Str(\$info[i][1])+"\</ZLINK\> ")); 
    break; 
  case "link": 
    if(sscanf(Str(\$info[i][1]), "%s\|%s", \$url, \$linkname) == 2) \{ 
      content += "\<br/\>\<a href=\\""+\$url+"\\"\>"+\$linkname+"\</a\>"; 
    \} else \{ 
      content += "\<br/\>\<a href=\\""+Str(\$info[i][1])+"\\"\>"+Str(\$info[i][1])+"\</a\>"; 
    \} 
    break; 
  case "image": 
    content += "\<img src=\\""+Str(\$info[i][1])+"\\"/\>"; 
    break; 
  default: 
    content += "UNKNOWN"+dump_value(\$info[i][1])+"UNKNOWN"; 
    break; 
  \} 
  if(\$editmode) \{ 
    content += "\<div align=\\"right\\"\>"; 
    content += UnSAM(ParseXML("\<ZLINK base=\\"/SAM/Prop/Ironclaw:Lib:Guilds:Guild/edit\\" char=\$(char) page=\$(page) editmode=1 edit="+Str(i)+"\>Edit\</ZLINK\> ")); 
; 
      content += UnSAM(ParseXML(" - \<ZLINK base=\\"/SAM/Prop/Ironclaw:Lib:Guilds:Guild/popup\\" char=\$(char) page=\$(page) editmode=1 delete="+Str(i)+"\>Delete\</ZLINK\>")); 
 
    if(i \> 0) 
      content += UnSAM(ParseXML(" - \<ZLINK base=\\"/SAM/Prop/Ironclaw:Lib:Guilds:Guild/popup\\" char=\$(char) page=\$(page) editmode=1 moveup="+Str(i)+"\>Move Up\</ZLINK\>")); 
    if(i\<sizeof(\$info)-1) 
      content += UnSAM(ParseXML(" - \<ZLINK base=\\"/SAM/Prop/Ironclaw:Lib:Guilds:Guild/popup\\" char=\$(char) page=\$(page) editmode=1 movedown="+Str(i)+"\>Move Down\</ZLINK\>")); 
    content += "\</div\>"; 
    content += "\</td\>\</tr\>\</table\>"; 
  \} 
\} 
if(\$editmode) \{ 
  content += UnSAM(ParseXML("\<div align=\\"right\\"\>[\<ZLINK base=\\"/SAM/Prop/Ironclaw:Lib:Guilds:Guild/edit\\" char=\$(char) editmode=1 page=\$(page)\>Add new Textblock\</ZLINK\>]\</div\>")); 
  content += UnSAM(ParseXML("\<div align=\\"right\\"\>\<ZLINK base=\\"/SAM/Prop/Ironclaw:Lib:Guilds:Guild/popup\\" char=\$(char) page=\$(page)\>View mode\</ZLINK\>\</div\>")); 
\} else \{ 
  content += UnSAM(ParseXML("\<div align=\\"right\\"\>\<ZLINK base=\\"/SAM/Prop/Ironclaw:Lib:Guilds:Guild/popup\\" char=\$(char) page=\$(page) editmode=1\>Edit mode\</ZLINK\>\</div\>")); 
\} 
return content;
      </Core:Property>
      <Core:Property property="merry:lib:popup_initialize">
         X[M] /* checks the player isn't trying anything funny, and that we have all the information we need */
/* returns the page we should look up */
object *inventory;
int i, sz;

/* first basic sanity checks -- these should never happen */
if (\$dat == nil) \{
  error("page reached without a udat");
\}
if (\$name == nil) \{
  error("page reached without a name");
\}

/* what is the character? */
if(\$actor \&\& typeof(\$actor) == 3) \{
  /* \$actor is a string. make it an object */
  if(Obj(\$actor)) \{
    \$actor = Obj(\$actor);
  \} else \{
    \$actor = Obj("Chatters:IC:"+\$actor[0..1]+":"+\$actor);
  \}
\}
if(\$char \&\& typeof(\$char) == 3) \{
  /* \$char is a string. make it an object */
  if(Obj(\$char)) \{
    \$char = Obj(\$char);
  \} else \{
    \$char = Obj("Chatters:IC:"+\$char[0..1]+":"+\$char);
  \}
\}
if(!\$char \&\& \$actor)
  \$char = \$actor;
if(!\$actor \&\& \$char)
  \$actor = \$char;


if (!\$char) \{
  error("No character specified");
\}

\$charname = name(\$char)[15..strlen(name(\$char))-1];

/* what is the guild? */
if(\$guild \&\& Obj("Ironclaw:Guilds:"+\$guild)) \{
  \$guild = Obj("Ironclaw:Guilds:"+\$guild);
\} else if(Get(\$char, "guild")) \{
  \$guild = \$char.guild;
\} else \{
  \$guild = nil;
\}

if(\$guild) \{
  \$guildname = name(\$guild)[16..strlen(name(\$guild))-1];
  \$guildpages = Obj("Ironclaw:Guilds:Pages:"+\$guildname);
  if(!\$guildpages) \{
    \$guildpages = Duplicate(\$\{Ironclaw:Guilds:Pages:default_page\});
    \$guildpages."core:objectname" = "Ironclaw:Guilds:Pages:"+\$guildname;
  \}
\}

/* Check the player isn't trying to access someone elses body */
/* Check if the players roster of characters */
\$bodies = Udat::query_bodies_in_roster(\$user: \$name);

for(\$i = 0; \$i \< sizeof(\$bodies);)
\{
  if(\$bodies[\$i]."theatre:id" != "IC")
  \{
    \$bodies -= (\{ \$bodies[\$i] \});
  \} else \{
    \$i++;
  \}
\}

\$bodies \&= (\{ \$char \});

if(sizeof(\$bodies) \< 1) \{
  EmitTo(\$\{Chatters:AE:az:azrael\}, "ACCESSING ANOTHER ACCOUNT'S PAGE: body: "+name(\$char)+", account: "+\$name+".");
\}

if(sizeof(\$bodies) \< 1 \&\& \$name != "tonyd") \{
  error("Body "+dump_value(\$char)+" not found in "+\$name+" character roster");
\}

/* Check the players rank in this guild */
inventory = \$actor."base:deep-inventory";
sz = sizeof(inventory);
for(i=0;i\<sz;i++) \{
  if(inventory[i].guild \&\& inventory[i].guild == \$guild) \{
    /* does this item specify a rank? */
    if(inventory[i]."guild:rank" \&\& (!\$guildrank \|\| inventory[i]."guild:rank" \< \$guildrank)) \{
      \$guildrank = inventory[i]."guild:rank";
    \}
  \}
\}
if(!\$guildrank \&\& \$actor.guild == \$guild)
  \$guildrank = 4;
if(!\$guildrank)
  \$guildrank = 6;

/* if they are set as guild leader using the new guild system, let it work */
if(\$guild \&\& \$actor == \$guild.leader) \$guildrank = 1;

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:popup_stuff">
         X[S] \$[/* display information about the character's guild */ 
 
/* what is the character? */ 
if(\$actor \&\& typeof(\$actor) == 3) \{ 
  /* \$actor is a string. make it an object */ 
  \$actor = Obj(\$actor); 
\} 
if(\$char \&\& typeof(\$char) == 3) \{ 
  /* \$char is a string. make it an object */ 
  \$char = Obj(\$char); 
\} 
if(!\$char \&\& \$actor) 
  \$char = \$actor; 
if(!\$actor \&\& \$char) 
  \$actor = \$char; 
 
/* what is the guild? */ 
if(Get(\$char, "guild")) \{ 
  \$guild = \$char.guild; 
\} else \{ 
  \$guild = nil; 
\}]
\<html\>
\{? \| \$(char.guild) \|
  \\\<!-- We know the characters guild --\\\>
  \<head\>
    \<title\>New Guild Information: \$(char.guild.fullname)\</title\>
  \</head\>
  \<body\>
    \<h1\>You are not a member of any guild\</h1\>
    \<p\>You can join a guild by being recruited in the game, or by starting your own guild.\<br/\>
    To be recruited, ask around in the game. Someone with a guild ring can allow you to join.\<br/\>
    To start your own guild, purchase a guild charter from the record house, fill it out (with @compose) and offer it to the clerk. Then recruit yourself using your guild ring (that the clerk will give you.)\</p\>
  \</body\>
\|
  \\\<!-- Character doesn't have a guild --\\\>
  \<head\>
    \<title\>You are not a member of a guild\</title\>
  \</head\>
  \<body\>
    \<h1\>You are not a member of any guild\</h1\>
    \<p\>You can join a guild by being recruited in the game, or by starting your own guild.\<br/\>
    To be recruited, ask around in the game. Someone with a guild ring can allow you to join.\<br/\>
    To start your own guild, purchase a guild charter from the record house, fill it out (with @compose) and offer it to the clerk. Then recruit yourself using your guild ring (that the clerk will give you.)\</p\>
  \</body\>
\}
\</html\>
\\\<!-- End of updated code --\\\>
\<html\>
  \<body leftmargin="10" topmargin="10"\>
TEST
TEST2
     \<zform\>
        \<font color="yellow" size="3"\>\$(msg)\</font\>\<br/\>\<br/\>\<sbr/\>
          \<font face="Courier" size="2"\>Addressed to: \</font\>
          \<input style="BORDER-RIGHT: none; BORDER-TOP: none; BORDER-LEFT: none; BORDER-BOTTOM: #000000 1pt solid; BACKGROUND: transparent; WIDTH: 200px; HEIGHT: 22px" size="38" name="addressee" value="\$(addressee)"/\>\<br/\>
        \<font face="Courier" size="2"\>Parchment body:\</font\>\<br/\>
        \<textarea style="BORDER-RIGHT: none; BORDER-TOP: #000000 1pt solid; BORDER-LEFT: #000000 1pt solid; BORDER-BOTTOM: none; BACKGROUND: transparent; WIDTH: 525px; HEIGHT: 200px" name="body"\>\$[((\$r1 = Obj(\$actor)."details:objskin:description:writing") ? replace_strings(\$r1, "\<br/\>", "\\n") : "")]\</textarea\>
          \<br/\>
          \<font face="Courier" size="2"\>Optional Signature:\</font\>
          \<input style="BORDER-RIGHT: none; BORDER-TOP: none; BORDER-LEFT: none; BORDER-BOTTOM: #000000 1pt solid; BACKGROUND: transparent; WIDTH: 200px; HEIGHT: 22px" size="39" name="optsig" value="\$(optsig)"/\>\\\&nbsp;\\\&nbsp;\\\&nbsp;\\\&nbsp;
        \<font face="Courier" size="2"\>Sign it?\</font\>
          \$[(!\$sign \|\| \$sign == "" ? "\<input type=\\"checkbox\\" value=\\"true\\" name=\\"sign\\"/\>" : "\<input type=\\"checkbox\\" value=\\"true\\" name=\\"sign\\" checked=\\"true\\"/\>")]
        \<p\>
          \<input type="hidden" name="actor" value="\$(actor)"/\>
          \<input type="hidden" name="this" value="\$(this)"/\>
          \<input type="hidden" name="target" value="\$(target)"/\>
          \<input type="submit" value="Write it!" name="write"/\>
       \</p\>
       \<action\>
        \$[Call(Obj(\$this), "write", \$actor: \$actor, \$this: \$this, \$target: \$target, \$addressee: \$addressee, \$body: \$body, \$optsig: \$optsig, \$sign: \$sign);]
      \</action\>
    \</zform\>
  \</body\>
\</html\>
      </Core:Property>
      <Core:Property property="merry:lib:run_bluebooked_jobs">
         X[M] object *members;
int i, sz;

if(!\$guild) return TRUE;
if(!\$guild.kitty) \$guild.kitty = 0;

members = Arr(\$guild.members);
members -= (\{ nil \});

sz = sizeof(members);
for(i=0;i\<sz;i++)\{
/*EmitTo(\$\{Chatters:IC:az:azrael\}, dump_value(members[i])+" - "+dump_value(\$guild));*/
  Call(\$\{Ironclaw:Lib:Guilds:BluebookedJobsDB\}, "run_job", \$char: members[i], \$guild: \$guild);
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:run_bluebooked_payments">
         X[M] object *members;
int i, sz;

if(!\$guild) return TRUE;
if(!\$guild.kitty) \$guild.kitty = 0;

members = Arr(\$guild.members);
members -= (\{ nil \});

sz = sizeof(members);
for(i=0;i\<sz;i++)\{
/*EmitTo(\$\{Chatters:IC:az:azrael\}, dump_value(members[i])+" - "+dump_value(\$guild));*/
  Call(\$\{Ironclaw:Lib:Guilds:BluebookedJobsDB\}, "run_job", \$char: members[i], \$guild: \$guild);
  
  /* pay any daily money to the member from the guild */
  if(members[i]."guild:daily_payment") \{
    /* can the guild afford to pay it? */
    if(\$guild.kitty \> members[i]."guild:daily_payment") \{
      \$amount = members[i]."guild:daily_payment";
    \} else \{
      \$amount = \$guild.kitty;
    \}
    if(\$amount \< 0) \$amount = 0;
    if(\$amount \> 0) \{
      /* pay this to the PC */
      \$guild.kitty -= \$amount;
      members[i]."trait:money" += \$amount;
    \} else \{
      /* inform the PC that they were not paid */
        /* NOT WRITTEN YET */
    \}
  \}
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:run_daily_functions">
         X[M] /* Run daily functions for guilds */
\$az = \$\{Chatters:AE:az:azrael\};
/* get a list of guilds */
EmitTo(\$az, "Getting a list of guilds");
/* get a list of all guilds */
\$folder = "Ironclaw:Guilds";
\$guilds = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
for(\$i=0;\$i\<sizeof(\$guilds);\$i++) \{
  \$guilds[\$i] = Obj("Ironclaw:Guilds:"+\$guilds[\$i]);
\}

/* run todays trading */
for(\$i=0;\$i\<sizeof(\$guilds);\$i++) \{
  EmitTo(\$az, dump_value(\$guilds[\$i]));
  ::run_bluebooked_jobs(\$guild: \$guilds[\$i]);
  ::run_trading(\$guild: \$guilds[\$i]);
  ::run_bluebooked_payments(\$guild: \$guilds[\$i]);
\}

/* check that their leader is still active */

/* resolve any votes, and assign new leaders */

EmitTo(\$az, "Guild maintenance done.");
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:run_trading">
         X[M] /* make any trading deals for today */
object trades_ob;
int i, sz, j, j_sz;
string *trades;

/*\$az = nil;*/
/*EmitTo(\$az, "Making trading deals for "+dump_value(\$guild));*/
if(!\$guild.trades)
 return TRUE;

trades_ob = \$guild.trades;

/* get a list of current trades */
trades = map_indices(prefixed_map(trades_ob."*", "bidding:"));

sz = sizeof(trades);
for(i=0;i\<sz;i++)\{
/*EmitTo(\$az, dump_value(trades[i]));*/
  \$trade = Get(trades_ob, trades[i]);
  trades[i] = trades[i][8..strlen(trades[i])-1];
/*EmitTo(\$az, dump_value(\$trade));*/
  /* is it time for this trade? */
  /* if we don't have a time for the trade to happen */
  if(!\$trade[8])
    error("No time information for the trade - "+dump_value(\$guild)+" - "+trades[i]);

  if(time() \>= \$trade[8]) \{
    /* time for the trade */
/*EmitTo(\$az, "Time for this trade!");*/
    /* calculate the new time for the trade */
    if(\$trade[5]) \{
      \$trade[8] += (24*60*60*\$trade[5][2]);
    \} else \{
      /* don't know how long until next trade, so assume a week */
      \$trade[8] += (24*60*60*7);
    \}

    /* check if they can pay for this trade */
    if(!\$trade[6])
      error("No price for the trade - "+dump_value(\$guild)+" - "+trades[i]);

    if((\$trade[6]*100) \> \$guild.kitty) \{
      /* can't afford this trade. Sell it off the docks */
      /* send a note */
      if(!trades_ob."trading:notes") \{
        trades_ob."trading:notes" = (\{ \});
      \}
      trades_ob."trading:notes" += (\{ capitalize(\$guild.fullname)+" could not afford to pay for the receipt of "+Str(\$trade[0])+" "+\$trade[2]+", and as such, the trading contract has been cancelled." \});
      /* and reset the bid */
      Call(\$this, "end_bid_reset", \$item: \$trade, \$name: "bidding:"+trades[i]);
      /* and remove the item from their trading */
      Set(trades_ob, "bidding:"+trades[i], nil);
    \} else \{

      /* charge the guild kitty */
      \$guild.kitty -= (\$trade[6]*100);
      /* add to the economy tracker */
      \$tracker = \$\{Ironclaw:Lib:Economy:economy\};
      \$tracker."moneypool:pc" -= (\$trade[6]*100);
      \$tracker."moneypool:npc" += (\$trade[6]*100);
      if(!\$tracker."guild:bidding")
        \$tracker."guild:bidding" = 0;
      \$tracker."guild:bidding" -= (\$trade[6]*100);

      /* process this trade */
      if(typeof(\$trade[1]) == T_NIL) \{
        /* These are some NPC tokens (or other numerical property) */
        \$properties = Arr(\$trade[4]);
        j_sz = sizeof(\$properties);
        for(j=0;j+1\<j_sz;j=j+2) \{
          if(Get(\$guild, \$properties[j])) \{
            Set(\$guild, \$properties[j], Int(Get(\$guild, \$properties[j]))+Int(\$properties[j+1]));
          \} else \{
            Set(\$guild, \$properties[j], Int(\$properties[j+1]));
          \}
        \}
      \} else if(typeof(\$trade[1]) == T_ARRAY) \{
        /* These are objects that can be added to the guild inventory */
        /* check if the guild has an inventory container set */
        if(!\$guild.inventory)\{
          /* nope. So create one */
          /* pick a name */
          \$tmp = "Allegory:Guilds:Inventories:"+name(\$guild)[16..strlen(name(\$guild))-1];
          \$guild.inventory = Duplicate(\$\{Allegory:Guilds:Inventories:default_inventory\});
          /* this line doesn't seem to work - it sets it as a property instead of changing the name */
          \$guild.inventory."core:objectname" = \$tmp;
        \}

        /* check if this item already exists in the inventory */
        if(Get(\$guild.inventory, "tradingitem:"+trades[i])) \{
          /* it does, increment the stock available */
          \$tmp = Get(\$guild.inventory, "tradingitem:"+trades[i]);
          \$tmp[1] += \$trade[1][1];
          Set(\$guild.inventory, "tradingitem:"+trades[i], \$tmp);
        \} else \{
          /* it doesn't. Add it. */
          Set(\$guild.inventory, "tradingitem:"+trades[i], \$trade[1]);
          /* and set the properties */
          Set(\$guild.inventory, "settings:tradingitem:"+trades[i]+":properties", \$trade[4]);
        \}
      \} else if(typeof(\$trade[1]) == T_OBJECT) \{
        /* This is a property being rented */
        /* we've already charged them the cost. So we're good. */
      \}

      /* decrease the number of remaining trades */
      if(\$trade[5]) \{
        if(\$trade[5][1] != -1)
          \$trade[5][1]--;
        /* have we run out of trades remaining? */
        if(\$trade[5][1] == 0) \{
          /* send a note */
          if(!trades_ob."trading:notes") \{
            trades_ob."trading:notes" = (\{ \});
          \}
          trades_ob."trading:notes" += (\{ "Your trading deal for the receipt of "+Str(\$trade[0])+" "+\$trade[2]+" has reached its conclusion." \});
          /* and reset the bid */
          Call(\$this, "end_bid_reset", \$item: \$trade, \$name: "bidding:"+trades[i]);
          /* and remove the item from their trading */
          Set(trades_ob, "bidding:"+trades[i], nil);
        \}
      \}
    \} /* we can afford this trade */
  \} /* time for the trade to happen */
\}
/*EmitTo(\$az, "trade finished");*/

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:wear%loyalty">
         X[M] /* Allows a PC to show the group they are loyal to by wearing this item of clothing */

/* Are they already marked as loyal to this guild? */
if(!\$this.loyalty) return TRUE;
if(\$actor."loyalty:guild" == \$this.loyalty[1]) return TRUE;
if(\$actor."loyalty:name" == \$this.loyalty[0]) return TRUE;

EmitTo(\$actor, "By wearing "+Describe(\$this, nil, \$actor)+" you are showing the world that you are loyal towards "+\$this.loyalty[0]+".");

if(!\$actor."loyalty:name") \{
  \$actor."loyalty:name" = \$this.loyalty[0];
  \$actor."loyalty:guild" = \$this.loyalty[1];
  \$actor."loyalty:group" = \$this.loyalty[2];
  \$actor."loyalty:time" = time();
  \$actor."loyalty:history" = ([]);
  \$actor."loyalty:history"[time()] = \$this.loyalty[0];
\} else \{
  /* Changing loyalty */
  EmitTo(\$actor, "Since you are already known to be loyal towards "+Str(\$actor."loyalty:name")+", wearing "+Describe(\$this, nil, \$actor)+" will change your loyalty. If you do not want that, please take it off now.");
 
  if(Int(\$actor."loyalty:time")+60*60*24*30 \> time())
    EmitTo(\$actor, "Additionally, as you haven't been loyal to "+Str(\$actor."loyalty:name")+" for very long, you will have to wait a week or so before you begin seeing the benefits of your new loyalty.");

  \$delay(30, TRUE, "a2c6");
  /* Are they still wearing the cloak? */
  if(\$this."base:worn-by" == \$actor) \{
    \$actor."loyalty:name" = \$this.loyalty[0];
    \$actor."loyalty:guild" = \$this.loyalty[1];
    \$actor."loyalty:group" = \$this.loyalty[2];
    \$actor."loyalty:history"[time()] = \$this.loyalty[0];
    if(Int(\$actor."loyalty:time")+60*60*24*30 \> time()) \{
      /* They've changed loyalty too soon. 6 days wait before they can get the benefits of the new loyalty */
      ironclaw::set_prop(\$obj: \$actor, \$prop: "loyalty:guild", \$value: nil, \$timer: 60*60*24*6);
      ironclaw::set_prop(\$obj: \$actor, \$prop: "loyalty:group", \$value: nil, \$timer: 60*60*24*6);
    \}
    \$actor."loyalty:time" = time();
  \}
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:recruit-iob">
         X[M] /* Releasing someone from the guild */  
  
EmitTo(\$actor, "To recruit someone from your guild, type @newguild, go to the members page, then use the \\"Recruit\\" option near the bottom of the page.");
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react:release-using">
         X[M] /* Releasing someone from the guild */  
  
EmitTo(\$actor, "To release someone from your guild, type @newguild, go to the members page, then use the \\"Release\\" option near the bottom of the page.");
return FALSE;
      </Core:Property>
      <Core:Property property="new property name">
         "New Property Value"
      </Core:Property>
      <Core:Property property="page:footer">
         X[S] \$[\$text = "";
\$text += "    \</div\>\\n";
\$text += "  \<hr/\>\\n";
\$text += "  \</div\>\\n";
\$text += "\</body\>\\n";
\$text += "\</html\>\\n";
return \$text;]
      </Core:Property>
      <Core:Property property="page:header">
         X[S] \$[/* run some initial code */  
::popup_initialize();  
\$text = "\<!DOCTYPE HTML PUBLIC \\"-//W3C//DTD HTML 4.01 Transitional//EN\\" \\"http://www.w3.org/TR/html4/loose.dtd\\"/\>\\n";
\$text += "\<html lang='en'\>";
return \$text;]
\<head\>
    \<title\>\$(charname) - Additional\</title\>
    \<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/\>
    \$[nil;
     /* \$(Ironclaw:Theatre:CreateCharacter.xtra:stylesheet) */
     return nil]
\</head\>
\$[\$text = "\<body\>\\n";
\$text += "  \<div id='main'\>\\n";
\$text += "    \<div id='textareafull'\>\\n";


/* HACK! Set the guild
(Because the "usual" initialize sets the guild to what the player specifies, but this code we want it always to be the PCs "real" guild */
\$guild = \$char.guild;

return \$text;]
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1224287596, "tonyd", "E", 1224594953, "tonyd", "P", 1224595000, "tonyd", "P", 1224595024, "tonyd", "P", 1224595150, "tonyd", "P", 1224595170, "tonyd", "P", 1224595193, "tonyd", "P", 1224595228, "tonyd", "P", 1224595246, "tonyd", "P", 1224595268, "tonyd", "P", 1224595293, "tonyd", "P", 1224595310, "tonyd", "P", 1224595338, "tonyd", "P", 1224595425, "tonyd", "P", 1224595443, "tonyd", "P", 1224595484, "tonyd", "P", 1224595513, "tonyd", "P", 1224595531, "tonyd", "P", 1224595588, "tonyd", "P", 1228791928, "tonyd", "E", 1229284651, "rastalabor", "E", 1229285038, "rastalabor", "X", 1229412803, "tonyd", "E", 1229412833, "tonyd", "E", 1229412862, "tonyd", "E", 1229413444, "tonyd", "E", 1229413454, "tonyd", "E", 1229413480, "tonyd", "E", 1229413578, "tonyd", "E", 1229413644, "tonyd", "E", 1229829508, "tonyd", "P", 1229829588, "tonyd", "P", 1229829624, "tonyd", "P", 1229830152, "tonyd", "P", 1232613717, "tonyd", "P", 1232613767, "tonyd", "P", 1232613871, "tonyd", "P", 1232614086, "tonyd", "P", 1232614110, "tonyd", "P", 1232614175, "tonyd", "P", 1232614228, "tonyd", "P", 1232614500, "tonyd", "P", 1232614573, "tonyd", "P", 1232614602, "tonyd", "P", 1232614697, "tonyd", "P", 1232614709, "tonyd", "P", 1237036552, "tonyd", "P", 1237036649, "tonyd", "P", 1249816127, "tonyd", "P", 1249816251, "tonyd", "P", 1249816271, "tonyd", "P", 1249816781, "tonyd", "P", 1249817199, "tonyd", "P", 1249817647, "tonyd", "P", 1249817760, "tonyd", "P", 1249818171, "tonyd", "P", 1249818258, "tonyd", "P", 1249818299, "tonyd", "P", 1249818382, "tonyd", "P", 1249818503, "tonyd", "P", 1249818582, "tonyd", "P", 1249818756, "tonyd", "P", 1249818781, "tonyd", "P", 1249818927, "tonyd", "P", 1249818939, "tonyd", "P", 1249818987, "tonyd", "P", 1253322356, "tonyd", "P", 1253322595, "tonyd", "P", 1253322706, "tonyd", "P", 1260137567, "tonyd", "P", 1261797125, "tonyd", "P", 1261797178, "tonyd", "P", 1262066755, "jominey", "E", 1262066919, "jominey", "E", 1262067004, "jominey", "E", 1262067122, "jominey", "E", 1262067228, "jominey", "E", 1262067359, "jominey", "E", 1262067442, "jominey", "E", 1262067544, "jominey", "E", 1271802668, "jominey", "E", 1271802686, "jominey", "E", 1271802789, "jominey", "E", 1284696576, "jominey", "E", 1294452226, "jominey", "E", 1294452322, "jominey", "E", 1294452369, "jominey", "E", 1294452416, "jominey", "E", 1325551829, "jominey", "E", 1339355699, "jominey", "E", 1339356573, "jominey", "E", 1339356712, "jominey", "E", 1339356766, "jominey", "E", 1339356884, "jominey", "E", 1339356952, "jominey", "E", 1339357145, "jominey", "E", 1348864588, "jominey", "E", 1349132352, "jominey", "E", 1349132432, "jominey", "E", 1349132487, "jominey", "E", 1367641966, "tonyd", "E", 1367642450, "tonyd", "P", 1367642488, "tonyd", "P", 1367642501, "tonyd", "P", 1367642512, "tonyd", "P", 1367664063, "tonyd", "P", 1367664092, "tonyd", "P", 1370504826, "tonyd", "P", 1370504868, "tonyd", "P", 1373102444, "tonyd", "E", 1373102450, "tonyd", "E", 1373102813, "tonyd", "P", 1373102951, "tonyd", "P", 1373103010, "tonyd", "P", 1373103065, "tonyd", "P", 1373103086, "tonyd", "P", 1373103211, "tonyd", "P", 1373103402, "tonyd", "P", 1373103474, "tonyd", "P", 1373103803, "tonyd", "P", 1373103872, "tonyd", "P", 1373103922, "tonyd", "P", 1373103976, "tonyd", "P", 1373104003, "tonyd", "P", 1373104012, "tonyd", "P", 1373104050, "tonyd", "P", 1373104076, "tonyd", "P", 1373104100, "tonyd", "P", 1373104111, "tonyd", "P", 1373104424, "tonyd", "P", 1373104439, "tonyd", "P", 1373104446, "tonyd", "P", 1373104452, "tonyd", "P", 1373104463, "tonyd", "P", 1373104516, "tonyd", "P", 1373104531, "tonyd", "P", 1373104539, "tonyd", "P", 1373104576, "tonyd", "P", 1373104633, "tonyd", "P", 1373104648, "tonyd", "P", 1373104669, "tonyd", "P", 1373104765, "tonyd", "P", 1373104794, "tonyd", "P", 1373104838, "tonyd", "P", 1373104890, "tonyd", "P", 1373104902, "tonyd", "P", 1373104967, "tonyd", "P", 1373105046, "tonyd", "P", 1373105088, "tonyd", "P", 1373105313, "tonyd", "P", 1373105371, "tonyd", "P", 1373105441, "tonyd", "P", 1373105520, "tonyd", "P", 1373105549, "tonyd", "P", 1373105650, "tonyd", "P", 1373105682, "tonyd", "P", 1373105763, "tonyd", "P", 1373105833, "tonyd", "P", 1373105911, "tonyd", "P", 1373106054, "tonyd", "P", 1373106119, "tonyd", "P", 1373106162, "tonyd", "P", 1373106189, "tonyd", "P", 1373106209, "tonyd", "P", 1374373282, "tonyd", "P", 1374374275, "tonyd", "P", 1374403129, "tonyd", "P", 1374403190, "tonyd", "P", 1374403205, "tonyd", "P", 1374403295, "tonyd", "P", 1374403345, "tonyd", "P", 1374403359, "tonyd", "P", 1374403538, "tonyd", "P", 1374403561, "tonyd", "P", 1374403584, "tonyd", "P", 1374403678, "tonyd", "P", 1374403714, "tonyd", "P", 1374403774, "tonyd", "P", 1374403784, "tonyd", "P", 1374403802, "tonyd", "P", 1374403838, "tonyd", "P", 1374403866, "tonyd", "P", 1374403881, "tonyd", "P", 1374404050, "tonyd", "P", 1374404067, "tonyd", "P", 1374404119, "tonyd", "P", 1374404203, "tonyd", "P", 1374404231, "tonyd", "P", 1374404678, "tonyd", "P", 1374404876, "tonyd", "P", 1374404927, "tonyd", "P", 1374404942, "tonyd", "P", 1374404980, "tonyd", "P", 1374404999, "tonyd", "P", 1374405014, "tonyd", "P", 1374405181, "tonyd", "P", 1374405260, "tonyd", "P", 1374405362, "tonyd", "P", 1374405702, "tonyd", "P", 1374405788, "tonyd", "P", 1374405811, "tonyd", "P", 1374405955, "tonyd", "P", 1374405976, "tonyd", "P", 1374406024, "tonyd", "P", 1374406040, "tonyd", "P", 1374406092, "tonyd", "P", 1374406230, "tonyd", "P", 1374406250, "tonyd", "P", 1374406292, "tonyd", "P", 1374406299, "tonyd", "P", 1374406527, "tonyd", "P", 1374406554, "tonyd", "P", 1374406612, "tonyd", "P", 1374406870, "tonyd", "P", 1434010468, "tonyd", "P", 1434010531, "tonyd", "P", 1434010607, "tonyd", "P", 1443257570, "tonyd", "P", 1458194889, "tonyd", "P", 1495077508, "jominey", "E", 1495077613, "jominey", "E", 1571339720, "jominey", "R", 1571339823, "jominey", "R", 1574871702, "jominey", "E", 1574872206, "jominey", "E", 1582567971, "jominey", "E", 1586960750, "jominey", "P", 1586960869, "jominey", "P", 1719008102, "annemairi", "E", 1719098656, "annemairi", "E" \})
      </Core:Property>
      <Core:Property property="xtra:display_guild_rings">
         X[S] \{? \| \$(editmode) \|
  \\\&lt;GUILD RING LISTING\\\&gt;
\|
\$[/* display the rings for this guild */ 
if(!\$guild) return "No guild specified."; 
if(!\$guild.ringlist) \$guild.ringlist = (\{ \}); 
\$guild.ringlist -= (\{ nil \});]
\{? \| \$[!sizeof(Arr(\$guild.ringlist))] \|
  \<p\>No Guild rings.\</p\>
\|
  \<p\>
  \\\<!--Were we asked to destroy or demote any rings? --\\\>
  \{? \| \$(revokering) \|
    \{? \| \$[if(\$revokering \&\& \$revokering.guild == \$guild \&\& \$revokering."guild:rank" \> \$guildrank) return TRUE; return FALSE;] \|
      \$[\$revokering.guild = nil; \$revokering."guild:officer" = nil; \$revokering."guild:rank" = nil; \$guild.ringlist -= (\{ \$revokering \}); return nil;]
      \<font color="red"\>Guild ring has been revoked.\</font\>\<br/\>
    \}
  \}
  \<table border="0" cellspacing="0"\>\<tr\>\<td\>\<b\>Ring\</b\>\\\&nbsp;\\\&nbsp;\</td\>\<td\>\<b\>Held by\</b\>\\\&nbsp;\\\&nbsp;\</td\>\<td\>\\\&nbsp;\\\&nbsp;\</td\>
  \</tr\>
  \\\<!-- loop through each ring --\\\>
  \<for var="ring" val="\$(guild.ringlist)"\>
    \$[\$rank = \$ring."guild:rank"; return nil;]
    \<tr\>
    \<td\>
      \{?when\| \$(rank) \| 1 \|         Gold         \| 2 \|         Silver         \| 3 \|         Bronze         \| * \|         Unknown \}
    \</td\>
    \<td\>
      \$[\$location = \$ring."base:environment"; 
      while(\$location)\{ 
        if(\$location."skotos:charname") 
          return capitalize(\$location."skotos:charname"); 
        if(\$location.homeowner) \{ 
          if(\$location.homeowner."skotos:charname") \{ 
            return capitalize(\$location.homeowner."skotos:charname")+" (room)"; 
          \} else \{ 
            return Describe(\$location.homeowner)+" (room)"; 
          \} 
        \} 
        \$location = \$location."base:environment"; 
      \} 
      return "Unknown";]
    \</td\>
    \<td\>
      \{? greaterthan \| \$(rank) \| \$(guildrank) \|
        \<zlink base="/SAM/Prop/Ironclaw:Lib:Guilds:Guild/popup" char="\$(char)" guild="\$(guildname)" page="\$(page)" revokering="\$(ring)"\>Revoke ring\</zlink\>
      \}
      \\\&nbsp;
    \</td\>
    \</tr\>
   \</for\>
  \</table\>
  \</p\>
\}
\}
      </Core:Property>
      <Core:Property property="xtra:display_members_list">
         X[S] \{? \| \$(editmode) \| \\\&lt;MEMBERS LIST\\\&gt; \|
  \$[/* display a list of members in this guild */  
object *members;  
int i, sz;  
 
/*Display members active in the last week*/  
\$activetime = time() - (60*60*24*7);  
  
\$displaylist = (\{ \});  
\$guild.members -= (\{ nil \});  
members = \$guild.members;  
 
EmitTo(\$tester, "Members: " + dump_value(members)); 
  
sz = sizeof(members);  
for(i=0;i\<sz;i++) \{  
  /* check if this member is active enough to be displayed */  
  if(\$activetime) \{  
    if(members[i]."cdat:lastlogin" \&\& members[i]."cdat:lastlogin" \> \$activetime)  
      \$displaylist += (\{ members[i] \});  
  \} else \{  
    \$displaylist += (\{ members[i] \});  
  \}  
\}]
  \{? \| \$[sizeof(\$displaylist)] \|
    \<p\>\<table\>\<tr\>\<td\>Name\</td\>\<td\>Position\</td\>\<td\>Notes\</td\>
    \{? \| \$[\$guildrank \<= 1] \| \<td\>Trader\</td\> \}
    \{? \| \$[\$guildrank \<= 2] \| \<td\>Bluebooked Job\</td\> \}
    \</tr\>
    \<for var="member" val="\$(displaylist)"\>
      \<tr\>\<td\>\$[capitalize(\$member."skotos:charname")]\</td\>
      \{? \| \$(member.guild:position) \| \<td\>\$(member.guild:position)\</td\> \| \<td\>-\</td\> \}
      \{? \| \$(member.guild:notes) \| \<td\>\$(member.guild:notes)\</td\> \| \<td\>-\</td\> \}
      \{? \| \$[\$guildrank \<= 1] \|
        \<td\>\<zform member="\$(member)"\>
          \<select NAME="istrader" SIZE="1" onchange="submit()"\>
          \{? \| \$(member.guild:trader) \|
            \<option SELECTED="1"\>Yes\</option\>
            \<option\>No\</option\>
          \|
            \<option\>Yes\</option\>
            \<option SELECTED="1"\>No\</option\>
          \}
          \</select\>
          \<action\>
          \$[if(\$istrader == "Yes")\{ \$member."guild:trader" = TRUE; \} else \{ \$member."guild:trader" = nil; \}]
          \</action\>
        \</zform\>\</td\>
      \}
      \{? \| \$[\$guildrank \<= 2] \|
        \<td\>\<zform member="\$(member)"\>
          \$[\$jobs = Arr(\$member."guild:jobs"); return nil;]
          \<select NAME="job" SIZE="1" onchange="submit()"\>
            \{? \| \$[\$member."guild:job" == "Earning"] \| \<option SELECTED="1"\>Earning\</option\> \| \<option\>Earning\</option\> \}
            \{? \| \$[\$member."guild:job" == "Working"] \| \<option SELECTED="1"\>Working\</option\> \| \<option\>Working\</option\> \}
            \<for var="job" val="\$(jobs)"\>
              \{? \| \$[\$member."guild:job" == \$job] \|
                \<option SELECTED="1"\>\$(job)\</option\>
              \|
                \<option\>\$(job)\</option\>
              \}
            \</for\>
          \</select\>
          \<action\>
            \$[/* set their job */  
              if(\$job == "Earning")\{  
                \$member."guild:job" = nil;  
              \} else \{  
                \$member."guild:job" = \$job;  
              \}  
              return nil;]
          \</action\>
        \</zform\>\</td\>
      \}
      \</tr\>
    \</for\>
    \</table\>
    \{? \| \$[\$guildrank \<= 2] \|
      \<zform jobs="\$(jobs)" char="\$(char)"\>
        \<input type="submit" value="Submit" class="submit-button"/\>
        \<action\>
          \<redirect base="/SAM/Prop/Ironclaw:Lib:Guilds:Guild/popup" char="\$(char)" guild="\$(guildname)" page="\$(viewpage)"/\>
        \</action\>
      \</zform\>
    \}
    \</p\>
  \|
    \<p\>No members were active in the past week.\</p\>
  \}
\}
      </Core:Property>
      <Core:Property property="xtra:display_npc_tokens">
         X[S] \{? \| \$(editmode) \|
  \\\&lt;NPC TOKEN LISTING\\\&gt;
\|
\$[/* display the inventory for this guild */          
\$token_list = prefixed_map(\$guild."*", "tokens:");          
\$token_list = map_indices(\$token_list); return nil;]
\{? \| \$[!sizeof(\$token_list)] \|
  \<p\>No NPC Tokens.\</p\>
\|
  \<p\>
  \<table border="0" cellspacing="0"\>\<tr\>\<td\>Token\\\&nbsp;\\\&nbsp;\</td\>\<td\>Quantity\</td\>
  \{? \| \$[if(\$guildrank \<= 2) return TRUE; return FALSE;] \| \<td\>\\\&nbsp;\</td\> \}
  \</tr\>
  \\\<!-- Deal with teacher tokens --\\\>
  \{? \| \$[if(member("tokens:teacher", \$token_list)) return TRUE; return FALSE;] \|
    \<tr\>\<td\>Teacher\</td\>\<td\>\$(guild.tokens:teacher)\</td\>\</tr\>
  \}
  \$[/* remove tokens we've already dealt with */ \$token_list -= (\{ "tokens:teacher" \}); return nil;]
  \\\<!-- List remaining tokens --\\\>
  \<for var="tokens" val="\$(token_list)"\>
    \<tr\>\<td\>\$[capitalize(\$tokens[7..strlen(\$tokens)-1])]\</td\>
    \<td\>\$[Get(\$guild, \$tokens)]\</td\>
    \</tr\>
   \</for\>
  \</table\>
  \</p\>
\}
\}
      </Core:Property>
      <Core:Property property="xtra:page:default">
         X[S] \\\<!-- Default front page for guilds --\\\>
\<h1\>\$(guild.fullname)\</h1\>
\<p\>Welcome to the guild page stuff. Here is your welcome message.\</p\>
\<p\>
\$[dump_value(args)]
\</p\>
      </Core:Property>
    </Core:PCProperties>
    <Notes:Notes/>
  </Core:PropertyContainer>
</object>
