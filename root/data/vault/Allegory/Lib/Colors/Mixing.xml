<object clone="/obj/properties" owner="tunk_bodin">
  <Core:PropertyContainer>
    <Ur:UrObject/>
    <Core:PCProperties>
      <Core:Property property="access">
         (\{ "balkaar" \})
      </Core:Property>
      <Core:Property property="html:index">
         X[S] \<z dat="\$(UDat.Dat)" name="\$(UDat.Name)" host="\$(UDat.Host)"\>
\$["\<!DOCTYPE HTML PUBLIC \\"-//W3C//DTD HTML 4.01 Transitional//EN\\" \\"http://www.w3.org/TR/html4/loose.dtd\\"/\>"]
\<html lang="en"\>
\<head\>
  \<title\>Color Mixing\</title\>
\</head\>
\<body\>
\{? \| \$[if(\$host) return FALSE; if(member(\$name, Arr(this.access) )) return FALSE; return TRUE;] \|
\<h2\>Error\</h2\>
\<p\>You are not authorized to view this page. If you feel this is in error, please contact the game host.\</p\>
\|
\<h2\>Color List\</h2\>
\$[if(\$error) return "\<h2\>\<font color='red'\>"+Str(\$error)+"\</font\>\</h2\>\\n";
return "";]
\<p\>
\<zform\>
  \<action\>
    \$["";
    \$db = \$\{Allegory:Lib:Colors:ColorDB\};
    \$error = nil;
    if(\$color == "") \{ \$error = "No color entered"; return nil; \}
    if(\$base == "") \{ \$error = "No base color entered"; return nil; \}
    if(\$mix1 == "") \{ \$error = "No mix1 color entered"; return nil; \}
    if(\$mix2 == "") \{ \$error = "No mix2 color entered"; return nil; \}
    if(\$skill == "") \{ \$error = "No skill level entered"; return nil; \}
    \$skill = Int(\$skill);
    /* first, search for conflicts */
    for(\$i=0;\$i\<=24;\$i++) \{
      if(\$info = Get(\$db, "skill:"+Str(\$i))) \{
        if(\$info[\$mix1] \&\& \$info[\$mix1][\$mix2]) \{
          \$error = "Warning! This mix already exists at level "+Str(\$i)+"!";
          return nil;
        \}
      \} else \{
        Set(\$db, "skill:"+Str(\$i), ([ ]));
      \}
    \}
    /* then search to make sure the mixing colors exist */
    \$t1 = \$mix1;
    \$t2 = \$mix2;
    for(\$i=0;\$i\<=\$skill\&\&\$i\<=24\&\&(\$t1\|\|\$t2);\$i++) \{
      \$info = Get(\$db, "skill:"+Str(\$i));
      \$indices = map_indices(\$info);
      for(\$j=0;\$j\<sizeof(\$indices)\&\&(\$t1\|\|\$t2);\$j++) \{
        \$indices2 = map_indices(\$info[\$indices[\$j]]);
        for(\$k=0;\$k\<sizeof(\$indices2)\&\&(\$t1\|\|\$t2);\$k++) \{
          if(\$t1 == \$info[\$indices[\$j]][\$indices2[\$k]][0])
            \$t1 = nil;
          if(\$t2 == \$info[\$indices[\$j]][\$indices2[\$k]][0])
            \$t2 = nil;
        \}
      \}
    \}
    if(\$t1 \&\& \$t2) \{
      \$error = "Warning! "+\$t1+" and "+\$t2+" are not already in the color list at level "+Str(\$skill)+" or below!";
      return nil;
    \} else if(\$t1) \{
      \$error = "Warning! "+\$t1+" is not already in the color list at level "+Str(\$skill)+" or below!";
      return nil;
    \} else if(\$t2) \{
      \$error = "Warning! "+\$t2+" is not already in the color list at level "+Str(\$skill)+" or below!";
      return nil;
    \}
    \$info = Get(\$db, "skill:"+Str(\$skill));
    if(!\$info[\$mix1]) \$info[\$mix1] = ([ ]);
    \$info[\$mix1][\$mix2] = (\{ \$color, \$base \});
    \$error = "Color combination added!";]
    \<redirect propob="\$(this)" prop="index" error="\$(error)"/\>
  \</action\>
  \<b\>Add a color to the database:\</b\>\<br/\>
  \<table\>
    \<tr\>\<td\>Color\</td\>
    \<td\>Base\</td\>
    \<td\>Mix1\</td\>
    \<td\>Mix2\</td\>
    \<td\>Skill\</td\>
    \<td\>\\\&nbsp;\</td\>\</tr\>
    \<tr\>\<td\>\<input name="color"/\>\</td\>
    \<td\>\<select name="base"\>
      \<option\>black\</option\>
      \<option\>blue\</option\>
      \<option\>green\</option\>
      \<option\>red\</option\>
      \<option\>white\</option\>
      \<option\>yellow\</option\>
    \</select\>\</td\>
    \<td\>\<input name="mix1"/\>\</td\>
    \<td\>\<input name="mix2"/\>\</td\>
    \<td\>\<select name="skill"\>
      \<option\>1\</option\>
      \<option\>2\</option\>
      \<option\>3\</option\>
      \<option\>4\</option\>
      \<option\>5\</option\>
      \<option\>6\</option\>
      \<option\>7\</option\>
      \<option\>8\</option\>
      \<option\>9\</option\>
      \<option\>10\</option\>
      \<option\>11\</option\>
      \<option\>12\</option\>
      \<option\>13\</option\>
      \<option\>14\</option\>
      \<option\>15\</option\>
      \<option\>16\</option\>
      \<option\>17\</option\>
      \<option\>18\</option\>
      \<option\>19\</option\>
      \<option\>20\</option\>
      \<option\>21\</option\>
      \<option\>22\</option\>
      \<option\>23\</option\>
      \<option\>24\</option\>
    \</select\>\</td\>
    \<td\>\<input type="submit"/\>\</td\>\</tr\>
  \</table\>
\</zform\>
\</p\>\\\&nbsp;\<br/\>
\<table border="1"\>
  \<tr\>\<td\>COLOR\</td\>\<td\>BASE\</td\>\<td\>Mix1\</td\>\<td\>Mix2\</td\>\<td\>SKILL\</td\>\</tr\>
\</table\>
\$[string output;
output = "";
\$db = \$\{Allegory:Lib:Colors:ColorDB\};
if(\$check) \{
\$checked = (\{ "black", "blue", "green", "red", "white", "yellow" \});
\$matches = ([ ]);
\$conflicts = "";
for(\$i=0;\$i\<=24;\$i++) \{
  \$checking = (\{ \});
  if(\$mixes = Get(\$db, "skill:"+Str(\$i))) \{
    for(\$j=0;\$j\<sizeof(map_indices(\$mixes));\$j++) \{
      for(\$k=0;\$k\<sizeof(map_indices(\$mixes[map_indices(\$mixes)[\$j]]));\$k++) \{
        \$checking \|= (\{ (\{ \$mixes[map_indices(\$mixes)[\$j]][map_indices(\$mixes[map_indices(\$mixes)[\$j]])[\$k]][0], map_indices(\$mixes)[\$j], map_indices(\$mixes[map_indices(\$mixes)[\$j]])[\$k] \}) \});
      \}
    \}
  \}
  \$size = sizeof(\$checking)+1;
  while(sizeof(\$checking)) \{
    if(\$size \<= sizeof(\$checking)) \{
      \$size = sizeof(\$checking);
      for(\$j=0;\$j\<\$size;\$j++) \{
        \$conflicts += "Uncreateable color: "+\$checking[\$j][0]+" as ";
        if(!member(\$checking[\$j][1], \$checked) \&\& !member(\$checking[\$j][2], \$checked)) \{
          \$conflicts += \$checking[\$j][1]+" and "+\$checking[\$j][2];
        \} else if(!member(\$checking[\$j][1], \$checked)) \{
          \$conflicts += \$checking[\$j][1];
        \} else \{
          \$conflicts += \$checking[\$j][2];
        \}
        \$conflicts += " cannot be mixed at skill level "+Str(\$i)+".\<br/\>\\n";
      \}
      \$checking = (\{ \});
    \}
    \$size = sizeof(\$checking);
    for(\$j=0;\$j\<\$size;\$j++) \{
      /* Check that the colors are already mixable */
      if(member(\$checking[\$j][1], \$checked) \&\& member(\$checking[\$j][2], \$checked)) \{
        /* check there isn't a conflict */
        if(\$matches[\$checking[\$j][1]] \&\& member(\$checking[\$j][2], \$matches[\$checking[\$j][1]])) \{
          /* conflict found */
          \$conflicts += \$checking[\$j][0]+" CLASH level "+Str(\$i)+" - Mixing "+\$checking[\$j][1]+" and "+\$checking[\$j][2]+" is already a recipe for a color at a lower level!\<br/\>\\n";
        \} else \{
          /* we can make this color. Add it to the list of checked colors */
          \$checked \|= (\{ \$checking[\$j][0] \});
          if(!\$matches[\$checking[\$j][1]]) \$matches[\$checking[\$j][1]] = (\{ \});
          \$matches[\$checking[\$j][1]] \|= (\{ \$checking[\$j][2] \});
        \}
        \$checking[\$j] = nil;
      \}
    \}
    \$checking -= (\{ nil \});

  \}
\}
if(\$conflicts \&\& \$conflicts != "")
  output += "\<h2\>Color Conflicts\</h2\>\\n\<font color='red'\>"+\$conflicts+"\</font\>\\n";
\}
for(\$i=0;\$i\<=24;\$i++) \{
  if(\$mixes = Get(\$db, "skill:"+Str(\$i))) \{
    output += "\<h3\>Skill level "+Str(\$i)+"\</h3\>\\n";
    output += "\<table border='1'\>";
    for(\$j=0;\$j\<sizeof(map_indices(\$mixes));\$j++) \{
      for(\$k=0;\$k\<sizeof(map_indices(\$mixes[map_indices(\$mixes)[\$j]]));\$k++) \{
        output += "\<tr\>\<td\>";
        output += \$mixes[map_indices(\$mixes)[\$j]][map_indices(\$mixes[map_indices(\$mixes)[\$j]])[\$k]][0]+"\</td\>\<td\>";
        output += \$mixes[map_indices(\$mixes)[\$j]][map_indices(\$mixes[map_indices(\$mixes)[\$j]])[\$k]][1]+"\</td\>\<td\>";
        output += map_indices(\$mixes)[\$j]+"\</td\>\<td\>";
        output += map_indices(\$mixes[map_indices(\$mixes)[\$j]])[\$k]+"\</td\>\<td\>";
        output += Str(\$i)+"\</td\>\</tr\>\\n";
      \}
    \}
    output += "\</table\>\\n";
  \}
\}
return output;]
\}
\</body\>
\</html\>
\</z\>
      </Core:Property>
      <Core:Property property="merry:lib:mixing">
         X[M] /* mix two colored objects together */
object colorDB;
string color1, color2, base1, base2, *result1, *result2, *backup1, *backup2;
int skill, i;

/* check the objects being mixed */
if(!\$iob \|\| !\$dob) return TRUE;
if(NRefsEqual(\$iob[0], \$dob[0])) \{
  EmitTo(\$actor, "Did you really just intend to mix "+Describe(\$dob[0])+" with itself?");
  return TRUE;
\}
if(NRefOb(\$dob[0])."trait:objecttype" != NRefOb(\$iob[0])."trait:objecttype") \{
  EmitTo(\$actor, "These two items are not mixable. If you feel this is in error, please @assist.");
  return TRUE;
\}

/* Find the actors skill in mixing colours */
skill = Int(\$actor."skill:alteration:dyeing");

/* get the colors that we are mixing */
color1 = Get(NRefOb(\$dob[0]), "trait:color");
if(Get(NRefOb(\$dob[0]), "trait:colorbase")) \{
  base1 = Get(NRefOb(\$dob[0]), "trait:colorbase");
\} else \{
  base1 = color1;
\}

color2 = Get(NRefOb(\$iob[0]), "trait:color");
if(Get(NRefOb(\$iob[0]), "trait:colorbase")) \{
  base2 = Get(NRefOb(\$iob[0]), "trait:colorbase");
\} else \{
  base2 = color2;
\}

result1 = (\{ \});
result2 = (\{ \});
backup1 = (\{ \});
backup2 = (\{ \});

/* Get a chart of colors that we can make */
colorDB = \$\{Allegory:Lib:Colors:ColorDB\};
for(i = 0; i \<= skill; i++) \{
  if(\$info = Get(colorDB, "skill:"+Str(i))) \{
    if(!sizeof(result1)) \{
      if(\$info[color1] \&\& \$info[color1][color2])
        result1 = \$info[color1][color2];
    \}
    if(!sizeof(result2)) \{
      if(\$info[color2] \&\& \$info[color2][color1])
        result2 = \$info[color2][color1];
    \}
    if(!sizeof(result1)) \{
      if(\$info[color1] \&\& \$info[color1][base2]) \{
        backup1 = \$info[color1][base2];
      \} else if(\$info[base1] \&\& \$info[base1][color2]) \{
        backup1 = \$info[base1][color2];
      \} else if(\$info[base1] \&\& \$info[base1][base2]) \{
        backup1 = \$info[base1][base2];
      \}
    \}
    if(!sizeof(result2)) \{
      if(\$info[color2] \&\& \$info[color2][base1]) \{
        backup2 = \$info[color2][base1];
      \} else if(\$info[base2] \&\& \$info[base2][color1]) \{
        backup2 = \$info[base2][color1];
      \} else if(\$info[base2] \&\& \$info[base2][base1]) \{
        backup2 = \$info[base2][base1];
      \}
    \}
    if(sizeof(result1) \&\& sizeof(result2)) break;
  \}
\}

if(sizeof(result1)) \{
  NRefOb(\$dob[0])."trait:color" = result1[0];
  NRefOb(\$dob[0])."trait:colorbase" = result1[1];
\} else if (sizeof(result2)) \{
  NRefOb(\$dob[0])."trait:color" = result2[0];
  NRefOb(\$dob[0])."trait:colorbase" = result2[1];
\} else if (sizeof(backup1)) \{
  NRefOb(\$dob[0])."trait:color" = backup1[0];
  NRefOb(\$dob[0])."trait:colorbase" = backup1[1];
\} else if (sizeof(backup2)) \{
  NRefOb(\$dob[0])."trait:color" = backup2[0];
  NRefOb(\$dob[0])."trait:colorbase" = backup2[1];
\}

if(sizeof(result2)) \{
  NRefOb(\$iob[0])."trait:color" = result2[0];
  NRefOb(\$iob[0])."trait:colorbase" = result2[1];
\} else if (sizeof(result1)) \{
  NRefOb(\$iob[0])."trait:color" = result1[0];
  NRefOb(\$iob[0])."trait:colorbase" = result1[1];
\} else if (sizeof(backup2)) \{
  NRefOb(\$iob[0])."trait:color" = backup2[0];
  NRefOb(\$iob[0])."trait:colorbase" = backup2[1];
\} else if (sizeof(backup1)) \{
  NRefOb(\$iob[0])."trait:color" = backup1[0];
  NRefOb(\$iob[0])."trait:colorbase" = backup1[1];
\}

EmitTo(\$actor, "You end up with "+Describe(\$dob[0])+" and "+Describe(\$iob[0])+".");

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:mixing-bak">
         X[M] /* mix two colored objects together */
object color_chart;
string color1, color2, base1, base2, newcolor1, newcolor2, newbase1, newbase2;

/* check the objects being mixed */
if(!\$iob \|\| !\$dob) return TRUE;
if(NRefsEqual(\$iob[0], \$dob[0])) \{
  EmitTo(\$actor, "Did you really just intend to mix "+Describe(\$dob[0])+" with itself?");
  return TRUE;
\}
if(NRefOb(\$dob[0])."trait:objecttype" != NRefOb(\$iob[0])."trait:objecttype") \{
  EmitTo(\$actor, "These two items are not mixable. If you feel this is in error, please @assist.");
  return TRUE;
\}

/* Find the actors skill in mixing paints */
\$skill = 1;
if(\$actor."skill:social:artist") \$skill = \$actor."skill:social:artist";
if(\$actor."career:social:artist" \&\& (\$actor."career:social:artist" \> \$skill)) \$skill = \$actor."career:social:artist";

/* get the colors that we are mixing */
\$addcolor = Get(NRefOb(\$dob[0]), "trait:color");
if(Get(NRefOb(\$dob[0]), "trait:colorbase")) \{
  \$addbase = Get(NRefOb(\$dob[0]), "trait:colorbase");
\} else \{
  \$addbase = \$addcolor;
\}

\$oldcolor = Get(NRefOb(\$iob[0]), "trait:color");
if(Get(NRefOb(\$iob[0]), "trait:colorbase")) \{
  \$oldbase = Get(NRefOb(\$iob[0]), "trait:colorbase");
\} else \{
  \$oldbase = \$oldcolor;
\}

/* get the brightness */
if(Get(NRefOb(\$iob[0]), "trait:brightness")) \{
  \$bright1 = Get(NRefOb(\$iob[0]), "trait:brightness");
\}
if(Get(NRefOb(\$dob[0]), "trait:brightness")) \{
  \$bright2 = Get(NRefOb(\$dob[0]), "trait:brightness");
\}
if(\$bright1 \&\& \$bright2 \&\& (\$bright1 == \$bright2)) \{
  \$bright = \$bright1;
\} else if(\$bright1 \&\& !\$bright2) \{
  \$bright = \$bright1;
\} else if(\$bright2 \&\& !\$bright1) \{
  \$bright = \$bright2;
\} else \{
  \$bright = nil;
\}

/* Get a chart of colors that we can make */
\$chart = ([ ]);
for(\$i = \$skill; \$i \> 0; \$i--) \{
  if(\$bright \&\& Get(\$\{IronClaw:Lib:ColorDB\}, "colorchart:" +\$oldbase+ ":"+\$bright+":" +Str(\$i))) \{
    \$chart += Get(\$\{IronClaw:Lib:ColorDB\}, "colorchart:" +\$oldbase+ ":"+\$bright+":" +Str(\$i));
  \}
  if(Get(\$\{IronClaw:Lib:ColorDB\}, "colorchart:" +\$oldbase+ ":" +Str(\$i))) \{
    \$chart += Get(\$\{IronClaw:Lib:ColorDB\}, "colorchart:" +\$oldbase+ ":" +Str(\$i));
  \}
\}

/* Get a chart of color, with the order reversed */
\$revchart = ([ ]);
for(\$i = \$skill; \$i \> 0; \$i--) \{
  if(\$bright \&\& Get(\$\{IronClaw:Lib:ColorDB\}, "colorchart:" +\$addbase+ ":"+\$bright+":" +Str(\$i))) \{
    \$revchart += Get(\$\{IronClaw:Lib:ColorDB\}, "colorchart:" +\$addbase+ ":"+\$bright+":" +Str(\$i));
  \}
  if(Get(\$\{IronClaw:Lib:ColorDB\}, "colorchart:" +\$addbase+ ":" +Str(\$i))) \{
    \$revchart += Get(\$\{IronClaw:Lib:ColorDB\}, "colorchart:" +\$addbase+ ":" +Str(\$i));
  \}
\}

/* Get the default chart, just in case */
\$defchart = ([ ]);
if(\$bright \&\& Get(\$\{IronClaw:Lib:ColorDB\}, "colorchart:default:"+\$bright))
  \$defchart = Get(\$\{IronClaw:Lib:ColorDB\}, "colorchart:default:"+\$bright);
\$defchart += Get(\$\{IronClaw:Lib:ColorDB\}, "colorchart:default");

/* Update the paints */

/* update the IOB first */

if(\$chart[\$addcolor]) \{
  \$newcolor = \$chart[\$addcolor];
\} else if(\$chart[\$addbase]) \{
  \$newcolor = \$chart[\$addbase];
\} else if(\$revchart[\$oldcolor]) \{
  \$newcolor = \$revchart[\$oldcolor];
\} else if(\$revchart[\$oldbase]) \{
  \$newcolor = \$revchart[\$oldbase];
\} else \{
  \$newcolor = nil;
\}

/* If we didn't get a color, pick a default color */
if(!\$newcolor) \{
  if(\$defchart[\$oldcolor]) \{
    \$newcolor = \$defchart[\$oldcolor];
  \} else if(\$defchart[\$oldbase]) \{
    \$newcolor = \$defchart[\$oldbase];
  \} else \{
    \$newcolor = (\{ "brown", "brown" \});
  \}
\}

\$newcolor = Arr(\$newcolor);

NRefOb(\$iob[0])."trait:color" = \$newcolor[0];
if(sizeof(\$newcolor) \> 1)
  NRefOb(\$iob[0])."trait:colorbase" = \$newcolor[1];
NRefOb(\$iob[0])."trait:brightness" = \$bright;

/* update the DOB second */

if(\$revchart[\$oldcolor]) \{
  \$newcolor = \$revchart[\$oldcolor];
\} else if(\$revchart[\$oldbase]) \{
  \$newcolor = \$revchart[\$oldbase];
\} else if(\$chart[\$addcolor]) \{
  \$newcolor = \$chart[\$addcolor];
\} else if(\$chart[\$addbase]) \{
  \$newcolor = \$chart[\$addbase];
\} else \{
  \$newcolor = nil;
\}

/* If we didn't get a color, pick a default color */
if(!\$newcolor) \{
  if(\$defchart[\$addcolor]) \{
    \$newcolor = \$defchart[\$addcolor];
  \} else if(\$defchart[\$addbase]) \{
    \$newcolor = \$defchart[\$addbase];
  \} else \{
    \$newcolor = (\{ "brown", "brown" \});
  \}
\}

\$newcolor = Arr(\$newcolor);

NRefOb(\$dob[0])."trait:color" = \$newcolor[0];
if(sizeof(\$newcolor) \> 1)
  NRefOb(\$dob[0])."trait:colorbase" = \$newcolor[1];
NRefOb(\$dob[0])."trait:brightness" = \$bright;

EmitTo(\$actor, "You end up with "+Describe(\$dob[0])+" and "+Describe(\$iob[0])+".");

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:mixing-bak2">
         X[M] /* mix two colored objects together */
object colorDB;
string color1, color2, base1, base2, *newcolor, bright, bright2;
int skill, i;

/* check the objects being mixed */
if(!\$iob \|\| !\$dob) return TRUE;
if(NRefsEqual(\$iob[0], \$dob[0])) \{
  EmitTo(\$actor, "Did you really just intend to mix "+Describe(\$dob[0])+" with itself?");
  return TRUE;
\}
if(NRefOb(\$dob[0])."trait:objecttype" != NRefOb(\$iob[0])."trait:objecttype") \{
  EmitTo(\$actor, "These two items are not mixable. If you feel this is in error, please @assist.");
  return TRUE;
\}

/* Find the actors skill in mixing colours */
skill = 0;
skill += Int(\$actor."skill:social:artist");
skill += Int(\$actor."career:social:artist");

/* get the colors that we are mixing */
color1 = Get(NRefOb(\$dob[0]), "trait:color");
if(Get(NRefOb(\$dob[0]), "trait:colorbase")) \{
  base1 = Get(NRefOb(\$dob[0]), "trait:colorbase");
\} else \{
  base1 = color1;
\}

color2 = Get(NRefOb(\$iob[0]), "trait:color");
if(Get(NRefOb(\$iob[0]), "trait:colorbase")) \{
  base2 = Get(NRefOb(\$iob[0]), "trait:colorbase");
\} else \{
  base2 = color2;
\}

/* get the brightness */
if(Get(NRefOb(\$iob[0]), "trait:brightness")) \{
  bright = Get(NRefOb(\$iob[0]), "trait:brightness");
\}
if(Get(NRefOb(\$dob[0]), "trait:brightness")) \{
  bright2 = Get(NRefOb(\$dob[0]), "trait:brightness");
\}
if(bright2 \&\& !bright) \{
  bright = bright2;
\} else if(bright \&\& bright2 \&\& (bright != bright2)) \{
  bright = nil;
\}

/* Get a chart of colors that we can make */
colorDB = nil /* defunct */;
\$chart = ([ ]);
for(i = 0; i \<= skill; i++) \{
  if(Get(colorDB, "colorchart:" +base1+ ":" +Str(i)))
    \$chart += Get(colorDB, "colorchart:" +base1+ ":" +Str(i));
  if(bright \&\& Get(colorDB, "colorchart:" +base1+ ":"+bright+":" +Str(i)))
    \$chart += Get(colorDB, "colorchart:" +base1+ ":"+bright+":" +Str(i));
\}

/* Get a chart of color, with the order reversed */
\$revchart = ([ ]);
for(i = 0; i \<= skill; i++) \{
  if(Get(colorDB, "colorchart:" +base2+ ":" +Str(i)))
    \$revchart += Get(colorDB, "colorchart:" +base2+ ":" +Str(i));
  if(bright \&\& Get(colorDB, "colorchart:" +base2+ ":"+bright+":" +Str(i)))
    \$revchart += Get(colorDB, "colorchart:" +base2+ ":"+bright+":" +Str(i));
\}

/* Get the default chart, just in case */
\$defchart = ([ ]);
if(bright \&\& Get(colorDB, "colorchart:default:"+bright))
  \$defchart = Get(colorDB, "colorchart:default:"+bright);
\$defchart += Get(colorDB, "colorchart:default");

/* output some stuff for debug */
/*
EmitTo(\$actor, dump_value(\$chart));
EmitTo(\$actor, dump_value(\$revchart));
EmitTo(\$actor, color1+" - "+color2);
*/

/* Update the paints */

/* update the DOB first */

if(\$chart[color2]) \{
  newcolor = Arr(\$chart[color2]);
\} else if(\$chart[base2]) \{
  newcolor = Arr(\$chart[base2]);
\} else if(\$revchart[color1]) \{
  newcolor = Arr(\$revchart[color1]);
\} else if(\$revchart[base1]) \{
  newcolor = Arr(\$revchart[base1]);
\} else \{
  newcolor = nil;
\}

/* If we didn't get a color, pick a default color */
if(!newcolor) \{
  if(\$defchart[color1]) \{
    newcolor = Arr(\$defchart[color1]);
  \} else if(\$defchart[base1]) \{
    newcolor = Arr(\$defchart[base1]);
  \} else \{
    newcolor = (\{ "brown", "red" \});
  \}
\}

NRefOb(\$dob[0])."trait:color" = newcolor[0];
if(sizeof(newcolor) \> 1)
  NRefOb(\$dob[0])."trait:colorbase" = newcolor[1];
NRefOb(\$dob[0])."trait:brightness" = bright;

/* update the IOB second */
if(\$revchart[color1]) \{
  newcolor = Arr(\$revchart[color1]);
\} else if(\$revchart[base1]) \{
  newcolor = Arr(\$revchart[base1]);
\} else if(\$chart[color2]) \{
  newcolor = Arr(\$chart[color2]);
\} else if(\$chart[base2]) \{
  newcolor = Arr(\$chart[base2]);
\} else \{
  newcolor = nil;
\}

/* If we didn't get a color, pick a default color */
if(!newcolor) \{
  if(\$defchart[color2]) \{
    newcolor = Arr(\$defchart[color2]);
  \} else if(\$defchart[base2]) \{
    newcolor = Arr(\$defchart[base2]);
  \} else \{
    newcolor = (\{ "brown", "brown" \});
  \}
\}

NRefOb(\$iob[0])."trait:color" = newcolor[0];
if(sizeof(newcolor) \> 1)
  NRefOb(\$iob[0])."trait:colorbase" = newcolor[1];
NRefOb(\$iob[0])."trait:brightness" = bright;

EmitTo(\$actor, "You end up with "+Describe(\$dob[0])+" and "+Describe(\$iob[0])+".");

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:mixing_one">
         X[M] if(NRefOb(\$dob[0])."trait:objecttype" == NRefOb(\$iob[0])."trait:objecttype") \{                
  return Call (\$this, "mixing_two");            
return TRUE;           
\} else \{                 
EmitTo(\$actor, "These two items are not mixable. If you feel this is in error, please @assist.");             
return TRUE;             
\}
      </Core:Property>
      <Core:Property property="merry:lib:mixing_two">
         X[M] if(\$actor."skill:social:artist" \&\& \$actor."career:social:artist") \{           
/* EmitTo(\$actor, "Both skills are caught.");  */          
\$skill = Get(\$actor, "skill:social:artist");           
/* EmitTo(\$actor, \$skill+ " is the skill.");   */         
\$car = Get(\$actor, "career:social:artist");           
/* EmitTo(\$actor, \$car+ " is career.");    */        
         
if(\$skill \>= \$car) \{           
/* EmitTo(\$actor, "Skill was higher."); */           
\$var = \$skill;           
/* EmitTo(\$actor, \$var+ " is var.");   */         
\} else \{           
/* EmitTo(\$actor, "Career is higher.");   */         
\$var = \$car;           
/* EmitTo(\$actor, \$var+ " is var.");   */         
\}           
        
if(\$var \>= 12) \{        
\$var = 12;        
/* EmitTo(\$actor, "Var beyond cap, reduced to " +\$var+ ".");  */     
\}        
           
\} else if(\$actor."skill:social:artist") \{           
/* EmitTo(\$actor, "Only has skill.");  */          
\$var = Get(\$actor, "skill:social:artist");           
/* EmitTo(\$actor, \$var+ " is var.");  */          
\} else if(\$actor."career:social:artist") \{           
/* EmitTo(\$actor, "Only has career.");  */          
\$var = Get(\$actor, "career:social:artist");           
/* EmitTo(\$actor, \$var+ " is var.");   */         
\} else \{           
/* EmitTo(\$actor, "Called default.");   */         
\$var = "default";           
/* EmitTo(\$actor, \$var+ " is var.");   */         
\}           
          
          
\$prop = "trait:color";               
/* EmitTo(\$actor, \$prop+ " is caught.");  */              
\$addcolor = Get(NRefOb(\$iob[0]), "trait:color");              
 /* EmitTo(\$actor, "Addcolor = " +\$addcolor+ ".");  */             
\$oldcolor = Get(NRefOb(\$dob[0]), "trait:color");                
 /* EmitTo(\$actor, "Oldcolor = " +\$oldcolor+ ".");   */              
\$chart = "colorchart:" +\$oldcolor+ ":" +\$var;              
          
if(Get(\$\{IronClaw:Lib:ColorDB\}, \$chart)) \{           
\$newcolorlist = Get(\$\{IronClaw:Lib:ColorDB\}, \$chart);              
 /* EmitTo(\$actor, "Main Colorchart is caught.");  */            
\} else \{        
/* Reverse the colors and check for a secondary colorchart. */               
\$oldcolor = Get(NRefOb(\$iob[0]), "trait:color");                       
\$addcolor = Get(NRefOb(\$dob[0]), "trait:color");                         
\$chart = "colorchart:" +\$oldcolor+ ":" +\$var;              
if(Get(\$\{IronClaw:Lib:ColorDB\}, \$chart)) \{           
\$newcolorlist = Get(\$\{IronClaw:Lib:ColorDB\}, \$chart);              
 /* EmitTo(\$actor, "Secondary Colorchart is caught.");  */    
\} else \{   
\$newcolorlist = Get(\$\{IronClaw:Lib:ColorDB\}, "colorchart:default");              
 /* EmitTo(\$actor, "Default Colorchart is caught.");   */          
\}        \}   
       
if(!\$newcolorlist[\$addcolor]) \{       
\$newcolor = "brown";       
\} else \{        
\$newcolor = \$newcolorlist[\$addcolor];           
\}       
             
 /* EmitTo(\$actor, "Newcolor = " +\$newcolor+ ".");  */                      
Set(NRefOb(\$dob[0]), \$prop, \$newcolor);                  
 /* EmitTo(\$actor, "Prop is set.");  */                         
Slay(NRefOb(\$iob[0]));                   
 /* EmitTo(\$actor, "Spare dye is slayed.");   */                        
EmitTo(\$actor, "You made " +\$newcolor+ ".");                  
return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1137645720, "tunk_bodin", "X", 1138808150, "tunk_bodin", "X", 1138808593, "tunk_bodin", "X", 1138808724, "tunk_bodin", "X", 1138809277, "tunk_bodin", "X", 1138809308, "tunk_bodin", "X", 1138809354, "tunk_bodin", "X", 1138809406, "tunk_bodin", "X", 1138809552, "tunk_bodin", "X", 1138809593, "tunk_bodin", "X", 1138810032, "tunk_bodin", "X", 1138811419, "tunk_bodin", "X", 1138811526, "tunk_bodin", "X", 1138811585, "tunk_bodin", "X", 1138811878, "tunk_bodin", "X", 1138811945, "tunk_bodin", "X", 1138812219, "tunk_bodin", "X", 1138812480, "tunk_bodin", "X", 1138812520, "tunk_bodin", "X", 1138812575, "tunk_bodin", "X", 1138812634, "tunk_bodin", "X", 1138812796, "tunk_bodin", "X", 1138812872, "tunk_bodin", "X", 1138813298, "tunk_bodin", "X", 1138813350, "tunk_bodin", "X", 1138813534, "tunk_bodin", "X", 1138813653, "tunk_bodin", "X", 1138813705, "tunk_bodin", "X", 1138813728, "tunk_bodin", "X", 1138814083, "tunk_bodin", "X", 1138814457, "tunk_bodin", "X", 1138817418, "tunk_bodin", "X", 1138817817, "tunk_bodin", "X", 1138818001, "tunk_bodin", "X", 1138818068, "tunk_bodin", "X", 1138822426, "tunk_bodin", "X", 1138822541, "tunk_bodin", "X", 1138823073, "tunk_bodin", "X", 1138859596, "tunk_bodin", "E", 1138863802, "tunk_bodin", "X", 1138864183, "tunk_bodin", "X", 1138864231, "tunk_bodin", "X", 1138895943, "tunk_bodin", "X", 1138896160, "tunk_bodin", "X", 1138896369, "tunk_bodin", "X", 1138896731, "tunk_bodin", "X", 1139005948, "tunk_bodin", "X", 1139006115, "tunk_bodin", "X", 1139006147, "tunk_bodin", "X", 1139006409, "tunk_bodin", "X", 1139006784, "tunk_bodin", "X", 1139020582, "tonyd", "P", 1139020692, "tonyd", "P", 1139021252, "tonyd", "P", 1139021520, "tonyd", "P", 1139022162, "tonyd", "P", 1139022294, "tonyd", "P", 1139022330, "tonyd", "P", 1139022375, "tonyd", "P", 1139022483, "tonyd", "P", 1139022689, "tonyd", "P", 1139022699, "tonyd", "P", 1139022795, "tonyd", "P", 1139023582, "tonyd", "P", 1139023657, "tonyd", "P", 1139023866, "tonyd", "P", 1139024140, "tonyd", "P", 1139025052, "tonyd", "P", 1139025100, "tonyd", "P", 1139025256, "tonyd", "P", 1139025853, "tonyd", "P", 1139030099, "tonyd", "P", 1139030213, "tonyd", "P", 1139030281, "tonyd", "P", 1139030392, "tonyd", "P", 1139030872, "tonyd", "P", 1139031271, "tonyd", "P", 1139033958, "tonyd", "P", 1139034228, "tonyd", "P", 1139034272, "tonyd", "P", 1139035768, "tonyd", "P", 1139036101, "tonyd", "P", 1139036114, "tonyd", "P", 1163296070, "tonyd", "P", 1163297113, "tonyd", "P", 1163297127, "tonyd", "P", 1163297474, "tonyd", "P", 1163298332, "tonyd", "P", 1163298443, "tonyd", "P", 1163298510, "tonyd", "P", 1163298640, "tonyd", "P", 1163299084, "tonyd", "P", 1163299143, "tonyd", "P", 1163299165, "tonyd", "P", 1163299830, "tonyd", "P", 1163299935, "tonyd", "P", 1163300967, "tonyd", "P", 1163302846, "tonyd", "P", 1163302966, "tonyd", "P", 1163303264, "tonyd", "P", 1163304270, "tonyd", "P", 1163304369, "tonyd", "P", 1163311357, "tonyd", "P", 1167528946, "tonyd", "R", 1167529058, "tonyd", "P", 1167529385, "tonyd", "P", 1167529403, "tonyd", "P", 1167531762, "tonyd", "P", 1167531774, "tonyd", "P", 1167531829, "tonyd", "P", 1167531890, "tonyd", "P", 1167531913, "tonyd", "P", 1167531995, "tonyd", "P", 1167532037, "tonyd", "P", 1167532251, "tonyd", "P", 1167532408, "tonyd", "P", 1167532804, "tonyd", "P", 1167533163, "tonyd", "P", 1167533217, "tonyd", "P", 1167533356, "tonyd", "P", 1167537468, "tonyd", "P", 1168713958, "tunk_bodin", "R", 1199351554, "tonyd", "P", 1199351596, "tonyd", "P", 1199351646, "tonyd", "P", 1199351981, "tonyd", "P", 1199352078, "tonyd", "P", 1199352103, "tonyd", "P", 1199352155, "tonyd", "P", 1199352242, "tonyd", "P", 1199352313, "tonyd", "P", 1199352323, "tonyd", "P", 1199352434, "tonyd", "P", 1199352475, "tonyd", "P", 1199352496, "tonyd", "P", 1199352512, "tonyd", "P", 1199352528, "tonyd", "P", 1199352611, "tonyd", "P", 1199352628, "tonyd", "P", 1199352659, "tonyd", "P", 1199352704, "tonyd", "P", 1199352729, "tonyd", "P", 1199352743, "tonyd", "P", 1199352766, "tonyd", "P", 1199352845, "tonyd", "P", 1199352908, "tonyd", "P", 1199353035, "tonyd", "P", 1199353049, "tonyd", "P", 1199353102, "tonyd", "P", 1199353112, "tonyd", "P", 1199353163, "tonyd", "P", 1199353314, "tonyd", "P", 1199353550, "tonyd", "P", 1199353568, "tonyd", "P", 1199353674, "tonyd", "P", 1199353702, "tonyd", "P", 1199353732, "tonyd", "P", 1199353836, "tonyd", "P", 1199353879, "tonyd", "P", 1199354602, "tonyd", "P", 1199354624, "tonyd", "P", 1199354809, "tonyd", "P", 1199354924, "tonyd", "P", 1199355108, "tonyd", "P", 1199355237, "tonyd", "P", 1199355447, "tonyd", "P", 1199355508, "tonyd", "P", 1199355665, "tonyd", "P", 1199356131, "tonyd", "P", 1199356890, "tonyd", "P", 1199357554, "tonyd", "P", 1199357559, "tonyd", "P", 1199358325, "tonyd", "P", 1199358578, "tonyd", "P", 1199358671, "tonyd", "P", 1199358839, "tonyd", "P", 1199358903, "tonyd", "P", 1199359008, "tonyd", "P", 1199359115, "tonyd", "P", 1199359242, "tonyd", "P", 1199359411, "tonyd", "P", 1199359450, "tonyd", "P", 1199359468, "tonyd", "P", 1199359713, "tonyd", "P", 1199359956, "tonyd", "P", 1199360078, "tonyd", "P", 1199360167, "tonyd", "P", 1199360235, "tonyd", "P", 1199360330, "tonyd", "P", 1199360361, "tonyd", "P", 1199360509, "tonyd", "P", 1199360533, "tonyd", "P", 1199360568, "tonyd", "P", 1199360598, "tonyd", "P", 1199360662, "tonyd", "P", 1199360720, "tonyd", "P", 1199360728, "tonyd", "P", 1199360928, "tonyd", "P", 1199361235, "tonyd", "P", 1199361321, "tonyd", "P", 1199361367, "tonyd", "P", 1199361701, "tonyd", "P", 1199362044, "tonyd", "P", 1199362149, "tonyd", "P", 1199362203, "tonyd", "P", 1199362297, "tonyd", "P", 1199362350, "tonyd", "P", 1199362393, "tonyd", "P", 1199362568, "tonyd", "P", 1199362585, "tonyd", "P", 1199362603, "tonyd", "P", 1199362721, "tonyd", "P", 1199362895, "tonyd", "P", 1199363110, "tonyd", "P", 1199363172, "tonyd", "P", 1199363220, "tonyd", "P", 1199363417, "tonyd", "P", 1199421285, "tonyd", "P", 1199421464, "tonyd", "P", 1199422400, "tonyd", "P", 1199423554, "tonyd", "P", 1199433253, "tonyd", "P", 1199605946, "tonyd", "P", 1199605971, "tonyd", "P", 1199606038, "tonyd", "P", 1199607240, "tonyd", "P", 1199607265, "tonyd", "P", 1199607281, "tonyd", "P", 1199607493, "tonyd", "P", 1199607533, "tonyd", "P", 1199607605, "tonyd", "P", 1199607615, "tonyd", "P", 1199607687, "tonyd", "P", 1199607941, "tonyd", "P", 1199607950, "tonyd", "P", 1199607969, "tonyd", "P", 1572314852, "jominey", "E", 1572314950, "jominey", "R" \})
      </Core:Property>
    </Core:PCProperties>
    <Notes:Notes/>
  </Core:PropertyContainer>
</object>
