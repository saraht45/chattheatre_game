<object clone="/obj/properties" owner="jominey">
  <Core:PropertyContainer>
    <Ur:UrObject urobject="OBJ(Theatre:Lib:stages)"/>
    <Core:PCProperties>
      <Core:Property property="export:autoendpage">
         "end"
      </Core:Property>
      <Core:Property property="export:characterslots">
         3
      </Core:Property>
      <Core:Property property="export:html:helppopup">
         X[S] \$["\<!DOCTYPE HTML PUBLIC \\"-//W3C//DTD HTML 4.01 Transitional//EN\\" \\"http://www.w3.org/TR/html4/loose.dtd\\"/\>"]
\<html lang="en"\>
\<head\>
    \<title\>CharGen Help\</title\>
\</head\>
\<center\>
\<h2\>Character Generation Help\</h2\>
\<div id="1"\>\<table width="800px" border="0"\>
        \<tr\>
            \<td colspan="2"\>\<font size="4"\>\<p style="text-align:justify"\>Welcome! You are a traveler heading for the great city of Triskellian. Situated on the Bay of Auvrich, Triskellian is the center of all trade in Calabria. The streets are bustling with people of all walks of life vying for wealth and power. It is said in all languages, across all the lands: "Anything is possible in Triskellian!"\</p\>\</font\>\</td\>
        \</tr\>
\</table\>\<br/\>
\<table width="800px" border="1"\>
 \<tr\>
  \<td valign="top" width="100px"\>\<b\>Name\</b\>\</td\>
  \<td\>Choose a name that will stand out and fit the theme of Ironclaw Online. Please avoid the following: names that are too long or too difficult to type, chat room handles, names that contain numbers, names with titles (titles are earned through role-play). Think Italian Renaissance era.\</td\>
 \</tr\>
 \<tr\>
  \<td valign="top"\>\<b\>Age\</b\>\</td\>
  \<td\>Choose an age between 18 and 80. Child characters are not permitted in Ironclaw Online without special permission from staff.\</td\>
 \</tr\>
 \<tr\>
  \<td valign="top"\>\<b\>Birthplace\</b\>\</td\>
  \<td\>Choose a geographical location your character was born in. The Avoirdupois, Rinaldi, Doloreaux, and Bislcavret regions make up the continent of Calabria, and are available options to all players. Akoma is its own continent and is available as a storypoint option. Town names can be made up but should make sense for the chosen region. \<ul\> \<li\>\<b\>Avoirdupois: \</b\>The equine Avoirdupois claim that their noble line is the oldest and the proudest of all time. To back up their claim, the Avoirdupois maintain the oldest known castles and have the longest written records of anyone in Calabria. Steeped in tradition, members of this house are known for their unfailing courage, their unfaltering attention to their chivalric code, and their intolerance for everything not "Avoirdupois". The Avoirdupois are proud and strong, fleet of hoof and of mind. They control the vast sweeping northeastern plains of Calabria. Their great vineyards and sweeping manors are responsible for most of the specialized food production on the continent. They pride themselves on having the swiftest army in the land and the most rigorously trained knights. They wish to maintain their open fields and keep their heritage intact. Despite their military stance, they are also quite concerned with the knightly virtues of loyalty and honor. None could be said to be more pious than an Avoirdupois knight on the morning of battle. The Avoirdupois control a large estate of hills and plains to the east of Triskellian. They are bordered on the south by the Paludestris, on the east by ocean cliffs, on the west by Triskellian and the Granvert River, on the north-northwest by the Lyore River and the Doloreaux. Their fields and farms are well situated in the heart of their territory, well-protected from attack. The Sauldre river feeds the farms and supplies the Avoirdupois with a small river trade.\<br/\>\</li\> \<li\>\<b\>Rinaldi: \</b\> The rulers of Triskellian, the Rinaldi family is said to have come from ancient stock. Their family records have no mention of their arrival in Calabria. The Rinaldi maintain that they are the only 'true' inhabitants of the island and that they are single-handedly responsible for the demise of the Autarchs. As might be expected, the other great houses doubt this claim. However, this assertion does give the Rinaldi a certain credibility with the common people. Their business sense has brought them more wealth than any conquest could.\<br/\>\</li\> \<li\>\<b\>Bisclavret: \</b\>The Bisclavret were once part of the demesne of the Phelan. Over three hundred years ago, on the night of the "Seiscethir," the Bisclavret proclaimed themselves a seperate nation. They threw off the trappings of their old ways and embraced the "modernism" of the Church of S'allumer, of kings and vassals, of commerce and technology. Today they are a formidable Noble House in their own right. Their control over the northwestern forests of Calabria has given them the economic power to build an army second only to the Avoirdupois. The might of their mercenaries and the quality of their troops should not be doubted. They have pretensions of being a great power but are limited by endless infighting and lack of supplies. Their nobles are forever in a contest over land and status, each trying to best the other. Their shipping industry has been a priority of late and is growing. At one time, the Bisclavret thought they could compete with the port of Triskellian through lower taxes and dock fees. However, that resulted in Bisclavret shores becoming glutted with pirate ships, slavers' frigates, and an influx of unsavory characters onto their lands. In the past twenty years, the Bisclavret have tried to "reclaim" their shipyards, mostly by intimidating people to leave, sometimes seizing their ships and enslaving their crews. The Bisclavret holdings run along the southern coast, and deep into heavily-forested areas. They are bordered by the ocean on the south and west, and their territory stretches far into the dark northern forests. Somewhere in the deep northern woods is the blurry boundary between the Bisclavret and their tribal cousins the Phelan. Triskellian borders their southeastern reach. Directly to the east are the Rother and Granvert rivers and across them are the lands of the Doloreaux and Avoirdupois. While they and the Phelan may control the rocky mountains of the far north, no one has bothered to move into the inhospitable area, and prospectors have not found any significant mineral wealth.\<br/\>\</li\> \<li\>\<b\>Doloreaux: \</b\>The Doloreaux made their home on the northern part of Calabria, moving quickly to claim the area between the Rother and Lyore rivers. Their arrival was not without violence--the Doloreaux expansion was the first to buffet the Rinaldi, and later the Avoirdupois and Bisclavret. Young lords, eager to stake their claims to land, went to war whenever they thought they could win. After many victories and few losses, the Doloreaux have staked their claim... but they command no sea ports, and their farmland can only sustain their current population. The Doloreaux lands are bounded by the southern foothills of the Rothos Mountains. Their western border with the Bisclavret is the edge of the Rother River and the southern portion past the eastern face of the Walls of Calabria. It then proceeds down the western side of northern road past the beginning of the Granvert and stopping at the Three Corner fort. Their eastern border is the length of the Lyore River and they are faced there by the Avoirdupois. \<br/\>\</li\> \<li\>\<b\>Akoma: \</b\>Far removed from the feuding dynasties of Calabria is the great continent of Akoma. From the darkest jungles to glorious kingdoms, from barren deserts to shining oases, the lands of Akoma offer unknown riches with unknowable danger. For decades, Triskellian and the Akoman city Kandish have maintained peaceful trade relations via the Sailors Guild. Now, with hopes of bringing Akoma more into the fold, Grand Vezir Ja'an bin Tawfiq of Kandish has convinced the Triskellian Guild Council to recognize the true potential of their trade relationship by establishing an Akoman embassy--a safe haven for all Akoman visitors who wish to take advantage of what Triskellian has to offer.\</li\>\</ul\>For more information on regions, please read our \<a href="http://wp.skotos.net/ironclaw/category/introduction/"\>introduction\</a\>.\<br/\>A map of Calabria can be found \<a href="http://wp.skotos.net/ironclaw/wp-content/uploads/sites/2/2018/09/ico_map_cal_big-1.png"\>here\</a\>.\</td\>
 \</tr\>
 \<tr\>
  \<td valign="top"\>\<b\>Rank\</b\>\</td\>
  \<td\>By default, everyone starts as rank freedman. Additional rank options are available by storypoint purchase only (in-game @storypoint command).\</td\>
 \</tr\>
\</table\>
\</div\>
\<br/\>
\<div id="2"\>\<table width="800px" border="1"\>
  \<tr\>
    \<td valign="top" width="100px"\>\<b\>Species\</b\>\</td\>
    \<td\>The number of species options you have available is based on your account type. More options can be unlocked with storypoints.\</td\>
  \</tr\>
\</table\>
\</div\>
\<br/\>
\<div id="3"\>\<table width="800px" border="1"\>
  \<tr\>
    \<td valign="top" width="100px"\>\<b\>Appearance\</b\>\</td\>
    \<td\>This is where you describe how your character looks. Options may vary depending on your chosen species. More options can be unlocked with storypoints.\</td\>
  \</tr\>
\</table\>
\</div\>
\<br/\>
\<div id="4"\>\<table width="800px" border="1"\>
  \<tr\>
    \<td valign="top" width="100px"\>\<b\>Attributes\</b\>\</td\>
    \<td\>Attributes define the natural abilities of your character. All species start with base attribute values and these values will be altered based on what you define as your best, second best, and worst attributes. Your BEST attribute will add 5 points to its base value; your SECOND BEST will add 2 points to its base value. Your WORST will subtract 2 from its base value. \<ul\>\<li\>\<b\>Body:\</b\> Natural strength and hardiness. High body characters are able to do more damage in combat.\</li\>\<li\>\<b\>Speed: \</b\>Natural speed and agility. High speed characters can dodge attacks more effectively.\</li\>\<li\>\<b\>Will: \</b\>Stubborness and determination. Characters with high will can absorb more damage in combat.\</li\>\<li\>\<b\>Mind: \</b\> Smarts and wit. High mind characters make excellent craftsmen and traders.\</li\>\</ul\>\</td\>
  \</tr\>
\</table\>
\</div\>
\<br/\>
\<div id="5"\>\<table width="800px" border="1"\>
  \<tr\>
    \<td valign="top" width="100px"\>\<b\>Careers\</b\>\</td\>
    \<td\>Choose two careers that you character is trained in. Starting career options vary based on account type. All careers, even the ones not listed here, are available to be learned in-game. You career selections will also determine your starting items.\</td\>
  \</tr\>
  \<tr\>
    \<td valign="top"\>\<b\>Attire\</b\>\</td\>
    \<td\>Your character will enter the game with a set of clothes of your choosing.\</td\>
  \</tr\>
\</table\>
\</div\>
\<br/\>
\<div id="6"\>\<table width="800px" border="1"\>
  \<tr\>
    \<td valign="top" width="100px"\>\<b\>Location\</b\>\</td\>
    \<td\>This choice determines which part of town your character starts in. We recommend that new players start in Newtown. Docktown is considered a danger zone which means players may kill each other without consent.\</td\>
  \</tr\>
\</table\>
\</div\>
\<br/\>
\</center\>
\</html\>
      </Core:Property>
      <Core:Property property="export:html:index">
         X[S] \<z dat="\$(UDat.Dat)" name="\$(UDat.Name)"\>
\$[/* run some initial code */       
   ::initialize();       
   ::figureState();]
\$["\<!DOCTYPE HTML PUBLIC \\"-//W3C//DTD HTML 4.01 Transitional//EN\\" \\"http://www.w3.org/TR/html4/loose.dtd\\"/\>"]
\<html lang="en"\>
\<head\>
    \<title\>\$(title)\</title\>
    \<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/\>
    \$(Ironclaw:Theatre:CreateCharacter.xtra:javascript)
    \$(Ironclaw:Theatre:CreateCharacter.xtra:stylesheet)
\</head\>
   \<body onLoad="wrapper_onload();"\>
      \$(this.xtra:header)
      \<div id="main"\>
      \$[\$snippet = Get(\$this, "xtra:state:" + \$state);]
      \{? \| \$(snippet) \| \$(snippet) \|
            \<div id="infobox"\>No definition for state: '\$(state)'.\</div\>
      \}
      \</div\>
      \$(this.xtra:footer)
   \</body\>
\</html\>
\</z\>
      </Core:Property>
      <Core:Property property="export:premium_bonus_characterslots">
         2
      </Core:Property>
      <Core:Property property="export:startpage">
         "auto"
      </Core:Property>
      <Core:Property property="export:title">
         "Character Generator"
      </Core:Property>
      <Core:Property property="export:xtra:javascript">
         X[S] \<script language="javascript"\>
  function wrapper_onload() \\\{
      if (this.body_onload) \\\{
          body_onload();
      \\\}
  \\\}
  function toggle_note(note) \\\{
      content = document.getElementById(note + "_content");
      if (!this["NoteStatus"])
          this["NoteStatus"] = new Object();
      if (!this["NoteStatus"][note])
          this["NoteStatus"][note] = "off";
      if (this["NoteStatus"][note] == "on") \\\{
          this["NoteStatus"][note] = "off";
          content.innerHTML = '';
      \\\} else \\\{
          this["NoteStatus"][note] = "on";
          content.innerHTML = document.getElementById(note).innerHTML;
      \\\}
  \\\}
  function update_span(id) \\\{
    var span, optval;
    if(document.getElementById("span_" + id))
    \\\{
      span = document.getElementById("span_" + id);
      optval = document.getElementById("select_" + id);
      optval = optval.options[optval.selectedIndex].value.substring(0, 1);
      if (optval == 'a' \\\|\\\| optval == 'e' \\\|\\\| optval == 'i' \\\|\\\| optval == 'o' \\\|\\\|
        optval == 'u') \\\{
        span.innerHTML = 'an';
      \\\} else \\\{
        span.innerHTML = 'a';
      \\\}
    \\\}
  \\\}
  function reset_span(id, tosave) \\\{
      // Hack to work around FireFox blanking potentially hidden selects under
      // certain conditions.
      var span = document.getElementById("span_" + id);
      var list = tosave.split("\\\|");
      for (var i = 0; i \\\< list.length; i++) \\\{
          var optvals, optval;
          optvals = document.getElementsByName("input_" + list[i]);
          optval = optvals[optvals.length - 1];
          // alert("Saving select value for '" + list[i] + "': " + optval.options[optval.selectedIndex].value);
          this["SelectStatus"][list[i]] =
              optval.options[optval.selectedIndex].value;
      \\\}
      // Refresh contents.
      span.innerHTML = document.getElementById(id).innerHTML;
      for (var i = 0; i \\\< list.length; i++) \\\{
          var selval = this["SelectStatus"][list[i]];
          var optvals, optval;
          optvals = document.getElementsByName("input_" + list[i]);
          optval = optvals[optvals.length - 1];
          // alert("Restoring select value: " + selval);
          for (var j = 0; j \\\< optval.options.length; j++) \\\{
              if (optval.options[j].value == selval) \\\{
                  optval.selectedIndex = j;
                  // alert("SelectedIndex is now set to: " + j);
                  optval.options[j].selected = true;
              \\\}
          \\\}
      \\\}
  \\\}
  function hide_span(id, id_select, id_value, tosave, tosave_text) \\\{
      // This script uses the last instance of each select it finds to rescue/restore
      // the tosave values, to work around the misfeature that getElementById
      // only returns one object even when there is more than one and it might be the
      // placeholder select instead of the actual one, meaning it has the wrong value.
      var span, optval;
      span = document.getElementById("span_" + id);
      optval = document.getElementById("select_" + id_select);
      optval = optval.options[optval.selectedIndex].value;
      if (!this["SelectStatus"]) \\\{
          this["SelectStatus"] = new Object();
      \\\}
      if (!this["SavedSpans"]) \\\{
          this["SavedSpans"] = new Object();
      \\\}
      if (optval == id_value) \\\{
         if (span.innerHTML != '') \\\{
            if (tosave.length \\\> 0) \\\{
                var list = tosave.split("\\\|");
                for (var i = 0; i \\\< list.length; i++) \\\{
                    var optvals, optval;
                    optvals = document.getElementsByName("input_" + list[i]);
                    optval = optvals[optvals.length - 1];
                    // alert("Saving select value for '" + list[i] + "': " + optval.options[optval.selectedIndex].value);
                    this["SelectStatus"][list[i]] =
                        optval.options[optval.selectedIndex].value;
                \\\}
            \\\}
            this["SavedSpans"][id] = span.innerHTML;
            span.innerHTML = '';
         \\\}
      \\\} else \\\{
        if (span.innerHTML == '') \\\{
            span.innerHTML = this["SavedSpans"][id];
            if (tosave.length \\\> 0) \\\{
                var list = tosave.split("\\\|");
                for (var i = 0; i \\\< list.length; i++) \\\{
                    var selval = this["SelectStatus"][list[i]];
                    var optvals, optval;
                    optvals = document.getElementsByName("input_" + list[i]);
                    optval = optvals[optvals.length - 1];
                    // alert("Restoring select value: " + selval);
                    for (var j = 0; j \\\< optval.options.length; j++) \\\{
                        if (optval.options[j].value == selval) \\\{
                            optval.selectedIndex = j;
                            // alert("SelectedIndex is now set to: " + j);
                            optval.options[j].selected = true;
                        \\\}
                    \\\}
                \\\}
            \\\}
        \\\}
      \\\}
  \\\}
  function barewin(url, title) \\\{
      open(url, title, 'width=800,height=600,hotkeys=no');
  \\\}
  function popupwin(url, title) \\\{
      open(url, title, 'width=800,height=600,hotkeys=no,resizable=yes');
  \\\}
//\</script\>
      </Core:Property>
      <Core:Property property="export:xtra:state:attributes">
         X[S] \\\<!-- This is where the user chooses any remaining options --\\\>
\<h4\>Create Character: Attributes\</h4\>\<sbr/\>
(\<a href="http://ironclaw.skotos.net/SAM/Prop/Ironclaw:Theatre:NewCreateCharacter/helppopup#4" target="_blank"\>help\</a\>)
\{? \| \$(error) \|
    \$[if(\$error == "no_selection") \$str = "You cannot leave an attribute selection blank.";        
          if(\$error == "duplicate_selection") \$str = "You cannot select an attribute twice.";        
          return ParseXML(\$str);]
\}
\$[if(\$body."temp:attr1") \$attr1_v = \$body."temp:attr1";      
    if(\$body."temp:attr2") \$attr2_v = \$body."temp:attr2";      
    if(\$body."temp:attr3") \$attr3_v = \$body."temp:attr3";]
\<zform actname="\$(name)" actbody="\$(body)" actdat="\$(dat)"\>
    \<p style="text-align:justify"\>
        Nearby, a several \{ children \| soldiers \| older ladies \| elderly men \} are bantering about who was better at what. You close your eyes as you reminisce over similar conversations you had with your friends. \<sbr/\>\<sbr/\>
        You recall being the
         \$[\$str = "\<select id='attr1' name='attr1' style='display:inline' onchange='updatelist1();'\>";      
            \$str += "\<option value='' selected='1'\>--\</option\>";      
            \$str += "\<option value='body'";      
            if(\$attr1_v == "body") \$str += "selected='1'";      
            \$str += "\>strongest\</option\>";      
            \$str += "\<option value='will'";      
            if(\$attr1_v == "will") \$str += "selected='1'";      
            \$str += "\>most strong-willed\</option\>";      
            \$str += "\<option value='speed'";      
            if(\$attr1_v == "speed") \$str += "selected='1'";      
            \$str += "\>fastest\</option\>";      
            \$str += "\<option value='mind'";      
            if(\$attr1_v == "mind") \$str += "selected='1'";      
            \$str += "\>smartest\</option\>";      
            \$str += "\</select\>";      
            return ParseXML(\$str);]
        among your group of friends. You were also known to be very
        \$[\$str = "\<select id='attr2' name='attr2' style='display:inline' onchange='updatelist2();'\>";      
            \$str += "\<option value='' selected='1'\>--\</option\>";      
            \$str += "\<option value='body'";      
            if(\$attr2_v == "body") \$str += "selected='1'";      
            if(\$attr1_v == "body") \$str += "disabled";      
            \$str += "\>strong\</option\>";      
            \$str += "\<option value='will'";      
            if(\$attr2_v == "will") \$str += "selected='1'";      
            if(\$attr1_v == "will") \$str += "disabled";      
            \$str += "\>string-willed\</option\>";      
            \$str += "\<option value='speed'";      
            if(\$attr2_v == "speed") \$str += "selected='1'";      
            if(\$attr1_v == "speed") \$str += "disabled";      
            \$str += "\>fast\</option\>";      
            \$str += "\<option value='mind'";      
            if(\$attr2_v == "mind") \$str += "selected='1'";      
            if(\$attr1_v == "mind") \$str += "disabled";      
            \$str += "\>smart\</option\>";      
            \$str += "\</select\>";      
            return ParseXML(\$str);]
        . However, you were not very
        \$[\$str = "\<select id='attr3' name='attr3' style='display:inline'\>";      
            \$str += "\<option value='' selected='1'\>--\</option\>";      
            \$str += "\<option value='body'";      
            if(\$attr3_v == "body") \$str += "selected='1'";      
            if(\$attr1_v == "body" \|\| \$attr2_v == "body") \$str += "disabled";      
            \$str += "\>strong\</option\>";      
            \$str += "\<option value='will'";      
            if(\$attr3_v == "will") \$str += "selected='1'";      
            if(\$attr1_v == "will" \|\| \$attr2_v == "will") \$str += "disabled";      
            \$str += "\>strong-willed\</option\>";      
            \$str += "\<option value='speed'";      
            if(\$attr3_v == "speed") \$str += "selected='1'";      
            if(\$attr1_v == "speed" \|\| \$attr2_v == "speed") \$str += "disabled";      
            \$str += "\>fast\</option\>";      
            \$str += "\<option value='mind'";      
            if(\$attr3_v == "mind") \$str += "selected='1'";      
            if(\$attr1_v == "mind" \|\| \$attr2_v == "mind") \$str += "disabled";      
            \$str += "\>smart\</option\>";      
            \$str += "\</select\>";      
            return ParseXML(\$str);].
    \</p\> \<sbr/\>\<sbr/\>
    \<p style="text-align:justify"\>\<input style="float:right" type="submit" value="Continue" class="submit-button"/\>\</p\>
    \<action\>
      \$[if(\$attr1 == "" \|\| \$attr2 == "" \|\| \$attr3 == "") \{        
            \$no_selection = 1;        
            return 0;        
        \}         
        
        if(\$attr1 == \$attr2 \|\| \$attr1 == \$attr3 \|\| \$attr2 == \$attr3) \{        
            \$duplicate_selection = 1;        
            return 0;        
        \}        
        \$actbody."temp:attr1" = \$attr1;         
        \$actbody."temp:attr2" = \$attr2;        
        \$actbody."temp:attr3" = \$attr3;                                                 
        \$actbody."chargen:state" = "careers";]
        \{? \| \$(no_selection) \| \<redirect propob="\$(this)" characterref="\$(actbody)" error="no_selection"/\> \|
          \{? \| \$(duplicate_selection) \| \<redirect propob="\$(this)" characterref="\$(actbody)" error="duplicate_selection"/\> \|
               \<redirect propob="\$(this)" characterref="\$(actbody)"/\> \}\}
    \</action\>
\<script\>
    function updatelist1() \\\{
        var e1 = document.getElementById("attr1");
        var i1 = e1.selectedIndex;
        var e2 = document.getElementById("attr2");
        var i2 = e2.selectedIndex;
        var e3 = document.getElementById("attr3");
        var i3 = e3.selectedIndex;
        if(i1 == i2) e2.value = "";
        for(var i = 0; i \\\< 5; i++) \\\{
            e2.options[i].disabled = false;
        \\\}
        if(i1 == i3) e3.value = "";
        for(var i = 0; i \\\< 5; i++) \\\{
            e3.options[i].disabled = false;
        \\\}
        e2.options[i1].disabled = true;
        e3.options[i1].disabled = true;
        e3.options[i2].disabled = true;
    \\\}
    function updatelist2() \\\{
        var e1 = document.getElementById("attr1");
        var i1 = e1.selectedIndex;
        var e2 = document.getElementById("attr2");
        var i2 = e2.selectedIndex;
        var e3 = document.getElementById("attr3");
        var i3 = e3.selectedIndex;
        if(i2 == i3) e3.value = "";
        for(var i = 0; i \\\< 5; i++) \\\{
            e3.options[i].disabled = false;
        \\\}
        e3.options[i2].disabled = true;
        e3.options[i1].disabled = true;
    \\\}
\</script\>
\</zform\>\<sbr/\>\<sabr/\>
\<p style="text-align:justify"\>\<h4\>\</h4\>\</p\>\<sbr/\>
\<zact actbody="\$(body)"\>
\<p style="text-align:justify"\>\<font size="3"\>I want to change my appearance.\</font\>\</p\>
  \<action\>
    \$[\$actbody."chargen:state" = "auto"; \$actbody."chargen:state:auto" = 1;]
    \<redirect propob="\$(this)" characterref="\$(actbody)"/\>
  \</action\>
\</zact\>
\<zact actbody="\$(body)"\>
\<p style="text-align:justify"\>\<font size="3"\>I want to start over.\</font\>\</p\>
  \<action\>
    \$[Slay(\$actbody);]
    \<redirect propob="\$(this)"/\>
  \</action\>
\</zact\>
      </Core:Property>
      <Core:Property property="export:xtra:state:auto">
         X[S] \\\<!-- This is where the user selects their height, build, and details for their fur or skin --\\\>
\\\<!-- find which autopage the player is at. get the choices for this page, as well as the page description --\\\>
\$[\$autoNumber = 1;         
  \$autoChoices = Get(this, "auto:" + Str(\$autoNumber) + ":choices");]
\<h4\>Create Character: Appearance\</h4\>\<sbr/\>
(\<a href="http://ironclaw.skotos.net/SAM/Prop/Ironclaw:Theatre:NewCreateCharacter/helppopup#3" target="_blank"\>help\</a\>)
\<p style="text-align: justify"\>
Time passes as your mind continues to wander, not paying attention all too much to the changing surroundings. You happen to catch a glimpse of yourself in a nearby \{ mirror \| stranger's shield \| metallic surface \} noting the familiar reflection that greets your meandering eye:\<sbr/\>\<sbr/\>
\<span id="choices"\>
  \$[\$counter = 0; \$choices = Call(\$this, "list-choices", \$choices: \$autoChoices);]
  \<zform style="display:inline" actbody="\$(body)" actchoices="\$(choices)" actnumber="\$(autoNumber)"\>
  \<p style="text-align:justify"\>
    \<for var="thisChoiceLine" val="\$(choices)"\>
      \$(thisChoiceLine.0)
      \$[if(sizeof(\$thisChoiceLine) \> 1)\{ \$myVar = TRUE; \$counter++; \} else \{ \$myVar = FALSE; \}]
      \{? \| \$[sizeof(\$thisChoiceLine) \> 1] \|
        \$[\$choicearray = Call(this, "grabchoices", \$choice: \$thisChoiceLine[1], \$gender: \$body."base:genderstring", \$animaltype: \$body."trait:animaltype", \$animalbreed: \$body."trait:animal");]
        \<select style="display:linline" ID="select_counter\$[Str(\$counter)]" NAME="counter\$[Str(\$counter)]" SIZE="1" onChange="update_span('counter\$[Str(\$counter)]');"\>
          \{? \| \$[Get(\$body, "appearance:" + \$thisChoiceLine[1])] \|
            \<option SELECTED="1" value="\$[Get(\$body, "appearance:" + \$thisChoiceLine[1])]"\>\$[Get(\$body, "appearance:" + \$thisChoiceLine[1])]\</option\>
          \|
            \<option value="ordinary"\>ordinary\</option\>
          \}
          \<for var="thisvar" val="\$(choicearray)"\>
            \<option value="\$(thisvar)"\>\$(thisvar)\</option\>
          \</for\>
        \</select\>
      \|\}
    \</for\>
  \</p\>
    \<action\>
      \$[\$list = (\{ \});         
for(\$i = 0; \$i \< sizeof(\$actchoices); \$i++)         
\{         
  if(sizeof(\$actchoices[\$i])\>=2)         
  \{         
    \$list += (\{ \$actchoices[\$i][1] \});         
  \}         
\}       
   
for(\$i = 0; \$i \< sizeof(\$list); \$i++) \{   
    Set(\$actbody, "appearance:" + \$list[\$i], GetVar("counter" + Str(\$i+1)));   
\}      
      
    Set(\$actbody, "chargen:state", "attributes");]
      \<redirect propob="\$(this)" characterref="\$(actbody)"/\>
    \</action\>
\<script language="javascript"\>
    function body_onload() \\\{
        update_span('counter1');
        update_span('counter2');
        update_span('counter3');
        update_span('counter4');
        update_span('counter5');
        update_span('counter6');
        update_span('counter7');
        update_span('counter8');
        update_span('counter9');
        update_span('counter10');
        update_span('counter11');
        update_span('counter12');
        update_span('counter13');
        update_span('counter14');
        update_span('counter15');
        update_span('counter16');
        update_span('counter17');
        update_span('counter18');
        update_span('counter19');
        update_span('counter20');
    \\\}
\</script\>
  \</zform\>
\</span\>
\<h4\>\</h4\>
\<zact actbody="\$(body)"\>
\<p style="text-align:justify"\>\<font size="3"\>Wait, I don't want to be a \$(body.trait:animal)\</font\>\</p\>
  \<action\>
    \$[\$actbody."chargen:state" = nil;]
    \<redirect propob="\$(this)" characterref="\$(actbody)"/\>
  \</action\>
\</zact\>
\<zact actbody="\$(body)"\>
\<p style="text-align:justify"\>\<font size="3"\>I want to start over.\</font\>\</p\>
  \<action\>
    \$[Slay(\$actbody);]
    \<redirect propob="\$(this)"/\>
  \</action\>
\</zact\>
\{? \| \$(autoDescl) \|
\<span id="bottombox"\>
\$(autoDescl)
\</span\>
\}
\</p\>
      </Core:Property>
      <Core:Property property="export:xtra:state:careers">
         X[S] \\\<!-- This is where the user chooses any remaining options --\\\>
\<h4\>Create Character: Careers\</h4\>\<sbr/\>
(\<a href="http://ironclaw.skotos.net/SAM/Prop/Ironclaw:Theatre:NewCreateCharacter/helppopup#5" target="_blank"\>help\</a\>)
\<zform actbody="\$(body)" actfeatures="\$(careerarray)"\>
    \<p style="text-align: justify"\> A jostle from a nearby traveler brings you back to attention, and you impulsively reach down to check that your belongings are all still accounted for. One can never be too safe traveling these days, with pickpockets and scofflaws in regular attendance whenever masses are traveling.
    \<sbr/\>\<sbr/\>
    You sigh in relief as you find the tools of your trade still intact. A
    \$[\$careerarray = Call(this, "grabchoices", \$choice: "careers", \$gender: \$body."base:genderstring");]
    \<select NAME="career1" SIZE="1" style="display:inline"\>
      \<option SELECTED="1"\>none\</option\>
      \<for var="thisfeature" val="\$(careerarray)"\>
        \<option\>\$(thisfeature)\</option\>
      \</for\>
    \</select\>
    without \$(actbody.base:possessive) tool is useless, after all. You rummage around again, just to make sure that your additional
    \<select NAME="career2" SIZE="1" style="display:inline"\>
      \<option SELECTED="1"\>none\</option\>
      \<for var="thisfeature" val="\$(careerarray)"\>
        \<option\>\$(thisfeature)\</option\>
      \</for\>
    \</select\>
    items are accounted for.
    \<sbr/\>\<sbr/\>
    With a renewed attention to detail, you smooth your fingers over your
    \<select id="clothing" name="clothing" style="display:inline"\>
        \<option value="feminine_attire"\>simple feminine travel attire\</option\>
        \<option value="masculine_attire"\>simple masculine travel attire\</option\>
        \<option value="primitive_attire"\>primitive travel attire\</option\>
        \<option value="religious_attire"\>religious vestments\</option\>
        \<option value="martial_uniform"\>martial uniform\</option\>
        \<option value="work_clothes"\>work clothes\</option\>
    \</select\> as you draw closer to the gates of Triskellian.\<sbr/\>\<sbr/\>
    \<input type="submit" value="Approach the gates" class="submit-button" style="float:right"/\>\<sbr/\>\</p\>
    \<action\>
      \$[\$actbody."temp:career1" = \$career1;                                                  
        \$actbody."temp:career2" = \$career2;      
        \$actbody."chargen:clothing" = \$clothing;                                                  
        \$actbody."chargen:state" = "start_location";]
      \<redirect propob="\$(this)" characterref="\$(actbody)"/\>
    \</action\>
  \</zform\>
\<sbr/\>
\<h4\>\</h4\>
\<zact actbody="\$(body)"\>
\<p style="text-align: justify"\>\<font size="3"\>I want to reassign my attributes\</font\>\</p\>
  \<action\>
    \$[\$actbody."chargen:state" = "attributes";]
    \<redirect propob="\$(this)" characterref="\$(actbody)"/\>
  \</action\>
\</zact\>
\<zact actbody="\$(body)"\>
\<p style="text-align: justify"\>\<font size="3"\>I want to start over.\</font\>\</p\>
  \<action\>
    \$[Slay(\$actbody);]
    \<redirect propob="\$(this)"/\>
  \</action\>
\</zact\>
      </Core:Property>
      <Core:Property property="export:xtra:state:chooseanimal">
         X[S] \\\<!-- This page is where the user selects what type of animal they wish their character to be. E.G. Cat --\\\>
\$[if(Get(\$this, "descriptions:animals:" + \$body."trait:animaltype")) \{                                                   
     \$blurb = Get(\$this, "descriptions:animals:" + \$body."trait:animaltype");                                                   
  \} else \{                                                   
      \$blurb = Get(\$this, "descriptions:animals:unknown");                                                   
  \}                
                                               
  if(Get(\$this, "pictures:animals:" + \$body."trait:animaltype")) \{                                                   
      \$pic = Get(\$this, "pictures:animals:" + \$body."trait:animaltype");                                                   
  \} else \{                                                   
      \$pic = Get(\$this, "pictures:animals:unknown");                                                   
  \}]
\<p\>
\<h4\>Create Character: Species\</h4\>
(\<a href="http://ironclaw.skotos.net/SAM/Prop/Ironclaw:Theatre:NewCreateCharacter/helppopup#2" target="_blank"\>help\</a\>)
\<table\>
\<tr\>
  \<td\>
    \<p\>\$(pic)\</p\>
  \</td\>
  \<td valign="top"\>
\$[/* Build choices based on account type */            
   \$accountType = general::getAccountType(\$udat: \$dat);          
          
   if(\$dat."testing:account-type") \$accountType = \$dat."testing:account-type";          
            
 \$db = copy(\$\{Ironclaw:Theatre:CharGen:AnimalChoices\});           
           
 \$animalchoices = (\{ \});           
  \$allChoices = structure_propmap(\$db."*")["animalchoice"];           
        \$allChoices2 = map_indices(\$allChoices);           
           
 \$stpChoices = (\{ \});           
 if(\$dat."skotos:extra:animals") \{           
  if(sizeof(\$dat."skotos:extra:animals")) \$stpChoices = \$dat."skotos:extra:animals";           
 \}           
           
 for(\$i = 0; \$i \< sizeof(\$allChoices2); \$i++) \{           
        \$temp = \$allChoices2[\$i];           
           
   /* Based on account type */           
   if(\$allChoices[\$temp]["type"]) \{           
     if((\$allChoices[\$temp]["type"] == "free" \&\& (\$accountType == "free" \|\| \$accountType == "standard" \|\| \$accountType == "premium")) \|\|                  
         (\$allChoices[\$temp]["type"] == "standard" \&\& (\$accountType == "standard" \|\| \$accountType == "premium")) \|\|     
           (\$allChoices[\$temp]["type"] == "premium" \&\& \$accountType == "premium")) \{           
      if(\$allChoices[\$temp]["gender"]) \{           
         if(\$allChoices[\$temp]["gender"] == \$body."base:genderstring") \{           
           if(\$allChoices[\$temp]["name"]) \$animalchoices \|= (\{ (\{ \$allChoices[\$temp]["name"], \$temp \}) \});           
         \}           
       \} else \{           
                     if(\$allChoices[\$temp]["name"]) \$animalchoices \|= (\{ (\{ \$allChoices[\$temp]["name"], \$temp \}) \});          
   \}           
     \}           
   \}           
           
   /* Based on region/nation */           
   if(\$allChoices[\$temp]["region"] \&\& \$accountType != "free") \{           
     if(lower_case(\$allChoices[\$temp]["region"]) == lower_case(Str(\$body."chargen:region"))) \{           
       if(\$allChoices[\$temp]["gender"]) \{           
         if(\$allChoices[\$temp]["gender"] == \$body."base:genderstring") \{           
           if(\$allChoices[\$temp]["name"]) \$animalchoices \|= (\{ (\{ \$allChoices[\$temp]["name"], \$temp \}) \});        
         \}           
       \} else \{           
                     if(\$allChoices[\$temp]["name"]) \$animalchoices \|= (\{ (\{ \$allChoices[\$temp]["name"], \$temp \}) \});        
       \}           
     \}           
   \}           
           
   /* Based on stp purchase */           
   if(\$allChoices[\$temp]["type"] == "stp" \&\& \$accountType != "free") \{           
     if(sizeof(\$stpChoices)) \{           
       if(member(\$allChoices[\$temp]["trait:animal"], \$stpChoices)) \{           
               if(\$allChoices[\$temp]["gender"]) \{           
                 if(\$allChoices[\$temp]["gender"] == \$body."base:genderstring") \{           
                   if(\$allChoices[\$temp]["name"]) \$animalchoices \|= (\{ (\{ \$allChoices[\$temp]["name"], \$temp \}) \});          
                 \}           
               \} else \{           
                             if(\$allChoices[\$temp]["name"]) \$animalchoices \|= (\{ (\{ \$allChoices[\$temp]["name"], \$temp \}) \});        
                                \}           
       \}           
     \}           
   \}           
 \}]
\<p style="text-align:justify"\>You do as you have been directed, moving along in the queue with the others amid yawns and anxious shuffles. You take one last look over your shoulder, once last glimpse before
   \$[\$region = \$body."chargen:region";            
            
        switch(\$region) \{            
            case "Bisclavret":            
                \$crowd = "several wolves and a handful of bats";            
                return "boarding the caravan that will carry you away from Bisclavret lands.";            
                break;            
            case "Avoirdupois":            
                \$crowd = "several horses and a handful of rabbits";            
                return "climbing onto the stagecoach departing the lands of the Avoirdupois.";            
                break;            
            case "Doloreaux":            
                \$crowd = "several boars and a handful of bears";            
                return "hoisting yourself into the wagon that will shortly head away from Doloreaux lands.";            
                break;            
            case "Rinaldi":            
                \$crowd = "several foxes and a handful of cats";            
                return "passing through the gate that will bring you into the Rinaldi capital city of Triskellian once again.";            
                break;            
            case "Akoma":            
                \$crowd = "several types of exotic cats";            
                return "boarding the ship as it prepares to make its lengthy voyage from Akoma to Triskellian.";            
                break;            
            default:            
                \$crows = "a variety of different animals";            
                return "climbing into the wagon that will travel away from your home land.";            
                break;            
        \}]
\<sbr/\>\<sbr/\>
You glance around at your fellow traveling companions, mentally noting the similarities and differences amongst the crowd as any wandering mind is apt to do.
\<sbr/\>\<sbr/\>\</p\>
\<div width="500px" style="border-collapse:collapse;"\>
  \<zform style="display:inline" actbody="\$(body)" animalchoices="\$(animalchoices)"\>
  \<p\>You realize you are a
    \<select NAME="animaltype" SIZE="1"\>
      \$[\$str = "";            
            for(\$i = 0; \$i \< sizeof(\$animalchoices); \$i++) \{            
                \$str += "\<option ";            
            
                if(capitalize(\$actbody."trait:animaltype") == \$animalchoices[\$i][0]) \$str += "selected ";            
            
                \$str += " value='" + \$animalchoices[\$i][1] +"'\>" + \$animalchoices[\$i][0] + "\</option\>";            
            \}            
            
            return ParseXML(\$str);]
    \</select\>
  among \$(crowd).   \</p\>
     \<action\>
      \$[\$db = copy(\$\{Ironclaw:Theatre:CharGen:AnimalChoices\});           
      \$allChoices = structure_propmap(\$db."*")["animalchoice"];      
        \$actbody."chargen:animal" = \$animaltype;      
        \$actbody."trait:animal" = \$allChoices[\$animaltype]["trait:animal"];                                                                                                                   
        \$actbody."trait:animaltype" = \$allChoices[\$animaltype]["trait:animal"];                                                                                                                       
        \$actbody."base:urparent" = \$allChoices[\$animaltype]["ur"];            
        \$actbody."chargen:state" = "auto";]
      \<redirect propob="\$(this)" characterref="\$(actbody)"/\>
    \</action\>\<sbr/\>
    \<p width="100%"\>\<input style="float:right" type="submit" value="Continue on your journey" class="submit-button"/\>\</p\>\<sbr/\>\<sbr/\>
  \</zform\>
\</div\>
\</td\>\</tr\>\</table\>\<h4\>\</h4\>
\</p\>
\<zact actbody="\$(body)"\>
\<p style="text-align:justify"\>\<font size="3"\>I've changed my mind, I want to start over.\</font\>\</p\>
  \<action\>
    \$[Slay(\$actbody);]
    \<redirect propob="\$(this)"/\>
  \</action\>
\</zact\>
      </Core:Property>
      <Core:Property property="export:xtra:state:end">
         X[S] \\\<!-- This is the final page of the character generator --\\\>
\<p\>
\<strong\>Confirm Character\</strong\>\<br/\>
\</p\>
\<p style="text-align:justify"\>
\<i\>[Below is your character stat sheet. Please review it thoroughly before entering the game world.]\</i\>
\<div style="width: 500px; background: white; text-align:middle"\>
    \<zform actbody="\$(body)" actfeatures="\$(careerarray)"\>
  \<b\>Name:\</b\>
  \$[capitalize(\$body."skotos:charname")] \$(body.chargen:lastname) \<br/\>
                \<b\>Gender:\</b\>
                \$(body.base:genderstring) \<br/\>
                \<b\>Age:\</b\>
                \$(body.trait:age) \<br/\>
                \<b\>Birthplace:\</b\>
                \$(body.chargen:village) in \$(body.chargen:region) territory \<br/\>
                \<b\>Rank:\</b\>
                \$(body.rank:rankname) \<br/\>
                \<b\>Attributes:\</b\>
                        \<b\>\<i\>\\\&nbsp;\\\&nbsp;\\\&nbsp;\\\&nbsp;Body\</i\>\</b\>\\\&nbsp;d\$(body.trait:body)
                        \<b\>\<i\>\\\&nbsp;\\\&nbsp;\\\|\\\&nbsp;\\\&nbsp;Speed\</i\>\</b\>\\\&nbsp;d\$(body.trait:speed)
                        \<b\>\<i\>\\\&nbsp;\\\&nbsp;\\\|\\\&nbsp;\\\&nbsp;Mind\</i\>\</b\>\\\&nbsp;d\$(body.trait:mind)
                        \<b\>\<i\>\\\&nbsp;\\\&nbsp;\\\|\\\&nbsp;\\\&nbsp;Will\</i\>\</b\>\\\&nbsp;d\$(body.trait:will)\<br/\>
                \<b\>Careers:\</b\>
                        \$["";   
                           \$rstr = "";   
                           if(\$body."temp:career1" == \$body."temp:career2") \{   
                               if(\$body."temp:career1" == "none") \{   
                                   \$rstr += "\<b\>\<i\>\\\&nbsp;\\\&nbsp;\\\&nbsp;\\\&nbsp;None\</i\>\</b\>\\\&nbsp;";   
                               \} else \{   
                                   \$rstr += "\<b\>\<i\>\\\&nbsp;\\\&nbsp;\\\&nbsp;\\\&nbsp;\$(body.temp:career1)\</i\>\</b\>\\\&nbsp;d5";   
                               \}   
                           \} else \{   
                               if(\$body."temp:career1" != "none") \{   
                                   \$rstr += "\<b\>\<i\>\\\&nbsp;\\\&nbsp;\\\&nbsp;\\\&nbsp;\$(body.temp:career1)\</i\>\</b\>\\\&nbsp;d4";   
                                      
                                   if(\$body."temp:career2" != "none") \{   
                                       \$rstr += "\<b\>\<i\>\\\&nbsp;\\\&nbsp;\\\&nbsp;\\\&nbsp;\$(body.temp:career2)\</i\>\</b\>\\\&nbsp;d3";   
                                   \}   
                               \} else \{   
                                   if(\$body."temp:career2" != "none") \{   
                                       \$rstr += "\<b\>\<i\>\\\&nbsp;\\\&nbsp;\\\&nbsp;\\\&nbsp;\$(body.temp:career2)\</i\>\</b\>\\\&nbsp;d5";   
                                   \}   
                               \}   
                           \} 
 
                           return ParseXML(\$rstr);]
                        \<br/\>
    \</zform\>
\</div\>
\<p style="text-align:justify"\>\$(body.trait:examine)\</p\>\<br/\>
\<form action="http://ironclaw.skotos.net/SAM/Prop/Ironclaw:Theatre:Theatre/Index" method="post"\>
 \<p style="text-align:justify"\>I'm ready to play!
 \<input type="submit" value="Create Character" class="submit-button"/\>\</p\>
\</form\>
\<zform actbody="\$(body)"\>
\<p style="text-align:justify"\>I don't like this character. I want to start over.
\<input type="submit" value="Delete Character" class="submit-button"/\>\</p\>
  \<action\>
    \$[Slay(\$actbody);]
    \<redirect propob="\$(this)"/\>
  \</action\>
\</zform\>
\</p\>
      </Core:Property>
      <Core:Property property="export:xtra:state:no-body">
         X[S] \<script\>
  function toggleRanks(nation) \\\{
    var selected = nation.value;
    var avo = document.getElementById("avo_rank_div");
    var dolo = document.getElementById("dolo_rank_div");
    var bisc = document.getElementById("bisc_rank_div");
    var rin = document.getElementById("rin_rank_div");
    var akoma = document.getElementById("akoma_rank_div");
    if(selected == "Avoirdupois") \\\{
        avo.style.display = 'block';
        dolo.style.display = 'none';
        bisc.style.display = 'none';
        rin.style.display = 'none';
        akoma.style.display = 'none';
    \\\}
    if(selected == "Bisclavret") \\\{
        avo.style.display = 'none';
        dolo.style.display = 'none';
        bisc.style.display = 'block';
        rin.style.display = 'none';
        akoma.style.display = 'none';
    \\\}
    if(selected == "Doloreaux") \\\{
        avo.style.display = 'none';
        dolo.style.display = 'block';
        bisc.style.display = 'none';
        rin.style.display = 'none';
        akoma.style.display = 'none';
    \\\}
    if(selected == "Rinaldi") \\\{
        avo.style.display = 'none';
        dolo.style.display = 'none';
        bisc.style.display = 'none';
        rin.style.display = 'block';
        akoma.style.display = 'none';
    \\\}
    if(selected == "Akoma") \\\{
        avo.style.display = 'none';
        dolo.style.display = 'none';
        bisc.style.display = 'none';
        rin.style.display = 'none';
        akoma.style.display = 'block';
    \\\}
  \\\}
\</script\>
\\\<!-- confirm user is cast; offer chance to cancel --\\\>
\<div id="textarea"\>
\\\<!-- Check if the player has remaining character slots --\\\>
\<h4\>Create Character\</h4\>
(\<a href="http://ironclaw.skotos.net/SAM/Prop/Ironclaw:Theatre:NewCreateCharacter/helppopup" target="_blank"\>help\</a\>)
\<p\>
\$[/* Check how many characters we have already */                           
\$bodies = Udat::query_bodies_in_roster(\$user: \$name);                           
for(\$i = 0; \$i \< sizeof(\$bodies);)                           
\{                           
  if((\$bodies[\$i]."theatre:id" != Get(\$this, "theatre_id")) \|\| \$bodies[\$i].nocharcost)                           
  \{                           
    \$bodies -= (\{ \$bodies[\$i] \});                           
  \} else \{                           
    \$i++;                           
  \}                           
\}                           
                           
if (!\$bodies) \{                           
  \$number = 0;                           
\} else \{                           
  \$number = sizeof(\$bodies);                           
\}                           
                           
/* Check if we are allowed to add more */                           
\$allowed = Get(\$this, "characterslots");                           
/* If we are premium players */                          
if(\$dat."skotos:flags:premium") \{                          
  \$allowed += Get(\$this, "premium_bonus_characterslots");                           
\}                           
/* If we have our own extra slots */                           
if(Get(\$dat, "roster:extra")) \{                           
  \$allowed += Get(\$dat, "roster:extra");                           
\}                       
                 
if(\$number \>= \$allowed) \{                       
  \$message = "You have "+Str(\$number)+" characters, and are allowed "+Str(\$allowed)+".";                       
  \$full_roster = TRUE;                       
\}                       
\$message = "You have "+Str(\$number)+" characters, and are allowed "+Str(\$allowed)+".";                       
return nil;]
\\\<!-- Check that we are allowed to create new characters --\\\>
\{? \| \$(full_roster) \| I'm sorry, you have already used up all your character slots. You will need to remove one of your current characters before creating a new one.\<sbr/\>
\| \<div style="color: red; font-weight: bold"\>
\$[\$str = "";                 
   if(\$firstname_error) \{                 
       if(contains(\$firstname_error, "taken_name")) \$str += "I'm sorry, but that name has already been used. Please choose another one.\<sbr/\>";                 
       if(contains(\$firstname_error, "single_name")) \$str += "I'm sorry, you may only use single-word names.\<sbr/\>";                 
       if(contains(\$firstname_error, "special_char")) \$str += "I'm sorry, but your name cannot contain any special characters.\<sbr/\>";                 
       if(contains(\$firstname_error, "long_name")) \$str += "I'm sorry, but your name cannot be longer than 12 characters.\<sbr/\>";                 
       if(contains(\$firstname_error, "no_name")) \$str += "You must enter a first name.\<sbr/\>";                 
   \}                 
                 
   if(\$lastname_error) \{                 
       if(contains(\$lastname_error, "special_char")) \$str += "I'm sorry, but your name cannot contain any special characters.\<sbr/\>";                 
       if(contains(\$lastname_error, "long_name")) \$str += "I'm sorry, but your name cannot be longer than 15 characters.\<sbr/\>";                 
   \}                 
                 
 return ParseXML(\$str);]
\{? \| \$(age_error) \| I'm sorry, please choose an age between 18 and 80. \}
\{? \| \$(rank_error) \| I'm sorry, that rank is no longer available to you. \} \</div\>
\<zform actname="\$(name)" actdat="\$(dat)"\>
\<table style="margin:auto;" width="90%"\>
  \<tr\>
    \<td\>
      \<p style="text-align: justify"\>
        The sun cresting the horizon casts a cool golden hue on your surroundings as you wait your turn in the slow-moving line. Travel papers in hand, you take one last look to ensure everything is in order.\</p\>
    \</td\>
  \</tr\>
\</table\>
\<br/\>
\<div style="margin:auto; background-image: url('http://www.urltarget.com/images/old-scroll-paper-outline-map-open-parchment.png'); background-size: 100%; background-repeat: no-repeat; width:550px; height:382px"\>
\<center\>\<table style="font-family:papyrus; font-size:15px; font-weight:700;" border="0"\>
  \<tr\>\<td\>\<br/\>\</td\>\</tr\>
  \<tr\>\<td colspan="2"\>\<font size="5"\>\<center\>\<b\>Laissez Passer\</b\>\</center\>\</font\>\<br/\>\</td\>\</tr\>
  \<tr\>
    \<td\>Name:\</td\>
    \<td\>
         \<select style="text-align:left" name="gender" class="form"\>\<option value="female" selected="1"\>Miss\</option\>\<option value="male"\>Mister\</option\>\</select\>
         \<input type="text" name="firstname" onfocus="this.value=''" value="First Name" class="form" size="10"/\>
         \<input type="text" name="lastname" onfocus="this.value=''" value="Last Name (optional)" class="form" size="20"/\>
    \</td\>
  \</tr\>
  \<tr\>
    \<td\>Age:\</td\>
    \<td\>\<input style="width:40px" type="number" name="age" min="18" max="80" value="20" class="form"/\>\</td\>
  \</tr\>
  \<tr\>
    \<td\>Birthplace:\</td\>
    \<td\>
        \<input type="text" onfocus="this.value=''" value="Village (optional)" style="width:100px" name="village" class="form"/\> in the
        \<select style="text-align:left" name="nation" id="nation" class="form" onchange="toggleRanks(this);"\>
          \<option value="Avoirdupois" selected="1"\>Avoirdupois\</option\>
          \<option value="Rinaldi"\>Rinaldi\</option\>
          \<option value="Bisclavret"\>Bisclavret\</option\>
          \<option value="Doloreaux"\>Doloreaux\</option\>
          \$[if(\$actdat."skotos:extra:regions") \{                 
   \$accountType = general::getAccountType(\$udat: \$dat);                   
   if(\$dat."testing:account-type") \$accountType = \$dat."testing:account-type";                   
  \$regions = \$actdat."skotos:extra:regions";                 
  if(sizeof(\$regions) \&\& member("akoma", \$regions) \&\& \$accountType != "free") \{                 
   return ParseXML("\<option value='Akoma'\>Akoma\</option\>");                 
  \}                 
     \}]
        \</select\> region
    \</td\>
  \</tr\>
  \<tr\>
    \<td valign="top"\>Rank:\</td\>
    \<td\>\<div id="avo_rank_div" style="display:block"\> \$[\$str = "\<select style='text-align:left' id='avo_rank' name='avo_rank' class='form'\>" +                 
          "\<optgroup label='Commoner'\>\<option value='none::Rank 03' selected\>Freedman\</option\>\</optgroup\>";                 
                 
      \$accountType = general::getAccountType(\$udat: \$dat);                   
          if(\$dat."testing:account-type") \$accountType = \$dat."testing:account-type";                   
                 
          \$purchasedRanks = ([ ]);                 
          if(Get(\$actdat, "roster:noble-slots") \&\& \$accountType != "free") \$purchasedRanks = copy(Get(\$actdat, "roster:noble-slots"));                 
   \$roster = udat::query_bodies_in_roster(\$user: \$actname);                 
          for(\$i = 0; \$i \< sizeof(\$roster); \$i++) \{                 
              if(\$roster[\$i]."chargen:rank") \{                 
                 \$purchasedRanks[\$roster[\$i]."chargen:rank"] = Int(\$purchasedRanks[\$roster[\$i]."chargen:rank"]) - 1;                 
              \}                 
          \}                 
          if(!map_sizeof(\$purchasedRanks)) return ParseXML(\$str + "\</select\>");                 
          \$options = map_indices(\$purchasedRanks);                 
          \$rankMap = Get(\$this, "choices:rank");                 
          \$loyalties = map_indices(\$rankMap) - (\{ "council", "constabulary" \});                 
          for(\$i = 0; \$i \< sizeof(\$loyalties); \$i++) \{                 
              \$str += "\<optgroup label='" + replace_strings(\$loyalties[\$i], "council", "Council", "church:social", "Church Social", "church:military", "Church Military", "social", "Avoirdupois Social", "military", "Avoirdupois Military", "underworld", "Undisclosed (Underworld)", "constabulary", "Constabulary") + "'\>";                 
              for(\$j = 0; \$j \< sizeof(\$options); \$j++) \{                 
                  \$str += "\<option value='" + \$loyalties[\$i] + "::" + \$options[\$j] + "'";                 
    if(Int(\$purchasedRanks[\$options[\$j]]) \<= 0) \$str += "disabled";                 
                  \$str += "\>" + \$rankMap[\$loyalties[\$i]][\$options[\$j]] + "\</option\>";                 
              \}                 
              \$str += "\</optgroup\>";                 
          \}                 
          \$str += "\</select\>";                 
          return ParseXML(\$str);] \</div\>
          \<div id="bisc_rank_div" style="display:none"\> \$[\$str = "\<select style='text-align:left' name='bisc_rank' id='bisc_rank' class='form'\>" +                 
          "\<optgroup label='Commoner'\>\<option value='none::Rank 03' selected\>Freedman\</option\>\</optgroup\>";                 
          \$purchasedRanks = ([ ]);                 
          if(Get(\$actdat, "roster:noble-slots")) \$purchasedRanks = copy(Get(\$actdat, "roster:noble-slots"));                 
   \$roster = udat::query_bodies_in_roster(\$user: \$actname);                 
          for(\$i = 0; \$i \< sizeof(\$roster); \$i++) \{                 
              if(\$roster[\$i]."chargen:rank") \{                 
                 \$purchasedRanks[\$roster[\$i]."chargen:rank"] = Int(\$purchasedRanks[\$roster[\$i]."chargen:rank"]) - 1;                 
              \}                 
          \}                 
          if(!map_sizeof(\$purchasedRanks)) return ParseXML(\$str + "\</select\>");                 
          \$options = map_indices(\$purchasedRanks);                 
          \$rankMap = Get(\$this, "choices:rank");                 
          \$loyalties = map_indices(\$rankMap) - (\{ "council", "constabulary" \});                 
          for(\$i = 0; \$i \< sizeof(\$loyalties); \$i++) \{                 
              \$str += "\<optgroup label='" + replace_strings(\$loyalties[\$i], "church:social", "Church Social", "church:military", "Church Military", "social", "Bisclavret Social", "military", "Bisclavret Military", "underworld", "Undisclosed (Underworld)", "constabulary", "Constabulary") + "'\>";                 
              for(\$j = 0; \$j \< sizeof(\$options); \$j++) \{                 
                  \$str += "\<option value='" + \$loyalties[\$i] + "::" + \$options[\$j] + "'";                 
    if(Int(\$purchasedRanks[\$options[\$j]]) \<= 0) \$str += "disabled";                 
                  \$str += "\>" + \$rankMap[\$loyalties[\$i]][\$options[\$j]] + "\</option\>";                 
              \}                 
              \$str += "\</optgroup\>";                 
          \}                 
          \$str += "\</select\>";                 
          return ParseXML(\$str);] \</div\>
          \<div id="dolo_rank_div" style="display:none"\> \$[\$str = "\<select style='text-align:left' name='dolo_rank' id='dolo_rank' class='form'\>" +                 
          "\<optgroup label='Commoner'\>\<option value='none::Rank 03' selected\>Freedman\</option\>\</optgroup\>";                 
          \$purchasedRanks = ([ ]);                 
          if(Get(\$actdat, "roster:noble-slots")) \$purchasedRanks = copy(Get(\$actdat, "roster:noble-slots"));                 
   \$roster = udat::query_bodies_in_roster(\$user: \$actname);                 
          for(\$i = 0; \$i \< sizeof(\$roster); \$i++) \{                 
              if(\$roster[\$i]."chargen:rank") \{                 
                 \$purchasedRanks[\$roster[\$i]."chargen:rank"] = Int(\$purchasedRanks[\$roster[\$i]."chargen:rank"]) - 1;                 
              \}                 
          \}                 
          if(!map_sizeof(\$purchasedRanks)) return ParseXML(\$str + "\</select\>");                 
          \$options = map_indices(\$purchasedRanks);                 
          \$rankMap = Get(\$this, "choices:rank");                 
          \$loyalties = map_indices(\$rankMap) - (\{ "council", "church:social", "church:military", "constabulary" \});                 
          for(\$i = 0; \$i \< sizeof(\$loyalties); \$i++) \{                 
              \$str += "\<optgroup label='" + replace_strings(\$loyalties[\$i], "church:social", "Church Social", "church:military", "Church Military", "social", "Doloreaux Social", "military", "Doloreaux Military", "underworld", "Undisclosed (Underworld)", "constabulary", "Constabulary") + "'\>";                 
              for(\$j = 0; \$j \< sizeof(\$options); \$j++) \{                 
                  \$str += "\<option value='" + \$loyalties[\$i] + "::" + \$options[\$j] + "'";                 
    if(Int(\$purchasedRanks[\$options[\$j]]) \<= 0) \$str += "disabled";                 
                  \$str += "\>" + \$rankMap[\$loyalties[\$i]][\$options[\$j]] + "\</option\>";                 
              \}                 
              \$str += "\</optgroup\>";                 
          \}                 
          \$str += "\</select\>";                 
          return ParseXML(\$str);] \</div\>
          \<div id="rin_rank_div" style="display:none;"\> \$[\$str = "\<select style='text-align:left' name='rin_rank' id='rin_rank' class='form'\>" +                 
          "\<optgroup label='Commoner'\>\<option value='none::Rank 03' selected\>Freedman\</option\>\</optgroup\>";                 
          \$purchasedRanks = ([ ]);                 
          if(Get(\$actdat, "roster:noble-slots")) \$purchasedRanks = copy(Get(\$actdat, "roster:noble-slots"));                 
   \$roster = udat::query_bodies_in_roster(\$user: \$actname);                 
          for(\$i = 0; \$i \< sizeof(\$roster); \$i++) \{                 
              if(\$roster[\$i]."chargen:rank") \{                 
                 \$purchasedRanks[\$roster[\$i]."chargen:rank"] = Int(\$purchasedRanks[\$roster[\$i]."chargen:rank"]) - 1;                 
              \}                 
          \}                 
          if(!map_sizeof(\$purchasedRanks)) return ParseXML(\$str + "\</select\>");                 
          \$options = map_indices(\$purchasedRanks);                 
          \$rankMap = Get(\$this, "choices:rank");                 
          \$loyalties = map_indices(\$rankMap);                 
          for(\$i = 0; \$i \< sizeof(\$loyalties); \$i++) \{                 
              \$str += "\<optgroup label='" + replace_strings(\$loyalties[\$i], "church:social", "Church Social", "church:military", "Church Military", "social", "Rinaldi Social", "military", "Rinaldi Military", "underworld", "Undisclosed (Underworld)", "constabulary", "Constabulary", "council", "Guild Council") + "'\>";                 
              for(\$j = 0; \$j \< sizeof(\$options); \$j++) \{                 
                  \$str += "\<option value='" + \$loyalties[\$i] + "::" + \$options[\$j] + "'";                 
    if(Int(\$purchasedRanks[\$options[\$j]]) \<= 0) \$str += "disabled";                 
                  \$str += "\>" + \$rankMap[\$loyalties[\$i]][\$options[\$j]] + "\</option\>";                 
              \}                 
              \$str += "\</optgroup\>";                 
          \}                 
                           
          \$str += "\</select\>";                 
          return ParseXML(\$str);] \</div\>
          \<div id="akoma_rank_div" style="display:none;"\> \$[\$str = "\<select style='text-align:left' name='akoma_rank' id='akoma_rank' class='form'\>" +                 
          "\<optgroup label='Commoner'\>\<option value='none::Rank 03' selected\>Freedman\</option\>\</optgroup\>";                 
          \$purchasedRanks = ([ ]);                 
          if(Get(\$actdat, "roster:noble-slots")) \$purchasedRanks = copy(Get(\$actdat, "roster:noble-slots"));                 
   \$roster = udat::query_bodies_in_roster(\$user: \$actname);                 
          for(\$i = 0; \$i \< sizeof(\$roster); \$i++) \{                 
              if(\$roster[\$i]."chargen:rank") \{                 
                 \$purchasedRanks[\$roster[\$i]."chargen:rank"] = Int(\$purchasedRanks[\$roster[\$i]."chargen:rank"]) - 1;                 
              \}                 
          \}                 
          if(!map_sizeof(\$purchasedRanks)) return ParseXML(\$str + "\</select\>");                 
          \$options = map_indices(\$purchasedRanks);                 
          \$rankMap = Get(\$this, "choices:rank");                 
          \$loyalties = map_indices(\$rankMap) - (\{ "council", "church:social", "church:military", "constabulary", "social", "military" \});                 
          for(\$i = 0; \$i \< sizeof(\$loyalties); \$i++) \{                 
              \$str += "\<optgroup label='" + replace_strings(\$loyalties[\$i], "church:social", "Church Social", "church:military", "Church Military", "social", "Rinaldi Social", "military", "Rinaldi Military", "underworld", "Undisclosed (Underworld)", "constabulary", "Constabulary") + "'\>";                 
              for(\$j = 0; \$j \< sizeof(\$options); \$j++) \{                 
                  \$str += "\<option value='" + \$loyalties[\$i] + "::" + \$options[\$j] + "'";                 
    if(Int(\$purchasedRanks[\$options[\$j]]) \<= 0) \$str += "disabled";                 
                  \$str += "\>" + \$rankMap[\$loyalties[\$i]][\$options[\$j]] + "\</option\>";                 
              \}                 
              \$str += "\</optgroup\>";                 
          \}                 
                           
          \$str += "\</select\>";                 
          return ParseXML(\$str);] \</div\>
    \</td\>
  \</tr\>
  \<tr\>\<td\>\<br/\>\<br/\>\</td\>\</tr\>
\</table\>\</center\>
\</div\>
\<table style="margin:auto;" width="90%"\>
\<tr\>\<td\>\<p style="text-align: justify"\> At long last, you step forward and present your papers to the outstretched paw before you. The elderly \{badger\|weasel\|cat\|mutt\} squints at the parchment in the dim light of the cool dawn, muttering softly under his breath. "Yes, everything seems to be in order here... very good. Move along now."\</p\>
\</td\>\</tr\>
\</table\>\<sbr/\>
  \<p\>\<input style="float:right" type="submit" value="Proceed through the line." class="submit-button"/\>\</p\>
  \<action\>
 \$[/* Check how many characters we have already */                           
  \$bodies = Udat::query_bodies_in_roster(\$user: \$actname);                           
  for(\$i = 0; \$i \< sizeof(\$bodies);) \{                           
     if((\$bodies[\$i]."theatre:id" != Get(\$this, "theatre_id")) \|\| \$bodies[\$i].nocharcost) \{                           
        \$bodies -= (\{ \$bodies[\$i] \});                           
     \} else \{                           
        \$i++;                           
     \}                           
  \}                           
                           
  if (!\$bodies) \{                           
     \$number = 0;                           
  \} else \{                           
     \$number = sizeof(\$bodies);                           
  \}                           
                 
  /* Check if we are allowed to add more */                           
  \$allowed = Get(\$this, "characterslots");                       
                     
  /* If we are premium players */                          
  if(\$actdat."skotos:flags:premium") \{                          
     \$allowed += Get(\$this, "premium_bonus_characterslots");                           
  \}                     
                       
  /* If we have our own extra slots */                           
  if(Get(\$actdat, "roster:extra")) \{                           
     \$allowed += Get(\$actdat, "roster:extra");                           
  \}                    
                 
  if(\$number \>= \$allowed) \{                           
     \$full_roster = "true";                 
   return 0;                     
  \}                   
                 
  if(\$firstname) \{                 
   \$firstname_error = "";                 
   if(strlen(\$firstname) \> 12) \$firstname_error += "long_name ";                 
   if(contains(\$firstname, " ") \|\| contains(\$firstname, "'")) \$firstname_error += "single_name ";                 
                 if(contains(\$firstname, "-") \|\| contains(\$firstname, "1") \|\| contains(\$firstname, "2") \|\| contains(\$firstname, "3") \|\| contains(\$firstname, "4") \|\| contains(\$firstname, "5") \|\| contains(\$firstname, "6") \|\| contains(\$firstname, "7") \|\| contains(\$firstname, "8") \|\| contains(\$firstname, "9") \|\| contains(\$firstname, "0") \|\| contains(\$firstname, "_") \|\| contains(\$firstname, "`") \|\| contains(\$firstname, "~") \|\| contains(\$firstname, "!") \|\| contains(\$firstname, "@") \|\| contains(\$firstname, "#") \|\| contains(\$firstname, "\\\$") \|\| contains(\$firstname, "^") \|\| contains(\$firstname, "\&") \|\| contains(\$firstname, "*")\|\| contains(\$firstname, "(") \|\| contains(\$firstname, ")") \|\| contains(\$firstname, "+") \|\| contains(\$firstname, "\\=") \|\| contains(\$firstname, "\\\{") \|\| contains(\$firstname, "[") \|\| contains(\$firstname, "]") \|\| contains(\$firstname, "\\\}") \|\| contains(\$firstname, "\\\\") \|\| contains(\$firstname, "\|") \|\| contains(\$firstname, ":") \|\| contains(\$firstname, ";") \|\| contains(\$firstname, "\\\<") \|\| contains(\$firstname, "\\\>") \|\| contains(\$firstname, ",") \|\| contains(\$firstname, "//") \|\| contains(\$firstname, "?")) \$firstname_error += "special_char ";                 
  \} else \{                 
   \$firstname_error = "no_name";                 
  \}                 
  if(\$firstname_error != "") \{                 
   return 0;                 
  \} else \{                 
   \$firstname_error = nil;                 
  \}                 
  \$firstname = lower_case(\$firstname);                 
                if(Obj("Chatters:IC:" + \$firstname[0..1] + ":" + \$firstname) \&\& Get(\$\{UserAPI:UDatD\}, "bodies:" + \$firstname)) \{                 
          if(Obj("Chatters:IC:" + \$firstname[0..1] + ":" + \$firstname) \&\& \$actname == Obj("Chatters:IC:" + \$firstname[0..1] + ":" + \$firstname)."skotos:creator" \&\& !Obj("Chatters:IC:" + \$firstname[0..1] + ":" + \$firstname)."chargen:finished") \{                 
    \$continue_chargen = "true";                 
    return 0;                 
      \} else \{                 
    \$firstname_error = "taken_name";                 
    return 0;                 
   \}                 
  \}                 
  if(Get(\$\{Ironclaw:Neoct:Verbs:Staff:reservedb\}, "chatters:"+this.theatre_id+":"+\$firstname[0..1]+":"+\$firstname)) \{                  
   if(Get(\$\{Ironclaw:Neoct:Verbs:Staff:reservedb\}, "chatters:"+this.theatre_id+":"+\$firstname[0..1]+":"+\$firstname)[0] == \$actname) \{                  
    \$create_reserved = "true";                 
    return 0;                 
              \} else \{                 
             \$firstname_error = "taken_name";                 
   \}                 
         \}                 
  if(\$lastname \&\& \$lastname != "" \&\& \$lastname != "Last Name (optional)") \{                 
                 
   \$lastname_error = "";                 
   if(strlen(\$lastname) \> 15) \$lastname_error += "long_name ";                 
                 if(contains(\$lastname, "-") \|\| contains(\$lastname, "1") \|\| contains(\$lastname, "2") \|\| contains(\$lastname, "3") \|\| contains(\$lastname, "4") \|\| contains(\$lastname, "5") \|\| contains(\$lastname, "6") \|\| contains(\$lastname, "7") \|\| contains(\$lastname, "8") \|\| contains(\$lastname, "9") \|\| contains(\$lastname, "0") \|\| contains(\$lastname, "_") \|\| contains(\$lastname, "`") \|\| contains(\$lastname, "~") \|\| contains(\$lastname, "!") \|\| contains(\$lastname, "@") \|\| contains(\$lastname, "#") \|\| contains(\$lastname, "\\\$") \|\| contains(\$lastname, "^") \|\| contains(\$lastname, "\&") \|\| contains(\$lastname, "*")\|\| contains(\$lastname, "(") \|\| contains(\$lastname, ")") \|\| contains(\$lastname, "+") \|\| contains(\$lastname, "\\=") \|\| contains(\$lastname, "\\\{") \|\| contains(\$lastname, "[") \|\| contains(\$lastname, "]") \|\| contains(\$lastname, "\\\}") \|\| contains(\$lastname, "\\\\") \|\| contains(\$lastname, "\|") \|\| contains(\$lastname, ":") \|\| contains(\$lastname, ";") \|\| contains(\$lastname, "\\\<") \|\| contains(\$lastname, "\\\>") \|\| contains(\$lastname, ",") \|\| contains(\$lastname, "//") \|\| contains(\$lastname, "?")) \$lastname_error += "special_char ";                 
  \} else \{                 
    /* \$lastname_error = "no_name"; */                 
    \$lastname = nil;                 
  \}                 
                 
  if(\$lastname_error \&\& \$lastname_error != "") \{                 
   return 0;                 
  \} else \{                 
                        \$lastname_error = nil;                 
                \}                 
                 
  if(\$lastname) \$lastname = lower_case(\$lastname);                 
                 
  if(Int(\$age) \< 18 \|\| Int(\$age) \> 80) \{                  
   \$age_error = "true";                 
   return 0;                 
  \}                 
                 
    if(\$nation == "Avoirdupois") \{                 
         if(!\$avo_rank) \$avo_rank = "none::Rank 03";                 
         \$loyalty = explode(\$avo_rank, "::")[0];                 
        \$rank = explode(\$avo_rank, "::")[1];                 
         switch(\$loyalty) \{                 
             case "social":                 
     \$group = "avoirdupois";                 
     \$lang = "eastern";                 
     break;                 
      case "military":                 
     \$group = "avoirdupois_mil";                 
     \$lang = "eastern";                 
     break;                 
      case "church:social":                 
     \$group = "church";                 
     \$lang = "old";                 
     break;                 
      case "church:military":                 
     \$group = "church_mil";                 
     \$lang = "old";                 
     break;                 
                    case "underworld":                 
     \$group = "underworld";                 
     \$lang = "dusky";                 
     break;                 
                 
     case "none":                 
         \$lang = "eastern";                 
         break;                 
                 
                    default:                 
     \$lang = "eastern";                 
     break;                 
                \}                 
           \}                 
                 
           if(\$nation == "Bisclavret") \{                 
         if(!\$bisc_rank) \$bisc_rank = "none::Rank 03";                 
         \$loyalty = explode(\$bisc_rank, "::")[0];                 
         \$rank = explode(\$bisc_rank, "::")[1];                 
         switch(\$loyalty) \{                 
            case "social":                 
     \$group = "bisclavret";                 
     \$lang = "western";                 
     break;                 
      case "military":                 
     \$group = "bisclavret_mil";                 
     \$lang = "western";                 
     break;                 
      case "church:social":                 
     \$group = "church";                 
     \$lang = "old";                 
     break;                 
      case "church:military":                 
     \$group = "church_mil";                 
     \$lang = "old";                 
     break;                 
                    case "underworld":                 
     \$group = "underworld";                 
     \$lang = "dusky";                 
     break;                 
                 
     case "none":                 
         \$lang = "western";                 
         break;                 
                    default:                 
     \$lang = "western";                 
     break;                 
                \}                 
           \}                 
                 
           if(\$nation == "Doloreaux") \{                 
         if(!\$dolo_rank) \$dolo_rank = "none::Rank 03";                 
         \$loyalty = explode(\$dolo_rank, "::")[0];                 
         \$rank = explode(\$dolo_rank, "::")[1];                 
         switch(\$loyalty) \{                 
             case "social":                 
     \$group = "doloreaux";                 
     \$lang = "northern";                 
     break;                 
      case "military":                 
     \$group = "doloreaux_mil";                 
     \$lang = "northern";                 
     break;                 
                    case "underworld":                 
     \$group = "underworld";                 
     \$lang = "dusky";                 
     break;                 
                 
     case "none":                 
         \$lang = "northern";                 
         break;                 
                 
                    default:                 
     \$lang = "northern";                 
     break;                 
                \}                 
           \}                 
                 
           if(\$nation == "Rinaldi") \{                 
         if(!\$rin_rank) \$rin_rank = "none::Rank 03";                 
         \$loyalty = explode(\$rin_rank, "::")[0];                 
         \$rank = explode(\$rin_rank, "::")[1];                 
         switch(\$loyalty) \{                 
             case "social":                 
     \$group = "rinaldi";                 
     \$lang = "southern";                 
     break;                 
      case "military":                 
     \$group = "rinaldi_mil";                 
     \$lang = "southern";                 
     break;                 
      case "church:social":                 
     \$group = "church";                 
     \$lang = "old";                 
     break;                 
      case "church:military":                 
     \$group = "church_mil";                 
     \$lang = "old";                 
     break;                 
                    case "constabulary":                 
     \$group = "constables";                 
     \$lang = "southern";                 
     break;                 
                    case "underworld":                 
     \$group = "underworld";                 
     \$lang = "dusky";                 
     break;                 
                    case "council":                 
     \$group = "council";                 
     \$lang = "southern";                 
     break;                 
     case "none":                 
         \$lang = "southern";                 
         break;                 
                    default:                 
     \$lang = "southern";                 
     break;                 
                \}                 
           \}                 
                 
           if(\$nation == "Akoma") \{                 
         if(!\$akoma_rank) \$akoma_rank = "none::Rank 03";                 
         \$loyalty = explode(\$akoma_rank, "::")[0];                 
         \$rank = explode(\$akoma_rank, "::")[1];                 
         switch(\$loyalty) \{                 
                    case "underworld":                 
     \$lang = "dusky";                 
     \$lang2 = "al-akomiiyah";                 
     \$group = "underworld";                 
     break;                 
                 
     case "none":                 
         \$lang = "al-akomiiyah";                 
         break;                 
                 
                    default:                 
     \$lang = "al-akomiiyah";                 
     break;                 
                \}                 
           \}                 
                 
  if(\$rank != "Rank 03") \{                 
   \$purchasedRanks = ([ ]);                 
            if(Get(\$actdat, "roster:noble-slots")) \$purchasedRanks = copy(Get(\$actdat, "roster:noble-slots"));                 
     \$roster = udat::query_bodies_in_roster(\$user: \$actname);                 
            for(\$i = 0; \$i \< sizeof(\$roster); \$i++) \{                 
                 if(\$roster[\$i]."chargen:rank") \{                 
                    \$purchasedRanks[\$roster[\$i]."chargen:rank"] = Int(\$purchasedRanks[\$roster[\$i]."chargen:rank"]) - 1;                 
                 \}                 
            \}                 
                 
   if(\$purchasedRanks[\$rank] \<= 0) \{                 
    \$rank_error = "true";                 
    return 0;                 
   \}                 
  \}                  
                 
  return 1;]
 \{? \| \$(full_roster) \| \<redirect propob="\$(this)" full_roster="true"/\> \|
  \{? \| \$(firstname_error) \| \<redirect propob="\$(this)" firstname_error="\$(firstname_error)"/\> \|
   \{? \| \$(continue_chargen) \| \<redirect propob="\$(this)" characterref="\$[Obj("Chatters:" + this.theatre_id + ":" + \$firstname[0..1] + ":" + \$firstname)]"/\> \|
    \{? \| \$(lastname_error) \| \<redirect propob="\$(this)" lastnme_error="\$(lastname_error)"/\> \|
     \{? \| \$(rank_error) \| \<redirect propob="\$(this)" rank_error="true"/\> \|
      \{? \| \$(create_reserved) \|
       \<create-chatter gender="\$(gender)" char="\$(firstname)"/\>
                  \$[Set(Obj("Chatters:" + this.theatre_id + ":" + \$firstname[0..1] + ":" + \$firstname), "trait:animal", Get(\$\{Ironclaw:Neoct:Verbs:Staff:reservedb\}, "chatters:"+this.theatre_id+":"+\$firstname[0..1]+":"+\$firstname)[1]);]
                  \$[Set(Obj("Chatters:" + this.theatre_id + ":" + \$firstname[0..1] + ":" + \$firstname), "trait:animaltype", Get(\$\{Ironclaw:Neoct:Verbs:Staff:reservedb\}, "chatters:"+this.theatre_id+":"+\$firstname[0..1]+":"+\$firstname)[2]);]
                  \$[Set(Obj("Chatters:" + this.theatre_id + ":" + \$firstname[0..1] + ":" + \$firstname), "chargen:state", "auto");]
                  \$[/* find the parent object */                    
                   \$list = Get(\$this, "choices:animallist");                       
                   for(\$i=0;\$i\<sizeof(\$list);\$i++)\{                       
                      if(\$list[\$i][1] == Get(Obj("Chatters:" + this.theatre_id + ":" + \$firstname[0..1] + ":" + \$firstname), "trait:animaltype")) \{                    
                        Set(Obj("Chatters:" + this.theatre_id + ":" + \$firstname[0..1] + ":" + \$firstname), "core:ur:parent", \$list[\$i][2]);                    
                        return TRUE;                    
                      \}                    
                   \}                    
                   return TRUE;]
                  \<redirect propob="\$(this)" characterref="\$[Obj("Chatters:" + this.theatre_id + ":" + \$firstname[0..1] + ":" + \$firstname)]"/\>
         \|
              \<create-chatter gender="\$(gender)" char="\$(firstname)"/\>
       \$[\$chatter = Obj("Chatters:" + this.theatre_id + ":" + \$firstname[0..1] + ":" + \$firstname);                 
          \$chatter."chargen:age" = Int(\$age);                 
        \$chatter."trait:age" = Int(\$age);                 
          \$chatter."chargen:village" = Str(\$village);                 
          \$chatter."chargen:region" = Str(\$nation);                  
                 
        if(\$lang) Set(\$chatter, "chargen:lang", \$lang);                 
        if(\$lang2) Set(\$chatter, "chargen:lang2", \$lang2); else Set(\$chatter, "chargen:lang2", nil);                   
 if(\$lastname \&\& \$lastname != "" \&\& \$lastname != "Last Name (optional)") \{                 
                \$chatter."chargen:lastname" = capitalize(\$lastname);                 
                \$chatter."trait:lastname" = capitalize(\$lastname);                 
  \$temp = explode(\$lastname, " ");                 
         for(\$i = 0; \$i \< sizeof(\$temp); \$i++) \{                 
           if(\$i \< (sizeof(\$temp) - 1)) \{                 
              Set(\$chatter, "details:default:adjective:" + \$temp[\$i], TRUE);                 
          \} else \{                 
             Set(\$chatter, "details:default:sname:" + \$temp[\$i], TRUE);                 
           \}                 
         \}                 
 \}                 
        
        \$inventory = \$chatter."base:inventory";        
        for(\$i = 0; \$i \< sizeof(\$inventory); \$i++) \{        
            Slay(\$inventory[\$i]);        
        \}                 
        
        if(\$rank != "Rank 03") \{                 
         Set(\$chatter, "chargen:rank", \$rank);                 
         \$rank = Int(replace_strings(\$rank, "Rank 0", "", "Rank ", ""));                 
                         
                 
         if(\$loyalty == "social") \{                 
          \$tmp = Call(\$\{Ironclaw:Lib:Characters:Rank\}, "get_rank_names_noble", \$char: \$chatter, \$groupname: \$nation, \$level: \$rank);                 
         \} else if(\$loyalty == "military") \{                 
          \$tmp = Call(\$\{Ironclaw:Lib:Characters:Rank\}, "get_rank_names_military", \$char: \$chatter, \$groupname: \$nation, \$level: \$rank);                 
         \} else if(\$loyalty == "constabulary") \{                 
          \$tmp = Call(\$\{Ironclaw:Lib:Characters:Rank\}, "get_rank_names_costables", \$char: \$chatter, \$groupname: "constables", \$level: \$rank);                 
         \} else if(\$loyalty == "church:social") \{                 
          \$tmp = Call(\$\{Ironclaw:Lib:Characters:Rank\}, "get_rank_names_church", \$char: \$chatter, \$groupname: "church", \$level: \$rank);                 
         \} else if(\$loyalty == "church:military") \{                 
          \$tmp = Call(\$\{Ironclaw:Lib:Characters:Rank\}, "get_rank_names_church_mil", \$char: \$chatter, \$groupname: "church", \$level: \$rank);                 
         \} else if(\$loyalty == "underworld") \{                 
          \$tmp = Call(\$\{Ironclaw:Lib:Characters:Rank\}, "get_rank_names_underworld", \$char: \$chatter, \$groupname: "underworld", \$level: \$rank);                 
         \} else if(\$loyalty == "council") \{                 
          \$tmp = Call(\$\{Ironclaw:Lib:Characters:Rank\}, "get_rank_names_council", \$char: \$chatter, \$groupname: "council", \$level: \$rank);                 
         \}                 
                 
         \$rankname = \$tmp["rankname"];                 
         \$title = \$tmp["title"];                 
         \$path = "status:" + \$group;                 
         Call(\$\{Ironclaw:Lib:Characters:Rank\}, "set_rank", \$path: \$path, \$char: \$chatter, \$rank: \$rank, \$rankname: \$rankname); \}]
       \<redirect propob="\$(this)" characterref="\$[Obj("Chatters:" + this.theatre_id + ":" + \$firstname[0..1] + ":" + \$firstname)]"/\>
      \}
     \}
    \}
   \}
  \}
 \}
  \</action\>
\</zform\>\<br/\>
\}
\<h4\>\</h4\>
\<p\>\<table width="95%"\>\<tr\>\<td\>\<a href="/"\>Return to the character login screen.\</a\>\</td\>\</tr\>\</table\>\</p\>
\</p\>
\</div\>
      </Core:Property>
      <Core:Property property="export:xtra:state:runscripts">
         X[S] \\\<!-- This is where any merry scripts we need to run are run --\\\>
\$[\$body."chargen:state" = "end";                                                   
                                                   
                                                   
/* If the player is trying to cheat */                                                   
if(\$body."chargen:finished") \{                                                   
  return FALSE;                                                   
\}                                                   
                                                   
\$body."chargen:finished" = 1;                                                   
                                                   
/* Update the character description */                                                   
Call(\$\{Allegory:Lib:UrPeople:Description\}, "updatedesc");                                                   
                                                   
/* Set the character starting room */                                                   
if(\$body."chargen:start_location") \{         
    \$location = \$body."chargen:start_location";         
\} else \{         
    \$location = "newtown";         
\}         
         
switch(\$location) \{         
    case "docktown":         
    \{         
        \$virtual_room = Spawn(\$\{Allegory:Setting:Rinascita:Buildings:Southeast:Tavern:SecondFloor:Room01\});         
        \$body."virtualhome:severedtail:virtualn" = \$virtual_room;         
        break;         
    \}         
         
    default:         
    \{         
        \$virtual_room = Spawn(\$\{Allegory:Setting:Rinascita:Buildings:Southwest:AnasetteApartments:FirstFloor:Virtual:ClosetOne\});         
        \$body."virtualhome:gildedbalance:firstfloor:closetone" = \$virtual_room;         
        break;         
    \}         
\}         
         
\$virtual_room.homeowner = \$body;         
\$body."virtualhome:home" = \$virtual_room;         
\$body."base:environment" = \$virtual_room;         
\$body."base:environment" = nil;       
         
         
/* Set starting language */         
if(\$body."chargen:lang") Set(\$body, "skill:lang:" + Str(\$body."chargen:lang"), 8);         
if(\$body."chargen:lang2") Set(\$body, "skill:lang:" + Str(\$body."chargen:lang2"), 8);         
         
         
/* Set the character attributes */         
\$body_att = 1;         
\$will_att = 1;         
\$speed_att = 1;         
\$mind_att = 1;         
         
if(!\$body."trait:will" \&\& \$body."trait:agility") \$body."trait:will" = \$body."trait:agility";         
         
if(\$body."trait:body") \$body_att = \$body."trait:body";         
if(\$body."trait:will") \$will_att = \$body."trait:will";         
if(\$body."trait:speed") \$speed_att = \$body."trait:speed";         
if(\$body."trait:mind") \$mind_att = \$body."trait:mind";         
                                                   
if(\$body."temp:attr1" == "body") \$body_att += 5;         
if(\$body."temp:attr1" == "will") \$will_att += 5;         
if(\$body."temp:attr1" == "speed") \$speed_att += 5;         
if(\$body."temp:attr1" == "mind") \$mind_att += 5;         
                                                   
if(\$body."temp:attr2" == "body") \$body_att += 2;         
if(\$body."temp:attr2" == "will") \$will_att += 2;         
if(\$body."temp:attr2" == "speed") \$speed_att += 2;         
if(\$body."temp:attr2" == "mind") \$mind_att += 2;         
                                                   
if(\$body."temp:attr3" == "body") \$body_att -= 2;         
if(\$body."temp:attr3" == "will") \$will_att -= 2;         
if(\$body."temp:attr3" == "speed") \$speed_att -= 2;         
if(\$body."temp:attr3" == "mind") \$mind_att -= 2;         
                                                   
if(\$body_att \< 1) \$body_att = 1;         
if(\$will_att \< 1) \$will_att = 1;         
if(\$speed_att \< 1) \$speed_att = 1;         
if(\$mind_att \< 1) \$mind_att = 1;         
                                                   
\$body."trait:body" = \$body_att;         
\$body."trait:will" = \$will_att;         
\$body."trait:speed" = \$speed_att;         
\$body."trait:mind" = \$mind_att;          
         
/* Set character careers */         
/* Add bonus for ranked characters? */         
if(\$body."temp:career1" == \$body."temp:career2") \{  
    if(\$body."temp:career1" != "none") \{         
        Set(\$body, "skill:career:"+\$body."temp:career1", 5);  
    \}         
\} else \{      
    if(\$body."temp:career1" != "none") \{     
        Set(\$body, "skill:career:"+\$body."temp:career1", 4);  
        if(\$body."temp:career2" != "none") \{  
            Set(\$body, "skill:career:"+\$body."temp:career2", 3);    
        \}  
    \} else \{  
        Set(\$body, "skill:career:"+\$body."temp:career2", 5);    
    \}  
\}          
         
/* Give the player any career props */         
\$itemsarray = Call(this, "grabchoices", \$choice: "startitems", \$gender: \$body."base:genderstring", \$animaltype: \$body."temp:career1");         
/* remove nil items from the array */         
\$itemsarray -= (\{ nil \});         
         
if(sizeof(\$itemsarray)) \{         
    \$index = random(sizeof(\$itemsarray));         
    \$item = Spawn(\$itemsarray[\$index][0]);         
    /* Set item properties */         
    if(sizeof(\$itemsarray[\$index]) \> 1) \{         
        for(\$i=1;\$i\<sizeof(\$itemsarray[\$index]);\$i++)\{         
            if(sizeof(\$itemsarray[\$index][\$i]) \> 1) \{         
                Set(\$item, \$itemsarray[\$index][\$i][0], \$itemsarray[\$index][\$i][random(sizeof(\$itemsarray[\$index][\$i])-1)+1]);         
            \}         
        \}         
    \}         
    \$item."base:environment" = \$body;         
    \$item."chargen:owner" = Str(\$body."skotos:charname");         
    \$item."chargen:owner:account" = Str(\$body."skotos:creator");         
\}         
         
         
\$itemsarray = Call(this, "grabchoices", \$choice: "startitems", \$gender: \$body."base:genderstring", \$animaltype: \$body."temp:career2");         
/* remove nil items from the array */         
\$itemsarray -= (\{ nil, \$index \});         
         
if(sizeof(\$itemsarray)) \{         
    \$index = random(sizeof(\$itemsarray));         
    \$item = Spawn(\$itemsarray[\$index][0]);         
    /* Set item properties */         
    if(sizeof(\$itemsarray[\$index]) \> 1) \{         
        for(\$i = 1; \$i \< sizeof(\$itemsarray[\$index]); \$i++)\{         
            if(sizeof(\$itemsarray[\$index][\$i]) \> 1) \{         
                Set(\$item, \$itemsarray[\$index][\$i][0], \$itemsarray[\$index][\$i][random(sizeof(\$itemsarray[\$index][\$i]) - 1) + 1]);         
            \}         
        \}         
    \}         
    \$item."base:environment" = \$body;         
    \$item."chargen:owner" = Str(\$body."skotos:charname");         
    \$item."chargen:owner:account" = Str(\$body."skotos:creator");         
\}         
         
/* Give player starting garments */         
\$itemsarray = Call(this, "grabchoices", \$choice: "startclothes", \$gender: \$body."base:genderstring", \$animaltype: \$body."chargen:clothing");         
/* remove nil items from the array */         
\$itemsarray -= (\{ nil \});         
            
if(sizeof(\$itemsarray)) \{         
    for(\$i = 0; \$i \< sizeof(\$itemsarray); \$i++) \{         
        \$item = Spawn(\$itemsarray[\$i][0]);         
      
        /* Set item properties */         
        if(sizeof(\$itemsarray[\$i]) \> 1) \{         
            for(\$j = 1; \$j \< sizeof(\$itemsarray[\$i]); \$j++)\{         
                if(sizeof(\$itemsarray[\$i][\$j]) \> 1) \{         
                    Set(\$item, \$itemsarray[\$i][\$j][0], \$itemsarray[\$i][\$j][random(sizeof(\$itemsarray[\$i][\$j]) - 1) + 1]);         
                \}         
            \}         
        \}         
        \$item."base:environment" = \$body;         
        \$item."base:worn-by" = \$body;      
        Act(\$body, "wear", \$articles: \$item);           
        \$item."chargen:owner" = Str(\$body."skotos:charname");         
        \$item."chargen:owner:account" = Str(\$body."skotos:creator");      
    \}      
\}]
\<redirect propob="\$(this)" characterref="\$(body)"/\>
      </Core:Property>
      <Core:Property property="export:xtra:state:start_location">
         X[S] \\\<!-- This is where the user chooses a starting location --\\\>
\<h4\>Create Character: Starting Location\</h4\>\<sbr/\>
(\<a href="http://ironclaw.skotos.net/SAM/Prop/Ironclaw:Theatre:NewCreateCharacter/helppopup#6" target="_blank"\>help\</a\>)
\<p style="text-align:justify"\>As you stumble through the chaotic, bustling streets, a \{ young \| tall \| skinny \| disheveled \| cheerful \} \{ fox \| horse \| weasel \| cat \| wolf \} in \{ merchant's \| priest's \| work \| colorful \| expensive looking \} clothes offers a kind smile and asks, "Can I help you find where you are going?"\</p\>
\<div style="width: 500px; background: white; text-align: left"\>
    \<zform actbody="\$(body)" actfeatures="\$(careerarray)"\>
        \<div\>
            \<input type="radio" id="docktown" name="docktown" onclick="document.getElementById('newtown').checked=false;"/\>
            \<label for="docktown"\>Docktown Inn - Just be careful, it's pretty rough down there!\</label\>
        \</div\>
        \<div\>
            \<input type="radio" id="newtown" name="newtown" checked="checked" onclick="document.getElementById('docktown').checked=false;"/\>
            \<label for="newtown"\>Newtown - I think you'll like that area, if you're into that high-nosed thing!\</label\>
        \</div\>
\<input type="submit" value="Let's go!" class="submit-button" style="float:right"/\>\<sbr/\>
    \<action\>
      \$[if(\$docktown == "on") \$actbody."chargen:start_location" = "docktown";    
        if(\$newtown == "on") \$actbody."chargen:start_location" = "newtown";         
        \$actbody."chargen:state" = "runscripts";]
      \<redirect propob="\$(this)" characterref="\$(actbody)"/\>
    \</action\>
    \</zform\>
\</div\>
\<zact actbody="\$(body)"\>
\<p style="text-align:justify"\>\<font size="3"\>I want to change careers\</font\>\</p\>
  \<action\>
    \$[\$actbody."chargen:state" = "careers";]
    \<redirect propob="\$(this)" characterref="\$(actbody)"/\>
  \</action\>
\</zact\>
\<zact actbody="\$(body)"\>
\<p style="text-align:justify"\>\<font size="3"\>I want to start over.\</font\>\</p\>
  \<action\>
    \$[Slay(\$actbody);]
    \<redirect propob="\$(this)"/\>
  \</action\>
\</zact\>
      </Core:Property>
      <Core:Property property="export:xtra:stylesheet">
         X[S] \<style type="text/css"\>
    p \\\{
      font-size: 14pt;
      text-align: justify;
    \\\}
    .form \\\{
      border: 0;
      outline: 0;
      background: transparent;
      border-bottom: 1px solid black;
      text-align: center;
    \\\}
    \</style\>
      </Core:Property>
      <Core:Property property="merry:lib:figurestate">
         X[M] /*  
  ** Now a bunch of code to figure out which state we're in; further  
  ** down the SAM will act on this information to include the right  
  ** sub-page.  
  */  
  
if(!\$body) return nil;  
  
  /* did we fail to show up in any previous stage on this server? */  
  if (\$dat."stage:no-show") \{  
     \$state = "noshow";  
     \$title = "You have been marked as a 'no-show' in some previous stage.";  
     return nil;  
  \}  
  
/* check that this is the first time we're setting the variables for the character */  
if(!Get(\$body, "CharGen:State"))  
\{  
  Set(\$body, "CharGen:State", Get(\$this, "startpage"));  
\}  
  
/* find which page we're at in the character creator */  
\$title = Get(\$this, "title");  
  
\$state = Get(\$body, "CharGen:State");  
  
return nil;
      </Core:Property>
      <Core:Property property="merry:lib:grabchoices">
         X[M] /*  
Returns an array of start story choices, after being given a choice type, and possibly gender, animal type and animal breed  
*/  
  
if (!\$choice) return (\{\}); 
  
\$choicearray = (\{\}); 
 
if(\$choice == "careers") \{ 
    \$options = this; 
\} else if(\$choice == "startitems") \{
    \$options = this;
    \$choice = "startitems:" + \$animaltype;
    if(!\$choice) \$choice = "startitems";
\} else if (\$choice == "startclothes") \{
    \$options = this;
    \$choice = "startclothes:" + \$animaltype;
\} else \{ 
    if(!(\$options = Get(\$\{Ironclaw:Theatre:CharGen:AnimalChoices\}, "animalchoice:" + \$body."chargen:animal")["options"])) \{ 
        \$options = \$\{Ironclaw:Theatre:CharGen:Animals:Default\}; 
    \} 
\} 
 
\$accountType = general::getAccountType(\$udat: \$dat); 
if(\$dat."testing:account-type") \$accountType = \$dat."testing:account-type";  
 
if(Get(\$options, "choices:" + \$choice)) \{ 
    \$free = (\{ \}); 
    \$standard = (\{ \}); 
    \$premium = (\{ \}); 
 
    if(Get(\$options, "choices:" + \$choice)["free"]) \$free = Get(\$options, "choices:" + \$choice)["free"]; 
    if(Get(\$options, "choices:" + \$choice)["standard"]) \$standard = Get(\$options, "choices:" + \$choice)["standard"]; 
    if(Get(\$options, "choices:" + \$choice)["premium"]) \$premium = Get(\$options, "choices:" + \$choice)["premium"]; 
 
    \$choicearray = \$free; 
 
    if(\$accountType == "standard") \{ 
        \$choicearray \|= \$standard; 
    \} 
 
    if(\$accountType == "premium") \{ 
        \$choicearray \|= \$standard; 
        \$choicearray \|= \$premium; 
    \} 

    if(Get(\$options, "choices:" + \$choice)["only"]) \{
        \$choicearray \|= Get(\$options, "choices:" + \$choice)["only"];
    \}

    if(Get(\$options, "choices:" + \$choice)["all"]) \{
        \$choicearray \|= Get(\$options, "choices:" + \$choice)["all"];
    \}
 
    if(Get(\$options, "choices:" + \$choice)[\$body."base:genderstring"]) \{ 
        \$choicearray \|= Get(\$options, "choices:" + \$choice)[\$body."base:genderstring"]; 
    \} 
\} 
  
\$choicearray = map_indices( arr_to_set( \$choicearray ));  
  
return \$choicearray;
      </Core:Property>
      <Core:Property property="merry:lib:initialize">
         X[M] /* first basic sanity checks -- these should never happen */ 
  if (\$dat == nil) \{ 
     error("page reached without a udat"); 
  \} 
  if (\$name == nil) \{ 
     error("page reached without a name"); 
  \} 
 
  if(\$body == nil \&\& \$characterref) 
  \{ 
    \$body= Obj( \$characterref ); 
  \} 
 
  if(\$body == nil \&\& \$thischaracter != nil) 
  \{ 
    \$body = Obj( \$thischaracter[4..strlen(\$thischaracter)-2] ); 
  \} 
 
  if (\$body == nil) \{ 
     \$state = "no-body"; 
     \$title = "Character Creator"; 
  \} else \{ 
 
/* Check the player isn't trying to access someone elses body */ 
/* Check if the players roster of characters */ 
\$bodies = Udat::query_bodies_in_roster(\$user: \$name); 
 
for(\$i = 0; \$i \< sizeof(\$bodies);) 
\{ 
  if(\$bodies[\$i]."theatre:id" != "IC") 
  \{ 
    \$bodies -= (\{ \$bodies[\$i] \}); 
  \} else \{ 
    \$i++; 
  \} 
\} 
 
\$bodies \&= (\{ \$body \}); 
 
if(sizeof(\$bodies) \< 1) \{ 
  /* Body could be deleted but still owned by this player */ 
  if(\$body.deleted) \{ 
    \$count = 0; 
    while(Obj("Chatters:Backup"+\$body."core:objectname"[8..]+Str(\$count))) \$count++; 
    \$body."core:objectname" = "Chatters:Backup"+\$body."core:objectname"[8..]+Str(\$count); 
    error("Something went wrong, but we're fixing it up now! Please refresh this page, and try creating this character again."); 
  \} 
  error("Body not found in character roster"); 
\} 
 
\} 
 
/* Need to check that this character is from the right theatre */ 
 
/* find the body for this character */ 
/*\$body = nil; 
\$bodies = Udat::query_bodies_in_roster(\$user: \$name); 
for(\$i = 0; \$i \< sizeof(\$bodies);) 
\{ 
  if(\$bodies[\$i]."theatre:id" != Get(\$this, "theatre")) 
  \{ 
    \$bodies -= (\{ \$bodies[\$i] \}); 
  \} else \{ 
    \$i++; 
  \} 
\} 
 
if (!\$bodies \|\| sizeof(\$bodies) \< 1) \{ 
     error("Unknown character"); 
\} else \{ 
  \$body = \$bodies[0]; 
\} 
*/
      </Core:Property>
      <Core:Property property="merry:lib:list-choices">
         X[M] /*  
This function will generate an array which has elements that contain a string, then the property for a character creation choice.  
an input of:  
You have a [noseshape] nose, and [haircolor] hair.  
would be returned as:  
(\{ (\{ "You have a", "noseshape" \}), (\{ "nose, and ", haircolor \}), (\{ "hair." \}) \})  
*/  
/*variables for this function*/  
string Head;  
string Tail;  
string Property;  
string *Properties_arr;  
  
Properties_arr = (\{\});  
if(!\$choices) return Properties_arr;  
\$choices = Str(UnSAM(\$choices));  
  
while(sscanf(\$choices, "%s[submit]%s", Head, Tail) == 2)  
\{  
  \$choices = Head+"\<input type=\\"submit\\" value=\\"SUBMIT\\" style='float:right' class=\\"submit-button\\"/\>"+Tail;  
\}  
  
  
while(sscanf(\$choices, "%s[%s]%s", Head, Property, Tail) == 3)  
\{  
  Head = "" + replace_strings(Head, "\\n", "\<sbr/\>"); 
  Properties_arr += (\{ (\{ ParseXML(Head), Property \}) \});  
  \$choices = Tail;  
\}  
 
Tail = replace_strings(Tail, "\\n", "\<sbr/\>") + ""; 
Properties_arr += (\{ (\{ ParseXML(Tail) \}) \});  
  
return Properties_arr;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1535895709, "jominey", "E", 1535896183, "jominey", "X", 1535896229, "jominey", "E", 1535896240, "jominey", "E", 1535897478, "jominey", "E", 1535897531, "jominey", "E", 1535897816, "jominey", "E", 1535898567, "jominey", "E", 1535898937, "jominey", "E", 1535900185, "jominey", "E", 1535901070, "jominey", "E", 1535903252, "jominey", "E", 1535911829, "jominey", "E", 1536003411, "jominey", "E", 1536003487, "jominey", "E", 1536021699, "jominey", "E", 1536021830, "jominey", "E", 1536022203, "jominey", "E", 1536022300, "jominey", "E", 1536022322, "jominey", "E", 1536022424, "jominey", "E", 1536022476, "jominey", "E", 1536022535, "jominey", "E", 1536022559, "jominey", "E", 1536022627, "jominey", "E", 1537025537, "jominey", "E", 1537025649, "jominey", "E", 1537028058, "jominey", "E", 1537028157, "jominey", "E", 1537028404, "jominey", "E", 1537028580, "jominey", "E", 1560368753, "jominey", "E", 1560369417, "jominey", "E", 1560369510, "jominey", "E", 1560369700, "jominey", "E", 1560369806, "jominey", "E", 1560370028, "jominey", "E", 1560370299, "jominey", "E", 1560370375, "jominey", "E", 1560371122, "jominey", "E", 1560371748, "jominey", "E", 1560371930, "jominey", "E", 1560371958, "jominey", "E", 1560372137, "jominey", "E", 1560372233, "jominey", "E", 1560372268, "jominey", "E" \})
      </Core:Property>
    </Core:PCProperties>
    <Notes:Notes/>
  </Core:PropertyContainer>
</object>
