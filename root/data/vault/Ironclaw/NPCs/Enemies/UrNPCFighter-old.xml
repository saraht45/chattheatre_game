<object clone="/base/obj/thing" owner="SkotOS">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Ironclaw:Lib:Combat:Cards:NPCs:UrFightingPerson)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="true">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details/>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="error">
         "Failed to locate library move."
      </Core:Property>
      <Core:Property property="export:combat:actions">
         200
      </Core:Property>
      <Core:Property property="export:combat:actions:current">
         200
      </Core:Property>
      <Core:Property property="export:combat:damage">
         0
      </Core:Property>
      <Core:Property property="export:combat:fatigue">
         0
      </Core:Property>
      <Core:Property property="export:combat:fightable">
         1
      </Core:Property>
      <Core:Property property="export:combat:naturalweapon">
         \<Ironclaw:Lib:Combat:Weapons:Enemies:SpiderBite\>
      </Core:Property>
      <Core:Property property="export:nip-core:hooks">
         ([ "decide":\<Lib:NIP:base:hooks:decide\>, "delay":\<Lib:NIP:base:hooks:delay\>, "emoting":\<Lib:NIP:lib:emoting\>, "fighting-fake-abc":\<IC:Lib:NIP:lib:fighting-fake-abc\>, "internal":\<Lib:NIP:base:hooks:internal\>, "resource-control":\<Lib:NIP:lib:resource-control\> ])
      </Core:Property>
      <Core:Property property="export:nip-core:inherits">
         ([ \<IC:Lib:NIP:lib:fighting-fake-abc\>:(\{ "act:nip/die", "lib:fighting-fake-abc:decide", "lib:fight_loop", "lib:choose_target", "react:command-dob%nip-fighting", "react:command-iob%nip-fighting", "lib:fight_command", "act-pre:combat_getattacked%nip-fighting", "act-pre:combat_getattacked_preempt%nip-fighting", "witness:enter-into%nip-fighting" \}), \<Lib:NIP:base:lib:hooks\>:(\{ "lib:core:find-hook", "lib:core:register-hook", "lib:core:unregister-hook", "lib:modify:hooks", "setprop-post:hook" \}), \<Lib:NIP:base:lib:signals\>:(\{ "lib:modify:signals", "setprop-post:signal", "lib:calc_sighookpath" \}), \<Lib:NIP:base:lib:stream\>:(\{ "setprop-post:sigexecptr", "setprop-post:sigstream" \}), \<Lib:NIP:base:signals:DECIDE\>:(\{ "setprop-post:decide" \}), \<Lib:NIP:lib:emoting\>:(\{ "lib:handler:emoting:parse", "lib:behave", "lib:handler:emoting:preparse" \}), \<Lib:NIP:lib:resource-control\>:(\{ "witness-post:login%nip:resource-control", "witness:enter-from%nip:resource-control", "witness:teleport%resource-control", "lib:entering" \}), \<Lib:NIP:lib:spawn-control\>:(\{ "act:stop" \}) ])
      </Core:Property>
      <Core:Property property="export:nip-core:libraries">
         (\{ \<Lib:NIP:base:lib:signals\>, \<Lib:NIP:base:lib:hooks\>, \<Lib:NIP:base:lib:stream\>, \<Lib:NIP:lib:resource-control\>, \<Lib:NIP:core\>, \<Lib:NIP:base:signals:DELAY\>, \<Lib:NIP:base:signals:DECIDE\>, \<Lib:NIP:base:signals:INTERNAL\>, \<Lib:NIP:lib:emoting\>, \<IC:Lib:NIP:lib:fighting-fake-abc\>, \<Lib:NIP:lib:spawn-control\> \})
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:behavior:">
         ([ 4:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:emoting:frequency">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:hints:">
         ([ 4:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:resource-control:ttl">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:resource-control:ttl_increase">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:spawn:area">
         ([ 4:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:sighookpath">
         (\{ "delay:DELAY-init", "delay:DELAY-exec", "internal:INTERNAL-exec", "decide:DECIDE-init", "emoting:DECIDE", "fighting-fake-abc:DECIDE", "decide:DECIDE-exec", "decide:DECIDE-post" \})
      </Core:Property>
      <Core:Property property="export:nip-core:signals">
         ([ 10:"DELAY", 500:"INTERNAL", 1000:"DECIDE" ])
      </Core:Property>
      <Core:Property property="export:nip-core:system:revision">
         44
      </Core:Property>
      <Core:Property property="export:nip:trait:fighting:attack-everyone">
         0
      </Core:Property>
      <Core:Property property="export:nip:trait:fighting:attack-when-provoked">
         1
      </Core:Property>
      <Core:Property property="export:nip:trait:fighting:block-message">
         "(npc) blocks (actor) from leaving."
      </Core:Property>
      <Core:Property property="export:nip:trait:fighting:block-runners">
         1
      </Core:Property>
      <Core:Property property="export:nip:trait:fighting:delay-max">
         60
      </Core:Property>
      <Core:Property property="export:nip:trait:fighting:delay-min">
         7
      </Core:Property>
      <Core:Property property="export:nip:trait:fighting:hurtful-verbs">
         (\{ "slash", "cut", "stab", "punch", "hit", "kick" \})
      </Core:Property>
      <Core:Property property="export:nip:trait:fighting:killable">
         0
      </Core:Property>
      <Core:Property property="export:nip:trait:fighting:multiattack">
         2
      </Core:Property>
      <Core:Property property="export:nip:trait:fighting:retarget">
         1
      </Core:Property>
      <Core:Property property="export:nip:trait:fighting:targeting-frequency">
         3
      </Core:Property>
      <Core:Property property="export:nip:trait:freemoting:frequency">
         20
      </Core:Property>
      <Core:Property property="export:nip:trait:freemoting:steal-frequency">
         10
      </Core:Property>
      <Core:Property property="export:nip:trait:resource-control:ttl">
         1800
      </Core:Property>
      <Core:Property property="export:nip:trait:resource-control:ttl_increase">
         600
      </Core:Property>
      <Core:Property property="export:trait:agility">
         1
      </Core:Property>
      <Core:Property property="export:trait:body">1</Core:Property>
      <Core:Property property="export:trait:mind">1</Core:Property>
      <Core:Property property="export:trait:nodelay">
         1
      </Core:Property>
      <Core:Property property="export:trait:speed">1</Core:Property>
      <Core:Property property="loading">1</Core:Property>
      <Core:Property property="merry:act-post:combat_getattacked%reaction">
         X[M] /* react to getting attacked */
return TRUE;
      </Core:Property>
      <Core:Property property="merry:act-post:combat_getattacked_preempt%reaction">
         X[M] /* react to getting attacked by attacking in response */
/* if we're not in combat mode, go into combat mode */

if(!this."nip:trait:fighting:attack-everyone" \&\& (!this."nip:trait:fighting:attack-when-provoked" \|\| !sizeof(Arr(this."npc:fighting:provocateurs")))) \{
  if(\$debug)
    EmitTo(this, "I'm not going to attack anyone. I won't bother checking for targets.");
  return TRUE;
\}

if(!\$this."combat:fighting") \{
  Social(\$this, "fight", nil, nil, nil, \$attacker);
  \$delay(1, TRUE, "c1e3");
\}
if(\$this."combat:fighting") \{
  \$weapon = nil;
  Social(\$this, "attack", nil, nil, nil, \$attacker);
\}
return TRUE;
      </Core:Property>
      <Core:Property property="merry:act-post:combat_getdamaged%reaction">
         X[M] if(this."combat:damage" \&\& this."combat:damage" \> this."trait:body"+3) \{ 
  if(this."base:environment") \{
    /* react to getting damaged by responding */
    Social(\$this, "recoil", "painfully");
  \}
\}
return TRUE;
      </Core:Property>
      <Core:Property property="merry:inherit:act-pre:combat_getattacked%nip-fighting">
         \<IC:Lib:NIP:lib:fighting-fake-abc\>
      </Core:Property>
      <Core:Property property="merry:inherit:act-pre:combat_getattacked_preempt%nip-fighting">
         \<IC:Lib:NIP:lib:fighting-fake-abc\>
      </Core:Property>
      <Core:Property property="merry:inherit:act-pre:enter">
         \<Shared:Systems:Combat:ABC:Lib\>
      </Core:Property>
      <Core:Property property="merry:inherit:act:attack">
         \<Shared:Systems:Combat:ABC:Lib\>
      </Core:Property>
      <Core:Property property="merry:inherit:act:breakcombat">
         \<Shared:Systems:Combat:ABC:Lib\>
      </Core:Property>
      <Core:Property property="merry:inherit:act:combat_getattacked">
         \<Shared:Systems:Combat:ABC:Lib\>
      </Core:Property>
      <Core:Property property="merry:inherit:act:combat_getdamaged">
         \<Shared:Systems:Combat:ABC:Lib\>
      </Core:Property>
      <Core:Property property="merry:inherit:act:combat_ping">
         \<Shared:Systems:Combat:ABC:Lib\>
      </Core:Property>
      <Core:Property property="merry:inherit:act:fight">
         \<Shared:Systems:Combat:ABC:Lib\>
      </Core:Property>
      <Core:Property property="merry:inherit:act:nip/die">
         \<IC:Lib:NIP:lib:fighting-fake-abc\>
      </Core:Property>
      <Core:Property property="merry:inherit:act:sneakattack">
         \<Shared:Systems:Combat:ABC:Lib\>
      </Core:Property>
      <Core:Property property="merry:inherit:act:start">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:act:stop">
         \<Lib:NIP:lib:spawn-control\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:behave">
         \<Lib:NIP:lib:emoting\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:calc_sighookpath">
         \<Lib:NIP:base:lib:signals\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:choose_target">
         \<IC:Lib:NIP:lib:fighting-fake-abc\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:find-hook">
         \<Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:merry_add">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:merry_delete">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:register-hook">
         \<Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:sysupdate">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:unregister-hook">
         \<Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:decide:decide-exec">
         \<Lib:NIP:base:hooks:decide\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:decide:decide-init">
         \<Lib:NIP:base:hooks:decide\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:decide:decide-post">
         \<Lib:NIP:base:hooks:decide\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:delay:delay-exec">
         \<Lib:NIP:base:hooks:delay\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:delay:delay-init">
         \<Lib:NIP:base:hooks:delay\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:emoting:decide">
         \<Lib:NIP:lib:emoting\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:entering">
         \<Lib:NIP:lib:resource-control\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:fight_command">
         \<IC:Lib:NIP:lib:fighting-fake-abc\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:fight_loop">
         \<IC:Lib:NIP:lib:fighting-fake-abc\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:fighting-fake-abc:decide">
         \<IC:Lib:NIP:lib:fighting-fake-abc\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:find_nip_object">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:handler:emoting:parse">
         \<Lib:NIP:lib:emoting\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:handler:emoting:preparse">
         \<Lib:NIP:lib:emoting\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:heartbeat">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:internal:internal-exec">
         \<Lib:NIP:base:hooks:internal\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:log">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:modify:hooks">
         \<Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:modify:libraries">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:modify:signals">
         \<Lib:NIP:base:lib:signals\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:ncs:handler">
         \<Lib:NIP:NCS\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:shutdown">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:react:command-dob%nip-fighting">
         \<IC:Lib:NIP:lib:fighting-fake-abc\>
      </Core:Property>
      <Core:Property property="merry:inherit:react:command-iob%nip-fighting">
         \<IC:Lib:NIP:lib:fighting-fake-abc\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:add">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:decide">
         \<Lib:NIP:base:signals:DECIDE\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:del">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:delete">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:error">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:hook">
         \<Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:nip">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:nip-core">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:sigexecptr">
         \<Lib:NIP:base:lib:stream\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:signal">
         \<Lib:NIP:base:lib:signals\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:sigstream">
         \<Lib:NIP:base:lib:stream\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:sub">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:witness-post:login%nip:resource-control">
         \<Lib:NIP:lib:resource-control\>
      </Core:Property>
      <Core:Property property="merry:inherit:witness:enter-from%nip:resource-control">
         \<Lib:NIP:lib:resource-control\>
      </Core:Property>
      <Core:Property property="merry:inherit:witness:enter-into%nip-fighting">
         \<IC:Lib:NIP:lib:fighting-fake-abc\>
      </Core:Property>
      <Core:Property property="merry:inherit:witness:teleport%resource-control">
         \<Lib:NIP:lib:resource-control\>
      </Core:Property>
      <Core:Property property="merry:setprop-post:combat:damage">
         X[M] /* are they too injured to fight? */
return Call(\$\{Ironclaw:Lib:Combat:Cards:Injuries\}, "takendamage", \$char: \$this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:combat:fatigue">
         X[M] /* are they too injured to fight? */
return Call(\$\{Ironclaw:Lib:Combat:Cards:Injuries\}, "takendamage", \$char: \$this);
      </Core:Property>
      <Core:Property property="merry:witness:enter-into">
         X[M] return Call(\$\{Shared:Systems:Combat:ABC:Lib\}, "block-exit", \$watcher: \$this);
      </Core:Property>
      <Core:Property property="ndp">
         " *** FINISHED ADDITION *** "
      </Core:Property>
      <Core:Property property="nip-core:hooks">
         ([ "decide":\<Lib:NIP:base:hooks:decide\>, "delay":\<Lib:NIP:base:hooks:delay\>, "emoting":\<Lib:NIP:lib:emoting\>, "fighting-fake-abc":\<IC:Lib:NIP:lib:fighting-fake-abc\>, "internal":\<Lib:NIP:base:hooks:internal\>, "resource-control":\<Lib:NIP:lib:resource-control\> ])
      </Core:Property>
      <Core:Property property="nip-core:inherits">
         ([ \<IC:Lib:NIP:lib:fighting-fake-abc\>:(\{ "act:nip/die", "lib:fighting-fake-abc:decide", "lib:fight_loop", "lib:choose_target", "react:command-dob%nip-fighting", "react:command-iob%nip-fighting", "lib:fight_command", "act-pre:combat_getattacked%nip-fighting", "act-pre:combat_getattacked_preempt%nip-fighting", "witness:enter-into%nip-fighting" \}), \<Lib:NIP:base:lib:hooks\>:(\{ "lib:core:find-hook", "lib:core:register-hook", "lib:core:unregister-hook", "lib:modify:hooks", "setprop-post:hook" \}), \<Lib:NIP:base:lib:signals\>:(\{ "lib:modify:signals", "setprop-post:signal", "lib:calc_sighookpath" \}), \<Lib:NIP:base:lib:stream\>:(\{ "setprop-post:sigexecptr", "setprop-post:sigstream" \}), \<Lib:NIP:base:signals:DECIDE\>:(\{ "setprop-post:decide" \}), \<Lib:NIP:lib:emoting\>:(\{ "lib:handler:emoting:parse", "lib:behave", "lib:handler:emoting:preparse" \}), \<Lib:NIP:lib:resource-control\>:(\{ "witness-post:login%nip:resource-control", "witness:enter-from%nip:resource-control", "witness:teleport%resource-control", "lib:entering" \}), \<Lib:NIP:lib:spawn-control\>:(\{ "act:stop" \}) ])
      </Core:Property>
      <Core:Property property="nip-core:libraries">
         (\{ \<Lib:NIP:base:lib:signals\>, \<Lib:NIP:base:lib:hooks\>, \<Lib:NIP:base:lib:stream\>, \<Lib:NIP:lib:resource-control\>, \<Lib:NIP:core\>, \<Lib:NIP:base:signals:DELAY\>, \<Lib:NIP:base:signals:DECIDE\>, \<Lib:NIP:base:signals:INTERNAL\>, \<Lib:NIP:lib:emoting\>, \<IC:Lib:NIP:lib:fighting-fake-abc\>, \<Lib:NIP:lib:spawn-control\> \})
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:behavior:">
         ([ 4:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:emoting:frequency">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:hints:">
         ([ 4:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:resource-control:ttl">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:resource-control:ttl_increase">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:spawn:area">
         ([ 4:1 ])
      </Core:Property>
      <Core:Property property="nip-core:sighookpath">
         (\{ "delay:DELAY-init", "delay:DELAY-exec", "internal:INTERNAL-exec", "decide:DECIDE-init", "emoting:DECIDE", "fighting-fake-abc:DECIDE", "decide:DECIDE-exec", "decide:DECIDE-post" \})
      </Core:Property>
      <Core:Property property="nip-core:signals">
         ([ 10:"DELAY", 500:"INTERNAL", 1000:"DECIDE" ])
      </Core:Property>
      <Core:Property property="nip-core:system:revision">
         44
      </Core:Property>
      <Core:Property property="nip:trait:fighting:attack-everyone">
         0
      </Core:Property>
      <Core:Property property="nip:trait:fighting:attack-when-provoked">
         1
      </Core:Property>
      <Core:Property property="nip:trait:fighting:block-message">
         "(npc) blocks (actor) from leaving."
      </Core:Property>
      <Core:Property property="nip:trait:fighting:block-runners">
         1
      </Core:Property>
      <Core:Property property="nip:trait:fighting:delay-max">
         60
      </Core:Property>
      <Core:Property property="nip:trait:fighting:delay-min">
         7
      </Core:Property>
      <Core:Property property="nip:trait:fighting:hurtful-verbs">
         (\{ "slash", "cut", "stab", "punch", "hit", "kick" \})
      </Core:Property>
      <Core:Property property="nip:trait:fighting:killable">
         0
      </Core:Property>
      <Core:Property property="nip:trait:fighting:multiattack">
         2
      </Core:Property>
      <Core:Property property="nip:trait:fighting:retarget">
         1
      </Core:Property>
      <Core:Property property="nip:trait:fighting:targeting-frequency">
         3
      </Core:Property>
      <Core:Property property="nip:trait:freemoting:frequency">
         20
      </Core:Property>
      <Core:Property property="nip:trait:freemoting:steal-frequency">
         10
      </Core:Property>
      <Core:Property property="nip:trait:resource-control:ttl">
         1800
      </Core:Property>
      <Core:Property property="nip:trait:resource-control:ttl_increase">
         600
      </Core:Property>
      <Core:Property property="npc:fighting:provocateurs"/>
      <Core:Property property="npc:resource-control:live_time">
         1359492069
      </Core:Property>
      <Core:Property property="npc:status:spawndate">
         1359492069
      </Core:Property>
      <Core:Property property="npc:sys:sighookpath">
         (\{ "delay:DELAY-init", "delay:DELAY-exec", "internal:INTERNAL-exec", "decide:DECIDE-init", "emoting:DECIDE", "fighting-fake-abc:DECIDE", "decide:DECIDE-exec", "decide:DECIDE-post" \})
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1190518552, "tonyd", "E", 1190518680, "tonyd", "E", 1190526211, "tonyd", "E", 1190527162, "tonyd", "P", 1190527180, "tonyd", "P", 1190527307, "tonyd", "P", 1190527347, "tonyd", "P", 1190527883, "tonyd", "P", 1190527904, "tonyd", "P", 1190528175, "tonyd", "P", 1190541937, "tonyd", "P", 1190542054, "tonyd", "P", 1190542335, "tonyd", "P", 1190543335, "tonyd", "P", 1190543489, "tonyd", "P", 1190543522, "tonyd", "P", 1190543563, "tonyd", "P", 1190543589, "tonyd", "P", 1190553797, "tonyd", "P", 1190553825, "tonyd", "P", 1190555874, "tonyd", "P", 1191064952, "tonyd", "E", 1191065044, "tonyd", "E", 1191065261, "tonyd", "E", 1343504189, "jominey", "E", 1343504204, "jominey", "E", 1343504402, "jominey", "E", 1343504437, "jominey", "E", 1343505078, "jominey", "E", 1359491457, "jominey", "E", 1359492016, "jominey", "E", 1359492092, "jominey", "S", 1359492095, "jominey", "S", 1359492137, "jominey", "S", 1359492146, "jominey", "S", 1359492149, "jominey", "S", 1359492185, "jominey", "S", 1359492721, "jominey", "E", 1359492761, "jominey", "E", 1359493081, "jominey", "S", 1359493089, "jominey", "S", 1464431474, "tonyd", "R", 1464431504, "tonyd", "E" \})
      </Core:Property>
      <Core:Property property="sigstream">2</Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
