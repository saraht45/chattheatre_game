<object clone="/base/obj/thing" owner="jominey">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Ironclaw:NPC:UrNPC)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="1"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="true">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details/>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:nip-core:hooks">
         ([ "decide":\<Lib:NIP:base:hooks:decide\>, "delay":\<Lib:NIP:base:hooks:delay\>, "internal":\<Lib:NIP:base:hooks:internal\>, "resource-control":\<Lib:NIP:lib:resource-control\> ])
      </Core:Property>
      <Core:Property property="export:nip-core:inherits">
         ([ \<Lib:NIP:base:lib:hooks\>:(\{ "lib:core:find-hook", "lib:core:register-hook", "lib:core:unregister-hook", "lib:modify:hooks", "setprop-post:hook" \}), \<Lib:NIP:base:lib:signals\>:(\{ "lib:modify:signals", "setprop-post:signal", "lib:calc_sighookpath" \}), \<Lib:NIP:base:lib:stream\>:(\{ "setprop-post:sigexecptr", "setprop-post:sigstream" \}), \<Lib:NIP:base:signals:DECIDE\>:(\{ "setprop-post:decide" \}), \<Lib:NIP:lib:guarding\>:(\{ "witness:enter-into%nip:core", "lib:handler:request-authority" \}), \<Lib:NIP:lib:resource-control\>:(\{ "witness-post:login%nip:resource-control", "witness:enter-from%nip:resource-control", "witness:teleport%resource-control", "lib:entering" \}) ])
      </Core:Property>
      <Core:Property property="export:nip-core:libraries">
         (\{ \<Lib:NIP:base:lib:signals\>, \<Lib:NIP:base:lib:hooks\>, \<Lib:NIP:base:lib:stream\>, \<Lib:NIP:lib:resource-control\>, \<Lib:NIP:core\>, \<Lib:NIP:base:signals:DELAY\>, \<Lib:NIP:base:signals:DECIDE\>, \<Lib:NIP:base:signals:INTERNAL\>, \<Lib:NIP:lib:guarding\> \})
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:resource-control:ttl">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:resource-control:ttl_increase">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:sighookpath">
         (\{ "delay:DELAY-init", "delay:DELAY-exec", "internal:INTERNAL-exec", "decide:DECIDE-init", "decide:DECIDE-exec", "decide:DECIDE-post" \})
      </Core:Property>
      <Core:Property property="export:nip-core:signals">
         ([ 10:"DELAY", 500:"INTERNAL", 1000:"DECIDE" ])
      </Core:Property>
      <Core:Property property="export:nip-core:system:revision">
         44
      </Core:Property>
      <Core:Property property="export:nip:trait:resource-control:ttl">
         1800
      </Core:Property>
      <Core:Property property="export:nip:trait:resource-control:ttl_increase">
         600
      </Core:Property>
      <Core:Property property="export:topics:all">
         ([ "avoirdupois":([ "keywords":(\{ "avoirdupois" \}), "prop":"avoirdupois" ]), "bisclavret":([ "keywords":(\{ "bisclavret" \}), "prop":"bisclavret" ]), "church":([ "keywords":(\{ "church" \}), "prop":"church" ]), "constabulary":([ "keywords":(\{ "constabulary", "constables" \}), "prop":"constabulary" ]), "council":([ "keywords":(\{ "guild council", "council" \}), "prop":"council" ]), "current leader":([ "keywords":(\{ "leader", "leadership", "current leader" \}), "prop":"leader" ]), "doloreaux":([ "keywords":(\{ "doloreaux" \}), "prop":"doloreaux" ]), "rinaldi":([ "keywords":(\{ "rinaldi" \}), "prop":"rinaldi" ]) ])
      </Core:Property>
      <Core:Property property="export:trait:brief">
         "manor guard"
      </Core:Property>
      <Core:Property property="loading">1</Core:Property>
      <Core:Property property="merry:act:start">
         X[M] \$array = \$this."npc:animalchoices"[random(sizeof(\$this."npc:animalchoices"))];    
\$animalbreed = \$array[1];    
\$animaltype = \$array[0];    
EmitTo(\$actor, "Chose a "+\$animaltype+" - "+\$animalbreed);    
    
\$this."trait:animal" = \$animalbreed;    
\$this."trait:animaltype" = \$animaltype;    
  
\$array = Call(\$\{Ironclaw:Theatre:Web:ICStartStory\}, "grabchoices", \$choice: "build");    
\$this."appearance:build" = \$array[random(sizeof(\$array))];    
    
\$array = Call(\$\{Ironclaw:Theatre:Web:ICStartStory\}, "grabchoices", \$choice: "height");    
\$this."appearance:height" = \$array[random(sizeof(\$array))];    
    
\$array = Call(\$\{Ironclaw:Theatre:Web:ICStartStory\}, "grabchoices", \$choice: "clawapp");    
\$this."appearance:clawapp" = \$array[random(sizeof(\$array))];    
    
\$array = Call(\$\{Ironclaw:Theatre:Web:ICStartStory\}, "grabchoices", \$choice: "clawlength");    
\$this."appearance:clawlength" = \$array[random(sizeof(\$array))];    
    
\$array = Call(\$\{Ironclaw:Theatre:Web:ICStartStory\}, "grabchoices", \$choice: "earshape");    
\$this."appearance:earshape" = \$array[random(sizeof(\$array))];    
    
\$array = Call(\$\{Ironclaw:Theatre:Web:ICStartStory\}, "grabchoices", \$choice: "eyecolor");    
\$this."appearance:eyecolor" = \$array[random(sizeof(\$array))];    
    
\$array = Call(\$\{Ironclaw:Theatre:Web:ICStartStory\}, "grabchoices", \$choice: "eyecoloradj");    
\$this."appearance:eyecoloradj" = \$array[random(sizeof(\$array))];    
    
\$array = Call(\$\{Ironclaw:Theatre:Web:ICStartStory\}, "grabchoices", \$choice: "eyeshape");    
\$this."appearance:eyeshape" = \$array[random(sizeof(\$array))];    
    
\$array = Call(\$\{Ironclaw:Theatre:Web:ICStartStory\}, "grabchoices", \$choice: "feet");    
\$this."appearance:feet" = \$array[random(sizeof(\$array))];    
    
\$array = Call(\$\{Ironclaw:Theatre:Web:ICStartStory\}, "grabchoices", \$choice: "furcolor");    
\$this."appearance:furcolor" = \$array[random(sizeof(\$array))];    
    
\$array = Call(\$\{Ironclaw:Theatre:Web:ICStartStory\}, "grabchoices", \$choice: "furlength");    
\$this."appearance:furlength" = \$array[random(sizeof(\$array))];    
    
\$array = Call(\$\{Ironclaw:Theatre:Web:ICStartStory\}, "grabchoices", \$choice: "furtexture");    
\$this."appearance:furtexture" = \$array[random(sizeof(\$array))];    
    
\$array = Call(\$\{Ironclaw:Theatre:Web:ICStartStory\}, "grabchoices", \$choice: "hands");    
\$this."appearance:hands" = \$array[random(sizeof(\$array))];    
    
\$array = Call(\$\{Ironclaw:Theatre:Web:ICStartStory\}, "grabchoices", \$choice: "lipshape");    
\$this."appearance:lipshape" = \$array[random(sizeof(\$array))];    
    
\$array = Call(\$\{Ironclaw:Theatre:Web:ICStartStory\}, "grabchoices", \$choice: "mouthshape");    
\$this."appearance:mouthshape" = \$array[random(sizeof(\$array))];    
    
\$array = Call(\$\{Ironclaw:Theatre:Web:ICStartStory\}, "grabchoices", \$choice: "muzzleshape");    
\$this."appearance:muzzleshape" = \$array[random(sizeof(\$array))];    
    
\$array = Call(\$\{Ironclaw:Theatre:Web:ICStartStory\}, "grabchoices", \$choice: "noseshape");    
\$this."appearance:noseshape" = \$array[random(sizeof(\$array))];    
    
\$array = Call(\$\{Ironclaw:Theatre:Web:ICStartStory\}, "grabchoices", \$choice: "taillength");    
\$this."appearance:taillength" = \$array[random(sizeof(\$array))];    
    
\$array = Call(\$\{Ironclaw:Theatre:Web:ICStartStory\}, "grabchoices", \$choice: "tailtexture");    
\$this."appearance:tailtexture" = \$array[random(sizeof(\$array))];    
    
\$array = Call(\$\{Ironclaw:Theatre:Web:ICStartStory\}, "grabchoices", \$choice: "anterlength");    
\$this."appearance:anterlength" = \$array[random(sizeof(\$array))];    
    
\$array = Call(\$\{Ironclaw:Theatre:Web:ICStartStory\}, "grabchoices", \$choice: "antlertype");    
\$this."appearance:antlertype" = \$array[random(sizeof(\$array))];    
    
\$array = Call(\$\{Ironclaw:Theatre:Web:ICStartStory\}, "grabchoices", \$choice: "hairtype");    
\$this."appearance:hairtype" = \$array[random(sizeof(\$array))];    
    
\$array = Call(\$\{Ironclaw:Theatre:Web:ICStartStory\}, "grabchoices", \$choice: "haircolor");    
\$this."appearance:haircolor" = \$array[random(sizeof(\$array))];    
    
\$array = Call(\$\{Ironclaw:Theatre:Web:ICStartStory\}, "grabchoices", \$choice: "hairlength");    
\$this."appearance:hairlength" = \$array[random(sizeof(\$array))];    
    
\$array = Call(\$\{Ironclaw:Theatre:Web:ICStartStory\}, "grabchoices", \$choice: "hairstyle");    
\$this."appearance:hairstyle" = \$array[random(sizeof(\$array))];    
    
/* Spawn some clothes */  
\$uniform = Spawn(\$\{IronClaw:Props:Clothing:InProgress:GuardUniform\});  
\$uniform."trait:color" = Str(\$this."trait:uniformcolor");
\$uniform."base:environment" = \$this;  
  
Act(\$this, "wear", \$articles: (\{ \$uniform \}));  
    
    
return TRUE;
      </Core:Property>
      <Core:Property property="merry:inherit:act:start">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:calc_sighookpath">
         \<Lib:NIP:base:lib:signals\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:find-hook">
         \<Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:merry_add">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:merry_delete">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:register-hook">
         \<Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:sysupdate">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:unregister-hook">
         \<Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:decide:decide-exec">
         \<Lib:NIP:base:hooks:decide\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:decide:decide-init">
         \<Lib:NIP:base:hooks:decide\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:decide:decide-post">
         \<Lib:NIP:base:hooks:decide\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:delay:delay-exec">
         \<Lib:NIP:base:hooks:delay\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:delay:delay-init">
         \<Lib:NIP:base:hooks:delay\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:entering">
         \<Lib:NIP:lib:resource-control\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:find_nip_object">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:handler:request-authority">
         \<Lib:NIP:lib:guarding\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:heartbeat">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:internal:internal-exec">
         \<Lib:NIP:base:hooks:internal\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:log">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:modify:hooks">
         \<Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:modify:libraries">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:modify:signals">
         \<Lib:NIP:base:lib:signals\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:ncs:handler">
         \<Lib:NIP:NCS\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:shutdown">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:react-pre:ask-dob%ask-about">
         \<Ironclaw:Lib:NIP:ask-about\>
      </Core:Property>
      <Core:Property property="merry:inherit:react:ask-dob%trading">
         \<Allegory:Lib:Economy:TradingLib\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:add">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:decide">
         \<Lib:NIP:base:signals:DECIDE\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:del">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:delete">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:error">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:hook">
         \<Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:nip">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:nip-core">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:sigexecptr">
         \<Lib:NIP:base:lib:stream\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:signal">
         \<Lib:NIP:base:lib:signals\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:sigstream">
         \<Lib:NIP:base:lib:stream\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:sub">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:witness-post:login%nip:resource-control">
         \<Lib:NIP:lib:resource-control\>
      </Core:Property>
      <Core:Property property="merry:inherit:witness:enter-from%nip:resource-control">
         \<Lib:NIP:lib:resource-control\>
      </Core:Property>
      <Core:Property property="merry:inherit:witness:enter-into%nip:core">
         \<Lib:NIP:lib:guarding\>
      </Core:Property>
      <Core:Property property="merry:inherit:witness:teleport%resource-control">
         \<Lib:NIP:lib:resource-control\>
      </Core:Property>
      <Core:Property property="merry:lib:handler:request-authority">
         X[M] \$allowedguilds = (\{ \});
if(\$this."allowed:guilds") \{
    \$allowedguilds = \$this."allowed:guilds";
\}

\$allowedpeople = (\{ \});
if(\$this."allowed:people") \{
    \$allowedpeople = \$this."allowed:people";
\}

\$allowedhouse = "";
if(\$this."trait:house") \{
    \$allowedhouse = \$this."trait:house";
\}

\$guild = \$actor.guild;

\$env = \$this."base:environment";
\$detail = \$this.gatedetail;

if(!member(\$detail, Get(\$env, "base:details"))) \{
    return TRUE;
\}

if(NRefDetail(\$target) != \$detail) \{
    return TRUE;
\}

/* are they following someone through? */ 
if(\$actor.follow \&\& NRefOb(\$dest) == \$actor.follow."base:environment") 
  return TRUE;

if(\$this.blockingall) \{
    Social(\$this, "halt", nil, "I am sorry, but you are not allowed through.", nil, \$actor);
    return FALSE;
\}

if(!member(\$guild, \$allowedguilds) \&\& !member(\$actor, \$allowedpeople) \&\& lower_case(Str(\$actor."trait:house")) != lower_case(\$allowedhouse)) \{
    Social(\$this, "halt", nil, "I am sorry, but you are not allowed through.", nil, \$actor);
    return FALSE;
\}


if(Int(\$actor."rank:rank") \> 6) \{
    Social(\$this, "bow", "respectfully", "Welcome.", "to", \$actor);
\} else \{
    Social(\$this, "nod", nil, "Welcome.", "at", \$actor);
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:leader">
         X[M] object guild, leader;

guild = \$this.guild;
leader = guild.leader;

if(!leader) \{
    EmitTo(\$actor, TAG(capitalize(Describe(\$this)) + " tells you, \\"There currently is no leader of the " + Str(guild.shortname) + " embassy.\\"", "social:second"));
\} else \{
    EmitTo(\$actor, TAG(capitalize(Describe(\$this)) + " tells you, \\"The current leader of the " + Str(guild.shortname) + " embassy is " + Str(leader."trait:title") + " " + Str(capitalize(leader."skotos:charname")) + ".\\"", "social:second"));
\}

return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:respond">
         X[M] \$str = replace_strings(\$evoke, "\\"", "", ".", "");

if(\$this."allowed:people") \$guestlist = \$this."allowed:people" - (\{ nil \});

if(\$actor.guild == \$this.guild \&\& (\$actor."guild:guild_seneschal" \|\| \$actor."guild:rank" == 1)) \{
    if(contains(lower_case(\$str), "guest list")) \{
        if(!\$guestlist \|\| !sizeof(\$guestlist)) \{
            \$response = "Currently, there is no one on the guest list.";
        \} else \{
            \$response = "The following people are on the guest list: ";

            for(\$i = 0; \$i \< sizeof(\$guestlist); \$i++) \{
                \$response += capitalize(Str(\$guestlist[\$i]."skotos:charname"));
                if(\$i \< sizeof(\$guestlist)-1) \$response += ", ";
            \}
        \}
    \} else \{
        \$temp = explode(\$str, " ");

        if(sizeof(\$temp) \&\& sizeof(\$temp) == 2) \{
            \$name = \$temp[1];
            \$body = common::lookup(\$name: \$name);

            if(lower_case(\$temp[0]) == "allow") \{
                if(!\$body) \{
                    \$response = "I'm sorry but I don't know who you're talking about.";
                \} else \{
                    if(member(\$body, \$guestlist)) \{
                        \$response = Str(\$body."skotos:playercapname") + " is already on the guest list.";
                    \} else \{
                        \$guestlist += (\{ \$body \});
                        \$response = "Done.";
                    \}
                \}
            \} else if(lower_case(\$temp[0]) == "deny") \{
                if(!\$body) \{
                    \$response = "I'm sorry but I don't know who you're talking about.";
                \} else \{
                    if(!member(\$body, \$guestlist)) \{
                        \$response = Str(\$body."skotos:playercapname") + " is not on the guest list.";
                    \} else \{
                        \$guestlist -= (\{ \$body \});
                        \$response = "Done.";
                    \}
                \}
            \}
        \}
    \}

    \$hint = "OOC Guard Syntax\\n";
    \$hint += "To allow Bob: say to guard 'allow Bob'" + "\\n";
    \$hint += "To deny Bob: say to guard 'deny Bob'" + "\\n";
    \$hint += "To see the current guest list: ask guard 'Can I see the guest list?'" + "\\n";
\}

if(!\$response) \{ 
    EmitIn(\$actor."base:environment", TAG(capitalize(Describe(\$this)) + " remains silent.", "social:first"));
    if(\$hint) \{
        EmitTo(\$actor, \$hint);
    \}
\} else \{
    EmitIn(\$actor."base:environment", TAG(capitalize(Describe(\$this)) + " responds dutifully, \\"" + \$response + "\\"", "social:first"));
\}

\$this."allowed:people" = \$guestlist;

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:evoke-dob">
         X[M] ::respond();

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:evoke-iob">
         X[M] ::respond();

return TRUE;
      </Core:Property>
      <Core:Property property="ndp">
         " *** FINISHED ADDITION *** "
      </Core:Property>
      <Core:Property property="nip-core:hooks">
         ([ "decide":\<Lib:NIP:base:hooks:decide\>, "delay":\<Lib:NIP:base:hooks:delay\>, "internal":\<Lib:NIP:base:hooks:internal\>, "resource-control":\<Lib:NIP:lib:resource-control\> ])
      </Core:Property>
      <Core:Property property="nip-core:inherits">
         ([ \<Lib:NIP:base:lib:hooks\>:(\{ "lib:core:find-hook", "lib:core:register-hook", "lib:core:unregister-hook", "lib:modify:hooks", "setprop-post:hook" \}), \<Lib:NIP:base:lib:signals\>:(\{ "lib:modify:signals", "setprop-post:signal", "lib:calc_sighookpath" \}), \<Lib:NIP:base:lib:stream\>:(\{ "setprop-post:sigexecptr", "setprop-post:sigstream" \}), \<Lib:NIP:base:signals:DECIDE\>:(\{ "setprop-post:decide" \}), \<Lib:NIP:lib:guarding\>:(\{ "witness:enter-into%nip:core", "lib:handler:request-authority" \}), \<Lib:NIP:lib:resource-control\>:(\{ "witness-post:login%nip:resource-control", "witness:enter-from%nip:resource-control", "witness:teleport%resource-control", "lib:entering" \}) ])
      </Core:Property>
      <Core:Property property="nip-core:libraries">
         (\{ \<Lib:NIP:base:lib:signals\>, \<Lib:NIP:base:lib:hooks\>, \<Lib:NIP:base:lib:stream\>, \<Lib:NIP:lib:resource-control\>, \<Lib:NIP:core\>, \<Lib:NIP:base:signals:DELAY\>, \<Lib:NIP:base:signals:DECIDE\>, \<Lib:NIP:base:signals:INTERNAL\>, \<Lib:NIP:lib:guarding\> \})
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:resource-control:ttl">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:resource-control:ttl_increase">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="nip-core:sighookpath">
         (\{ "delay:DELAY-init", "delay:DELAY-exec", "internal:INTERNAL-exec", "decide:DECIDE-init", "decide:DECIDE-exec", "decide:DECIDE-post" \})
      </Core:Property>
      <Core:Property property="nip-core:signals">
         ([ 10:"DELAY", 500:"INTERNAL", 1000:"DECIDE" ])
      </Core:Property>
      <Core:Property property="nip-core:system:revision">
         44
      </Core:Property>
      <Core:Property property="nip:trait:resource-control:ttl">
         1800
      </Core:Property>
      <Core:Property property="nip:trait:resource-control:ttl_increase">
         600
      </Core:Property>
      <Core:Property property="npc:resource-control:live_time">
         1343271940
      </Core:Property>
      <Core:Property property="npc:status:spawndate">
         1343271941
      </Core:Property>
      <Core:Property property="npc:sys:sighookpath">
         (\{ "delay:DELAY-init", "delay:DELAY-exec", "internal:INTERNAL-exec", "decide:DECIDE-init", "decide:DECIDE-exec", "decide:DECIDE-post" \})
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1541369990, "jominey", "E", 1541370030, "jominey", "E", 1541370193, "jominey", "E", 1541370224, "jominey", "E", 1541370253, "jominey", "E", 1541370266, "jominey", "E", 1541370364, "jominey", "E", 1541370411, "jominey", "E", 1541370423, "jominey", "E", 1541370452, "jominey", "E", 1541370462, "jominey", "E", 1541370754, "jominey", "E", 1541372977, "jominey", "E", 1541373308, "jominey", "E", 1541373376, "jominey", "E", 1541373463, "jominey", "E", 1541373783, "jominey", "E", 1541373895, "jominey", "E", 1541373922, "jominey", "E", 1541374078, "jominey", "E", 1541374096, "jominey", "E", 1541374116, "jominey", "E", 1541374586, "jominey", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
