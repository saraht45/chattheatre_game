<object clone="/base/obj/thing" owner="meandmine">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Ironclaw:NPC:UrNPC)"/>
    <Base:Bulk immobile="false" mass="70" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="1"/>
    <Base:Misc gender="male" volition="false" weapon="false" default_stance="standing" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="true">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="clerk"/>
            <Base:SName sname="merchant"/>
            <Base:SName sname="npc"/>
            <Base:SName sname="cat"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="clerks"/>
            <Base:PName pname="merchants"/>
            <Base:PName pname="npcs"/>
            <Base:PName pname="cats"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="petite"/>
          <Base:Adjective adjective="slight"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             fishing merchant
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="breasts" prime="false" def="false" abstract="false" hidden="true" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="breasts"/>
            <Base:SName sname="bosoms"/>
            <Base:SName sname="mammaries"/>
            <Base:SName sname="poitrine"/>
            <Base:SName sname="bust"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.appearance:breasts) breasts
          </Base:Description>
          <Base:Description type="look">
             A pair of $(this.appearance:breasts) breasts covered in $(this.appearance:furlength) $(this.appearance:furtexture) $(this.appearance:furcolor) $(this.appearance:fur) fur.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="facialhair" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="facialhair"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="fur" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="ordinary"/>
          <Base:Adjective adjective="red"/>
          <Base:Adjective adjective="shaggy"/>
        </Base:Adjectives>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="hair" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="brown"/>
          <Base:Adjective adjective="none"/>
          <Base:Adjective adjective="scraggly"/>
          <Base:Adjective adjective="shaved"/>
        </Base:Adjectives>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="left-breast" prime="false" def="false" abstract="false" hidden="true" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="right-breast" prime="false" def="false" abstract="false" hidden="true" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="appearance:anterlength">
         (\{ "short" \})
      </Core:Property>
      <Core:Property property="appearance:antlertype">
         (\{ "jagged" \})
      </Core:Property>
      <Core:Property property="appearance:build">
         "slight"
      </Core:Property>
      <Core:Property property="appearance:clawapp">
         "stubby"
      </Core:Property>
      <Core:Property property="appearance:clawlength">
         "long"
      </Core:Property>
      <Core:Property property="appearance:earshape">
         "round"
      </Core:Property>
      <Core:Property property="appearance:eyecolor">
         "black"
      </Core:Property>
      <Core:Property property="appearance:eyecoloradj">
         "ordinary"
      </Core:Property>
      <Core:Property property="appearance:eyeshape">
         "beady"
      </Core:Property>
      <Core:Property property="appearance:feet">
         "manicured"
      </Core:Property>
      <Core:Property property="appearance:furcolor">
         "red"
      </Core:Property>
      <Core:Property property="appearance:furlength">
         "ordinary"
      </Core:Property>
      <Core:Property property="appearance:furtexture">
         "shaggy"
      </Core:Property>
      <Core:Property property="appearance:haircolor">
         "brown"
      </Core:Property>
      <Core:Property property="appearance:hairlength">
         "none"
      </Core:Property>
      <Core:Property property="appearance:hairstyle">
         "shaved"
      </Core:Property>
      <Core:Property property="appearance:hairtype">
         "scraggly"
      </Core:Property>
      <Core:Property property="appearance:hands">
         "dirty"
      </Core:Property>
      <Core:Property property="appearance:height">
         "petite"
      </Core:Property>
      <Core:Property property="appearance:lipshape">
         "wide"
      </Core:Property>
      <Core:Property property="appearance:mouthshape">
         "full"
      </Core:Property>
      <Core:Property property="appearance:muzzleshape">
         "flat"
      </Core:Property>
      <Core:Property property="appearance:noseshape">
         "long"
      </Core:Property>
      <Core:Property property="appearance:taillength">
         "ordinary"
      </Core:Property>
      <Core:Property property="appearance:tailtexture">
         "shaggy"
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:trading:stock">
         ([ 4:1 ])
      </Core:Property>
      <Core:Property property="export:nip:trait:trading-advanced:inventories">
         \<Ironclaw:NIP:Traders:Buyers:fishmonger\>
      </Core:Property>
      <Core:Property property="export:trading:lists">
         (\{ \<Allegory:NPCs:NIPs:TradingLists:Southeast:FishingSupplies:Merchant\> \})
      </Core:Property>
      <Core:Property property="export:trait:examine">
         "This fishing merchant is a petite slight cat, with shaggy red fur, and none scraggly brown hair. Beady black eyes are set above a long nose and a full mouth, complete with wide lips. Long stubby nails, on dirty hands, and manicured feet are also visible. You also note his round  ears and shaggy  tail."
      </Core:Property>
      <Core:Property property="export:trait:look">
         "This fishing merchant is a petite slight cat, with shaggy red fur, and none scraggly brown hair."
      </Core:Property>
      <Core:Property property="merry:inherit:react:ask-dob%trading">
         \<Allegory:Lib:Economy:TradingLib\>
      </Core:Property>
      <Core:Property property="merry:lib:quest:gather_fish">
         X[M] /* Asks the PC to gather fish*/ 
if(!\$actor) return FALSE; 
 
\$questname = "gather_fish"; 
/* How much should this quest pay? (modified for the current economy) */ 
\$payment = Call(\$\{Ironclaw:Lib:Quests:Autoquests:miniquests\}, "questpayment", \$amount: 2400); 
 
if(!\$actor."quest:miniquests") \$actor."quest:miniquests" = ([ ]); 
 
if(\$imperative == "@yes") \{ 
  Social(this, "smile", nil, "Great! Well, bring me eight good sized fish. Just offer them to me when you've got them.", "at", \$actor); 
  /* Quest expires after a day*/ 
  \$expires = 60*60*24; 
  \$id = random(1000000); 
  \$actor."quest:miniquests"[\$questname] = ([ 
      "description":"Gather eight fish and deliver them to the fish merchant.", 
      "name":"Fish Hunt", 
      "id":\$id, 
      "payment": \$payment, 
      "skink_count": 5, 
      "expires":time()+\$expires, 
      "reward": \$payment ? ironclaw::describe_money(\$amount: \$payment) : "Gratitude" ]); 
  /* Make the quest expire */ 
  if(\$expires) \{ 
    \$delay(\$expires, TRUE, "5e77"); 
    if(\$actor."quest:miniquests" \&\& \$actor."quest:miniquests"[\$questname] \&\& \$actor."quest:miniquests"[\$questname]["id"] == \$id) 
      \$actor."quest:miniquests"[\$questname] = nil; 
  \} 
  return TRUE; 
\} else if(\$imperative == "@no") \{ 
  Social(this, "nod", nil, "OK then. Too fancy for your tastes, I guess.", "to", \$actor); 
  return TRUE; 
\} else if(\$expire_fun == "quest:"+\$questname) \{ 
  Social(this, "nod", nil, "Hmm, well, come back if you decide to take the job.", "to", \$actor); 
  return TRUE; 
\} 
 
/* Here's the start of the quest (usually where the PC gets asked if they want to accept the quest) */ 
 
/* Check if it's a valid quest */ 
 
/* Don't ask, if they are already doing this quest */ 
if(\$actor."quest:miniquests"[\$questname]) return FALSE; 
/* Don't ask if they are already answering a question */ 
if(\$actor."question:id") return FALSE; 
/* They won't get offered this quest if they've already earned too much daily income */ 
if(Int(\$actor."trait:income:paiduntil") \> time()) return FALSE; 
/* Make sure they aren't busy */ 
if(ironclaw::busy_check(\$character: \$actor)) return FALSE; 
 
Social(this, "appraise", nil, "Hmm...", nil, \$actor); 
Social(this, "decide", nil, "You look quite capable. Interested in earning some coin?"); 
Social(this, "explain", nil, "I'm a fish merchant, gotta feed the people. Want to do some work for me? Bring me eight dead fish, and I'll see you rewarded."); 
Social(this, "ask", nil, "How does "+ironclaw::describe_money(\$amount: \$payment)+" sound?"); 
 
interaction::question(\$question: "Will you accept this job?", \$expires: 60, \$env: "TRUE", \$yes_ob: this, \$expire_ob: this, \$no_ob: this, \$yes_fun: "quest:"+\$questname, \$no_fun: "quest:"+\$questname, \$expire_fun: "quest:"+\$questname); 
 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:offer-who%quest">
         X[M] /* Accepts fish from PCs on quests */ 
if(!\$what) return TRUE; 
 
/* remove the offer so the player doesn't have to revoke */ 
Call(\$this, "base:removeoffer", \$from: \$actor); 
 
if(!\$actor."quest:miniquests") return TRUE; 
/* What quests are they doing? */ 
if(\$actor."quest:miniquests"["gather_fish"]) \{ 
  /* How many fishare still needed? */ 
  \$needed = \$actor."quest:miniquests"["gather_fish"]["fish_count"]; 
  /* Are they offering any fish to the merchant? */ 
  \$matches = (\{ \}); 
  for(\$i=0;\$i\<sizeof(\$what) \&\& sizeof(\$matches) \< \$needed;\$i++) \{ 
    if(\$what[\$i]."core:ur:parent" == \$\{Allegory:Props:Animals:Fish:UrFish\}) 
      \$matches += (\{ \$what[\$i] \}); 
  \} 
  if(!sizeof(\$matches)) \{ 
    Social(this, "state", nil, "Sorry, I'm not buying none of that"); 
    return TRUE; 
  \} 
 
  Social(this, "collect", nil, nil, nil, \$matches); 
  \$needed -= sizeof(\$matches); 
  if(\$needed) \{ 
    /* Still more fish to go */ 
    Social(this, "state", nil, "Good catch. Only "+desc_cardinal(\$needed)+" more to go."); 
    \$actor."quest:miniquests"["gather_fish"]["fish_count"] = \$needed; 
    \$actor."quest:miniquests"["gather_fish"]["description"] = "Gather "+desc_cardinal(\$needed)+" fish and deliver them to the fish merchant."; 
  \} else \{ 
    Social(this, "smile", nil, "That's the last of 'em! Good job!"); 
    \$payment = \$actor."quest:miniquests"["gather_fish"]["payment"]; 
    /* EXTENSION - update below to pay money better. Through a miniquest script. */ 
    \$actor."trait:money" = Int(\$actor."trait:money")+\$payment; 
    EmitTo(\$actor, Describe(this)+" pays you."); 
    /* Clear the quest */ 
    \$actor."quest:miniquests"["gather_fish"] = nil; 
  \} 
  /* Slay the fish corpses */ 
  \$delay(0.1, TRUE, "b0cb"); 
  for(\$i=0;\$i\<sizeof(\$matches);\$i++) \{ 
    Slay(\$matches[\$i]); 
  \} 
  return TRUE; 
\} 
 
Social(this, "apologize", nil, "Sorry - can't buy that from you. I only buy from employees doing a specific job. Guild rules, y'know?"); 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:witness:enter-from%quest">
         X[M] /* Offer the PC a quest to catch fish*/ 
if(!\$actor."udat:object") return TRUE; 
 
\$delay(2, TRUE, "ed85"); 
if(\$actor."base:environment" != this."base:environment") return TRUE; 
 
/* Don't ask, if they are already doing a quest */ 
if(!\$actor."quest:miniquests") \$actor."quest:miniquests" = ([ ]); 
if(\$actor."quest:miniquests"["gather_fish"]) return FALSE; 
 
return Call(this, "quest:gather_fish");
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:trading:stock">
         ([ 4:1 ])
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1359351196, "tonyd", "E", 1366941559, "meandmine", "X" \})
      </Core:Property>
      <Core:Property property="sigstream">2</Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="trait:animal">"cat"</Core:Property>
      <Core:Property property="trait:animaltype">
         "cat"
      </Core:Property>
      <Core:Property property="trait:examine">
         "This fishing merchant is a petite slight cat, with shaggy red fur, and none scraggly brown hair. Beady black eyes are set above a long nose and a full mouth, complete with wide lips. Long stubby nails, on dirty hands, and manicured feet are also visible. You also note his round  ears and shaggy  tail."
      </Core:Property>
      <Core:Property property="trait:look">
         "This fishing merchant is a petite slight cat, with shaggy red fur, and none scraggly brown hair."
      </Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
