<object clone="/base/obj/thing" owner="SkotOS">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="charter"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="charters"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="guild"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             guild charter
          </Base:Description>
          <Base:Description type="look">
             A scroll with the Rinascita crest, authorizing the creation of an official city guild. It need only be filled out, and returned to a clerk in the records house for a guild to be recognized by the authorities.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:html:popup">
         X[S] \<html\>
  \<head\>
    \<style type="text/css"\>
      BODY \\\{ background: url(\$[common::db_prop(\$theatre: Get(Obj(\$actor), "theatre:id"), \$prop: "compose:image")]); background-position: center; background-repeat: no-repeat; background-attachment: fixed; background-color: #000000 \\\}
    \</style\>
    \<title\>SkyWriter! Composing: \$[Describe(Obj(\$this), nil, nil, STYLE_NONPOSS)]\</title\>
  \</head\>
  \<body leftmargin="135" topmargin="0"\>
     \<zform\>
        \<c\>\<font color="yellow" size="4"\>\$(msg)\</font\>\<br/\>\<sbr/\>\</c\>
          \<h3\>Guild Charter\</h3\>
          \<font face="Times New Roman" size="3"\>Guild ID: \</font\>
          \<input style="BORDER-RIGHT: none; BORDER-TOP: none; BORDER-LEFT: none; BORDER-BOTTOM: #000000 1pt solid; BACKGROUND: transparent; WIDTH: 200px; HEIGHT: 22px" size="38" name="id" value="\$(id)"/\> (one word name, like "blacksmiths")\<br/\>
          \<font face="Times New Roman" size="3"\>Short Name: \</font\>
          \<input style="BORDER-RIGHT: none; BORDER-TOP: none; BORDER-LEFT: none; BORDER-BOTTOM: #000000 1pt solid; BACKGROUND: transparent; WIDTH: 200px; HEIGHT: 22px" size="38" name="shortname" value="\$(shortname)"/\> ("Blacksmiths Guild" or "Rinaldi")\<br/\>
          \<font face="Times New Roman" size="3"\>Long Name: \</font\>
          \<input style="BORDER-RIGHT: none; BORDER-TOP: none; BORDER-LEFT: none; BORDER-BOTTOM: #000000 1pt solid; BACKGROUND: transparent; WIDTH: 200px; HEIGHT: 22px" size="38" name="longname" value="\$(longname)"/\> ("Guild of Blacksmiths and Armorers")\<br/\>
          \<font face="Times New Roman" size="3"\>A guild crest is a distinctive emblem or insignia that represents a particular guild or trade association. What is your guild's crest? (OOC: example include "an anvil and a hammer" or "a palette and a paintbrush"): \</font\>
          \<input style="BORDER-RIGHT: none; BORDER-TOP: none; BORDER-LEFT: none; BORDER-BOTTOM: #000000 1pt solid; BACKGROUND: transparent; WIDTH: 200px; HEIGHT: 22px" size="38" name="crest" value="\$(crest)"/\>\<br/\>
        \<font face="Times New Roman" size="3"\>Purpose of this Guild or Business:\</font\>\<br/\>
        \<textarea style="BORDER-RIGHT: none; BORDER-TOP: #000000 1pt solid; BORDER-LEFT: #000000 1pt solid; BORDER-BOTTOM: none; BACKGROUND: transparent; WIDTH: 525px; HEIGHT: 110px" name="body"\>\$[((\$r1 = Obj(\$this)."details:default:description:writing") ? replace_strings(\$r1, "\<br/\>", "\\n") : "")]\</textarea\>
        \<p\>
          \<input type="hidden" name="actor" value="\$(actor)"/\>
          \<input type="hidden" name="this" value="\$(this)"/\>
          \<input type="submit" value="Write it!" name="write"/\>
       \</p\>
       \<action\>
        \$[Call(Obj(\$this), "write", \$actor: \$actor, \$this: \$this, \$id: \$id, \$shortname: \$shortname, \$longname: \$longname, \$crest: \$crest, \$motto: \$motto, \$body: \$body);]
      \</action\>
    \</zform\>
  \</body\>
\</html\>
      </Core:Property>
      <Core:Property property="export:html:popup-bak">
         X[S] \<html\>
  \<head\>
    \<style type="text/css"\>
      BODY \\\{ background: url(\$[common::db_prop(\$theatre: Get(Obj(\$actor), "theatre:id"), \$prop: "compose:image")]); background-position: center; background-repeat: no-repeat; background-attachment: fixed; background-color: #000000 \\\}
    \</style\>
    \<title\>SkyWriter! Composing: \$[Describe(Obj(\$target), nil, nil, STYLE_NONPOSS)]\</title\>
  \</head\>
  \<body leftmargin="135" topmargin="10"\>
     \<zform\>
        \<font color="yellow" size="3"\>\$(msg)\</font\>\<br/\>\<br/\>\<sbr/\>
          \<font face="Times New Roman" size="2"\>Addressed to: \</font\>
          \<input style="BORDER-RIGHT: none; BORDER-TOP: none; BORDER-LEFT: none; BORDER-BOTTOM: #000000 1pt solid; BACKGROUND: transparent; WIDTH: 200px; HEIGHT: 22px" size="38" name="addressee" value="\$(addressee)"/\>\<br/\>
        \<font face="Times New Roman" size="2"\>Parchment body:\</font\>\<br/\>
        \<textarea style="BORDER-RIGHT: none; BORDER-TOP: #000000 1pt solid; BORDER-LEFT: #000000 1pt solid; BORDER-BOTTOM: none; BACKGROUND: transparent; WIDTH: 525px; HEIGHT: 200px" name="body"\>\$[((\$r1 = Obj(\$target)."details:objskin:description:writing") ? replace_strings(\$r1, "\<br/\>", "\\n") : "")]\</textarea\>
          \<br/\>
          \<font face="Times New Roman" size="2"\>Optional Signature:\</font\>
          \<input style="BORDER-RIGHT: none; BORDER-TOP: none; BORDER-LEFT: none; BORDER-BOTTOM: #000000 1pt solid; BACKGROUND: transparent; WIDTH: 200px; HEIGHT: 22px" size="39" name="optsig" value="\$(optsig)"/\>\\\&nbsp;\\\&nbsp;\\\&nbsp;\\\&nbsp;
        \<font face="Times New Roman" size="2"\>Sign it?\</font\>
          \$[(!\$sign \|\| \$sign == "" ? "\<input type=\\"checkbox\\" value=\\"true\\" name=\\"sign\\"/\>" : "\<input type=\\"checkbox\\" value=\\"true\\" name=\\"sign\\" checked=\\"true\\"/\>")]
        \<p\>
          \<input type="hidden" name="actor" value="\$(actor)"/\>
          \<input type="hidden" name="this" value="\$(this)"/\>
          \<input type="hidden" name="target" value="\$(target)"/\>
          \<input type="submit" value="Write it!" name="write"/\>
       \</p\>
       \<action\>
        \$[Call(Obj(\$this), "write", \$actor: \$actor, \$this: \$this, \$target: \$target, \$addressee: \$addressee, \$motto: \$motto, \$body: \$body, \$optsig: \$optsig, \$sign: \$sign);]
      \</action\>
    \</zform\>
  \</body\>
\</html\>
      </Core:Property>
      <Core:Property property="export:nip:item:cost">
         5000
      </Core:Property>
      <Core:Property property="export:noskywriter">1</Core:Property>
      <Core:Property property="export:writable">1</Core:Property>
      <Core:Property property="merry:lib:create_guild">
         X[M] /* temporary code. Later this code will go into a script when you offer the charter to the clerk */

/* creates a guild when this charter is offered to a clerk */
int i;

if(\$actor.guild) \{
    EmitTo(\$actor, "You cannot create a new guild while a member of another guild.");
    return FALSE;
\}

\$newguild = Call(\$\{Ironclaw:Lib:Guilds:Guild\}, "createguild", \$guild: \$this."guild:id", \$shortname: \$this."guild:shortname", \$fullname: \$this."guild:longname", \$crest: \$this."guild:crest", \$motto: \$this."guild:motto", \$creator: \$actor);

if(!\$newguild) \{
  EmitTo(\$actor, "Uh, something went wrong. Please @bug this.");
  return TRUE;
\}

if(typeof(\$newguild) == T_OBJECT) \{
  /* guild created, all good */
  /* tell player that the guild is created */

  /* give player a guild ring */
  \$ring = Spawn(\$\{IronClaw:Props:Guilds:GuildRing\});
  \$ring.guild = \$newguild;
  \$ring."trait:material" = "gold";
  \$ring."guild:rank" = 1;
  EmitTo(\$actor, "The clerk takes your charter and hands you "+Describe(\$ring)+".");
  EmitTo(\$actor, "[HINT: To join this guild, you will have to \\"recruit me using my ring\\"]");
  EmitIn(\$actor."base:environment", "The clerk takes the charter and hands "+Describe(\$actor)+" "+Describe(\$ring)+".", \$actor);
  \$ring."base:environment" = \$actor;
  /* set adjectives in ring */
  for(i=0;i\<sizeof(explode(\$this."guild:id", " "));i++) \{
    Set(\$ring, "details:default:adjective:"+explode(\$this."guild:id", " ")[i], TRUE);
  \}
  for(i=0;i\<sizeof(explode(\$this."guild:shortname", " "));i++) \{
    Set(\$ring, "details:default:adjective:"+explode(\$this."guild:shortname", " ")[i], TRUE);
  \}

  /* Set chatter as guild leader */
  \$actor.guild = \$newguild;
  \$actor."guild:rank" = 1;

  if(\$newguild.members) \{
    \$newguild.members += (\{ \$actor \});
  \} else \{
    \$newguild.members = (\{ \$actor \});
  \}
  \$newguild.leader = \$actor;

  /* destroy the charter */
  Slay(\$this);
  return TRUE;
\} else if(typeof(\$newguild) == T_STRING) \{
  Social(NRefOb(\$who[0]), "tell", nil, \$newguild, nil, NewNRef(\$actor, "default"));
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:write">
         X[M] /* D=Does Checks and Writes on Scroll

Check to see if addressee is valid
Check to see if object is in your possession, again.

Write on scroll.
*/

/* fix to stop crash when the addressee is invalid */
\$actor = Obj(\$actor);

if (\$this."base:environment" != \$actor) \{
  Popup(\$actor, \$this, "popup", \$actor: \$actor, \$this: \$this, \$id: \$id, \$shortname: \$shortname, \$longname: \$longname, \$crest: \$crest, \$body: \$body, \$msg: "You cannot write on an object that is not in your possession!");
  return FALSE;
\}

if (strlen(\$body) \> 10000) \{
  Popup(\$actor, \$this, "popup", \$actor: \$actor, \$this: \$this, \$id: \$id, \$shortname: \$shortname, \$longname: \$longname, \$crest: \$crest, \$body: \$body, \$msg: "You may not write more than 10,000 characters on a single page. You are at: "+strlen(\$body));
  return FALSE;
\}

\$body = replace_strings(\$body, "\\r\\n", "\\n", "\<b\>", "[b]", "\</b\>", "[/b]", "\<i\>", "[i]", "\</i\>", "[/i]", "\<tt\>", "[tt]", "\</tt\>", "[/tt]", "\<big\>", "[big]", "\</big\>", "[/big]", "\<small\>", "[small]", "\</small\>", "[/small]", "\<blockquote\>", "[blockquote]", "\</blockquote\>", "[/blockquote]", "\<center\>", "[center]", "\</center\>", "[/center]", "\<em\>", "[em]", "\</em\>", "[/em]", "\<strong\>", "[strong]", "\</strong\>", "[/strong]", "\<dfn\>", "[dfn]", "\</dfn\>", "[/dfn]", "\<code\>", "[code]", "\</code\>", "[/code]");

\$body = replace_strings(\$body, "\<samp\>", "[samp]", "\</samp\>", "[/samp]", "\<kbd\>", "[kbd]", "\</kbd\>", "[/kbd]", "\<var\>", "[var]", "\</var\>", "[/var]", "\<cite\>", "[cite]", "\</cite\>", "[/cite]", "\<dl\>", "[dl]", "\</dl\>", "[/dl]", "\<dt\>", "[dt]", "\</dt\>", "[/dt]", "\<dd\>", "[dd]", "\</dd\>", "[/dd]", "\<del\>", "[del]", "\</del\>", "[/del]", "\<h1\>", "[h1]", "\</h1\>", "[/h1]", "\<h2\>", "[h2]", "\</h2\>", "[/h2]", "\<h3\>", "[h3]", "\</h3\>", "[/h3]", "\<h4\>", "[h4]", "\</h4\>", "[/h4]", "\<h5\>", "[h5]", "\</h5\>", "[/h5]", "\<h6\>", "[h6]", "\</h6\>", "[/h6]");

\$body = replace_strings(\$body, "\<ol\>", "[ol]", "\</ol\>", "[/ol]", "\<li\>", "[li]", "\</li\>", "[/li]", "\<pre\>", "[pre]", "\</pre\>", "[/pre]", "\<q\>", "[q]", "\</q\>", "[/q]", "\<sub\>", "[sub]", "\</sub\>", "[/sub]", "\<sup\>", "[sup]", "\</sup\>", "[/sup]", "\<u\>", "[u]", "\</u\>", "[/u]", "\<ul\>", "[ul]", "\</ul\>", "[/ul]", "\\'", "[quote]");

\$body = replace_xml(\$body);

\$body = replace_strings(\$body, "[b]", "\<b\>", "[/b]", "\</b\>", "[i]", "\<i\>", "[/i]", "\</i\>", "[tt]", "\<tt\>", "[/tt]", "\</tt\>", "[big]", "\<big\>", "[/big]", "\</big\>", "[small]", "\<small\>", "[/small]", "\</small\>", "[blockquote]", "\<blockquote\>", "[/blockquote]", "\</blockquote\>", "[center]", "\<center\>", "[/center]", "\</center\>", "[em]", "\<em\>", "[/em]", "\</em\>", "[strong]", "\<strong\>", "[/strong]", "\</strong\>", "[dfn]", "\<dfn\>", "[/dfn]", "\</dfn\>", "[code]", "\<code\>", "[/code]", "\</code\>");

\$body = replace_strings(\$body, "[samp]", "\<samp\>", "[/samp]", "\</samp\>", "[kbd]", "\<kbd\>", "[/kbd]", "\</kbd\>", "[var]", "\<var\>", "[/var]", "\</var\>", "[cite]", "\<cite\>", "[/cite]", "\</cite\>", "[dt]", "\<dt\>", "[/dt]", "\</dt\>", "[dd]", "\<dd\>", "[/dd]", "\</dd\>", "[dl]", "\<dl\>", "[/dl]", "\</dl\>", "[del]", "\<del\>", "[/del]", "\</del\>", "[h1]", "\<h1\>", "[/h1]", "\</h1\>", "[h2]", "\<h2\>", "[/h2]", "\</h2\>", "[h3]", "\<h3\>", "[/h3]", "\</h3\>", "[h4]", "\<h4\>", "[/h4]", "\</h4\>", "[h5]", "\<h5\>", "[/h5]", "\</h5\>", "[h6]", "\<h6\>", "[/h6]", "\</h6\>");

\$body = replace_strings(\$body, "[ol]", "\<ol\>", "[/ol]", "\</ol\>", "[li]", "\<li\>", "[/li]", "\</li\>", "[pre]", "\<pre\>", "[/pre]", "\</pre\>", "[q]", "\<q\>", "[/q]", "\</q\>", "[sub]", "\<sub\>", "[/sub]", "\</sub\>", "[sup]", "\<sup\>", "[/sup]", "\</sup\>", "[u]", "\<u\>", "[/u]", "\</u\>", "[ul]", "\<ul\>", "[/ul]", "\</ul\>", "\&quot;", "\\"", "\&amp;", "\&", "[quote]", "\\'");

Set(\$this, "details:default:description:writing", \$body);
Set(\$this, "details:default:description:writing", \$motto);
\$this."guild:id" = \$id;
\$this."guild:shortname" = \$shortname;
\$this."guild:longname" = \$longname;
\$this."guild:crest" = \$crest;
\$this.lastwriter = Describe(\$actor);
\$this.lastwritetime = time();

Popup(\$actor, \$this, "popup", \$actor: \$actor, \$this: \$this, \$id: \$id, \$shortname: \$shortname, \$longname: \$longname, \$crest: \$crest, \$motto: \$motto, \$body: \$body, \$msg: "Success!");

return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-post:erase-what">
         X[M] /* erase guild settings when the charter is erased */
\$this."guild:id" = nil;
\$this."guild:shortname" = nil;
\$this."guild:longname" = nil;
\$this."guild:motto" = nil;
\$this."guild:crest" = nil;
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:offer-what">
         X[M] /* allow the guild administrator to take the charter and create the guild */
if(contains(name(NRefOb(\$who[0])), "GuildAdmin")) \{
  /* is this the guild admin? */
  ::create_guild();
  /* remove the offer so the player doesn't have to revoke */
  Call(NRefOb(\$who[0]), "base:removeoffer", \$from: \$actor);
  return FALSE;
\}
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:offer-who">
         X[M] EmitTo(\$actor, "Offering me to someone?");
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:poke-dob">
         X[M] /* temporary code. Later this code will go into a script when you offer the charter to the clerk */

/* creates a guild when this charter is offered to a clerk */
int i;

return TRUE;


\$newguild = Call(\$\{Allegory:Lib:Guilds:Guild\}, "createguild", \$guild: \$this."guild:id", \$shortname: \$this."guild:shortname", \$fullname: \$this."guild:fullname", \$crest: \$this."guild:crest", \$motto: \$this."details:default:description:writing", \$creator: \$actor);

if(!\$newguild) \{
  EmitTo(\$actor, "Uh, something went wrong. Please @bug this.");
  return TRUE;
\}

if(typeof(\$newguild) == T_OBJECT) \{
  /* guild created, all good */
  /* tell player that the guild is created */
EmitTo(\$actor, "The guild is created, and this charter is destroyed.");
  /* give player a guild ring */
  \$ring = Spawn(\$\{IronClaw:Props:Guilds:GuildRing\});
  \$ring.guild = \$newguild;
  \$ring."trait:material" = "gold";
  EmitTo(\$actor, "The clerk takes your charter and hands you "+Describe(\$ring)+".");
  EmitIn(\$actor."base:environment", "The clerk takes the charter and hands "+Describe(\$actor)+" "+Describe(\$ring)+".", \$actor);
  \$ring."base:environment" = \$actor;
  /* set adjectives in ring */
  for(i=0;i\<sizeof(explode(\$this."guild:id", " "));i++) \{
    Set(\$ring, "details:default:adjective:"+explode(\$this."guild:id", " ")[i], TRUE);
  \}
  for(i=0;i\<sizeof(explode(\$this."guild:shortname", " "));i++) \{
    Set(\$ring, "details:default:adjective:"+explode(\$this."guild:shortname", " ")[i], TRUE);
  \}

  /* destroy the charter */
  /* NOT ADDED YET */
  /* Slay(\$this); */
  return TRUE;
\} else if(typeof(\$newguild) == T_STRING) \{
  EmitTo(\$actor, \$newguild);
  EmitTo(\$actor, "Guild not created. So you keep the charter.");
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:@compose-dob">
         X[M] /* give a popup allowing the user to fill in the guild charter */

EmitTo(\$actor, "Composing the guild charter");

\$id = ((\$r1 = \$this."guild:id") ? \$r1 : "");
\$shortname = ((\$r1 = \$this."guild:shortname") ? \$r1 : "");
\$longname = ((\$r1 = \$this."guild:longname") ? \$r1 : "");
\$crest = ((\$r1 = \$this."guild:crest") ? \$r1 : "");
\$motto = ((\$r1 = \$this."guild:motto") ? \$r1 : "");
\$body = ((\$r1 = \$this."details:default:description:writing") ? \$r1 : "");

Popup(\$actor, \$this, "popup", \$actor: \$actor, \$this: \$this, \$id: \$id, \$shortname: \$shortname, \$longname: \$longname, \$crest: \$crest, \$motto: \$motto, \$body: \$body);

EmitTo(\$actor, "Creating a SkyWriter popup window!");


return FALSE;

/* if cover the cover, if page then page*/

\{

  \$target = NRefOb(\$dob[0]);

  if (\$target == \$actor) return TRUE;

  if (\$target."base:environment" != \$actor) \{ EmitTo(\$actor, "You cannot write on an object that is not in your possession."); return FALSE; \}

  /* if we shouldn't use skywriter, fall through */
  if(\$target.noskywriter) return TRUE;

  if (!\$target.writable) \{ EmitTo(\$actor, "You find you are unable to write on that object no matter how hard you try."); return FALSE; \}

  if (\$target."trait:superbrief" \&\& (\$target."trait:superbrief" == "book" \|\| \$target."trait:superbrief" == "tome" \|\| \$target."trait:superbrief" == "spellbook" \|\| \$target."trait:superbrief" == "journal" )) \{

    \$detail = NRefDetail(\$dob[0]);

    if (\$detail == "default") \$detail = "page00";

    if (\$target."trait:booksealed" \&\& \$target."trait:booksealed" == "true") \{ EmitTo(\$actor, "The book firmly resists your attempt to write upon it. Please use 'readall' to view the contents of this book."); return FALSE; \}

    Popup(\$actor, \$this, "book", \$actor: \$actor, \$this: dump_value(\$this), \$target: dump_value(\$target), \$detail: \$detail);

    EmitTo(\$actor, "Creating a SkyWriter popup window!");

    return FALSE;
  \}

  if ((!\$target."lastsigner:object" \&\& \$target."details:objskin:description:delivery-from" \&\& \$target."details:objskin:description:delivery-from" != "" \&\& lower_case(\$target."details:objskin:description:delivery-from") != lower_case(Describe(\$actor))) \|\| \$target."lastsigner:object" \&\& \$target."lastsigner:object" != \$actor) \{
    EmitTo(\$actor, "You may not add to a scroll that is signed by another person. Please erase the scroll and try again.");
    return FALSE;
  \}

/*
  if (\$target."details:objskin:description:delivery-from" \&\& \$target."details:objskin:description:delivery-from" != "" \&\& lower_case(\$target."details:objskin:description:delivery-from") != lower_case(Describe(\$actor))) \{ EmitTo(\$actor, "You may not add to a scroll that is signed by another person. Please erase the scroll and try again."); return FALSE; \}
*/

  \$addressee = ((\$r1 = \$target."details:objskin:description:delivery-to") ? \$r1 : "");
  \$optsig = ((\$r1 = \$target."details:objskin:description:delivery-end") ? \$r1 : "");
  \$sign = ((\$r1 = \$target."details:objskin:description:delivery-from") ? \$r1 : "");

  Popup(\$actor, \$this, "popup", \$actor: \$actor, \$this: \$this, \$target: \$target, \$addressee: \$addressee, \$optsig: \$optsig, \$sign: \$sign);

  EmitTo(\$actor, "Creating a SkyWriter popup window!");

  return FALSE;

\}
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1144052085, "-", "SYNC", 1155727321, "tonyd", "E", 1155727538, "tonyd", "E", 1155727572, "tonyd", "E", 1155727586, "tonyd", "E", 1155728132, "tonyd", "P", 1155728165, "tonyd", "P", 1155728356, "tonyd", "P", 1155728399, "tonyd", "P", 1155728462, "tonyd", "P", 1155732820, "tonyd", "P", 1155733321, "tonyd", "P", 1155733381, "tonyd", "P", 1155734690, "tonyd", "P", 1155734863, "tonyd", "P", 1155735282, "tonyd", "P", 1155956485, "tonyd", "P", 1155956514, "tonyd", "P", 1155956534, "tonyd", "P", 1155956563, "tonyd", "P", 1155956644, "tonyd", "P", 1155956745, "tonyd", "P", 1155956797, "tonyd", "P", 1155956827, "tonyd", "P", 1155956837, "tonyd", "P", 1155956882, "tonyd", "P", 1155956942, "tonyd", "P", 1155956993, "tonyd", "P", 1155957204, "tonyd", "P", 1155957222, "tonyd", "P", 1155957256, "tonyd", "P", 1155957745, "tonyd", "P", 1155958036, "tonyd", "P", 1155958047, "tonyd", "P", 1155958118, "tonyd", "P", 1155958201, "tonyd", "P", 1155958213, "tonyd", "P", 1155958227, "tonyd", "P", 1155958237, "tonyd", "P", 1155958261, "tonyd", "P", 1155958278, "tonyd", "P", 1155958428, "tonyd", "P", 1155958445, "tonyd", "P", 1155958465, "tonyd", "P", 1155958539, "tonyd", "P", 1155958561, "tonyd", "P", 1155958594, "tonyd", "P", 1155958617, "tonyd", "P", 1155958627, "tonyd", "P", 1155958661, "tonyd", "P", 1155958674, "tonyd", "P", 1155958699, "tonyd", "P", 1155958946, "tonyd", "P", 1155959008, "tonyd", "P", 1155961265, "tonyd", "P", 1155961371, "tonyd", "P", 1155961854, "tonyd", "P", 1155962874, "tonyd", "P", 1155963066, "tonyd", "P", 1155970817, "tonyd", "P", 1155971014, "tonyd", "P", 1155971154, "tonyd", "P", 1155971231, "tonyd", "P", 1155971241, "tonyd", "P", 1155971274, "tonyd", "P", 1155971311, "tonyd", "P", 1155971351, "tonyd", "P", 1155971375, "tonyd", "P", 1155971393, "tonyd", "P", 1155971518, "tonyd", "P", 1155971659, "tonyd", "P", 1155971707, "tonyd", "P", 1155971736, "tonyd", "P", 1155971839, "tonyd", "P", 1155972191, "tonyd", "P", 1155972359, "tonyd", "P", 1155972376, "tonyd", "P", 1155972400, "tonyd", "P", 1155972822, "tonyd", "P", 1155972881, "tonyd", "P", 1155973101, "tonyd", "P", 1155973292, "tonyd", "P", 1155973531, "tonyd", "P", 1155973624, "tonyd", "P", 1155973800, "tonyd", "P", 1155973837, "tonyd", "P", 1155973894, "tonyd", "P", 1167540563, "tonyd", "R", 1167647127, "tonyd", "E", 1167647727, "tonyd", "P", 1167647765, "tonyd", "P", 1167647819, "tonyd", "P", 1167647883, "tonyd", "P", 1167647889, "tonyd", "P", 1167647918, "tonyd", "P", 1167647988, "tonyd", "P", 1167648149, "tonyd", "P", 1167648245, "tonyd", "P", 1167648285, "tonyd", "P", 1167648400, "tonyd", "P", 1167648485, "tonyd", "P", 1167648516, "tonyd", "P", 1167648542, "tonyd", "P", 1167648569, "tonyd", "P", 1167648583, "tonyd", "P", 1167648613, "tonyd", "P", 1167649711, "tonyd", "E", 1167650588, "tonyd", "P", 1167650807, "tonyd", "P", 1167654375, "tonyd", "E", 1167697573, "tonyd", "P", 1167804523, "tonyd", "E", 1168140299, "tonyd", "P", 1270337975, "jominey", "E", 1270338444, "jominey", "E", 1270338533, "jominey", "E", 1374333236, "jominey", "E", 1573497200, "jominey", "K", 1573497248, "jominey", "E", 1573497288, "jominey", "E", 1719009332, "annemairi", "E", 1719009350, "annemairi", "E", 1719012138, "annemairi", "E", 1719012209, "annemairi", "E", 1719012477, "annemairi", "E", 1719012509, "annemairi", "E", 1719012853, "annemairi", "E", 1719012908, "annemairi", "E", 1719014744, "annemairi", "E", 1719016145, "annemairi", "E", 1719016240, "annemairi", "E", 1719016309, "annemairi", "E", 1719016499, "annemairi", "E", 1719017660, "annemairi", "E", 1719017677, "annemairi", "E", 1719019570, "annemairi", "E", 1719019775, "annemairi", "E", 1719022116, "annemairi", "E", 1719022425, "annemairi", "E", 1719027343, "annemairi", "E", 1719027440, "annemairi", "E", 1719027505, "annemairi", "E", 1719032517, "annemairi", "E", 1719068476, "annemairi", "E", 1719068613, "annemairi", "E", 1719068781, "annemairi", "E", 1719069309, "annemairi", "E", 1719069346, "annemairi", "E", 1719085241, "annemairi", "E", 1719085792, "annemairi", "E", 1719092371, "annemairi", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
