<object clone="/obj/properties" owner="meandmine">
  <Core:PropertyContainer>
    <Ur:UrObject/>
    <Core:PCProperties>
      <Core:Property property="event:start">
         ([ "incidents":(\{ "attack", "defend", "sneak_attack", "swing_on_rigging", "fearsome_swearing", "cutting_the_rigging", "duel_captain", "attacked_by_captain", "shoulderbarge" \}), "variables":([ "enemy_pirate_tokens":500, "friendly_healer_tokens":278, "friendly_soldier_tokens":1095 ]) ])
      </Core:Property>
      <Core:Property property="merry:lib:attack">
         X[M] /* an incident during the event */
string output, response;
if(!\$stage) error("No \$stage data passed for incident.");
if(\$stage == "conditions") \{
  if(\$role != "healer") return TRUE;
  return FALSE;
\} else if(\$stage == "test") \{
  if(ironclaw::roll(\$roller: \$char, \$skills: (\{\$favorite_weapon\}), \$bonus: \$char."trait:agility") \< ironclaw::roll(\$bonus: 24)) return FALSE;
  return TRUE;
\} else if(\$stage == "pass") \{
  \$enemy_pirate_tokens -= 20;
  return capitalize(Describe(\$char))+" spots a "+\$lissemanteau+", who is stranded from his "+oneof("companions", "gang")+", and "+oneof("rushes in", "attacks", "takes advantage of the opportunity")+". "+capitalize(Describe(\$char))+" "+oneof("runs him through with ease", "deals the lissemanteau a lethal blow", "strikes true and hard, knocking the "+\$lissemanteau+" out of the fight")+".\<br/\>";
\} else if(\$stage == "fail") \{
  response = ::run_incident(\$incidents: (\{ "rescued", "healed", "healing", "defending" \}));
  if(response) \{
    output = capitalize(Describe(\$char))+" "+oneof("rushes past the trees headfast", "chases after a "+\$lissemanteau, "presses forward, fighting with a "+\$lissemanteau)+oneof(", before realizing "+\$char."base:pronoun"+" is cut off from "+\$char."base:possessive"+" allies", ", unfortunately the ebb and flow of the fight leaves "+\$char."base:objective"+" stranded amongst enemies")+". "+response;
    return output;
  \}
  output = capitalize(Describe(\$char))+" charges into the thick of battle where, surrounded by enemies, a "+\$lissemanteau+" "+oneof("cuts "+\$char."base:objective"+" down with", "strikes "+\$char."base:objective"+" with", "lands a blow with")+" a "+oneof("cutlass", "dagger", "axe", "knife", "sword")+oneof(". The weapon pierces", ", leaving a nasty cut across")+" "+Describe(\$char)+"'s "+oneof("stomach", "shoulder", "face", "leg", "arm", "gut", "chest")+". "+capitalize(Describe(\$char))+" falls to the deck, unconscious.\<br/\>\<font color='red'\>["+capitalize(Describe(\$char))+" has been removed from the combat]\</font\>\<BR/\>";
  ::remove_pc();
  return output;
\}
return "nothing";
      </Core:Property>
      <Core:Property property="merry:lib:attacked_by_lefty">
         X[M] /* an incident during the event */
string output, response;
if(!\$stage) error("No \$stage data passed for incident.");
if(\$stage == "conditions") \{
  if(\$role != "dueler") return FALSE;
  return TRUE;
\} else if(\$stage == "test") \{
  if(ironclaw::roll(\$roller: \$char, \$skills: (\{"combat:dodge"\}), \$bonus: \$char."trait:speed") \< ironclaw::roll(\$bonus: 24)) return FALSE;
  \$pirate = "Lefty";
  return TRUE;
\} else if(\$stage == "pass") \{
  \$enemy_pirate_tokens -= 55;
  \$pirate = "Lefty";
  return oneof("Emerging from the chaotic battle, "+capitalize(Describe(\$char))+" finds "+\$char."base:objective"+"self face to face with the Lefty.", "Nimbly hopping past other combatants, Lefty bellows a challenge to "+capitalize(Describe(\$char))+".")+" "+oneof("A colossal mono a mono commences, but "+capitalize(Describe(\$char))+" is able to fend off the attack for now.", "Ducking and weaving, "+capitalize(Describe(\$char))+" manages to thwart all attempts to do any bodily harm.", capitalize(Describe(\$char))+" just barely manages to avoid any serious injury at the hands of the Lefty.")+"\<br/\>";
\} else if(\$stage == "fail") \{
  \$pirate = "Lefty";
  response = ::run_incident(\$incidents: (\{ "rescued", "healed", "healing", "defending" \}));
  if(response) \{
    output = oneof("Emerging from the chaotic battle, "+capitalize(Describe(\$char))+" finds "+\$char."base:objective"+"self face to face with the Lefty.", "Nimbley hopping past other combatants, he bellows a challenge to "+capitalize(Describe(\$char))+".")+" Lefty "+oneof("chops"+\$char."base:objective"+" down with", "strikes "+\$char."base:objective"+" with", "lands a blow with")+" his battle axe"+oneof(". The weapon cuts deeply into", ", leaving a nasty cut across")+" "+Describe(\$char)+"'s "+oneof("stomach", "shoulder", "face", "leg", "arm", "gut", "chest")+"."+response;
    return output;
  \}
  output = oneof("Emerging from the chaotic battle, "+capitalize(Describe(\$char))+" finds "+\$char."base:objective"+"self face to face with the Lefty.", "Nimbly hopping past other combatants, Lefty bellows a challenge to "+capitalize(Describe(\$char))+".")+" He easily cuts down "+capitalize(Describe(\$char))+".\<br/\>\<font color='red'\>["+capitalize(Describe(\$char))+" has been removed from the combat]\</font\>\<BR/\>";
  ::remove_pc();
  return output;
\}
return "nothing";
      </Core:Property>
      <Core:Property property="merry:lib:cutting_the_rigging">
         X[M] /* an incident during the event */
string output, response;
if(!\$stage) error("No \$stage data passed for incident.");
if(\$stage == "conditions") \{
  if(\$role != "healer") return TRUE;
  return FALSE;
\} else if(\$stage == "test") \{
  if(ironclaw::roll(\$roller: \$char, \$skills: (\{"career:mercenary" \}), \$bonus: \$char."trait:body") \< ironclaw::roll(\$bonus: 24)) return FALSE;
  return TRUE;
\} else if(\$stage == "pass") \{
  \$enemy_pirate_tokens -= 20;
  return capitalize(Describe(\$char))+" "+oneof("slashes", "hacks", "slices")+" "+oneof("through", "at")+" the enemy rigging, "+oneof("snapping an important rope", "bringing down a tangle of ropes", "causing much destruction")+", and resulting in "+oneof("a sail flapping loose", "a swinging rope snapping across the enemy lines", "a mast collapsing onto the deck", "one of the sails falling", "the ship to swing wildly")+".\<br/\>";
\} else if(\$stage == "fail") \{
  return capitalize(Describe(\$char))+" "+oneof("slashes", "hacks", "slices")+" "+oneof("through", "at")+" the enemy rigging, "+oneof("snapping a few ropes", "doing a bit of damage", "not achieving much effective damage")+".\<br/\>";
  return output;
\}
return "nothing";
      </Core:Property>
      <Core:Property property="merry:lib:defend">
         X[M] /* an incident during the event */
string output, response;
if(!\$stage) error("No \$stage data passed for incident.");
if(\$stage == "conditions") \{
  return TRUE;
\} else if(\$stage == "test") \{
  if(ironclaw::roll(\$roller: \$char, \$skills: (\{"combat:dodge"\}), \$bonus: \$char."trait:speed") \< ironclaw::roll(\$bonus: 24)) return FALSE;
  return TRUE;
\} else if(\$stage == "pass") \{
  \$enemy_pirate_tokens -= 20;
  return "A "+\$lissemanteau+" charges at "+Describe(\$char)+", "+oneof("swinging a", "slashing a", "with a raised")+" "+oneof("cutlass", "dagger", "dirk", "knife", "sword")+". "+capitalize(Describe(\$char))+" "+oneof("manages to keep away", "avoids the attacker, until an ally can cut him down", "sidesteps the attack, then watches in amusement as the "+\$lissemanteau+" continues charging, and runs into a tree.")+".\<br/\>";
\} else if(\$stage == "fail") \{
  response = ::run_incident(\$incidents: (\{ "rescued", "healed", "healing", "defending" \}));
  if(response) \{
    output = "A "+\$lissemanteau+" charges at "+Describe(\$char)+", "+oneof("swinging a", "slashing a", "with a raised")+" "+oneof("cutlass", "dagger", "dirk", "knife", "sword")+", and backs "+capitalize(Describe(\$char))+" against a tree. "+response;
    return output;
  \}
  output = "A "+\$lissemanteau+" charges at "+Describe(\$char)+", "+oneof("swinging a", "slashing a", "with a raised")+" "+oneof("cutlass", "dagger", "dirk", "knife", "sword")+", and "+oneof("slices", "cuts", "stabs")+" into "+Describe(\$char)+"'s "+oneof("stomach", "shoulder", "face", "leg", "arm", "gut", "chest")+". "+capitalize(Describe(\$char))+" falls to the ground, unconscious.\<br/\>\<font color='red'\>["+capitalize(Describe(\$char))+" has been removed from the combat]\</font\>\<BR/\>";
  ::remove_pc();
  return output;
\}
return "nothing";
      </Core:Property>
      <Core:Property property="merry:lib:defending">
         X[M] /* an incident during the event */
string output, response;
if(!\$stage) error("No \$stage data passed for incident.");
if(\$stage == "conditions") \{
  /* there needs to be a fighter in the group */
  \$list = copy(\$battle.pcs);
  \$newchar = nil;
  while(!\$newchar \&\& sizeof(\$list)) \{
    \$i = random(sizeof(\$list));
    if(\$list[\$i][1] == "fighter" \&\& \$list[\$i][0] != \$char) \{
      \$newchar = \$list[\$i][0];
      \$newchar_favorite_weapon = \$list[\$i][2];
    \} else \{
      \$list -= (\{ \$list[\$i] \});
    \}
  \}
  if(\$newchar) return TRUE;
  return FALSE;
\} else if(\$stage == "test") \{
  if(ironclaw::roll(\$roller: \$newchar, \$skills: (\{\$newchar_favorite_weapon\}), \$bonus: \$char."trait:body") \< ironclaw::roll(\$bonus: 24)) return FALSE;
  return TRUE;
\} else if(\$stage == "pass") \{
  return " "+oneof(capitalize(Describe(\$newchar))+" leaps out of the crowd, to grapple with the "+\$lissemanteau+".", capitalize(Describe(\$newchar))+" is nearby and, back to back with "+Describe(\$char)+", they fight their way free.", "The "+\$lissemanteau+" "+oneof("smiles", "grins", "leers")+" nastily, when "+Describe(\$newchar)+" hits him from "+oneof("behind", "the side")+".")+"\<br/\>";
\} else if(\$stage == "fail") \{
  output = " "+capitalize(Describe(\$newchar))+" "+oneof("tries to help, but can't make it there in time.", "attacks the "+\$lissemanteau+", but doesn't take him down.", "rushes to help, but is cut off by enemies.")+" The "+\$lissemanteau+" "+oneof("slices", "slashes", "scythes")+" a "+oneof("cutlass", "dagger", "dirk", "knife", "sword")+" across "+Describe(\$char)+"'s "+oneof("stomach", "shoulder", "face", "leg", "arm", "gut", "chest")+" before moving off in the press of battle.\<br/\>\<font color='red'\>["+capitalize(Describe(\$char))+" has been removed from the combat]\</font\>\<BR/\>";
  response = ::run_incident(\$incidents: \$incidents);
  if(!response) \{
   ::remove_pc();
   return output;
  \} else \{
   return response;
  \}
\}
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:describe_lissemanteau">
         X[M] return oneof("dirty", "filthy", "villainous", "red-eyed", "hulking", "sleek", "wiry", "tough looking", "ugly", "scurrilous", "sneaky", "nasty", "vicious", "cunning", "", "", "", "", "", "")+" "+oneof("lissemanteau", "lissemanteau", "lissemanteau", "weasel", "minx", "ermine")+oneof("", "", "", "", "", "", "", " wearing all black", " wearing bloody boots", " with a murderous expression on his face", " with a snake tattoo on his bicep", " with a crooked smile");
      </Core:Property>
      <Core:Property property="merry:lib:duel_bodyguard">
         X[M] /* an incident during the event */
string output, response;
if(!\$stage) error("No \$stage data passed for incident.");
if(\$stage == "conditions") \{
  if(\$role != "dueler") return FALSE;
  return TRUE;
\} else if(\$stage == "test") \{
  if(ironclaw::roll(\$roller: \$char, \$skills: (\{\$favorite_weapon\}), \$bonus: \$char."trait:agility") \< ironclaw::roll(\$bonus: 24)) return FALSE;
  \$lissemanteau= "body guard";
  return TRUE;
\} else if(\$stage == "pass") \{
  \$enemy_pirate_tokens -= 60;
  \$lissemanteau= "body guard";
  return oneof(capitalize(Describe(\$char))+" sees an opening, and charges towards the group of body guards surrounding Lefty.", "Pushing through the battle, "+capitalize(Describe(\$char))+" makes their way to the group of body guards surrounding Lefty.")+" "+oneof("There is the flash of swords, and a body guard quickly retreats, keeping Lefty safe.", "The two combatants fight fiercely until "+capitalize(Describe(\$char))+" manages to stab the body guard through the "+oneof("shoulder", "leg", "thigh", "forearm", "hand")+".", "The body guard swings his cutlass, which "+capitalize(Describe(\$char))+" ducks, before rising up and smashing the body guard's jaw with a powerful uppercut.")+"\<br/\>";
\} else if(\$stage == "fail") \{
  \$lissemanteau= "body guard";
  response = ::run_incident(\$incidents: (\{ "rescued", "healed", "healing", "defending" \}));
  if(response) \{
    output = oneof(capitalize(Describe(\$char))+" sees an opening, and charges towards the group of body guards surrounding Lefty.", "Pushing through the battle, "+capitalize(Describe(\$char))+" makes their way to the group of body guards surrounding Lefty.")+" The body guard"+oneof("cuts "+\$char."base:objective"+" down with", "strikes "+\$char."base:objective"+" with", "lands a blow with")+" his sword"+oneof(". The weapon pierces", ", leaving a nasty cut across")+" "+Describe(\$char)+"'s "+oneof("stomach", "shoulder", "face", "leg", "arm", "gut", "chest")+"."+response;
    return output;
  \}
  output = oneof(capitalize(Describe(\$char))+" sees an opening, and charges towards the group of body guards surrounding Lefty.", "Pushing through the battle, "+capitalize(Describe(\$char))+" makes their way to the group of body guards surrounding Lefty.")+" The body guard easily cuts down "+capitalize(Describe(\$char))+".\<br/\>\<font color='red'\>["+capitalize(Describe(\$char))+" has been removed from the combat]\</font\>\<BR/\>";
  ::remove_pc();
  return output;
\}
return "nothing";
      </Core:Property>
      <Core:Property property="merry:lib:fearsome_swearing">
         X[M] /* an incident during the event */
string output, response;
if(!\$stage) error("No \$stage data passed for incident.");
if(\$stage == "conditions") \{
  if(\$role != "healer") return TRUE;
  return FALSE;
\} else if(\$stage == "test") \{
  if(ironclaw::roll(\$roller: \$char, \$skills: (\{"career:pirate" \}), \$bonus: \$char."trait:mind") \< ironclaw::roll(\$bonus: 24)) return FALSE;
  return TRUE;
\} else if(\$stage == "pass") \{
  \$enemy_pirate_tokens -= 40;
  return capitalize(Describe(\$char))+" "+oneof("swears fiercely", "lets out a fiersome curse")+", "+oneof("cowing "+\$char."base:possessive"+" enemies.", "scaring a "+\$pirate+" into "+oneof("jumping overboard.", "retreating from the fight altogether.", "wetting himself."))+"\<br/\>";
\} else if(\$stage == "fail") \{
  output = capitalize(Describe(\$char))+" "+oneof("swears reasonably well, resulting in a few raised eyebrows.", "yells randomly at the enemies.", "screams at the enemy.", "curses the stars.", "attempts to cow the enemies by "+oneof("letting out a curse", "swearing", "exclaiming")+", \\""+oneof("Oh, fiddlesticks.", "Well, darn.", "Phooey.", "Voldemort's nipple!")+"\\"")+"\<BR/\>";
  return output;
\}
return "nothing";
      </Core:Property>
      <Core:Property property="merry:lib:healed">
         X[M] /* an incident during the event */
string output, response;
if(!\$stage) error("No \$stage data passed for incident.");
if(\$stage == "conditions") \{
  if(!\$friendly_healer_tokens \|\| \$friendly_healer_tokens \< 20) return FALSE;
  return TRUE;
\} else if(\$stage == "test") \{
  /* always passes */
  return TRUE;
\} else if(\$stage == "pass") \{
  \$friendly_healer_tokens -= 20;
  return " The "+\$lissemanteau+" "+oneof("slices", "slashes", "scythes")+" a "+oneof("cutlass", "dagger", "dirk", "knife", "sword")+" across "+Describe(\$char)+"'s "+oneof("stomach", "shoulder", "face", "leg", "arm", "gut", "chest")+" before moving off in the press of battle. A passing "+\$ally+" spots the injury, and manages to apply a hasty field dressing, allowing "+Describe(\$char)+" to rejoin the fight.\<br/\>";
\} else if(\$stage == "fail") \{
  /* always passes */
\}
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:healing">
         X[M] /* an incident during the event */
string output, response;
if(!\$stage) error("No \$stage data passed for incident.");
if(\$stage == "conditions") \{
  /* there needs to be a healer in the group */
  \$list = copy(\$battle.pcs);
  \$newchar = nil;
  while(!\$newchar \&\& sizeof(\$list)) \{
    \$i = random(sizeof(\$list));
    if(\$list[\$i][1] == "healer" \&\& \$list[\$i][0] != \$char) \{
      \$newchar = \$list[\$i][0];
    \} else \{
      \$list -= (\{ \$list[\$i] \});
    \}
  \}
  if(\$newchar) return TRUE;
  return FALSE;
\} else if(\$stage == "test") \{
  if(ironclaw::roll(\$roller: \$newchar, \$skills: (\{"mental:first-aid"\}), \$bonus: \$char."trait:mind") \< ironclaw::roll(\$bonus: 24)) return FALSE;
  return TRUE;
\} else if(\$stage == "pass") \{
  return " The "+\$lissemanteau+" "+oneof("slices", "slashes", "scythes")+" a "+oneof("cutlass", "dagger", "dirk", "knife", "sword")+" across "+Describe(\$char)+"'s "+oneof("stomach", "shoulder", "face", "leg", "arm", "gut", "chest")+" before moving off in the press of battle. "+capitalize(Describe(\$newchar))+" spots the injury, and manages to apply a hasty field dressing, allowing "+Describe(\$char)+" to rejoin the fight.\<br/\>";
\} else if(\$stage == "fail") \{
  output = " The "+\$lissemanteau+" "+oneof("slices", "slashes", "scythes")+" a "+oneof("cutlass", "dagger", "dirk", "knife", "sword")+" across "+Describe(\$char)+"'s "+oneof("stomach", "shoulder", "face", "leg", "arm", "gut", "chest")+" before moving off in the press of battle. "+capitalize(Describe(\$newchar))+oneof(" spots the injury, and dashes toward "+Describe(\$char)+", but gets lost in the fury of the battle, leaving the "+oneof("wound", "gouge", "injury", "slice")+" "+oneof ("unmended", "bleeding"), " rushes over, and hastily bandages the "+oneof("wound", "gouge", "injury", "slice")+", but not before "+Describe(\$char)+" passes out")+".\<br/\>\<font color='red'\>["+capitalize(Describe(\$char))+" has been removed from the combat]\</font\>\<BR/\>";
  response = ::run_incident(\$incidents: \$incidents);
  if(!response) \{
   ::remove_pc();
   return output;
  \} else \{
   return response;
  \}

\}
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:remove_pc">
         X[M] /* remove a PC from the list */
int i;

if(!this.pcs) return TRUE;
if(!\$char) return FALSE;
for(i=0;i\<sizeof(this.pcs);i++) \{
  if(this.pcs[i][0] == \$char) \{
    \$tmp = this.pcs[i];
    this.pcs -= (\{ \$tmp \});
  \}
\}
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:rescued">
         X[M] /* an incident during the event */
string output, response;
if(!\$stage) error("No \$stage data passed for incident.");
if(\$stage == "conditions") \{
  if(!\$friendly_soldier_tokens \|\| \$friendly_soldier_tokens \< 20) return FALSE;
  return TRUE;
\} else if(\$stage == "test") \{
  /* always passes */
  return TRUE;
\} else if(\$stage == "pass") \{
  \$friendly_soldier_tokens -= 20;
  return " Before the "+\$lissemanteau+" can "+oneof("do any serious damage", "attack", "take advantage of the situation")+", a "+\$ally+" "+oneof("arrives, and drives the scoundrel away", "rushes past, stabbing the lissemanteau on the way", "intervenes, dueling the lissemanteau in "+Describe(\$char)+"'s place", "lands a well-placed hit on the back of the lissemanteau's head, rendering him unconscious")+".\<br/\>";
\} else if(\$stage == "fail") \{
  /* always passes */
\}
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:run_incident">
         X[M] /* run a second incident, following the first */
string incident;
int i;

if(!\$incidents \|\| !sizeof(Arr(\$incidents))) return nil;
\$incidents = Arr(\$incidents);

while(sizeof(\$incidents)) \{
  incident = \$incidents[random(sizeof(\$incidents))];
  \$incidents -= (\{ incident \});
  if(Call(\$battle, incident, \$stage: "conditions")) \{
    if(Call(\$battle, incident, \$stage: "test")) \{
      return Call(\$battle, incident, \$stage: "pass");
    \} else \{
      return Call(\$battle, incident, \$stage: "fail");
    \}
  \}
\}
return nil;
      </Core:Property>
      <Core:Property property="merry:lib:shoulderbarge">
         X[M] /* an incident during the event */
string output, response;
if(!\$stage) error("No \$stage data passed for incident.");
if(\$stage == "conditions") \{
  if(\$role != "healer") return TRUE;
  return FALSE;
\} else if(\$stage == "test") \{
  if(ironclaw::roll(\$roller: \$char, \$skills: (\{"combat:armor:rating" \}), \$bonus: \$char."trait:body") \< ironclaw::roll(\$bonus: 24)) return FALSE;
  return TRUE;
\} else if(\$stage == "pass") \{
  \$enemy_pirate_tokens -= 20;
  return oneof("Lowering "+\$char."base:possessive"+" shoulder, "+capitalize(Describe(\$char))+" barrels into a group of pirates.", "Opportunely noting a gaggle of pirates, "+capitalize(Describe(\$char))+" lowers "+\$char."base:possessive"+" shoulder and charge into them at full bore.")+" "+oneof("The pirates are sent reeling in all directions.", "A handful of the pirates are knocked from their feet, looking quite dazed.", "They scatter like leaves before a powerful wind.")+"\<br/\>";
\} else if(\$stage == "fail") \{
  return ::run_incident(\$incidents: this."event:start"["incidents"]);
\}
return "nothing";
      </Core:Property>
      <Core:Property property="merry:lib:sneak_attack">
         X[M] /* an incident during the event */
string output, response;
if(!\$stage) error("No \$stage data passed for incident.");
if(\$stage == "conditions") \{
  if(\$role != "healer") return TRUE;
  return FALSE;
\} else if(\$stage == "test") \{
  if(ironclaw::roll(\$roller: \$char, \$skills: (\{"thief:stealth", "combat:sneakattack", "career:pirate" \}), \$bonus: \$char."trait:speed") \< ironclaw::roll(\$bonus: 24)) return FALSE;
  return TRUE;
\} else if(\$stage == "pass") \{
  \$enemy_pirate_tokens -= 20;
  return capitalize(Describe(\$char))+" sneak attacks a "+\$lissemanteau+".\<br/\>";
\} else if(\$stage == "fail") \{
  response = ::run_incident(\$incidents: (\{ "rescued", "healed", "healing", "defending" \}));
  if(response) \{
    output = capitalize(Describe(\$char))+" fails to sneak attack a "+\$lissemanteau+". "+response;
    return output;
  \}
  output = capitalize(Describe(\$char))+" fails to sneak attack a "+\$lissemanteau+", who knocks him out.\<BR/\>\<font color='red'\>["+capitalize(Describe(\$char))+" has been removed from the combat]\</font\>\<BR/\>";
  ::remove_pc();
  return output;
\}
return "nothing";
      </Core:Property>
      <Core:Property property="merry:lib:swing_on_rigging">
         X[M] /* an incident during the event */
string output, response;
if(!\$stage) error("No \$stage data passed for incident.");
if(\$stage == "conditions") \{
  if(\$role != "healer" \&\& \$char."skill:career:pirate") return TRUE;
  return FALSE;
\} else if(\$stage == "test") \{
  if(ironclaw::roll(\$roller: \$char, \$skills: (\{"career:pirate" \}), \$bonus: \$char."trait:agility") \< ironclaw::roll(\$bonus: 24)) return FALSE;
  return TRUE;
\} else if(\$stage == "pass") \{
  \$enemy_pirate_tokens -= 40;
  return capitalize(Describe(\$char))+" swings on rigging, and kicks "+\$pirate+" overboard.\<br/\>";
\} else if(\$stage == "fail") \{
  response = ::run_incident(\$incidents: (\{ "rescued", "healed", "healing", "defending" \}));
  if(response) \{
    output = capitalize(Describe(\$char))+" swings on rigging, landing near a "+\$pirate+". "+response;
    return output;
  \}
  output = capitalize(Describe(\$char))+" swings on rigging, getting cut down by a "+\$pirate+" as they swing past, and falling to the deck.\<BR/\>\<font color='red'\>["+capitalize(Describe(\$char))+" has been removed from the combat]\</font\>\<BR/\>";
  ::remove_pc();
  return output;
\}
return "nothing";
      </Core:Property>
      <Core:Property property="pcs">
         (\{ (\{ \<Chatters:IC:cl:clover\>, "dueler", "combat:polearm" \}), (\{ \<Chatters:AE:mi:milli\>, "fighter", "combat:sword" \}), (\{ nil, "fighter", "combat:fencing" \}), (\{ nil, "dueler", "combat:fencing" \}), (\{ \<Chatters:AE:ra:rankin\>, "fighter", "combat:dagger" \}), (\{ \<Chatters:AE:ge:geradan\>, "fighter", "combat:fencing" \}), (\{ \<Chatters:AE:sa:salvatore\>, "fighter", "combat:fencing" \}), (\{ nil, "dueler", "combat:polearm" \}), (\{ \<Chatters:IC:ry:ryan\>, "fighter", "combat:dagger" \}), (\{ nil, "healer", "combat:fencing" \}), (\{ \<Chatters:AE:ni:nix\>, "fighter", "combat:sword" \}), (\{ nil, "fighter", "combat:polearm" \}), (\{ \<Chatters:AE:gr:grace\>, "healer", "combat:unarmed" \}), (\{ \<Chatters:IC:ch:chen\>, "dueler", "combat:dagger" \}), (\{ \<Chatters:Backup:IC:xe:xena0\>, "fighter", "combat:whip" \}), (\{ \<Chatters:IC:ma:mari\>, "fighter", "combat:club" \}) \})
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1219457334, "tonyd", "E", 1219457357, "tonyd", "P", 1219457392, "tonyd", "E", 1219457426, "tonyd", "E", 1219457607, "tonyd", "P", 1219457640, "tonyd", "P", 1219458016, "tonyd", "P", 1219458072, "tonyd", "P", 1219458100, "tonyd", "P", 1219458154, "tonyd", "P", 1219458172, "tonyd", "P", 1219458190, "tonyd", "P", 1219458262, "tonyd", "P", 1219458277, "tonyd", "P", 1219458311, "tonyd", "P", 1219458514, "tonyd", "P", 1219458522, "tonyd", "P", 1219458529, "tonyd", "P", 1219458583, "tonyd", "P", 1219458591, "tonyd", "P", 1219458600, "tonyd", "E", 1219458629, "tonyd", "P", 1219458649, "tonyd", "P", 1219458787, "tonyd", "P", 1219458792, "tonyd", "P", 1219458836, "tonyd", "P", 1219459013, "tonyd", "P", 1219459073, "tonyd", "P", 1219459195, "tonyd", "E", 1219459460, "tonyd", "P", 1219459739, "tonyd", "P", 1219459881, "tonyd", "P", 1219459895, "tonyd", "E", 1219459916, "tonyd", "E", 1219460013, "tonyd", "E", 1219460080, "tonyd", "E", 1232532120, "tonyd", "P", 1232532255, "tonyd", "P", 1232532299, "tonyd", "P", 1232532370, "tonyd", "P", 1232532443, "tonyd", "P", 1232532493, "tonyd", "P", 1232532523, "tonyd", "P", 1236308576, "tonyd", "P", 1236308759, "tonyd", "P", 1236309421, "tonyd", "P", 1236309525, "tonyd", "P", 1236309658, "tonyd", "P", 1236309725, "tonyd", "P", 1236310516, "tonyd", "P", 1236310602, "tonyd", "P", 1236310633, "tonyd", "P", 1236310666, "tonyd", "P", 1236310705, "tonyd", "P", 1236310730, "tonyd", "P", 1236310899, "tonyd", "P", 1236310950, "tonyd", "P", 1236311366, "tonyd", "E", 1236311612, "tonyd", "P", 1236311871, "tonyd", "P", 1236311923, "tonyd", "P", 1236311998, "tonyd", "E", 1236312030, "tonyd", "P", 1236312046, "tonyd", "P", 1236312393, "tonyd", "P", 1236312549, "tonyd", "P", 1236313241, "tonyd", "P", 1236320593, "tonyd", "P", 1236320903, "tonyd", "P", 1236321206, "tonyd", "P", 1236321215, "tonyd", "P", 1236321322, "tonyd", "P", 1236321423, "tonyd", "P", 1236321499, "tonyd", "P", 1236321561, "tonyd", "P", 1236321630, "tonyd", "P", 1236321713, "tonyd", "P", 1236321733, "tonyd", "P", 1236322038, "tonyd", "P", 1236322183, "tonyd", "P", 1236322252, "tonyd", "P", 1236322717, "tonyd", "P", 1236322847, "tonyd", "P", 1236322884, "tonyd", "P", 1236323215, "tonyd", "P", 1236323228, "tonyd", "P", 1236323246, "tonyd", "P", 1236323281, "tonyd", "P", 1236323299, "tonyd", "P", 1236323302, "tonyd", "P", 1236469176, "balkaar", "E", 1236481338, "rastalabor", "E", 1326353970, "meandmine", "E", 1326354534, "meandmine", "E", 1326354580, "meandmine", "E", 1327021281, "meandmine", "E", 1327021308, "meandmine", "E", 1327021327, "meandmine", "E", 1327021403, "meandmine", "E", 1327085431, "meandmine", "E", 1327085589, "meandmine", "E", 1327085712, "meandmine", "E", 1327085901, "meandmine", "E", 1327086336, "meandmine", "E", 1327086352, "meandmine", "E", 1327086384, "meandmine", "E", 1327086436, "meandmine", "E" \})
      </Core:Property>
    </Core:PCProperties>
    <Notes:Notes/>
  </Core:PropertyContainer>
</object>
