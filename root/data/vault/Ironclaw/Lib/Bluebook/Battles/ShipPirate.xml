<object clone="/obj/properties" owner="balkaar">
  <Core:PropertyContainer>
    <Ur:UrObject/>
    <Core:PCProperties>
      <Core:Property property="event:start">
         ([ "incidents":(\{ "attack", "defend", "sneak_attack", "swing_on_rigging", "fearsome_swearing", "fight_assassin", "fight_assassin", "attacked_by_assassin", "attacked_by_assassin", "shoulderbarge" \}), "variables":([ "enemy_pirate_tokens":600, "friendly_healer_tokens":50, "friendly_soldier_tokens":450 ]) ])
      </Core:Property>
      <Core:Property property="merry:lib:attack">
         "/* an incident during the event */ \\r\\nstring output, response; \\r\\nif(!\$stage) error(\\"No \$stage data passed for incident.\\"); \\r\\nif(\$stage == \\"conditions\\") \{ \\r\\n  if(\$role != \\"healer\\") return TRUE; \\r\\n  return FALSE; \\r\\n\} else if(\$stage == \\"test\\") \{ \\r\\n  if(ironclaw::roll(\$roller: \$char, \$skills: (\{\$favorite_weapon\}), \$bonus: \$char.\\"trait:agility\\") \< ironclaw::roll(\$bonus: 24)) return FALSE; \\r\\n  return TRUE; \\r\\n\} else if(\$stage == \\"pass\\") \{ \\r\\n  \$enemy_pirate_tokens -= 25; \\r\\n  return capitalize(Describe(\$char))+\\" spots a \\"+\$pirate+\\", who is cut off from his \\"+oneof(\\"companions\\", \\"crew\\")+\\", and \\"+oneof(\\"charges\\", \\"attacks\\", \\"takes advantage of the opportunity\\")+\\". \\"+capitalize(Describe(\$char))+\\" \\"+oneof(\\"guts him with ease\\", \\"slices - quickly and efficiently, and kills the pirate\\", \\"strikes true and hard, knocking the \\"+\$pirate+\\" out of the fight\\")+\\".\<br/\>\\"; \\r\\n\} else if(\$stage == \\"fail\\") \{ \\r\\n  response = ::run_incident(\$incidents: (\{ \\"rescued\\", \\"healed\\", \\"healing\\", \\"defending\\" \})); \\r\\n  if(response) \{ \\r\\n    output = capitalize(Describe(\$char))+\\" \\"+oneof(\\"pushes forward into the thick of battle\\", \\"chases after a \\"+\$pirate, \\"presses forward, fighting with a \\"+\$pirate)+oneof(\\", before realizing \\"+\$char.\\"base:pronoun\\"+\\" is cut off from \\"+\$char.\\"base:possessive\\"+\\" allies\\", \\", unfortunately the ebb and flow of the fight leaves \\"+\$char.\\"base:objective\\"+\\" stranded amongst enemies\\")+\\". \\"+response; \\r\\n    return output; \\r\\n  \} \\r\\n  output = capitalize(Describe(\$char))+\\" charges into the thick of battle where, surrounded by enemies, a \\"+\$pirate+\\" \\"+oneof(\\"cuts \\"+\$char.\\"base:objective\\"+\\" down with\\", \\"strikes \\"+\$char.\\"base:objective\\"+\\" with\\", \\"lands a blow with\\")+\\" a \\"+oneof(\\"cutlass\\", \\"dagger\\", \\"dirk\\", \\"knife\\", \\"sword\\")+oneof(\\". The weapon pierces\\", \\", leaving a nasty cut across\\")+\\" \\"+Describe(\$char)+\\"'s \\"+oneof(\\"stomach\\", \\"shoulder\\", \\"face\\", \\"leg\\", \\"arm\\", \\"gut\\", \\"chest\\")+\\". \\"+capitalize(Describe(\$char))+\\" falls to the deck, unconscious.\<br/\>\<font color='red'\>[\\"+capitalize(Describe(\$char))+\\" has been removed from the combat]\</font\>\<BR/\>\\"; \\r\\n  ::remove_pc(); \\r\\n  return output; \\r\\n\} \\r\\nreturn \\"nothing\\";"
      </Core:Property>
      <Core:Property property="merry:lib:attacked_by_assassin">
         X[M] /* an incident during the event */    
string output, response;    
if(!\$stage) error("No \$stage data passed for incident.");    
if(\$stage == "conditions") \{    
  if(\$role != "dueler") return FALSE;    
  return TRUE;    
\} else if(\$stage == "test") \{    
  if(ironclaw::roll(\$roller: \$char, \$skills: (\{"combat:dodge", "career:spy", "career:bodyguard", "mental:observation"\}), \$bonus: \$char."trait:mind") \< ironclaw::roll(\$bonus: 24)) return FALSE;    
  \$pirate = "shady figure";    
  return TRUE;    
\} else if(\$stage == "pass") \{    
  \$enemy_pirate_tokens -= 30;    
  \$pirate = "shady figure";    
  return oneof("Engaged in the swirling combat, "+capitalize(Describe(\$char))+" loses "+\$char."base:objective"+"self to the heat of battle ignoring the shady figure that sneaks in the shadow.", "Evasively slipping past other combatants, the shady figure manages to get close to the back of "+capitalize(Describe(\$char))+".")+" "+oneof("In the very last moment "+capitalize(Describe(\$char))+" notices the attack and manages  to fend off the attack for now.", "A loud warning yell results in a lot of ducking and weaving, but in the end "+capitalize(Describe(\$char))+" manages to thwart all attempts to do any bodily harm.", capitalize(Describe(\$char))+" just barely manages to avoid any serious injury at the hands of the assassin.")+"\<br/\>";    
\} else if(\$stage == "fail") \{    
  \$pirate = "shady figure";    
  response = ::run_incident(\$incidents: (\{ "rescued", "healing-poison", "defending" \}));    
  if(response) \{    
    output = oneof("Engaged in the swirling combat, "+capitalize(Describe(\$char))+" loses "+\$char."base:objective"+"self to the heat of battle ignoring the shady figure that sneaks in the shadow.", "Evasively slipping past other combatants, the shady figure manages to get close to the back of "+capitalize(Describe(\$char))+".")+" The shady figure "+oneof("cuts "+\$char."base:objective"+" down with", "strikes "+\$char."base:objective"+" with", "lands a blow with")+" his stiletto"+oneof(". The weapon pierces", ", leaving a nasty wound deep in")+" "+Describe(\$char)+"'s "+oneof("stomach", "shoulder", "arm", "leg", "arm", "gut", "chest")+"."+response;    
    return output;    
  \}    
  output = oneof("Engaged in the swirling combat, "+capitalize(Describe(\$char))+" loses "+\$char."base:objective"+"self to the heat of battle ignoring the shady figure that sneaks in the shadow.", "Evasively slipping past other combatants, the shady figure manages to get close to the back of "+capitalize(Describe(\$char))+".")+" The shady figurine easily cuts down "+capitalize(Describe(\$char))+".\<br/\>\<font color='red'\>["+capitalize(Describe(\$char))+" has been removed from the combat]\</font\>\<BR/\>";    
  ::remove_pc();    
  return output;    
\}    
return "nothing";
      </Core:Property>
      <Core:Property property="merry:lib:defend">
         X[M] /* an incident during the event */ 
string output, response; 
if(!\$stage) error("No \$stage data passed for incident."); 
if(\$stage == "conditions") \{ 
  return TRUE; 
\} else if(\$stage == "test") \{ 
  if(ironclaw::roll(\$roller: \$char, \$skills: (\{"combat:dodge"\}), \$bonus: \$char."trait:speed") \< ironclaw::roll(\$bonus: 24)) return FALSE; 
  return TRUE; 
\} else if(\$stage == "pass") \{ 
  \$enemy_pirate_tokens -= 10; 
  return "A "+\$pirate+" charges at "+Describe(\$char)+", "+oneof("swinging a", "slashing a", "with a raised")+" "+oneof("cutlass", "dagger", "dirk", "knife", "sword")+". "+capitalize(Describe(\$char))+" "+oneof("manages to keep away", "avoids the attacker, until an ally can cut him down", "sidesteps the attack, then watches in amusement as the "+\$pirate+" continues charging, and falls overboard")+".\<br/\>"; 
\} else if(\$stage == "fail") \{ 
  response = ::run_incident(\$incidents: (\{ "rescued", "healed", "healing", "defending" \})); 
  if(response) \{ 
    output = "A "+\$pirate+" charges at "+Describe(\$char)+", "+oneof("swinging a", "slashing a", "with a raised")+" "+oneof("cutlass", "dagger", "dirk", "knife", "sword")+", and backs "+capitalize(Describe(\$char))+" against a railing. "+response; 
    return output; 
  \} 
  output = "A "+\$pirate+" charges at "+Describe(\$char)+", "+oneof("swinging a", "slashing a", "with a raised")+" "+oneof("cutlass", "dagger", "dirk", "knife", "sword")+", and "+oneof("slices", "cuts", "stabs")+" into "+Describe(\$char)+"'s "+oneof("stomach", "shoulder", "face", "leg", "arm", "gut", "chest")+". "+capitalize(Describe(\$char))+" falls to the deck, unconscious.\<br/\>\<font color='red'\>["+capitalize(Describe(\$char))+" has been removed from the combat]\</font\>\<BR/\>"; 
  ::remove_pc(); 
  return output; 
\} 
return "nothing";
      </Core:Property>
      <Core:Property property="merry:lib:defending">
         X[M] /* an incident during the event */ 
string output, response; 
if(!\$stage) error("No \$stage data passed for incident."); 
if(\$stage == "conditions") \{ 
  /* there needs to be a fighter in the group */ 
  \$list = copy(\$battle.pcs); 
  \$newchar = nil; 
  while(!\$newchar \&\& sizeof(\$list)) \{ 
    \$i = random(sizeof(\$list)); 
    if(\$list[\$i][1] == "fighter" \&\& \$list[\$i][0] != \$char) \{ 
      \$newchar = \$list[\$i][0]; 
      \$newchar_favorite_weapon = \$list[\$i][2]; 
    \} else \{ 
      \$list -= (\{ \$list[\$i] \}); 
    \} 
  \} 
  if(\$newchar) return TRUE; 
  return FALSE; 
\} else if(\$stage == "test") \{ 
  if(ironclaw::roll(\$roller: \$newchar, \$skills: (\{\$newchar_favorite_weapon\}), \$bonus: \$char."trait:body") \< ironclaw::roll(\$bonus: 24)) return FALSE; 
  return TRUE; 
\} else if(\$stage == "pass") \{ 
  return " "+oneof(capitalize(Describe(\$newchar))+" leaps out of the crowd, to grapple with the "+\$pirate+".", capitalize(Describe(\$newchar))+" is nearby and, back to back with "+Describe(\$char)+", they fight their way free.", "The "+\$pirate+" "+oneof("smiles", "grins", "leers")+" nastily, when "+Describe(\$newchar)+" hits him from "+oneof("behind", "the side")+".")+"\<br/\>"; 
\} else if(\$stage == "fail") \{ 
  output = " "+capitalize(Describe(\$newchar))+" "+oneof("tries to help, but can't make it there in time.", "attacks the "+\$pirate+", but doesn't take him down.", "rushes to help, but is cut off by enemies.")+" The "+\$pirate+" "+oneof("slices", "slashes", "scythes")+" a "+oneof("cutlass", "dagger", "dirk", "knife", "sword")+" across "+Describe(\$char)+"'s "+oneof("stomach", "shoulder", "face", "leg", "arm", "gut", "chest")+" before moving off in the press of battle.\<br/\>\<font color='red'\>["+capitalize(Describe(\$char))+" has been removed from the combat]\</font\>\<BR/\>"; 
  response = ::run_incident(\$incidents: \$incidents); 
  if(!response) \{ 
   ::remove_pc(); 
   return output; 
  \} else \{ 
   return response; 
  \} 
\} 
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:describe_pirate">
         X[M] return oneof("sneaky", "evasive", "villanous", "swift", "devious", "shifty", "wiry", "tough looking", "ugly", "scurrilous", "scurvey", "nasty", "vicious", "one-eyed", "dusky", "crooked", "", "", "", "")+" "+oneof("sailor", "figure", "mercenary", "buccaneer", "assassin", "scoundrel") +oneof("", "", "", "", "", "", "holding a garotte", " wearing a mask", " with a painted face", " with a nasty glint in his eye", " clad in dark", " wearing tan and scarlet armband");
      </Core:Property>
      <Core:Property property="merry:lib:fearsome_swearing">
         X[M] /* an incident during the event */ 
string output, response; 
if(!\$stage) error("No \$stage data passed for incident."); 
if(\$stage == "conditions") \{ 
  if(\$role != "healer") return TRUE; 
  return FALSE; 
\} else if(\$stage == "test") \{ 
  if(ironclaw::roll(\$roller: \$char, \$skills: (\{"career:buccaneer", "career:pirate" \}), \$bonus: \$char."trait:mind") \< ironclaw::roll(\$bonus: 24)) return FALSE; 
  return TRUE; 
\} else if(\$stage == "pass") \{ 
  \$enemy_pirate_tokens -= 10; 
  return capitalize(Describe(\$char))+" "+oneof("swears fiercely", "lets out a fiersome curse")+", "+oneof("cowing "+\$char."base:possessive"+" enemies.", "scaring a "+\$pirate+" into "+oneof("jumping overboard.", "retreating from the fight altogether.", "wetting himself."))+"\<br/\>"; 
\} else if(\$stage == "fail") \{ 
  output = capitalize(Describe(\$char))+" "+oneof("swears reasonably well, resulting in a few raised eyebrows.", "yells randomly at the enemies.", "screams at the enemy.", "curses the stars.", "attempts to cow the enemies by "+oneof("letting out a curse", "swearing", "exclaiming")+", \\""+oneof("Oh, fiddlesticks.", "Well, darn.", "Phooey.", "Voldemort's nipple!")+"\\"")+"\<BR/\>"; 
  return output; 
\} 
return "nothing";
      </Core:Property>
      <Core:Property property="merry:lib:fight_assassin">
         X[M] /* an incident during the event */     
string output, response;     
if(!\$stage) error("No \$stage data passed for incident.");     
if(\$stage == "conditions") \{     
  if(\$role != "dueler") return FALSE;     
  return TRUE;     
\} else if(\$stage == "test") \{     
  if(ironclaw::roll(\$roller: \$char, \$skills: (\{\$favorite_weapon\}), \$bonus: \$char."trait:agility") \< ironclaw::roll(\$bonus: 24)) return FALSE;     
  \$pirate = "assassin";     
  return TRUE;     
\} else if(\$stage == "pass") \{     
  \$enemy_pirate_tokens -= 30;     
  \$pirate = "assassin";     
  return oneof(capitalize(Describe(\$char))+" sees an opening, and charges towards one of the assassins.", "Pushing through the battle, "+capitalize(Describe(\$char))+" makes their way to the agile foe.")+" "+oneof("There is the flash of weapons, and the cowled figure quickly retreats.", "The two combatants fight up and down the the deck, until "+capitalize(Describe(\$char))+" manages to stab the assassin through the "+oneof("shoulder", "leg", "thigh", "forearm", "hand")+".", "The assassin stabs with his dagger, which "+capitalize(Describe(\$char))+" ducks, before rising up and smashing the assassin's jaw with a powerful uppercut.")+"\<br/\>";     
\} else if(\$stage == "fail") \{     
  \$pirate = "assassin";     
  response = ::run_incident(\$incidents: (\{ "rescued", "healing-poison", "defending" \}));     
  if(response) \{     
    output = oneof(capitalize(Describe(\$char))+" sees an opening, and charges towards an assassin.", "Pushing through the battle, "+capitalize(Describe(\$char))+" makes their way to one of the assassins.")+" The assassin "+oneof("cuts "+\$char."base:objective"+" down with", "strikes "+\$char."base:objective"+" with", "slices with")+" his dagger"+oneof(". The weapon pierces", ", leaving a nasty cut across")+" "+Describe(\$char)+"'s "+oneof("stomach", "shoulder", "face", "leg", "arm", "gut", "chest")+", an a sudden twist of pain comes in response to the weapon's poison."+response;     
    return output;     
  \}     
  output = oneof(capitalize(Describe(\$char))+" sees an opening, and charges towards an assassin.", "Pushing through the battle, "+capitalize(Describe(\$char))+" makes their way to a swiftly moving assassin.")+" The assassin easily cuts down "+capitalize(Describe(\$char))+".\<br/\>\<font color='red'\>["+capitalize(Describe(\$char))+" has been removed from the combat]\</font\>\<BR/\>";     
  ::remove_pc();     
  return output;     
\}     
return "nothing";
      </Core:Property>
      <Core:Property property="merry:lib:healed">
         X[M] /* an incident during the event */ 
string output, response; 
if(!\$stage) error("No \$stage data passed for incident."); 
if(\$stage == "conditions") \{ 
  if(!\$friendly_healer_tokens \|\| \$friendly_healer_tokens \< 20) return FALSE; 
  return TRUE; 
\} else if(\$stage == "test") \{ 
  /* always passes */ 
  return TRUE; 
\} else if(\$stage == "pass") \{ 
  \$friendly_healer_tokens -= 5; 
  return " The "+\$pirate+" "+oneof("slices", "slashes", "scythes")+" a "+oneof("cutlass", "dagger", "dirk", "knife", "sword")+" across "+Describe(\$char)+"'s "+oneof("stomach", "shoulder", "face", "leg", "arm", "gut", "chest")+" before moving off in the press of battle. A passing "+\$ally+" spots the injury, and manages to apply a hasty field dressing, allowing "+Describe(\$char)+" to rejoin the fight.\<br/\>"; 
\} else if(\$stage == "fail") \{ 
  /* always passes */ 
\} 
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:healing">
         X[M] /* an incident during the event */ 
string output, response; 
if(!\$stage) error("No \$stage data passed for incident."); 
if(\$stage == "conditions") \{ 
  /* there needs to be a healer in the group */ 
  \$list = copy(\$battle.pcs); 
  \$newchar = nil; 
  while(!\$newchar \&\& sizeof(\$list)) \{ 
    \$i = random(sizeof(\$list)); 
    if(\$list[\$i][1] == "healer" \&\& \$list[\$i][0] != \$char) \{ 
      \$newchar = \$list[\$i][0]; 
    \} else \{ 
      \$list -= (\{ \$list[\$i] \}); 
    \} 
  \} 
  if(\$newchar) return TRUE; 
  return FALSE; 
\} else if(\$stage == "test") \{ 
  if(ironclaw::roll(\$roller: \$newchar, \$skills: (\{"mental:first-aid"\}), \$bonus: \$char."trait:mind") \< ironclaw::roll(\$bonus: 24)) return FALSE; 
  return TRUE; 
\} else if(\$stage == "pass") \{ 
  return " The "+\$pirate+" "+oneof("slices", "slashes", "scythes")+" a "+oneof("cutlass", "dagger", "dirk", "knife", "sword")+" across "+Describe(\$char)+"'s "+oneof("stomach", "shoulder", "face", "leg", "arm", "gut", "chest")+" before moving off in the press of battle. "+capitalize(Describe(\$newchar))+" spots the injury, and manages to apply a hasty field dressing, allowing "+Describe(\$char)+" to rejoin the fight.\<br/\>"; 
\} else if(\$stage == "fail") \{ 
  output = " The "+\$pirate+" "+oneof("slices", "slashes", "scythes")+" a "+oneof("cutlass", "dagger", "dirk", "knife", "sword")+" across "+Describe(\$char)+"'s "+oneof("stomach", "shoulder", "face", "leg", "arm", "gut", "chest")+" before moving off in the press of battle. "+capitalize(Describe(\$newchar))+oneof(" spots the injury, and dashes toward "+Describe(\$char)+", but gets lost in the fury of the battle, leaving the "+oneof("wound", "gouge", "injury", "slice")+" "+oneof ("unmended", "bleeding"), " rushes over, and hastily bandages the "+oneof("wound", "gouge", "injury", "slice")+", but not before "+Describe(\$char)+" passes out")+".\<br/\>\<font color='red'\>["+capitalize(Describe(\$char))+" has been removed from the combat]\</font\>\<BR/\>"; 
  response = ::run_incident(\$incidents: \$incidents); 
  if(!response) \{ 
   ::remove_pc(); 
   return output; 
  \} else \{ 
   return response; 
  \} 
 
\} 
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:healing-poison">
         X[M] /* an incident during the event */  
string output, response;  
if(!\$stage) error("No \$stage data passed for incident.");  
if(\$stage == "conditions") \{  
  /* there needs to be a healer in the group */  
  \$list = copy(\$battle.pcs);  
  \$newchar = nil;  
  while(!\$newchar \&\& sizeof(\$list)) \{  
    \$i = random(sizeof(\$list));  
    if(\$list[\$i][1] == "healer" \&\& \$list[\$i][0] != \$char) \{  
      \$newchar = \$list[\$i][0];  
    \} else \{  
      \$list -= (\{ \$list[\$i] \});  
    \}  
  \}  
  if(\$newchar) return TRUE;  
  return FALSE;  
\} else if(\$stage == "test") \{  
  if(ironclaw::roll(\$roller: \$newchar, \$skills: (\{"thief:poison"\}), \$bonus: \$char."trait:mind") \< ironclaw::roll(\$bonus: 24)) return FALSE;  
  return TRUE;  
\} else if(\$stage == "pass") \{  
  return " The "+\$pirate+" "+oneof("slices", "slashes", "scythes")+" a "+oneof("dagger", "dirk", "knife")+" across "+Describe(\$char)+"'s "+oneof("stomach", "shoulder", "face", "leg", "arm", "gut", "chest")+" who falters as the poison enters their bloodstream. "+capitalize(Describe(\$newchar))+" spots the injury, and manages to help with an antidote, before "+Describe(\$char)+" is badly hurt.\<br/\>";  
\} else if(\$stage == "fail") \{  
  output = " The "+\$pirate+" "+oneof("slices", "slashes", "scythes")+" a "+oneof("dagger", "dirk", "knife")+" across "+Describe(\$char)+"'s "+oneof("stomach", "shoulder", "face", "leg", "arm", "gut", "chest")+" an unnatural burning sensation coming from the wound. "+capitalize(Describe(\$newchar))+oneof(" spots the injury, and dashes toward "+Describe(\$char)+", but gets lost in the fury of the battle, leaving the poisoned wound untended+", " rushes over, and hastily treats the "+oneof("wound", "gouge", "injury", "slice")+", but not before "+Describe(\$char)+" passes out")+".\<br/\>\<font color='red'\>["+capitalize(Describe(\$char))+" has been removed from the combat]\</font\>\<BR/\>";  
  response = ::run_incident(\$incidents: \$incidents);  
  if(!response) \{  
   ::remove_pc();  
   return output;  
  \} else \{  
   return response;  
  \}  
  
\}  
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:remove_pc">
         X[M] /* remove a PC from the list */ 
int i; 
 
if(!this.pcs) return TRUE; 
if(!\$char) return FALSE; 
for(i=0;i\<sizeof(this.pcs);i++) \{ 
  if(this.pcs[i][0] == \$char) \{ 
    \$tmp = this.pcs[i]; 
    this.pcs -= (\{ \$tmp \}); 
  \} 
\} 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:rescued">
         X[M] /* an incident during the event */ 
string output, response; 
if(!\$stage) error("No \$stage data passed for incident."); 
if(\$stage == "conditions") \{ 
  if(!\$friendly_soldier_tokens \|\| \$friendly_soldier_tokens \< 20) return FALSE; 
  return TRUE; 
\} else if(\$stage == "test") \{ 
  /* always passes */ 
  return TRUE; 
\} else if(\$stage == "pass") \{ 
  \$friendly_soldier_tokens -= 15; 
  return " Before the "+\$pirate+" can "+oneof("do any serious damage", "attack", "take advantage of the situation")+", a "+\$ally+" "+oneof("arrives, and drives the scoundrel away", "rushes past, stabbing the pirate on the way", "intervenes, dueling the pirate in "+Describe(\$char)+"'s place", "lands a well-placed hit on the back of the pirate's head, rendering him unconscious")+".\<br/\>"; 
\} else if(\$stage == "fail") \{ 
  /* always passes */ 
\} 
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:run_incident">
         X[M] /* run a second incident, following the first */ 
string incident; 
int i; 
 
if(!\$incidents \|\| !sizeof(Arr(\$incidents))) return nil; 
\$incidents = Arr(\$incidents); 
 
while(sizeof(\$incidents)) \{ 
  incident = \$incidents[random(sizeof(\$incidents))]; 
  \$incidents -= (\{ incident \}); 
  if(Call(\$battle, incident, \$stage: "conditions")) \{ 
    if(Call(\$battle, incident, \$stage: "test")) \{ 
      return Call(\$battle, incident, \$stage: "pass"); 
    \} else \{ 
      return Call(\$battle, incident, \$stage: "fail"); 
    \} 
  \} 
\} 
return nil;
      </Core:Property>
      <Core:Property property="merry:lib:shoulderbarge">
         X[M] /* an incident during the event */ 
string output, response; 
if(!\$stage) error("No \$stage data passed for incident."); 
if(\$stage == "conditions") \{ 
  if(\$role != "healer") return TRUE; 
  return FALSE; 
\} else if(\$stage == "test") \{ 
  if(ironclaw::roll(\$roller: \$char, \$skills: (\{"combat:armor:rating" \}), \$bonus: \$char."trait:body") \< ironclaw::roll(\$bonus: 24)) return FALSE; 
  return TRUE; 
\} else if(\$stage == "pass") \{ 
  \$enemy_pirate_tokens -= 15; 
  return oneof("Lowering "+\$char."base:possessive"+" shoulder, "+capitalize(Describe(\$char))+" barrels into a group of pirates.", "Opportunely noting a gaggle of pirates, "+capitalize(Describe(\$char))+" lowers "+\$char."base:possessive"+" shoulder and charge into them at full bore.")+" "+oneof("The pirates are sent reeling in all directions.", "A handful of the pirates are knocked from their feet, looking quite dazed.", "They scatter like leaves before a powerful wind.")+"\<br/\>"; 
\} else if(\$stage == "fail") \{ 
  return ::run_incident(\$incidents: this."event:start"["incidents"]); 
\} 
return "nothing";
      </Core:Property>
      <Core:Property property="merry:lib:sneak_attack">
         X[M] /* an incident during the event */ 
string output, response; 
if(!\$stage) error("No \$stage data passed for incident."); 
if(\$stage == "conditions") \{ 
  if(\$role != "healer") return TRUE; 
  return FALSE; 
\} else if(\$stage == "test") \{ 
  if(ironclaw::roll(\$roller: \$char, \$skills: (\{"thief:stealth", "combat:sneakattack", "career:buccaneer", "career:pirate" \}), \$bonus: \$char."trait:speed") \< ironclaw::roll(\$bonus: 24)) return FALSE; 
  return TRUE; 
\} else if(\$stage == "pass") \{ 
  \$enemy_pirate_tokens -= 20; 
  return capitalize(Describe(\$char))+" sneak attacks a "+\$pirate+".\<br/\>"; 
\} else if(\$stage == "fail") \{ 
  response = ::run_incident(\$incidents: (\{ "rescued", "healed", "healing", "defending" \})); 
  if(response) \{ 
    output = capitalize(Describe(\$char))+" fails to sneak attack a "+\$pirate+". "+response; 
    return output; 
  \} 
  output = capitalize(Describe(\$char))+" fails to sneak attack a "+\$pirate+", who knocks him out.\<BR/\>\<font color='red'\>["+capitalize(Describe(\$char))+" has been removed from the combat]\</font\>\<BR/\>"; 
  ::remove_pc(); 
  return output; 
\} 
return "nothing";
      </Core:Property>
      <Core:Property property="merry:lib:swing_on_rigging">
         X[M] /* an incident during the event */   
string output, response;   
if(!\$stage) error("No \$stage data passed for incident.");   
if(\$stage == "conditions") \{   
  if(\$role != "healer" \&\& (\$char."skill:career:pirate" \|\| \$char."skill:career:buccaneer")) return TRUE;   
  return FALSE;   
\} else if(\$stage == "test") \{   
  if(ironclaw::roll(\$roller: \$char, \$skills: (\{"career:buccaneer", "career:pirate" \}), \$bonus: \$char."trait:agility") \< ironclaw::roll(\$bonus: 24)) return FALSE;   
  return TRUE;   
\} else if(\$stage == "pass") \{   
  \$enemy_pirate_tokens -= 20;   
  return capitalize(Describe(\$char))+" swings on rigging, and kicks "+\$pirate+" overboard.\<br/\>";   
\} else if(\$stage == "fail") \{   
  response = ::run_incident(\$incidents: (\{ "rescued", "healed", "healing", "defending" \}));   
  if(response) \{   
    output = capitalize(Describe(\$char))+" swings on rigging, landing near a "+\$pirate+". "+response;   
    return output;   
  \}   
  output = capitalize(Describe(\$char))+" swings on rigging, getting cut down by a "+\$pirate+" as they swing past, and falling to the deck.\<BR/\>\<font color='red'\>["+capitalize(Describe(\$char))+" has been removed from the combat]\</font\>\<BR/\>";   
  ::remove_pc();   
  return output;   
\}   
return "nothing";
      </Core:Property>
      <Core:Property property="pcs">
         (\{ (\{ \<Chatters:IC:cl:clover\>, "dueler", "combat:unarmed" \}), (\{ \<Chatters:Backup:IC:ac:achlys0\>, "healer", "combat:dagger" \}), (\{ \<Chatters:Backup:AE:su:suavis0\>, "healer", "combat:dagger" \}), (\{ \<Chatters:Backup:IC:sa:sable0\>, "healer", "combat:sword" \}), (\{ nil, "dueler", "combat:fencing" \}), (\{ \<Chatters:IC:ko:koz\>, "dueler", "combat:unarmed" \}), (\{ nil, "fighter", "combat:axe" \}), (\{ \<Chatters:IC:ei:eiryk\>, "fighter", "combat:dagger" \}), (\{ \<Chatters:IC:se:senora\>, "fighter", "combat:dagger" \}), (\{ nil, "fighter", "combat:unarmed" \}), (\{ nil, "fighter", "combat:unarmed" \}), (\{ \<Chatters:IC:kr:kruix\>, "fighter", "combat:axe" \}), (\{ \<Chatters:AE:ru:rune\>, "fighter", "combat:dagger" \}), (\{ \<Chatters:Backup:IC:ch:chesh0\>, "dueler", "combat:fencing" \}), (\{ \<Chatters:AE:ki:kilana\>, "fighter", "combat:dagger" \}), (\{ \<Chatters:Backup:IC:cu:cullan0\>, "fighter", "combat:axe" \}) \})
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1219457334, "tonyd", "E", 1219457357, "tonyd", "P", 1219457392, "tonyd", "E", 1219457426, "tonyd", "E", 1219457607, "tonyd", "P", 1219457640, "tonyd", "P", 1219458016, "tonyd", "P", 1219458072, "tonyd", "P", 1219458100, "tonyd", "P", 1219458154, "tonyd", "P", 1219458172, "tonyd", "P", 1219458190, "tonyd", "P", 1219458262, "tonyd", "P", 1219458277, "tonyd", "P", 1219458311, "tonyd", "P", 1219458514, "tonyd", "P", 1219458522, "tonyd", "P", 1219458529, "tonyd", "P", 1219458583, "tonyd", "P", 1219458591, "tonyd", "P", 1219458600, "tonyd", "E", 1219458629, "tonyd", "P", 1219458649, "tonyd", "P", 1219458787, "tonyd", "P", 1219458792, "tonyd", "P", 1219458836, "tonyd", "P", 1219459013, "tonyd", "P", 1219459073, "tonyd", "P", 1219459195, "tonyd", "E", 1219459460, "tonyd", "P", 1219459739, "tonyd", "P", 1219459881, "tonyd", "P", 1219459895, "tonyd", "E", 1219459916, "tonyd", "E", 1219460013, "tonyd", "E", 1219460080, "tonyd", "E", 1232532120, "tonyd", "P", 1232532255, "tonyd", "P", 1232532299, "tonyd", "P", 1232532370, "tonyd", "P", 1232532443, "tonyd", "P", 1232532493, "tonyd", "P", 1232532523, "tonyd", "P", 1236308576, "tonyd", "P", 1236308759, "tonyd", "P", 1236309421, "tonyd", "P", 1236309525, "tonyd", "P", 1236309658, "tonyd", "P", 1236309725, "tonyd", "P", 1236310516, "tonyd", "P", 1236310602, "tonyd", "P", 1236310633, "tonyd", "P", 1236310666, "tonyd", "P", 1236310705, "tonyd", "P", 1236310730, "tonyd", "P", 1236310899, "tonyd", "P", 1236310950, "tonyd", "P", 1236311366, "tonyd", "E", 1236311612, "tonyd", "P", 1236311871, "tonyd", "P", 1236311923, "tonyd", "P", 1236311998, "tonyd", "E", 1236312030, "tonyd", "P", 1236312046, "tonyd", "P", 1236312393, "tonyd", "P", 1236312549, "tonyd", "P", 1236313241, "tonyd", "P", 1236320593, "tonyd", "P", 1236320903, "tonyd", "P", 1236321206, "tonyd", "P", 1236321215, "tonyd", "P", 1236321322, "tonyd", "P", 1236321423, "tonyd", "P", 1236321499, "tonyd", "P", 1236321561, "tonyd", "P", 1236321630, "tonyd", "P", 1236321713, "tonyd", "P", 1236321733, "tonyd", "P", 1236322038, "tonyd", "P", 1236322183, "tonyd", "P", 1236322252, "tonyd", "P", 1236322717, "tonyd", "P", 1236322847, "tonyd", "P", 1236322884, "tonyd", "P", 1236323215, "tonyd", "P", 1236323228, "tonyd", "P", 1236323246, "tonyd", "P", 1236323281, "tonyd", "P", 1236323299, "tonyd", "P", 1236323302, "tonyd", "P", 1236469176, "balkaar", "E", 1236481338, "rastalabor", "E", 1281129022, "rastalabor", "X", 1281129601, "rastalabor", "X", 1281129750, "rastalabor", "X", 1281213999, "balkaar", "E", 1281214147, "rastalabor", "X", 1281214643, "balkaar", "E", 1281214725, "rastalabor", "X", 1281214805, "rastalabor", "X", 1281214826, "rastalabor", "X", 1281214857, "balkaar", "E", 1281214973, "rastalabor", "X", 1281215109, "rastalabor", "X", 1281215259, "balkaar", "E", 1281215370, "rastalabor", "X", 1281215393, "rastalabor", "X", 1281215412, "rastalabor", "X", 1281216001, "balkaar", "E", 1281216103, "rastalabor", "E", 1281216111, "rastalabor", "E", 1281216117, "rastalabor", "E", 1281216157, "rastalabor", "X", 1281216169, "rastalabor", "E", 1281216189, "rastalabor", "X", 1281216311, "balkaar", "R", 1281216672, "rastalabor", "X", 1281216732, "rastalabor", "X", 1344453588, "meandmine", "E", 1344454386, "meandmine", "E", 1344454428, "meandmine", "E", 1344456342, "meandmine", "E", 1344456622, "meandmine", "E", 1344456656, "meandmine", "E", 1344456677, "meandmine", "E", 1344456695, "meandmine", "E", 1344456713, "meandmine", "E", 1344456766, "meandmine", "E", 1344456795, "meandmine", "E", 1344456835, "meandmine", "E", 1344456938, "meandmine", "E", 1344457013, "meandmine", "E", 1344458925, "meandmine", "E", 1399666803, "slurpeeslurp", "E", 1399666843, "slurpeeslurp", "E", 1399666884, "slurpeeslurp", "E", 1399669420, "slurpeeslurp", "E" \})
      </Core:Property>
    </Core:PCProperties>
    <Notes:Notes/>
  </Core:PropertyContainer>
</object>
