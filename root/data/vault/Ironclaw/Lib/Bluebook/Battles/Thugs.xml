<object clone="/obj/properties" owner="meandmine">
  <Core:PropertyContainer>
    <Ur:UrObject/>
    <Core:PCProperties>
      <Core:Property property="event:start">
         ([ "incidents":(\{ "attack", "defend", "sneak_attack", "fight_cutthroat", "fight_cutthroat", "attacked_by_assassin", "shoulderbarge" \}), "variables":([ "enemy_pirate_tokens":200, "friendly_healer_tokens":50, "friendly_soldier_tokens":50 ]) ])
      </Core:Property>
      <Core:Property property="merry:lib:attack">
         X[M] /* an incident during the event */ 
string output, response; 
if(!\$stage) error("No \$stage data passed for incident."); 
if(\$stage == "conditions") \{ 
  if(\$role != "healer") return TRUE; 
  return FALSE; 
\} else if(\$stage == "test") \{ 
  if(ironclaw::roll(\$roller: \$char, \$skills: (\{\$favorite_weapon\}), \$bonus: \$char."trait:agility") \< ironclaw::roll(\$bonus: 24)) return FALSE; 
  return TRUE; 
\} else if(\$stage == "pass") \{ 
  \$enemy_pirate_tokens -= 5; 
  return capitalize(Describe(\$char))+" spots a "+\$thug+", who is cut off from his "+oneof("companions", "gang")+", and "+oneof("charges", "attacks", "takes advantage of the opportunity")+". "+capitalize(Describe(\$char))+" "+oneof("guts him with ease", "slices - quickly and efficiently, and kills the thug", "strikes true and hard, knocking the "+\$thug+" out of the fight")+".\<br/\>"; 
\} else if(\$stage == "fail") \{ 
  response = ::run_incident(\$incidents: (\{ "rescued", "healed", "healing", "defending" \})); 
  if(response) \{ 
    output = capitalize(Describe(\$char))+" "+oneof("pushes into the thick of things", "chases after a "+\$thug, "presses forward, fighting with a "+\$thug)+oneof(", before realizing "+\$char."base:pronoun"+" is cut off from "+\$char."base:possessive"+" allies", ", unfortunately the ebb and flow of the fight leaves "+\$char."base:objective"+" stranded amongst enemies")+". "+response; 
    return output; 
  \} 
  output = capitalize(Describe(\$char))+" charges into the thick of battle where, surrounded by enemies, a "+\$thug+" "+oneof("cuts "+\$char."base:objective"+" down with", "strikes "+\$char."base:objective"+" with", "lands a blow with")+" a "+oneof("cutlass", "dagger", "dirk", "knife", "sword")+oneof(". The weapon pierces", ", leaving a nasty cut across")+" "+Describe(\$char)+"'s "+oneof("stomach", "shoulder", "face", "neck", "arm", "gut", "chest")+". "+capitalize(Describe(\$char))+" falls to the floor, unconscious.\<br/\>\<font color='red'\>["+capitalize(Describe(\$char))+" has been removed from the combat]\</font\>\<BR/\>"; 
  ::remove_pc(); 
  return output; 
\} 
return "nothing";
      </Core:Property>
      <Core:Property property="merry:lib:attacked_by_cutthroat">
         X[M] /* an incident during the event */    
string output, response;    
if(!\$stage) error("No \$stage data passed for incident.");    
if(\$stage == "conditions") \{    
  if(\$role != "dueler") return FALSE;    
  return TRUE;    
\} else if(\$stage == "test") \{    
  if(ironclaw::roll(\$roller: \$char, \$skills: (\{"combat:dodge", "career:spy", "career:bodyguard", "mental:observation"\}), \$bonus: \$char."trait:mind") \< ironclaw::roll(\$bonus: 24)) return FALSE;    
  \$thug= "shady figure";    
  return TRUE;    
\} else if(\$stage == "pass") \{    
  \$enemy_pirate_tokens -= 10;    
  \$thug= "shady figure";    
  return oneof("Engaged in the swirling combat, "+capitalize(Describe(\$char))+" loses "+\$char."base:objective"+"self to the heat of battle ignoring the shady figure that sneaks in the shadow.", "Evasively slipping past other combatants, the shady figure manages to get close to the back of "+capitalize(Describe(\$char))+".")+" "+oneof("In the very last moment "+capitalize(Describe(\$char))+" notices the attack and manages  to fend off the attack for now.", "A loud warning yell results in a lot of ducking and weaving, but in the end "+capitalize(Describe(\$char))+" manages to thwart all attempts to do any bodily harm.", capitalize(Describe(\$char))+" just barely manages to avoid any serious injury at the hands of the cut throat.")+"\<br/\>";    
\} else if(\$stage == "fail") \{    
  \$thug= "shady figure";    
  response = ::run_incident(\$incidents: (\{ "rescued", "healing-poison", "defending" \}));    
  if(response) \{    
    output = oneof("Engaged in the swirling combat, "+capitalize(Describe(\$char))+" loses "+\$char."base:objective"+"self to the heat of battle ignoring the shady figure that sneaks in the shadow.", "Evasively slipping past other combatants, the shady figure manages to get close to the back of "+capitalize(Describe(\$char))+".")+" The shady figure "+oneof("cuts "+\$char."base:objective"+" down with", "strikes "+\$char."base:objective"+" with", "lands a blow with")+" his stiletto"+oneof(". The weapon pierces", ", leaving a nasty wound deep in")+" "+Describe(\$char)+"'s "+oneof("stomach", "shoulder", "arm", "leg", "arm", "neck", "chest")+"."+response;    
    return output;    
  \}    
  output = oneof("Engaged in the swirling combat, "+capitalize(Describe(\$char))+" loses "+\$char."base:objective"+"self to the heat of battle ignoring the shady figure that sneaks in the shadow.", "Evasively slipping past other combatants, the shady figure manages to get close to the back of "+capitalize(Describe(\$char))+".")+" The shady figurine easily cuts down "+capitalize(Describe(\$char))+".\<br/\>\<font color='red'\>["+capitalize(Describe(\$char))+" has been removed from the combat]\</font\>\<BR/\>";    
  ::remove_pc();    
  return output;    
\}    
return "nothing";
      </Core:Property>
      <Core:Property property="merry:lib:defend">
         X[M] /* an incident during the event */ 
string output, response; 
if(!\$stage) error("No \$stage data passed for incident."); 
if(\$stage == "conditions") \{ 
  return TRUE; 
\} else if(\$stage == "test") \{ 
  if(ironclaw::roll(\$roller: \$char, \$skills: (\{"combat:dodge"\}), \$bonus: \$char."trait:speed") \< ironclaw::roll(\$bonus: 24)) return FALSE; 
  return TRUE; 
\} else if(\$stage == "pass") \{ 
  \$enemy_pirate_tokens -= 5; 
  return "A "+\$thug+" charges at "+Describe(\$char)+", "+oneof("swinging a", "slashing a", "with a raised")+" "+oneof("cutlass", "dagger", "dirk", "knife", "sword")+". "+capitalize(Describe(\$char))+" "+oneof("manages to keep away", "avoids the attacker, until an ally can cut him down", "sidesteps the attack, then watches in amusement as the "+\$thug+" continues charging, and runs into the wall")+".\<br/\>"; 
\} else if(\$stage == "fail") \{ 
  response = ::run_incident(\$incidents: (\{ "rescued", "healed", "healing", "defending" \})); 
  if(response) \{ 
    output = "A "+\$thug+" charges at "+Describe(\$char)+", "+oneof("swinging a", "slashing a", "with a raised")+" "+oneof("cutlass", "dagger", "dirk", "knife", "sword")+", and backs "+capitalize(Describe(\$char))+" against the wall. "+response; 
    return output; 
  \} 
  output = "A "+\$thug+" charges at "+Describe(\$char)+", "+oneof("swinging a", "slashing a", "with a raised")+" "+oneof("cutlass", "dagger", "dirk", "knife", "sword")+", and "+oneof("slices", "cuts", "stabs")+" into "+Describe(\$char)+"'s "+oneof("stomach", "shoulder", "face", "leg", "arm", "gut", "chest")+". "+capitalize(Describe(\$char))+" runs into the wall and passes out.\<br/\>\<font color='red'\>["+capitalize(Describe(\$char))+" has been removed from the combat]\</font\>\<BR/\>"; 
  ::remove_pc(); 
  return output; 
\} 
return "nothing";
      </Core:Property>
      <Core:Property property="merry:lib:defending">
         X[M] /* an incident during the event */ 
string output, response; 
if(!\$stage) error("No \$stage data passed for incident."); 
if(\$stage == "conditions") \{ 
  /* there needs to be a fighter in the group */ 
  \$list = copy(\$battle.pcs); 
  \$newchar = nil; 
  while(!\$newchar \&\& sizeof(\$list)) \{ 
    \$i = random(sizeof(\$list)); 
    if(\$list[\$i][1] == "fighter" \&\& \$list[\$i][0] != \$char) \{ 
      \$newchar = \$list[\$i][0]; 
      \$newchar_favorite_weapon = \$list[\$i][2]; 
    \} else \{ 
      \$list -= (\{ \$list[\$i] \}); 
    \} 
  \} 
  if(\$newchar) return TRUE; 
  return FALSE; 
\} else if(\$stage == "test") \{ 
  if(ironclaw::roll(\$roller: \$newchar, \$skills: (\{\$newchar_favorite_weapon\}), \$bonus: \$char."trait:body") \< ironclaw::roll(\$bonus: 24)) return FALSE; 
  return TRUE; 
\} else if(\$stage == "pass") \{ 
  return " "+oneof(capitalize(Describe(\$newchar))+" leaps out of the crowd, to grapple with the "+\$thug+".", capitalize(Describe(\$newchar))+" is nearby and, back to back with "+Describe(\$char)+", they fight their way free.", "The "+\$thug+" "+oneof("smiles", "grins", "leers")+" nastily, when "+Describe(\$newchar)+" hits him from "+oneof("behind", "the side")+".")+"\<br/\>"; 
\} else if(\$stage == "fail") \{ 
  output = " "+capitalize(Describe(\$newchar))+" "+oneof("tries to help, but can't make it there in time.", "attacks the "+\$thug+", but doesn't take him down.", "rushes to help, but is cut off by enemies.")+" The "+\$thug+" "+oneof("slices", "slashes", "scythes")+" a "+oneof("cutlass", "dagger", "dirk", "knife", "sword")+" across "+Describe(\$char)+"'s "+oneof("stomach", "shoulder", "face", "leg", "arm", "gut", "chest")+" before moving off in the press of battle.\<br/\>\<font color='red'\>["+capitalize(Describe(\$char))+" has been removed from the combat]\</font\>\<BR/\>"; 
  response = ::run_incident(\$incidents: \$incidents); 
  if(!response) \{ 
   ::remove_pc(); 
   return output; 
  \} else \{ 
   return response; 
  \} 
\} 
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:describe_thug">
         X[M] return oneof("sneaky", "evasive", "villanous", "swift", "devious", "shifty", "wiry", "tough looking", "ugly",  "nasty", "vicious", "one-eyed", "dusky", "crooked", "", "", "", "")+" "+oneof("thug", "gangster", "mercenary", "bully-boy", "cut-throat", "scoundrel") +oneof("", "", "", "", "", "", "holding a garotte", " wearing a mask", " with sewn lips", " with a nasty glint in his eye", " clad in dark", " with a toothpick in his mouth");
      </Core:Property>
      <Core:Property property="merry:lib:fight_cutthroat">
         X[M] /* an incident during the event */     
string output, response;     
if(!\$stage) error("No \$stage data passed for incident.");     
if(\$stage == "conditions") \{     
  if(\$role != "dueler") return FALSE;     
  return TRUE;     
\} else if(\$stage == "test") \{     
  if(ironclaw::roll(\$roller: \$char, \$skills: (\{\$favorite_weapon\}), \$bonus: \$char."trait:agility") \< ironclaw::roll(\$bonus: 24)) return FALSE;     
  \$thug= "cut throat";     
  return TRUE;     
\} else if(\$stage == "pass") \{     
  \$enemy_pirate_tokens -= 10;     
  \$thug= "cut throat";     
  return oneof(capitalize(Describe(\$char))+" sees an opening, and charges towards one of the cut throats.", "Pushing through the battle, "+capitalize(Describe(\$char))+" makes their way to the agile foe.")+" "+oneof("There is the flash of weapons, and the dark figure quickly retreats.", "The two combatants fight viciously , until "+capitalize(Describe(\$char))+" manages to stab the cut throat through the "+oneof("shoulder", "leg", "thigh", "forearm", "hand")+".", "The cut throat stabs with his dagger, which "+capitalize(Describe(\$char))+" ducks, before rising up and smashing the cut throat's jaw with a powerful uppercut.")+"\<br/\>";     
\} else if(\$stage == "fail") \{     
  \$thug= "cut throat";     
  response = ::run_incident(\$incidents: (\{ "rescued", "healing-poison", "defending" \}));     
  if(response) \{     
    output = oneof(capitalize(Describe(\$char))+" sees an opening, and charges towards a cut throat.", "Pushing through the battle, "+capitalize(Describe(\$char))+" makes their way to one of the cut throat.")+" The cut throat"+oneof("cuts "+\$char."base:objective"+" down with", "strikes "+\$char."base:objective"+" with", "slices with")+" his dagger"+oneof(". The weapon pierces", ", leaving a nasty cut across")+" "+Describe(\$char)+"'s "+oneof("stomach", "shoulder", "face", "leg", "arm", "gut", "chest")+", an a sudden twist of pain comes in response to the weapon's poison."+response;     
    return output;     
  \}     
  output = oneof(capitalize(Describe(\$char))+" sees an opening, and charges towards an cut throat.", "Pushing through the battle, "+capitalize(Describe(\$char))+" makes their way to a swiftly moving cut throat.")+" The cut throat easily cuts down "+capitalize(Describe(\$char))+".\<br/\>\<font color='red'\>["+capitalize(Describe(\$char))+" has been removed from the combat]\</font\>\<BR/\>";     
  ::remove_pc();     
  return output;     
\}     
return "nothing";
      </Core:Property>
      <Core:Property property="merry:lib:healed">
         X[M] /* an incident during the event */ 
string output, response; 
if(!\$stage) error("No \$stage data passed for incident."); 
if(\$stage == "conditions") \{ 
  if(!\$friendly_healer_tokens \|\| \$friendly_healer_tokens \< 20) return FALSE; 
  return TRUE; 
\} else if(\$stage == "test") \{ 
  /* always passes */ 
  return TRUE; 
\} else if(\$stage == "pass") \{ 
  \$friendly_healer_tokens -= 2; 
  return " The "+\$thug+" "+oneof("slices", "slashes", "scythes")+" a "+oneof("cutlass", "dagger", "dirk", "knife", "sword")+" across "+Describe(\$char)+"'s "+oneof("stomach", "shoulder", "face", "leg", "arm", "gut", "chest")+" before moving off in the press of battle. A passing "+\$ally+" spots the injury, and manages to apply a hasty field dressing, allowing "+Describe(\$char)+" to rejoin the fight.\<br/\>"; 
\} else if(\$stage == "fail") \{ 
  /* always passes */ 
\} 
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:healing">
         X[M] /* an incident during the event */ 
string output, response; 
if(!\$stage) error("No \$stage data passed for incident."); 
if(\$stage == "conditions") \{ 
  /* there needs to be a healer in the group */ 
  \$list = copy(\$battle.pcs); 
  \$newchar = nil; 
  while(!\$newchar \&\& sizeof(\$list)) \{ 
    \$i = random(sizeof(\$list)); 
    if(\$list[\$i][1] == "healer" \&\& \$list[\$i][0] != \$char) \{ 
      \$newchar = \$list[\$i][0]; 
    \} else \{ 
      \$list -= (\{ \$list[\$i] \}); 
    \} 
  \} 
  if(\$newchar) return TRUE; 
  return FALSE; 
\} else if(\$stage == "test") \{ 
  if(ironclaw::roll(\$roller: \$newchar, \$skills: (\{"mental:first-aid"\}), \$bonus: \$char."trait:mind") \< ironclaw::roll(\$bonus: 24)) return FALSE; 
  return TRUE; 
\} else if(\$stage == "pass") \{ 
  return " The "+\$thug+" "+oneof("slices", "slashes", "scythes")+" a "+oneof("cutlass", "dagger", "dirk", "knife", "sword")+" across "+Describe(\$char)+"'s "+oneof("stomach", "shoulder", "face", "leg", "arm", "gut", "chest")+" before moving off in the press of battle. "+capitalize(Describe(\$newchar))+" spots the injury, and manages to apply a hasty field dressing, allowing "+Describe(\$char)+" to rejoin the fight.\<br/\>"; 
\} else if(\$stage == "fail") \{ 
  output = " The "+\$thug+" "+oneof("slices", "slashes", "scythes")+" a "+oneof("cutlass", "dagger", "dirk", "knife", "sword")+" across "+Describe(\$char)+"'s "+oneof("stomach", "shoulder", "face", "leg", "arm", "gut", "chest")+" before moving off in the press of battle. "+capitalize(Describe(\$newchar))+oneof(" spots the injury, and dashes toward "+Describe(\$char)+", but gets lost in the fury of the battle, leaving the "+oneof("wound", "gouge", "injury", "slice")+" "+oneof ("unmended", "bleeding"), " rushes over, and hastily bandages the "+oneof("wound", "gouge", "injury", "slice")+", but not before "+Describe(\$char)+" passes out")+".\<br/\>\<font color='red'\>["+capitalize(Describe(\$char))+" has been removed from the combat]\</font\>\<BR/\>"; 
  response = ::run_incident(\$incidents: \$incidents); 
  if(!response) \{ 
   ::remove_pc(); 
   return output; 
  \} else \{ 
   return response; 
  \} 
 
\} 
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:remove_pc">
         X[M] /* remove a PC from the list */ 
int i; 
 
if(!this.pcs) return TRUE; 
if(!\$char) return FALSE; 
for(i=0;i\<sizeof(this.pcs);i++) \{ 
  if(this.pcs[i][0] == \$char) \{ 
    \$tmp = this.pcs[i]; 
    this.pcs -= (\{ \$tmp \}); 
  \} 
\} 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:rescued">
         X[M] /* an incident during the event */ 
string output, response; 
if(!\$stage) error("No \$stage data passed for incident."); 
if(\$stage == "conditions") \{ 
  if(!\$friendly_soldier_tokens \|\| \$friendly_soldier_tokens \< 10) return FALSE; 
  return TRUE; 
\} else if(\$stage == "test") \{ 
  /* always passes */ 
  return TRUE; 
\} else if(\$stage == "pass") \{ 
  \$friendly_soldier_tokens -= 10; 
  return " Before the "+\$thug+" can "+oneof("do any serious damage", "attack", "take advantage of the situation")+", a "+\$ally+" "+oneof("arrives, and drives the scoundrel away", "rushes past, stabbing the thug on the way", "intervenes, dueling the thug in "+Describe(\$char)+"'s place", "lands a well-placed hit on the back of the thug's head, rendering him unconscious")+".\<br/\>"; 
\} else if(\$stage == "fail") \{ 
  /* always passes */ 
\} 
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:run_incident">
         X[M] /* run a second incident, following the first */ 
string incident; 
int i; 
 
if(!\$incidents \|\| !sizeof(Arr(\$incidents))) return nil; 
\$incidents = Arr(\$incidents); 
 
while(sizeof(\$incidents)) \{ 
  incident = \$incidents[random(sizeof(\$incidents))]; 
  \$incidents -= (\{ incident \}); 
  if(Call(\$battle, incident, \$stage: "conditions")) \{ 
    if(Call(\$battle, incident, \$stage: "test")) \{ 
      return Call(\$battle, incident, \$stage: "pass"); 
    \} else \{ 
      return Call(\$battle, incident, \$stage: "fail"); 
    \} 
  \} 
\} 
return nil;
      </Core:Property>
      <Core:Property property="merry:lib:shoulderbarge">
         X[M] /* an incident during the event */ 
string output, response; 
if(!\$stage) error("No \$stage data passed for incident."); 
if(\$stage == "conditions") \{ 
  if(\$role != "healer") return TRUE; 
  return FALSE; 
\} else if(\$stage == "test") \{ 
  if(ironclaw::roll(\$roller: \$char, \$skills: (\{"combat:armor:rating" \}), \$bonus: \$char."trait:body") \< ironclaw::roll(\$bonus: 24)) return FALSE; 
  return TRUE; 
\} else if(\$stage == "pass") \{ 
  \$enemy_pirate_tokens -= 5; 
  return oneof("Lowering "+\$char."base:possessive"+" shoulder, "+capitalize(Describe(\$char))+" barrels into a group of thugs.", "Opportunely noting a distracted gang of thugs, "+capitalize(Describe(\$char))+" lowers "+\$char."base:possessive"+" shoulder and charge into them at full bore.")+" "+oneof("The thugs are sent reeling in all directions.", "A handful of the thugs are knocked from their feet, looking quite dazed.", "They scatter like leaves before a powerful wind.")+"\<br/\>"; 
\} else if(\$stage == "fail") \{ 
  return ::run_incident(\$incidents: this."event:start"["incidents"]); 
\} 
return "nothing";
      </Core:Property>
      <Core:Property property="merry:lib:sneak_attack">
         X[M] /* an incident during the event */ 
string output, response; 
if(!\$stage) error("No \$stage data passed for incident."); 
if(\$stage == "conditions") \{ 
  if(\$role != "healer") return TRUE; 
  return FALSE; 
\} else if(\$stage == "test") \{ 
  if(ironclaw::roll(\$roller: \$char, \$skills: (\{"thief:stealth", "combat:sneakattack", "career:buccaneer", "career:sniper" \}), \$bonus: \$char."trait:speed") \< ironclaw::roll(\$bonus: 24)) return FALSE; 
  return TRUE; 
\} else if(\$stage == "pass") \{ 
  \$enemy_pirate_tokens -= 5; 
  return capitalize(Describe(\$char))+" sneak attacks a "+\$thug+".\<br/\>"; 
\} else if(\$stage == "fail") \{ 
  response = ::run_incident(\$incidents: (\{ "rescued", "healed", "healing", "defending" \})); 
  if(response) \{ 
    output = capitalize(Describe(\$char))+" fails to sneak attack a "+\$thug+". "+response; 
    return output; 
  \} 
  output = capitalize(Describe(\$char))+" fails to sneak attack a "+\$thug+", who knocks him out.\<BR/\>\<font color='red'\>["+capitalize(Describe(\$char))+" has been removed from the combat]\</font\>\<BR/\>"; 
  ::remove_pc(); 
  return output; 
\} 
return "nothing";
      </Core:Property>
      <Core:Property property="pcs">
         (\{ (\{ \<Chatters:IC:se:servita\>, "dueler", "combat:percision" \}), (\{ \<Chatters:Backup:IC:ac:achlys0\>, "healer", "combat:dagger" \}), (\{ \<Chatters:Backup:AE:su:suavis0\>, "healer", "combat:dagger" \}), (\{ \<Chatters:Backup:IC:cu:cullan0\>, "dueler", "combat:fencing" \}), (\{ \<Chatters:IC:ko:koz\>, "dueler", "combat:unarmed" \}), (\{ nil, "dueler", "combat:dagger" \}), (\{ \<Chatters:Backup:IC:il:ilo0\>, "figher", "combat:dagger" \}), (\{ \<Chatters:AE:ek:ekalah\>, "fighter", "combat:sword" \}), (\{ \<Chatters:IC:se:seeley\>, "fighter", "combat:dagger" \}) \})
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1219457334, "tonyd", "E", 1219457357, "tonyd", "P", 1219457392, "tonyd", "E", 1219457426, "tonyd", "E", 1219457607, "tonyd", "P", 1219457640, "tonyd", "P", 1219458016, "tonyd", "P", 1219458072, "tonyd", "P", 1219458100, "tonyd", "P", 1219458154, "tonyd", "P", 1219458172, "tonyd", "P", 1219458190, "tonyd", "P", 1219458262, "tonyd", "P", 1219458277, "tonyd", "P", 1219458311, "tonyd", "P", 1219458514, "tonyd", "P", 1219458522, "tonyd", "P", 1219458529, "tonyd", "P", 1219458583, "tonyd", "P", 1219458591, "tonyd", "P", 1219458600, "tonyd", "E", 1219458629, "tonyd", "P", 1219458649, "tonyd", "P", 1219458787, "tonyd", "P", 1219458792, "tonyd", "P", 1219458836, "tonyd", "P", 1219459013, "tonyd", "P", 1219459073, "tonyd", "P", 1219459195, "tonyd", "E", 1219459460, "tonyd", "P", 1219459739, "tonyd", "P", 1219459881, "tonyd", "P", 1219459895, "tonyd", "E", 1219459916, "tonyd", "E", 1219460013, "tonyd", "E", 1219460080, "tonyd", "E", 1232532120, "tonyd", "P", 1232532255, "tonyd", "P", 1232532299, "tonyd", "P", 1232532370, "tonyd", "P", 1232532443, "tonyd", "P", 1232532493, "tonyd", "P", 1232532523, "tonyd", "P", 1236308576, "tonyd", "P", 1236308759, "tonyd", "P", 1236309421, "tonyd", "P", 1236309525, "tonyd", "P", 1236309658, "tonyd", "P", 1236309725, "tonyd", "P", 1236310516, "tonyd", "P", 1236310602, "tonyd", "P", 1236310633, "tonyd", "P", 1236310666, "tonyd", "P", 1236310705, "tonyd", "P", 1236310730, "tonyd", "P", 1236310899, "tonyd", "P", 1236310950, "tonyd", "P", 1236311366, "tonyd", "E", 1236311612, "tonyd", "P", 1236311871, "tonyd", "P", 1236311923, "tonyd", "P", 1236311998, "tonyd", "E", 1236312030, "tonyd", "P", 1236312046, "tonyd", "P", 1236312393, "tonyd", "P", 1236312549, "tonyd", "P", 1236313241, "tonyd", "P", 1236320593, "tonyd", "P", 1236320903, "tonyd", "P", 1236321206, "tonyd", "P", 1236321215, "tonyd", "P", 1236321322, "tonyd", "P", 1236321423, "tonyd", "P", 1236321499, "tonyd", "P", 1236321561, "tonyd", "P", 1236321630, "tonyd", "P", 1236321713, "tonyd", "P", 1236321733, "tonyd", "P", 1236322038, "tonyd", "P", 1236322183, "tonyd", "P", 1236322252, "tonyd", "P", 1236322717, "tonyd", "P", 1236322847, "tonyd", "P", 1236322884, "tonyd", "P", 1236323215, "tonyd", "P", 1236323228, "tonyd", "P", 1236323246, "tonyd", "P", 1236323281, "tonyd", "P", 1236323299, "tonyd", "P", 1236323302, "tonyd", "P", 1236469176, "balkaar", "E", 1236481338, "rastalabor", "E", 1281129022, "rastalabor", "X", 1281129601, "rastalabor", "X", 1281129750, "rastalabor", "X", 1281213999, "balkaar", "E", 1281214147, "rastalabor", "X", 1281214643, "balkaar", "E", 1281214725, "rastalabor", "X", 1281214805, "rastalabor", "X", 1281214826, "rastalabor", "X", 1281214857, "balkaar", "E", 1281214973, "rastalabor", "X", 1281215109, "rastalabor", "X", 1281215259, "balkaar", "E", 1281215370, "rastalabor", "X", 1281215393, "rastalabor", "X", 1281215412, "rastalabor", "X", 1281216001, "balkaar", "E", 1281216103, "rastalabor", "E", 1281216111, "rastalabor", "E", 1281216117, "rastalabor", "E", 1281216157, "rastalabor", "X", 1281216169, "rastalabor", "E", 1281216189, "rastalabor", "X", 1281216311, "balkaar", "R", 1281216672, "rastalabor", "X", 1281216732, "rastalabor", "X", 1334500497, "meandmine", "E", 1334500760, "meandmine", "E", 1334500767, "meandmine", "E", 1334500998, "meandmine", "E", 1334501127, "meandmine", "E", 1334501488, "meandmine", "E", 1334501499, "meandmine", "E", 1334501818, "meandmine", "E", 1334501980, "meandmine", "E", 1334501988, "meandmine", "E", 1334502040, "meandmine", "E", 1334502097, "meandmine", "E", 1334502149, "meandmine", "E", 1334502194, "meandmine", "E", 1334502252, "meandmine", "E", 1334502603, "meandmine", "E", 1334502619, "meandmine", "E", 1334502767, "meandmine", "E", 1334502789, "meandmine", "E", 1334502812, "meandmine", "E", 1334502856, "meandmine", "E", 1334502878, "meandmine", "E", 1334503105, "meandmine", "E", 1334503311, "meandmine", "E", 1334503510, "meandmine", "E", 1334503583, "meandmine", "E", 1334503634, "meandmine", "E", 1334513995, "meandmine", "E", 1334514024, "meandmine", "E", 1334514054, "meandmine", "E", 1334514055, "meandmine", "E", 1334514079, "meandmine", "E", 1334514136, "meandmine", "E", 1334514170, "meandmine", "E", 1334514200, "meandmine", "E", 1334514218, "meandmine", "E", 1334514967, "meandmine", "E", 1334515928, "meandmine", "R", 1334516055, "meandmine", "E", 1334516239, "meandmine", "E", 1334516246, "meandmine", "E", 1334516256, "meandmine", "E", 1334516333, "meandmine", "E", 1334516353, "meandmine", "E", 1334516383, "meandmine", "E", 1334516469, "meandmine", "E", 1334516513, "meandmine", "E" \})
      </Core:Property>
    </Core:PCProperties>
    <Notes:Notes/>
  </Core:PropertyContainer>
</object>
