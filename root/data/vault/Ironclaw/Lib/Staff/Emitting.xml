<object clone="/obj/properties" owner="SkotOS">
  <Core:PropertyContainer>
    <Ur:UrObject/>
    <Core:PCProperties>
      <Core:Property property="locations">
         ([ "backstage":"Ironclaw:Backstage:Indoors:House:LivingRoom", "dock":"Ironclaw:DockTown:UrDock", "dockin":"Ironclaw:DockTown:UrDockInside", "dockout":"Ironclaw:DockTown:UrDockOutside", "newnorth":"Ironclaw:NewTown:UrNewNorth", "newnorthin":"Ironclaw:NewTown:UrNewNorthInside", "newnorthout":"Ironclaw:NewTown:UrNewNorthOutside", "newsouth":"Ironclaw:NewTown:UrNewSouth", "newsouthin":"Ironclaw:NewTown:UrNewSouthInside", "newsouthout":"Ironclaw:NewTown:UrNewSouthOutside", "old":"Ironclaw:OldTown:UrOld", "oldin":"Ironclaw:OldTown:UrOldInside", "oldout":"Ironclaw:OldTown:UrOldOutside", "world":"Ironclaw:World:UrWorld", "worldin":"Ironclaw:World:UrWorldInside", "worldout":"Ironclaw:World:UrWorldOutside" ])
      </Core:Property>
      <Core:Property property="merry:lib:emitting">
         X[M] /*  
 * D=Emit in all areas based on parameters set.  
 */  
  
/* making changes START */  
  
/* \$arg = dump_value( args );  
EmitTo(\$actor, \$arg); */ 
  
/* create help files */  
\$h1 = "Syntax: +emitting [area or ironclaw:woe:name] '[delay] message'\\n\\n";  
\$h2 = "Example: +emitting dock 'You sense a sudden draft from the fire.'\\n\\n";  
\$h3 = "Or: +emitting new '5.5 You feel heat from the fireplace.'\\n\\n";  
\$h4 = "The latter one (with 5.5) would be emitted 5 and one half second after the +emitting command was issued. This is in seconds and can basically go as high as you want (days, if needed).\\n\\n";  
\$h5 = "For a complete list of areas available, type +emitting list.";  
\$help = \$h1+\$h2+\$h3+\$h4+\$h5;  
\$badloc = "No location was found matching your parameters. \\n Type +emitting help for more information.";  
\$noemit = "No text was provide to emit. \\n Type +emitting help for more information.";  
  
/* check for lack of words */  
if(!\$(dob:words)) \{  
EmitTo(\$actor, \$help);  
return FALSE;  
\}  
  
/* Check if they want help */  
if(\$(dob:words)[0] == "help") \{  
EmitTo(\$actor, \$help);  
return FALSE;  
\}  
  
/* No matter what, we need the list from here on out */  
\$list = (\{ \});  
\$list += map_indices(\$this.locations);  
  
/* check if they want the list */  
if(\$(dob:words)[0] == "list") \{  
\$list = implode(\$list, "\\n");  
EmitTo(\$actor, "You may use a woename or a name from the list below: \\n" + \$list);  
return FALSE;  
\}  
  
/* check if they used a name on the list */  
\$name = nil;  
  
if(member(\$(dob:words)[0], \$list)) \$name = \$(dob:words)[0];  
  
/* if we have a name from the list, match it with the woename from the map */  
if(\$name) \$obj = Obj(\$this.locations[\$name]);  
if(!\$obj) EmitTo(\$actor, "No");  
  
/* here we check if words are a woename if no name previously found */  
if(!\$obj) \{  
    \$bah = explode(\$(dob:words)[0], ":"); 
    \$bah = implode(\$bah, " "); 
    \$bah = proper(\$bah); 
    \$bah = explode(\$bah, " "); 
    \$bah = implode(\$bah, ":"); 
    if(Obj(\$bah)) \$obj = Obj(\$bah);  
\}  
  
/* here we return false with help files if no object found */  
if(!\$obj) \{  
EmitTo(\$actor, \$badloc);  
return FALSE;  
\}  
  
/* making changes END */  
  
if(!\$(raw-evoke))  
   \{  
   EmitTo(\$actor, \$noemit);  
   return FALSE;  
   \}  
\$words = explode(\$(raw-evoke), " ");  
  
if (!\$words) \{  
        EmitTo(\$actor, \$noemit);  
        return FALSE;  
\}  
  
if (typeof(ascii_to_mixed(\$words[0])) \< 3 \&\& \$words[0] != "nil") \{  
        \$del = Flt(\$words[0]);  
        if (\$del \> 60.0) \{  
                \$del = (int)\$del;  
        \}  
        \$words = \$words[1..];  
\}  
  
\$msg = implode(\$words, " ");  
  
if (\$del) \{  
        EmitTo(\$actor,  
               "Emitting '" + \$msg + "' to " + Describe(\$obj) + " in " + Str(\$del) + " seconds.");  
        \$delay(\$del, FALSE, "112a");  
\}  
  
EmitTo(\$actor,  
       "Emitting '" + \$msg + "'" + " to " + Describe(\$obj));  
  
::send_emit(\$target: \$obj, \$message: \$msg);  
return TRUE;  
  
EmitIn(\$obj, \$msg);  
if(\$obj."core:ur:firstchild") \{  
    object first, curr;  
    first = \$obj."core:ur:firstchild";  
    curr = first;  
    do \{  
        EmitIn(curr, \$msg);  
        curr = curr."core:ur:sibling:next";  
    \} while (curr != first);  
\}
      </Core:Property>
      <Core:Property property="merry:lib:send_emit">
         X[M] /* Send an emit of \$message to the \$target object, and all children of the \$target object */   
if(!\$target) return TRUE;   
if(!\$message) return TRUE;   
   
/* emit to the target object */   
EmitIn(\$target, \$message);   
   
/* and now call this function for each of the children of this object */   
/* (and then calling this function will call the function again for the children of those children, and so on */   
\{   
  object first, current;   
  first = \$target."core:ur:firstchild";   
  current = first;   
  if(first) \{   
   do \{   
     ::send_emit(\$target: current, \$message: \$message);   
     current = current."core:ur:sibling:next";   
   \} while (first != current);   
  \}   
\}   
return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1306106924, "tunk_bodin", "X", 1306106964, "tunk_bodin", "P", 1306106993, "tunk_bodin", "P", 1306107183, "tunk_bodin", "P", 1306107198, "tunk_bodin", "P", 1306107276, "tunk_bodin", "P", 1306107398, "tunk_bodin", "P", 1306107770, "tunk_bodin", "P", 1306108654, "tunk_bodin", "P", 1306108918, "tunk_bodin", "P", 1306108947, "tunk_bodin", "P", 1306109310, "tunk_bodin", "P", 1306109590, "tunk_bodin", "P", 1306109753, "tunk_bodin", "P", 1306109799, "tunk_bodin", "P", 1306109976, "tunk_bodin", "P", 1306110053, "tunk_bodin", "P", 1306110099, "tunk_bodin", "P", 1306110600, "tonyd", "P", 1306111475, "tunk_bodin", "X", 1306111715, "tunk_bodin", "X", 1306111812, "tunk_bodin", "X", 1306112031, "tunk_bodin", "X" \})
      </Core:Property>
    </Core:PCProperties>
    <Notes:Notes/>
  </Core:PropertyContainer>
</object>
