<object clone="/obj/properties" owner="SkotOS">
  <Core:PropertyContainer>
    <Ur:UrObject urobject="OBJ(Ironclaw:Lib:Combat:New:hitdescription)"/>
    <Core:PCProperties>
      <Core:Property property="characters">
         (\{ \<Chatters:IC:ry:ryan\>, \<Chatters:IC:sw:swan\>, \<Chatters:Backup:IC:ma:madalina0\>, \<Chatters:Backup:AE:co:cosmo0\>, \<Chatters:IC:gu:guinness\>, \<Chatters:AE:je:jessica\>, \<Chatters:AE:tr:trevyn\>, nil, nil, \<Chatters:IC:la:larsen\>, \<Chatters:AE:ki:kino\>, nil, \<Chatters:AE:ki:kilana\>, nil, nil, nil, \<Chatters:AE:sa:sarira\>, nil, \<Chatters:AE:gw:gwydion\>, \<Chatters:AE:wa:waylon\>, \<Chatters:Backup:IC:ca:carrot0\>, nil, nil, nil, \<Chatters:Backup:IC:sa:sable0\>, nil, \<Chatters:IC:vi:virendra\>, \<Chatters:Backup:IC:xe:xena0\>, nil, \<Chatters:AE:mi:mirielle\>, \<Chatters:AE:ki:kirill\>, \<Chatters:IC:fr:franz\>, \<Chatters:AE:ti:tiamat\>, \<Chatters:AE:to:topsy\>, \<Chatters:AE:gr:graham\>, \<Chatters:AE:ig:ignacio\>, \<Chatters:AE:no:normand\>, \<Chatters:AE:do:dominic\>, \<Chatters:AE:ma:mattissimo\>, \<Chatters:AE:ca:cara\> \})
      </Core:Property>
      <Core:Property property="gimli:lib:get_wound">
         "E[G]\\n// Calculate wound information\\n// ::get_wound(\$target_detail:\$target_detail, \$wound:\\"bruise\\", \$level:\$damage, \$par:([]) );\\nstring wound_name, wound_adjective, wound_desc, wound_type, *complications;\\n\\n// What is the maximum wound level the victim can take?\\n\$level = ccombat::max_damage(\$damage: Int(\$level), \$victim: \$target_detail);\\n\\n// Default wound values, in case they don't get set\\nwound_name = dump_value(\$wound);\\nwound_adjective = \\"injured\\";\\nwound_desc = \\"has been injured\\";\\nwound_type = \\"injury\\";\\ncomplications = (\{ \});\\n\\n/* Now we set the right wound values for this particular wound */\\nif(\$wound == \\"bruise\\") \{\\n  wound_name = \\"bruise\\";\\n  wound_adjective = \\"bruised\\";\\n  wound_desc = \\"has been bruised\\";\\n  wound_type = \\"bruise\\";\\n  if(\$level \<= 0) \{\\n    wound_name = \\"slight bruise\\";\\n    wound_adjective = nil;\\n    wound_desc = \\"has a \\"+oneof(\\"slight\\", \\"light\\", \\"small\\")+\\" bruise\\";\\n  \} else if(\$level == 1) \{\\n    wound_name = \\"bruise\\";\\n    wound_desc = \\"has a bruise\\";\\n  \} else if(\$level \<= 2) \{\\n    wound_name = \\"bruise\\";\\n    wound_desc = \\"has a \\"+oneof(\\"nasty\\", \\"deep\\", \\"purple\\")+\\" bruise\\";\\n  \} else if(\$level \> 2) \{\\n    wound_name = \\"severe bruise\\";\\n    wound_desc = \\"has a \\"+oneof(\\"serious\\", \\"injurous\\", \\"blackened\\")+\\" bruise\\";\\n  \}\\n  \\n  // complications \|= (\{ \\"bleeding freely\\" \});\\n  // wound_desc += \\" that \\"+oneof(\\"is bleeding freely\\", \\"continually bleeds\\", \\"is oozing blood\\");\\n  \\n\} else if(\$wound == \\"cut\\") \{\\n  wound_name = \\"cut\\";\\n  wound_adjective = \\"cut\\";\\n  wound_desc = \\"has been cut\\";\\n  wound_type = \\"cut\\";\\n  if(!random(3)) complications \|= (\{ \\"infected\\" \});\\n  if(\$level \<= 0) \{\\n    wound_name = \\"shallow cut\\";\\n    wound_adjective = nil;\\n    wound_desc = \\"has a \\"+oneof(\\"slight\\", \\"light\\", \\"small\\", \\"shallow\\")+\\" \\"+oneof(\\"cut\\", \\"scrape\\");\\n  \} else if(\$level == 1) \{\\n    wound_name = \\"cut\\";\\n    wound_desc = \\"has a cut\\";\\n  \} else if(\$level \<= 2) \{\\n    wound_name = \\"cut\\";\\n    wound_desc = \\"has a \\"+oneof(\\"nasty\\", \\"deep\\", \\"painful\\")+\\" cut\\";\\n    if(!random(3)) \{\\n      complications \|= (\{ \\"bleeding freely\\" \});\\n      wound_desc += \\" that \\"+oneof(\\"is bleeding freely\\", \\"continually bleeds\\", \\"is oozing blood\\");\\n    \}\\n  \} else if(\$level \> 2) \{\\n    wound_name = \\"deep cut\\";\\n    wound_desc = \\"has a \\"+oneof(\\"serious\\", \\"injurous\\", \\"deep\\")+\\" \\"+oneof(\\"cut\\", \\"gash\\");\\n  \}\\n\} else if(\$wound == \\"welt\\") \{\\n  wound_name = \\"welt\\";\\n  wound_adjective = \\"welted\\";\\n  wound_desc = \\"has a welt\\";\\n  wound_type = \\"welt\\";\\n  if(\$level \<= 0) \{\\n    wound_name = \\"slight welt\\";\\n    wound_adjective = nil;\\n    wound_desc = \\"has a \\"+oneof(\\"slight\\", \\"light\\", \\"small\\")+\\" welt\\";\\n  \} else if(\$level == 1) \{\\n    wound_name = \\"welt\\";\\n    wound_desc = \\"has a welt\\";\\n  \} else if(\$level \<= 2) \{\\n    wound_name = \\"welt\\";\\n    wound_desc = \\"has a \\"+oneof(\\"nasty\\", \\"deep\\", \\"purple\\")+\\" welt\\";\\n  \} else if(\$level \> 2) \{\\n    wound_name = \\"severe welt\\";\\n    wound_desc = \\"has a \\"+oneof(\\"serious\\", \\"injurous\\", \\"blackened\\")+\\" welt\\";\\n  \}\\n\\n  // complications \|= (\{ \\"bleeding freely\\" \});\\n  // wound_desc += \\" that \\"+oneof(\\"is bleeding freely\\", \\"continually bleeds\\", \\"is oozing blood\\");\\n\} else \{\\n  error(\\"Unknown woundtype \\"+dump_value(\$wound));\\n\}\\n\\nreturn ([ \\"level\\":\$level, \\"name\\":wound_name, \\"adj\\":wound_adjective, \\"desc\\":wound_desc, \\"type\\":wound_type, \\"complications\\":complications ]);"
      </Core:Property>
      <Core:Property property="gimli:lib:give_wound">
         "E[G]\\n// Give a wound\\n// \$wound_info = ([ \\"adj\\":\\"bruised\\", \\"desc\\":\\"has a bruise\\", \\"level\\":1, \\"name\\":\\"bruise\\" ]);\\n// \$wound = ::give_wound(\$target_detail: \$target_detail, \$wound_info:\$wound, \$par: ([ ]));\\n\\nint i, level;\\nobject victim;\\nstring detail, tmp;\\nmixed *injuries;\\n\\nvictim = NRefOb(\$target_detail);\\ndetail = NRefDetail(\$target_detail);\\n\\n\$az = \$\{Chatters:IC:az:azrael\};\\nEmitTo(\$az, \\"Giving wound\\");\\nEmitTo(\$az, dump_value(\$wound_info));\\n\\nif(!\$combat_data)\\n  \$combat_data = ccombat::datafile(\$id: victim.combat[\\"id\\"]);\\n\\nlevel = Int(\$wound_info[\\"level\\"]);\\n\\n// Save the wound to the PC\\n\$wound_info[\\"woundtime\\"] = time();\\n\$injuries = Arr(Get(victim, \\"injuries:\\"+detail));\\n\$injuries += (\{ \$wound_info \});\\nSet(victim, \\"injuries:\\"+detail, \$injuries);\\n\\n// And check what adjective we should be using\\n\$adjs = (\{ \});\\nfor(i=0;i\<sizeof(\$injuries);i++) \{\\n  \$adjs \|= (\{ \$injuries[i][\\"adj\\"] \});\\n\}\\n\$adjs -= (\{ nil \});\\nif(sizeof(\$adjs)) Set(victim, \\"combat:injury:\\"+detail+\\":adjectives\\", implode(\$adjs, \\", \\"));\\n\\n// And set the new adjective for targetting\\n// Set(victim, \\"details:\\"+detail+\\":adjective:\\"+\$wound_info[\\"adj\\"], TRUE);\\nEmitTo(\$az, \\"Added \\"+dump_value(\$wound_info[\\"adj\\"]));\\n\\n// Has this level of wound led to any status changes?\\nif(level \>= 1 \&\& level \<= 4) \{\\n  // They are hurt\\n  // Being hurt lasts 2 weeks, unless first aid is applied\\n  if(!victim.\\"status:hurt\\") EmitTo(victim, TAG(\\"You have been HURT.\\", \\"imp\\"));\\n  ironclaw::set_prop(\$obj: victim, \$prop: \\"status:hurt\\", \$value: Int(victim.\\"status:hurt\\")+1, \$timer: 60*60*24*7*2);\\n\}\\nif(level \>= 3 \&\& level \<= 4) \{\\n  // They are shaken\\n  // Being shaken lasts 2 hours, unless rallied\\n  if(!victim.\\"status:shaken\\") \{\\n    EmitTo(victim, TAG(\\"You have become SHAKEN.\\", \\"imp\\"));\\n    tmp = oneof(Describe(victim)+\\" visibly pales.\\", Describe(victim)+\\"'s hand begins to tremble.\\");\\n    if(victim.\\"base:environment\\") EmitIn(victim.\\"base:environment\\", tmp, victim);\\n  \}\\n  ironclaw::set_prop(\$obj: victim, \$prop: \\"status:shaken\\", \$value: Int(victim.\\"status:shaken\\")+1, \$timer: 60*60*2);\\n  ironclaw::set_prop(\$obj: victim, \$prop: \\"status:recently_shaken\\", \$value: time(), \$timer: 60*60*2);\\n\}\\nif(level \>= 5) \{\\n  // They are injured\\n  if(FindMerry(victim, \\"lib\\", \\"take_combat_damage_dying\\"))\\n    if(!Call(victim, \\"take_combat_damage_dying\\", \$char: \$char)) return (\{ level, \$wound_info[\\"name\\"] \});\\n\\n  // Being injured lasts 2 weeks, unless first aid is applied\\n  // (we need better code than this longer-term, so we can have healers treat injuries)\\n  if(!victim.\\"status:injured\\") EmitTo(victim, TAG(\\"You have been INJURED.\\", \\"imp\\"));\\n  ironclaw::set_prop(\$obj: victim, \$prop: \\"status:injured\\", \$value: Int(victim.\\"status:injured\\")+1, \$timer: 60*60*24*2);\\n\}\\n\\nif(level \>= 9) \{\\n  // They are dead\\n  if(FindMerry(victim, \\"lib\\", \\"take_combat_damage_dying\\"))\\n    if(!Call(victim, \\"take_combat_damage_dying\\", \$char: \$char)) return (\{ level, \$wound_info[\\"name\\"] \});\\n\\n  EmitTo(\$az, \\"Killed \\"+dump_value(victim));\\n  // if(!victim.\\"status:dead\\") victim.\\"status:dead\\" = time();\\n  EmitTo(victim, TAG(\\"You are now DEAD.\\", \\"imp\\"));\\n  EmitTo(victim, \\"(Don't worry, death isn't permanent. After some time \\"+Describe(victim)+\\" will be resurrected. The amount of time before resurrection depends on what is happening in-character, and can vary from hours to weeks.)\\");\\n  ccombat::remove_from_combat(\$fighter: victim);\\n  EmitTo(\$az, \\"Removed them from combat\\");\\n  Call(\$\{Ironclaw:Lib:Characters:Death\}, \\"die\\", \$victim: victim);\\n  EmitTo(\$az, \\"... and killed them\\");\\n\} else if(level \>= 7) \{\\n  // They are dying\\n  if(FindMerry(victim, \\"lib\\", \\"take_combat_damage_dying\\"))\\n    if(!Call(victim, \\"take_combat_damage_dying\\", \$char: \$char)) return (\{ level, \$wound_info[\\"name\\"] \});\\n\\n  EmitTo(\$az, \\"Killed (dying) \\"+dump_value(victim));\\n  if(!victim.\\"status:dying\\") victim.\\"status:dying\\" = time();\\n  EmitTo(victim, TAG(\\"You are now DYING. Seek immediate medical attention.\\", \\"imp\\"));\\n  EmitTo(victim, \\"(Don't worry, death isn't permanent. After some time \\"+Describe(victim)+\\" will be resurrected. The amount of time before resurrection depends on what is happening in-character, and can vary from hours to weeks.)\\");\\n  \\n  ccombat::remove_from_combat(\$fighter: victim);\\n  EmitTo(\$az, \\"Removed them from combat\\");\\n\\n  \$dying_id = victim.\\"status:dying\\";\\n  \$delay(60*60*4, (\{ level, \$wound_info[\\"name\\"] \}) ); // They have 4 hours to find treatment\\n  if(\$dying_id != victim.\\"status:dying\\") return TRUE;\\n\\n  if(victim.\\"status:dying\\") \{\\n    EmitTo(victim, TAG(\\"Your wounds are overwhelming you. You can tell the end is near.\\", \\"imp\\"));\\n    \$delay(60, TRUE);\\n    EmitTo(victim, TAG(\\"As the pain builds, your vision starts to blacken.\\", \\"imp\\"));\\n    \$delay(60, TRUE);\\n    EmitTo(victim, TAG(\\"Finally, the pain ends, as you slip into death.\\", \\"imp\\"));\\n    EmitTo(victim, \\"(Don't worry, death isn't permanent. After some time \\"+Describe(victim)+\\" will be resurrected. The amount of time before resurrection depends on what is happening in-character, and can vary from hours to weeks.)\\");\\n    Call(\$\{Ironclaw:Lib:Characters:Death\}, \\"die\\", \$victim: victim);\\n  \}\\n\}\\n\\nreturn (\{ level, \$wound_info[\\"name\\"] \});"
      </Core:Property>
      <Core:Property property="gimli:lib:show_all_injuries">
         "E[G]\\n// When looking at the PCs \\"injuries\\"\\nint i;\\nstring output, *injuries_list, text;\\nobject victim;\\n\$az = \$\{Chatters:IC:az:azrael\};\\n\\nif(!\$target) return nil;\\n\\n// Get a list of injured body parts\\nvictim = NRefOb(\$target);\\ninjuries_list = map_indices(prefixed_map(Get(victim, \\"*\\"), \\"injuries:\\"));\\n\\n// Output the injuries description for each detail\\noutput = \\"\\";\\nfor(i=0; i\<sizeof(injuries_list); i++) \{\\n  \$target = NewNRef(victim, injuries_list[i][9..]);\\n  text = ::show_injuries(\$target:\$target);\\n  if(text \&\& text[0..2] == \\"It \\") \{\\n    output += capitalize(Describe(\$target, nil, \$actor)+text[2..])+\\"\\\\n\\";\\n  \} else \{\\n    output += capitalize(text)+\\"\\\\n\\";\\n  \}\\n\}\\n\\nif(output == \\"\\" \&\& \$no_uninjured_msg) return nil;\\nif(output == \\"\\") return Describe(victim) + \\" does not appear to be injured.\\";\\nreturn output;"
      </Core:Property>
      <Core:Property property="gimli:lib:show_injuries">
         "E[G]\\n// show injuries for this body part\\nstring output;\\nint i, sz;\\n\\noutput = \\"\\";\\n\$victim = NRefOb(\$target);\\n\$detail = NRefDetail(\$target);\\n\\n// NEW INJURIES CODE\\n\\n// are there any injuries?\\nif(Get(\$victim, \\"injuries:\\"+\$detail)) \{\\n  \$injuries = Get(\$victim, \\"injuries:\\"+\$detail);\\n  if(typeof(\$injuries) == T_ARRAY \&\& !sizeof(\$injuries)) \{\\n    // No injuries, this is just an empty array. Remove it.\\n    Set(\$victim, \\"injuries:\\"+\$detail, nil);\\n    return output;\\n  \}\\n\} else \{\\n  return output;\\n\}\\n\\n// Sort through finding types of injuries\\n\$injury_types = ([ ]);\\n\$bandages = (\{ \});\\n\\nfor(i=0;i\<sizeof(\$injuries);i++) \{\\n  \$injury = \$injuries[i];\\n  if(!\$injury[\\"type\\"]) \$injury[\\"type\\"] = \\"injury\\"; // Sanity check\\n  \\n  if(\$injury[\\"bandaged\\"]) \{\\n    \$bandages \|= (\{ \$injury[\\"bandaged\\"] \});\\n  \} else \{\\n  \\n  // TEMPORARY - figure out the type of the injury if it wasn't recorded. (New injuries should record this!)\\n  // if(!\$injury[\\"type\\"]) \{\\n  //  if(\$injury[\\"adj\\"] == \\"bruised\\")\\n  //    \$injury[\\"type\\"] = \\"bruise\\";\\n  //  else\\n  //    \$injury[\\"type\\"] = \\"injury\\";\\n  // \}\\n\\n    if(!\$injury_types[\$injury[\\"type\\"]]) \$injury_types[\$injury[\\"type\\"]] = (\{ \});\\n    \$injury_types[\$injury[\\"type\\"]] += (\{ \$injury \});\\n  \}\\n\}\\n\\n// Convert each type of injury into a description\\nsz = sizeof(map_indices(\$injury_types));\\nfor(i=0;i\<sz;i++) \{\\n  \$data = \$injury_types[map_indices(\$injury_types)[i]];\\n  if(sizeof(\$data) \> 1) \{\\n    // Multiple injuries, just list the number\\n    \$plural = \$data[0][\\"type\\"]; // Need to pluralize this word!\\n    if(lower_case(\$plural[strlen(\$plural)-1..strlen(\$plural)-1]) == \\"y\\") \{\\n     // If the last character is a \\"y\\" change to \\"ies\\" - e.g. injury -\> injuries\\n     \$plural = \$plural[..strlen(\$plural)-2]+\\"ies\\";\\n    \} else \{\\n      // Otherwise, just add \\"s\\"\\n      \$plural = \$plural+\\"s\\";\\n    \}\\n\\n    \$injury_types[map_indices(\$injury_types)[i]] = \\"has \\"+desc_cardinal(sizeof(\$data))+\\" \\"+\$plural; \\n  \} else if(sizeof(\$data) == 1) \{\\n    // Only one injury of this type, so we can use the description\\n    \$injury_types[map_indices(\$injury_types)[i]] = \$data[0][\\"desc\\"];\\n  \} else \{\\n    // Something really strange happened!\\n    \$injury_types[map_indices(\$injury_types)[i]] = nil;\\n  \}\\n\}\\n\\n// Is it bandaged?\\nif(sizeof(\$bandages)) output += \\"It has been bandaged with \\"+implode(\$bandages, \\" and \\");\\n\\n// List out each of the descriptions\\nif(sizeof(map_indices(\$injury_types))) \{\\n  if(!output \|\| output == \\"\\")\\n    output += \\"It \\";\\n  else\\n    output += \\" and \\";\\n\}\\n\\nsz = sizeof(map_indices(\$injury_types));\\nfor(i=0;i\<sz;i++) \{\\n  // if(i==0) output += \\"It \\";\\n  if(i!=0 \&\& i==sz-1) output += \\" and \\";\\n  else if(i!=0) output += \\", \\";\\n  output += \$injury_types[map_indices(\$injury_types)[i]];\\n\}\\nif(output) output += \\".\\";\\n\\nreturn output;\\n\\nreturn dump_value(\$injury_types);\\nreturn dump_value(\$injuries);\\n\\nreturn \\"Hi? \\"+dump_value(\$victim)+\\" and \\"+dump_value(\$detail);\\n\\n\\n\\nreturn output;\\n\\n\\n// OLD CODE GOES HERE!\\n\\n// are there any injuries?\\nif(Get(\$victim, \\"combat:injury:\\"+\$detail)) \{\\n    \$injuries = Get(\$victim, \\"combat:injury:\\"+\$detail);\\n\} else \{\\n    return output;\\n\}\\n\\n/* is there any information in the injuries mapping? */\\nif(typeof(\$injuries) != T_MAPPING \|\| !sizeof(map_indices(\$injuries))) \{\\n    Set(\$victim, \\"combat:injury:\\"+\$detail, nil);\\n    return output;\\n\}\\n\\n/* what is the observers medical skill? */\\n\$firstaid = Int(\$actor.\\"skill:mental:first-aid\\");\\n\\nif(Int(\$actor.\\"career:mental:first-aid\\") \> \$firstaid)\\n    \$firstaid = Int(\$actor.\\"career:mental:first-aid\\");\\n\\n/* is the detail plural? */\\nif(Get(\$victim, \\"details:\\"+\$detail+\\":plural\\")) \{\\n    \$isare = \\" are\\";\\n\} else \{\\n    \$isare = \\" is\\";\\n\}\\n\\n/* is it bandaged? */\\nif(\$injuries[\\"bandaged\\"]) \{\\n /* describe the bandage */\\n if(sizeof(\$injuries[\\"bandaged\\"]) \> 1)\\n  \$bandage = \$injuries[\\"bandaged\\"][1]+\\" \\";\\n if(sizeof(\$injuries[\\"bandaged\\"]) \> 2)\\n  \$bandage = \$injuries[\\"bandaged\\"][2]+\\" \\"+\$bandage;\\n if(sizeof(\$injuries[\\"bandaged\\"]) \> 3) \{\\n  \$bandage = \$bandage+\$injuries[\\"bandaged\\"][3];\\n \} else \{\\n  \$bandage = \$bandage+\\"bandage\\";\\n \}\\n\\n if(\$injuries[\\"bandaged\\"][0] \< 0) \{\\n  /* If the bandage has been disturbed */\\n  return capitalize(Describe(\$target, nil, \$actor))+\$isare+\\" covered with a bloody \\"+\$bandage+\\". The bandage looks like it really needs to be changed.\\";\\n \} else if(\$injuries[\\"bandaged\\"][0] == 0) \{\\n  /* if the bandage is finished */\\n  return capitalize(Describe(\$target, nil, \$actor))+\$isare+\\" covered with a grubby \\"+\$bandage+\\". The bandage looks like it might need to be changed.\\";\\n \} else if(\$firstaid \>= 5 \&\& \$injuries[\\"bandaged\\"][0] \< 3 \&\& \$injuries[\\"total\\"] \&\& \$injuries[\\"total\\"] \> \$injuries[\\"bandaged\\"][0]) \{\\n  /* if the bandage is needs replacing soon */\\n  return capitalize(Describe(\$target, nil, \$actor))+\$isare+\\" covered with a slightly grubby \\"+\$bandage+\\". The bandage looks like it might need to be changed soon.\\";\\n \} else \{\\n  return capitalize(Describe(\$target, nil, \$actor))+\$isare+\\" covered with a \\"+\$bandage+\\".\\";\\n \}\\n\}\\n\\n/* example: Property: combat:injury:calves = ([ \\"bandaged\\":(\{ 1, \\"silk\\", \\"blue\\", \\"wrapping\\" \}), \\"total\\":3 ]) */\\n\\n/* grab the basic complications info */\\nif(\$injuries[\\"complications\\"]) \{\\n \$basiccomplications = \$injuries[\\"complications\\"];\\n\} else \{\\n \$basiccomplications = ([ ]);\\n\}\\n\\n/* do we have any injuries to display? */\\nif(\$injuries[\\"injuries\\"] \&\& sizeof(map_indices(\$injuries[\\"injuries\\"]))) \{\\n for(\$i = 0; \$i\<sizeof(map_indices(\$injuries[\\"injuries\\"]));\$i++) \{\\n  \$injury = Arr(\$injuries[\\"injuries\\"][map_indices(\$injuries[\\"injuries\\"])[\$i]]);\\n\\n  /* if more than one of this injury type, count them */\\n  if(sizeof(\$injury) \> 1) \{\\n      if(sizeof(\$injury) \> \$firstaid+2) \{\\n          output += \\"You see multiple \\"+Str(map_indices(\$injuries[\\"injuries\\"])[\$i])+\\"s. \\";\\n      \} else \{\\n          output += \\"You see \\"+desc_cardinal(sizeof(\$injury))+\\" \\"+Str(map_indices(\$injuries[\\"injuries\\"])[\$i])+\\"s. \\";\\n      \}\\n  \}\\n\\n  /* find the worst injury to describe */\\n  \$index = -1;\\n  \$max = 0;\\n  for(\$j=0;\$j\<sizeof(\$injury);\$j++) \{\\n      if(\$injury[\$j][0] \>= \$max) \{\\n          \$index = \$j;\\n          \$max = \$injury[\$j][0];\\n      \}\\n  \}\\n\\n  if(\$index != -1) \{\\n      /* now describe this injury */\\n      \$injury = \$injury[\$index];\\n      if(\$injury[1][\\"location\\"]) \{\\n          \$location = \$injury[1][\\"location\\"];\\n      \} else \{\\n          \$location = nil;\\n      \}\\n\\n      if(\$injury[1][\\"weapon\\"]) \{\\n          \$weapon = \$injury[1][\\"weapon\\"];\\n      \} else \{\\n          \$weapon = nil;\\n      \}\\n\\n      if(\$weapon \&\& FindMerry(\$weapon, \\"lib\\", \\"description:hurt\\")) \{\\n          output += Call(\$weapon, \\"description:hurt\\");\\n      \} else if(\$location \&\& FindMerry(\$location, \\"lib\\", \\"description:\\"+map_indices(\$injuries[\\"injuries\\"])[\$i]) )\{\\n          output += Call(\$location, \\"description:\\"+map_indices(\$injuries[\\"injuries\\"])[\$i] );\\n      \} else if( FindMerry(this, \\"lib\\", \\"description:\\"+map_indices(\$injuries[\\"injuries\\"])[\$i]) ) \{\\n          output += Call(this, \\"description:\\"+map_indices(\$injuries[\\"injuries\\"])[\$i] );\\n      \} else if( FindMerry(this, \\"lib\\", \\"description:hurt\\") ) \{\\n          output += Call(this, \\"description:hurt\\");\\n      \}\\n      output += \\" \\";\\n  \}\\n \}\\n\}\\n\\n/* example: Property: combat:injury:calves = ([ \\"injuries\\":([ \\"cut\\":(\{ (\{ 3, ([ \\"location\\":\<Ironclaw:Lib:Combat:New:hitdescription\> ]), ([ ]) \}), (\{ 1, ([]), ([]) \}) \}) ]), \\"total\\":3 ]) */\\n\\n/* do we have any further complications to display? */\\nif(sizeof(map_indices(\$basiccomplications))) \{\\n for(\$i=0;\$i\<sizeof(map_indices(\$basiccomplications));\$i++) \{\\n  \$complication = \$basiccomplications[map_indices(\$basiccomplications)[\$i]];\\n  if( \$complication[\\"location\\"] \&\& FindMerry(\$complication[\\"location\\"], \\"lib\\", \\"description:\\"+map_indices(\$basiccomplications)[\$i]) ) \{\\n   output += Call(\$complication[\\"location\\"], \\"description:\\"+map_indices(\$basiccomplications)[\$i] );\\n  \} else if( FindMerry(this, \\"lib\\", \\"description:\\"+map_indices(\$basiccomplications)[\$i]) ) \{\\n   output += Call(this, \\"description:\\"+map_indices(\$basiccomplications)[\$i] );\\n  \}\\n \}\\n\}\\n\\n/* example: Property: combat:injury:calves = ([ \\"injuries\\":([ \\"cut\\":(\{ (\{ 3, ([ ]), ([ ]) \}) \}) ]), \\"total\\":3, \\"complications\\":([ \\"infection\\":([ \\"increasing\\":1, \\"value\\":12 ]) ]) ]) */\\n\\n\\n/* example: Property: combat:injury:calves = ([ \\"injuries\\":([  ]), \\"total\\":3 ]) */\\n\\n\\n/* all in one example: Property: combat:injury:calves = ([ \\"bandaged\\":(\{ 1, \\"silk\\", \\"blue\\", \\"wrapping\\" \}), \\"total\\":3 ]) */\\n\\n\\nreturn output;\\n\\n\\n\\n/*output += dump_value(args);*/\\nfor(i=0;i\<sizeof(\$injuries);i++) \{\\n \$injury = \$injuries[i];\\n output += UnSAM(Get(\$injury[\\"ob\\"], \\"description:\\"+\$injury[\\"injury\\"]+\\":\\"+\$injury[\\"id\\"]))+\\" \\";\\n\}\\n\\n\\nreturn output;"
      </Core:Property>
      <Core:Property property="gimli:react-post:unbandage-dob">
         "E[G]\\n// Unbandaging an injury?\\n\$az = \$\{Chatters:IC:az:azrael\};\\nEmitTo(\$az, \\"Unbandaging\\");\\nEmitTo(\$az, dump_value(\$target));\\n\\nEmitTo(\$az, dump_value( NRefOb(\$target) ));\\nEmitTo(\$az, dump_value( NRefDetail(\$target) ));\\n\\n// Remove bandaged adjective\\nSet(NRefOb(\$target), \\"details:\\"+NRefDetail(\$target)+\\":adjective:bandaged\\", nil);\\nSet(NRefOb(\$target), \\"details:\\"+NRefDetail(\$target)+\\":sname:bandage\\", nil);\\nSet(NRefOb(\$target), \\"details:\\"+NRefDetail(\$target)+\\":pname:bandages\\", nil);\\nSet(NRefOb(\$target), \\"combat:injury:\\"+NRefDetail(\$target)+\\":adjectives\\", nil);\\n\\n// Is there injuries info to remove?\\n\$info = Get(NRefOb(\$target), \\"injuries:\\"+NRefDetail(\$target));\\nif(\$info) \{\\n  // Check if any of these details are bandaged\\n  for(\$i=0;\$i\<sizeof(\$info);\$i++) \{\\n    if(!\$info[\$i]) continue;\\n    EmitTo(\$az, dump_value(\$info[\$i]));\\n    if(\$info[\$i][\\"bandaged\\"]) \{\\n      // Remove this bandage\\n      \$level = \$info[\$i][\\"level\\"] ? \$info[\$i][\\"level\\"] : 1;\\n      if(time() \> \$info[\$i][\\"woundtime\\"] + 60*60*20 * \$level\\n      \&\& time() \> \$info[\$i][\\"bandaged_time\\"] + 60*60*6) \{\\n        // Wound is fully healed\\n        \$info[\$i] = nil;\\n      \} else \{\\n        // Not fully healed yet\\n        \$info[\$i][\\"bandaged\\"] = nil;\\n        \$info[\$i][\\"bandaged_time\\"] = nil;\\n      \}\\n    \}\\n  \}\\n  // Just in case we removed any injuries, clear the array\\n  \$info -= (\{ nil \});\\n  if(sizeof(\$info)) Set(NRefOb(\$target), \\"injuries:\\"+NRefDetail(\$target), \$info);\\n  else Set(NRefOb(\$target), \\"injuries:\\"+NRefDetail(\$target), nil);\\n\}\\n\\nreturn TRUE;"
      </Core:Property>
      <Core:Property property="gimli:react:bandage-using">
         "E[G]\\n// set the body part to be bandaged\\nobject victim;\\nstring detail, *details;\\nint i, j;\\n\\n// Check that the kit has supplies left\\n// NOT WRITTEN YET\\n\\n\$az = \$\{Chatters:IC:az:azrael\};\\nEmitTo(\$az, \\"Bandaging\\");\\n\\n// check that they are applying the bandage to a valid target\\nif(\$this.\\"base:environment\\" != \$actor) \{\\n  EmitTo(\$actor, \\"You must be holding \\"+Describe(this, nil, \$actor)+\\" to use it.\\");\\n  return FALSE;\\n\}\\n\\n// check that they are applying it to only one thing\\nif(!\$dob \|\| !sizeof(\$dob)) \{\\n  EmitTo( \$actor, \\"What do you intend to apply \\" +Describe(this, nil, \$actor)+\\" to?\\" );\\n  return FALSE;\\n\} else if(\$dob \&\& sizeof(\$dob) \> 1) \{\\n  EmitTo( \$actor, \\"You may only apply \\" +Describe(this, nil, \$actor)+\\" to one person at a time.\\" );\\n  return FALSE;\\n\}\\n\\n// check they are targeting a character\\nif(!NRefOb(\$dob[0]).\\"udat:possessed\\") \{\\n  EmitTo(\$actor, \\"You can't apply a bandage to \\"+Describe(\$dob[0])+\\".\\");\\n  return FALSE;\\n\}\\n\\n// Are they in a fight?\\n// NOT WRITTEN YET\\n// Can't bandage someone that's in combat unless you're also in that combat\\n// Can't bandage someone if you are in combat unless it's your turn and you have an action available\\n// Do a dice roll to see if mid-combat first aid is successful\\n// Gotta figure out something so people don't just break from combat, get bandaged, then re-enter combat\\n\\nvictim = NRefOb(\$dob[0]);\\ndetail = NRefDetail(\$dob[0]);\\n\\nif(detail != \\"default\\") \{\\n  details = (\{ \\"injuries:\\"+detail \});\\n\} else \{\\n  // Get a list of injuries\\n  details = map_indices(prefixed_map(Get(victim, \\"*\\"), \\"injuries:\\"));\\n\}\\n\\n// Check if any injuries need bandaging\\n\$bandaging_needed = (\{ \});\\nfor(i=0; i\<sizeof(details); i++) \{\\n  detail = details[i];\\n  \$injuries = Get(victim, detail);\\n  \\n  EmitTo(\$az, \\"Detail is: \\"+dump_value(detail));\\n  EmitTo(\$az, \\"Injuries are: \\"+dump_value(\$injuries));\\n\\n  if(\$injuries) \{\\n    for(j=0; j\<sizeof(\$injuries); j++) \{\\n      \$injury = \$injuries[j];\\n      \$adjs = (\{ \});\\n      if(!\$injury[\\"bandaged\\"] \|\| !\$injury[\\"bandaged_time\\"]) \{\\n        // Needs bandaging\\n        \$bandaging_needed \|= (\{ detail \});\\n        \$injury[\\"bandaged_time\\"] = time();\\n        \$injury[\\"bandaged\\"] = \\"a cotton bandage\\";\\n        \\n        // mark this detail as bandaged\\n        EmitTo(\$az, \\"Detail: \\"+dump_value( detail[9..] ));\\n        Set(victim, \\"details:\\"+detail[9..]+\\":adjective:bandaged\\", TRUE);\\n        Set(victim, \\"details:\\"+detail[9..]+\\":sname:bandage\\", TRUE);\\n        Set(victim, \\"details:\\"+detail[9..]+\\":pname:bandages\\", TRUE);\\n        Set(victim, \\"combat:injury:\\"+detail[9..]+\\":adjectives\\", \\"bandaged\\"); // Should find a better way to calculate this? Should some injuries adjectives (e.g. \\"broken\\") show through bandages?\\n      \}\\n    \}\\n  \}\\n\}\\n\\nif(!sizeof(\$bandaging_needed)) \{\\n  EmitTo(\$actor, Describe(\$dob, nil, \$actor)+\\" doesn't need bandaging.\\");\\n  return FALSE;\\n\}\\n\\n// Bandaging successful. Allow a normal emote.\\n// ... but if they targeted the default, specify what got bandaged\\nif(NRefDetail(\$dob[0]) == \\"default\\") \{\\n  \$dob = (\{ \});\\n  for(i=0; i\<sizeof(details); i++) \{\\n    \$dob += (\{ NewNRef(victim, details[i][9..]) \});\\n  \}\\n\}\\n\\n// Remove the hurt status\\nif(victim.\\"status:hurt\\") \{\\n  victim.\\"status:hurt\\" = nil;\\n\\n  // Did we run out of supplies? Tell the healer!\\n  // NOT WRITTEN YET\\n\}\\n\\nif(victim != \$actor) \{\\n  // Remove the injured status (until we have something better)\\n  victim.\\"status:injured\\" = nil;\\n\\n  // Remove the dying status (until we have something better)\\n  victim.\\"status:dying\\" = nil;\\n\}\\n\\nreturn TRUE;\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nreturn FALSE;\\n\\n\\n/* check that they are applying it to only one PC */\\nif(\$iob \&\& (sizeof(\$iob) == 1)) \{\\n\\n  EmitTo( \$actor, \\"You may only apply \\" +Describe(this, nil, \$actor)+\\" to one person at a time.\\" );\\n  return FALSE;\\n\}\\n  /* check they are targetting a character */\\n  if(!NRefOb(\$iob[0]).\\"udat:possessed\\") \{\\n    EmitTo(\$actor, \\"You can't apply a bandage to \\"+Describe(\$iob[0])+\\".\\");\\n    return FALSE;\\n  \}\\n\\n\\n/* check that they are applying it to only one thing */\\nif(\$iob \&\& (sizeof(\$iob) == 1)) \{\\n  /* check they are targetting a character */\\n  if(!NRefOb(\$iob[0]).\\"udat:possessed\\") \{\\n    EmitTo(\$actor, \\"You can't apply a bandage to \\"+Describe(\$iob[0])+\\".\\");\\n    return FALSE;\\n  \}\\n  /* check they aren't targetting the default detail */\\n  if(NRefDetail(\$iob[0]) == \\"default\\") \{\\n    EmitTo(\$actor, \\"What body part do you intend to apply the bandage to?\\");\\n    return FALSE;\\n  \}\\n  /* check that they don't already have a bandage */\\n  \$injury = Get(NRefOb(\$iob[0]), \\"combat:injury:\\"+NRefDetail(\$iob[0]));\\n  if(\$injury \&\& \$injury[\\"bandaged\\"]) \{\\n    EmitTo(\$actor, Describe(\$iob[0], nil, \$actor)+\\" is already bandaged.\\");\\n    return FALSE;\\n  \}\\n  return TRUE;\\n\} else if(\$iob \&\& (sizeof(\$iob) \>= 1)) \{\\n  EmitTo( \$actor, \\"You may only apply \\" +Describe(this, nil, \$actor)+\\" to one person at a time.\\" );\\n  return FALSE;\\n\} else \{\\n  EmitTo( \$actor, \\"What do you intend to apply \\" +Describe(this, nil, \$actor)+\\" to?\\" );\\n  return FALSE;\\n\}\\n\\n\\n/* sanity checking already done in the pre script */\\n\\nvictim = NRefOb(\$iob[0]);\\ndetail = NRefDetail(\$iob[0]);\\n\\n/* what level of quality the bandaging? */\\ni= ironclaw::roll(\$roller: \$actor, \$skills: (\{ \\"mental:first-aid\\" \}), \$bonus: \\"trait:mind\\");\\nif(\$this.\\"trait:quality\\" \&\& \$this.\\"trait:quality\\" \< i) i = \$this.\\"trait:quality\\";\\n\\nif(!\$injury) \$injury = ([ ]);\\n\$injury[\\"bandaged\\"] = (\{ i, \$this.\\"trait:material\\", \$this.\\"trait:color\\", \\"bandage\\" \});\\nSet(NRefOb(\$iob[0]), \\"combat:injury:\\"+NRefDetail(\$iob[0]), \$injury);\\n\\n/* mark this detail as bandaged */\\n/*Set(victim, \\"combat:injury:\\"+detail+\\":bandaged\\", i);\\nSet(victim, \\"combat:injury:\\"+detail+\\":bandagename\\", Describe(\$this, nil, nil, STYLE_NONPOSS));\\nSet(victim, \\"combat:injury:\\"+detail, \\"been bandaged with \\"+Describe(\$this, nil, nil, STYLE_NONPOSS));*/\\nSet(victim, \\"combat:injury:\\"+detail+\\":adjectives\\", \\"bandaged\\");\\nSet(victim, \\"details:\\"+detail+\\":adjective:bandaged\\", TRUE);\\nSet(victim, \\"details:\\"+detail+\\":sname:bandage\\", TRUE);\\nSet(victim, \\"details:\\"+detail+\\":pname:bandages\\", TRUE);\\n\\nSet(victim, \\"bandage:\\"+detail, (\{ \\"bandaged\\", \\"bandage\\", \\"bandages\\" \}) );\\n\\n\\n\\n\\n/*Call(\$\{Ironclaw:Lib:Characters:Injuries\}, \\"describe-wound\\", \$detail: \$iob[0]);*/\\n\\n/* and the bandage is now on them. So slay it */\\nSlay(\$this);\\n\\nif(victim.isbleeding) \{\\n    if(FindMerry(victim, \\"lib\\", \\"bleed_stop\\" )) \{\\n        Call(victim, \\"bleed_stop\\", \$actor: victim, \$bodypart: detail);\\n    \}\\n\}\\n\\nreturn TRUE;"
      </Core:Property>
      <Core:Property property="log:creator">
         "Injuries"
      </Core:Property>
      <Core:Property property="merry:lib:add_wound">
         X[M] object victim;
string detail, tmp;
/*
this adds a wound to a target's body part.
*/
int i;

if(!\$target) return FALSE;
if(!\$wound) return FALSE;

victim = NRefOb(\$target);
detail = NRefDetail(\$target);

if(!\$wound \|\| typeof(\$wound) != T_STRING) \$wound = "cut";
if(detail == "default") detail = "body";

if(\$damage \< 1) \$damage = 1;

if(\$weapon."weapon:woundtype") \{
    \$injury = \$weapon."weapon:woundtype";
\} else \{
    \$injury = (\{ "bruise", "bruises", "bruised" \});
\}

switch(\$damage) \{
    case 1:
        \$adverb = "slightly";
        break;
    case 2:
        \$adverb = "";
        break;
    case 3:
        \$adverb = "shallowly";
        break;
    case 4:
        \$adverb = "deeply";
        break;
    default:
        \$adverb = "seriously";
\}

if(\$injury) \{
    \$verb = \$injury[0];
\} else \{
    \$verb = "bruise";
\}

\$extras = ([ "weapon":\$weapon ]);

/* give an injury */
if(victim."combat:type" == "spar") \{
    victim."combat:fatigue" = Int(victim."combat:fatigue") + Int(\$damage);
    \$\{Ironclaw:Lib:Combat:Cards:Injuries\}.characters \|= (\{ victim \});
    \$verb = "bruise";
\} else \{
    victim."combat:damage" = Int(victim."combat:damage") + Int(\$damage);
    \$\{Ironclaw:Lib:Combat:Cards:Injuries\}.characters \|= (\{ victim \});
\}

/* give an injury description */
\$inj_mapping = Get(victim, "combat:injury:"+detail);

if(!\$inj_mapping)
    \$inj_mapping = ([ ]);

/* increase the total damage done to this bodypart */
if(\$inj_mapping["total"]) \{
    \$inj_mapping["total"] += Int(\$damage);
\} else \{
    \$inj_mapping["total"] = Int(\$damage);
\}

/* add this injury to the listing */
if(!\$inj_mapping["injuries"])
    \$inj_mapping["injuries"] = ([ ]);

/* do we have a type? */
/* NOT WRITTEN YET */
\$type = \$verb;
if(!\$inj_mapping["injuries"][\$type])
 \$inj_mapping["injuries"][\$type] = (\{\});

\$inj_mapping["injuries"][\$type] += (\{ (\{ \$damage, \$extras, ([]) \}) \});
Set(victim, "combat:injury:"+detail, \$inj_mapping);

return "a " + replace_strings(\$adverb, "ly", "") + " " + \$type;
      </Core:Property>
      <Core:Property property="merry:lib:check_coverage">
         X[M] if(\$targ."base:clothes-worn" \&\& map_sizeof(\$targ."base:clothes-worn")) \{
    \$coveredParts = map_indices(\$targ."base:clothes-worn");
\} else \{
    \$coveredParts = (\{ \});
\}

if(\$targ.detailtocoverage) \{
    \$detail = \$targ.detailtocoverage[\$detail];
\}

if(!member(\$detail, \$coveredParts) \|\| \$looker == \$targ \|\| Int(\$looker."skill:career:healer") \>= 20) \{
    return \$string;
\} else \{
    return "";
\}
      </Core:Property>
      <Core:Property property="merry:lib:describe-wound">
         X[M] /* sets a description for any wounds on the characters \$detail */
object body;
string detail, *injuries, adjective, *adjectives, *snames, *pnames, currentInjury, *progression, bandagename;
int injuryCount, index, index2, bandaged, used_bandage;

injuries = (\{\});
adjectives = (\{\});
snames = (\{\});
pnames = (\{\});
bandaged = FALSE;

\$az = \$\{Chatters:AE:az:azrael\};
EmitTo(\$az, "IS THIS OLD CODE? I THINK IT IS.");
EmitTo(\$az, "COMING FROM Ironclaw:Lib:Characters:Injuries - merry:lib:describe-wound");


/* if we weren't passed \$detail */
if(!\$detail)
  return FALSE;

detail = NRefDetail(\$detail);
body = NRefOb(\$detail);

/* is there a bandage on? */
if(typeof(Get(body, "combat:injury:"+detail+":bandaged")) != T_NIL) \{
  bandaged = TRUE;
  if(Get(body, "combat:injury:"+detail+":bandaged") \< 1) \{
    used_bandage = TRUE;
  \} else \{
    used_bandage = FALSE;
  \}
  if(Get(body, "combat:injury:"+detail+":bandagename")) \{
    bandagename = Get(body, "combat:injury:"+detail+":bandagename");
  \} else \{
    bandagename = "a strip of cloth";
  \}
\}
return FALSE;

/* get a list of the injuries for this body part */

/* if no injuries */
if(!body."combat:injuries" \|\| !body."combat:injuries"[detail] \|\| !sizeof(body."combat:injuries"[detail])) \{
  if(bandaged) \{
    /* but still show the bandage */
    Set(body, "combat:injury:" + detail, "been bandaged with "+bandagename);
    if(used_bandage) \{
      Set(body, "combat:injury:" + detail + ":adjectives", "grubbily bandaged");
    \} else \{
      Set(body, "combat:injury:" + detail + ":adjectives", "bandaged");
    \}
  \} else \{
    /* no bandage - clear any visible injuries */
    Set(body, "combat:injury:" + detail, nil);
    Set(body, "combat:injury:" + detail + ":adjectives", nil);
  \}
  return TRUE;
\}

\$injuryArray = copy(body."combat:injuries"[detail]);
/* if there are no injuries in the mapping, remove the mapping */
if(sizeof(\$injuryArray) == 0)
\{
  /* we have no injuries */
  if(bandaged) \{
    /* but still show the bandage */
    Set(body, "combat:injury:" + detail, "been bandaged with "+bandagename);
    if(used_bandage) \{
      Set(body, "combat:injury:" + detail + ":adjectives", "grubbily bandaged");
    \} else \{
      Set(body, "combat:injury:" + detail + ":adjectives", "bandaged");
    \}
  \} else \{
    /* no bandage - clear any visible injuries */
    Set(body, "combat:injury:" + detail, nil);
    Set(body, "combat:injury:" + detail + ":adjectives", nil);
  \}
  /* remove this mapping */
  body."combat:injuries"[detail] = nil;
  return TRUE;
\}

/* don't describe any injuries covered by a bandage */
for(index=0;index\<sizeof(\$injuryarray);index++) \{
  if(\$injuryarray[index]["bandaged"])
    \$injuryarray[index] = nil;
\}
\$injuryarray -= (\{ nil \});

/* start stripping injuries from the list, and adding to the array */
while(sizeof(\$injuryArray) \> 0)
\{
  injuryCount = 1;

  /* strip away any injury that matches the one at index, and increment the injury counter accordingly */
  for(index = 1; index \< sizeof(\$injuryArray);)
  \{
    /* check that the injuries match */
    if(\$injuryArray[index]["type"][0] == \$injuryArray[0]["type"][0])\{
      /* check the level to make sure that the adjectives match */
      if(Call(this, "get_adjective", \$details: \$injuryArray[0]) == Call(this, "get_adjective", \$details: \$injuryArray[index])) \{
        /* this element seems to match, so increment the injury count, and remove it from the list */
        injuryCount++;
        \$injuryArray -= (\{ \$injuryArray[index] \});
      \} else \{
        /* the adjective was different. check next injury in the array */
        index++;
      \}
    \} else \{
      /* the injury type was different. check next injury in the array */
      index++;
    \}
  \}

  /* add the injury at index to the injuries list, along with the appropriate number */
  currentInjury = "";

  /* add the number of this type of injuries - a cut vs three cuts */
  if(injuryCount == 1)
  \{
    currentInjury = currentInjury + Call(this, "get_adjective", \$details: \$injuryArray[0]) + \$injuryArray[0]["type"][0];
      /* EXTENSION: include adjective in here */
    switch(currentInjury[0]) \{
      case 'a':
      case 'e':
      case 'i':
      case 'o':
      case 'u':
        currentInjury = "an "+currentInjury;
      break;
      default:
        currentInjury = "a "+currentInjury;
      break;
    \}
  \} else \{
    currentInjury = desc_cardinal(injuryCount) + " " + currentInjury + Call(this, "get_adjective", \$details: \$injuryArray[0]) + \$injuryArray[0]["type"][1];
  \}

  injuries += (\{ currentInjury \});
  if(\$injuryArray[0]["adj"])
    adjectives \|= Arr(\$injuryArray[0]["adj"]);
  if(\$injuryArray[0]["type"]) \{
    snames \|= Arr(\$injuryArray[0]["type"][0]);
    pnames \|= Arr(\$injuryArray[0]["type"][1]);
  \}
  if(\$injuryArray[0]["injury"]) \{
    adjectives \|= (\{"injured"\});
    snames \|= (\{"injury"\});
    pnames \|= (\{"injuries"\});
  \}
  \$injuryArray -= (\{ \$injuryArray[0] \});
\}

/* now write out a description of the injuries */
\$description = "";
for(index = 0; index \< sizeof(injuries); index++)
\{
  \$description += injuries[index];
  if(sizeof(injuries)-index \> 2)
  \{
    \$description += ", ";
  \} else if(sizeof(injuries)-index == 2)
  \{
    \$description += " and ";
  \}
\}

/* add the description of the bandage */
if(bandaged)
  \$description += ", and has been bandaged with "+bandagename;

/*EmitTo(\$actor, "description of: It has " + \$description + ".");*/
Set(body, "combat:injury:" + detail, \$description);

/* Set the adjectives for this detail and write a description of them*/
for(index = 0; index \< sizeof(adjectives); index++) \{
  Set(body, "details:"+detail+":adjective:"+adjectives[index], TRUE);
\}
for(index = 0; index \< sizeof(snames); index++) \{
  Set(body, "details:"+detail+":sname:"+snames[index], TRUE);
\}
for(index = 0; index \< sizeof(pnames); index++) \{
  Set(body, "details:"+detail+":pname:"+pnames[index], TRUE);
\}

adjectives = map_indices(arr_to_set(adjectives));
adjectives -= (\{ "tattooed" \});
adjectives -= (\{ "injured" \});
if(bandaged) \{
  if(used_bandage) \{
    adjectives \|= (\{ "grubbily bandaged" \});
  \} else \{
    adjectives \|= (\{ "bandaged" \});
  \}
\}


if(sizeof(adjectives) == 1) \{
  Set(body, "combat:injury:"+detail+":adjectives", adjectives[0]);
\} else if(sizeof(adjectives) == 2)
\{
  Set(body, "combat:injury:"+detail+":adjectives", adjectives[0]+" and "+adjectives[1]);
\} else if(sizeof(adjectives) \> 2) \{
  if(member("injured", adjectives)) \{
    Set(body, "combat:injury:"+detail+":adjectives", "injured");
  \} else if(member("bandaged", adjectives)) \{
    Set(body, "combat:injury:"+detail+":adjectives", "bandaged");
  \} else if (member("tattooed", adjectives)) \{
    Set(body, "combat:injury:"+detail+":adjectives", "tattooed");
  \}
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:get_adjective">
         X[M] /* return an adjective based on the progression of damage */
string *progression;
int sz, damage;

if(\$details \&\& \$details["progression"])  \{
  progression = \$details["progression"];
\} else \{
  progression = \$this.progression;
\}
sz = sizeof(progression);

if(\$details["level"]) \$damage = \$details["level"] - 4;

/* if the damage is larger than the progression, just return the highest value */
if(\$damage \> sz) \{
  if(progression[sz-1]) \{
    return progression[sz-1]+" ";
  \} else \{
    return "";
  \}
\}

\$damage--;
if(\$damage \< 0) \$damage = 0;

if(progression[\$damage]) \{
  return progression[\$damage]+" ";
\} else \{
  return "";
\}
      </Core:Property>
      <Core:Property property="merry:lib:get_wound">
         X[M] /* Gimli-Powered! Do not edit! Edit gimli:lib:get_wound instead! */
/* Calculate wound information */
/* ::get_wound(\$target_detail:\$target_detail, \$wound:"bruise", \$level:\$damage, \$par:([]) ); */
string wound_name, wound_adjective, wound_desc, wound_type, *complications;

/* What is the maximum wound level the victim can take? */
\$level = ccombat::max_damage(\$damage: Int(\$level), \$victim: \$target_detail);

/* Default wound values, in case they don't get set */
wound_name = dump_value(\$wound);
wound_adjective = "injured";
wound_desc = "has been injured";
wound_type = "injury";
complications = (\{ \});

/* Now we set the right wound values for this particular wound */
if(\$wound == "bruise") \{
  wound_name = "bruise";
  wound_adjective = "bruised";
  wound_desc = "has been bruised";
  wound_type = "bruise";
  if(\$level \<= 0) \{
    wound_name = "slight bruise";
    wound_adjective = nil;
    wound_desc = "has a "+oneof("slight", "light", "small")+" bruise";
  \} else if(\$level == 1) \{
    wound_name = "bruise";
    wound_desc = "has a bruise";
  \} else if(\$level \<= 2) \{
    wound_name = "bruise";
    wound_desc = "has a "+oneof("nasty", "deep", "purple")+" bruise";
  \} else if(\$level \> 2) \{
    wound_name = "severe bruise";
    wound_desc = "has a "+oneof("serious", "injurous", "blackened")+" bruise";
  \}
  
  /* complications \|= (\{ "bleeding freely" \}); */
  /* wound_desc += " that "+oneof("is bleeding freely", "continually bleeds", "is oozing blood"); */
  
\} else if(\$wound == "cut") \{
  wound_name = "cut";
  wound_adjective = "cut";
  wound_desc = "has been cut";
  wound_type = "cut";
  if(!random(3)) complications \|= (\{ "infected" \});
  if(\$level \<= 0) \{
    wound_name = "shallow cut";
    wound_adjective = nil;
    wound_desc = "has a "+oneof("slight", "light", "small", "shallow")+" "+oneof("cut", "scrape");
  \} else if(\$level == 1) \{
    wound_name = "cut";
    wound_desc = "has a cut";
  \} else if(\$level \<= 2) \{
    wound_name = "cut";
    wound_desc = "has a "+oneof("nasty", "deep", "painful")+" cut";
    if(!random(3)) \{
      complications \|= (\{ "bleeding freely" \});
      wound_desc += " that "+oneof("is bleeding freely", "continually bleeds", "is oozing blood");
    \}
  \} else if(\$level \> 2) \{
    wound_name = "deep cut";
    wound_desc = "has a "+oneof("serious", "injurous", "deep")+" "+oneof("cut", "gash");
  \}
\} else if(\$wound == "welt") \{
  wound_name = "welt";
  wound_adjective = "welted";
  wound_desc = "has a welt";
  wound_type = "welt";
  if(\$level \<= 0) \{
    wound_name = "slight welt";
    wound_adjective = nil;
    wound_desc = "has a "+oneof("slight", "light", "small")+" welt";
  \} else if(\$level == 1) \{
    wound_name = "welt";
    wound_desc = "has a welt";
  \} else if(\$level \<= 2) \{
    wound_name = "welt";
    wound_desc = "has a "+oneof("nasty", "deep", "purple")+" welt";
  \} else if(\$level \> 2) \{
    wound_name = "severe welt";
    wound_desc = "has a "+oneof("serious", "injurous", "blackened")+" welt";
  \}

  /* complications \|= (\{ "bleeding freely" \}); */
  /* wound_desc += " that "+oneof("is bleeding freely", "continually bleeds", "is oozing blood"); */
\} else \{
  error("Unknown woundtype "+dump_value(\$wound));
\}

return ([ "level":\$level, "name":wound_name, "adj":wound_adjective, "desc":wound_desc, "type":wound_type, "complications":complications ]);
      </Core:Property>
      <Core:Property property="merry:lib:give_wound">
         X[M] /* Gimli-Powered! Do not edit! Edit gimli:lib:give_wound instead! */
/* Give a wound */
/* \$wound_info = ([ "adj":"bruised", "desc":"has a bruise", "level":1, "name":"bruise" ]); */
/* \$wound = ::give_wound(\$target_detail: \$target_detail, \$wound_info:\$wound, \$par: ([ ])); */

int i, level;
object victim;
string detail, tmp;
mixed *injuries;

victim = NRefOb(\$target_detail);
detail = NRefDetail(\$target_detail);

\$az = \$\{Chatters:AE:az:azrael\};
EmitTo(\$az, "Giving wound");
EmitTo(\$az, dump_value(\$wound_info));

if(!\$combat_data)
  \$combat_data = ccombat::datafile(\$id: victim.combat["id"]);

level = Int(\$wound_info["level"]);

/* Save the wound to the PC */
\$wound_info["woundtime"] = time();
\$injuries = Arr(Get(victim, "injuries:"+detail));
\$injuries += (\{ \$wound_info \});
Set(victim, "injuries:"+detail, \$injuries);

/* And check what adjective we should be using */
\$adjs = (\{ \});
for(i=0;i\<sizeof(\$injuries);i++) \{
  \$adjs \|= (\{ \$injuries[i]["adj"] \});
\}
\$adjs -= (\{ nil \});
if(sizeof(\$adjs)) Set(victim, "combat:injury:"+detail+":adjectives", implode(\$adjs, ", "));

/* And set the new adjective for targetting */
/* Set(victim, "details:"+detail+":adjective:"+\$wound_info["adj"], TRUE); */
EmitTo(\$az, "Added "+dump_value(\$wound_info["adj"]));

/* Has this level of wound led to any status changes? */
if(level \>= 1 \&\& level \<= 4) \{
  /* They are hurt */
  /* Being hurt lasts 2 weeks, unless first aid is applied */
  if(!victim."status:hurt") EmitTo(victim, TAG("You have been HURT.", "imp"));
  ironclaw::set_prop(\$obj: victim, \$prop: "status:hurt", \$value: Int(victim."status:hurt")+1, \$timer: 60*60*24*7*2);
\}
if(level \>= 3 \&\& level \<= 4) \{
  /* They are shaken */
  /* Being shaken lasts 2 hours, unless rallied */
  if(!victim."status:shaken") \{
    EmitTo(victim, TAG("You have become SHAKEN.", "imp"));
    tmp = oneof(Describe(victim)+" visibly pales.", Describe(victim)+"'s hand begins to tremble.");
    if(victim."base:environment") EmitIn(victim."base:environment", tmp, victim);
  \}
  ironclaw::set_prop(\$obj: victim, \$prop: "status:shaken", \$value: Int(victim."status:shaken")+1, \$timer: 60*60*2);
  ironclaw::set_prop(\$obj: victim, \$prop: "status:recently_shaken", \$value: time(), \$timer: 60*60*2);
\}
if(level \>= 5) \{
  /* They are injured */
  if(FindMerry(victim, "lib", "take_combat_damage_dying"))
    if(!Call(victim, "take_combat_damage_dying", \$char: \$char)) return (\{ level, \$wound_info["name"] \});

  /* Being injured lasts 2 weeks, unless first aid is applied */
  /* (we need better code than this longer-term, so we can have healers treat injuries) */
  if(!victim."status:injured") EmitTo(victim, TAG("You have been INJURED.", "imp"));
  ironclaw::set_prop(\$obj: victim, \$prop: "status:injured", \$value: Int(victim."status:injured")+1, \$timer: 60*60*24*2);
\}

if(level \>= 9) \{
  /* They are dead */
  if(FindMerry(victim, "lib", "take_combat_damage_dying"))
    if(!Call(victim, "take_combat_damage_dying", \$char: \$char)) return (\{ level, \$wound_info["name"] \});

  EmitTo(\$az, "Killed "+dump_value(victim));
  /* if(!victim."status:dead") victim."status:dead" = time(); */
  EmitTo(victim, TAG("You are now DEAD.", "imp"));
  EmitTo(victim, "(Don't worry, death isn't permanent. After some time "+Describe(victim)+" will be resurrected. The amount of time before resurrection depends on what is happening in-character, and can vary from hours to weeks.)");
  ccombat::remove_from_combat(\$fighter: victim);
  EmitTo(\$az, "Removed them from combat");
  Call(\$\{Ironclaw:Lib:Characters:Death\}, "die", \$victim: victim);
  EmitTo(\$az, "... and killed them");
\} else if(level \>= 7) \{
  /* They are dying */
  if(FindMerry(victim, "lib", "take_combat_damage_dying"))
    if(!Call(victim, "take_combat_damage_dying", \$char: \$char)) return (\{ level, \$wound_info["name"] \});

  EmitTo(\$az, "Killed (dying) "+dump_value(victim));
  if(!victim."status:dying") victim."status:dying" = time();
  EmitTo(victim, TAG("You are now DYING. Seek immediate medical attention.", "imp"));
  EmitTo(victim, "(Don't worry, death isn't permanent. After some time "+Describe(victim)+" will be resurrected. The amount of time before resurrection depends on what is happening in-character, and can vary from hours to weeks.)");
  
  ccombat::remove_from_combat(\$fighter: victim);
  EmitTo(\$az, "Removed them from combat");

  \$dying_id = victim."status:dying";
  \$delay(60*60*4, (\{ level, \$wound_info["name"] \}), "cd90"); /* They have 4 hours to find treatment */
  if(\$dying_id != victim."status:dying") return TRUE;

  if(victim."status:dying") \{
    EmitTo(victim, TAG("Your wounds are overwhelming you. You can tell the end is near.", "imp"));
    \$delay(60, TRUE, "8237");
    EmitTo(victim, TAG("As the pain builds, your vision starts to blacken.", "imp"));
    \$delay(60, TRUE, "d9b8");
    EmitTo(victim, TAG("Finally, the pain ends, as you slip into death.", "imp"));
    EmitTo(victim, "(Don't worry, death isn't permanent. After some time "+Describe(victim)+" will be resurrected. The amount of time before resurrection depends on what is happening in-character, and can vary from hours to weeks.)");
    Call(\$\{Ironclaw:Lib:Characters:Death\}, "die", \$victim: victim);
  \}
\}

return (\{ level, \$wound_info["name"] \});
      </Core:Property>
      <Core:Property property="merry:lib:heal_all">
         X[M] /* heal all injuries */  
/* Should always return TRUE */  
  
\$doom = \$\{Chatters:IC:de:death\};  
/* EmitTo(\$doom, "STARTING Ironclaw:Lib:Characters:Injuries - merry:lib:heal_all"); */ 
  
/* sanity checking */  
if(!\$character) error("No body object passed via the \$character variable");  
if(typeof(\$detail_name) != T_STRING) error("No detail name passed via the \$detail_name variable");  
if(typeof(\$injuries) != T_MAPPING) error("No injuries mapping passed via the \$injuries variable");  
if(typeof(\$injury_type) != T_STRING) error("No injuries type passed via the \$injury_type variable");  
if(typeof(\$index) != T_INT) error("No injuries index passed via the \$index variable");  
  
/* EmitTo(\$doom, "Ironclaw:Lib:Characters:Injuries - merry:lib:heal_all - PASSED SANITY"); */ 
  
\$injury = \$injuries["injuries"][\$injury_type][\$index];  
  
/* reduce the value of the injury completely*/  
if(\$injury[0] \> 0) \{  
 \$injury[0] = 0;  
 /* and since we're reducing this injury, also reduce the total */  
 if(\$injuries["total"] \&\& \$injuries["total"] \> 0)  
  \$injuries["total"] = 0;  
 /* and don't forget to reduce the combat:damage property */  
 if(\$character."combat:damage" \&\& \$character."combat:damage" \> 0)  
  \$character."combat:damage" = 0;  
\}  
  
/* EmitTo(\$doom, "Ironclaw:Lib:Characters:Injuries - merry:lib:heal_all - STAGE ONE"); */ 
  
/* has this injury been healed?  It should have been*/  
if(\$injury[0] \<= 0) \{  
 /* remove the healed injury */  
 \$injuries["injuries"][\$injury_type] -= (\{ \$injuries["injuries"][\$injury_type][\$index] \});  
 return TRUE;  
\}  
  
/* EmitTo(\$doom, "Ironclaw:Lib:Characters:Injuries - merry:lib:heal_all - STAGE TWO"); */ 
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:heal_injury">
         X[M] /* heal a point of this injury */
/* if the injury is completely healed, return TRUE */
/* if the injury is not yet completely healed, return FALSE */

/* sanity checking */
if(!\$character) error("No body object passed via the \$character variable");
if(typeof(\$detail_name) != T_STRING) error("No detail name passed via the \$detail_name variable");
if(typeof(\$injuries) != T_MAPPING) error("No injuries mapping passed via the \$injuries variable");
if(typeof(\$injury_type) != T_STRING) error("No injuries type passed via the \$injury_type variable");
if(typeof(\$index) != T_INT) error("No injuries index passed via the \$index variable");

\$injury = \$injuries["injuries"][\$injury_type][\$index];

/* reduce the value of the injury */
if(\$injury[0] \> 0) \{
 \$injury[0]--;
 /* and since we're reducing this injury, also reduce the total */
 if(\$injuries["total"] \&\& \$injuries["total"] \> 0)
  \$injuries["total"]--;
 /* and don't forget to reduce the combat:damage property */
 if(\$character."combat:damage" \&\& \$character."combat:damage" \> 0)
  \$character."combat:damage"--;
\}

/* has this injury been healed? */
if(\$injury[0] \<= 0) \{
 /* remove the healed injury */
 \$injuries["injuries"][\$injury_type] -= (\{ \$injuries["injuries"][\$injury_type][\$index] \});
 return TRUE;
\}

return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:healing-cycle">
         X[M] /* OLD HEALING SYSTEM! NOT IN USE! */

/* heals characters */
/* this script should be called by cron every hour */

object character, *characters;
int index, i, j, k, is_injured, total_hp, healing_per_tick, damage, fatigue;
string *injured_parts, *injury_types, detail_name;

/* OLD HEALING SYSTEM! NOT IN USE! */
return TRUE;

\$az = \$\{Chatters:AE:az:azrael\};
EmitTo(\$az, "Starting healing.");

/* remove nil characters from the list */
this.characters -= (\{ nil \});
characters = this.characters;

/* Loop through the injured characters list */
for(index=0;index\<sizeof(characters);index++) \{
    character = characters[index];
    EmitTo(\$az, "Healing " + dump_value(character));
    total_hp = Int(\$actor."trait:body"+3+Int(\$actor."career:combat:endurance") + Int(\$actor."skill:combat:endurance"));
    healing_per_tick = Int(ceil(Flt(total_hp)/10.0));

    is_injured = FALSE;
    k = FALSE;

    if(character."combat:fatigue" \< 0) character."combat:fatigue" = 0;

   /* EmitTo(\$az, Describe(character)+" is injured."); */

    /* if they have fatigue, heal it */
    if(!random(2) \&\& character."combat:fatigue" \&\& character."combat:fatigue" \>= 1) \{

        fatigue = character."combat:fatigue";
        fatigue -= healing_per_tick;

        if(fatigue \<= 0) fatigue = 0;

        character."combat:fatigue" = fatigue;

        is_injured = TRUE;
    \}

    /* Now heal some injuries */
    if(sizeof(map_indices(prefixed_map(Get(character, "*"), "combat:injury:"))))\{

        injured_parts = map_indices(prefixed_map(Get(character, "*"), "combat:injury:"));

        while(sizeof(injured_parts)) \{
            /* heal the injuries in a random order */
            detail_name = injured_parts[random(sizeof(injured_parts))];

          /*  EmitTo(\$az, "Checking "+detail_name); */

            /* is this a proper injury detail or an adjective for an injury? */
            if(sizeof(explode(detail_name, ":")) == 3) \{
                /* get the injuries for this detail */
                \$injuries = Get(character, detail_name);

                if(!\$injuries) \{
                    injured_parts -= (\{ detail_name \});
                    continue;
                \}

                /* code to correct old-style properties */
                if(typeof(\$injuries) == T_STRING) \{
                    Set(character, detail_name, nil);
                    continue;
                \}

            \} else \{
                /* not a proper injury detail. Probably an adjective for the detail */
                /* continue looping */
                injured_parts -= (\{ detail_name \});
                continue;
            \}

            /* run any complications for this body part */
            if(\$injuries["complications"]) \{
                /* NOT WRITTEN YET */
                /* mark them as injured. Characters with complications shouldn't leave the list */
                is_injured = TRUE;
            \}

            /* try to heal the specific injuries */
            if(\$injuries["injuries"]) \{
                /* we found some injuries, so record that they were injured */
                is_injured = TRUE;

                /* loop through their injuries on this body part */
                injury_types = map_indices(\$injuries["injuries"]);

                for(i = 0; i \< sizeof(injury_types); i++) \{
                    for(j = 0;\$injuries["injuries"] \&\& j\<sizeof( \$injuries["injuries"][injury_types[i]] ); j++) \{
                        /* check if we should heal this injury, and if so, how much */
                        /* have we already healed a point this hour? */
                        if(!k) \{
                            /* do we heal it? */

                            if(FALSE) \{
                                /* if they have a balm */
                                /* NOT WRITTEN YET */
                            \}

                            if(\$injuries["bandaged"] \&\& \$injuries["bandaged"][0] \> 0) \{
                                /* if they have a bandage */
                                /* reduce the number of "heals" left */
                                \$injuries["bandaged"][0]--;

                                if(!random(3)) \{
                                    k = TRUE;
                                \}
                            \} else \{
                                if(!random(36)) \{
                                    k = TRUE;
                                \}
                            \}

                            /* If k is set, heal the injury */
                            if(k) \{
                            /*    EmitTo(\$az, "Healing " + dump_value(detail_name)); */

                                /* heal this */
                                if(::heal_injury(\$character: character, \$detail_name: detail_name, \$injuries: \$injuries, \$injury_type: injury_types[i], \$index: j)) \{
                                    /* injury healed. Reduce j */
                                    j--;

                                    /* check if we should remove the injuries type mapping */
                                    if(!sizeof(\$injuries["injuries"][injury_types[i]])) \{
                                        \$injuries["injuries"][injury_types[i]] = nil;
                                        i--;

                                        /* should we remove the injuries mapping altogether? */
                                        if(!sizeof(map_indices(\$injuries["injuries"]))) \{
                                            \$injuries["injuries"] = nil;
                                            /* and for good measure, let's get rid of "total" too */
                                            if(\$injuries["total"] \<= 0) \$injuries["total"] = nil;
                                        \}
                                    \}
                                \}

                                /* if they  have damage, heal it */
                                if(!random(2) \&\& character."combat:damage" \&\& character."combat:damage" \>= 1) \{

                                    damage = character."combat:damage";
                                    damage -= healing_per_tick;

                                    if(damage \<= 0) damage = 0;

                                    character."combat:damage" = damage;
                                \}
                            \}

                        \} /* are we clear to heal another injury? */
                    \}
                \}
            \}

            injured_parts -= (\{ detail_name \});

            if(!sizeof(map_indices(\$injuries))) \{
                /* remove this mapping if it's empty */
                Set(character, detail_name, nil);
            \}

        \} /* loop per injured body part */
    \}

    /* are they still injured, or should they be removed from the list? */
    if(!is_injured) \{
        /* not injured. Check if they have combat damage */
        if(!character."combat:damage") \{
            this.characters -= (\{ character \});
        \}
    \}
\} /* loop per character */

EmitTo(\$az, "Finished healing");
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:healing_death">
         X[M] /* this script should be called upon resurrection */   
   
object character, *characters;   
int index, i, j, k, is_injured;   
string *injured_parts, *injury_types, detail_name;   
   
\$doom = \$\{Chatters:IC:de:death\};   
/* EmitTo(\$doom, "Ironclaw:Lib:Characters:Injuries - merry:lib:healing_death - STARTUP"); */ 
   
   
 character = \$victim;   
 is_injured = FALSE;   
 k = TRUE;   
   
/* EmitTo(\$doom, "Ironclaw:Lib:Characters:Injuries - merry:lib:healing_death - STAGE ONE"); */ 
 /* if they have fatigue, heal it  completely*/   
 if(character."combat:fatigue" \&\& character."combat:fatigue" \> 0) \{   
  /* remove fatigue */   
  character."combat:fatigue" = 0;   
   
  /* mark them as injured so we dont remove them from the list while healing fatigue */   
  is_injured = TRUE;   
 \} else if(sizeof(map_indices(prefixed_map(Get(character, "*"), "combat:injury:")))) \{   
  /* heal the injuries in a random order */   
  injured_parts = map_indices(prefixed_map(Get(character, "*"), "combat:injury:"));   
  while(sizeof(injured_parts)) \{   
   detail_name = injured_parts[random(sizeof(injured_parts))];   
   /*EmitTo(\\\$az, "Checking "+detail_name);*/   
   /* is this a proper injury detail or an adjective for an injury? */   
   if(sizeof(explode(detail_name, ":")) == 3) \{   
    /* get the injuries for this detail */   
    \$injuries = Get(character, detail_name);   
    injured_parts -= (\{ detail_name \});   
    if(!\$injuries) continue;   
   
    /* code to correct old-style properties */   
    if(typeof(\$injuries) == T_STRING) \{   
     Set(character, detail_name, nil);   
     continue;   
    \}   
   
   \} else \{   
    /* not a proper injury detail. Probably an adjective for the detail */   
    /* continue looping */   
    injured_parts -= (\{ detail_name \});   
    continue;   
   \}   
   /* run any complications for this body part */   
   if(\$injuries["complications"]) \{   
    /* NOT WRITTEN YET */   
    /* mark them as injured. Characters with complications shouldnt leave the list */   
    is_injured = TRUE;   
   \}   
   /* try to heal the specific injuries */   
   if(\$injuries["injuries"]) \{   
    /* we found some injuries, so record that they were injured */   
    is_injured = TRUE;   
    /* loop through their injuries on this body part */   
    injury_types = map_indices(\$injuries["injuries"]);   
    for(i=0;i\<sizeof(injury_types);i++) \{   
     for(j=0;\$injuries["injuries"] \&\& j\<sizeof( \$injuries["injuries"][injury_types[i]] );j++) \{   
      /* check if we should heal this injury, and if so, how much */   
      /* check for complications specific to this injury */   
       /* NOT WRITTEN YET */   
        if(k) \{ /* Was k set to TRUE? Should they heal? */   
         /* heal this */   
         if(::heal_all(\$character: character, \$detail_name: detail_name, \$injuries: \$injuries, \$injury_type: injury_types[i], \$index: j)) \{   
          /* injury healed. Reduce j */   
          j--;   
          /* check if we should remove the injuries type mapping */   
          if(!sizeof(\$injuries["injuries"][injury_types[i]])) \{   
           \$injuries["injuries"][injury_types[i]] = nil;   
           i--;   
           /* should we remove the injuries mapping altogether? */   
           if(!sizeof(map_indices(\$injuries["injuries"]))) \{   
            \$injuries["injuries"] = nil;   
            /* and for good measure, lets get rid of "total" too */   
            if(\$injuries["total"] \<= 0) \$injuries["total"] = nil;   
           \}   
          \}   
       \} /* are we clear to heal another injury? */   
      \}   
     \}   
    \}   
   \}   
   if(!sizeof(map_indices(\$injuries))) \{   
    /* remove this mapping if its empty */   
    Set(character, detail_name, nil);   
   \}   
  \} /* loop per injured body part */   
 \}   
 /* are they still injured, or should they be removed from the list? */   
 if(!is_injured) \{   
  /* not injured. Check if they have combat damage */   
  if(character."combat:damage") \{   
   character."combat:damage" = 0;   
   if(character."combat:damage" \<= 0) \{   
    character."combat:damage" = nil;   
    this.characters -= (\{ character \});   
   \}   
  \} else \{   
   /* not even any combat damage. Remove from the list */   
   this.characters -= (\{ character \});   
  \}   
 \}   
/* EmitTo(\$doom, "Ironclaw:Lib:Characters:Injuries - merry:lib:healing_death - WRAPUP"); */ 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:show_all_injuries">
         X[M] /* Gimli-Powered! Do not edit! Edit gimli:lib:show_all_injuries instead! */
/* When looking at the PCs "injuries" */
int i;
string output, *injuries_list, text;
object victim;
\$az = \$\{Chatters:AE:az:azrael\};

if(!\$target) return nil;

/* Get a list of injured body parts */
victim = NRefOb(\$target);
injuries_list = map_indices(prefixed_map(Get(victim, "*"), "injuries:"));

/* Output the injuries description for each detail */
output = "";
for(i=0; i\<sizeof(injuries_list); i++) \{
  \$target = NewNRef(victim, injuries_list[i][9..]);
  text = ::show_injuries(\$target: \$target);
  if(text \&\& text[0..2] == "It ") \{
    output += capitalize(Describe(\$target, nil, \$actor)+text[2..])+"\\n";
  \} else \{
    output += capitalize(text)+"\\n";
  \}
\}

if(output == "" \&\& \$no_uninjured_msg) return nil;
if(output == "") return Describe(victim) + " does not appear to be injured.";
return output;
      </Core:Property>
      <Core:Property property="merry:lib:show_injuries">
         X[M] /* Gimli-Powered! Do not edit! Edit gimli:lib:show_injuries instead! */
/* show injuries for this body part */
string output;
int i, sz;

output = "";
\$victim = NRefOb(\$target);
\$detail = NRefDetail(\$target);

/* NEW INJURIES CODE */

/* are there any injuries? */
if(Get(\$victim, "injuries:"+\$detail)) \{
  \$injuries = Get(\$victim, "injuries:"+\$detail);
  if(typeof(\$injuries) == T_ARRAY \&\& !sizeof(\$injuries)) \{
    /* No injuries, this is just an empty array. Remove it. */
    Set(\$victim, "injuries:"+\$detail, nil);
    return output;
  \}
\} else \{
  return output;
\}

/* Sort through finding types of injuries */
\$injury_types = ([ ]);
\$bandages = (\{ \});

for(i=0;i\<sizeof(\$injuries);i++) \{
  \$injury = \$injuries[i];
  if(!\$injury["type"]) \$injury["type"] = "injury"; /* Sanity check */
  
  if(\$injury["bandaged"]) \{
    \$bandages \|= (\{ \$injury["bandaged"] \});
  \} else \{
  
  /* TEMPORARY - figure out the type of the injury if it wasn't recorded. (New injuries should record this!) */
  /* if(!\$injury["type"]) \{ */
  /*  if(\$injury["adj"] == "bruised") */
  /*    \$injury["type"] = "bruise"; */
  /*  else */
  /*    \$injury["type"] = "injury"; */
  /* \} */

    if(!\$injury_types[\$injury["type"]]) \$injury_types[\$injury["type"]] = (\{ \});
    \$injury_types[\$injury["type"]] += (\{ \$injury \});
  \}
\}

/* Convert each type of injury into a description */
sz = sizeof(map_indices(\$injury_types));
for(i=0;i\<sz;i++) \{
  \$data = \$injury_types[map_indices(\$injury_types)[i]];
  if(sizeof(\$data) \> 1) \{
    /* Multiple injuries, just list the number */
    \$plural = \$data[0]["type"]; /* Need to pluralize this word! */
    if(lower_case(\$plural[strlen(\$plural)-1..strlen(\$plural)-1]) == "y") \{
     /* If the last character is a "y" change to "ies" - e.g. injury -\> injuries */
     \$plural = \$plural[..strlen(\$plural)-2]+"ies";
    \} else \{
      /* Otherwise, just add "s" */
      \$plural = \$plural+"s";
    \}

    \$injury_types[map_indices(\$injury_types)[i]] = "has "+desc_cardinal(sizeof(\$data))+" "+\$plural; 
  \} else if(sizeof(\$data) == 1) \{
    /* Only one injury of this type, so we can use the description */
    \$injury_types[map_indices(\$injury_types)[i]] = \$data[0]["desc"];
  \} else \{
    /* Something really strange happened! */
    \$injury_types[map_indices(\$injury_types)[i]] = nil;
  \}
\}

/* Is it bandaged? */
if(sizeof(\$bandages)) output += "It has been bandaged with "+implode(\$bandages, " and ");

/* List out each of the descriptions */
if(sizeof(map_indices(\$injury_types))) \{
  if(!output \|\| output == "")
    output += "It ";
  else
    output += " and ";
\}

sz = sizeof(map_indices(\$injury_types));
for(i=0;i\<sz;i++) \{
  /* if(i==0) output += "It "; */
  if(i!=0 \&\& i==sz-1) output += " and ";
  else if(i!=0) output += ", ";
  output += \$injury_types[map_indices(\$injury_types)[i]];
\}
if(output) output += ".";

return output;

return dump_value(\$injury_types);
return dump_value(\$injuries);

return "Hi? "+dump_value(\$victim)+" and "+dump_value(\$detail);



return output;


/* OLD CODE GOES HERE! */

/* are there any injuries? */
if(Get(\$victim, "combat:injury:"+\$detail)) \{
    \$injuries = Get(\$victim, "combat:injury:"+\$detail);
\} else \{
    return output;
\}

/* is there any information in the injuries mapping? */
if(typeof(\$injuries) != T_MAPPING \|\| !sizeof(map_indices(\$injuries))) \{
    Set(\$victim, "combat:injury:"+\$detail, nil);
    return output;
\}

/* what is the observers medical skill? */
\$firstaid = Int(\$actor."skill:mental:first-aid");

if(Int(\$actor."career:mental:first-aid") \> \$firstaid)
    \$firstaid = Int(\$actor."career:mental:first-aid");

/* is the detail plural? */
if(Get(\$victim, "details:"+\$detail+":plural")) \{
    \$isare = " are";
\} else \{
    \$isare = " is";
\}

/* is it bandaged? */
if(\$injuries["bandaged"]) \{
 /* describe the bandage */
 if(sizeof(\$injuries["bandaged"]) \> 1)
  \$bandage = \$injuries["bandaged"][1]+" ";
 if(sizeof(\$injuries["bandaged"]) \> 2)
  \$bandage = \$injuries["bandaged"][2]+" "+\$bandage;
 if(sizeof(\$injuries["bandaged"]) \> 3) \{
  \$bandage = \$bandage+\$injuries["bandaged"][3];
 \} else \{
  \$bandage = \$bandage+"bandage";
 \}

 if(\$injuries["bandaged"][0] \< 0) \{
  /* If the bandage has been disturbed */
  return capitalize(Describe(\$target, nil, \$actor))+\$isare+" covered with a bloody "+\$bandage+". The bandage looks like it really needs to be changed.";
 \} else if(\$injuries["bandaged"][0] == 0) \{
  /* if the bandage is finished */
  return capitalize(Describe(\$target, nil, \$actor))+\$isare+" covered with a grubby "+\$bandage+". The bandage looks like it might need to be changed.";
 \} else if(\$firstaid \>= 5 \&\& \$injuries["bandaged"][0] \< 3 \&\& \$injuries["total"] \&\& \$injuries["total"] \> \$injuries["bandaged"][0]) \{
  /* if the bandage is needs replacing soon */
  return capitalize(Describe(\$target, nil, \$actor))+\$isare+" covered with a slightly grubby "+\$bandage+". The bandage looks like it might need to be changed soon.";
 \} else \{
  return capitalize(Describe(\$target, nil, \$actor))+\$isare+" covered with a "+\$bandage+".";
 \}
\}

/* example: Property: combat:injury:calves = ([ "bandaged":(\{ 1, "silk", "blue", "wrapping" \}), "total":3 ]) */

/* grab the basic complications info */
if(\$injuries["complications"]) \{
 \$basiccomplications = \$injuries["complications"];
\} else \{
 \$basiccomplications = ([ ]);
\}

/* do we have any injuries to display? */
if(\$injuries["injuries"] \&\& sizeof(map_indices(\$injuries["injuries"]))) \{
 for(\$i = 0; \$i\<sizeof(map_indices(\$injuries["injuries"]));\$i++) \{
  \$injury = Arr(\$injuries["injuries"][map_indices(\$injuries["injuries"])[\$i]]);

  /* if more than one of this injury type, count them */
  if(sizeof(\$injury) \> 1) \{
      if(sizeof(\$injury) \> \$firstaid+2) \{
          output += "You see multiple "+Str(map_indices(\$injuries["injuries"])[\$i])+"s. ";
      \} else \{
          output += "You see "+desc_cardinal(sizeof(\$injury))+" "+Str(map_indices(\$injuries["injuries"])[\$i])+"s. ";
      \}
  \}

  /* find the worst injury to describe */
  \$index = -1;
  \$max = 0;
  for(\$j=0;\$j\<sizeof(\$injury);\$j++) \{
      if(\$injury[\$j][0] \>= \$max) \{
          \$index = \$j;
          \$max = \$injury[\$j][0];
      \}
  \}

  if(\$index != -1) \{
      /* now describe this injury */
      \$injury = \$injury[\$index];
      if(\$injury[1]["location"]) \{
          \$location = \$injury[1]["location"];
      \} else \{
          \$location = nil;
      \}

      if(\$injury[1]["weapon"]) \{
          \$weapon = \$injury[1]["weapon"];
      \} else \{
          \$weapon = nil;
      \}

      if(\$weapon \&\& FindMerry(\$weapon, "lib", "description:hurt")) \{
          output += Call(\$weapon, "description:hurt");
      \} else if(\$location \&\& FindMerry(\$location, "lib", "description:"+map_indices(\$injuries["injuries"])[\$i]) )\{
          output += Call(\$location, "description:"+map_indices(\$injuries["injuries"])[\$i] );
      \} else if( FindMerry(this, "lib", "description:"+map_indices(\$injuries["injuries"])[\$i]) ) \{
          output += Call(this, "description:"+map_indices(\$injuries["injuries"])[\$i] );
      \} else if( FindMerry(this, "lib", "description:hurt") ) \{
          output += Call(this, "description:hurt");
      \}
      output += " ";
  \}
 \}
\}

/* example: Property: combat:injury:calves = ([ "injuries":([ "cut":(\{ (\{ 3, ([ "location":\<Ironclaw:Lib:Combat:New:hitdescription\> ]), ([ ]) \}), (\{ 1, ([]), ([]) \}) \}) ]), "total":3 ]) */

/* do we have any further complications to display? */
if(sizeof(map_indices(\$basiccomplications))) \{
 for(\$i=0;\$i\<sizeof(map_indices(\$basiccomplications));\$i++) \{
  \$complication = \$basiccomplications[map_indices(\$basiccomplications)[\$i]];
  if( \$complication["location"] \&\& FindMerry(\$complication["location"], "lib", "description:"+map_indices(\$basiccomplications)[\$i]) ) \{
   output += Call(\$complication["location"], "description:"+map_indices(\$basiccomplications)[\$i] );
  \} else if( FindMerry(this, "lib", "description:"+map_indices(\$basiccomplications)[\$i]) ) \{
   output += Call(this, "description:"+map_indices(\$basiccomplications)[\$i] );
  \}
 \}
\}

/* example: Property: combat:injury:calves = ([ "injuries":([ "cut":(\{ (\{ 3, ([ ]), ([ ]) \}) \}) ]), "total":3, "complications":([ "infection":([ "increasing":1, "value":12 ]) ]) ]) */


/* example: Property: combat:injury:calves = ([ "injuries":([  ]), "total":3 ]) */


/* all in one example: Property: combat:injury:calves = ([ "bandaged":(\{ 1, "silk", "blue", "wrapping" \}), "total":3 ]) */


return output;



/*output += dump_value(args);*/
for(i=0;i\<sizeof(\$injuries);i++) \{
 \$injury = \$injuries[i];
 output += UnSAM(Get(\$injury["ob"], "description:"+\$injury["injury"]+":"+\$injury["id"]))+" ";
\}


return output;
      </Core:Property>
      <Core:Property property="merry:lib:takendamage">
         X[M] \$endur = Int(\$char."career:combat:endurance") + Int(\$char."skill:combat:endurance");

/* are they too injured to keep going? */
if(Int(\$char."trait:body")+3+\$endur \< Int(\$char."combat:damage")) \{

  /* are they fighting? */
  if(\$char."combat:fighting") \{
    EmitTo(\$char, "You are too injured to continue fighting.");
    Social(\$char, "breakcombat");
  \}

  /* is there a script to run when they are this injured? */
  if(FindMerry(\$char, "lib", "die"))
    Call(\$char, "die");
\} else if(Int(\$char."trait:body")+3+\$endur \< Int(\$char."combat:damage") + Int(\$char."combat:fatigue")) \{
  /* if they are too injured + tired to fight */
  EmitTo(\$char, "You are too tired to continue fighting right now.");
  Social(\$char, "breakcombat");
\}
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:unbandage-dob">
         X[M] /* Gimli-Powered! Do not edit! Edit gimli:react-post:unbandage-dob instead! */
/* Unbandaging an injury? */
\$az = \$\{Chatters:AE:az:azrael\};
EmitTo(\$az, "Unbandaging");
EmitTo(\$az, dump_value(\$target));

EmitTo(\$az, dump_value( NRefOb(\$target) ));
EmitTo(\$az, dump_value( NRefDetail(\$target) ));

/* Remove bandaged adjective */
Set(NRefOb(\$target), "details:"+NRefDetail(\$target)+":adjective:bandaged", nil);
Set(NRefOb(\$target), "details:"+NRefDetail(\$target)+":sname:bandage", nil);
Set(NRefOb(\$target), "details:"+NRefDetail(\$target)+":pname:bandages", nil);
Set(NRefOb(\$target), "combat:injury:"+NRefDetail(\$target)+":adjectives", nil);

/* Is there injuries info to remove? */
\$info = Get(NRefOb(\$target), "injuries:"+NRefDetail(\$target));
if(\$info) \{
  /* Check if any of these details are bandaged */
  for(\$i=0;\$i\<sizeof(\$info);\$i++) \{
    if(!\$info[\$i]) continue;
    EmitTo(\$az, dump_value(\$info[\$i]));
    if(\$info[\$i]["bandaged"]) \{
      /* Remove this bandage */
      \$level = \$info[\$i]["level"] ? \$info[\$i]["level"] : 1;
      if(time() \> \$info[\$i]["woundtime"] + 60*60*20 * \$level
      \&\& time() \> \$info[\$i]["bandaged_time"] + 60*60*6) \{
        /* Wound is fully healed */
        \$info[\$i] = nil;
      \} else \{
        /* Not fully healed yet */
        \$info[\$i]["bandaged"] = nil;
        \$info[\$i]["bandaged_time"] = nil;
      \}
    \}
  \}
  /* Just in case we removed any injuries, clear the array */
  \$info -= (\{ nil \});
  if(sizeof(\$info)) Set(NRefOb(\$target), "injuries:"+NRefDetail(\$target), \$info);
  else Set(NRefOb(\$target), "injuries:"+NRefDetail(\$target), nil);
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:bandage-using">
         X[M] /* Gimli-Powered! Do not edit! Edit gimli:react:bandage-using instead! */
/* set the body part to be bandaged */
object victim;
string detail, *details;
int i, j;

/* Check that the kit has supplies left */
/* NOT WRITTEN YET */

\$az = \$\{Chatters:AE:az:azrael\};
EmitTo(\$az, "Bandaging");

/* check that they are applying the bandage to a valid target */
if(\$this."base:environment" != \$actor) \{
  EmitTo(\$actor, "You must be holding "+Describe(this, nil, \$actor)+" to use it.");
  return FALSE;
\}

/* check that they are applying it to only one thing */
if(!\$dob \|\| !sizeof(\$dob)) \{
  EmitTo( \$actor, "What do you intend to apply " +Describe(this, nil, \$actor)+" to?" );
  return FALSE;
\} else if(\$dob \&\& sizeof(\$dob) \> 1) \{
  EmitTo( \$actor, "You may only apply " +Describe(this, nil, \$actor)+" to one person at a time." );
  return FALSE;
\}

/* check they are targeting a character */
if(!NRefOb(\$dob[0])."udat:possessed") \{
  EmitTo(\$actor, "You can't apply a bandage to "+Describe(\$dob[0])+".");
  return FALSE;
\}

/* Are they in a fight? */
/* NOT WRITTEN YET */
/* Can't bandage someone that's in combat unless you're also in that combat */
/* Can't bandage someone if you are in combat unless it's your turn and you have an action available */
/* Do a dice roll to see if mid-combat first aid is successful */
/* Gotta figure out something so people don't just break from combat, get bandaged, then re-enter combat */

victim = NRefOb(\$dob[0]);
detail = NRefDetail(\$dob[0]);

if(detail != "default") \{
  details = (\{ "injuries:"+detail \});
\} else \{
  /* Get a list of injuries */
  details = map_indices(prefixed_map(Get(victim, "*"), "injuries:"));
\}

/* Check if any injuries need bandaging */
\$bandaging_needed = (\{ \});
for(i=0; i\<sizeof(details); i++) \{
  detail = details[i];
  \$injuries = Get(victim, detail);
  
  EmitTo(\$az, "Detail is: "+dump_value(detail));
  EmitTo(\$az, "Injuries are: "+dump_value(\$injuries));

  if(\$injuries) \{
    for(j=0; j\<sizeof(\$injuries); j++) \{
      \$injury = \$injuries[j];
      \$adjs = (\{ \});
      if(!\$injury["bandaged"] \|\| !\$injury["bandaged_time"]) \{
        /* Needs bandaging */
        \$bandaging_needed \|= (\{ detail \});
        \$injury["bandaged_time"] = time();
        \$injury["bandaged"] = "a cotton bandage";
        
        /* mark this detail as bandaged */
        EmitTo(\$az, "Detail: "+dump_value( detail[9..] ));
        Set(victim, "details:"+detail[9..]+":adjective:bandaged", TRUE);
        Set(victim, "details:"+detail[9..]+":sname:bandage", TRUE);
        Set(victim, "details:"+detail[9..]+":pname:bandages", TRUE);
        Set(victim, "combat:injury:"+detail[9..]+":adjectives", "bandaged"); /* Should find a better way to calculate this? Should some injuries adjectives (e.g. "broken") show through bandages? */
      \}
    \}
  \}
\}

if(!sizeof(\$bandaging_needed)) \{
  EmitTo(\$actor, Describe(\$dob, nil, \$actor)+" doesn't need bandaging.");
  return FALSE;
\}

/* Bandaging successful. Allow a normal emote. */
/* ... but if they targeted the default, specify what got bandaged */
if(NRefDetail(\$dob[0]) == "default") \{
  \$dob = (\{ \});
  for(i=0; i\<sizeof(details); i++) \{
    \$dob += (\{ NewNRef(victim, details[i][9..]) \});
  \}
\}

/* Remove the hurt status */
if(victim."status:hurt") \{
  victim."status:hurt" = nil;

  /* Did we run out of supplies? Tell the healer! */
  /* NOT WRITTEN YET */
\}

if(victim != \$actor) \{
  /* Remove the injured status (until we have something better) */
  victim."status:injured" = nil;

  /* Remove the dying status (until we have something better) */
  victim."status:dying" = nil;
\}

return TRUE;















return FALSE;


/* check that they are applying it to only one PC */
if(\$iob \&\& (sizeof(\$iob) == 1)) \{

  EmitTo( \$actor, "You may only apply " +Describe(this, nil, \$actor)+" to one person at a time." );
  return FALSE;
\}
  /* check they are targetting a character */
  if(!NRefOb(\$iob[0])."udat:possessed") \{
    EmitTo(\$actor, "You can't apply a bandage to "+Describe(\$iob[0])+".");
    return FALSE;
  \}


/* check that they are applying it to only one thing */
if(\$iob \&\& (sizeof(\$iob) == 1)) \{
  /* check they are targetting a character */
  if(!NRefOb(\$iob[0])."udat:possessed") \{
    EmitTo(\$actor, "You can't apply a bandage to "+Describe(\$iob[0])+".");
    return FALSE;
  \}
  /* check they aren't targetting the default detail */
  if(NRefDetail(\$iob[0]) == "default") \{
    EmitTo(\$actor, "What body part do you intend to apply the bandage to?");
    return FALSE;
  \}
  /* check that they don't already have a bandage */
  \$injury = Get(NRefOb(\$iob[0]), "combat:injury:"+NRefDetail(\$iob[0]));
  if(\$injury \&\& \$injury["bandaged"]) \{
    EmitTo(\$actor, Describe(\$iob[0], nil, \$actor)+" is already bandaged.");
    return FALSE;
  \}
  return TRUE;
\} else if(\$iob \&\& (sizeof(\$iob) \>= 1)) \{
  EmitTo( \$actor, "You may only apply " +Describe(this, nil, \$actor)+" to one person at a time." );
  return FALSE;
\} else \{
  EmitTo( \$actor, "What do you intend to apply " +Describe(this, nil, \$actor)+" to?" );
  return FALSE;
\}


/* sanity checking already done in the pre script */

victim = NRefOb(\$iob[0]);
detail = NRefDetail(\$iob[0]);

/* what level of quality the bandaging? */
i= ironclaw::roll(\$roller: \$actor, \$skills: (\{ "mental:first-aid" \}), \$bonus: "trait:mind");
if(\$this."trait:quality" \&\& \$this."trait:quality" \< i) i = \$this."trait:quality";

if(!\$injury) \$injury = ([ ]);
\$injury["bandaged"] = (\{ i, \$this."trait:material", \$this."trait:color", "bandage" \});
Set(NRefOb(\$iob[0]), "combat:injury:"+NRefDetail(\$iob[0]), \$injury);

/* mark this detail as bandaged */
/*Set(victim, "combat:injury:"+detail+":bandaged", i);
Set(victim, "combat:injury:"+detail+":bandagename", Describe(\$this, nil, nil, STYLE_NONPOSS));
Set(victim, "combat:injury:"+detail, "been bandaged with "+Describe(\$this, nil, nil, STYLE_NONPOSS));*/
Set(victim, "combat:injury:"+detail+":adjectives", "bandaged");
Set(victim, "details:"+detail+":adjective:bandaged", TRUE);
Set(victim, "details:"+detail+":sname:bandage", TRUE);
Set(victim, "details:"+detail+":pname:bandages", TRUE);

Set(victim, "bandage:"+detail, (\{ "bandaged", "bandage", "bandages" \}) );




/*Call(\$\{Ironclaw:Lib:Characters:Injuries\}, "describe-wound", \$detail: \$iob[0]);*/

/* and the bandage is now on them. So slay it */
Slay(\$this);

if(victim.isbleeding) \{
    if(FindMerry(victim, "lib", "bleed_stop" )) \{
        Call(victim, "bleed_stop", \$actor: victim, \$bodypart: detail);
    \}
\}

return TRUE;
      </Core:Property>
      <Core:Property property="progression">
         (\{ "slight", "slight", "small", "small", nil, nil, "significant", "significant", "severe", "severe", "serious", "serious", "dire", "dire" \})
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1508198081, "jominey", "E", 1535560845, "jominey", "E", 1535560921, "jominey", "E", 1535561116, "jominey", "E", 1535561388, "jominey", "P", 1535561393, "jominey", "P", 1535561601, "jominey", "P", 1535561662, "jominey", "P", 1535561718, "jominey", "P" \})
      </Core:Property>
      <Core:Property property="x_gimliinstance">
         ([  ])
      </Core:Property>
    </Core:PCProperties>
    <Notes:Notes/>
  </Core:PropertyContainer>
</object>
