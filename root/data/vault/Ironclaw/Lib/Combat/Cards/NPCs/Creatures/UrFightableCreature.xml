<object clone="/base/obj/thing" owner="SkotOS">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="true">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.trait:color) $(this.trait:type)
          </Base:Description>
          <Base:Description type="examine">
             $(this.trait:examine)
          </Base:Description>
          <Base:Description type="look">
             $(this.trait:look)
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="beak" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             the $(this.trait:beak:adjective) beak of <describe what="$(this)"/>
          </Base:Description>
          <Base:Description type="look">
             The $(this.trait:beak:adjective) beak of <describe what="$(this)"/>.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="belly" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             the $(this.trait:belly:adjective) belly of <describe what="$(this)"/>
          </Base:Description>
          <Base:Description type="look">
             The $(this.trait:belly:adjective) underside of <describe what="$(this)"/>.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="eyes" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             the $(this.trait:eyes:adjective) eyes of <describe what="$(this)"/>
          </Base:Description>
          <Base:Description type="look">
             The $(this.trait:eyes:adjective) eyes of <describe what="$(this)"/> sit on either side of the head.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="feathers" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             the $(this.trait:feathers:adjective) feathers of <describe what="$(this)"/>
          </Base:Description>
          <Base:Description type="look">
             The $(this.trait:feathers:adjective) feathers of <describe what="$(this)"/> cover its entire body.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="fur" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             the $(this.trait:fur:adjective) fur of <describe what="$(this)"/>
          </Base:Description>
          <Base:Description type="look">
             The $(this.trait:fur:adjective) fur of <describe what="$(this)"/> covers its entire body.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="legs" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             the $(this.trait:legs:adjective) legs of <describe what="$(this)"/>
          </Base:Description>
          <Base:Description type="look">
             The $(this.trait:legs:adjective) legs of <describe what="$(this)"/>.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="skin" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             the $(this.trait:skin:adjective) hide of <describe what="$(this)"/>
          </Base:Description>
          <Base:Description type="look">
             The $(this.trait:skin:adjective) hide of <describe what="$(this)"/> covers its entire body.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="wings" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             the $(this.trait:legs:adjective) wings of <describe what="$(this)"/>
          </Base:Description>
          <Base:Description type="look">
             The $(this.trait:legs:adjective) wings of <describe what="$(this)"/>.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:combat:armor:rating">
         0
      </Core:Property>
      <Core:Property property="export:combat:fasthealing">
         1
      </Core:Property>
      <Core:Property property="export:combat:fightable">
         1
      </Core:Property>
      <Core:Property property="export:combat:unarmed">
         4
      </Core:Property>
      <Core:Property property="export:lootable">1</Core:Property>
      <Core:Property property="export:nip-core:hooks">
         ([ "decide":\<Lib:NIP:base:hooks:decide\>, "delay":\<Lib:NIP:base:hooks:delay\>, "internal":\<Lib:NIP:base:hooks:internal\>, "movement":\<Lib:NIP:lib:movement\>, "resource-control":\<Lib:NIP:lib:resource-control\> ])
      </Core:Property>
      <Core:Property property="export:nip-core:inherits">
         ([ \<Lib:NIP:base:lib:hooks\>:(\{ "lib:core:find-hook", "lib:core:register-hook", "lib:core:unregister-hook", "lib:modify:hooks", "setprop-post:hook" \}), \<Lib:NIP:base:lib:signals\>:(\{ "lib:modify:signals", "setprop-post:signal", "lib:calc_sighookpath" \}), \<Lib:NIP:base:lib:stream\>:(\{ "setprop-post:sigexecptr", "setprop-post:sigstream" \}), \<Lib:NIP:base:signals:DECIDE\>:(\{ "setprop-post:decide" \}), \<Lib:NIP:lib:autostart\>:(\{ "lib:handler:start:auto" \}), \<Lib:NIP:lib:movement\>:(\{ "lib:core_movement_exit" \}), \<Lib:NIP:lib:resource-control\>:(\{ "witness-post:login%nip:resource-control", "witness:enter-from%nip:resource-control", "witness:teleport%resource-control", "lib:entering" \}), \<Lib:NIP:lib:spawn-control\>:(\{ "act:stop" \}) ])
      </Core:Property>
      <Core:Property property="export:nip-core:libraries">
         (\{ \<Lib:NIP:base:lib:signals\>, \<Lib:NIP:base:lib:hooks\>, \<Lib:NIP:base:lib:stream\>, \<Lib:NIP:lib:resource-control\>, \<Lib:NIP:core\>, \<Lib:NIP:base:signals:DELAY\>, \<Lib:NIP:base:signals:DECIDE\>, \<Lib:NIP:base:signals:INTERNAL\>, \<Lib:NIP:lib:movement\>, \<Lib:NIP:lib:spawn-control\>, \<Lib:NIP:lib:autostart\> \})
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:movement:frequency">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:resource-control:ttl">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:resource-control:ttl_increase">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:spawn:area">
         ([ 4:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:sighookpath">
         (\{ "delay:DELAY-init", "delay:DELAY-exec", "resource-control:INTERNAL", "internal:INTERNAL-exec", "decide:DECIDE-init", "movement:DECIDE", "decide:DECIDE-exec", "decide:DECIDE-post" \})
      </Core:Property>
      <Core:Property property="export:nip-core:signals">
         ([ 10:"DELAY", 500:"INTERNAL", 1000:"DECIDE" ])
      </Core:Property>
      <Core:Property property="export:nip-core:system:revision">
         44
      </Core:Property>
      <Core:Property property="export:nip:start">
         (\{ "start", "handler:start:auto" \})
      </Core:Property>
      <Core:Property property="export:nip:trait:movement:frequency">
         10
      </Core:Property>
      <Core:Property property="export:nip:trait:resource-control:ttl">
         1800
      </Core:Property>
      <Core:Property property="export:nip:trait:resource-control:ttl_increase">
         600
      </Core:Property>
      <Core:Property property="export:trait:agility">
         6
      </Core:Property>
      <Core:Property property="export:trait:body">6</Core:Property>
      <Core:Property property="export:trait:mind">6</Core:Property>
      <Core:Property property="export:trait:speed">6</Core:Property>
      <Core:Property property="export:trait:will">6</Core:Property>
      <Core:Property property="loading">1</Core:Property>
      <Core:Property property="merry:inherit:act:start">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:act:stop">
         \<Lib:NIP:lib:spawn-control\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:calc_sighookpath">
         \<Lib:NIP:base:lib:signals\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:find-hook">
         \<Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:merry_add">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:merry_delete">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:register-hook">
         \<Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:sysupdate">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:unregister-hook">
         \<Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core_movement_exit">
         \<Lib:NIP:lib:movement\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:decide:decide-exec">
         \<Lib:NIP:base:hooks:decide\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:decide:decide-init">
         \<Lib:NIP:base:hooks:decide\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:decide:decide-post">
         \<Lib:NIP:base:hooks:decide\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:delay:delay-exec">
         \<Lib:NIP:base:hooks:delay\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:delay:delay-init">
         \<Lib:NIP:base:hooks:delay\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:entering">
         \<Lib:NIP:lib:resource-control\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:find_nip_object">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:handler:start:auto">
         \<Lib:NIP:lib:autostart\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:heartbeat">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:internal:internal-exec">
         \<Lib:NIP:base:hooks:internal\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:log">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:modify:hooks">
         \<Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:modify:libraries">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:modify:signals">
         \<Lib:NIP:base:lib:signals\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:movement:decide">
         \<Lib:NIP:lib:movement\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:ncs:handler">
         \<Lib:NIP:NCS\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:resource-control:internal">
         \<Lib:NIP:lib:resource-control\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:shutdown">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:add">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:decide">
         \<Lib:NIP:base:signals:DECIDE\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:del">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:delete">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:error">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:hook">
         \<Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:nip">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:nip-core">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:sigexecptr">
         \<Lib:NIP:base:lib:stream\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:signal">
         \<Lib:NIP:base:lib:signals\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:sigstream">
         \<Lib:NIP:base:lib:stream\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:sub">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:witness-post:login%nip:resource-control">
         \<Lib:NIP:lib:resource-control\>
      </Core:Property>
      <Core:Property property="merry:inherit:witness:enter-from%nip:resource-control">
         \<Lib:NIP:lib:resource-control\>
      </Core:Property>
      <Core:Property property="merry:inherit:witness:teleport%resource-control">
         \<Lib:NIP:lib:resource-control\>
      </Core:Property>
      <Core:Property property="merry:lib:die">
         X[M] \$this."trait:dead" = TRUE;
Set(\$this, "details:default:sname:corpse", TRUE);
Set(\$this, "details:default:pname:corpses", TRUE);
Set(\$this, "details:default:adjective:dead", TRUE);
\$this."status:hurt" = nil; 
\$this."savedprop:status:hurt" = nil; 
\$this."status:afraid" = nil; 
\$this."savedprop:status:afraid" = nil; 
\$this."status:recently_afraid" = nil; 
\$this."savedprop:status:recently_afraid" = nil; 
\$this."status:injured" = nil; 
\$this."savedprop:status:injured" = nil; 
\$this."trait:state" = "dead";
\$this."nip:trait:movement:frequency" = 0;
/*\$delay(60*5, FALSE, "d3ee");*/
\$delay(60*5, FALSE, "d943");

Call(\$this, "slay"); /* Slay any temp tables that might be lingering */

EmitIn(\$this."base:environment", Describe(\$this) + " really starts to rot.");

Slay(\$this);
      </Core:Property>
      <Core:Property property="merry:lib:find_target">
         X[M] /* When the NPC is looking for a target */  
int i;  
  
/* In this example, we want to target PCs */  
\$options = Match(this."base:environment", "pc");  
\$preferred_options = (\{ \});  
  
/* We need to convert the NRef's from the PC list into objects */  
for(i=0; i\<sizeof(\$options); i++)  
  \$options[i] = NRefOb(\$options[i]);  

/* We prefer to target PCs that are already attacking us */  
for(i=0; i\<sizeof(\$options); i++) \{  
  if(\$options[i]."udat:object" \&\& \$options[i].combat \&\& \$options[i].combat["target"] == this) \$preferred_options += (\{ \$options[i] \});  
\}  

if(sizeof(\$preferred_options)) return \$preferred_options[random(sizeof(\$preferred_options))];  

/* Next prefer to target PCs that are already in combat with us */  
for(i=0; i\<sizeof(\$options); i++) \{  
  if(\$options[i]."udat:object" \&\& \$options[i].combat) \$preferred_options += (\{ \$options[i] \});  
\} 

if(sizeof(\$preferred_options)) return \$preferred_options[random(sizeof(\$preferred_options))];  
  
/* Next prefer to target PCs that aren't dying or dead or injured */  
for(i=0; i\<sizeof(\$options); i++) \{  
  if(\$options[i]."udat:object" \&\& !\$options[i]."status:injured" \&\& !\$options[i]."status:dying" \&\& !\$options[i]."status:dead") \$preferred_options += (\{ \$options[i] \});  
\}  
if(sizeof(\$preferred_options)) return \$preferred_options[random(sizeof(\$preferred_options))];  
  
return nil;
      </Core:Property>
      <Core:Property property="merry:lib:give_combat_damage">
         X[M] /* If the npc is not a killer, knock the pc out of combat */ 
if(!\$this."combat:killer") \{ 
    if(\$damage \>= 7) \{ /* Enough to make them "dying" - Instead we'll just knock them out of combat */  
        \$delay(0.5, FALSE, "30de");  
        \$target."tmp:combat:UrFightingPerson:defeated" = Int(\$target."tmp:combat:UrFightingPerson:defeated")+1;  
 
        /* Do something when npc defeats a pc */ 
        if(FindMerry(\$this, "lib", "combat_win")) \{ 
            Call(\$this, "combat_win"); 
        \} 
 
        \$char.combat["target"] = nil;  
        ccombat::remove_from_combat(\$fighter: \$target);  
        ccombat::end_turn(\$char: \$char, \$no_loop_trigger: FALSE);  
        Set(\$this, "nip:trait:movement:frequency", 10);
        return FALSE;  
    \} 
\}  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:slay">
         X[M] if(\$this."search:temptables") \{
    \$temp = \$this."search:temptables";
    for(\$i = 0; \$i \< sizeof(\$temp); \$i++) \{
        Slay(\$temp[\$i]);
    \}
\}
      </Core:Property>
      <Core:Property property="merry:lib:start">
         X[M] if(\$this."config:search:tables") \{
    \$tablesMap = \$this."config:search:tables";
    \$tables = map_indices(\$tablesMap);
    \$tempTables = (\{ \});

    \$newtable = ([ ]);
    for(\$i = 0; \$i \< sizeof(\$tables); \$i++) \{
        if(typeof(\$tables[\$i]) == 4) \{
            \$temp = Duplicate(\$tables[\$i]);
            \$temp."core:objectname" = "Ironclaw:AAs:Adventures:Wilderness:LootTables:Temp:" + Str(time());
            \$tempTables += (\{ \$temp \});
            \$newtable[\$temp] = \$tablesMap[\$tables[\$i]];
        \} else \{
            \$newtable[\$tables[\$i]] = \$tablesMap[\$tables[\$i]];
        \}
    \}
    Set(\$this, "search:temptables", \$tempTables);
    Set(\$this, "search:tables", \$newtable);
\}
      </Core:Property>
      <Core:Property property="merry:lib:take">
         X[M] if(\$this."trait:dead" == TRUE) \{
    return TRUE;
\}

EmitTo(\$actor, Describe(\$this) + " moves out of reach.");
EmitIn(\$actor."base:environment", Describe(\$this) + " moves out of reach of " + Describe(\$actor) + ".", \$actor);

return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:take_combat_actions">
         X[M] /* When the NPC is given a turn in combat, this is the script where they decide what to do */  
int i;  

Set(\$this, "nip:trait:movement:frequency", 0);
  
if(FindMerry(\$this, "lib", "combat_action_emits")) \{ 
    Call(\$this, "combat_action_emits"); 
\} 
  
/* Pick an action */  
\$actions = copy(this.combat["options"]);  
\$actions -= (\{ nil \});  
  
/* Do we need a new target? */  
if(!this.combat["target"])  
  this.combat["target"] = ::find_target();  
  
if(!this.combat["target"]) \{  
  /* We couldn't find a target. Remove ourselves from the fight. */  
  ccombat::remove_from_combat(\$fighter: this);  
  ccombat::end_turn(\$char: this);  
  return TRUE;  
\}  
  
if(!this.combat["target"].combat) \{  
  ccombat::start_fight(\$attacker: this, \$target: this.combat["target"]);  
  \$delay(0.1, TRUE, "64a5");  
\}  
  
\$turn_id = random(1000000000);  
\$params = ([ "char":this, "taking_action":TRUE, "turn_id":\$turn_id ]);  
  
  
/* Can we attack? */  
for(i=0;i\<sizeof(\$actions);i++) \{  
  if(\$actions[i][0] == "attack") \{  
    if( Call(\$actions[i][1], \$actions[i][0], \$char: \$char, \$par: nil, \$check_valid: TRUE) ) \{  
      return Call(\$actions[i][1], \$actions[i][0], \$par: \$params);  
    \}  
  \}  
\}  
  
/* Couldn't attack. Can we do another action? */  
for(i=0;i\<sizeof(\$actions);i++) \{  
  if(\$actions[i][0] == "aim" \|\| \$actions[i][0] == "guard") \{  
    if( Call(\$actions[i][1], \$actions[i][0], \$char: \$char, \$par: nil, \$check_valid: TRUE) ) \{  
  
      if(\$actions[i][0] == "aim") \{  
        if(FindMerry(\$this, "lib", "combat_action_aim_emits")) \{
            Call(\$this, "combat_action_aim_emits");
        \} else \{
            EmitIn(this."base:environment", Describe(this)+" attempts to "+oneof("focus on "+Describe(this.combat["target"]), "line up an attack")+".");
        \}  
      \} else if(\$actions[i][0] == "guard") \{
        if(FindMerry(\$this, "lib", "combat_action_guard_emits")) \{
            Call(\$this, "combat_action_guard_emits");
        \} else \{
            EmitIn(this."base:environment", Describe(this)+" shifts defensively."); 
        \}   
      \}  
  
      return Call(\$actions[i][1], \$actions[i][0], \$par: \$params);  
    \}  
  \}  
\}  
  
/* Couldn't do anything. End the turn */  
ccombat::end_turn(\$char: this); /* Because we return TRUE above during the delay, the script won't pass for us. So we need to tell it to pass */  
return FALSE; /* This means we didn't complete our action, so the script will need to pass for us */
      </Core:Property>
      <Core:Property property="merry:lib:take_combat_damage_dying">
         X[M] /* Script run when the NPC takes enough damage to be dying */  
\$char."tmp:combat:UrFightingPerson:won" = Int(\$char."tmp:combat:UrFightingPerson:won")+1;  
 
/* Do something when npc is defeated */ 
if(FindMerry(\$this, "lib", "combat_lose")) \{ 
    Call(\$this, "combat_lose"); 
\} 
 
ccombat::remove_from_combat(\$fighter: this);  
  
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:catch-what">
         X[M] return Call(\$this, "take");
      </Core:Property>
      <Core:Property property="merry:react-pre:fight-dob">
         X[M] if(\$this."trait:dead") return FALSE;

if(FindMerry(\$this, "lib", "combat_start")) \{
    Call(\$this, "combat_start");
\} else \{
    Social(this, "turn", nil, nil, "to", \$actor);
\}

\$target = ::find_target();
\$target = \$actor;

if(!\$target) return TRUE;

ccombat::start_fight(\$attacker: this, \$target: \$target);

return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:retrieve-what">
         X[M] return Call(\$this, "take");
      </Core:Property>
      <Core:Property property="merry:react-pre:snatch-dob">
         X[M] return Call(\$this, "take");
      </Core:Property>
      <Core:Property property="merry:react-pre:take">
         X[M] return Call(\$this, "take");
      </Core:Property>
      <Core:Property property="merry:witness-post:enter-from">
         X[M] if(this.combat) return TRUE;
if(!\$actor."udat:object") return TRUE;
if(this."tmp:starting_fight") return TRUE;
if(!this."combat:aggressive") return TRUE;
this."tmp:starting_fight" = TRUE;
if(\$this."trait:dead" \|\| \$this."trait:status" == "dead") return TRUE;

ironclaw::set_prop(\$obj: \$actor, \$prop: "exit:blocked", \$value: "As you rush through, "+Describe(this)+" momentarily blocks your path.", \$timer: 3);
ironclaw::set_prop(\$obj: \$this, \$prop: "nip:trait:movement:frequency", \$value: 0, \$timer: 25); /* Don't move around while fighting someone... */
\$delay(3, TRUE, "e14b");

this."tmp:choosing_target" = nil;

\$target = ::find_target();

this."tmp:starting_fight" = nil;

if(!\$target \|\| \$target."base:environment" != this."base:environment") return TRUE;

/* Do something when attacking someone */
if(FindMerry(\$this, "lib", "combat_start")) \{
    Call(\$this, "combat_start");
\}

/* Start the fight */
ccombat::start_fight(\$attacker: \$target, \$target: this);

return TRUE;
      </Core:Property>
      <Core:Property property="ndp">
         " *** FINISHED ADDITION *** "
      </Core:Property>
      <Core:Property property="nip-core:hooks">
         ([ "decide":\<Lib:NIP:base:hooks:decide\>, "delay":\<Lib:NIP:base:hooks:delay\>, "internal":\<Lib:NIP:base:hooks:internal\>, "movement":\<Lib:NIP:lib:movement\>, "resource-control":\<Lib:NIP:lib:resource-control\> ])
      </Core:Property>
      <Core:Property property="nip-core:inherits">
         ([ \<Lib:NIP:base:lib:hooks\>:(\{ "lib:core:find-hook", "lib:core:register-hook", "lib:core:unregister-hook", "lib:modify:hooks", "setprop-post:hook" \}), \<Lib:NIP:base:lib:signals\>:(\{ "lib:modify:signals", "setprop-post:signal", "lib:calc_sighookpath" \}), \<Lib:NIP:base:lib:stream\>:(\{ "setprop-post:sigexecptr", "setprop-post:sigstream" \}), \<Lib:NIP:base:signals:DECIDE\>:(\{ "setprop-post:decide" \}), \<Lib:NIP:lib:autostart\>:(\{ "lib:handler:start:auto" \}), \<Lib:NIP:lib:movement\>:(\{ "lib:core_movement_exit" \}), \<Lib:NIP:lib:resource-control\>:(\{ "witness-post:login%nip:resource-control", "witness:enter-from%nip:resource-control", "witness:teleport%resource-control", "lib:entering" \}), \<Lib:NIP:lib:spawn-control\>:(\{ "act:stop" \}) ])
      </Core:Property>
      <Core:Property property="nip-core:libraries">
         (\{ \<Lib:NIP:base:lib:signals\>, \<Lib:NIP:base:lib:hooks\>, \<Lib:NIP:base:lib:stream\>, \<Lib:NIP:lib:resource-control\>, \<Lib:NIP:core\>, \<Lib:NIP:base:signals:DELAY\>, \<Lib:NIP:base:signals:DECIDE\>, \<Lib:NIP:base:signals:INTERNAL\>, \<Lib:NIP:lib:movement\>, \<Lib:NIP:lib:spawn-control\>, \<Lib:NIP:lib:autostart\> \})
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:movement:frequency">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:resource-control:ttl">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:resource-control:ttl_increase">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:spawn:area">
         ([ 4:1 ])
      </Core:Property>
      <Core:Property property="nip-core:sighookpath">
         (\{ "delay:DELAY-init", "delay:DELAY-exec", "resource-control:INTERNAL", "internal:INTERNAL-exec", "decide:DECIDE-init", "movement:DECIDE", "decide:DECIDE-exec", "decide:DECIDE-post" \})
      </Core:Property>
      <Core:Property property="nip-core:signals">
         ([ 10:"DELAY", 500:"INTERNAL", 1000:"DECIDE" ])
      </Core:Property>
      <Core:Property property="nip-core:system:revision">
         44
      </Core:Property>
      <Core:Property property="nip:start">
         (\{ "start", "handler:start:auto" \})
      </Core:Property>
      <Core:Property property="nip:trait:movement:frequency">
         10
      </Core:Property>
      <Core:Property property="nip:trait:resource-control:ttl">
         1800
      </Core:Property>
      <Core:Property property="nip:trait:resource-control:ttl_increase">
         600
      </Core:Property>
      <Core:Property property="npc:resource-control:live_time">
         1508015593
      </Core:Property>
      <Core:Property property="npc:status:spawndate">
         1508015524
      </Core:Property>
      <Core:Property property="npc:sys:sighookpath">
         (\{ "delay:DELAY-init", "delay:DELAY-exec", "resource-control:INTERNAL", "internal:INTERNAL-exec", "decide:DECIDE-init", "movement:DECIDE", "decide:DECIDE-exec", "decide:DECIDE-post" \})
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1508015307, "jominey", "E", 1508015547, "jominey", "S", 1508015565, "jominey", "S", 1508015584, "jominey", "S", 1508015593, "jominey", "S", 1508016953, "jominey", "E", 1508016994, "jominey", "E", 1508017050, "jominey", "E", 1508017068, "jominey", "E", 1508017083, "jominey", "E", 1508017098, "jominey", "E", 1508017108, "jominey", "E", 1508017707, "jominey", "E", 1508018773, "jominey", "E", 1508018957, "jominey", "E", 1508018992, "jominey", "E", 1508019012, "jominey", "E", 1508019184, "jominey", "E", 1508019239, "jominey", "E", 1508019257, "jominey", "E", 1508019319, "jominey", "E", 1508019365, "jominey", "E", 1508019415, "jominey", "E", 1508019431, "jominey", "E", 1508019465, "jominey", "E", 1508019490, "jominey", "E", 1508019790, "jominey", "E", 1508019801, "jominey", "E", 1508019825, "jominey", "E", 1508019874, "jominey", "E", 1508091573, "jominey", "S", 1508095175, "jominey", "E", 1508095695, "jominey", "E", 1508095738, "jominey", "E", 1508097811, "jominey", "E", 1508097842, "jominey", "E", 1508097947, "jominey", "E", 1508097998, "jominey", "E", 1508098300, "jominey", "E", 1508100256, "jominey", "E", 1508100303, "jominey", "E", 1508100519, "jominey", "E", 1508100681, "jominey", "E", 1508119855, "jominey", "E", 1508120002, "jominey", "E", 1508121826, "jominey", "E" \})
      </Core:Property>
      <Core:Property property="sigstream">2</Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
