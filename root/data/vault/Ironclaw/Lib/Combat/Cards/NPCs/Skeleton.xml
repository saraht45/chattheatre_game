<object clone="/base/obj/thing" owner="tonyd">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="0.2" density="0.5"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="skeleton"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="skeletons"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="bony"/>
          <Base:Adjective adjective="fox-like"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the $(this.trait:color) skeleton of a person
          </Base:Description>
          <Base:Description type="examine">
             A skeleton of what once was clearly a person. It appears to be fox-like in structure and is entirely missing its right hand. Deep chew marks can be seen here and there upon the surface of the bones.
          </Base:Description>
          <Base:Description type="look">
             A skeleton of bones representing what once was a live person.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:combat:armor:rating">
         24
      </Core:Property>
      <Core:Property property="export:combat:fightable">
         1
      </Core:Property>
      <Core:Property property="export:combat:unarmed">
         24
      </Core:Property>
      <Core:Property property="export:trait:body">6</Core:Property>
      <Core:Property property="export:trait:speed">6</Core:Property>
      <Core:Property property="merry:act:start">
         X[M] \$this."trait:color" = oneof("red", "yellow", "blue", "black", "pink", "white");
Set(\$this, "details:default:adjective:"+\$this."trait:color", TRUE);

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:find_target">
         X[M] /* When the NPC is looking for a target */
int i;

/* In this example, we want to target PCs */
\$options = Match(this."base:environment", "pc");
\$preferred_options = (\{ \});

/* We need to convert the NRef's from the PC list into objects */
for(i=0; i\<sizeof(\$options); i++)
  \$options[i] = NRefOb(\$options[i]);

/* We prefer to target PCs that are already attacking us */
for(i=0; i\<sizeof(\$options); i++) \{
  if(\$options[i]."udat:object" \&\& \$options[i].combat \&\& \$options[i].combat["target"] == this) \$preferred_options += (\{ \$options[i] \});
\}
if(sizeof(\$preferred_options)) return \$preferred_options[random(sizeof(\$preferred_options))];

/* Next prefer to target PCs that are already in combat with us */
for(i=0; i\<sizeof(\$options); i++) \{
  if(\$options[i]."udat:object" \&\& \$options[i].combat) \$preferred_options += (\{ \$options[i] \});
\}
if(sizeof(\$preferred_options)) return \$preferred_options[random(sizeof(\$preferred_options))];

/* Next prefer to target PCs that aren't dying or dead or injured */
for(i=0; i\<sizeof(\$options); i++) \{
  if(\$options[i]."udat:object" \&\& !\$options[i]."status:injured" \&\& !\$options[i]."status:dying" \&\& !\$options[i]."status:dead") \$preferred_options += (\{ \$options[i] \});
\}
if(sizeof(\$preferred_options)) return \$preferred_options[random(sizeof(\$preferred_options))];

return nil;
      </Core:Property>
      <Core:Property property="merry:lib:give_combat_damage">
         X[M] if(\$damage \>= 7) \{
  \$delay(0.5, FALSE, "30de");
  \$target."tmp:combat:skeleton:defeated" = Int(\$target."tmp:combat:skeleton:defeated")+1;
  EmitTo(\$target, Describe(\$char)+" knocks you to the ground.");
  EmitIn(\$char."base:environment", Describe(\$char)+" knocks "+Describe(\$target)+" to the ground.", \$target);

  EmitIn(\$char."base:environment", Describe(\$char)+" laughs at "+Describe(\$target)+", \\"Ha! I am the mightiest! Nobody can stand against me!\\"");

  \$char.combat["target"] = nil;
  ccombat::remove_from_combat(\$fighter: \$target);
  ccombat::end_turn(\$char: \$char, \$no_loop_trigger: FALSE);
  return FALSE;
\}
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:take_combat_actions">
         X[M] /* When the NPC is given a turn in combat, this is the script where they decide what to do */
int i;

/* \$az = \$\{Chatters:IC:az:azrael\};
EmitTo(\$az, "Taking an action"); */

switch(random(3)) \{
  case 2:
    Social(this, oneof("sway", "stagger"), oneof("drunkenly", "unsteadily", "inebriatedly")); break;
  case 1:
    Social(this, oneof("laugh", "burp", "sneer"), oneof("drunkenly", "boorishly", "inebriatedly")); break;
  default:
    Social(this, oneof("call", "yell", "ask"), oneof("drunkenly", "insultingly", "inebriatedly"), oneof("Anyone thinks they can beat me?", "Think you can beat the greatest fighter on the seas?", "Oh yeah?", "I'm the best there is, what you think you gonna do?", "What's your problem?"));
\}
\$delay(2, TRUE, "52ac");

\$actions = copy(this.combat["options"]);
\$actions -= (\{ nil \});

/* Do we need a new target? */
if(!this.combat["target"])
  this.combat["target"] = ::find_target();

if(!this.combat["target"]) \{
  /* We couldn't find a target. Remove ourselves from the fight. */
  ccombat::remove_from_combat(\$fighter: this);
  ccombat::end_turn(\$char: this);
  return TRUE;
\}

if(!this.combat["target"].combat) \{
  ccombat::start_fight(\$attacker: this, \$target: this.combat["target"]);
  \$delay(0.1, TRUE, "64a5");
\}

\$turn_id = random(1000000000);
\$params = ([ "char":this, "taking_action":TRUE, "turn_id":\$turn_id ]);


/* Can we attack? */
for(i=0;i\<sizeof(\$actions);i++) \{
  if(\$actions[i][0] == "attack") \{
    if( Call(\$actions[i][1], \$actions[i][0], \$char: \$char, \$par: nil, \$check_valid: TRUE) ) \{
      return Call(\$actions[i][1], \$actions[i][0], \$par: \$params);
    \}
  \}
\}

/* Couldn't attack. Can we do another action? */
for(i=0;i\<sizeof(\$actions);i++) \{
  if(\$actions[i][0] == "aim" \|\| \$actions[i][0] == "guard") \{
    if( Call(\$actions[i][1], \$actions[i][0], \$char: \$char, \$par: nil, \$check_valid: TRUE) ) \{

      if(\$actions[i][0] == "aim") \{
        EmitIn(this."base:environment", Describe(this)+" drunkenly attempts to "+oneof("focus on "+Describe(this.combat["target"]), "line up an attack")+".");
      \} else if(\$actions[i][0] == "guard") \{
        EmitIn(this."base:environment", Describe(this)+" raises his cutlass in an attempt to shield himself.");
      \}

      return Call(\$actions[i][1], \$actions[i][0], \$par: \$params);
    \}
  \}
\}

/* Couldn't do anything. End the turn */
ccombat::end_turn(\$char: this); /* Because we return TRUE above during the delay, the script won't pass for us. So we need to tell it to pass */
return FALSE; /* This means we didn't complete our action, so the script will need to pass for us */
      </Core:Property>
      <Core:Property property="merry:lib:take_combat_damage_dying">
         X[M] /* Script run when the NPC takes enough damage to be dying */
\$char."tmp:combat:skeleton:won" = Int(\$char."tmp:combat:skeleton:won")+1;

EmitIn(\$char."base:environment", Describe(\$char)+" grabs "+Describe(this)+" and begins to shake.");
EmitIn(\$char."base:environment", Describe(\$char)+" shakes and shakes.");
EmitIn(\$char."base:environment", Describe(this)+" starts falling apart, first a bone here and there, then a few limbs.");
EmitIn(\$char."base:environment", "After a short while, "+Describe(\$char)+" is left holding only a skull, which "+\$char."base:pronoun"+" throws away.");

ccombat::remove_from_combat(\$fighter: this);

return FALSE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1144052085, "-", "SYNC", 1201198731, "slurpeeslurp", "K", 1201198762, "slurpeeslurp", "E", 1201198792, "slurpeeslurp", "E", 1201198807, "slurpeeslurp", "E", 1201198844, "slurpeeslurp", "E", 1201221682, "slurpeeslurp", "E", 1201545214, "jsfox", "X", 1270411315, "slurpeeslurp", "E", 1284683764, "slurpeeslurp", "E", 1284683848, "slurpeeslurp", "E", 1284683921, "slurpeeslurp", "E", 1284683928, "slurpeeslurp", "E", 1390690284, "tonyd", "P", 1390690495, "tonyd", "P", 1390690510, "tonyd", "P", 1390690558, "tonyd", "P", 1390691633, "tonyd", "P", 1390691665, "tonyd", "P", 1390693258, "tonyd", "P", 1390693617, "tonyd", "P", 1390693643, "tonyd", "P", 1390693666, "tonyd", "P", 1390693745, "tonyd", "P", 1390693855, "tonyd", "P", 1390693957, "tonyd", "P", 1390693976, "tonyd", "P", 1390698714, "tonyd", "P", 1390698727, "tonyd", "P", 1390698757, "tonyd", "P", 1390698804, "tonyd", "P", 1390786902, "jominey", "K", 1390786979, "jominey", "E", 1390787122, "tonyd", "P", 1390787142, "tonyd", "P", 1390787215, "tonyd", "P", 1390788491, "jominey", "E", 1390788514, "jominey", "E", 1390788731, "jominey", "E", 1390789854, "jominey", "E", 1390790426, "tonyd", "P", 1391145478, "tonyd", "P", 1391237975, "tonyd", "P", 1391488482, "tonyd", "P", 1391488505, "tonyd", "P", 1391488545, "tonyd", "P", 1391488561, "tonyd", "P", 1392454675, "tonyd", "P", 1392454802, "tonyd", "P", 1392455074, "tonyd", "P", 1392455218, "tonyd", "P", 1392455235, "tonyd", "P", 1392501080, "tonyd", "P", 1392502139, "tonyd", "P", 1392502307, "tonyd", "P", 1392502421, "tonyd", "P", 1392504292, "tonyd", "P", 1392506359, "tonyd", "P", 1392506382, "tonyd", "P", 1392506511, "tonyd", "P", 1392506625, "tonyd", "P", 1392506712, "tonyd", "P", 1392506757, "tonyd", "P", 1392506796, "tonyd", "P", 1392506805, "tonyd", "P", 1392506975, "tonyd", "P", 1392507020, "tonyd", "P", 1392507079, "tonyd", "P", 1392713790, "tonyd", "P", 1392714184, "tonyd", "P", 1392714214, "tonyd", "P", 1392714244, "tonyd", "P", 1398219974, "tonyd", "P", 1398220034, "tonyd", "P", 1398220086, "tonyd", "P", 1398220109, "tonyd", "P", 1398220135, "tonyd", "P", 1398220199, "tonyd", "P", 1400906430, "tonyd", "P", 1401013068, "tonyd", "P", 1463724621, "tonyd", "P", 1463724655, "tonyd", "P", 1463727089, "tonyd", "P", 1463733491, "tonyd", "P", 1463733514, "tonyd", "P", 1463733673, "tonyd", "P", 1463733942, "tonyd", "P", 1463734013, "tonyd", "P", 1463734107, "tonyd", "P", 1463734224, "tonyd", "P", 1463734297, "tonyd", "P", 1463734362, "tonyd", "P", 1463734715, "tonyd", "P", 1463735272, "tonyd", "P", 1464063134, "tonyd", "P", 1464244651, "tonyd", "P" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
