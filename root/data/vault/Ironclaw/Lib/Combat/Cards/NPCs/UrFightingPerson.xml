<object clone="/base/obj/thing" owner="tonyd">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="0.2" density="0.5"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="1"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="person"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="persons"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.trait:build) person
          </Base:Description>
          <Base:Description type="look">
             A $(this.trait:build) person. Dressed entirely in dark colors and shapeless garments, this individual is hard to identify. A deep hood pulled over the head makes the face almost impossible to see.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:combat:armor:rating">
         0
      </Core:Property>
      <Core:Property property="export:combat:fasthealing">
         1
      </Core:Property>
      <Core:Property property="export:combat:fightable">
         1
      </Core:Property>
      <Core:Property property="export:combat:unarmed">
         12
      </Core:Property>
      <Core:Property property="export:trait:agility">
         6
      </Core:Property>
      <Core:Property property="export:trait:body">6</Core:Property>
      <Core:Property property="export:trait:mind">6</Core:Property>
      <Core:Property property="export:trait:speed">6</Core:Property>
      <Core:Property property="export:trait:will">6</Core:Property>
      <Core:Property property="merry:lib:find_target">
         X[M] /* When the NPC is looking for a target */
int i;

/* In this example, we want to target PCs */
\$options = Match(this."base:environment", "pc");
\$preferred_options = (\{ \});

/* We need to convert the NRef's from the PC list into objects */
for(i=0; i\<sizeof(\$options); i++)
  \$options[i] = NRefOb(\$options[i]);

/* We prefer to target PCs that are already attacking us */
for(i=0; i\<sizeof(\$options); i++) \{
  if(\$options[i]."udat:object" \&\& \$options[i].combat \&\& \$options[i].combat["target"] == this) \$preferred_options += (\{ \$options[i] \});
\}
if(sizeof(\$preferred_options)) return \$preferred_options[random(sizeof(\$preferred_options))];

/* Next prefer to target PCs that are already in combat with us */
for(i=0; i\<sizeof(\$options); i++) \{
  if(\$options[i]."udat:object" \&\& \$options[i].combat) \$preferred_options += (\{ \$options[i] \});
\}
if(sizeof(\$preferred_options)) return \$preferred_options[random(sizeof(\$preferred_options))];

/* Next prefer to target PCs that aren't dying or dead or injured */
for(i=0; i\<sizeof(\$options); i++) \{
  if(\$options[i]."udat:object" \&\& !\$options[i]."status:injured" \&\& !\$options[i]."status:dying" \&\& !\$options[i]."status:dead") \$preferred_options += (\{ \$options[i] \});
\}
if(sizeof(\$preferred_options)) return \$preferred_options[random(sizeof(\$preferred_options))];

return nil;
      </Core:Property>
      <Core:Property property="merry:lib:give_combat_damage">
         X[M] if(\$damage \>= 7) \{ /* Enough to make them "dying" - Instead we'll just knock them out of combat */
  \$delay(0.5, FALSE, "30de");
  \$target."tmp:combat:UrFightingPerson:defeated" = Int(\$target."tmp:combat:UrFightingPerson:defeated")+1;
  EmitTo(\$target, Describe(\$char)+" knocks you to the ground.");
  EmitIn(\$char."base:environment", Describe(\$char)+" knocks "+Describe(\$target)+" to the ground.", \$target);

  EmitIn(\$char."base:environment", Describe(\$char)+" laughs at "+Describe(\$target)+", \\"... and stay down!\\"");

  \$char.combat["target"] = nil;
  ccombat::remove_from_combat(\$fighter: \$target);
  ccombat::end_turn(\$char: \$char, \$no_loop_trigger: FALSE);
  return FALSE;
\}
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:take_combat_actions">
         X[M] /* When the NPC is given a turn in combat, this is the script where they decide what to do */
int i;

/* \$az = \$\{Chatters:IC:az:azrael\};
EmitTo(\$az, "Taking an action"); */

/* Emote before the action */
/*
switch(random(3)) \{
  case 2:
    Social(this, oneof("sway", "stagger"), oneof("drunkenly", "unsteadily", "inebriatedly")); break;
  case 1:
    Social(this, oneof("laugh", "burp", "sneer"), oneof("drunkenly", "boorishly", "inebriatedly")); break;
  default:
    Social(this, oneof("call", "yell", "ask"), oneof("drunkenly", "insultingly", "inebriatedly"), oneof("Anyone thinks they can beat me?", "Think you can beat the greatest fighter on the seas?", "Oh yeah?", "I'm the best there is, what you think you gonna do?", "What's your problem?"));
\}
\$delay(2, TRUE, "52ac");
*/

/* Pick an action */
\$actions = copy(this.combat["options"]);
\$actions -= (\{ nil \});

/* Do we need a new target? */
if(!this.combat["target"])
  this.combat["target"] = ::find_target();

if(!this.combat["target"]) \{
  /* We couldn't find a target. Remove ourselves from the fight. */
  ccombat::remove_from_combat(\$fighter: this);
  ccombat::end_turn(\$char: this);
  return TRUE;
\}

if(!this.combat["target"].combat) \{
  ccombat::start_fight(\$attacker: this, \$target: this.combat["target"]);
  \$delay(0.1, TRUE, "64a5");
\}

\$turn_id = random(1000000000);
\$params = ([ "char":this, "taking_action":TRUE, "turn_id":\$turn_id ]);


/* Can we attack? */
for(i=0;i\<sizeof(\$actions);i++) \{
  if(\$actions[i][0] == "attack") \{
    if( Call(\$actions[i][1], \$actions[i][0], \$char: \$char, \$par: nil, \$check_valid: TRUE) ) \{
      return Call(\$actions[i][1], \$actions[i][0], \$par: \$params);
    \}
  \}
\}

/* Couldn't attack. Can we do another action? */
for(i=0;i\<sizeof(\$actions);i++) \{
  if(\$actions[i][0] == "aim" \|\| \$actions[i][0] == "guard") \{
    if( Call(\$actions[i][1], \$actions[i][0], \$char: \$char, \$par: nil, \$check_valid: TRUE) ) \{

      if(\$actions[i][0] == "aim") \{
        EmitIn(this."base:environment", Describe(this)+" attempts to "+oneof("focus on "+Describe(this.combat["target"]), "line up an attack")+".");
      \} else if(\$actions[i][0] == "guard") \{
        EmitIn(this."base:environment", Describe(this)+" shifts defensively.");
      \}

      return Call(\$actions[i][1], \$actions[i][0], \$par: \$params);
    \}
  \}
\}

/* Couldn't do anything. End the turn */
ccombat::end_turn(\$char: this); /* Because we return TRUE above during the delay, the script won't pass for us. So we need to tell it to pass */
return FALSE; /* This means we didn't complete our action, so the script will need to pass for us */
      </Core:Property>
      <Core:Property property="merry:lib:take_combat_damage_dying">
         X[M] /* Script run when the NPC takes enough damage to be dying */
\$char."tmp:combat:UrFightingPerson:won" = Int(\$char."tmp:combat:UrFightingPerson:won")+1;

EmitIn(\$char."base:environment", Describe(this)+" collapses to the ground, gasping "+this."base:objective"+" final breaths.");

ccombat::remove_from_combat(\$fighter: this);

return FALSE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1465545800, "tonyd", "E", 1466302714, "ezralee", "K", 1573691008, "jominey", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
