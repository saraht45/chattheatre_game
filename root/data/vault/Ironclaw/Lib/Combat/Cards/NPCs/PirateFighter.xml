<object clone="/base/obj/thing" owner="tonyd">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Ironclaw:NPCs:Enemies:People:UrTypicalBase)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="1"/>
    <Base:Misc gender="male" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="true">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="pirate"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="pirates"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.trait:animal) pirate
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="facialhair" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="facialhair"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="fur" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="brown"/>
          <Base:Adjective adjective="delicate"/>
          <Base:Adjective adjective="even"/>
        </Base:Adjectives>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="hair" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="uncombed"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="chocolate brown"/>
          <Base:Adjective adjective="medium"/>
          <Base:Adjective adjective="uncombed"/>
          <Base:Adjective adjective="wiry"/>
        </Base:Adjectives>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:combat:armor:rating">
         6
      </Core:Property>
      <Core:Property property="export:combat:fencing">
         16
      </Core:Property>
      <Core:Property property="export:combat:fightable">
         1
      </Core:Property>
      <Core:Property property="export:combat:unarmed">
         24
      </Core:Property>
      <Core:Property property="export:trait:body">10</Core:Property>
      <Core:Property property="merry:lib:fight_outcome_bad">
         X[M] if(!\$par["char"]) return TRUE;

EmitTo(\$par["char"], "You dismissively turn away from "+Describe(this)+".");
EmitIn(this."base:environment", Describe(\$par["char"])+" dismissively turns away from "+Describe(this)+".", \$par["char"]);

this."status:hurt" = nil;
this."savedprop:status:hurt" = nil;
this."status:afraid" = nil;
this."savedprop:status:afraid" = nil;
this."status:recently_afraid" = nil;
this."savedprop:status:recently_afraid" = nil;
this."status:injured" = nil;
this."savedprop:status:injured" = nil;

\$par["char"]."tmp:combat:pirate:bad" = Int(\$par["char"]."tmp:combat:pirate:bad")+1;

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:fight_outcome_good">
         X[M] if(!\$par["char"]) return TRUE;

EmitTo(\$par["char"], "You release "+Describe(this)+", with a nod of approval.");
EmitIn(this."base:environment", Describe(\$par["char"])+" releases "+Describe(this)+", with a nod of approval.", \$par["char"]);

this."status:hurt" = nil;
this."savedprop:status:hurt" = nil;
this."status:afraid" = nil;
this."savedprop:status:afraid" = nil;
this."status:recently_afraid" = nil;
this."savedprop:status:recently_afraid" = nil;
this."status:injured" = nil;
this."savedprop:status:injured" = nil;

\$par["char"]."tmp:combat:pirate:good" = Int(\$par["char"]."tmp:combat:pirate:good")+1;

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:fight_outcome_jail">
         X[M] if(!\$par["char"]) return TRUE;

EmitTo(\$par["char"], "You call some constabulary guards, and send "+Describe(this)+" to jail.");
EmitIn(this."base:environment", Describe(\$par["char"])+" calls some constabulary guards, and send "+Describe(this)+" to jail.", \$par["char"]);

this."status:hurt" = nil;
this."savedprop:status:hurt" = nil;
this."status:afraid" = nil;
this."savedprop:status:afraid" = nil;
this."status:recently_afraid" = nil;
this."savedprop:status:recently_afraid" = nil;
this."status:injured" = nil;
this."savedprop:status:injured" = nil;

this."base:environment" = nil /* defunct */;
this."base:proximity" = NewNRef(nil /* defunct */, "gallows");
this."base:prepositionstring" = "near";

\$par["char"]."tmp:combat:pirate:jail" = Int(\$par["char"]."tmp:combat:pirate:jail")+1;

\$delay(60*60*24*2, TRUE, "46b3");

this."base:environment" = \$\{Ironclaw:World:DockTown:Buildings:TrainingYard:DockSquare\};
this."base:proximity" = NewNRef(\$\{Ironclaw:World:DockTown:Buildings:TrainingYard:DockSquare\}, "arena");
this."base:prepositionstring" = "in";

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:find_target">
         X[M] /* When the NPC is looking for a target */
int i;

/* In this example, we want to target PCs */
\$options = Match(this."base:environment", "pc");
\$preferred_options = (\{ \});

/* We need to convert the NRef's from the PC list into objects */
for(i=0; i\<sizeof(\$options); i++)
  \$options[i] = NRefOb(\$options[i]);

/* We prefer to target PCs that are already attacking us */
for(i=0; i\<sizeof(\$options); i++) \{
  if(\$options[i]."udat:object" \&\& \$options[i].combat \&\& \$options[i].combat["target"] == this) \$preferred_options += (\{ \$options[i] \});
\}
if(sizeof(\$preferred_options)) return \$preferred_options[random(sizeof(\$preferred_options))];

/* Next prefer to target PCs that are already in combat with us */
for(i=0; i\<sizeof(\$options); i++) \{
  if(\$options[i]."udat:object" \&\& \$options[i].combat) \$preferred_options += (\{ \$options[i] \});
\}
if(sizeof(\$preferred_options)) return \$preferred_options[random(sizeof(\$preferred_options))];

/* Next prefer to target PCs that aren't dying or dead or injured */
for(i=0; i\<sizeof(\$options); i++) \{
  if(\$options[i]."udat:object" \&\& !\$options[i]."status:injured" \&\& !\$options[i]."status:dying" \&\& !\$options[i]."status:dead") \$preferred_options += (\{ \$options[i] \});
\}
if(sizeof(\$preferred_options)) return \$preferred_options[random(sizeof(\$preferred_options))];

return nil;
      </Core:Property>
      <Core:Property property="merry:lib:give_combat_damage">
         X[M] if(\$damage \>= 4) \{
  ccombat::remove_from_combat(\$fighter: \$target);
  \$delay(0.5, TRUE, "30de");
  \$target."tmp:combat:pirate:defeated" = Int(\$target."tmp:combat:pirate:defeated")+1;
  EmitIn(\$char."base:environment", Describe(\$char)+" laughs at "+Describe(\$target)+", \\"Ha! I am the mightiest! Nobody can stand against me!\\"");
\}
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:take_combat_actions">
         X[M] /* When the NPC is given a turn in combat, this is the script where they decide what to do */
int i;

/* \$az = \$\{Chatters:IC:az:azrael\};
EmitTo(\$az, "Taking an action"); */

switch(random(3)) \{
  case 2:
    Social(this, oneof("sway", "stagger"), oneof("drunkenly", "unsteadily", "inebriatedly")); break;
  case 1:
    Social(this, oneof("laugh", "burp", "sneer"), oneof("drunkenly", "boorishly", "inebriatedly")); break;
  default:
    Social(this, oneof("call", "yell", "ask"), oneof("drunkenly", "insultingly", "inebriatedly"), oneof("Anyone thinks they can beat me?", "Think you can beat the greatest fighter on the seas?", "Oh yeah?", "I'm the best there is, what you think you gonna do?", "What's your problem?"));
\}
\$delay(2, TRUE, "52ac");

\$actions = copy(this.combat["options"]);
\$actions -= (\{ nil \});

/* Do we need a new target? */
if(!this.combat["target"])
  this.combat["target"] = ::find_target();

if(!this.combat["target"]) \{
  /* We couldn't find a target. Remove ourselves from the fight. */
  ccombat::remove_from_combat(\$fighter: this);
  ccombat::end_turn(\$char: this);
  return TRUE;
\}

if(!this.combat["target"].combat) \{
  ccombat::start_fight(\$attacker: this, \$target: this.combat["target"]);
  \$delay(0.1, TRUE, "64a5");
\}

\$turn_id = random(1000000000);
\$params = ([ "char":this, "taking_action":TRUE, "turn_id":\$turn_id ]);


/* Can we attack? */
for(i=0;i\<sizeof(\$actions);i++) \{
  if(\$actions[i][0] == "attack") \{
    if( Call(\$actions[i][1], \$actions[i][0], \$char: \$char, \$par: nil, \$check_valid: TRUE) ) \{
      return Call(\$actions[i][1], \$actions[i][0], \$par: \$params);
    \}
  \}
\}

/* Couldn't attack. Can we do another action? */
for(i=0;i\<sizeof(\$actions);i++) \{
  if(\$actions[i][0] == "aim" \|\| \$actions[i][0] == "guard") \{
    if( Call(\$actions[i][1], \$actions[i][0], \$char: \$char, \$par: nil, \$check_valid: TRUE) ) \{

      if(\$actions[i][0] == "aim") \{
        EmitIn(this."base:environment", Describe(this)+" drunkenly attempts to "+oneof("focus on "+Describe(this.combat["target"]), "line up an attack")+".");
      \} else if(\$actions[i][0] == "guard") \{
        EmitIn(this."base:environment", Describe(this)+" raises his cutlass in an attempt to shield himself.");
      \}

      return Call(\$actions[i][1], \$actions[i][0], \$par: \$params);
    \}
  \}
\}

/* Couldn't do anything. End the turn */
ccombat::end_turn(\$char: this); /* Because we return TRUE above during the delay, the script won't pass for us. So we need to tell it to pass */
return FALSE; /* This means we didn't complete our action, so the script will need to pass for us */
      </Core:Property>
      <Core:Property property="merry:lib:take_combat_damage_dying">
         X[M] /* Script run when the NPC takes enough damage to be dying */
\$char."tmp:combat:pirate:won" = Int(\$char."tmp:combat:pirate:won")+1;

EmitTo(\$char, "With an almighty strike, you cut down "+Describe(this)+"!");
EmitIn(\$char."base:environment", "With an almighty strike, "+Describe(\$char)+" cuts down "+Describe(this)+"!", \$char);
ccombat::remove_from_combat(\$fighter: this);

\$delay(0.5, FALSE, "b561");

/* Ask the PC what they want to do, having beaten the NPC */
interaction::question(\$actor: \$char, \$question: "What do you want to do with this pirate??", \$expires: 60, \$env: "FALSE", \$a: "Send him to jail!", \$a_ob: this, \$a_fun: "fight_outcome_jail", \$b: "Release him - he fought well!", \$b_ob: this, \$b_fun: "fight_outcome_good", \$c: "Release him - he isn't worth my time!", \$c_ob: this, \$c_fun: "fight_outcome_bad", \$expire_ob: this, \$expire_fun: "fight_outcome_jail", \$par: ([ "char":\$char ]));


return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-post:poke-dob">
         X[M] /* Poke the skeleton to start a fight */

Social(this, "turn", nil, nil, "to", \$actor);

\$target = ::find_target();
\$target = \$actor;

if(!\$target) return TRUE;

/* Set them up for new combat */
\$target."merry:inherit:act-pre:breakcombat" = \$\{Ironclaw:Lib:Combat:Cards:Combat\};
\$target."merry:inherit:act-pre:fight" = \$\{Ironclaw:Lib:Combat:Cards:Combat\};
\$target."merry:inherit:act-pre:pass" = \$\{Ironclaw:Lib:Combat:Cards:Combat\};
ccombat::start_fight(\$attacker: this, \$target: \$target);
return TRUE;
      </Core:Property>
      <Core:Property property="merry:witness-post:enter-from">
         X[M] if(this.combat) return TRUE;
if(!\$actor."udat:object") return TRUE;
if(this."base:environment" == nil /* defunct */) return TRUE;
if(this."tmp:starting_fight") return TRUE;
this."tmp:starting_fight" = TRUE;

\$delay(3, TRUE, "e14b");

Social(this, "burp");
\$delay(3, TRUE, "e954");

Social(this, "swear", "belligerantly");
\$delay(3, TRUE, "ac64");

\$target = ::find_target();

this."tmp:starting_fight" = nil;

if(!\$target \|\| \$target."base:environment" != this."base:environment") return TRUE;
Social(this, "ask", nil, "So, you wanna fight, then?", nil, \$target);

this."tmp:starting_fight" = TRUE;
\$delay(3, TRUE, "94df");
this."tmp:starting_fight" = nil;

if(!\$target \|\| \$target."base:environment" != this."base:environment")
  return TRUE;

/* Set them up for new combat */
\$target."merry:inherit:act-pre:breakcombat" = \$\{Ironclaw:Lib:Combat:Cards:Combat\};
\$target."merry:inherit:act-pre:fight" = \$\{Ironclaw:Lib:Combat:Cards:Combat\};
\$target."merry:inherit:act-pre:pass" = \$\{Ironclaw:Lib:Combat:Cards:Combat\};

/* Start the fight */
/* Call(\$\{Ironclaw:Lib:Combat:Cards:Combat\}, "start_fight", \$attacker:this, \$target: \$actor); */
/* Call(\$\{Ironclaw:Lib:Combat:Cards:Combat\}, "start_fight", \$attacker: \$actor, \$target: this); */
ccombat::start_fight(\$attacker: \$target, \$target: this);

return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1393055412, "tonyd", "X", 1393055483, "tonyd", "E", 1393055580, "tonyd", "E", 1393055604, "tonyd", "E", 1393055661, "tonyd", "E", 1393055732, "tonyd", "E", 1393059168, "tonyd", "P", 1393059175, "tonyd", "P", 1393059658, "tonyd", "P", 1393059748, "tonyd", "P", 1393059819, "tonyd", "P", 1393063414, "tonyd", "P", 1393063491, "tonyd", "P", 1393063538, "tonyd", "P", 1393063550, "tonyd", "P", 1393063596, "tonyd", "P", 1393064032, "tonyd", "P", 1393064095, "tonyd", "P", 1393064244, "tonyd", "P", 1393064314, "tonyd", "P", 1393064331, "tonyd", "P", 1393064418, "tonyd", "P", 1393064475, "tonyd", "P", 1393064576, "tonyd", "P", 1393064588, "tonyd", "P", 1393064635, "tonyd", "P", 1393128881, "tonyd", "P", 1393129097, "tonyd", "P", 1393129220, "tonyd", "P", 1393129228, "tonyd", "P", 1393129283, "tonyd", "P", 1393651164, "tonyd", "P", 1393651224, "tonyd", "P", 1393651284, "tonyd", "P", 1393651333, "tonyd", "P", 1393651410, "tonyd", "P", 1393651489, "tonyd", "P", 1393651545, "tonyd", "P", 1393651562, "tonyd", "P", 1393651574, "tonyd", "P", 1393653389, "tonyd", "P", 1393653419, "tonyd", "P", 1393653456, "tonyd", "P", 1393653533, "tonyd", "P", 1393653560, "tonyd", "P", 1393653577, "tonyd", "P", 1393653642, "tonyd", "P", 1393653646, "tonyd", "P", 1393653658, "tonyd", "P", 1393653693, "tonyd", "P", 1393653725, "tonyd", "P", 1393653776, "tonyd", "P", 1393653795, "tonyd", "P", 1393653809, "tonyd", "P", 1393653860, "tonyd", "P", 1393653868, "tonyd", "P", 1393653881, "tonyd", "P", 1393654069, "tonyd", "P", 1393654322, "tonyd", "P", 1393655802, "tonyd", "P", 1393655840, "tonyd", "P", 1393655858, "tonyd", "P", 1393655883, "tonyd", "P", 1393655922, "tonyd", "P", 1393655948, "tonyd", "P", 1393655961, "tonyd", "P", 1393655993, "tonyd", "P", 1393656009, "tonyd", "P", 1393656051, "tonyd", "P", 1393656089, "tonyd", "P", 1393656138, "tonyd", "P", 1393656179, "tonyd", "P", 1393656329, "tonyd", "P", 1393656361, "tonyd", "P", 1393656451, "tonyd", "P", 1393656472, "tonyd", "P", 1393656486, "tonyd", "P", 1393656543, "tonyd", "P", 1393656581, "tonyd", "P", 1393656597, "tonyd", "P", 1393656608, "tonyd", "P", 1393656650, "tonyd", "P", 1393656778, "tonyd", "P", 1393656797, "tonyd", "P", 1393656855, "tonyd", "P", 1393657041, "tonyd", "P", 1393657066, "tonyd", "P", 1393664148, "tonyd", "P", 1393664197, "tonyd", "P", 1393664230, "tonyd", "P", 1393664504, "tonyd", "P", 1393664557, "tonyd", "P", 1393665291, "tonyd", "P", 1393665448, "tonyd", "P", 1393665491, "tonyd", "P", 1393665591, "tonyd", "P", 1393665600, "tonyd", "P", 1393665697, "tonyd", "P", 1393665938, "tonyd", "P", 1393665989, "tonyd", "P", 1393666143, "tonyd", "P", 1393666354, "tonyd", "P", 1393666502, "tonyd", "P", 1393666557, "tonyd", "P", 1393723948, "tonyd", "E", 1393724065, "tonyd", "P", 1393724440, "tonyd", "P", 1393724461, "tonyd", "P", 1393724478, "tonyd", "P", 1393732948, "tonyd", "P", 1393746370, "tonyd", "P", 1393746424, "tonyd", "P", 1393821897, "tonyd", "P", 1393823339, "tonyd", "P", 1394605658, "tonyd", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
