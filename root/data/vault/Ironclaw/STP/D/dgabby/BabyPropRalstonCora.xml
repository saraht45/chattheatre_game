<object clone="/base/obj/thing" owner="ezralee">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(IronClaw:Props:Misc:Kiddos:UrMaleBaby)"/>
    <Base:Bulk immobile="false" mass="4" density="1"/>
    <Base:Container flexible="true" transparent-container="false" public-container="true" tight="false" capacity="2" maxweight="2"/>
    <Base:Misc gender="neuter" volition="true" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="baby"/>
            <Base:SName sname="wolf"/>
            <Base:SName sname="pup"/>
            <Base:SName sname="eoin"/>
            <Base:SName sname="james"/>
            <Base:SName sname="ej"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="babies"/>
            <Base:PName pname="wolves"/>
            <Base:PName pname="pups"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.appearance:height) $(this.appearance:build) {? | $(this.trait:object) | $(this.trait:object) | baby }
          </Base:Description>
          <Base:Description type="examine">
             This is a $(this.appearance:height) $(this.appearance:build) $(this.trait:object) with{? | $(this.appearance:furcolor) | $(this.appearance:furtexture) $(this.appearance:furcolor)} fur{? | $(this.appearance:haircolor) | and a small amount of $(this.appearance:hairtype) $(this.appearance:haircolor) hair}$(this.appearance:hairstyle_string). A pair of $(this.appearance:eyeshape) $(this.appearance:eyecolor) eyes are set above a $(this.appearance:nose) $(this.appearance:noseshape) $(this.appearance:nosetype) and a $(this.appearance:mouthshape) mouth, complete with $(this.appearance:lipshape) lips. A tiny set of $(this.appearance:clawlength) $(this.appearance:clawapp) $(this.appearance:clawtype), on $(this.appearance:hands) hands, and $(this.appearance:feet) feet are also visible. You also note $(this.base:possessive) $(this.appearance:earshape) ears{? | $(this.appearance:muzzle) |, $(this.base:possessive) $(this.appearance:muzzle) muzzle}{? | $(this.appearance:tailtexture) | and $(this.base:possessive) $(this.appearance:taillength) $(this.appearance:tailtexture) tail}. $[Call(${Ironclaw:Lib:Characters:Descriptions}, "describe_features")]
          </Base:Description>
          <Base:Description type="look">
             This is a $(this.appearance:height) $(this.appearance:build) $(this.trait:object) with{? | $(this.appearance:furcolor) | $(this.appearance:furtexture) $(this.appearance:furcolor)} fur{? | $(this.appearance:haircolor) | and a small amount of $(this.appearance:hairtype) $(this.appearance:haircolor) hair}$(this.appearance:hairstyle_string).
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="face" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.appearance:face) face
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:face) face consisting of $(this.appearance:cheekshape) cheeks, a $(this.appearance:noseshape) nose over a $(this.appearance:mouthshape) mouth with $(this.appearance:lipshape) lips covering tiny gums that permit a $(this.appearance:tongue) tongue to peek out on occasion. The face is framed by $(this.appearance:earshape) ears and holds $(this.appearance:eyeshape:adjective) $(this.appearance:eyecolor) eyes.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="stomach" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">tummy</Base:Description>
          <Base:Description type="look">A tummy.</Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="tail" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="tail"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="tails"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.appearance:taillength) $(this.appearance:tailtexture) tail
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:taillength) $(this.appearance:tailtexture) tail.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="teeth" prime="false" def="false" abstract="false" hidden="true" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             NEW detail
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:appearance:build">
         "plump"
      </Core:Property>
      <Core:Property property="export:appearance:cheekshape">
         "chubby"
      </Core:Property>
      <Core:Property property="export:appearance:clawapp">
         "tapered"
      </Core:Property>
      <Core:Property property="export:appearance:clawlength">
         "short"
      </Core:Property>
      <Core:Property property="export:appearance:clawtype">
         "claws"
      </Core:Property>
      <Core:Property property="export:appearance:earshape">
         "pointed"
      </Core:Property>
      <Core:Property property="export:appearance:eyecolor">
         "camouflage green"
      </Core:Property>
      <Core:Property property="export:appearance:eyeshape">
         "sharp"
      </Core:Property>
      <Core:Property property="export:appearance:face">
         "round"
      </Core:Property>
      <Core:Property property="export:appearance:feet">
         "tiny"
      </Core:Property>
      <Core:Property property="export:appearance:furcolor">
         "tawny"
      </Core:Property>
      <Core:Property property="export:appearance:furtexture">
         "fuzzy"
      </Core:Property>
      <Core:Property property="export:appearance:haircolor">
         "umber-roan"
      </Core:Property>
      <Core:Property property="export:appearance:hairtype">
         "neat"
      </Core:Property>
      <Core:Property property="export:appearance:hands">
         "pudgy"
      </Core:Property>
      <Core:Property property="export:appearance:height">
         "small"
      </Core:Property>
      <Core:Property property="export:appearance:lipshape">
         "curved"
      </Core:Property>
      <Core:Property property="export:appearance:mouthshape">
         "full"
      </Core:Property>
      <Core:Property property="export:appearance:muzzle">
         "itty-bitty"
      </Core:Property>
      <Core:Property property="export:appearance:noseshape">
         "fine"
      </Core:Property>
      <Core:Property property="export:appearance:nosetype">
         "nose"
      </Core:Property>
      <Core:Property property="export:appearance:taillength">
         "sprightly"
      </Core:Property>
      <Core:Property property="export:appearance:tailtexture">
         "fluffy"
      </Core:Property>
      <Core:Property property="export:trait:object">
         "wolf pup"
      </Core:Property>
      <Core:Property property="export:trait:smell">
         "baby"
      </Core:Property>
      <Core:Property property="merry:lib:undress">
         X[M] /* undressing ourselves */   
\$delay(0.01, TRUE, "c799");   
   
\$mapping = \$this."base:clothes-worn";   
\$clothes = (\{ \});   
\$indices = map_indices(\$mapping);   
for(\$i=0;\$i\<sizeof(\$indices);\$i++) \{   
  for(\$j=0;\$j\<sizeof(\$mapping[\$indices[\$i]]);\$j++) \{   
    \$item = \$mapping[\$indices[\$i]][\$j];   
    if(member(\$item, \$clothes)) \{   
      /* already in the list */   
      /* add anything covering this item */   
      if(sizeof(\$mapping[\$indices[\$i]]) \> \$j+1) \{   
        /* there are items covering this */   
        \$item."clothing:covered-by" \|= \$mapping[\$indices[\$i]][\$j+1..];   
      \}   
    \} else \{   
      /* not in the list */   
      /* add anything covering this item */   
      \$clothes += (\{ \$item \});   
      if(sizeof(\$mapping[\$indices[\$i]]) \> \$j+1) \{   
        /* there are items covering this */   
        \$item."clothing:covered-by" = \$mapping[\$indices[\$i]][\$j+1..];   
      \} else \{   
        \$item."clothing:covered-by" = (\{ \});   
      \}   
    \}   
  \}   
\}   
   
/* now make a list of what is on top to bottom */   
\$ordered_list = (\{ \});   
while(sizeof(\$clothes)) \{   
  \$tmp_list = (\{ \});   
  for(\$i=0;\$i\<sizeof(\$clothes);\$i++) \{   
    if(sizeof(\$clothes[\$i]."clothing:covered-by")) \{   
      /* this item is covered by something. Is that something already removed? */   
      if(!sizeof(\$clothes \& \$clothes[\$i]."clothing:covered-by")) \{   
        /* no longer covered. Add to the list */   
        \$tmp_list \|= (\{ \$clothes[\$i] \});   
      \}   
    \} else \{   
      /* not covered by anything. Move this to the list */   
      \$tmp_list \|= (\{ \$clothes[\$i] \});   
    \}   
  \}   
  \$ordered_list += (\{ \$tmp_list \});   
  \$clothes -= \$tmp_list;   
\}   
   
/* save this list in the player's body */   
if(sizeof(\$ordered_list))   
  \$this."clothing:last-wearing" = \$ordered_list;   
   
/* remove the clothes */   
for(\$i=0;\$i\<sizeof(\$ordered_list);\$i++) \{   
  Act(\$this, "unwear", \$articles: \$ordered_list[\$i]);   
\}   
   
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:take">
         X[M] /* Record what room the actor is in */    
\$room = \$actor."Base:environment";    
    
/* Check if the actor is allowed to pick up the kitten */    
  /* check if \$actor is the baby's parent */    
if(\$actor == \$this."trait:ownerone" \|\| \$actor == \$this."trait:ownertwo") \{    
  /* if the actor is allowed to pick up the kitten */    
  /* tell the actor that they picked up the kitten */    
  /* tell the room that the actor picked up the kitten */    
  EmitTo(\$actor, "You pick up "+Describe(\$this)+".");    
  EmitIn(\$room, Describe(\$actor)+" picks up "+ Describe(\$this)+".", \$actor);    
  \$this."base:environment" = \$actor;    
    
\} else \{    
  /* the actor is not the kittens mother */    
    
  /* if the kitten is already being held by someone */    
  if(\$this."base:environment"."base:volition") \{    
    /* use the normal give/take/offer code */    
    return TRUE;    
  \} else \{    
    /* tell the actor that they can't take the kitten */    
    /* tell the room that the actor is a kidnapper! */    
    EmitTo(\$actor, "That baby is not yours!");    
    EmitIn(\$room, Describe(\$actor)+" attempts to take "+ Describe(\$this)+".", \$actor);    
  \}    
\}    
    
/* return false, so that the actor doesn't see a message about not being allowed to pick up the kitten */    
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react:control-dob">
         X[M] /* check if we are the mother, or if we are carrying the baby */ 
if((\$actor != \$this."base:environment") \&\& (\$actor != \$this."trait:ownerone" \|\| \$actor != \$this."trait:ownertwo")) 
\{ 
  /* we aren't allowed to give commands */ 
  EmitTo(\$actor, "You cannot control "+Describe(\$this)+" unless you are carrying "+\$this."base:objective"+"."); 
  return FALSE; 
\} 
 
if(\$evoke) \{ 
 
  /* If the actor gave a command */ 
  \$command = \$evoke[1..strlen(\$evoke)-2]; 
 
  /* If the command is cry */ 
  if(\$command == "cry") \{ 
    EmitIn(\$actor."base:environment", Describe(\$this)+" lets out a series of small whimpers before breaking into loud sobs."); 
    \} else if(\$command == "smile") \{ 
    EmitIn(\$actor."base:environment", Describe(\$this)+" kicks " + \$this."base:possessive" + " legs and smiles giddily."); 
    \} else if(\$command == "hold-me") \{ 
    EmitIn(\$actor."base:environment", Describe(\$this)+" cries for someone to hold " + \$this."base:objective" + "."); 
    \} else if(\$command == "pout") \{ 
    EmitIn(\$actor."base:environment", Describe(\$this, nil, nil, STYLE_NONPOSS)+" extends " + \$this."base:possessive" + " lower lip at " + Describe(\$actor) + " and childishly pouts."); 
  \} else if(\$command == "sleep") \{ 
    EmitIn(\$actor."base:environment", Describe(\$this)+" sleeps snugly in " + \$actor."base:possessive" + " arms.", \$actor); 
    EmitTo(\$actor, Describe(\$this, nil, \$actor) + " sleeps snugly in your arms."); 
    \} else if(\$command == "wiggle") \{ 
    EmitIn(\$actor."base:environment", Describe(\$this)+" adorably wiggles in " + \$actor."base:possessive" + " arms."); 
    \} else if(\$command == "scamper") \{ 
    EmitIn(\$actor."base:environment", Describe(\$this)+" playfully tries to scamper out of " + \$actor."base:possessive" + " arms."); 
  \} else if(\$command == "mommy") \{ 
    EmitIn(\$actor."base:environment", Describe(\$this, nil, nil, STYLE_NONPOSS)+ " cries for " + \$this."base:possessive" + " mommy."); 
  \} else if(\$command == "adorablesmile") \{ 
    EmitIn(\$actor."base:environment", Describe(\$this, nil, nil, STYLE_NONPOSS)+ " smiles adorably."); 
  \} else if(\$command == "daddy") \{ 
    EmitIn(\$actor."base:environment", Describe(\$this, nil, nil, STYLE_NONPOSS)+ " cries for " + \$this."base:possessive" + " daddy."); 
  \} else if(\$command == "hungry") \{ 
    EmitIn(\$actor."base:environment", Describe(\$this, nil, nil, STYLE_NONPOSS)+ " whines for food."); 
  \} else if(\$command == "no-kiss") \{ 
    EmitIn(\$actor."base:environment", Describe(\$this, nil, nil, STYLE_NONPOSS)+" turns it's head as " +Describe(\$actor) +" tries to kiss " + \$this."base:possessive" +" cheek."); 
  \} else if(\$command == "blow-kiss") \{ 
    EmitIn(\$actor."base:environment", Describe(\$this, nil, nil, STYLE_NONPOSS)+" blows kisses at people passing by."); 
  \} else if(\$command == "kiss-cheek") \{ 
    EmitIn(\$actor."base:environment", Describe(\$this, nil, nil, STYLE_NONPOSS)+" adorably pecks " + Describe(\$actor) +"'s cheek."); 
  \} else if(\$command == "coo") \{ 
    EmitIn(\$actor."base:environment", Describe(\$this) + " makes soft cooing sounds."); 
  \} else if(\$command == "play") \{ 
    EmitIn(\$actor."base:environment", Describe(\$this) + " gazes entertainedly at "+ \$actor."base:objective" + " as " + \$actor."base:pronoun" + " makes silly faces."); 
  \} else if(\$command == "peekaboo") \{ 
    EmitIn(\$actor."base:environment", Describe(\$this, nil, nil, STYLE_NONPOSS)+" giggles as " + Describe(\$actor) + " repeatedly hides and reveals " + \$actor."base:possessive" + " face."); 
  \} else if(\$command == "giggle") \{ 
    switch(random(4)) \{ 
      case 3: 
        EmitTo(\$actor, Describe(\$this)+" giggles mirthfully as you tickle "+\$this."base:objective"+"."); 
        EmitIn(\$actor."base:environment", Describe(\$this)+" giggles mirthfully as " + Describe(\$actor) + " tickles "+\$this."base:objective"+".", \$actor); 
        break; 
      case 2: 
        EmitIn(\$actor."base:environment", Describe(\$this)+" giggles happily."); 
        break; 
      case 1: 
        EmitIn(\$actor."base:environment", Describe(\$this)+" attempts to stifle a giggle."); 
        break; 
      case 0: 
        EmitIn(\$actor."base:environment", Describe(\$this)+" lets out gleeful giggles."); 
        break; 
      default: 
        break; 
    \} 
  \} else if(\$command == "yawn") \{ 
    switch(random(4)) \{ 
      case 3: 
        EmitIn(\$actor."base:environment", Describe(\$this)+" yawns sleepily."); 
        break; 
      case 2: 
        EmitIn(\$actor."base:environment", Describe(\$this)+" yawns and stretches contently."); 
        break; 
      case 1: 
        EmitIn(\$actor."base:environment", Describe(\$this)+" attempts to stifle a yawn unsuccessfully."); 
        break; 
      case 0: 
        EmitIn(\$actor."base:environment", Describe(\$this)+" hiccups mid-yawn causing it to giggle and blink wakefully."); 
        break; 
      default: 
        break; 
    \} 
  \} else if(\$command == "dress") \{ 
    \$inventory = this."base:inventory"; 
    Act(this, "wear", \$articles: \$inventory); 
  \} else if(\$command == "undress") \{ 
    ::undress(); 
  \} else \{ 
  EmitTo(\$actor, "Valid controls for "+Describe(\$this)+" are: adorablesmile, blow-kiss, coo, cry, daddy, dress, giggle, hold-me, hungry, kiss-cheek, mommy, no-kiss, peekaboo, play, pout, scamper, sleep, smile, undress, wiggle and yawn."); 
  \} 
\} else \{ 
 
  /* If the actor did NOT give a command */ 
   EmitTo(\$actor, "You must include a command you want followed. Such as: control "+Describe(\$this, nil, \$actor)+ " 'cry'."); 
   EmitTo(\$actor, "Valid controls for "+Describe(\$this)+" are: adorablesmile, blow-kiss, coo, cry, daddy, dress, giggle, hold-me, hungry, kiss-cheek, mommy, no-kiss, peekaboo, play, pout, scamper, sleep, smile, undress, wiggle and yawn."); 
\} 
return FALSE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:color">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:material">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:object">
         X[M] Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);    
Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replacesname", \$object: this);    
return TRUE;
      </Core:Property>
      <Core:Property property="new property name">
         "New Property Value"
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1126228836, "tonyd", "E", 1126229253, "tonyd", "E", 1126229536, "tonyd", "E", 1126229717, "tonyd", "E", 1126229772, "tonyd", "E", 1126230509, "lunamoon", "E", 1126230896, "tonyd", "E", 1126240251, "roccon", "E", 1126241256, "tonyd", "E", 1126243405, "tonyd", "E", 1126243442, "tonyd", "E", 1126245888, "lunamoon", "P", 1126246183, "lunamoon", "P", 1126246254, "tonyd", "P", 1126246307, "tonyd", "P", 1126246504, "tonyd", "P", 1126247777, "lunamoon", "P", 1126247816, "lunamoon", "P", 1126248145, "lunamoon", "P", 1126248476, "tonyd", "P", 1126248595, "lunamoon", "P", 1126248875, "lunamoon", "P", 1126249175, "tonyd", "P", 1126499693, "lunamoon", "P", 1126499772, "lunamoon", "P", 1126499893, "lunamoon", "P", 1126500002, "lunamoon", "P", 1126500073, "lunamoon", "P", 1126500108, "lunamoon", "P", 1126500235, "lunamoon", "P", 1126500349, "lunamoon", "P", 1126500378, "lunamoon", "P", 1126500547, "lunamoon", "P", 1126500677, "lunamoon", "P", 1126501400, "lunamoon", "P", 1126501443, "lunamoon", "P", 1126501519, "lunamoon", "P", 1127267897, "lunamoon", "P", 1127267949, "lunamoon", "P", 1127268008, "lunamoon", "P", 1127269597, "lunamoon", "P", 1128055683, "lunamoon", "P", 1128055712, "lunamoon", "P", 1128128864, "lunamoon", "P", 1128129153, "lunamoon", "P", 1128129183, "lunamoon", "P", 1128129234, "lunamoon", "P", 1128129300, "lunamoon", "P", 1128129374, "lunamoon", "P", 1128129711, "lunamoon", "P", 1128129756, "lunamoon", "P", 1131060559, "tunk_bodin", "X", 1131061213, "tunk_bodin", "X", 1138238189, "lunamoon", "E", 1147751630, "tunk_bodin", "X", 1149323426, "lunamoon", "K", 1149323676, "lunamoon", "K", 1149360561, "lunamoon", "E", 1149362026, "lunamoon", "P", 1149362121, "lunamoon", "P", 1149362149, "lunamoon", "P", 1149362323, "lunamoon", "P", 1172538751, "necate", "E", 1172538819, "necate", "E", 1174495181, "lunamoon", "E", 1174495411, "lunamoon", "E", 1195948660, "tonyd", "E", 1195954459, "tonyd", "E", 1195954568, "tonyd", "E", 1195954608, "tonyd", "E", 1195960101, "tonyd", "E", 1195974168, "tonyd", "E", 1195979338, "tonyd", "E", 1201552876, "jsfox", "X", 1201552924, "jsfox", "X", 1201552934, "jsfox", "X", 1201775588, "tonyd", "E", 1218129475, "morwenlorelie", "K", 1218129497, "morwenlorelie", "K", 1218131042, "rorschakovacs", "K", 1218131060, "rorschakovacs", "K", 1218131103, "rorschakovacs", "K", 1218131168, "rorschakovacs", "K", 1218131206, "rorschakovacs", "K", 1218131314, "rorschakovacs", "K", 1218131539, "rorschakovacs", "K", 1218132269, "rorschakovacs", "E", 1218132296, "rorschakovacs", "E", 1218132309, "rorschakovacs", "E", 1218132318, "rorschakovacs", "K", 1218132355, "rorschakovacs", "E", 1218132365, "rorschakovacs", "E", 1218132367, "rorschakovacs", "E", 1218132441, "rorschakovacs", "K", 1218132525, "rorschakovacs", "E", 1218132777, "rorschakovacs", "K", 1218132835, "rorschakovacs", "E", 1218132875, "rorschakovacs", "E", 1218133115, "rorschakovacs", "E", 1218133133, "rorschakovacs", "K", 1218133424, "rorschakovacs", "E", 1218133477, "rorschakovacs", "E", 1229598165, "morwenlorelie", "K", 1229598216, "morwenlorelie", "K", 1229598352, "morwenlorelie", "K", 1266465418, "haystack", "K", 1280593353, "jominey", "E", 1280593379, "jominey", "E", 1280593462, "jominey", "E", 1280593549, "jominey", "E", 1280593655, "jominey", "E", 1280593867, "jominey", "E", 1331701579, "tonyd", "E", 1331702225, "tonyd", "E", 1331769612, "tonyd", "E", 1441126913, "slurpeeslurp", "K", 1464660725, "ezralee", "E", 1464660755, "ezralee", "E", 1464660892, "ezralee", "E", 1464661044, "ezralee", "E", 1464661199, "ezralee", "E", 1464661236, "ezralee", "E", 1464662144, "ezralee", "E", 1464662649, "ezralee", "X", 1464663278, "ezralee", "K", 1464746293, "ezralee", "E", 1464746545, "ezralee", "E", 1464746576, "ezralee", "K", 1465694152, "ezralee", "K" \})
      </Core:Property>
      <Core:Property property="skill:advancedefensive">
         2
      </Core:Property>
      <Core:Property property="skill:attackingdefensive">
         0
      </Core:Property>
      <Core:Property property="skill:cutoffensive">3</Core:Property>
      <Core:Property property="skill:dodgedefensive">
         1
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="skill:feintoffensive">
         0
      </Core:Property>
      <Core:Property property="skill:fumbledefensive">
         0
      </Core:Property>
      <Core:Property property="skill:guarddefensive">
         3
      </Core:Property>
      <Core:Property property="skill:idledefensive">
         0
      </Core:Property>
      <Core:Property property="skill:recoverdefensive">
         2
      </Core:Property>
      <Core:Property property="skill:restdefensive">
         1
      </Core:Property>
      <Core:Property property="skill:retiredefensive">
         2
      </Core:Property>
      <Core:Property property="skill:salutedefensive">
         0
      </Core:Property>
      <Core:Property property="skill:thrustoffensive">
         3
      </Core:Property>
      <Core:Property property="volition">1</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
