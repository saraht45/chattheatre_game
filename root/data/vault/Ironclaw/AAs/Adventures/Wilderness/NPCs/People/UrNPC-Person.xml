<object clone="/base/obj/thing" owner="SkotOS">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Ironclaw:Lib:Combat:Cards:NPCs:PirateFighter)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="1"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="true">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="true" inside="false" near="true" over="false" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="person"/>
            <Base:SName sname="npc"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="people"/>
            <Base:PName pname="npcs"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             {? equal | $(this.trait:state) | dead | the corpse of a } {? equal | $(this.trait:state) | unconscious | unconscious } $(this.appearance:height) $(this.appearance:build) $(this.trait:animal)
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="error">
         "Failed to locate library spawnpoints."
      </Core:Property>
      <Core:Property property="export:lootable">1</Core:Property>
      <Core:Property property="export:nip-core:hooks">
         ([ "decide":\<Lib:NIP:base:hooks:decide\>, "delay":\<Lib:NIP:base:hooks:delay\>, "emoting":\<Lib:NIP:lib:emoting\>, "freemoting":\<Lib:NIP:lib:freemoting\>, "internal":\<Lib:NIP:base:hooks:internal\>, "movement":\<Lib:NIP:lib:movement\>, "resource-control":\<Lib:NIP:lib:resource-control\> ])
      </Core:Property>
      <Core:Property property="export:nip-core:inherits">
         ([ \<Lib:NIP:base:lib:hooks\>:(\{ "lib:core:find-hook", "lib:core:register-hook", "lib:core:unregister-hook", "lib:modify:hooks", "setprop-post:hook" \}), \<Lib:NIP:base:lib:signals\>:(\{ "lib:modify:signals", "setprop-post:signal", "lib:calc_sighookpath" \}), \<Lib:NIP:base:lib:stream\>:(\{ "setprop-post:sigexecptr", "setprop-post:sigstream" \}), \<Lib:NIP:base:signals:DECIDE\>:(\{ "setprop-post:decide" \}), \<Lib:NIP:lib:autostart\>:(\{ "lib:handler:start:auto" \}), \<Lib:NIP:lib:emoting\>:(\{ "lib:handler:emoting:parse", "lib:behave", "lib:handler:emoting:preparse" \}), \<Lib:NIP:lib:freemoting\>:(\{ "lib:handler_freemote" \}), \<Lib:NIP:lib:movement\>:(\{ "lib:core_movement_exit" \}), \<Lib:NIP:lib:resource-control\>:(\{ "witness-post:login%nip:resource-control", "witness:enter-from%nip:resource-control", "witness:teleport%resource-control", "lib:entering" \}), \<Lib:NIP:lib:spawn-control\>:(\{ "act:stop" \}) ])
      </Core:Property>
      <Core:Property property="export:nip-core:libraries">
         (\{ \<Lib:NIP:base:lib:signals\>, \<Lib:NIP:base:lib:hooks\>, \<Lib:NIP:base:lib:stream\>, \<Lib:NIP:lib:resource-control\>, \<Lib:NIP:core\>, \<Lib:NIP:base:signals:DELAY\>, \<Lib:NIP:base:signals:DECIDE\>, \<Lib:NIP:base:signals:INTERNAL\>, \<Lib:NIP:lib:autostart\>, \<Lib:NIP:lib:movement\>, \<Lib:NIP:lib:emoting\>, \<Lib:NIP:lib:freemoting\>, \<Lib:NIP:lib:spawn-control\> \})
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:behavior:">
         ([ 4:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:emoting:frequency">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:freemoting:frequency">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:hints:">
         ([ 4:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:movement:frequency">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:resource-control:ttl">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:resource-control:ttl_increase">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:spawn:area">
         ([ 4:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:sighookpath">
         (\{ "delay:DELAY-init", "delay:DELAY-exec", "resource-control:INTERNAL", "internal:INTERNAL-exec", "decide:DECIDE-init", "emoting:DECIDE", "freemoting:DECIDE", "movement:DECIDE", "decide:DECIDE-exec", "decide:DECIDE-post" \})
      </Core:Property>
      <Core:Property property="export:nip-core:signals">
         ([ 10:"DELAY", 500:"INTERNAL", 1000:"DECIDE" ])
      </Core:Property>
      <Core:Property property="export:nip-core:system:revision">
         44
      </Core:Property>
      <Core:Property property="export:nip:start">
         (\{ "handler:start:auto", "spawntraits", "spawncontents" \})
      </Core:Property>
      <Core:Property property="export:nip:trait:freemoting:frequency">
         20
      </Core:Property>
      <Core:Property property="export:nip:trait:freemoting:steal-frequency">
         10
      </Core:Property>
      <Core:Property property="export:nip:trait:movement:frequency">
         10
      </Core:Property>
      <Core:Property property="export:nip:trait:resource-control:ttl">
         1800
      </Core:Property>
      <Core:Property property="export:nip:trait:resource-control:ttl_increase">
         600
      </Core:Property>
      <Core:Property property="export:npc:animalchoices">
         ([ "ape":(\{ "gorilla", "orangutang", "chimpanzee" \}), "armadillo":(\{ "armadillo" \}), "badger":(\{ "badger" \}), "bear":(\{ "ordinary bear", "black bear", "brown bear", "polar bear", "panda", "grizzly bear", "sloth" \}), "boar":(\{ "boar" \}), "cat":(\{ "tabby", "burmese", "leopard", "panther", "bobcat", "cat", "himalayan cat", "coon", "forest cat", "bobtail", "curl", "birman", "bombay", "brown", "blue", "mau", "exotic", "fold", "manx", "ocicat", "rex", "shorthair", "siamese", "wirehair", "singapura", "persian", "van", "tigress", "tiger", "snow leopard", "persian cat", "puma", "abyssinian", "angora cat", "balinese", "chartreux", "korat", "laperm", "ragamuffin", "sphynx", "toyger" \}), "cow":(\{ "bison", "bull", "cow", "ox", "yak" \}), "dog":(\{ "coyote", "dingo", "dog", "hyena", "jackal", "wild dog", "affenpinscher", "hound", "terrier", "akita", "malamute", "foxhound", "water spaniel", "shepherd dog", "cattle dog", "basenji", "basset hound", "beagle", "collie", "beauceron", "malinois", "sheepdog", "tervuren", "mountain dog", "bloodhound", "bichon frise", "borzoi", "boxer", "briard", "bull terrier", "bulldog", "bullmastiff", "corgi", "retriever", "chihuahua", "shar-pai", "chow chow", "cocker spaniel", "dachschund", "doberman pinscher", "greyhound" \}), "elk":(\{ "elk", "deer", "gazelle", "moose", "tapir" \}), "fox":(\{ "fox", "gray fox", "kit fox", "swift fox", "bengal fox", "red fox", "silver fox", "fennec fox", "arctic fox", "culpeo", "bat-eared fox" \}), "goat":(\{ "ram", "billy goat" \}), "horse":(\{ "horse", "pony", "mule", "donkey", "nag", "hack", "trotting horse", "quarter horse", "draft horse", "plow horse", "shire horse", "cob horse", "courser", "mustang", "pinto", "warmblood horse", "palfrey", "rouncy", "jennet horse", "andalusian", "friesian", "arabian", "clydesdale", "appaloosa", "paint horse", "thoroughbred", "ice pony", "percheron", "morgan horse", "przewalski horse", "zebra", "palomino", "lipizzaner", "hannoverian" \}), "monkey":(\{ "monkey", "baboon", "howler monkey", "langur monkey", "spider monkey", "wooly monkey", "lemur", "capuchin", "chimpanzee", "colobus", "galago", "gibbon", "guenon", "leaf monkey", "tamarin", "macaque", "mangabey", "marmoset", "squirrel monkey" \}), "mustelid":(\{ "ermine", "ferret", "mink", "wolverine", "meerkat", "mongoose" \}), "porcupine":(\{ "porcupine", "hedgehog", "echidna" \}), "rabbit":(\{ "rabbit", "jackrabbit", "hare", "fuzzy lop", "dwarf rabbit", "dwarf lop" \}), "raccoon":(\{ "raccoon", "wombat" \}), "rhinoceros":(\{ "rhinoceros" \}), "rodent":(\{ "beaver", "gerbil", "groundhog", "hamster", "mouse", "rat", "shrew", "squirrel", "guinea pig", "lemming", "dormouse", "agouti", "jerboa", "hairless rat", "wharf rat", "vole" \}), "sheep":(\{ "sheep" \}), "skunk":(\{ "skunk" \}), "weasel":(\{ "weasel" \}), "wolf":(\{ "wolf", "timber wolf", "lobo", "grey wolf", "buffalo wolf", "arctic wolf", "red wolf", "maned wolf" \}) ])
      </Core:Property>
      <Core:Property property="loading">1</Core:Property>
      <Core:Property property="merry:inherit:act:start">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:act:stop">
         \<Lib:NIP:lib:spawn-control\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:behave">
         \<Lib:NIP:lib:emoting\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:calc_sighookpath">
         \<Lib:NIP:base:lib:signals\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:find-hook">
         \<Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:merry_add">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:merry_delete">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:register-hook">
         \<Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:sysupdate">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:unregister-hook">
         \<Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core_movement_exit">
         \<Lib:NIP:lib:movement\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:decide:decide-exec">
         \<Lib:NIP:base:hooks:decide\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:decide:decide-init">
         \<Lib:NIP:base:hooks:decide\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:decide:decide-post">
         \<Lib:NIP:base:hooks:decide\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:delay:delay-exec">
         \<Lib:NIP:base:hooks:delay\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:delay:delay-init">
         \<Lib:NIP:base:hooks:delay\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:emoting:decide">
         \<Lib:NIP:lib:emoting\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:entering">
         \<Lib:NIP:lib:resource-control\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:find_nip_object">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:freemoting:decide">
         \<Lib:NIP:lib:freemoting\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:handler:emoting:parse">
         \<Lib:NIP:lib:emoting\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:handler:emoting:preparse">
         \<Lib:NIP:lib:emoting\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:handler:start:auto">
         \<Lib:NIP:lib:autostart\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:handler_freemote">
         \<Lib:NIP:lib:freemoting\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:heartbeat">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:internal:internal-exec">
         \<Lib:NIP:base:hooks:internal\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:log">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:modify:hooks">
         \<Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:modify:libraries">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:modify:signals">
         \<Lib:NIP:base:lib:signals\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:movement:decide">
         \<Lib:NIP:lib:movement\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:ncs:handler">
         \<Lib:NIP:NCS\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:resource-control:internal">
         \<Lib:NIP:lib:resource-control\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:shutdown">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:add">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:decide">
         \<Lib:NIP:base:signals:DECIDE\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:del">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:delete">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:error">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:hook">
         \<Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:nip">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:nip-core">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:sigexecptr">
         \<Lib:NIP:base:lib:stream\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:signal">
         \<Lib:NIP:base:lib:signals\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:sigstream">
         \<Lib:NIP:base:lib:stream\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:sub">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:witness-post:login%nip:resource-control">
         \<Lib:NIP:lib:resource-control\>
      </Core:Property>
      <Core:Property property="merry:inherit:witness:enter-from%nip:resource-control">
         \<Lib:NIP:lib:resource-control\>
      </Core:Property>
      <Core:Property property="merry:inherit:witness:teleport%resource-control">
         \<Lib:NIP:lib:resource-control\>
      </Core:Property>
      <Core:Property property="merry:lib:die">
         X[M] ::shutdown(); 

Set(\$nip, "nip:trait:movement:frequency", 0);

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:grabchoices">
         X[M] /*   
Returns an array of start story choices, after being given a choice type, and possibly animal type and animal breed   
*/   
 
if (!\$choice) return (\{\}); 
 
\$choicearray = (\{\}); 
 
if(Get(\$this, "choices:" + \$choice)) \{
    \$choicearray = Get(\$this, "choices:" + \$choice);
\} else \{
    if(Get(\$\{Ironclaw:Theatre:CreateCharacter\}, "choices:" + \$choice)) \{
        \$choicearray = Get(\$\{Ironclaw:Theatre:CreateCharacter\}, "choices:" + \$choice);
    \}
\}
 
if(\$animaltype) \{ 
  if(\$propmap = Get(\$\{Ironclaw:Theatre:CreateCharacter\}, "choices:" + \$choice + ":" + \$animaltype)) \{ 
    if(\$propmap["disallowed"]) \$choicearray -= \$propmap["disallowed"]; 
    if(\$propmap["allowed"]) \$choicearray += \$propmap["allowed"]; 
    if(\$propmap["only"]) \$choicearray = \$propmap["only"]; 
  \} 
\} 
 
if(\$animalbreed \&\& \$animaltype) \{ 
  if(\$propmap = Get(\$\{Ironclaw:Theatre:CreateCharacter\}, "choices:" + \$choice + ":" + \$animaltype + ":" + \$animalbreed)) \{ 
    if(\$propmap["disallowed"]) \$choicearray -= \$propmap["disallowed"]; 
    if(\$propmap["allowed"]) \$choicearray += \$propmap["allowed"]; 
    if(\$propmap["only"]) \$choicearray = \$propmap["only"]; 
  \} 
\} 
 
\$choicearray = map_indices( arr_to_set( \$choicearray )); 
 
return \$choicearray;
      </Core:Property>
      <Core:Property property="merry:lib:spawncontents">
         X[M] \$contents = (\{ "clothing", "weapons", "bag" \});

for(\$i = 0; \$i \< sizeof(\$contents); \$i++) \{
    if(Get(\$this, "initialcontents:" + \$contents[\$i])) \{
        \$tempMap = Get(\$this, "initialcontents:" + \$contents[\$i]);
        \$temp = map_indices(\$tempMap);
        \$r = \$temp[random(sizeof(\$temp))];
        \$item = Spawn(\$r);
        \$item."base:environment" = \$this;
        \$item."base:worn-by" = \$this;
        \$traitsMap = \$tempMap[\$r];
        \$traits = map_indices(\$traitsMap);

        for(\$j = 0; \$j \< sizeof(\$traits); \$j++) \{
            \$traitName = \$traits[\$j];
            \$traitValues = \$traitsMap[\$traitName];
            \$traitValue = \$traitValues[random(sizeof(\$traitValues))];

            if(\$traitName == "trait:state") \{ 
                \$item."trait:color" = \$traitValue + " " + Str(\$item."trait:color");
            \} else \{
                Set(\$item, "trait:" + \$traits[\$j], \$traitValue);
            \}
        \}
    \}
\}

if(\$this."trait:money:max") \{
    \$this."trait:money" = random(Int(\$this."trait:money:max")) + 100;
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:spawntraits">
         X[M] if(!\$this."trait:animal" \|\| (\$this."trait:animal" == "unknown") \|\| (\$this."trait:animaltype" == "unknown")) \{
    \$animalChoices = \$this."npc:animalchoices";

    \$animalTypes = map_indices(\$animalChoices);
    \$animalType = \$animalTypes[random(sizeof(\$animalTypes))];
    \$this."trait:animaltype" = \$animalType;

    \$animalBreeds = \$animalChoices[\$animalType];
    \$animalBreed = \$animalBreeds[random(sizeof(\$animalBreeds))];
    \$this."trait:animal" = \$animalBreed;
\} else \{
    \$animalbreed = \$this."trait:animal";
    \$animaltype = \$this."trait:animaltype";
\}

\$traits = (\{ "build", "height", "clawapp", "clawlength", "earshape", "eyecolor", "eyecoloradj", "eyeshape", "feet", "furcolor", "furlength", "furtexture", "hands", "lipshape", "mouthshape", "muzzleshape", "noseshape", "taillength", "tailtexture", "anterlength", "antlertype", "hairtype", "haircolor", "hairlength", "hairstyle" \});

for(\$i = 0; \$i \< sizeof(\$traits); \$i++) \{
    \$array = Call(\$this, "grabchoices", \$choice: \$traits[\$i]);
    if(sizeof(\$array)) Set(\$this, "appearance:" + \$traits[\$i], \$array[random(sizeof(\$array))]);
\}

\$maleBreeds = (\{ "bison", "bull", "ox", "yak", "ram", "billy goat" \});
\$femaleBreeds = (\{ "cow", "tigress", "lioness" \});

if(member(\$this."trait:animal", \$maleBreeds)) \{
    \$this."base:gender" = 1;
\} else if(member(\$this."trait:animal", \$femaleBreeds)) \{
    \$this."base:gender" = 2;
\} else \{
    \$this."base:gender" = Int(oneof("1", "2"));
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:fight-dob">
         X[M] /* Poke the skeleton to start a fight */

if(\$this."trait:state" == "dead" \|\| \$this."trait:state" == "unconscious") \{
    EmitTo(\$actor, Describe(\$this) + " is not something you can fight.");
    return FALSE;
\}

Social(this, "turn", nil, nil, "to", \$actor);

if(\$this."combat:bribed_by") \{
    \$this."combat:bribed_by"[\$actor] = nil;
\}

if(\$this."combat:defeated") \{
    \$this."combat:defeated"[\$actor] = nil;
\}

\$target = ::find_target();
\$target = \$actor;

if(!\$target) return TRUE;

/* Set them up for new combat */
\$target."merry:inherit:act-pre:breakcombat" = \$\{Ironclaw:Lib:Combat:Cards:Combat\};
\$target."merry:inherit:act-pre:fight" = \$\{Ironclaw:Lib:Combat:Cards:Combat\};
\$target."merry:inherit:act-pre:pass" = \$\{Ironclaw:Lib:Combat:Cards:Combat\};
ccombat::start_fight(\$attacker: this, \$target: \$target);

Set(\$this, "nip:trait:movement:frequency", 0);

return FALSE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:state">
         X[M] if(this."nip:behavior:db") \{ 
    ::shutdown(); 
\}

\$this."base:proximity" = NewNRef(\$this."base:environment", "ground");
\$this."base:stance" = 3;
\$this."base:propositionstring" = "on";

if(\$(hook-value) == "dead") \{
    Set(\$this, "details:default:sname:corpse", TRUE);
    Set(\$this, "details:default:pname:corpses", TRUE);
    Set(\$this, "details:default:adjective:corpse", TRUE);
    Set(\$this, "details:default:adjective:of", TRUE);
    Set(\$this, "details:default:definite", TRUE);

    \$this."merry:inherit:react-pre:take%takecorpse" = \$\{Ironclaw:Lib:Characters:Death\}; 
    \$this."merry:inherit:react-pre:demand-consent%corpse" = \$\{Ironclaw:Lib:Characters:Death\}; 
    \$this."merry:inherit:react-pre:take-from%corpse" = \$\{Ironclaw:Lib:Characters:Death\}; 
    \$this."merry:inherit:react-pre:dress-dob%corpse" = \$\{Ironclaw:Lib:Characters:Death\};
    \$this."search:tables" = \$this."config:search:tables";

    \$delay(360, FALSE, "d456");

    Slay(\$this);
\} else if(\$(hook-value) == "unconscious") \{
    Set(\$this, "details:default:definite", FALSE);

    \$this."search:tables" = \$this."config:search:tables";
\} else \{
    \$this."search:tables" = nil;
\}

return TRUE;
      </Core:Property>
      <Core:Property property="ndp">
         " *** FINISHED ADDITION *** "
      </Core:Property>
      <Core:Property property="nip-core:hooks">
         ([ "decide":\<Lib:NIP:base:hooks:decide\>, "delay":\<Lib:NIP:base:hooks:delay\>, "emoting":\<Lib:NIP:lib:emoting\>, "freemoting":\<Lib:NIP:lib:freemoting\>, "internal":\<Lib:NIP:base:hooks:internal\>, "movement":\<Lib:NIP:lib:movement\>, "resource-control":\<Lib:NIP:lib:resource-control\> ])
      </Core:Property>
      <Core:Property property="nip-core:inherits">
         ([ \<Lib:NIP:base:lib:hooks\>:(\{ "lib:core:find-hook", "lib:core:register-hook", "lib:core:unregister-hook", "lib:modify:hooks", "setprop-post:hook" \}), \<Lib:NIP:base:lib:signals\>:(\{ "lib:modify:signals", "setprop-post:signal", "lib:calc_sighookpath" \}), \<Lib:NIP:base:lib:stream\>:(\{ "setprop-post:sigexecptr", "setprop-post:sigstream" \}), \<Lib:NIP:base:signals:DECIDE\>:(\{ "setprop-post:decide" \}), \<Lib:NIP:lib:autostart\>:(\{ "lib:handler:start:auto" \}), \<Lib:NIP:lib:emoting\>:(\{ "lib:handler:emoting:parse", "lib:behave", "lib:handler:emoting:preparse" \}), \<Lib:NIP:lib:freemoting\>:(\{ "lib:handler_freemote" \}), \<Lib:NIP:lib:movement\>:(\{ "lib:core_movement_exit" \}), \<Lib:NIP:lib:resource-control\>:(\{ "witness-post:login%nip:resource-control", "witness:enter-from%nip:resource-control", "witness:teleport%resource-control", "lib:entering" \}), \<Lib:NIP:lib:spawn-control\>:(\{ "act:stop" \}) ])
      </Core:Property>
      <Core:Property property="nip-core:libraries">
         (\{ \<Lib:NIP:base:lib:signals\>, \<Lib:NIP:base:lib:hooks\>, \<Lib:NIP:base:lib:stream\>, \<Lib:NIP:lib:resource-control\>, \<Lib:NIP:core\>, \<Lib:NIP:base:signals:DELAY\>, \<Lib:NIP:base:signals:DECIDE\>, \<Lib:NIP:base:signals:INTERNAL\>, \<Lib:NIP:lib:autostart\>, \<Lib:NIP:lib:movement\>, \<Lib:NIP:lib:emoting\>, \<Lib:NIP:lib:freemoting\>, \<Lib:NIP:lib:spawn-control\> \})
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:behavior:">
         ([ 4:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:emoting:frequency">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:freemoting:frequency">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:hints:">
         ([ 4:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:movement:frequency">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:resource-control:ttl">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:resource-control:ttl_increase">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:spawn:area">
         ([ 4:1 ])
      </Core:Property>
      <Core:Property property="nip-core:sighookpath">
         (\{ "delay:DELAY-init", "delay:DELAY-exec", "resource-control:INTERNAL", "internal:INTERNAL-exec", "decide:DECIDE-init", "emoting:DECIDE", "freemoting:DECIDE", "movement:DECIDE", "decide:DECIDE-exec", "decide:DECIDE-post" \})
      </Core:Property>
      <Core:Property property="nip-core:signals">
         ([ 10:"DELAY", 500:"INTERNAL", 1000:"DECIDE" ])
      </Core:Property>
      <Core:Property property="nip-core:system:revision">
         44
      </Core:Property>
      <Core:Property property="nip:start">
         (\{ "handler:start:auto", "spawntraits" \})
      </Core:Property>
      <Core:Property property="nip:trait:freemoting:frequency">
         20
      </Core:Property>
      <Core:Property property="nip:trait:freemoting:steal-frequency">
         10
      </Core:Property>
      <Core:Property property="nip:trait:movement:frequency">
         10
      </Core:Property>
      <Core:Property property="nip:trait:resource-control:ttl">
         1800
      </Core:Property>
      <Core:Property property="nip:trait:resource-control:ttl_increase">
         600
      </Core:Property>
      <Core:Property property="npc:resource-control:live_time">
         1390245013
      </Core:Property>
      <Core:Property property="npc:status:spawndate">
         1390244888
      </Core:Property>
      <Core:Property property="npc:sys:sighookpath">
         (\{ "delay:DELAY-init", "delay:DELAY-exec", "resource-control:INTERNAL", "internal:INTERNAL-exec", "decide:DECIDE-init", "emoting:DECIDE", "freemoting:DECIDE", "movement:DECIDE", "decide:DECIDE-exec", "decide:DECIDE-post" \})
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1144052085, "-", "SYNC", 1221752477, "???", "R", 1390236721, "jominey", "E", 1390236867, "jominey", "E", 1390236878, "jominey", "E", 1390237501, "jominey", "E", 1390237615, "jominey", "E", 1390237933, "jominey", "E", 1390240320, "jominey", "E", 1390240347, "jominey", "E", 1390240372, "jominey", "E", 1390240394, "jominey", "E", 1390240453, "jominey", "E", 1390240510, "jominey", "E", 1390240526, "jominey", "E", 1390240588, "jominey", "E", 1390240625, "jominey", "E", 1390240636, "jominey", "E", 1390241764, "jominey", "E", 1390241802, "jominey", "E", 1390241814, "jominey", "E", 1390242813, "jominey", "E", 1390243263, "jominey", "R", 1390243337, "jominey", "R", 1390243346, "jominey", "R", 1390243389, "jominey", "R", 1390244580, "jominey", "K", 1390244897, "jominey", "S", 1390245013, "jominey", "S", 1390245081, "jominey", "S", 1390245196, "jominey", "E", 1390245229, "jominey", "E", 1390245249, "jominey", "E", 1390245346, "jominey", "E", 1390245356, "jominey", "E", 1390245527, "jominey", "P", 1390245609, "jominey", "P", 1390249307, "jominey", "E", 1390275669, "jominey", "E", 1390276628, "jominey", "E", 1390276683, "jominey", "E", 1390276727, "jominey", "E", 1390276848, "jominey", "E", 1390276875, "jominey", "E", 1390277093, "jominey", "E", 1390277110, "jominey", "E", 1390277176, "jominey", "E", 1390277287, "jominey", "E", 1390277563, "jominey", "E", 1390277629, "jominey", "E", 1390277737, "jominey", "E", 1390277800, "jominey", "E", 1390277883, "jominey", "E", 1390277960, "jominey", "E", 1390278252, "jominey", "E", 1390278315, "jominey", "E", 1390278496, "jominey", "E", 1390278553, "jominey", "E", 1390335088, "jominey", "S", 1390335093, "jominey", "S", 1390335096, "jominey", "S", 1390337918, "jominey", "K", 1390337974, "jominey", "E", 1390338037, "jominey", "E", 1398371147, "jominey", "E", 1398371827, "jominey", "E", 1401141015, "jominey", "E", 1401141229, "jominey", "E", 1401141282, "jominey", "E", 1401141596, "jominey", "E", 1401141729, "jominey", "E", 1401141794, "jominey", "E", 1401141889, "jominey", "K", 1401142485, "jominey", "K", 1401142609, "jominey", "K", 1401142639, "jominey", "K", 1401142839, "jominey", "E", 1401142844, "jominey", "E", 1401142872, "jominey", "E", 1401142909, "jominey", "E", 1401143425, "jominey", "E", 1401143451, "jominey", "E", 1401144807, "jominey", "E", 1401157925, "jominey", "E", 1401236307, "jominey", "E", 1401236319, "jominey", "E", 1401236410, "jominey", "E", 1403578845, "jominey", "E", 1403580452, "jominey", "E", 1412529754, "jominey", "E", 1412534380, "jominey", "E", 1412534497, "jominey", "E", 1412534587, "jominey", "E", 1412534604, "jominey", "E", 1412539201, "jominey", "E", 1412539644, "jominey", "E", 1412539674, "jominey", "E", 1412548298, "jominey", "E", 1412548686, "jominey", "E", 1412549373, "jominey", "E", 1412549819, "jominey", "E", 1412550786, "jominey", "S", 1412550794, "jominey", "S", 1412550796, "jominey", "S", 1412550799, "jominey", "S", 1412550818, "jominey", "S", 1412561895, "jominey", "E", 1412561910, "jominey", "E", 1412562074, "jominey", "E", 1412562803, "jominey", "E", 1412564840, "jominey", "K", 1439413753, "slurpeeslurp", "E", 1507931184, "jominey", "E", 1507931678, "jominey", "E", 1507931880, "jominey", "K" \})
      </Core:Property>
      <Core:Property property="sigstream">2</Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
