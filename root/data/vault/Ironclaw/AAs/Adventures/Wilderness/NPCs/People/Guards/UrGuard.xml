<object clone="/base/obj/thing" owner="jominey">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Ironclaw:AAs:Adventures:Wilderness:NPCs:People:UrNPC-Person)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="1"/>
    <Base:Misc gender="male" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="true">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:combat:armor:rating">
         2
      </Core:Property>
      <Core:Property property="export:combat:dagger">
         10
      </Core:Property>
      <Core:Property property="export:combat:fightable">
         1
      </Core:Property>
      <Core:Property property="export:combat:unarmed">
         12
      </Core:Property>
      <Core:Property property="export:nip:group">
         "road-only"
      </Core:Property>
      <Core:Property property="export:trait:body">10</Core:Property>
      <Core:Property property="export:trait:type">
         "guard"
      </Core:Property>
      <Core:Property property="merry:lib:fight_outcome_capture">
         X[M] /* Knock the traveler out. */ 
 
if(!\$par["char"]) return TRUE;  
 
\$fighter = \$par["char"]; 
  
EmitTo(\$fighter, "You knock " + Describe(this) + " unconscious.");  
EmitIn(this."base:environment", Describe(\$fighter) + " knocks " + Describe(\$this) + " unconscious.", \$fighter);  
  
\$this."status:hurt" = nil;  
\$this."savedprop:status:hurt" = nil;  
\$this."status:afraid" = nil;  
\$this."savedprop:status:afraid" = nil;  
\$this."status:recently_afraid" = nil;  
\$this."savedprop:status:recently_afraid" = nil;  
\$this."status:injured" = nil;  
\$this."savedprop:status:injured" = nil;  
\$this."trait:state" = "unconscious"; 
 
\$par["char"]."tmp:combat:traveler:capture" = Int(\$par["char"]."tmp:combat:traveler:capture")+1;  
 
if(\$this."trait:money") \{ 
    \$loot = Int(\$this."trait:money"); 
    EmitTo(\$fighter, TAG("You find " + Str(\$loot/100) + " denarii on " + Describe(\$this) + ".", "social:first")); 
    \$fighter."trait:money" += \$loot; 
\} 
 
\$delay(60*5, FALSE, "18e2"); 
 
\$this."trait:state" = nil; 
 
Social(\$this, "groan", "disorientedly"); 
 
\$delay(3, FALSE, "3372"); 
 
EmitIn(\$this."base:environment", TAG(Describe(\$this) + " is ushered off to safety by " + oneof("a healer", "some healers", "a priest", "some priests", "a guard", "some guards") + ".", "social:third")); 
 
Slay(\$this); 
  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:fight_outcome_kill">
         X[M] /* Kill the traveler. */ 
 
if(!\$par["char"]) return TRUE;  
 
\$fighter = \$par["char"]; 
  
EmitTo(\$fighter, "You kill " + Describe(this) + ".");  
EmitIn(this."base:environment", Describe(\$fighter) + " kills " + Describe(\$this) + ".", \$fighter);  
  
\$this."status:hurt" = nil;  
\$this."savedprop:status:hurt" = nil;  
\$this."status:afraid" = nil;  
\$this."savedprop:status:afraid" = nil;  
\$this."status:recently_afraid" = nil;  
\$this."savedprop:status:recently_afraid" = nil;  
\$this."status:injured" = nil;  
\$this."savedprop:status:injured" = nil;  
\$this."trait:state" = "dead"; 
 
\$par["char"]."tmp:combat:traveler:capture" = Int(\$par["char"]."tmp:combat:traveler:capture")+1;  
 
if(\$this."trait:money") \{ 
    \$loot = Int(\$this."trait:money"); 
    EmitTo(\$fighter, TAG("You find " + Str(\$loot/100) + " denarii on " + Describe(\$this) + ".", "social:first")); 
    \$fighter."trait:money" += \$loot; 
\}
 
\$delay(60*5, FALSE, "d3ee"); 
 
EmitIn(\$this."base:environment", TAG(Describe(\$this) + " is hauled away by " + oneof("a healer", "some healers", "a priest", "some priests", "a guard", "some guards") + ".", "social:third")); 
 
 
Slay(\$this); 
  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:fight_outcome_neutral">
         X[M] /* Let the traveler go. No rep gain. */

if(!\$par["char"]) return TRUE; 

\$fighter = \$par["char"];

EmitTo(\$fighter, "You dismissively turn away from " + Describe(\$this) + "."); 
EmitIn(\$this."base:environment", Describe(\$fighter) + " dismissively turns away from " + Describe(\$this) + ".", \$fighter);

\$this."status:hurt" = nil; 
\$this."savedprop:status:hurt" = nil; 
\$this."status:afraid" = nil; 
\$this."savedprop:status:afraid" = nil; 
\$this."status:recently_afraid" = nil; 
\$this."savedprop:status:recently_afraid" = nil; 
\$this."status:injured" = nil; 
\$this."savedprop:status:injured" = nil; 
 
\$fighter."tmp:combat:traveler:neutral" = Int(\$fighter."tmp:combat:traveler:neutral") + 1; 

\$delay(2, FALSE, "d3ee");

EmitIn(\$this."base:environment", Describe(\$this) + " hurriedly crawls away.");

Slay(\$this);
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:find_target">
         X[M] /* When the NPC is looking for a target */  
int i;  
  
/* In this example, we want to target PCs */  
\$options = Match(this."base:environment", "pc");  
\$preferred_options = (\{ \});  
  
/* We need to convert the NRef's from the PC list into objects */  
for(i=0; i\<sizeof(\$options); i++)  
  \$options[i] = NRefOb(\$options[i]);  
  
/* We prefer to target PCs that are already attacking us */  
for(i=0; i\<sizeof(\$options); i++) \{  
  if(\$options[i]."udat:object" \&\& \$options[i].combat \&\& \$options[i].combat["target"] == this) \$preferred_options += (\{ \$options[i] \});  
\}  
if(sizeof(\$preferred_options)) return \$preferred_options[random(sizeof(\$preferred_options))];  
  
/* Next prefer to target PCs that are already in combat with us */  
for(i=0; i\<sizeof(\$options); i++) \{  
  if(\$options[i]."udat:object" \&\& \$options[i].combat) \$preferred_options += (\{ \$options[i] \});  
\}  
if(sizeof(\$preferred_options)) return \$preferred_options[random(sizeof(\$preferred_options))];  
  
/* Next prefer to target PCs that aren't dying or dead or injured */  
for(i=0; i\<sizeof(\$options); i++) \{  
  if(\$options[i]."udat:object" \&\& !\$options[i]."status:injured" \&\& !\$options[i]."status:dying" \&\& !\$options[i]."status:dead") \$preferred_options += (\{ \$options[i] \});  
\}  

if(sizeof(\$preferred_options)) return \$preferred_options[random(sizeof(\$preferred_options))];  
 
if(sizeof(\$options)) return \$options[random(sizeof(\$options))]; 
  
return nil;
      </Core:Property>
      <Core:Property property="merry:lib:give_combat_damage">
         X[M] if(\$damage \>= 4) \{  
  ccombat::remove_from_combat(\$fighter: \$target);  
  \$delay(0.5, TRUE, "30de");  
  \$target."tmp:combat:traveler:defeated" = Int(\$target."tmp:combat:traveler:defeated")+1;  
  Social(\$char, "shout", nil, "Guards! Guards! Thief!"); 
  \$delay(2, FALSE, "017e");
  Social(\$char, "flail", nil, "Over here! I caught 'em!"); 
  Set(\$char, "base:proximity", NewNRef(\$target, "default")); 

  /* Assault charges? */
  /* Should we spawn a constable/guard to take PC back to Triskellian? (Only if traveler is last person standing) */
\}  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:pickpocket_alert">
         X[M] if(\$this == \$victim) \{
    Social(\$this, "scream", "angrily", "I'm being robbed!");
    Social(\$this, "fight", nil, nil, nil, \$thief);
\} else \{
    Social(\$this, "scream", "nervously", "Thief! Thief! Help!", "at", \$thief);
\}

/* If they have a guard, make the guard attack */

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:take_combat_actions">
         X[M] /* When the NPC is given a turn in combat, this is the script where they decide what to do */  
int i;  
  
/* \$az = \$\{Chatters:IC:az:azrael\};  
EmitTo(\$az, "Taking an action"); */  
  
switch(random(3)) \{  
  case 2:  
    Social(this, oneof("growl", "shout", "warn"), oneof("calmly", "patiently", "aggressively")); break;  
  case 1:  
    Social(this, oneof("sidestep", "dodge", "hop"), oneof("left-and-right", "practicedly", "purposefully")); break;  
  default:  
    Social(this, oneof("tell", "demand", "insist"), oneof("authoritatively", "loudly"), oneof("Stand down!", "Drop your weapon now!", "Stop before I hurt you!", "Enough!", "In the name of the Don, I command you to cease!"));  
\}  
\$delay(2, TRUE, "52ac");  
  
\$actions = copy(this.combat["options"]);  
\$actions -= (\{ nil \});  
  
/* Do we need a new target? */  
if(!this.combat["target"])  
  this.combat["target"] = ::find_target();  
  
if(!this.combat["target"]) \{  
  /* We couldn't find a target. Remove ourselves from the fight. */  
  ccombat::remove_from_combat(\$fighter: this);  
  ccombat::end_turn(\$char: this);  
  return TRUE;  
\}  
  
if(!this.combat["target"].combat) \{  
  ccombat::start_fight(\$attacker: this, \$target: this.combat["target"]);  
  \$delay(0.1, TRUE, "64a5");  
\}  
  
\$turn_id = random(1000000000);  
\$params = ([ "char":this, "taking_action":TRUE, "turn_id":\$turn_id ]);  
  
  
/* Can we attack? */  
for(i=0;i\<sizeof(\$actions);i++) \{  
  if(\$actions[i][0] == "attack") \{  
    if( Call(\$actions[i][1], \$actions[i][0], \$char: \$char, \$par: nil, \$check_valid: TRUE) ) \{  
      return Call(\$actions[i][1], \$actions[i][0], \$par: \$params);  
    \}  
  \}  
\}  
  
/* Couldn't attack. Can we do another action? */  
for(i=0;i\<sizeof(\$actions);i++) \{  
  if(\$actions[i][0] == "aim" \|\| \$actions[i][0] == "guard") \{  
    if( Call(\$actions[i][1], \$actions[i][0], \$char: \$char, \$par: nil, \$check_valid: TRUE) ) \{  
  
      if(\$actions[i][0] == "aim") \{  
        EmitIn(this."base:environment", Describe(this)+" attempts to "+oneof("focus on "+Describe(this.combat["target"]), "line up an attack")+".");  
      \} else if(\$actions[i][0] == "guard") \{  
        EmitIn(this."base:environment", Describe(this)+" curls up into a fetal position.");  
      \}  
  
      return Call(\$actions[i][1], \$actions[i][0], \$par: \$params);  
    \}  
  \}  
\}  
  
/* Couldn't do anything. End the turn */  
ccombat::end_turn(\$char: this); /* Because we return TRUE above during the delay, the script won't pass for us. So we need to tell it to pass */  
return FALSE; /* This means we didn't complete our action, so the script will need to pass for us */
      </Core:Property>
      <Core:Property property="merry:lib:take_combat_damage_dying">
         X[M] /* Script run when the NPC takes enough damage to be dying */  
\$char."tmp:combat:traveler:won" = Int(\$char."tmp:combat:traveler:won")+1;  
  
EmitTo(\$char, "With a final strike, you beat down "+Describe(this)+"!");  
EmitIn(\$char."base:environment", "With a final strike, "+Describe(\$char)+" beats down "+Describe(this)+"!", \$char);  
 
ccombat::remove_from_combat(\$fighter: this);  
 
::die(\$nip: \$this); 
  
\$delay(0.5, FALSE, "b561");  
 
interaction::question(\$actor: \$char, \$question: "What do you want to do with this traveler??", \$expires: 60, \$env: "FALSE", \$a: "Knock him out.", \$a_ob: this, \$a_fun: "fight_outcome_capture", \$b: "Kill him.", \$b_ob: this, \$b_fun: "fight_outcome_kill", \$c: "Let him go.", \$c_ob: this, \$c_fun: "fight_outcome_neutral", \$expire_ob: this, \$expire_fun: "fight_outcome_release_neutral", \$par: ([ "char":\$char ])); 
 
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:sneak-iob">
         X[M] \$roll1 = ironclaw::roll(\$roller: \$actor, \$skills: (\{ "thief:stealth", "thief:shadowing" \}), \$bonus: "trait:agility");

\$observers = Match(\$actor."base:environment", "pc") \| Match(\$actor."base:environment", "npc");

for(\$i = 0; \$i \< sizeof(\$observers); \$i++) \{
    \$observers[\$i] = NRefOb(\$observers[\$i]);
\}

\$observers -= (\{ \$actor \});

\$spotters = 0;

for(\$i = 0; \$i \< sizeof(\$observers); \$i++) \{
    \$roll2 = ironclaw::roll(\$roller: \$observers[\$i], \$skills: (\{ "mental:observation" \}), \$bonus: "trait:mind");

    if(\$roll1 \< \$roll2) \{
        if(\$observers[\$i] == \$this) \{
            Social(\$this, "frown", "suspiciously", "What are you doing?", "at", \$actor);
        \} else \{
            EmitTo(\$observers[\$i], TAG("You catch " + Describe(\$observers[\$i]) + " sneaking closer to " + Describe(\$this) + ".", "social:third"));
        \}
        \$spotters++;
    \}
\}

EmitTo(\$actor, TAG("You sneak closer to " + Describe(\$this) + ".", "social:first"));
\$actor."base:proximity" = NewNRef(\$this, "default");

/* Give temp bonus for successful sneakery */
if((sizeof(\$observers) - \$spotters) \> 0) \{
    \$actor."pickpocket:bonus" = Int(sizeof(\$observers) - \$spotters)*4;
    \$delay(5, FALSE, "a283");
    \$actor."pickpocket:bonus" = nil;
\}

return FALSE;
      </Core:Property>
      <Core:Property property="merry:witness-post:enter-from">
         X[M] return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1412552968, "jominey", "E", 1412552974, "jominey", "E", 1412552979, "jominey", "E", 1412552983, "jominey", "E", 1412552989, "jominey", "E", 1412552993, "jominey", "E", 1412553009, "jominey", "E", 1412554249, "jominey", "R", 1412554446, "jominey", "E", 1412554539, "jominey", "E", 1412554592, "jominey", "E", 1412554633, "jominey", "E", 1412554671, "jominey", "E", 1412554697, "jominey", "E", 1412554807, "jominey", "E", 1412554854, "jominey", "E", 1412555151, "jominey", "E", 1412555326, "jominey", "E", 1412556123, "jominey", "E", 1412556214, "jominey", "E", 1412556484, "jominey", "E", 1412557034, "jominey", "E", 1412559789, "jominey", "E", 1412561212, "jominey", "E", 1412561231, "jominey", "E", 1412561259, "jominey", "E", 1412563500, "jominey", "E", 1412563528, "jominey", "E", 1412563912, "jominey", "E", 1412564084, "jominey", "E", 1412564116, "jominey", "E", 1412564492, "jominey", "E", 1412564746, "jominey", "E", 1412564806, "jominey", "E", 1412564874, "jominey", "E", 1412564956, "jominey", "E", 1412565008, "jominey", "E", 1412565122, "jominey", "E", 1412565206, "jominey", "E", 1412565225, "jominey", "E", 1412565729, "jominey", "E", 1412567334, "jominey", "E", 1412567404, "jominey", "E", 1412567616, "jominey", "E", 1412567881, "jominey", "K", 1507934699, "jominey", "E", 1507934700, "jominey", "E", 1507934724, "jominey", "E", 1507935191, "jominey", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
