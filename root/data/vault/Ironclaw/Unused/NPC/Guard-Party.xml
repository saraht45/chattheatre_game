<object clone="/base/obj/thing" owner="necate">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Ironclaw:Lib:Combat:Cards:NPCs:UrGuard)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="1"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="doberman"/>
            <Base:SName sname="pinscher"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="dobermans"/>
            <Base:PName pname="pinschers"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="burly"/>
          <Base:Adjective adjective="towering"/>
        </Base:Adjectives>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="facialhair" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="facialhair"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="fur" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="copper"/>
          <Base:Adjective adjective="shaggy"/>
          <Base:Adjective adjective="trimmed"/>
        </Base:Adjectives>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="hair" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="mussed"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="chocolate brown"/>
          <Base:Adjective adjective="feral"/>
          <Base:Adjective adjective="mussed"/>
          <Base:Adjective adjective="waist-length"/>
        </Base:Adjectives>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="left-cheek" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="cut"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="cuts"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="left-forearm" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="bruise"/>
            <Base:SName sname="cut"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="bruises"/>
            <Base:PName pname="cuts"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="left-shoulder" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="cut"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="cuts"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="right-cheek" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="bruise"/>
            <Base:SName sname="cut"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="bruises"/>
            <Base:PName pname="cuts"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="right-hand" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="cut"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="cuts"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="appearance:animaltype">
         "doberman pinscher"
      </Core:Property>
      <Core:Property property="appearance:build">
         "burly"
      </Core:Property>
      <Core:Property property="appearance:clawapp">
         "ordinary"
      </Core:Property>
      <Core:Property property="appearance:clawlength">
         "jagged"
      </Core:Property>
      <Core:Property property="appearance:earshape">
         "tapered"
      </Core:Property>
      <Core:Property property="appearance:eyecolor">
         "carnation"
      </Core:Property>
      <Core:Property property="appearance:eyeshape">
         "wide-set"
      </Core:Property>
      <Core:Property property="appearance:feet">
         "plump"
      </Core:Property>
      <Core:Property property="appearance:furcolor">
         "copper"
      </Core:Property>
      <Core:Property property="appearance:furlength">
         "trimmed"
      </Core:Property>
      <Core:Property property="appearance:furtexture">
         "shaggy"
      </Core:Property>
      <Core:Property property="appearance:haircolor">
         "chocolate brown"
      </Core:Property>
      <Core:Property property="appearance:hairlength">
         "waist-length"
      </Core:Property>
      <Core:Property property="appearance:hairstyle">
         "mussed"
      </Core:Property>
      <Core:Property property="appearance:hairtype">
         "feral"
      </Core:Property>
      <Core:Property property="appearance:hands">
         "strong"
      </Core:Property>
      <Core:Property property="appearance:height">
         "towering"
      </Core:Property>
      <Core:Property property="appearance:lipshape">
         "full"
      </Core:Property>
      <Core:Property property="appearance:mouthshape">
         "wide"
      </Core:Property>
      <Core:Property property="appearance:muzzleshape">
         "pert"
      </Core:Property>
      <Core:Property property="appearance:noseshape">
         "long"
      </Core:Property>
      <Core:Property property="appearance:taillength">
         "uneven"
      </Core:Property>
      <Core:Property property="appearance:tailtexture">
         "matted"
      </Core:Property>
      <Core:Property property="base:initialcontents">
         (\{ \<[Allegory:Props:Clothing:Pants:Generic]#102773\> \})
      </Core:Property>
      <Core:Property property="combat:damage">0</Core:Property>
      <Core:Property property="combat:fatigue">0</Core:Property>
      <Core:Property property="combat:injuries">
         ([  ])
      </Core:Property>
      <Core:Property property="export:merry:react-post:evoke-dob%guarding">
         X[M] /* are we able to give instructions */    

/* allow questions and instructions about blocking the exit */    
\$input = \$evoke;    
\$input = \$input[1..strlen(\$input)-3];    
\$input = explode(\$input," ");    
    
if(sizeof(\$input) \> 1) \{    
  \$character = lower_case(\$input[1]);    
\} else \{    
  \$character = nil;    
\}    
    
switch(\$input[0]) \{    
  case "allow":    
    if(\$character) \{    
      \$this."guarding:access:allowed:individuals"[\$character] = Describe(\$actor);    
      \$this."guarding:access:denied:individuals"[\$character] = nil;    
      EmitTo(\$actor, Describe(\$this)+" tells you that they will allow "+\$character+" to pass.");    
    \} else \{    
      EmitTo(\$actor, "Format: allow NAME");    
    \}    
    break;    
  case "remove":    
    if(\$character) \{    
      \$this."guarding:access:allowed:individuals"[\$character] = nil;    
      \$this."guarding:access:denied:individuals"[\$character] = nil;    
      EmitTo(\$actor, Describe(\$this)+" tells you that they will not treat "+\$character+" any differently to other people.");    
    \} else \{    
      EmitTo(\$actor, "Format: remove NAME");    
    \}    
    break;    
  case "block":    
  case "deny":    
  case "bar":    
    if(\$character) \{    
      \$this."guarding:access:denied:individuals"[\$character] = Describe(\$actor);    
      \$this."guarding:access:allowed:individuals"[\$character] = nil;    
      EmitTo(\$actor, Describe(\$this)+" tells you that they will not allow "+\$character+" to pass.");    
    \} else \{    
      EmitTo(\$actor, "Format: block NAME");    
    \}    
    break;    
  case "ask":    
    if(\$this."guarding:access:allowed:individuals"[\$character]) \{    
      EmitTo(\$actor, Describe(\$this)+" tells you that "+\$character+" is allowed through by order of "+\$this."guarding:access:allowed:individuals"[\$character]+".");    
    \} else if (\$this."guarding:access:denied:individuals"[\$character]) \{    
      EmitTo(\$actor, Describe(\$this)+" tells you that "+\$character+" is barred through by order of "+\$this."guarding:access:denied:individuals"[\$character]+".");    
    \} else \{    
      EmitTo(\$actor, Describe(\$this)+" tells you that there are no special orders about "+\$character+".");    
    \}    
    break;    
  case "list":    
    EmitTo(\$actor, Describe(\$this)+" lists who is allowed through:");    
    if(sizeof(map_indices(\$this."guarding:access:allowed:individuals"))) \{    
      EmitTo(\$actor, implode(map_indices(\$this."guarding:access:allowed:individuals"), " "));    
    \} else \{    
      EmitTo(\$actor, "No specific individuals.");    
    \}    
    if(sizeof(\$this."guarding:access:allowed:guilds")) \{    
      \$tmp = (\{ \});    
      for(\$i=0;\$i\<sizeof(\$this."guarding:access:allowed:guilds");\$i++) \{    
        \$tmp += (\{ \$this."guarding:access:allowed:guilds"[\$i].shortname \});    
      \}    
      EmitTo(\$actor, "Guilds of "+implode(\$tmp, " "));    
    \} else \{    
      EmitTo(\$actor, "No specific guilds.");    
    \}    
    
    EmitTo(\$actor, Describe(\$this)+" lists who is banned from passing:");    
    if(sizeof(map_indices(\$this."guarding:access:denied:individuals"))) \{    
      EmitTo(\$actor, implode(map_indices(\$this."guarding:access:denied:individuals"), " "));    
    \} else \{    
      EmitTo(\$actor, "No specific individuals.");    
    \}    
    if(sizeof(\$this."guarding:access:denied:guilds")) \{    
      \$tmp = (\{ \});    
      for(\$i=0;\$i\<sizeof(\$this."guarding:access:denied:guilds");\$i++) \{    
        \$tmp += (\{ \$this."guarding:access:denied:guilds"[\$i].shortname \});    
      \}    
      EmitTo(\$actor, "Guilds of "+implode(\$tmp, " "));    
    \} else \{    
      EmitTo(\$actor, "No specific guilds.");    
    \}    
    break;    
  default:    
    EmitTo(\$actor, "[OOC: Valid instructions for the guard are: \\"allow\\", \\"block\\", \\"remove\\", \\"ask\\" and \\"list\\" - all followed by the name of the character you are asking about. Except list, of course. That just lists them.]");    
    break;    
\}    
    
    
return TRUE;
      </Core:Property>
      <Core:Property property="export:trait:examine">
         "This guard is a towering burly doberman pinscher, with trimmed, shaggy copper fur, and waist-length feral chocolate brown hair. Wide-set carnation eyes are set above a long nose and a wide mouth, complete with full lips. Jagged nails, on strong hands, and plump feet are also visible. You also note its tapered  ears."
      </Core:Property>
      <Core:Property property="export:trait:look">
         "This guard is a towering burly doberman pinscher, with trimmed, shaggy copper fur, and waist-length feral chocolate brown hair."
      </Core:Property>
      <Core:Property property="merry:react-post:evoke-dob%guarding">
         X[M] /* are we able to give instructions */    
if(!member(\$actor, Arr(\$this."guarding:access:listkeepers"))) return TRUE;    
    
/* allow questions and instructions about blocking the exit */    
\$input = \$evoke;    
\$input = \$input[1..strlen(\$input)-3];    
\$input = explode(\$input," ");    
    
if(sizeof(\$input) \> 1) \{    
  \$character = lower_case(\$input[1]);    
\} else \{    
  \$character = nil;    
\}    
    
switch(\$input[0]) \{    
  case "allow":    
    if(\$character) \{    
      \$this."guarding:access:allowed:individuals"[\$character] = Describe(\$actor);    
      \$this."guarding:access:denied:individuals"[\$character] = nil;    
      EmitTo(\$actor, Describe(\$this)+" tells you that they will allow "+\$character+" to pass.");    
    \} else \{    
      EmitTo(\$actor, "Format: allow NAME");    
    \}    
    break;    
  case "remove":    
    if(\$character) \{    
      \$this."guarding:access:allowed:individuals"[\$character] = nil;    
      \$this."guarding:access:denied:individuals"[\$character] = nil;    
      EmitTo(\$actor, Describe(\$this)+" tells you that they will not treat "+\$character+" any differently to other people.");    
    \} else \{    
      EmitTo(\$actor, "Format: remove NAME");    
    \}    
    break;    
  case "block":    
  case "deny":    
  case "bar":    
    if(\$character) \{    
      \$this."guarding:access:denied:individuals"[\$character] = Describe(\$actor);    
      \$this."guarding:access:allowed:individuals"[\$character] = nil;    
      EmitTo(\$actor, Describe(\$this)+" tells you that they will not allow "+\$character+" to pass.");    
    \} else \{    
      EmitTo(\$actor, "Format: block NAME");    
    \}    
    break;    
  case "ask":    
    if(\$this."guarding:access:allowed:individuals"[\$character]) \{    
      EmitTo(\$actor, Describe(\$this)+" tells you that "+\$character+" is allowed through by order of "+\$this."guarding:access:allowed:individuals"[\$character]+".");    
    \} else if (\$this."guarding:access:denied:individuals"[\$character]) \{    
      EmitTo(\$actor, Describe(\$this)+" tells you that "+\$character+" is barred through by order of "+\$this."guarding:access:denied:individuals"[\$character]+".");    
    \} else \{    
      EmitTo(\$actor, Describe(\$this)+" tells you that there are no special orders about "+\$character+".");    
    \}    
    break;    
  case "list":    
    EmitTo(\$actor, Describe(\$this)+" lists who is allowed through:");    
    if(sizeof(map_indices(\$this."guarding:access:allowed:individuals"))) \{    
      EmitTo(\$actor, implode(map_indices(\$this."guarding:access:allowed:individuals"), " "));    
    \} else \{    
      EmitTo(\$actor, "No specific individuals.");    
    \}    
    if(sizeof(\$this."guarding:access:allowed:guilds")) \{    
      \$tmp = (\{ \});    
      for(\$i=0;\$i\<sizeof(\$this."guarding:access:allowed:guilds");\$i++) \{    
        \$tmp += (\{ \$this."guarding:access:allowed:guilds"[\$i].shortname \});    
      \}    
      EmitTo(\$actor, "Guilds of "+implode(\$tmp, " "));    
    \} else \{    
      EmitTo(\$actor, "No specific guilds.");    
    \}    
    
    EmitTo(\$actor, Describe(\$this)+" lists who is banned from passing:");    
    if(sizeof(map_indices(\$this."guarding:access:denied:individuals"))) \{    
      EmitTo(\$actor, implode(map_indices(\$this."guarding:access:denied:individuals"), " "));    
    \} else \{    
      EmitTo(\$actor, "No specific individuals.");    
    \}    
    if(sizeof(\$this."guarding:access:denied:guilds")) \{    
      \$tmp = (\{ \});    
      for(\$i=0;\$i\<sizeof(\$this."guarding:access:denied:guilds");\$i++) \{    
        \$tmp += (\{ \$this."guarding:access:denied:guilds"[\$i].shortname \});    
      \}    
      EmitTo(\$actor, "Guilds of "+implode(\$tmp, " "));    
    \} else \{    
      EmitTo(\$actor, "No specific guilds.");    
    \}    
    break;    
  default:    
    EmitTo(\$actor, "[OOC: Valid instructions for the guard are: \\"allow\\", \\"block\\", \\"remove\\", \\"ask\\" and \\"list\\" - all followed by the name of the character you are asking about. Except list, of course. That just lists them.]");    
    break;    
\}    
    
    
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:evoke-iob%guarding">
         X[M] /* are we able to give instructions */    
if(!member(\$actor, Arr(\$this."guarding:access:listkeepers"))) return TRUE;    
    
/* allow questions and instructions about blocking the exit */    
\$input = \$evoke;    
\$input = \$input[1..strlen(\$input)-3];    
\$input = explode(\$input," ");    
    
if(sizeof(\$input) \> 1) \{    
  \$character = lower_case(\$input[1]);    
\} else \{    
  \$character = nil;    
\}    
    
switch(\$input[0]) \{    
  case "allow":    
    if(\$character) \{    
      \$this."guarding:access:allowed:individuals"[\$character] = Describe(\$actor);    
      \$this."guarding:access:denied:individuals"[\$character] = nil;    
      EmitTo(\$actor, Describe(\$this)+" tells you that they will allow "+\$character+" to pass.");    
    \} else \{    
      EmitTo(\$actor, "Format: allow NAME");    
    \}    
    break;    
  case "remove":    
    if(\$character) \{    
      \$this."guarding:access:allowed:individuals"[\$character] = nil;    
      \$this."guarding:access:denied:individuals"[\$character] = nil;    
      EmitTo(\$actor, Describe(\$this)+" tells you that they will not treat "+\$character+" any differently to other people.");    
    \} else \{    
      EmitTo(\$actor, "Format: remove NAME");    
    \}    
    break;    
  case "block":    
  case "deny":    
  case "bar":    
    if(\$character) \{    
      \$this."guarding:access:denied:individuals"[\$character] = Describe(\$actor);    
      \$this."guarding:access:allowed:individuals"[\$character] = nil;    
      EmitTo(\$actor, Describe(\$this)+" tells you that they will not allow "+\$character+" to pass.");    
    \} else \{    
      EmitTo(\$actor, "Format: block NAME");    
    \}    
    break;    
  case "ask":    
    if(\$this."guarding:access:allowed:individuals"[\$character]) \{    
      EmitTo(\$actor, Describe(\$this)+" tells you that "+\$character+" is allowed through by order of "+\$this."guarding:access:allowed:individuals"[\$character]+".");    
    \} else if (\$this."guarding:access:denied:individuals"[\$character]) \{    
      EmitTo(\$actor, Describe(\$this)+" tells you that "+\$character+" is barred through by order of "+\$this."guarding:access:denied:individuals"[\$character]+".");    
    \} else \{    
      EmitTo(\$actor, Describe(\$this)+" tells you that there are no special orders about "+\$character+".");    
    \}    
    break;    
  case "list":    
    EmitTo(\$actor, Describe(\$this)+" lists who is allowed through:");    
    if(sizeof(map_indices(\$this."guarding:access:allowed:individuals"))) \{    
      EmitTo(\$actor, implode(map_indices(\$this."guarding:access:allowed:individuals"), " "));    
    \} else \{    
      EmitTo(\$actor, "No specific individuals.");    
    \}    
    if(sizeof(\$this."guarding:access:allowed:guilds")) \{    
      \$tmp = (\{ \});    
      for(\$i=0;\$i\<sizeof(\$this."guarding:access:allowed:guilds");\$i++) \{    
        \$tmp += (\{ \$this."guarding:access:allowed:guilds"[\$i].shortname \});    
      \}    
      EmitTo(\$actor, "Guilds of "+implode(\$tmp, " "));    
    \} else \{    
      EmitTo(\$actor, "No specific guilds.");    
    \}    
    
    EmitTo(\$actor, Describe(\$this)+" lists who is banned from passing:");    
    if(sizeof(map_indices(\$this."guarding:access:denied:individuals"))) \{    
      EmitTo(\$actor, implode(map_indices(\$this."guarding:access:denied:individuals"), " "));    
    \} else \{    
      EmitTo(\$actor, "No specific individuals.");    
    \}    
    if(sizeof(\$this."guarding:access:denied:guilds")) \{    
      \$tmp = (\{ \});    
      for(\$i=0;\$i\<sizeof(\$this."guarding:access:denied:guilds");\$i++) \{    
        \$tmp += (\{ \$this."guarding:access:denied:guilds"[\$i].shortname \});    
      \}    
      EmitTo(\$actor, "Guilds of "+implode(\$tmp, " "));    
    \} else \{    
      EmitTo(\$actor, "No specific guilds.");    
    \}    
    break;    
  default:    
    EmitTo(\$actor, "[OOC: Valid instructions for the guard are: \\"allow\\", \\"block\\", \\"remove\\", \\"ask\\" and \\"list\\" - all followed by the name of the character you are asking about. Except list, of course. That just lists them.]");    
    break;    
\}    
    
    
return TRUE;
      </Core:Property>
      <Core:Property property="merry:witness:enter-into%jailguard">
         X[M] /* block arrested people from leaving */
if(!\$target \|\| NRefDetail(\$target) != "exit-east") return TRUE;
if(\$actor."crimes:arrestable" \&\& sizeof(\$actor."crimes:arrestable")) \{
  EmitTo(\$actor, Describe(this)+" blocks your path, \\"I'm sorry, you're not allowed to leave here until you choose punishments for your crimes.\\"");
  EmitIn(\$actor."base:environment", Describe(this)+" blocks "+Describe(\$actor)+"'s path, \\"I'm sorry, you're not allowed to leave here until you choose punishments for your crimes.\\"", \$actor);
  return FALSE;
\}
if(\$actor."crimes:punishments:fine") \{
  /* track the money for the economy tracker */
  if(!\$\{Allegory:Guilds:cityguard\}.kitty) \$\{Allegory:Guilds:cityguard\}.kitty = 0;
  if(!\$\{Ironclaw:Lib:Economy:economy\}."moneypool:jail_fines_kept") \$\{Ironclaw:Lib:Economy:economy\}."moneypool:jail_fines_kept" = 0;
  if(!\$\{Ironclaw:Lib:Economy:economy\}."moneypool:jail_fines_lost") \$\{Ironclaw:Lib:Economy:economy\}."moneypool:jail_fines_lost" = 0;

  if(\$actor."trait:money" \&\& \$actor."trait:money" \> 100) \{
    if(\$actor."trait:money" \>= \$actor."crimes:punishments:fine"*100) \{

          /* give money to the constabulary */
          if(!\$\{Allegory:Guilds:cityguard\}.kitty) \$\{Allegory:Guilds:cityguard\}.kitty = 0;
          \$\{Allegory:Guilds:cityguard\}.kitty += \$actor."crimes:punishments:fine"*50;
          /* track the money for the economy tracker */
          \$\{Ironclaw:Lib:Economy:economy\}."moneypool:jail_fines_kept" += \$actor."crimes:punishments:fine"*50;
          \$\{Ironclaw:Lib:Economy:economy\}."moneypool:jail_fines_lost" += \$actor."crimes:punishments:fine"*50;

      
      \$actor."trait:money" -= \$actor."crimes:punishments:fine"*100;
      EmitTo(\$actor, Describe(this)+" says to you, \\"Your fine of "+Str(\$actor."crimes:punishments:fine")+" denarii has been paid from your bank account, by your bank.\\"");
      \$actor."crimes:punishments:fine" = 0;
    \} else \{
      \$amount = Int(Flt(\$actor."trait:money")/100.0);
      \$actor."trait:money" -= \$amount*100;
      \$actor."crimes:punishments:fine" -= \$amount;
      EmitTo(\$actor, Describe(this)+" says to you, \\""+Str(\$amount)+" denarii from your fine has been paid from your bank account, by your bank.\\"");

          /* give money to the constabulary */
          \$\{Allegory:Guilds:cityguard\}.kitty += \$amount*50;
          /* track the money for the economy tracker */
          \$\{Ironclaw:Lib:Economy:economy\}."moneypool:jail_fines_kept" += \$amount*50;
          \$\{Ironclaw:Lib:Economy:economy\}."moneypool:jail_fines_lost" += \$amount*50;
    \}
  \}
  if(\$actor."crimes:punishments:fine") \{
    /* try to pay with cash */
    \$CDO = \$\{Ironclaw:Data:Trading:Money\};
    \$query = \$actor."crimes:punishments:fine"*100;

    /* do they have enough money? */
    if( Call( \$\{Ironclaw:Lib:Old:Trading:TradingNPC\}, "core_trading_query_assets")) \{
      /* enough money. Pay the fine. */
      if( Call( \$\{Ironclaw:Lib:Old:Trading:TradingNPC\}, "core_trading_deduct", \$hide_decimals: \$CDO."cash:hide-decimals", \$item: \$\{Allegory:Lib:Law:fine_object\}, \$sales_assistant: "the Jail Guard" ))
        \$actor."crimes:punishments:fine" = 0;
          /* give money to the constabulary */
          \$\{Allegory:Guilds:cityguard\}.kitty += \$query/2;
          /* track the money for the economy tracker */
          \$\{Ironclaw:Lib:Economy:economy\}."moneypool:pc" += \$query/2;
          \$\{Ironclaw:Lib:Economy:economy\}."moneypool:jail_fines_kept" += \$query/2;
          \$\{Ironclaw:Lib:Economy:economy\}."moneypool:jail_fines_lost" += \$query/2;
    \} else \{
      /* not enough money. Can we pay part of the fine? */
      if( Call( \$\{Ironclaw:Lib:Old:Trading:TradingNPC\}, "core_trading_query_assets", \$query: 100)) \{
        /* they have some money. How much can they pay? */
        \$max = \$query;
        \$min = 100;
        /* do a search trying to find how much money they do have */
        while (\$max \> \$min) \{
          \$test = Int(Flt(\$max+\$min)/200.0)*100; /* halfway between the possible max and min amount that they are carrying */
          if( Call( \$\{Ironclaw:Lib:Old:Trading:TradingNPC\}, "core_trading_query_assets", \$query: \$test)) \{
            /* they have this amount of money. Increase the min */
            \$min = \$test;
          \} else \{
            /* they don't have this amount of money. Decrease the max */
            \$max = \$test - 100;
          \}
          
        \}
        /* Pay what fine they can. */
        if( Call( \$\{Ironclaw:Lib:Old:Trading:TradingNPC\}, "core_trading_deduct", \$hide_decimals: \$CDO."cash:hide-decimals", \$item: \$\{Allegory:Lib:Law:fine_object\}, \$sales_assistant: "the Jail Guard", \$query: \$min ))
          \$actor."crimes:punishments:fine" -= \$min/100;

          /* give money to the constabulary */
          \$\{Allegory:Guilds:cityguard\}.kitty += \$min/2;
          /* track the money for the economy tracker */
          \$\{Ironclaw:Lib:Economy:economy\}."moneypool:pc" += \$min/2;
          \$\{Ironclaw:Lib:Economy:economy\}."moneypool:jail_fines_kept" += \$min/2;
          \$\{Ironclaw:Lib:Economy:economy\}."moneypool:jail_fines_lost" += \$min/2;
      \}
    \}

  \}
  if(\$actor."crimes:punishments:fine") \{
    \$words = "I'm sorry, but you can't leave until you pay your fines. You still need to pay "+Str(\$actor."crimes:punishments:fine")+" denarii.";
    EmitTo(\$actor, Describe(this)+" blocks your path, \\""+\$words+"\\"");
    EmitIn(\$actor."base:environment", Describe(this)+" blocks "+Describe(\$actor)+"'s path, \\""+\$words+"\\"", \$actor);
    return FALSE;
  \}
\}
if(\$actor."crimes:punishments:jailtime" \&\& \$actor."crimes:punishments:jailtime" \> time()) \{
  \$remaining = \$actor."crimes:punishments:jailtime" - time();
  if(\$remaining \> 60*60*24) \{
    \$remaining = Int(Flt(\$remaining)/Flt(60*60*24));
    if(\$remaining \> 1) \{
      \$remaining_str = Str(\$remaining)+" days";
    \} else \{
      \$remaining_str = Str(\$remaining)+" day";
    \}
  \} else if(\$remaining \> 60*60) \{
    \$remaining = Int(Flt(\$remaining)/Flt(60*60));
    if(\$remaining \> 1) \{
      \$remaining_str = Str(\$remaining)+" hours";
    \} else \{
      \$remaining_str = Str(\$remaining)+" hour";
    \}
  \} else if(\$remaining \> 60) \{
    \$remaining = Int(Flt(\$remaining)/Flt(60));
    if(\$remaining \> 1) \{
      \$remaining_str = Str(\$remaining)+" minutes";
    \} else \{
      \$remaining_str = Str(\$remaining)+" minute";
    \}
  \} else \{
    \$remaining = \$remaining;
    if(\$remaining \> 1) \{
      \$remaining_str = Str(\$remaining)+" seconds";
    \} else \{
      \$remaining_str = Str(\$remaining)+" second";
    \}
  \}
  \$words = "I'm sorry, but you can't leave until you have served your jail sentence. You still need to stay in here for another "+\$remaining_str+".";
  EmitTo(\$actor, Describe(this)+" blocks your path, \\""+\$words+"\\"");
  EmitIn(\$actor."base:environment", Describe(this)+" blocks "+Describe(\$actor)+"'s path, \\""+\$words+"\\"", \$actor);
  return FALSE;
\}
if(\$actor."crimes:punishments" \&\& sizeof(\$actor."crimes:punishments")) \{
  \$punishments = copy(\$actor."crimes:punishments");
  /* remove punishments that should let the prisoner out, where they can complete the punishment later */
  \$punishments -= (\{ "punishment:NAME" \});
  if(sizeof(\$punishments)) \{
    EmitTo(\$actor, Describe(this)+" blocks your path, \\"I'm sorry, you're not allowed to leave here until constables have marked your punishments as being completed.\\"");
    EmitIn(\$actor."base:environment", Describe(this)+" blocks "+Describe(\$actor)+"'s path, \\"I'm sorry, you're not allowed to leave here until constables have marked your punishments as being completed.\\"", \$actor);
    return FALSE;
  \}
\}

if(\$actor."trait:slave" \&\& !\$actor."trait:slave:master") \{
  \$words = "I'm sorry, but we can't let slaves run around unless they have a master that's willing to take responsibility for their actions.";
  EmitTo(\$actor, Describe(this)+" blocks your path, \\""+\$words+"\\"");
  EmitIn(\$actor."base:environment", Describe(this)+" blocks "+Describe(\$actor)+"'s path, \\""+\$words+"\\"", \$actor);
  return FALSE;
\}


if(\$actor."crimes:punishments:docktown" \&\& \$actor."crimes:punishments:docktown" \> time()) \{
    EmitTo(\$actor, Describe(this)+" escorts you into docktown.");
    EmitIn(\$actor."base:environment", Describe(this)+" escorts "+Describe(\$actor)+" into docktown.", \$actor);
    \$actor."base:environment" = \$\{Ironclaw:World:DockTown:Plazas:Market:Mainroom\};
    return FALSE;
\}

return TRUE;
      </Core:Property>
      <Core:Property property="misc:lastdropped">
         "1200017799 StoryHost Azrael[tonyd]"
      </Core:Property>
      <Core:Property property="npc:resource-control:live_time">
         1331664560
      </Core:Property>
      <Core:Property property="npc:status:spawndate">
         1264719430
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1200020402, "tonyd", "P", 1200020486, "tonyd", "P", 1200020545, "tonyd", "P", 1200021055, "tonyd", "P", 1200021065, "tonyd", "P", 1200021076, "tonyd", "P", 1200021090, "tonyd", "P", 1200021117, "tonyd", "P", 1200720435, "tonyd", "P", 1200720454, "tonyd", "P", 1200720488, "tonyd", "P", 1200720544, "tonyd", "P", 1200720740, "tonyd", "P", 1200720831, "tonyd", "P", 1200721285, "tonyd", "P", 1200721479, "tonyd", "P", 1200722752, "tonyd", "P", 1202175219, "tonyd", "P", 1203386438, "slurpeeslurp", "S", 1203386587, "slurpeeslurp", "S", 1203386597, "slurpeeslurp", "S", 1223014189, "tonyd", "P", 1223014224, "tonyd", "P", 1223014367, "tonyd", "P", 1223014591, "tonyd", "P", 1223014627, "tonyd", "P", 1223014790, "tonyd", "P", 1223014800, "tonyd", "P", 1223014806, "tonyd", "P", 1223014851, "tonyd", "P", 1223015061, "tonyd", "P", 1223015122, "tonyd", "P", 1223015163, "tonyd", "P", 1223015370, "tonyd", "P", 1223015582, "tonyd", "P", 1223015585, "tonyd", "P", 1223022584, "tonyd", "P", 1223022609, "tonyd", "P", 1223085014, "tonyd", "P", 1223086260, "tonyd", "P", 1223086521, "tonyd", "P", 1223086749, "tonyd", "P", 1223086907, "tonyd", "P", 1223086982, "tonyd", "P", 1223087288, "tonyd", "P", 1223087395, "tonyd", "P", 1223087427, "tonyd", "P", 1223087508, "tonyd", "P", 1223087568, "tonyd", "P", 1223087594, "tonyd", "P", 1223087603, "tonyd", "P", 1223087656, "tonyd", "P", 1223087816, "tonyd", "P", 1223087930, "tonyd", "P", 1223087960, "tonyd", "P", 1223088029, "tonyd", "P", 1223088057, "tonyd", "P", 1223088091, "tonyd", "P", 1223088179, "tonyd", "P", 1223088326, "tonyd", "P", 1223088341, "tonyd", "P", 1223088398, "tonyd", "P", 1223089501, "tonyd", "P", 1223089567, "tonyd", "P", 1223089639, "tonyd", "P", 1223089723, "tonyd", "P", 1223089756, "tonyd", "P", 1223089811, "tonyd", "P", 1223090021, "tonyd", "P", 1260406112, "jominey", "E", 1264720518, "necate", "P", 1264720636, "necate", "P", 1264720659, "necate", "P", 1264720852, "necate", "P", 1309488838, "rorschakovacs", "R", 1309504379, "rorschakovacs", "R", 1309505195, "rorschakovacs", "R" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="spawn:creator">
         (\{ "tonyd", 1200017796 \})
      </Core:Property>
      <Core:Property property="theatre:notwhobody">1</Core:Property>
      <Core:Property property="trait:animal">
         "doberman pinscher"
      </Core:Property>
      <Core:Property property="trait:animaltype">
         "dog"
      </Core:Property>
      <Core:Property property="trait:examine">
         "This guard is a towering burly doberman pinscher, with trimmed, shaggy copper fur, and waist-length feral chocolate brown hair. Wide-set carnation eyes are set above a long nose and a wide mouth, complete with full lips. Jagged nails, on strong hands, and plump feet are also visible. You also note its tapered  ears."
      </Core:Property>
      <Core:Property property="trait:look">
         "This guard is a towering burly doberman pinscher, with trimmed, shaggy copper fur, and waist-length feral chocolate brown hair."
      </Core:Property>
      <Core:Property property="trait:smells:lastchecked">
         1208208823
      </Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
