<object clone="/base/obj/thing" owner="tonyd">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="0.2" density="0.5"/>
    <Base:Container flexible="true" transparent-container="false" public-container="false" tight="false" capacity="5" maxweight="5" verb3="contains an arrangement of"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="bouquet"/>
            <Base:SName sname="flower"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="bouquets"/>
            <Base:PName pname="flowers"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="purple"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             bouquet{? | $(this.base:inventory) | of $[Call(this, "desc_flowers")]|}
          </Base:Description>
          <Base:Description type="react-desc:examine">
             A fresh bouquet{? | $(this.base:inventory) | of $[Call(this, "desc_flowers")]|}, bound together with $(this.trait:ribbon:color) $(this.trait:ribbon:material) ribbons.
          </Base:Description>
          <Base:Description type="react-desc:look">
             A fresh bouquet{? | $(this.base:inventory) | of $[Call(this, "desc_flowers")]|}.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:trait:objecttype">
         "flower"
      </Core:Property>
      <Core:Property property="export:trait:smell">
         "a lingering, subtle sweetness"
      </Core:Property>
      <Core:Property property="merry:act:stop">
         X[M] /* destroy the items that were used to create this bouquet */
EmitTo(\$\{Chatters:AE:az:azrael\}, "Destroying bouquet!");
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:desc_flowers">
         X[M] /* describe the flowers */
string output;
\$holder = this;
while(\$holder."base:environment" \&\& !\$holder."base:volition") \{
  \$holder = \$holder."base:environment";
\}
if(\$holder."base:volition") \{
  output = Describe(this."base:inventory",\$holder,nil,STYLE_NONPOSS);
  if(sscanf(output, "her %s", output)) return output;
  if(sscanf(output, "his %s", output)) return output;
  if(sscanf(output, "its %s", output)) return output;
  return output;
\} else \{
  return Describe(this."base:inventory",nil,nil,STYLE_NONPOSS);
\}
      </Core:Property>
      <Core:Property property="merry:react-post:take-from">
         X[M] /* take an item from the bouquet */
if(this."trait:master") return TRUE;
/* check that there are still flowers in the bouquet */
if(!this."base:inventory" \|\| !sizeof(this."base:inventory"))
  Slay(this);
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:place-where">
         X[M] /* place an item in the bouquet */
if (\$obprep == PREP_INSIDE) \{
  /* only let them put flowers inside */
\}
return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1127923051, "tunk_bodin", "X", 1127923345, "tunk_bodin", "X", 1127923680, "tunk_bodin", "X", 1127923815, "tunk_bodin", "X", 1127924823, "tunk_bodin", "X", 1127925274, "tunk_bodin", "X", 1127969669, "tunk_bodin", "X", 1127972865, "tunk_bodin", "E", 1128055550, "tunk_bodin", "X", 1128994062, "tunk_bodin", "X", 1128994433, "tunk_bodin", "X", 1129002244, "tunk_bodin", "X", 1129002340, "tunk_bodin", "X", 1129003413, "tunk_bodin", "X", 1129009397, "tunk_bodin", "X", 1129009472, "tunk_bodin", "X", 1129009530, "tunk_bodin", "X", 1129009687, "tunk_bodin", "X", 1129009719, "tunk_bodin", "X", 1129010041, "tunk_bodin", "X", 1129998731, "tunk_bodin", "X", 1130464862, "tunk_bodin", "X", 1130464966, "tunk_bodin", "X", 1136427232, "tonyd", "E", 1136427285, "tonyd", "E", 1136427839, "tonyd", "E", 1136427950, "tonyd", "E", 1146417206, "tunk_bodin", "X", 1201549189, "jsfox", "X", 1201549213, "jsfox", "X", 1203784027, "slurpeeslurp", "E", 1203784039, "slurpeeslurp", "R", 1203784163, "slurpeeslurp", "E", 1203784204, "slurpeeslurp", "E", 1203784269, "slurpeeslurp", "E", 1203784302, "slurpeeslurp", "E", 1203785034, "slurpeeslurp", "E", 1203785104, "slurpeeslurp", "E", 1203785159, "slurpeeslurp", "E", 1203785172, "slurpeeslurp", "E", 1203785184, "slurpeeslurp", "E", 1203785332, "slurpeeslurp", "K", 1208542008, "rastalabor", "X", 1208542120, "rastalabor", "X", 1211166217, "tonyd", "E", 1211166229, "tonyd", "E", 1211166301, "tonyd", "E", 1211166562, "tonyd", "P", 1211166607, "tonyd", "P", 1211166639, "tonyd", "P", 1211166804, "tonyd", "P", 1211166888, "tonyd", "P", 1211166942, "tonyd", "E", 1211167092, "tonyd", "E", 1211167097, "tonyd", "P", 1211167209, "tonyd", "E", 1211167628, "tonyd", "E", 1211167698, "tonyd", "E", 1211167856, "tonyd", "E", 1211167988, "tonyd", "E", 1211168305, "tonyd", "E", 1211168852, "tonyd", "E", 1211186067, "tonyd", "E", 1211186124, "tonyd", "E", 1211186176, "tonyd", "E", 1211186226, "tonyd", "E", 1211186289, "tonyd", "E", 1211186314, "tonyd", "E", 1211186419, "tonyd", "E", 1211186473, "tonyd", "E", 1211186503, "tonyd", "E", 1211186608, "tonyd", "E", 1211186626, "tonyd", "E", 1211186788, "tonyd", "E", 1211186842, "tonyd", "E", 1211186886, "tonyd", "E", 1211186928, "tonyd", "E", 1211186973, "tonyd", "P", 1211186998, "tonyd", "P", 1211187041, "tonyd", "P", 1211187051, "tonyd", "P", 1211187190, "tonyd", "P", 1211187203, "tonyd", "P", 1211187217, "tonyd", "P", 1211187434, "tonyd", "P", 1211187522, "tonyd", "P", 1211187534, "tonyd", "P", 1211187555, "tonyd", "P", 1211187586, "tonyd", "E", 1327968413, "jominey", "R", 1347223289, "jominey", "R" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="trait:master">1</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
