<object clone="/base/obj/thing" owner="chindora">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="0.03" density="0.5"/>
    <Base:Container flexible="false" transparent-container="false" public-container="true" tight="false" capacity="0.001" maxweight="5" verb2="contains an arrangement of" verb3="contains an arrangement of"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="hanging" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="garland"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="garlands"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $[::set_desc()]{? | $(this.empty) | empty garland | $(this.trait:state) $(this.trait:quantity) of $(this.trait:color) $(this.trait:type)}
          </Base:Description>
          <Base:Description type="look">
             This {? | $(this.empty) | empty garland | $(this.trait:state) $(this.trait:quantity) of $(this.trait:color) $(this.trait:type)} is secured with a $(this.trait:ribbon:color) $(this.trait:ribbon:material) ribbon.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="ribbon" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="ribbon"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="ribbons"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             garland's $(this.trait:ribbon:color) $(this.trait:ribbon:material) ribbon
          </Base:Description>
          <Base:Description type="look">
             The garland's $(this.trait:ribbon:color) $(this.trait:ribbon:material) ribbon is placed centrally in the center of the arrangement, holding the flowers and greenery taut.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="10"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:flower:db">
         ([ "agrimony":(\{ "agrimony clusters", (\{ "skill:career:gardener", 21, "skill:career:gardening", 24 \}) \}), "anthurium":(\{ "anthuriums", (\{ "skill:career:gardener", 16, "skill:alteration:gardening", 11 \}) \}), "asphodel flower":(\{ "asphodel clusters", (\{ "skill:career:gardener", 15, "skill:alteration:gardening", 24 \}) \}), "begonia":(\{ "begonias", (\{ "skill:career:gardener", 18, "skill:alteration:gardening", 24 \}) \}), "bell-like laurel":(\{ "bell-like laurels", (\{ "skill:career:gardener", 12, "skill:alteration:gardening", 21 \}) \}), "bluebells":(\{ "bluebells", (\{ "skill:career:gardener", 12, "skill:alteration:gardening", 21 \}) \}), "borage":(\{ "borages", (\{ "skill:career:gardener", 10, "skill:alteration:gardening", 19 \}) \}), "carnation":(\{ "carnations", (\{ "skill:career:gardener", 2, "skill:alteration:gardening", 11 \}) \}), "cherry blossom":(\{ "cherry blossoms", (\{ "skill:career:gardener", 8, "skill:alteration:gardening", 17 \}) \}), "chrysanthemum":(\{ "chrysanthemums", (\{ "skill:career:gardener", 15, "skill:alteration:gardening", 24 \}) \}), "daisy":(\{ "daisies", (\{ "skill:career:gardener", 1, "skill:alteration:gardening", 10 \}) \}), "dandelion":(\{ "dandelions", (\{ "skill:career:gardener", 4, "skill:alteration:gardening", 8 \}) \}), "foxglove":(\{ "foxgloves", (\{ "skill:career:gardener", 3, "skill:alteration:gardening", 12 \}) \}), "foxtail":(\{ "foxtails", (\{ "skill:career:gardener", 13, "skill:alteration:gardening", 22 \}) \}), "geranium":(\{ "geraniums", (\{ "skill:career:gardener", 18, "skill:alteration:gardening", 24 \}) \}), "heart-shaped arnica":(\{ "heart-shaped arnicas", (\{ "skill:career:gardener", 18, "skill:alteration:gardening", 21 \}) \}), "heliconia":(\{ "heliconias", (\{ "skill:career:gardener", 17, "skill:alteration:gardening", 21 \}) \}), "hibiscus":(\{ "hibiscus flowers", (\{ "skill:career:gardener", 12, "skill:alteration:gardening", 21 \}) \}), "hyacinth":(\{ "hyacinths", (\{ "skill:career:gardener", 16, "skill:alteration:gardening", 11 \}) \}), "ivy chalice magnolia":(\{ "ivy chalice magnolias", (\{ "skill:career:gardener", 19, "skill:alteration:gardening", 22 \}) \}), "kudzu":(\{ "kudzu blooms", (\{ "skill:career:gardener", 18, "skill:alteration:gardening", 24 \}) \}), "large angelica":(\{ "angelica clusters", (\{ "skill:career:gardener", 14, "skill:alteration:gardening", 23 \}) \}), "lavender":(\{ "lavenders", (\{ "skill:career:gardener", 13, "skill:alteration:gardening", 22 \}) \}), "lily":(\{ "lilies", (\{ "skill:career:gardener", 5, "skill:alteration:gardening", 14 \}) \}), "lilyofthevalley":(\{ "lilies of the valley", (\{ "skill:career:gardener", 11, "skill:alteration:gardening", 20 \}) \}), "lisianthus":(\{ "lisianthuses", (\{ "skill:career:gardener", 4, "skill:alteration:gardening", 8 \}) \}), "lotus":(\{ "lotus flowers", (\{ "skill:career:gardener", 12, "skill:alteration:gardening", 21 \}) \}), "marigold":(\{ "marigolds", (\{ "skill:career:gardener", 3, "skill:alteration:gardening", 12 \}) \}), "moondrop":(\{ "moondrops", (\{ "skill:career:gardener", 10, "skill:alteration:gardening", 19 \}) \}), "nasturtium":(\{ "nasturtiums", (\{ "skill:career:gardener", 17, "skill:alteration:gardening", 17 \}) \}), "orchid":(\{ "orchids", (\{ "skill:career:gardener", 7, "skill:alteration:gardening", 16 \}) \}), "peony":(\{ "peonies", (\{ "skill:career:gardener", 18, "skill:alteration:gardening", 24 \}) \}), "poppy":(\{ "poppies", (\{ "skill:career:gardener", 6, "skill:alteration:gardening", 15 \}) \}), "rose":(\{ "roses", (\{ "skill:career:gardener", 9, "skill:alteration:gardening", 18 \}) \}), "snapdragon":(\{ "snapdragons", (\{ "skill:career:gardener", 18, "skill:alteration:gardening", 24 \}) \}), "thistle":(\{ "thistles", (\{ "skill:career:gardener", 18, "skill:alteration:gardening", 24 \}) \}), "tiger lily":(\{ "tiger lilies", (\{ "skill:career:gardener", 21, "skill:alteration:gardening", 24 \}) \}), "tigerlily":(\{ "tiger lilies", (\{ "skill:career:gardener", 21, "skill:alteration:gardening", 24 \}) \}), "tulip":(\{ "tulips", (\{ "skill:career:gardener", 4, "skill:alteration:gardening", 13 \}) \}), "violet":(\{ "violets", (\{ "skill:career:gardener", 13, "skill:alteration:gardening", 22 \}) \}), "wisteria":(\{ "wisteria", (\{ "skill:career:gardener", 15, "skill:alteration:gardening", 24 \}) \}) ])
      </Core:Property>
      <Core:Property property="export:trait:objecttype">
         "flower"
      </Core:Property>
      <Core:Property property="merry:lib:set_adjective">
         X[M] mapping db;

\$oldtrait = Str(Get(\$this, \$prop));
\$newtrait = Str(\$adj);
db = Get(\$this, "flower:db");
\$flowers = map_indices(db);

\$words = explode(\$oldtrait, " ");

for(\$i = 0; \$i \< sizeof(\$words); \$i++) \{
    Set(\$this, "details:default:adjective:" + Str(\$words[\$i]), FALSE);
    if(\$prop == "trait:quantity") \{
        Set(\$this, "details:default:sname:" + Str(\$words[\$i]), FALSE);
    \}
    if(\$prop == "trait:type") \{
        if(\$oldtrait == "flower") \{
   	    \$plural = "flowers";
        \} else if(db[\$oldtrait]) \{
            \$plural = Str(db[\$oldtrait][0]);
        \} else \{
            \$plural = \$oldtrait;
        \}
        Set(\$this, "details:default:adjective:" + Str(\$plural), FALSE);
    \}
\}

if(\$oldtrait == "flowers") \{
    Set(\$this, "details:default:adjectives:flower", FALSE);
\} else \{
    for(\$i = 0; \$i \< sizeof(\$flowers); \$i++) \{
        if(db[\$flowers[\$i]][0] == \$oldtrait) \{
            Set(\$this, "details:default:adjective:" + Str(\$flowers[\$i]), FALSE);
        \}
    \}
\}

\$words = explode(\$newtrait, " ");
for(\$i = 0; \$i \< sizeof(\$words); \$i++) \{
    Set(\$this, "details:default:adjective:" + Str(\$words[\$i]), TRUE);
    if(\$prop == "trait:quantity") \{
        Set(\$this, "details:default:sname:" + Str(\$words[\$i]), TRUE);
    \}
    if(\$prop == "trait:type") \{
        if(\$newtrait == "flower") \{
   	    \$plural = "flowers";
        \} else if(db[\$newtrait]) \{
            \$plural = Str(db[\$newtrait][0]);
        \} else \{
            \$plural = \$newtrait;
        \}
        \$newtrait = \$plural;
        Set(\$this, "details:default:adjective:" + Str(\$plural), TRUE);
    \}
\}

Set(\$this, \$prop, \$newtrait);
      </Core:Property>
      <Core:Property property="merry:lib:set_desc">
         X[M] /* check if empty */
\$contents = \$this."base:inventory";

if(!sizeof(\$contents)) \{
    Set(\$this, "details:default:adjective:empty", TRUE);
    \$this.empty = TRUE;
    \$quantity = "empty garland";
    \$quality = "";
    \$color = "";
    \$type = "";
\} else \{
    Set(\$this, "details:default:adjective:empty", FALSE);
    \$this.empty = FALSE;
    \$sz = Int(sizeof(\$contents));
    if(\$sz \< 6) \{
        \$quantity = "partially filled garland";
    \} else \{
        \$quantity = "garland";
    \} 

    if(\$quantity != "partially filled garland") \{
        /* check quality */
        \$total = 0;
        for(\$i = 0; \$i \< \$sz; \$i++) \{
            if(!\$contents[\$i]."trait:quality") \{
                \$contents[\$i]."trait:quality" = 5;
            \}

            \$total += Int(\$contents[\$i]."trait:quality");
        \}

        \$this."trait:quality" = Int(\$total/\$sz);

        switch(\$this."trait:quality") \{ 
          case 12: 
          \$state = "perfect"; 
          break; 
        case 11: 
          \$state = "perfect"; 
          break; 
        case 10: 
          \$state = "immaculate"; 
          break; 
        case 9: 
          \$state = "amazing"; 
          break; 
        case 8: 
          \$state = "pristine"; 
          break; 
        case 7: 
          \$state = "crisp"; 
          break; 
        case 6: 
          \$state = "fresh"; 
    	  break; 
        case 5: 
    	  \$state = "bright"; 
    	  break; 
        case 2: 
    	  \$state = (\{ "dull", "drooping", "faded" \})[random(2)]; 
    	  break; 
        case 1: 
    	  \$state = (\{ "limp", "listless" \})[random(2)]; 
    	  break; 
        case 0: 
    	  \$state = "wilted"; 
    	  break; 
        default: 
    	  \$state = nil; 
    	  break;
      \} 
    \} else \{
        \$quality = "";
        \$state = "";
    \}

    \$colors = (\{ \});
    \$types = (\{ \});

    for(\$i = 0; \$i \< \$sz; \$i++) \{
        \$colors \|= (\{ \$contents[\$i]."trait:color" \});

        if(\$contents[\$i]."trait:descriptor") \{
            \$types \|= (\{ \$contents[\$i]."trait:descriptor" \});
        \} else \{
            \$types \|= (\{ \$contents[\$i]."trait:type" \});
        \}
    \}

    if(sizeof(\$colors) \> 1) \{
        \$color = "multi-colored";
    \} else \{
        \$color = \$colors[0];
    \}

    if(sizeof(\$types) \> 1) \{
        \$type = "flowers and greenery";
    \} else \{
        \$type = \$types[0];
    \}

\} 

::set_adjective(\$adj: \$quantity, \$prop: "trait:quantity");
::set_adjective(\$adj: \$state, \$prop: "trait:state");
::set_adjective(\$adj: \$color, \$prop: "trait:color");
::set_adjective(\$adj: \$type, \$prop: "trait:type");
      </Core:Property>
      <Core:Property property="merry:react:place-where">
         X[M] \$db = \$this."flower:db";

if(sizeof(\$what) \&\& sizeof(\$what) \> 1) \{
    EmitTo(\$actor, "You can only add one flower to the garland at a time.");
    return FALSE;
\}

/* place an item in the circlet */
if (\$obprep == PREP_INSIDE) \{
  /* only let them put flowers inside */
  \$sz = sizeof(\$what);
  for(\$i = 0; \$i \< \$sz; \$i++) \{
    if(NRefOb(\$what[\$i])."trait:objecttype" == "flower" \&\& NRefOb(\$what[\$i])."base:urparent" != \$\{Ironclaw:Props:Gardening:OLD:UrDryBloom\}) \{
        if(!sizeof(\$this."base:inventory") \|\| sizeof(\$this."base:inventory") \< 6) \{

            \$type = Str(NRefOb(\$what[\$i])."trait:type");

            if(NRefOb(\$what[\$i])."trait:descriptor") \{
                \$type = Str(NRefOb(\$what[\$i])."trait:descriptor");
            \}

            if(!\$db[\$type]) \{
		EmitTo(\$actor, "You are not skilled enough to add that flower to the circlet.");
                return FALSE;
            \}

            \$skills = \$db[\$type][1];
            if(Int(Get(\$actor, \$skills[0])) \>= \$skills[1] \|\| Int(Get(\$actor, \$skills[2])) \>= \$skills[3]) \{
                return TRUE;
            \} else \{
		EmitTo(\$actor, "You are not skilled enough to add that flower to the garland.");
                return FALSE;
            \}
        \} else \{
            EmitTo(\$actor, "The garland cannot hold any more flowers.");
            return FALSE;
        \}
    \} else \{
        EmitTo(\$actor, "You can only put fresh flowers in the circlet.");
        return FALSE;
    \}
  \}
\}
return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1525623738, "jominey", "E", 1525623768, "jominey", "K", 1525623863, "jominey", "E", 1525623928, "jominey", "E", 1525624090, "jominey", "K", 1525624878, "jominey", "E", 1525624887, "jominey", "E", 1533563810, "chindora", "K", 1533563902, "chindora", "K", 1533564083, "chindora", "E", 1533564520, "chindora", "K", 1533564559, "chindora", "K", 1533564797, "chindora", "E", 1533564963, "chindora", "E", 1535225111, "harpdragon", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
