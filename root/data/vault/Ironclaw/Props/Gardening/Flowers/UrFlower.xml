<object clone="/base/obj/thing" owner="tonyd">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="0.2" density="0.5"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="true"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="flower"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="flowers"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.trait:state) $(this.trait:color) $(this.trait:brief)
          </Base:Description>
          <Base:Description type="examine">
             <describe what="$(this)" nonposs="1" cap="1"/>.
          </Base:Description>
          <Base:Description type="look">
             <describe what="$(this)" nonposs="1" cap="1"/>.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:Covered value="head-fore"/>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="bak:export:alteration:add:default:dye">
         ([ "noslay":"true", "properties":(\{ (\{ "trait:color", "trait:color" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:decaydelay">
         172800
      </Core:Property>
      <Core:Property property="export:trait:brief">
         "flower"
      </Core:Property>
      <Core:Property property="export:trait:objecttype">
         "flower"
      </Core:Property>
      <Core:Property property="export:trait:quality">
         4
      </Core:Property>
      <Core:Property property="export:trait:smell">
         "sweet scents"
      </Core:Property>
      <Core:Property property="export:trait:trash">1</Core:Property>
      <Core:Property property="merry:act:start">
         X[M] /* make flowers decay over time */ 
Call(this, "decay"); 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:inherit:react-post:chew-dob">
         \<Ironclaw:Props:Herbalism:EffectLib\>
      </Core:Property>
      <Core:Property property="merry:inherit:react-post:eat-what">
         \<Ironclaw:Props:Herbalism:EffectLib\>
      </Core:Property>
      <Core:Property property="merry:inherit:react-post:gobble-dob">
         \<Ironclaw:Props:Herbalism:EffectLib\>
      </Core:Property>
      <Core:Property property="merry:inherit:react-post:nibble-dob">
         \<Ironclaw:Props:Herbalism:EffectLib\>
      </Core:Property>
      <Core:Property property="merry:inherit:react-post:savor-dob">
         \<Ironclaw:Props:Herbalism:EffectLib\>
      </Core:Property>
      <Core:Property property="merry:inherit:react-post:savour-dob">
         \<Ironclaw:Props:Herbalism:EffectLib\>
      </Core:Property>
      <Core:Property property="merry:lib:decay">
         X[M] /* Make flowers decay over time */ 
 
/* check if this is a spawn */ 
if(sscanf(name(this), "%s]#%s", \$tmp, \$tmp) != 2) \{ 
  /* NOT a spawn. Don't decay */ 
  return TRUE; 
\} 
 
if(!this."trait:quality") 
  this."trait:quality" = 4; 
 
while(this."trait:quality") \{ 
  \$delay(this.decaydelay, TRUE, "0fe5"); 
 
  /* check if this is a spawn */ 
  if(sscanf(name(this), "%s]#%s", \$tmp, \$tmp) != 2) \{ 
    /* NOT a spawn. Don't decay */ 
    return TRUE; 
  \} 
  this."trait:quality"--; 
 
/*  EmitTo(this."base:environment", "I am "+Describe(this)); 
  EmitTo(this."base:environment", "Quality of "+Str(this."trait:quality")); */ 
\} 
 
\$delay(this.decaydelay*5, TRUE, "93f0"); 
 
/* check if this is a spawn */ 
if(sscanf(name(this), "%s]#%s", \$tmp, \$tmp) != 2) \{ 
  /* NOT a spawn. Don't decay */ 
  return TRUE; 
\} 
 
/* send destruction message */ 
if(this."base:environment") 
  EmitIn(this."base:environment", Describe(\$this)+" disintegrates."); 
if(this."base:environment"."base:environment") \{ 
  EmitTo(this."base:environment", Describe(\$this, nil, this."base:environment")+" disintegrates."); 
  EmitIn(this."base:environment"."base:environment", Describe(\$this)+" disintegrates.", this."base:environment"); 
\} 
Slay(this); 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:dry-dob">
         X[M] EmitTo(\$actor, "You carefully dry "+Describe(\$this)+".");
EmitIn(\$actor."base:environment", Describe(\$actor)+" carefully dries "+Describe(\$this)+".", \$actor);

\$dried = Spawn(\$\{Ironclaw:Props:Gardening:OLD:UrDryBloom\});
\$dried."trait:quality" = \$this."trait:quality";
\$dried."trait:color" = \$this."trait:color";
\$dried."trait:descriptor" = \$this."trait:descriptor";
\$dried."trait:brief" = \$this."trait:brief";
\$dried."trait:smell" = "the distant fragrance of " + Str(\$this."trait:smell");
\$dried."base:environment" = \$actor;
Slay(this);
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:grind-dob">
         X[M] /* check if there is a mortar */

if(!\$using) \{
 EmitTo(\$actor, "You need something to grind the plant with.");
 return FALSE;
\}
if(sizeof(\$using) != 1) \{
 EmitTo(\$actor, "You don't need that many things to grind the plant with.");
 return FALSE;
\}

\$mortar = Match(\$actor, "mortar");
   if(!sizeof(\$mortar)) \{
      EmitTo(\$actor, "You should use a mortar for grinding the plant.");
      return FALSE; \}

for(\$i = 0; \$i \< sizeof(\$mortar); \$i++) \{
    \$mortar[\$i] = NRefOb(\$mortar[\$i]);
\}

\$tool = NRefOb(\$using[0]);
    if(!member(\$tool, \$mortar)) \{
    EmitTo(\$actor, "You need a mortar to properly grind the plant with.");
    return FALSE; \}

/* check if they have skill */
\$gardener = Int(\$actor."skill:career:gardener") + Int(\$actor."skill:alteration:gardening")+ Int(\$actor."skill:career:healer")/2;

if(!\$gardener) \{
   EmitTo(\$actor, "Your awkward attempt to grind the "+Describe(\$this)+" results in some torn pieces of plant which fall from your hand.");
   EmitIn(\$actor."base:environment", Describe(\$actor)+"'s awkward attempt to grind the "+Describe(\$this)+" results in some torn pieces of plant which fall to the ground.", \$actor);
   /* slay plant */
   Slay(this);
   return FALSE;
\} else if(\$gardener \<= 8) \{
   EmitTo(\$actor, "You are not quite accustomed for this type of fine work and you do not manage to properly grind the "+Describe(\$this)+", but you can save the "+Describe(\$this)+" for someone more skilled.");
   EmitIn(\$actor."base:environment", Describe(\$actor)+" tries to grind the "+Describe(\$this)+" into some paste, but does not manage to. At least the "+Describe(\$this)+" isn't ruined beyond recognition.", \$actor);

/* if they have skill make paste from it */
\} else if (\$gardener \> 6) \{
   EmitTo(\$actor, "Your toss your "+Describe(\$this)+" into your mortar and grind it with practiced moves until the leaves mash into a uniform paste. You collect the paste into a little clay pot.");
   EmitIn(\$actor."base:environment", Describe(\$actor)+" puts the "+Describe(\$this)+" into a mortar and grinds the plant into a uniform paste which is then collected into a little clay pot.", \$actor);

   /* exchange plant for paste */
   Slay(this);
   \$paste = Spawn(\$\{Ironclaw:Props:Herbalism:Pastes:UrPaste\});
   Set(\$paste,"base:environment", \$actor);
   Set(\$paste,"trait:material", \$this."trait:brief");
   Set(\$paste,"trait:smell", \$this."trait:smell");
   Set(\$paste,"trait:effect", \$this."trait:effect");
   Set(\$paste,"trait:color", \$this."trait:color");
\}

return FALSE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:color">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:quality">
         X[M] /* set the description for the flower, based on quality */ 
 
switch(Int(this."trait:quality"/2)) \{ 
  case 12: 
    this."trait:state" = "perfect"; 
    break; 
  case 11: 
    this."trait:state" = "perfect"; 
    break; 
  case 10: 
    this."trait:state" = "immaculate"; 
    break; 
  case 9: 
    this."trait:state" = "amazing"; 
    break; 
  case 8: 
    this."trait:state" = "pristine"; 
    break; 
  case 7: 
    this."trait:state" = "crisp"; 
    break; 
  case 6: 
    this."trait:state" = "fresh"; 
    break; 
  case 5: 
    this."trait:state" = "bright"; 
    break; 
  case 2: 
    this."trait:state" = (\{ "dull", "drooping", "faded" \})[random(2)]; 
    break; 
  case 1: 
    this."trait:state" = (\{ "limp", "listless" \})[random(2)]; 
    break; 
  case 0: 
    this."trait:state" = "wilted"; 
    break; 
  default: 
    this."trait:state" = nil; 
    break; 
\} 
 
return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1127923051, "tunk_bodin", "X", 1127923345, "tunk_bodin", "X", 1127923680, "tunk_bodin", "X", 1127923815, "tunk_bodin", "X", 1127924823, "tunk_bodin", "X", 1127925274, "tunk_bodin", "X", 1127969669, "tunk_bodin", "X", 1127972865, "tunk_bodin", "E", 1128055550, "tunk_bodin", "X", 1128994062, "tunk_bodin", "X", 1128994433, "tunk_bodin", "X", 1129002244, "tunk_bodin", "X", 1129002340, "tunk_bodin", "X", 1129003413, "tunk_bodin", "X", 1129009397, "tunk_bodin", "X", 1129009472, "tunk_bodin", "X", 1129009530, "tunk_bodin", "X", 1129009687, "tunk_bodin", "X", 1129009719, "tunk_bodin", "X", 1129010041, "tunk_bodin", "X", 1129998731, "tunk_bodin", "X", 1130464862, "tunk_bodin", "X", 1130464966, "tunk_bodin", "X", 1136426932, "tonyd", "E", 1136427157, "tonyd", "E", 1136428919, "tonyd", "E", 1136428952, "tonyd", "E", 1136843255, "tunk_bodin", "X", 1136843491, "tunk_bodin", "X", 1136927070, "tunk_bodin", "E", 1137612759, "roccon", "X", 1137612768, "roccon", "X", 1139783822, "tunk_bodin", "X", 1139783869, "tunk_bodin", "X", 1147075374, "tonyd", "E", 1147075383, "tonyd", "E", 1147081607, "tonyd", "E", 1147081667, "tonyd", "E", 1147081750, "tonyd", "E", 1147676204, "tonyd", "E", 1147676653, "tonyd", "P", 1147676697, "tonyd", "P", 1147676737, "tonyd", "P", 1147676793, "tonyd", "P", 1147676844, "tonyd", "P", 1147676933, "tonyd", "P", 1147676978, "tonyd", "P", 1147677036, "tonyd", "P", 1147677054, "tonyd", "P", 1147677167, "tonyd", "P", 1147677239, "tonyd", "P", 1147677305, "tonyd", "S", 1147677343, "tonyd", "P", 1147677349, "tonyd", "P", 1147677395, "tonyd", "P", 1147677441, "tonyd", "P", 1147677808, "tonyd", "P", 1147678044, "tonyd", "P", 1147678102, "tonyd", "P", 1147678147, "tonyd", "P", 1147678338, "tonyd", "P", 1147678360, "tonyd", "P", 1147678406, "tonyd", "P", 1147680163, "tonyd", "E", 1147849231, "tonyd", "E", 1148004976, "tonyd", "P", 1168391752, "tunk_bodin", "X", 1201549234, "jsfox", "X", 1203348078, "slurpeeslurp", "E", 1250157487, "balkaar", "E", 1250157670, "balkaar", "E", 1250157708, "balkaar", "E", 1250159915, "balkaar", "E", 1250391838, "tonyd", "P", 1250790442, "balkaar", "E", 1250811327, "balkaar", "E", 1250812996, "balkaar", "E", 1250813332, "balkaar", "E", 1250862792, "balkaar", "E", 1250862834, "balkaar", "E", 1250862863, "balkaar", "E", 1250862885, "balkaar", "E", 1250862900, "balkaar", "E", 1250862974, "balkaar", "E", 1250863166, "balkaar", "E", 1250863304, "balkaar", "E", 1251152597, "balkaar", "E", 1253299094, "balkaar", "E", 1253506717, "jominey", "E", 1253506726, "jominey", "E", 1325291210, "jominey", "K", 1325291225, "jominey", "K", 1325291262, "jominey", "K", 1325291292, "jominey", "K", 1325291308, "jominey", "K", 1325548445, "jominey", "E", 1325548489, "jominey", "K", 1327968420, "jominey", "R", 1347223311, "jominey", "R", 1411484632, "slurpeeslurp", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
