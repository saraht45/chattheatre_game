<object clone="/base/obj/thing" owner="jominey">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="0.03" density="0.5"/>
    <Base:Container flexible="false" transparent-container="false" public-container="true" tight="false" capacity="0.001" maxweight="5" verb2="contains an arrangement of" verb3="contains an arrangement of"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="lying" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="bouquet"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="bouquets"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $[::set_desc()]{? | $(this.empty) | empty bouquet | $(this.trait:state) $(this.trait:quantity) of $(this.trait:color) $(this.trait:type)}
          </Base:Description>
          <Base:Description type="look">
             This {? | $(this.empty) | empty bouquet | $(this.trait:state) $(this.trait:quantity) of $(this.trait:color) $(this.trait:type)} is bound with a $(this.trait:material) ribbon.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="ribbon" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="ribbon"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="ribbons"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             bouquet's $(this.trait:material) ribbon
          </Base:Description>
          <Base:Description type="look">
             The bouquet's $(this.trait:material) ribbon is securely tied to hold the flower arrangement in place.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="10"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:flower:db">
         ([ "agrimony":(\{ "agrimony clusters", (\{ "skill:general:gardening", 21 \}) \}), "angelfishorchid":(\{ "angelfish orchids", (\{ "skill:general:gardening", 16 \}) \}), "angelica":(\{ "angelica clusters", (\{ "skill:general:gardening", 14 \}) \}), "anthurium":(\{ "anthuriums", (\{ "skill:general:gardening", 16 \}) \}), "arnica":(\{ "heart-shaped arnicas", (\{ "skill:general:gardening", 18 \}) \}), "asphodel":(\{ "asphodel clusters", (\{ "skill:general:gardening", 15 \}) \}), "begonia":(\{ "begonias", (\{ "skill:general:gardening", 18 \}) \}), "bluebells":(\{ "bluebells", (\{ "skill:general:gardening", 12 \}) \}), "borage":(\{ "borages", (\{ "skill:general:gardening", 10 \}) \}), "bougainvillea":(\{ "bougainvillea", (\{ "skill:general:gardening", 24 \}) \}), "callalily":(\{ "callalily", (\{ "skill:general:gardening", 24 \}) \}), "carnation":(\{ "carnations", (\{ "skill:general:gardening", 2 \}) \}), "cherry blossom":(\{ "cherry blossoms", (\{ "skill:general:gardening", 8 \}) \}), "chrysanthemum":(\{ "chrysanthemums", (\{ "skill:general:gardening", 15 \}) \}), "daffodil":(\{ "daffodils", (\{ "skill:general:gardening", 6 \}) \}), "daisy":(\{ "daisies", (\{ "skill:general:gardening", 1 \}) \}), "dandelion":(\{ "dandelions", (\{ "skill:general:gardening", 4 \}) \}), "foxglove":(\{ "foxgloves", (\{ "skill:general:gardening", 3 \}) \}), "foxtail":(\{ "foxtails", (\{ "skill:general:gardening", 13 \}) \}), "geranium":(\{ "geraniums", (\{ "skill:general:gardening", 18 \}) \}), "heliconia":(\{ "heliconias", (\{ "skill:general:gardening", 17 \}) \}), "hibiscus":(\{ "hibiscus flowers", (\{ "skill:general:gardening", 12 \}) \}), "hyacinth":(\{ "hyacinths", (\{ "skill:general:gardening", 16 \}) \}), "ivy chalice magnolia":(\{ "ivy chalice magnolias", (\{ "skill:general:gardening", 19 \}) \}), "jasmine":(\{ "jasmine clusters", (\{ "skill:general:gardening", 16 \}) \}), "kudzu":(\{ "kudzu blooms", (\{ "skill:general:gardening", 18 \}) \}), "laurel":(\{ "bell-like laurels", (\{ "skill:general:gardening", 12 \}) \}), "lavender":(\{ "lavenders", (\{ "skill:general:gardening", 13 \}) \}), "lily":(\{ "lilies", (\{ "skill:general:gardening", 5 \}) \}), "lilyofthevalley":(\{ "lilies of the valley", (\{ "skill:general:gardening", 11 \}) \}), "lisianthus":(\{ "lisianthuses", (\{ "skill:general:gardening", 4 \}) \}), "lotus":(\{ "lotus flowers", (\{ "skill:general:gardening", 12 \}) \}), "marigold":(\{ "marigolds", (\{ "skill:general:gardening", 3 \}) \}), "moondrop":(\{ "moondrops", (\{ "skill:general:gardening", 10 \}) \}), "nasturtium":(\{ "nasturtiums", (\{ "skill:general:gardening", 17 \}) \}), "orchid":(\{ "orchids", (\{ "skill:general:gardening", 18 \}) \}), "peony":(\{ "peonies", (\{ "skill:general:gardening", 18 \}) \}), "poinsettia":(\{ "poinsettia", (\{ "skill:general:gardening", 24 \}) \}), "poppy":(\{ "poppies", (\{ "skill:general:gardening", 6 \}) \}), "rose":(\{ "roses", (\{ "skill:general:gardening", 9 \}) \}), "snapdragon":(\{ "snapdragons", (\{ "skill:general:gardening", 18 \}) \}), "sorbonnelily":(\{ "sorbonnelily", (\{ "skill:general:gardening", 24 \}) \}), "thistle":(\{ "thistles", (\{ "skill:general:gardening", 18 \}) \}), "tiger lily":(\{ "tiger lilies", (\{ "skill:general:gardening", 21 \}) \}), "tigerlily":(\{ "tiger lilies", (\{ "skill:general:gardening", 21 \}) \}), "tulip":(\{ "tulips", (\{ "skill:general:gardening", 4 \}) \}), "violet":(\{ "violets", (\{ "skill:general:gardening", 13 \}) \}), "wisteria":(\{ "wisteria", (\{ "skill:general:gardening", 15 \}) \}) ])
      </Core:Property>
      <Core:Property property="export:trait:objecttype">
         "flower"
      </Core:Property>
      <Core:Property property="merry:lib:set_adjective">
         X[M] mapping db;  
  
\$oldtrait = Str(Get(\$this, \$prop));  
\$newtrait = Str(\$adj);  
db = Get(\$this, "flower:db");  
\$flowers = map_indices(db);  
  
\$words = explode(\$oldtrait, " ");  
  
for(\$i = 0; \$i \< sizeof(\$words); \$i++) \{  
    Set(\$this, "details:default:adjective:" + Str(\$words[\$i]), FALSE);  
    if(\$prop == "trait:quantity") \{  
        Set(\$this, "details:default:sname:" + Str(\$words[\$i]), FALSE);  
    \}  
    if(\$prop == "trait:type") \{  
        if(\$oldtrait == "flower") \{  
        \$plural = "flowers";  
        \} else if(db[\$oldtrait]) \{  
            \$plural = Str(db[\$oldtrait][0]);  
        \} else \{  
            \$plural = \$oldtrait;  
        \}  
        Set(\$this, "details:default:adjective:" + Str(\$plural), FALSE);  
    \}  
\}  
  
if(\$oldtrait == "flowers") \{  
    Set(\$this, "details:default:adjectives:flower", FALSE);  
\} else \{  
    for(\$i = 0; \$i \< sizeof(\$flowers); \$i++) \{  
        if(db[\$flowers[\$i]][0] == \$oldtrait) \{  
            Set(\$this, "details:default:adjective:" + Str(\$flowers[\$i]), FALSE);  
        \}  
    \}  
\}  
  
\$words = explode(\$newtrait, " ");  
for(\$i = 0; \$i \< sizeof(\$words); \$i++) \{  
    Set(\$this, "details:default:adjective:" + Str(\$words[\$i]), TRUE);  
    if(\$prop == "trait:quantity") \{  
        Set(\$this, "details:default:sname:" + Str(\$words[\$i]), TRUE);  
    \}  
    if(\$prop == "trait:type") \{  
        if(\$newtrait == "flower") \{  
        \$plural = "flowers";  
        \} else if(db[\$newtrait]) \{  
            \$plural = Str(db[\$newtrait][0]);  
        \} else \{  
            \$plural = \$newtrait;  
        \}  
        \$newtrait = \$plural;  
        Set(\$this, "details:default:adjective:" + Str(\$plural), TRUE);  
    \}  
\}  
  
Set(\$this, \$prop, \$newtrait);
      </Core:Property>
      <Core:Property property="merry:lib:set_desc">
         X[M] /* check if empty */  
\$contents = \$this."base:inventory";  
  
if(!sizeof(\$contents)) \{  
    Set(\$this, "details:default:adjective:empty", TRUE);  
    \$this.empty = TRUE;  
    \$quantity = "empty bouquet";  
    \$quality = "";  
    \$color = "";  
    \$type = "";  
\} else \{  
    Set(\$this, "details:default:adjective:empty", FALSE);  
    \$this.empty = FALSE;  
    \$sz = Int(sizeof(\$contents));  
    if(\$sz \< 6) \{  
        \$quantity = "partially filled bouquet";  
    \} else if(\$sz == 6) \{  
        \$quantity = "half-bouquet";  
    \} else if(\$sz \> 6 \&\& \$sz \< 12) \{  
        \$quantity = "small bouquet";  
    \} else if (\$sz == 12) \{  
        \$quantity = "bouquet";  
    \} else if(\$sz \> 12 \&\& \$sz \< 24) \{  
        \$quantity = "large bouquet";  
    \} else if(\$sz == 24) \{  
        \$quantity = "double-bouquet";  
    \}  
  
    if(\$quantity != "partially filled bouquet") \{  
        /* check quality */  
        \$total = 0;  
        for(\$i = 0; \$i \< \$sz; \$i++) \{  
            if(!\$contents[\$i]."trait:quality") \{  
                \$contents[\$i]."trait:quality" = 4;  
            \}  
  
            \$total += Int(\$contents[\$i]."trait:quality");  
        \}  
  
        \$this."trait:quality" = Int(\$total/\$sz);  
  
        switch(\$this."trait:quality") \{   
          case 12:   
          \$state = "perfect";   
          break;   
        case 11:   
          \$state = "perfect";   
          break;   
        case 10:   
          \$state = "immaculate";   
          break;   
        case 9:   
          \$state = "amazing";   
          break;   
        case 8:   
          \$state = "pristine";   
          break;   
        case 7:   
          \$state = "crisp";   
          break;   
        case 6:   
          \$state = "fresh";   
       break;   
        case 5:   
       \$state = "bright";   
       break;   
        case 2:   
       \$state = (\{ "dull", "drooping", "faded" \})[random(2)];   
       break;   
        case 1:   
       \$state = (\{ "limp", "listless" \})[random(2)];   
       break;   
        case 0:   
       \$state = "wilted";   
       break;   
        default:   
       \$state = nil;   
       break;  
      \}   
    \} else \{  
        \$quality = "";  
        \$state = "";  
    \}  
  
    \$colors = (\{ \});  
    \$types = (\{ \});  
  
    for(\$i = 0; \$i \< \$sz; \$i++) \{  
        \$colors \|= (\{ \$contents[\$i]."trait:color" \});  
  
        if(\$contents[\$i]."trait:descriptor") \{  
            \$types \|= (\{ \$contents[\$i]."trait:descriptor" \});  
        \} else \{  
            \$types \|= (\{ \$contents[\$i]."trait:type" \});  
        \}  
    \}  
  
    if(sizeof(\$colors) \> 1) \{  
        \$color = "multi-colored";  
    \} else \{  
        \$color = \$colors[0];  
    \}  
  
    if(sizeof(\$types) \> 1) \{  
        \$type = "flower";  
    \} else \{  
        \$type = \$types[0];  
    \}  
  
\}   
  
::set_adjective(\$adj: \$quantity, \$prop: "trait:quantity");  
::set_adjective(\$adj: \$state, \$prop: "trait:state");  
::set_adjective(\$adj: \$color, \$prop: "trait:color");  
::set_adjective(\$adj: \$type, \$prop: "trait:type");
      </Core:Property>
      <Core:Property property="merry:react:place-where">
         X[M] \$db = \$this."flower:db";  
  
if(sizeof(\$what) \&\& sizeof(\$what) \> 1) \{  
    EmitTo(\$actor, "You can only add one flower to the bouquet at a time.");  
    return FALSE;  
\}  
  
/* place an item in the bouquet */  
if (\$obprep == PREP_INSIDE) \{  
  /* only let them put flowers inside */  
  \$sz = sizeof(\$what);  
  for(\$i = 0; \$i \< \$sz; \$i++) \{  
    if(NRefOb(\$what[\$i])."trait:objecttype" == "flower" \&\& NRefOb(\$what[\$i])."base:urparent" != \$\{Ironclaw:Props:Gardening:OLD:UrDryBloom\}) \{  
        if(!sizeof(\$this."base:inventory") \|\| sizeof(\$this."base:inventory") \< 24) \{  
  
            \$type = Str(NRefOb(\$what[\$i])."trait:type");  
  
            if(NRefOb(\$what[\$i])."trait:descriptor") \{  
                \$type = Str(NRefOb(\$what[\$i])."trait:descriptor");  
            \}  
  
            if(!\$db[\$type]) \{  
                \$skills = (\{ "skill:general:gardening", 24 \});
                \$db[\$type] = (\{ \$type, \$skills \});
                \$this."flower:db" = \$db;
            \}  
  
            \$skills = \$db[\$type][1];  
            if(Int(Get(\$actor, \$skills[0])) \>= \$skills[1]) \{  
                return TRUE;  
            \} else \{  
  EmitTo(\$actor, "You are not skilled enough to add that flower to the bouquet.");  
                return FALSE;  
            \}  
        \} else \{  
            EmitTo(\$actor, "The bouquet cannot hold any more flowers.");  
            return FALSE;  
        \}  
    \} else \{  
        EmitTo(\$actor, "You can only put fresh flowers in the bouquet.");  
        return FALSE;  
    \}  
  \}  
\}  
return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1597108690, "jominey", "E", 1597108737, "jominey", "E", 1597108791, "jominey", "E", 1597108801, "jominey", "E", 1597108871, "jominey", "E", 1601956613, "ezralee", "K", 1601956641, "ezralee", "K", 1601958083, "ezralee", "K", 1604157198, "jominey", "E", 1604163315, "jominey", "E", 1604163346, "jominey", "E", 1604163483, "jominey", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
