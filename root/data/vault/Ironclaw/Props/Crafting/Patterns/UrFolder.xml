<object clone="/base/obj/thing" owner="SkotOS">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="folder"/>
            <Base:SName sname="container"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="folders"/>
            <Base:PName pname="containers"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="pattern"/>
          <Base:Adjective adjective="patterns"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             {? | $(this.alteration:embossing:desc) | $(this.alteration:embossing:desc) embossed |} $(this.trait:color) $(this.trait:material) folder
          </Base:Description>
          <Base:Description type="examine">
             A $(this.trait:color) $(this.trait:material) folder{? | $(this.alteration:embossing:desc) |, embossed with an image of $(this.alteration:embossing:desc) upon its cover, |} which is designed to store patterns. {? | $(this.trait:label) | It is labeled: "$(this.trait:label)" | Nothing is written on this folder. } <br/><br/>$[::getpages()] <makers-mark/><br/><sbr/><quality-full/>
          </Base:Description>
          <Base:Description type="look">
             A $(this.trait:color) $(this.trait:material) folder{? | $(this.alteration:embossing:desc) |, embossed with an image of $(this.alteration:embossing:desc) upon its cover, |} which is designed to store patterns. {? | $(this.trait:label) | It is labeled: "$(this.trait:label)" | Nothing is written on this folder. } <br/><br/>$[::getpages()]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="cover" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             folder cover
          </Base:Description>
          <Base:Description type="examine">
             {? | $(this.trait:label) | It is labeled: "$(this.trait:label)" | Nothing is written on this folder. }
          </Base:Description>
          <Base:Description type="look">
             {? | $(this.trait:label) | It is labeled: "$(this.trait:label)" | Nothing is written on this folder. }
          </Base:Description>
          <Base:Description type="writing">
             {? | $(this.trait:label) | $(this.trait:label) | Nothing is written on this folder. }
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="spine" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="folder"/>
        </Base:Adjectives>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="merry:act:start">
         X[M] int i; 
object* contents; 
object pattern; 
 
if(\$this."trait:spawnedcontents") \{ 
    contents = \$this."trait:spawnedcontents"; 
 
    for(i = 0; i \< sizeof(contents); i++) \{ 
        pattern = nil; 
        if(contents[i] != nil) \{ 
            pattern = Spawn(contents[i]); 
            ::add_detail(\$detail: pattern); 
        \} 
    \} 
\} 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:inherit:lib:study">
         \<Allegory:Lib:Crafting:Patterns\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:study_pre">
         \<Allegory:Lib:Crafting:Patterns\>
      </Core:Property>
      <Core:Property property="merry:lib:add_detail">
         X[M] int i;  
  
if(\$this."patterns:max") \{  
    \$max = \$this."patterns:max";  
\} else \{  
    \$max = 15;  
\}  
  
\$detailName = nil;  
for(i = 0; i \< \$max; i++) \{  
    if(!sizeof(Get(\$this, "details:" + NRefOb(\$detail)."trait:objecttype" + Str(i) + ":snames"))) \{  
        \$detailName = "details:" + NRefOb(\$detail)."trait:objecttype" + Str(i);  
    \}  
\}  
  
if(!\$detailName) \{  
    EmitTo(\$actor, "You cannot add another " + NRefOb(\$detail)."trait:objecttype" + " to " + Describe(\$this) + ".");  
    \$accepted -= (\{ \$detail \});  
    return FALSE;  
\}   
  
\$brief = ParseXML(replace_strings(dump_value(NRefOb(\$detail)."details:default:description:brief"), "X[S]", "", "trait:brief", "trait:" + replace_strings(\$detailName, "details:", "") + ":brief"));  
Set(\$this, \$detailName + ":description:brief:local", \$brief);  
  
\$look = ParseXML(replace_strings(dump_value(NRefOb(\$detail)."details:default:description:look"), "X[S]", "", "trait:brief", "trait:" + replace_strings(\$detailName, "details:", "") + ":brief", "trait:type", "trait:" + replace_strings(\$detailName, "details:", "") + ":type"));  
Set(\$this, \$detailName + ":description:look:local", \$look);  
  
\$examine = ParseXML(replace_strings(dump_value(NRefOb(\$detail)."details:default:description:examine"), "X[S]", "", "trait:brief", "trait:" + replace_strings(\$detailName, "details:", "") + ":brief", "trait:type", "trait:" + replace_strings(\$detailName, "details:", "") + ":type"));;  
Set(\$this, \$detailName + ":description:examine:local", \$examine);  
  
\$snames = NRefOb(\$detail)."details:default:snames";  
for(i = 0; i \< sizeof(\$snames); i++) \{  
    Set(\$this, \$detailName + ":sname:" + \$snames[i], TRUE);  
\}  
  
\$pnames = NRefOb(\$detail)."details:default:pnames";  
for(i = 0; i \< sizeof(\$pnames); i++) \{  
    Set(\$this, \$detailName + ":pname:" + \$pnames[i], TRUE);  
\}  
  
\$adjectives = NRefOb(\$detail)."details:default:adjectives";  
for(i = 0; i \< sizeof(\$adjectives); i++) \{  
    Set(\$this, \$detailName + ":adjective:" + \$adjectives[i], TRUE);  
\}  
  
Set(\$this, \$detailName + ":prepositions:close to", TRUE);  
Set(\$this, \$detailName + ":prepositions:against", TRUE);  
Set(\$this, \$detailName + ":prepositions:under", TRUE);  
Set(\$this, \$detailName + ":prepositions:in", TRUE);  
Set(\$this, \$detailName + ":prepositions:near", TRUE);  
Set(\$this, \$detailName + ":prepositions:over", TRUE);  
Set(\$this, \$detailName + ":prepositions:behind", TRUE);  
Set(\$this, \$detailName + ":prepositions:before", TRUE);  
Set(\$this, \$detailName + ":prepositions:beside", TRUE);  
Set(\$this, \$detailName + ":prepositions:on", TRUE);  
  
/* Save the object data */  
Set(\$this, \$detailName, (\{ NRefOb(\$detail)."core:ur:parent", Get(NRefOb(\$detail), "*") \}));  
 
\$detailName = replace_strings(\$detailName, "details:", "");  
Set(\$this, "pattern:" + \$detailName, NRefOb(\$detail)."pattern:default");  
Set(\$this, "pattern:" + \$detailName + ":baseunit", NRefOb(\$detail)."pattern:baseunit");  
Set(\$this, "pattern:" + \$detailName + ":resource", NRefOb(\$detail)."pattern:resource");  
Set(\$this, "pattern:" + \$detailName + ":unitname", NRefOb(\$detail)."pattern:unitname");  
Set(\$this, "trait:" + \$detailName + ":brief", NRefOb(\$detail)."trait:brief");  
Set(\$this, "trait:" + \$detailName + ":type", NRefOb(\$detail)."pattern:type");  
Set(\$this, "trait:" + \$detailName + ":cost", NRefOb(\$detail)."pattern:cost");  
  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:getpages">
         X[M] if(!\$this."base:details:local") \{
    return "It is currently empty.";
\}

if(!sizeof(\$this."base:details:local")) \{
    return "It is currently empty.";
\}

\$pages = \$this."base:details:local";
\$temp = (\{ \});

for(\$i = 0; \$i \< sizeof(\$pages); \$i++) \{
    \$temp += (\{ Describe(NewNRef(\$this, \$pages[\$i])) \});
\}

return "It holds the following patterns: " + implode(\$temp, ", ") + ".";
      </Core:Property>
      <Core:Property property="merry:lib:remove_detail">
         X[M] int i;  
  
\$detailName = "details:" + \$detail;  
  
Set(\$this, \$detailName + ":description:brief:local", nil);  
Set(\$this, \$detailName + ":description:look:local", nil);  
Set(\$this, \$detailName + ":description:examine:local", nil);  
  
\$snames = Get(NRefOb(\$this), \$detailName + ":snames");  
for(i = 0; i \< sizeof(\$snames); i++) \{  
    Set(\$this, \$detailName + ":sname:" + \$snames[i], FALSE);  
\}  
  
\$pnames = Get(NRefOb(\$this), \$detailName + ":pnames");  
for(i = 0; i \< sizeof(\$pnames); i++) \{  
    Set(\$this, \$detailName + ":pname:" + \$pnames[i], FALSE);  
\}  
Set(\$this, \$detailName + ":pnames", nil);  
Set(\$this, \$detailName + ":pnames:local", nil);  
  
\$adjectives = Get(NRefOb(\$this), \$detailName + ":adjectives");  
for(i = 0; i \< sizeof(\$adjectives); i++) \{  
    Set(\$this, \$detailName + ":adjective:" + \$adjectives[i], FALSE);  
\}  
Set(\$this, \$detailName + ":adjectives", nil);  
Set(\$this, \$detailName + ":adjectives:local", nil);  
  
\$data = Get(\$this, \$detailName);  
  
\$ob = Spawn(\$data[0]);  
\$properties = \$data[1];  
\$temp = map_indices(\$properties);  
for(i = 0; i \< sizeof(\$temp); i++) \{  
    Set(\$ob, \$temp[i], \$properties[\$temp[i]]);  
\}  
\$ob."base:environment" = \$actor;  
  
\$detailName = replace_strings(\$detailName, "details:", "");  
Set(\$this, "details:" + \$detailName, nil);  
Set(\$this, "pattern:" + \$detailName, nil);  
Set(\$this, "pattern:" + \$detailName + ":baseunit", nil);  
Set(\$this, "pattern:" + \$detailName + ":resource", nil);  
Set(\$this, "pattern:" + \$detailName + ":unitname", nil);  
Set(\$this, "trait:" + \$detailName + ":brief", nil);  
Set(\$this, "trait:" + \$detailName + ":type", nil);  
Set(\$this, "trait:" + \$detailName + ":cost", nil);  
  
return \$ob;
      </Core:Property>
      <Core:Property property="merry:react-pre:label-dob">
         X[M] if(!\$evoke \|\| \$evoke == "") \{  
    EmitTo(\$actor, "What did you want to label your folder as?");  
    return FALSE;  
\}  
  
if(\$this."trait:label") \{  
    \$adjectives = explode(\$this."trait:label", " ");  
  
    for(\$i = 0; \$i \< sizeof(\$adjectives); \$i++) \{  
        Set(\$this, "details:default:adjective:" + \$adjectives[\$i], FALSE);  
    \}  
\}  
  
\$this."trait:label" = replace_strings(\$evoke, "\\"", "");  
  
\$adjectives = explode(\$this."trait:label", " ");  
  
for(\$i = 0; \$i \< sizeof(\$adjectives); \$i++) \{  
    Set(\$this, "details:default:adjective:" + \$adjectives[\$i], TRUE);  
\}  
  
\$evoke = nil;  
  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:place-where">
         X[M] object what;  
  
  
if( sizeof( \$what ) != 1 ) \{  
  EmitTo( \$actor, "You may only place one thing into the folder at a time." );  
  return FALSE;  
\}  
  
what = NRefOb(\$what[0]);  
  
if (what."trait:objecttype" != "pattern") \{  
  EmitTo(\$actor, "You cannot put that in your pattern folder.");  
  return FALSE;  
\}  
  
if( what."base:holder" != \$actor \|\| this."base:holder" != \$actor ) \{  
  EmitTo( \$actor, "You need to be holding " + Describe(what, nil, nil, 3) + " and the folder to do this." );  
  return FALSE;  
\}  
  
if(::add_detail(\$detail: what)) \{  
    EmitTo(\$actor, "You add the contents of " + Describe(what, nil, \$actor) + " to " + Describe(this, nil, \$actor) + "." );  
    EmitIn(\$actor."base:environment", Describe(\$actor) + " adds the contents of " + Describe(what, \$actor) + " to " + Describe(this, \$actor) + ".", \$actor);  
  
    Slay(what);  
\}  
  
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react:pull-dob">
         X[M] Social(\$actor, "pull", \$adverb, \$(raw-evoke), "from", \$target);
      </Core:Property>
      <Core:Property property="merry:react:pull-iob">
         X[M] object ob; 
string detail; 
 
if(sizeof(\$dob) \> 1) \{ 
    EmitTo(\$actor, "You can only pull one pattern at a time."); 
    return FALSE; 
\} 
 
ob = NRefOb(\$dob[0]); 
detail = NRefDetail(\$dob[0]); 
 
if(detail != "default" \&\& \$this."trading:seller") \{ 
    EmitTo(\$actor, "You cannot take anything from " + Describe(\$this) + " while it is for sale."); 
    return FALSE; 
\} 
 
if(ob."base:environment" != \$actor \&\& ob."base:environment" != \$actor."base:environment" \|\| \$this."base:integration") \{ 
    \$env = ob."base:environment"; 
    \$found = 0; 
    while(\$env \&\& !\$found) \{ 
        if(\$env."base:environment" \&\& \$env."base:environment"."udat:possessed" \&\& \$env."base:environment" != \$actor) \{ 
            \$env = nil; 
        \} else \{ 
            if(\$env."base:environment" == \$actor \|\| \$env."base:environment" == \$actor."base:environment") \{ 
                \$found = 1; 
            \} else \{ 
                \$env = \$env."base:environment"; 
            \} 
        \} 
    \} 
 
    if(!\$found) \{ 
        EmitTo(\$actor, "You cannot take " + Describe(\$pattern) + " because it is not yours."); 
        return FALSE; 
    \} 
\} 
 
if(detail == "default") return TRUE; 
 
if(!Get(\$this, "details:" + detail)) return TRUE; 
 
\$pattern = NewNRef(::remove_detail(\$detail: detail), "default"); 
 
EmitTo(\$actor, TAG("You take " + Describe(\$pattern, nil, nil, STYLE_NONPOSS) + " from " + Describe(\$this, nil, nil, STYLE_NONPOSS) + ".", "social:first")); 
EmitIn(\$actor."base:environment", TAG(Describe(\$actor) + " takes " + Describe(\$pattern, nil, nil, STYLE_NONPOSS) + " from " + Describe(\$this, nil, nil, STYLE_NONPOSS) + ".", "social:third"), \$actor);
      </Core:Property>
      <Core:Property property="merry:react:study-dob">
         X[M] ::study_pre();  
  
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react:study-iob">
         X[M] ::study_pre();  
  
return FALSE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:color">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:color:desc">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:material">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1562368708, "jominey", "E", 1562369268, "jominey", "E", 1562369527, "jominey", "E", 1562369967, "jominey", "E", 1562370017, "jominey", "E", 1562370036, "jominey", "E", 1562371713, "jominey", "E", 1562517160, "jominey", "X", 1562724898, "jominey", "E", 1562724911, "jominey", "K", 1562724992, "jominey", "K", 1562725100, "jominey", "E", 1562725258, "jominey", "E", 1562725477, "jominey", "E", 1562725510, "jominey", "E", 1562725557, "jominey", "E", 1562725591, "jominey", "E", 1562725637, "jominey", "K", 1562725652, "jominey", "K", 1562725687, "jominey", "K" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
