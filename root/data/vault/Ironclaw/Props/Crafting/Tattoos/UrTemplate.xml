<object clone="/base/obj/thing" owner="tonyd">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Allegory:Props:Crafting:UrCrafting)"/>
    <Base:Bulk immobile="false" mass="0.2" density="1.1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="template"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="templates"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="tattoo"/>
          <Base:Adjective adjective="unattached"/>
          <Base:Adjective adjective="unused"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             {? | $(this.used) | $(this.bandage:used) } {? equal | $(this.trait:color) | none || $(this.trait:color) } {? equal | $(this.trait:material) | none || $(this.trait:material) } tattoo template
          </Base:Description>
          <Base:Description type="examine">
             A {? equal | $(this.trait:color) | none || $(this.trait:color) } {? equal | $(this.trait:material) | none || $(this.trait:material) } tattoo template. This is a picture that can be placed on a bodypart, then tattooed through to draw a picture in their skin.
<sbr/>This template is $(this.symbol:tattoo).
<sbr/>
$(this.quality_description)
<sbr/>
[OOC: To use the tattoo template APPLY it to someone's body part]
          </Base:Description>
          <Base:Description type="look">
             A {? equal | $(this.trait:color) | none || $(this.trait:color) } {? equal | $(this.trait:material) | none || $(this.trait:material) } tattoo template.
<sbr/>This template is $(this.symbol:tattoo).
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:symbol:tattoo">
         "an ink drawing"
      </Core:Property>
      <Core:Property property="export:symbol:tattoo:adjective">
         "tattooed"
      </Core:Property>
      <Core:Property property="merry:react-post:apply-dob">
         X[M] /* set the body part to be bandaged */
object victim;
string detail, tattoo;

/* sanity checking already done in the pre script */

victim = NRefOb(\$iob[0]);
detail = NRefDetail(\$iob[0]);

/* what does the tattoo look like? */
tattoo = "It has been "+this."symbol:tattoo:adjective"+" with "+replace_strings(this."symbol:tattoo", "[bodypart]", Describe(\$iob[0], victim));

/* is there ink being used */
  /* NOT FINISHED */

tattoo += ".";

/* emote the tattooing */
EmitTo(\$actor, "You trace through "+Describe(this, nil, \$actor)+", marking "+Describe(\$iob[0])+".");
EmitTo(victim, Describe(\$actor)+" traces through "+Describe(this, \$actor)+", marking "+Describe(\$iob[0], nil, victim)+".");
EmitIn(victim."base:environment", Describe(\$actor)+" traces through "+Describe(this, \$actor)+", marking "+Describe(\$iob[0])+".", \$actor, victim);

/* mark this detail as tattood */
Set(victim, "appearance:symbol:"+detail, tattoo);
Set(victim, "appearance:symbol:"+detail+":adjective", this."symbol:tattoo:adjective");
Set(victim, "details:"+detail+":adjective:"+this."symbol:tattoo:adjective", TRUE);
Set(victim, "details:"+detail+":sname:tattoo", TRUE);
Set(victim, "details:"+detail+":pname:tattoos", TRUE);

/* and the drawing has now been used. So slay it */
Slay(this);

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:apply-dob">
         X[M] /* check that they are applying the tattoo to a valid target */

if(\$this."base:environment" != \$actor) \{
  EmitTo(\$actor, "You must be holding "+Describe(this)+" to apply it.");
  return FALSE;
\}

/* check that they are applying it to only one thing */
if(\$iob \&\& (sizeof(\$iob) == 1)) \{
  /* check they are targetting a character */
  if(!NRefOb(\$iob[0])."udat:possessed") \{
    EmitTo(\$actor, "You can't apply a "+Describe(this, nil, \$actor)+" to "+Describe(\$iob[0])+".");
    return FALSE;
  \}
  /* check they aren't tattooing themselves */
  if(NRefOb(\$iob[0]) == \$actor) \{
    EmitTo(\$actor, "You're not seriously going to try tattooing yourself, are you?");
    return FALSE;
  \}
  /* check they aren't targetting the default detail */
  if(NRefDetail(\$iob[0]) == "default") \{
    EmitTo(\$actor, "What body part do you intend to apply "+Describe(this, nil, \$actor)+" to?");
    return FALSE;
  \}
  /* check that they don't already have a bandage */
  if(typeof(Get(NRefOb(\$iob[0]), "combat:injury:"+NRefDetail(\$iob[0])+":bandaged")) != T_NIL) \{
    EmitTo(\$actor, Describe(\$iob[0], nil, \$actor)+" is covered by a bandage.");
    return FALSE;
  \}
  /* check that they don't already have a tattoo */
  if(typeof(Get(NRefOb(\$iob[0]), "appearance:symbol:"+NRefDetail(\$iob[0]))) != T_NIL) \{
    EmitTo(\$actor, Describe(\$iob[0], nil, \$actor)+" is already marked.");
    return FALSE;
  \}
  return TRUE;
\} else if(\$iob \&\& (sizeof(\$iob) \>= 1)) \{
  EmitTo( \$actor, "You may only apply " +Describe(this, nil, \$actor)+" to one person at a time." );
  return FALSE;
\} else \{
  EmitTo( \$actor, "What do you intend to apply " +Describe(this, nil, \$actor)+" to?" );
  return FALSE;
\}
return FALSE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:color">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:material">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1136918318, "tunk_bodin", "X", 1136919197, "tunk_bodin", "X", 1136919344, "tunk_bodin", "X", 1136919394, "tunk_bodin", "X", 1136919690, "tunk_bodin", "X", 1136920422, "tunk_bodin", "X", 1136920516, "tunk_bodin", "X", 1136920555, "tunk_bodin", "X", 1136922002, "tunk_bodin", "X", 1136922056, "tunk_bodin", "X", 1136922338, "tunk_bodin", "X", 1136922394, "tunk_bodin", "X", 1136922424, "tunk_bodin", "X", 1136922677, "tunk_bodin", "X", 1137313273, "tunk_bodin", "X", 1137313416, "tunk_bodin", "X", 1137313484, "tunk_bodin", "X", 1139071080, "tunk_bodin", "X", 1140280344, "tunk_bodin", "X", 1140280599, "tunk_bodin", "X", 1140280819, "tunk_bodin", "X", 1140280887, "tunk_bodin", "X", 1140280932, "tunk_bodin", "X", 1140280955, "tunk_bodin", "X", 1141789424, "tonyd", "P", 1145815356, "tunk_bodin", "X", 1145815474, "tunk_bodin", "X", 1145815588, "tunk_bodin", "X", 1146119946, "sinistrelle", "E", 1146120021, "sinistrelle", "E", 1146205797, "sinistrelle", "X", 1150561727, "tunk_bodin", "X", 1167629205, "tonyd", "E", 1189257171, "tonyd", "P", 1189257181, "tonyd", "P", 1189257553, "tonyd", "P", 1189257837, "tonyd", "P", 1189257855, "tonyd", "P", 1189257879, "tonyd", "P", 1189257956, "tonyd", "P", 1189257992, "tonyd", "P", 1189258010, "tonyd", "P", 1189258561, "tonyd", "P", 1189258575, "tonyd", "P", 1189258949, "tonyd", "P", 1189259077, "tonyd", "P", 1189259205, "tonyd", "P", 1189259671, "tonyd", "P", 1189259743, "tonyd", "P", 1189259883, "tonyd", "P", 1189336124, "tonyd", "P", 1189336186, "tonyd", "P", 1189336218, "tonyd", "P", 1189336270, "tonyd", "P", 1189336670, "tonyd", "P", 1189336850, "tonyd", "P", 1189336865, "tonyd", "P", 1189337011, "tonyd", "P", 1189337084, "tonyd", "P", 1189337106, "tonyd", "P", 1189337122, "tonyd", "P", 1189337142, "tonyd", "P", 1189337511, "tonyd", "P", 1189337529, "tonyd", "P", 1189337562, "tonyd", "P", 1189337634, "tonyd", "P", 1189337710, "tonyd", "P", 1189338076, "tonyd", "P", 1189338373, "tonyd", "P", 1189338436, "tonyd", "P", 1189338622, "tonyd", "P", 1189338645, "tonyd", "P", 1189343612, "tonyd", "P", 1189345600, "tonyd", "P", 1189345685, "tonyd", "P", 1189345714, "tonyd", "E", 1189345726, "tonyd", "E", 1189345803, "tonyd", "E", 1189345818, "tonyd", "E", 1189345921, "tonyd", "E", 1189345982, "tonyd", "R", 1189345989, "tonyd", "E", 1189346385, "tonyd", "P", 1189346497, "tonyd", "P", 1189346710, "tonyd", "R", 1189403444, "tonyd", "R", 1189420961, "tonyd", "E", 1189421058, "tonyd", "E", 1189421099, "tonyd", "E", 1189421375, "tonyd", "E", 1189421534, "tonyd", "E", 1189422686, "tonyd", "E", 1189422840, "tonyd", "E", 1189422850, "tonyd", "E", 1189422858, "tonyd", "E", 1189422865, "tonyd", "E", 1189423135, "tonyd", "E", 1189423975, "tonyd", "E", 1189425997, "tonyd", "P", 1189428371, "tonyd", "P", 1189428408, "tonyd", "P", 1195983018, "tonyd", "X", 1195983139, "tonyd", "E", 1195984337, "tonyd", "P", 1195984367, "tonyd", "P", 1195984513, "tonyd", "P", 1195985272, "tonyd", "P", 1195985397, "tonyd", "P", 1195985453, "tonyd", "P", 1195985593, "tonyd", "E", 1195985621, "tonyd", "P", 1195985860, "tonyd", "P", 1195985943, "tonyd", "P", 1195985980, "tonyd", "P", 1195986247, "tonyd", "P", 1195986660, "tonyd", "P", 1195986932, "tonyd", "P", 1195987005, "tonyd", "P", 1195991780, "tonyd", "R", 1197685489, "tonyd", "E", 1326684520, "tonyd", "P", 1326684537, "tonyd", "P", 1326684694, "tonyd", "P", 1326684733, "tonyd", "P", 1326684871, "tonyd", "P", 1348443367, "jominey", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
