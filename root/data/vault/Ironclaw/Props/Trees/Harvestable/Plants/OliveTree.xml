<object clone="/base/obj/thing" owner="slurpeeslurp">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="0.5" density="2"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="false" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="plant"/>
            <Base:SName sname="tree"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="plants"/>
            <Base:PName pname="trees"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="fruit"/>
          <Base:Adjective adjective="large"/>
          <Base:Adjective adjective="olive"/>
          <Base:Adjective adjective="small"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             olive tree
          </Base:Description>
          <Base:Description type="examine">
             The olive tree is a small tree reaching 15 feet tall. It has large, flat, light green leaves and medium-sized fruit.
<sbr/>
This tree has $[if($this."trait:quantity" == 0) { return "no olives"; } else if ($this."trait:quantity" == 1) { return "one olive"; } else { return desc_cardinal($this."trait:quantity")+ " olives"; }] ready to be harvested.
          </Base:Description>
          <Base:Description type="look">
             The olive tree stands about 15 feet tall and bears medium-sized fruit.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="10"/>
      <Base:MaxFatigue value="100"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:trait:quantity">
         30
      </Core:Property>
      <Core:Property property="merry:react:harvest-dob">
         X[M] /* check there are olives available */              
if(\$this."trait:quantity" \< 1) \{              
  EmitTo(\$actor, "There are no harvestable olives on "+Describe(\$this)+".");              
  return FALSE;              
\}              
              
/* reduce the number of olives on the plant */              
\$this."trait:quantity" -= 1;              
              
/* create the olive object and give it to the player */              
\$object = Spawn(\$\{Allegory:Props:Food:Vegetables:OliveFruit\}); \$object."base:environment" = \$actor;              
              
/* emit message to player and room */              
EmitTo(\$actor, "You harvest "+Describe(\$object, nil, nil, STYLE_NONPOSS)+" from "+Describe(\$this, nil, nil, STYLE_NONPOSS)+".");              
EmitIn(\$actor."base:environment", Describe(\$actor)+" harvests "+Describe(\$object, nil, nil, STYLE_NONPOSS)+" from "+Describe(\$this, nil, nil, STYLE_NONPOSS)+".", \$actor);              
              
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react:pick-dob">
         X[M] /* check there are olives available */              
if(\$this."trait:quantity" \< 1) \{              
  EmitTo(\$actor, "There are no harvestable olives on "+Describe(\$this)+".");              
  return FALSE;              
\}              
              
/* reduce the number of olives on the plant */              
\$this."trait:quantity" -= 1;              
              
/* create the olive object and give it to the player */              
\$object = Spawn(\$\{Allegory:Props:Food:Vegetables:OliveFruit\}); \$object."base:environment" = \$actor;              
              
/* emit message to player and room */              
EmitTo(\$actor, "You harvest "+Describe(\$object, nil, nil, STYLE_NONPOSS)+" from "+Describe(\$this, nil, nil, STYLE_NONPOSS)+".");              
EmitIn(\$actor."base:environment", Describe(\$actor)+" harvests "+Describe(\$object, nil, nil, STYLE_NONPOSS)+" from "+Describe(\$this, nil, nil, STYLE_NONPOSS)+".", \$actor);              
              
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react:smell-dob">
         X[M] EmitTo( \$actor, "" );                        
                        
\$room = \$actor."base:environment";                        
EmitTo( \$actor, "The olive tree smells mellow and somehow fragrant." );                        
EmitIn( \$room, Describe ( \$actor ) + " smells " + Describe( \$target ) + ".", \$actor );
      </Core:Property>
      <Core:Property property="merry:react:sniff-dob">
         X[M] EmitTo( \$actor, "" );                        
                        
\$room = \$actor."base:environment";                        
EmitTo( \$actor, "The olive tree smells mellow and somehow fragrant." );                        
EmitIn( \$room, Describe ( \$actor ) + " sniffs " + Describe( \$target ) + ".", \$actor );
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:quantity">
         X[M] /* stop when we hit 30 olives on the plant */              
if(\$this."trait:quantity" \>= 30) return TRUE;              
              
/* wait a while, then add an olive  */              
\$delay((2*24*60), TRUE, "9d85");              
if(\$this."trait:quantity" \< 15)              
  \$this."trait:quantity" += 1;              
              
return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1127066338, "tunk_bodin", "X", 1127066796, "tunk_bodin", "X", 1127066933, "tunk_bodin", "X", 1127066998, "tunk_bodin", "X", 1127070096, "tunk_bodin", "X", 1127070349, "tunk_bodin", "X", 1127677331, "tunk_bodin", "X", 1127677752, "tunk_bodin", "X", 1127678161, "tunk_bodin", "X", 1127678415, "tunk_bodin", "X", 1127678803, "tunk_bodin", "X", 1127678849, "tunk_bodin", "X", 1127678871, "tunk_bodin", "E", 1128697418, "tunk_bodin", "X", 1128701343, "tunk_bodin", "X", 1128712701, "tunk_bodin", "X", 1128712882, "tunk_bodin", "X", 1128895782, "tunk_bodin", "X", 1132028668, "tunk_bodin", "X", 1133114402, "tunk_bodin", "X", 1133115051, "tunk_bodin", "X", 1133126405, "tunk_bodin", "X", 1133126453, "tunk_bodin", "X", 1133127448, "tunk_bodin", "X", 1133127911, "tunk_bodin", "X", 1137670493, "rhenn", "E", 1168399003, "tunk_bodin", "X", 1168599641, "tonyd", "E", 1175838309, "necate", "E", 1230096340, "slurpeeslurp", "E", 1230096498, "slurpeeslurp", "E", 1230096993, "slurpeeslurp", "E", 1230097391, "slurpeeslurp", "E", 1230097502, "slurpeeslurp", "E", 1230097873, "slurpeeslurp", "E", 1253035211, "balkaar", "E", 1315423833, "morwenlorelie", "R", 1327973140, "jominey", "R", 1347228877, "jominey", "R", 1347232293, "jominey", "R", 1347246942, "jominey", "R", 1347247470, "jominey", "R" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">100.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
