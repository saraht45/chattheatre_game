<object clone="/base/obj/thing" owner="lidiab">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(IronClaw:Props:Furniture:UrObject)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="standing" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="false" inside="true" near="true" over="false" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="tent"/>
            <Base:SName sname="structure"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="tents"/>
            <Base:PName pname="structures"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="impregnated"/>
          <Base:Adjective adjective="soldier"/>
          <Base:Adjective adjective="tall"/>
          <Base:Adjective adjective="wooden"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             {? | $(this.trait:embroidery) | {? | $(this.trait:embroidery:pattern) | $(this.trait:embroidery:pattern)} embroidered } $(this.trait:color) $(this.trait:material) soldier tent
          </Base:Description>
          <Base:Description type="examine">
             A soldier tent. A portable structure crafted from impregnated $(this.trait:color) $(this.trait:material) fabric and supported from within by a framework of poles. It has two masts which give the tent a height of six and one half feet, combined with a horizontal pole - five and a half feet in length for additional stability. The fabric of the tent flares outward from the narrow top to take the rough shape of a trapezoid. Loops line the reinforced bottom edge of the tent as a means of being secured to the ground via pins in place of guy ropes, with an oval entrance at the front which can be closed by use of the curtain provided. {? | $(this.trait:embroidery) | $(this.trait:embroidery)} <makers-mark/><br/><quality-full/>
          </Base:Description>
          <Base:Description type="look">
             A soldier tent crafted from impregnated $(this.trait:color) $(this.trait:material) fabric. It stands two meters tall with an oval entrance that closes via a curtain. {? | $(this.trait:embroidery) | $(this.trait:embroidery)}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="curtain" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="curtain"/>
            <Base:SName sname="drape"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="curtains"/>
            <Base:PName pname="drapes"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="matching"/>
          <Base:Adjective adjective="tent"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the matching curtain of the $(this.trait:material) tent
          </Base:Description>
          <Base:Description type="examine">
             A curtain made from $(this.trait:color) $(this.trait:material) drapes across the oval entrance of this tent.
          </Base:Description>
          <Base:Description type="look">
             A curtain made from $(this.trait:color) $(this.trait:material) drapes across the oval entrance of this tent.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="entrance" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="entrance"/>
            <Base:SName sname="flap"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="entrances"/>
            <Base:PName pname="flaps"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="oval"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             oval entrance to the $(this.trait:color) $(this.trait:material) tent
          </Base:Description>
          <Base:Description type="examine">
             An oval entrance in the front of the $(this.trait:color) $(this.trait:material) tent. It closes via the matching curtain provided.
          </Base:Description>
          <Base:Description type="look">
             An oval entrance in the front of the $(this.trait:color) $(this.trait:material) tent.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="loops" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="loop"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="loops"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="metal"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the metal loops of the $(this.trait:material) tent
          </Base:Description>
          <Base:Description type="examine">
             Metal loops line the reinforced bottom edge of the $(this.trait:color) $(this.trait:material) tent as a means of being secured to the ground via pins.
          </Base:Description>
          <Base:Description type="look">
             Metal loops line the reinforced bottom edge of the $(this.trait:color) $(this.trait:material) tent as a means of being secured to the ground via pins.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="poles" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="pole"/>
            <Base:SName sname="beam"/>
            <Base:SName sname="frame"/>
            <Base:SName sname="framework"/>
            <Base:SName sname="mast"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="poles"/>
            <Base:PName pname="beams"/>
            <Base:PName pname="frames"/>
            <Base:PName pname="frameworks"/>
            <Base:PName pname="masts"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="internal"/>
          <Base:Adjective adjective="support"/>
          <Base:Adjective adjective="tall"/>
          <Base:Adjective adjective="wooden"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the framework poles of the $(this.trait:color) $(this.trait:material) soldier tent
          </Base:Description>
          <Base:Description type="examine">
             Two masts, one to each side, are pieced together to support a horizontal pole above and across the center of this tent to form the internal framework that keeps this tent erected. The poles support the overlying fabric to take the shape of a roughly trapezoidal structure.
          </Base:Description>
          <Base:Description type="look">
             Two masts and one horizontal rod piece together to form the internal framework of this tent.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="merry:react:embroider-dob">
         X[M] /* embroider clothes */    
    
object database;    
database = \$\{Allegory:Lib:Crafting:Clothing:EmbroideryDB\};    
    
/* sanity check */    
if(this."trait:embroidery:pattern") \{    
 EmitTo(\$actor, Describe(\$this, nil, \$actor) + " is already embroidered.");    
 return TRUE;    
\}    
    
if(sizeof(\$dob) != 1) \{    
 EmitTo(\$actor, "Please only attempt to embroider one garment at a time.");    
 return FALSE;    
\}    
    
if(!\$using) \{    
 EmitTo(\$actor, "You need some thread to embroider with.");    
 return FALSE;    
\}    
    
if(sizeof(\$using) != 1) \{    
 EmitTo(\$actor, "You can only work with one spool of thread at a time.");    
 return FALSE;    
\}    
    
\$thread = NRefOb(\$using[0]);    
if(!\$thread."trait:objecttype" \&\& \$thread.objecttype != "thread") \{    
 EmitTo(\$actor, "You can only embroider " + Describe(\$this, nil, \$actor) + " with thread.");    
 return FALSE;    
\}    
    
if(this."base:worn-by") \{    
 EmitTo(\$actor, "How can you embroider " + Describe(this, nil, \$actor) + " while someone is wearing it?");    
 return FALSE;    
\}    
    
if(\$this."base:environment" != \$actor) \{    
 EmitTo(\$actor, "You must be holding " + Describe(\$this, nil, \$actor) + " to embroider it.");    
 return FALSE;    
\}    
    
\$skill = Int(\$actor."skill:career:needleworker");    
    
/* \$skill = Int(\$actor."skill:alteration:tailoring")+Int(\$actor."career:alteration:tailoring"); */    
    
if(\$(raw-evoke)) \{    
 \$tmp = Get(database, \$(raw-evoke));    
 if(\$tmp) \{    
  /* found a change to make */    
  if(\$tmp["skill"] \&\& \$tmp["skill"] \> \$skill) \{    
   EmitTo(\$actor, "You don't have enough skill to embroider " + Describe(this, nil, \$actor) + " in that way.");    
   return FALSE;    
  \}    
    
  if(\$tmp["design"]) \{    
   \$design = \$tmp["design"];    
  \} else \{    
   \$design = "It has been embroidered with a " + \$(raw-evoke) + " design.";    
  \}    
    
  /* no further objections. Make the change. */    
  EmitTo(\$actor, "You embroider " + Describe(this, nil, \$actor) + " with a "+\$(raw-evoke) + " pattern using " + Describe(\$thread, nil, \$actor) + ".");    
  EmitIn(\$actor."base:environment", Describe(\$actor) + " embroiders " + Describe(this, \$actor) + " with a " + \$(raw-evoke) + " pattern using " + Describe(\$thread, \$actor) + ".", \$actor);    
    
  /* set the embroidery */    
  this."trait:embroidery:pattern" = \$(raw-evoke);    
  this."trait:embroidery" = replace_strings(\$design, "COLOR", Get(\$thread, "trait:color") + " " + Get(\$thread, "trait:material"));    
    
  \$thread."trait:quantity" -= 10;    
    
  /* and set the adjectives */    
  \$words = explode(\$(raw-evoke), " ");    
  for(\$i = 0; \$i \< sizeof(\$words); \$i++)    
   Set(this, "details:default:adjective:" + lower_case(\$words[\$i]) + ":local", 1);    
    
  return FALSE;    
 \}    
\}    
    
/* list embroidery options */    
\$options = (\{ \});    
\$tmp = Get(database, "*");    
\$indices = map_indices(\$tmp);    
\$indices -= (\{ "revisions" \});    
    
for(\$i=0;\$i\<sizeof(\$indices);\$i++) \{    
 if(typeof(\$tmp[\$indices[\$i]]) == T_MAPPING \&\& (!\$tmp[\$indices[\$i]]["skill"] \|\| Int(\$tmp[\$indices[\$i]]["skill"]) \<= \$skill)) \{    
  \$options \|= (\{ \$indices[\$i] \});    
 \}    
\}    
    
if(!sizeof(\$options)) \{    
 EmitTo(\$actor, "You don't know how to embroider " + Describe(this, nil, \$actor) + ".");    
 return FALSE;    
\}    
    
EmitTo(\$actor, "To embroider clothing, it must not be worn. Then the command is:");    
EmitTo(\$actor, "embroider " + Describe(this) + " 'PATTERN");    
EmitTo(\$actor, "Your pattern options are: " + implode(\$options, ", "));    
    
return FALSE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1369528555, "meandmine", "X", 1369528835, "meandmine", "K", 1414922564, "pp74", "K", 1414922593, "pp74", "K", 1445453682, "dmwtst", "R", 1519284992, "lidiab", "E", 1562007649, "sendnoodlez", "R" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
