<object clone="/base/obj/thing" owner="SkotOS">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Allegory:Props:Crafting:UrCrafting)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="garment"/>
            <Base:SName sname="clothing"/>
            <Base:SName sname="garb"/>
            <Base:SName sname="thing"/>
            <Base:SName sname="item"/>
            <Base:SName sname="everything"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="clothes"/>
            <Base:PName pname="clothings"/>
            <Base:PName pname="garments"/>
            <Base:PName pname="items"/>
            <Base:PName pname="stuff"/>
            <Base:PName pname="things"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             pair of {? equal | $(this.trait:fittedto) | $(this.base:worn-by) | $(this.trait:fit) } {? equal | $(this.trait:color) | none || $(this.trait:color) } {? | $(this.trait:embroidery) | {? | $(this.trait:embroidery:pattern) | $(this.trait:embroidery:pattern)} embroidered } {? equal | $(this.trait:type) | none || $(this.trait:type)-feathered }  $(this.trait:brief)
          </Base:Description>
          <Base:Description type="examine">
             A pair of {? equal | $(this.trait:fittedto) | $(this.base:worn-by) | $(this.trait:fit) } {? equal | $(this.trait:color) | none | {? equal | $(this.trait:type) | none | plain | $(this.trait:type) } | $(this.trait:color) {? equal | $(this.trait:type) | none || $(this.trait:type)-feathered } } $(this.trait:brief). $(this.trait:examine) {? | $(this.trait:embroidery) | $(this.trait:embroidery)} <makers-mark/> <sbr/> $(this.quality_description)
          </Base:Description>
          <Base:Description type="look">
             A pair of {? equal | $(this.trait:fittedto) | $(this.base:worn-by) | $(this.trait:fit) } {? equal | $(this.trait:color) | none | {? equal | $(this.trait:type) | none | plain | $(this.trait:type) } | $(this.trait:color) {? equal | $(this.trait:type) | none || $(this.trait:type)-feathered } } $(this.trait:brief). $(this.trait:look) {? | $(this.trait:embroidery) | $(this.trait:embroidery)}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:alteration:add:default:dye">
         ([ "noslay":"true", "properties":(\{ (\{ "trait:color", "trait:color" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:nip:item:cost">
         1000
      </Core:Property>
      <Core:Property property="export:trait:basematerial">
         "feather"
      </Core:Property>
      <Core:Property property="export:trait:brief">
         "bloomers"
      </Core:Property>
      <Core:Property property="export:trait:superbrief">
         "bloomers"
      </Core:Property>
      <Core:Property property="merry:react:fit-dob">
         X[M] /* fitting the clothes to a specific person */  
  
object database;  
database = \$\{Allegory:Lib:Crafting:Clothing:FittingDB\};  
  
/* sanity check */  
if(this."trait:nofit") return TRUE;  
  
if(sizeof(\$dob) != 1) \{  
 EmitTo(\$actor, "Please only attempt to fit one garment at a time.");  
 return FALSE;  
\}  
  
if(!this."base:worn-by") \{  
 EmitTo(\$actor, "How can you fit "+Describe(this, nil, \$actor)+" while nobody is wearing it?");  
 return FALSE;  
\}  
  
if(FALSE \&\& this."base:worn-by" == \$actor) \{  
 EmitTo(\$actor, "You can't fit "+Describe(this, nil, \$actor)+" yourself! You'll need someone else to fit it for you.");  
 return FALSE;  
\}  
  
if(this."trait:fit") \{  
 if(this."base:worn-by" == this."trait:fittedto") \{  
  EmitTo(\$actor, Describe(this, nil, \$actor)+" has already been fitted.");  
  return FALSE;  
 \} else \{  
  this."trait:fittedto" = this."base:worn-by";  
  EmitTo(\$actor, "You adjust the size of "+Describe(this, nil, \$actor)+" to suit "+Describe(this."base:worn-by")+".");  
  EmitTo(this."base:worn-by", Describe(\$actor)+" adjusts the size of "+Describe(this, nil, this."base:worn-by")+" to suit you.");  
  EmitIn(\$actor."base:environment", Describe(\$actor)+" adjusts the size of "+Describe(this, nil, \$actor)+" to suit "+Describe(this."base:worn-by")+".", \$actor, this."base:worn-by");  
 \}  
\}  
  
\$skill1 = Int(\$actor."skill:career:tailor");  
\$skill2 = Int(\$actor."skill:career:seamstress");  
  
if(\$skill1 \>= \$skill2) \{  
    \$skill = \$skill1;  
\} else \{  
    \$skill = \$skill2;  
\}  
  
\$skill *= 2;  
  
/* \$skill = Int(\$actor."skill:alteration:tailoring")+Int(\$actor."career:alteration:tailoring"); */  
  
if(\$(raw-evoke)) \{  
 \$tmp = Get(database, \$(raw-evoke));  
 if(\$tmp) \{  
  /* found a change to make */  
  if(\$tmp["skill"] \&\& \$tmp["skill"] \> \$skill) \{  
   EmitTo(\$actor, "You don't have enough skill to tailor "+Describe(this, nil, \$actor)+" in that way.");  
   return FALSE;  
  \}  
  /* no further objections. Make the change. */  
  EmitTo(\$actor, "You adjust "+Describe(this, nil, \$actor)+" to be "+\$(raw-evoke)+".");  
  if (\$actor != this."base:worn-by") \{  
    EmitTo(this."base:worn-by", Describe(\$actor)+" adjusts "+Describe(this, nil, this."base:worn-by")+" to be "+\$(raw-evoke)+".");  
  \}  
  EmitIn(\$actor."base:environment", Describe(\$actor)+" adjusts "+Describe(this, \$actor)+" to be "+\$(raw-evoke)+".", \$actor, this."base:worn-by");  
  
  /* set the new fit */  
  this."trait:fit" = \$(raw-evoke);  
  this."trait:fittedto" = this."base:worn-by";  
  
  /* and set the adjectives */  
  \$words = explode(\$(raw-evoke), " ");  
  for(\$i = 0; \$i \< sizeof(\$words); \$i++)  
   Set(this, "details:default:adjective:" + lower_case(\$words[\$i])+":local", 1);  
  
  return FALSE;  
 \}  
\}  
  
/* list fitted options */  
\$options = (\{ \});  
\$tmp = Get(database, "*");  
\$indices = map_indices(\$tmp);  
\$indices -= (\{ "revisions" \});  
  
for(\$i=0;\$i\<sizeof(\$indices);\$i++) \{  
 if(typeof(\$tmp[\$indices[\$i]]) == T_MAPPING \&\& (!\$tmp[\$indices[\$i]]["skill"] \|\| Int(\$tmp[\$indices[\$i]]["skill"]) \<= \$skill)) \{  
  \$options \|= (\{ \$indices[\$i] \});  
 \}  
\}  
  
if(!sizeof(\$options)) \{  
 EmitTo(\$actor, "You don't know how to fit "+Describe(this, nil, \$actor)+".");  
 return FALSE;  
\}  
  
EmitTo(\$actor, "To fit clothing to someone specific, they must be wearing the clothing. Then the command is:");  
EmitTo(\$actor, "fit "+Describe(this)+" 'STYLE");  
EmitTo(\$actor, "Your style options are: "+implode(\$options, ", "));  
  
return FALSE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:color">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:material">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:type">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1144052085, "-", "SYNC", 1221752477, "???", "R", 1305996978, "morwenlorelie", "E", 1305997292, "morwenlorelie", "X", 1305997453, "morwenlorelie", "K", 1305997465, "morwenlorelie", "E", 1305999317, "morwenlorelie", "K" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
