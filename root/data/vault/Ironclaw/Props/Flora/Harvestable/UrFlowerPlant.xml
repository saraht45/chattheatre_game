<object clone="/base/obj/thing" owner="SkotOS">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Ironclaw:Props:Flora:Harvestable:UrHarvestablePlant)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="flower"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="examine">
             This $(this.trait:state) $(this.trait:color) $(this.trait:flowertype) $(this.trait:brief) is contained in a large red earthenware pot$[$message = nil;  if(this."gardening:lastpruned" && this."gardening:lastpruned"+60*60*16 > time()) {    /* recently pruned */    $message = ", and has been trimmed";   } else {    if(!$this."gardening:lastpruned" || this."gardening:lastpruned"+60*60*16*3 < time()) {      /* needs pruning */      $message = ", and has become overgrown";    }  }    if(this."gardening:lastwatered" && this."gardening:lastwatered"+60*60*16 > time()) {    /* recently pruned */    if(!$message) {      $message = ", and has been recently watered";    } else {      $message += " and recently watered";    }  } else {    if(!$this."gardening:lastwatered" || this."gardening:lastwatered"+60*60*16*3 < time()) {      /* needs watering */      if(!$message) {        $message = ", and is in need of watering";      } else {        $message += " and very dry";      }    }  }    if(this."gardening:lastfertilized" && this."gardening:lastfertilized"+60*60*16 > time()) {    /* recently fertilized */    if(!$message) {      $message = ", and has been fertilized";    } else {      $message += " and fertilized";    }  }    if(!$message) {    $message = ".";  } else {    $message += ".";  }  return $message;] <sbr/> The $(this.trait:brief) has $[if($this."trait:quantity" == 0) { return "no flowers"; } else if ($this."trait:quantity" == 1) { return "one flower"; } else { return desc_cardinal($this."trait:quantity")+ " flowers"; }] ready to be picked.
          </Base:Description>
          <Base:Description type="look">
             This $(this.trait:state) $(this.trait:color) $(this.trait:flowertype) $(this.trait:brief) is contained in a large red earthenware pot$[$message = nil;  if(this."gardening:lastpruned" && this."gardening:lastpruned"+60*60*16 > time()) {    /* recently pruned */    $message = ", and has been trimmed";   } else {    if(!$this."gardening:lastpruned" || this."gardening:lastpruned"+60*60*16*3 < time()) {      /* needs pruning */      $message = ", and has become overgrown";    }  }    if(this."gardening:lastwatered" && this."gardening:lastwatered"+60*60*16 > time()) {    /* recently pruned */    if(!$message) {      $message = ", and has been recently watered";    } else {      $message += " and recently watered";    }  } else {    if(!$this."gardening:lastwatered" || this."gardening:lastwatered"+60*60*16*3 < time()) {      /* needs watering */      if(!$message) {        $message = ", and is in need of watering";      } else {        $message += " and very dry";      }    }  }    if(this."gardening:lastfertilized" && this."gardening:lastfertilized"+60*60*16 > time()) {    /* recently fertilized */    if(!$message) {      $message = ", and has been fertilized";    } else {      $message += " and fertilized";    }  }    if(!$message) {    $message = ".";  } else {    $message += ".";  }  return $message;] <sbr/> The $(this.trait:brief) has $[if($this."trait:quantity" == 0) { return "no flowers"; } else if ($this."trait:quantity" == 1) { return "one flower"; } else { return desc_cardinal($this."trait:quantity")+ " flowers"; }] ready to be picked.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:decaydelay">
         172800
      </Core:Property>
      <Core:Property property="export:dewdrop:quantity">
         5
      </Core:Property>
      <Core:Property property="export:nip:item:cost">
         800
      </Core:Property>
      <Core:Property property="merry:act:start">
         X[M] /* pick a colour for the flowers */ 
 
/* if it's a rainbow plant, don't set only one colour or flower */ 
if(\$this."harvestable:rainbow") return TRUE; 
 
/* if it has a range of options, choose only one */ 
if(\$this."harvestable:properties") \{ 
  \$old = \$this."harvestable:properties"; 
  \$new = (\{ \}); 
  for(\$i=0;\$i\<sizeof(\$old);\$i++) \{ 
    \$item = (\{ \$old[\$i][0], \$old[\$i][random(sizeof(\$old[\$i])-1)+1] \}); 
    \$new += (\{ \$item \}); 
  \} 
  \$this."harvestable:properties" = \$new; 
\} 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:add-iob%fertilizer">
         X[M] /* check we are adding fertilizer */ 
if(!\$dob) return TRUE; 
 
\$fertilizer = nil; 
for(\$i=0;\$i\<sizeof(\$dob);\$i++) \{ 
  if(NRefOb(\$dob[\$i])."trait:objecttype" \&\& NRefOb(\$dob[\$i])."trait:objecttype" == "fertilizer") \{ 
    \$fertilizer = \$dob[\$i]; 
    break; 
  \} 
\} 
 
if(!\$fertilizer) return TRUE; 
 
if(!NRefOb(\$fertilizer)."trait:quantity" \|\| NRefOb(\$fertilizer)."trait:quantity" \< 1) \{ 
  EmitTo(\$actor, Describe(\$fertilizer, nil, \$actor)+" has run out."); 
  return TRUE; 
\} 
 
EmitTo(\$actor, "You spread "+Describe(\$fertilizer, nil, \$actor)+" around "+Describe(\$this, nil, \$actor)+"."); 
NRefOb(\$fertilizer)."trait:quantity"--; 
 
/* check when this plant was last fertilized */ 
if(this."gardening:lastfertilized" \&\& this."gardening:lastfertilized"+60*60*16 \> time()) \{ 
  /* already fertilized today */ 
  return TRUE; 
\} 
 
/* fertilizing plant */ 
this."gardening:lastfertilized" = time(); 
 
if(NRefOb(\$fertilizer)."trait:quality") \{ 
  \$result = NRefOb(\$fertilizer)."trait:quality"; 
\} else \{ 
  \$result = 1; 
\} 
 
if(\$result \> Int(this."trait:quality")) \{ 
  this."trait:quality" = Int(this."trait:quality") + 1; 
\} 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:pluck-dob">
         X[M] /* check what time it is */

if((time()/(60*60))%16 \<= 8) \{
    return FALSE;
\}

/* How much dew is on the plant right now? */
\$quantity = Int(\$this."dewdrop:quantity");

/* If there is none, don't let character gather more */
if(\$quantity \<= 0) \{
    EmitTo(\$actor, "There is not enough dew to gather right now.");
    return FALSE;
\}

/* Spawn a dewdrop and put it in chatter's inventory */
\$dewdrop = Spawn(\$\{Ironclaw:Props:Plot:Sylph:DewdropCollectable\});
\$dewdrop."base:environment" = \$actor;
EmitIn(\$actor."base:environment", Describe(\$actor)+ " collects a tiny droplet from " +Describe(\$this, nil, nil, STYLE_NONPOSS)+ ".", \$actor);      
EmitTo(\$actor, "You collect a tiny droplet from " +Describe(\$this, nil, nil, STYLE_NONPOSS)+ ".");

/* Decrement the dewdrop counter */
\$this."dewdrop:quantity" = \$quantity - 1;

/* Add another dewdrop one day from now */
\$delay((60*60*24), TRUE, "ea19");
\$this."dewdrop:quantity" = Int(\$this."dewdrop:quantity") + 1;

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:prune-dob">
         X[M] /* check when this plant was last pruned */

if(this."gardening:lastpruned" \&\& this."gardening:lastpruned"+60*60*16 \> time()) \{
  /* already pruned today */
  return TRUE;
\}

/* pruning plant */
this."gardening:lastpruned" = time();

\$result = ironclaw::roll(\$roller: \$actor, \$skills: (\{ "alteration:gardening" \}), \$bonus: (\{ \}));

if(\$result \> Int(this."trait:quality")) \{
  this."trait:quality" = Int(this."trait:quality") + 1;
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:water-dob">
         X[M] /* check when this plant was last watered */

if(this."gardening:lastwatered" \&\& this."gardening:lastwatered"+60*60*16 \> time()) \{
  /* already watered today */
  return TRUE;
\}

/* watering plant */
this."gardening:lastwatered" = time();

\$result = ironclaw::roll(\$roller: \$actor, \$skills: (\{ "alteration:gardening" \}), \$bonus: (\{ \}));

if(\$result \> Int(this."trait:quality")) \{
  this."trait:quality" = Int(this."trait:quality") + 1;
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:brief">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replacenames", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:flowertype">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:quality">
         X[M] /* drop the quality of the plant over time */ 

/* set the description for the flower, based on quality */ 
 
switch(Int(this."trait:quality"/2)) \{ 
  case 12: 
    this."trait:state" = "perfect"; 
    break; 
  case 11: 
    this."trait:state" = "perfect"; 
    break; 
  case 10: 
    this."trait:state" = "immaculate"; 
    break; 
  case 9: 
    this."trait:state" = "amazing"; 
    break; 
  case 8: 
    this."trait:state" = "pristine"; 
    break; 
  case 7: 
    this."trait:state" = "crisp"; 
    break; 
  case 6: 
    this."trait:state" = "fresh"; 
    break; 
  case 5: 
    this."trait:state" = "bright"; 
    break; 
  case 2: 
    this."trait:state" = (\{ "dull", "drooping", "faded" \})[random(2)]; 
    break; 
  case 1: 
    this."trait:state" = (\{ "limp", "listless" \})[random(2)]; 
    break; 
  case 0: 
    this."trait:state" = "wilted"; 
    break; 
  default: 
    this."trait:state" = nil; 
    break; 
\} 

if(this."gardening:decaying") return TRUE; 
 
this."gardening:decaying" = 1; 
 
if(!this."trait:quality") this."trait:quality" = 4; 
 
while(this."trait:quality" \> 1) \{ 
  \$delay(this.decaydelay, TRUE, "9dd8"); 
  if(this."trait:quality" \> 1) this."trait:quality"--; 
\} 
 
this."gardening:decaying" = nil; 
 
return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1147157464, "tonyd", "E", 1147678870, "tonyd", "P", 1147678965, "tonyd", "P", 1147679021, "tonyd", "P", 1147679067, "tonyd", "P", 1147679420, "tonyd", "P", 1147679770, "tonyd", "P", 1147679801, "tonyd", "S", 1147679895, "tonyd", "P", 1147680055, "tonyd", "S", 1147680107, "tonyd", "P", 1147680369, "tonyd", "P", 1147680585, "tonyd", "P", 1147680649, "tonyd", "P", 1147681027, "tonyd", "P", 1147681167, "tonyd", "P", 1147681645, "tonyd", "P", 1147681762, "tonyd", "P", 1147688694, "tonyd", "E", 1148605686, "tonyd", "P", 1149598796, "tonyd", "E", 1149601530, "tonyd", "P", 1149601772, "tonyd", "P", 1149602005, "tonyd", "P", 1149602055, "tonyd", "P", 1149602165, "tonyd", "P", 1149602250, "tonyd", "P", 1149602271, "tonyd", "P", 1149602306, "tonyd", "P", 1149602434, "tonyd", "P", 1149602570, "tonyd", "P", 1149602668, "tonyd", "P", 1149602712, "tonyd", "P", 1149602941, "tonyd", "P", 1149603039, "tonyd", "P", 1149603139, "tonyd", "P", 1149603317, "tonyd", "P", 1149603354, "tonyd", "P", 1149603490, "tonyd", "P", 1149603622, "tonyd", "P", 1149603640, "tonyd", "P", 1149603659, "tonyd", "P", 1149679870, "tonyd", "E", 1149679981, "tonyd", "E", 1168391808, "tunk_bodin", "X", 1168414519, "necate", "K", 1230216688, "morwenlorelie", "R", 1243788084, "morwenlorelie", "K", 1250078054, "jominey", "E", 1250078100, "jominey", "E", 1250078134, "jominey", "E", 1250078443, "jominey", "E", 1250078530, "jominey", "E", 1252064966, "slurpeeslurp", "E", 1269028149, "slurpeeslurp", "E", 1269028229, "slurpeeslurp", "E", 1269028278, "slurpeeslurp", "E", 1269028418, "slurpeeslurp", "E", 1269028453, "slurpeeslurp", "E", 1269028584, "slurpeeslurp", "E", 1269032432, "slurpeeslurp", "E", 1269131158, "jominey", "E", 1269131196, "jominey", "E", 1269131212, "jominey", "E", 1269479163, "jominey", "E", 1269479359, "jominey", "E", 1269480344, "jominey", "E", 1269480361, "jominey", "E", 1269480559, "jominey", "E", 1269480681, "jominey", "E", 1271649289, "jominey", "K", 1321242460, "tonyd", "P", 1321242520, "tonyd", "P", 1325547362, "jominey", "K", 1325547745, "jominey", "K", 1325548642, "jominey", "E", 1325548697, "jominey", "K", 1327968431, "jominey", "R", 1347221991, "jominey", "R", 1347231042, "jominey", "R", 1379520071, "slurpeeslurp", "E", 1396012761, "slurpeeslurp", "E", 1402447726, "jominey", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
