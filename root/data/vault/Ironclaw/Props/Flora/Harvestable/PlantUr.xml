<object clone="/base/obj/thing" owner="tunk_bodin">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="0.5" density="2"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="standing" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="true"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="false" under="false" on="true" inside="false" near="true" over="true" behind="false" before="false" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="plant"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="plants"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.trait:descriptor) $(this.trait:brief)
          </Base:Description>
          <Base:Description type="examine">
             The $(this.trait:descriptor) $(this.trait:brief). $(this.trait:extended_description)<sbr/>
This plant has $[if($this."trait:quantity" == 0) { return "no " +($this."harvestable:name"[1][0]); } else if ($this."trait:quantity" == 1) { return "one " +($this."harvestable:name"[0][0]); } else { return desc_cardinal($this."trait:quantity")+ " " +($this."harvestable:name"[1][0]); }] ready to be picked.
          </Base:Description>
          <Base:Description type="look">
             The $(this.trait:descriptor) $(this.trait:brief). $(this.trait:extended_description)<sbr/>
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="10"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:harvestable:harvestname">
         (\{ "pick", "picks", "pickable" \})
      </Core:Property>
      <Core:Property property="export:harvestable:item">
         \<Ironclaw:Props:Flora:Harvestable:BloomUr\>
      </Core:Property>
      <Core:Property property="export:harvestable:name">
         (\{ (\{ "bloom" \}), (\{ "blooms" \}) \})
      </Core:Property>
      <Core:Property property="export:harvestable:parts">
         (\{ "leaf", "flower", "stem" \})
      </Core:Property>
      <Core:Property property="export:harvestable:properties">
         (\{ (\{ "trait:brief", "plant" \}), (\{ "trait:color", "red", "blue", "green", "purple", "violet", "crimson" \}) \})
      </Core:Property>
      <Core:Property property="export:trait:brief">
         "plant"
      </Core:Property>
      <Core:Property property="export:trait:descriptor">
         "broad-leaved"
      </Core:Property>
      <Core:Property property="export:trait:extended_description">
         "It's a big plant."
      </Core:Property>
      <Core:Property property="export:trait:quality">
         4
      </Core:Property>
      <Core:Property property="export:trait:quantity">
         5
      </Core:Property>
      <Core:Property property="export:trait:smell">
         "plants"
      </Core:Property>
      <Core:Property property="merry:lib:harvest">
         X[M] /* check if there are flowers available */
if(\$this."trait:quantity" \< 1 \&\& \$this."trait:quantity" != -1) \{
  EmitTo(\$actor, "There are no "+\$this."harvestable:harvestname"[2]+" "+\$this."harvestable:name"[1][0]+" on "+Describe(\$this)+".");
  return FALSE;
\}

/* reduce the number of flowers on the plant */
if(\$this."trait:quantity" != -1)
 \$this."trait:quantity" -= 1;

/* create the flower object */
\$object = Spawn(\$this."harvestable:item");
/* set the properties in the flower */
for(\$i=0;\$i\<sizeof(\$this."harvestable:properties");\$i++) \{
  Set(\$object, \$this."harvestable:properties"[\$i][0], \$this."harvestable:properties"[\$i][random(sizeof(\$this."harvestable:properties"[\$i])-1)+1]);
\}

/* set the scent in the flower */
\$object."trait:smell" = \$this."trait:smell";

/* set the quality in the flower */
\$object."trait:quality" = \$this."trait:quality";

/* set snames and pnames in the flower */

for(\$i=0;\$i\<sizeof(\$this."harvestable:name"[0]);\$i++) \{
Set(\$object, "details:default:sname:"+\$this."harvestable:name"[0][\$i]+":local", 1);
\}
for(\$i=0;\$i\<sizeof(\$this."harvestable:name"[1]);\$i++) \{
Set(\$object, "details:default:pname:"+\$this."harvestable:name"[1][\$i]+":local", 1);
\}

/* REMOVED */
/* Set(\$object, "details:default:sname:"+\$this."harvestable:name"[0]+":local", 1);     */
/* Set(\$object, "details:default:pname:"+\$this."harvestable:name"[1]+":local", 1);     */
/* set based on trait:brief, too */
Set(\$object, "details:default:sname:"+\$object."trait:brief"+":local", 1);
Set(\$object, "details:default:pname:"+\$object."trait:brief"+"s:local", 1);

/* give the flower to the player */
\$object."base:environment" = \$actor;

/* emit message to player and room */
EmitTo(\$actor, "You "+\$this."harvestable:harvestname"[0]+" "+Describe(\$object, nil, nil, STYLE_NONPOSS)+" from "+Describe(\$this, nil, nil, STYLE_NONPOSS)+".");
EmitIn(\$actor."base:environment", Describe(\$actor)+" "+\$this."harvestable:harvestname"[1]+" "+Describe(\$object, nil, nil, STYLE_NONPOSS)+" from "+Describe(\$this, nil, nil, STYLE_NONPOSS)+".", \$actor);

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:regenerate-harvestable">
         X[M] /* stop when we hit the quality of the plant */        
if(\$this."trait:quantity" \>= \$this."trait:quality") return TRUE;        
        
/* we're already regenerating flowers */        
if(\$this."regenerating:harvestable") return TRUE;        
        
/* not already regenerating flowers, start regenerating */        
\$this."regenerating:harvestable" = 1;        
        
/* wait a while, then add a flower */        
while(\$this."trait:quantity" \< \$this."trait:quality") \{        
  /* wait one day */        
  \$delay((60*60*24), TRUE, "9d85");        
  /* add a flower if appropriate */        
  if(\$this."trait:quantity" \< \$this."trait:quality")        
    \$this."trait:quantity" += 1;        
\}        
        
/* stop regenerating */        
\$this."regenerating:harvestable" = nil;        
        
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:harvest-dob">
         X[M] Call(\$this, "harvest");        
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react:pick-dob">
         X[M] Call(\$this, "harvest");        
return FALSE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:quality">
         X[M] /* stop when we hit the quality of this plant */        
if(\$this."trait:quantity" \< \$this."trait:quality") Call(\$this, "regenerate-harvestable");        
return TRUE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:quantity">
         X[M] /* stop when we hit the quality of this plant */        
if(\$this."trait:quantity" \< \$this."trait:quality") Call(\$this, "regenerate-harvestable");        
return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1171252068, "tunk_bodin", "X", 1196645122, "slurpeeslurp", "E", 1225101614, "tonyd", "P", 1225101647, "tonyd", "P", 1253168020, "jominey", "E", 1253168034, "jominey", "E", 1269797771, "jominey", "S", 1269798163, "jominey", "S", 1327975925, "necate", "R", 1347229445, "jominey", "R", 1347231063, "jominey", "R" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
