<object clone="/base/obj/thing" owner="jominey">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Ironclaw:Props:Misc:Items:UrBindable)"/>
    <Base:Bulk immobile="false" mass="0.2" density="1"/>
    <Base:Container flexible="true" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="1"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="true"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="folder"/>
            <Base:SName sname="container"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="folders"/>
            <Base:PName pname="containers"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="purple"/>
          <Base:Adjective adjective="scroll"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="NEW">empty</Base:Description>
          <Base:Description type="brief">
             {? | $(this.alteration:embossing:desc) | embossed | {? | $(this.trait:embossing) | embossed }} $(this.trait:color) $(this.trait:material) folder
          </Base:Description>
          <Base:Description type="examine">
             A {? | $(this.alteration:embossing:desc) | embossed | {? | $(this.trait:embossing) | embossed }} $(this.trait:color) $(this.trait:material) folder, designed to store scrolls. $(this.trait:embroidery) $(this.trait:engraving) $(this.trait:embossing) {? | $(this.trait:label) | It is labeled: "$(this.trait:label)" | Nothing is written on this folder. }<makers-mark/><sbr/><quality-full/>
          </Base:Description>
          <Base:Description type="look">
             A {? | $(this.alteration:embossing:desc) | embossed | {? | $(this.trait:embossing) | embossed }} $(this.trait:color) $(this.trait:material) folder, designed to store scrolls. $(this.trait:embroidery) $(this.trait:engraving) $(this.trait:embossing) {? | $(this.trait:label) | It is labeled: "$(this.trait:label)" | Nothing is written on this folder. }
          </Base:Description>
          <Base:Description type="new">empty</Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="cover" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             folder cover
          </Base:Description>
          <Base:Description type="examine">
             {? | $(this.trait:label) | It is labeled: "$(this.trait:label)" | Nothing is written on this folder. }
          </Base:Description>
          <Base:Description type="look">
             {? | $(this.trait:label) | It is labeled: "$(this.trait:label)" | Nothing is written on this folder. }
          </Base:Description>
          <Base:Description type="writing">
             {? | $(this.trait:label) | $(this.trait:label) | Nothing is written on this folder. }
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="spine" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="folder"/>
        </Base:Adjectives>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="#list#">
         X[M] /* 
 
----------------------------------- 
 LIBRARY CONTENT (Merry/SAM) 
 
 Object:        MGMarrach:library:folder 
 Maintainer:    Kalle Alm 
 Email:         kalle@mortalis.skotos.net 
 Revision:      1.7 
 Generated:     Sun Jan  4 02:55:46 2009 on Castle Marrach 
 Last revision: Mon Jul 24 15:36:27 2006 by zwoc (P) 
 
 
 
(Do not modify #list# -- it is automatically constructed.) 
 
 
--------------------------------------------------------------------------------------------------------- 
 lib:clean_folder     (M) Clean up a folder that has corrupted data. 
 react-pre:erase-what (M) Erase a topic. 
 react:fix-dob        (M) Manual fix for folders with corrupted data. [temporary script that should be  
                          removed after awhile] 
 react:place-where    (M) Place a scroll or note into the folder. 
 react:pull-dob       (M) Foo. 
 react:pull-iob       (M) Pull from a folder. 
 react:read-what      (M) Read the contents of the folder, or list the available topics. 
--------------------------------------------------------------------------------------------------------- 
 
*/
      </Core:Property>
      <Core:Property property="alteration:color:desc">
         "purple"
      </Core:Property>
      <Core:Property property="alteration:variant">
         "satin"
      </Core:Property>
      <Core:Property property="export:nip:item:cost">
         100
      </Core:Property>
      <Core:Property property="export:trait:superbrief">
         "folder"
      </Core:Property>
      <Core:Property property="export:writable">"1"</Core:Property>
      <Core:Property property="merry:inherit:react-pre:emboss-dob">
         \<Allegory:Lib:Crafting:Custom:Embossing\>
      </Core:Property>
      <Core:Property property="merry:lib:clean_folder">
         X[M] /*  
 * D=Clean up a folder that has corrupted data.  
 */  
string *topics;  
string s;  
int i, ix;  
  
topics = map_indices(prefixed_map(this."*", "topic:", TRUE));  
ix     = sizeof(topics);  
for (i = 0; i \< ix; i++) \{  
    s = ascii::strip_skotos(\$s: replace_strings(topics[i], "'", "", "\\"", "", "\<", "", "\>", "", "\$", ""));  
    if (s != topics[i]) \{  
        Set(this, "csd:" + s, Get(this, "csd:" + topics[i]));  
        Set(this, "topic:" + s, Get(this, "topic:" + topics[i])); 
        Set(this, "csd:" + topics[i], nil);  
        Set(this, "topic:" + topics[i], nil);  
    \}  
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:erase-what">
         X[M] /*    
  D=Erase a topic.    
*/    
    
if( this."base:holder" != \$actor ) \{    
  EmitTo( \$actor, "You need to be holding "+Describe(this)+" to do that." );    
  return FALSE;    
\}    
    
if( !\$(raw-evoke) ) \{    
  EmitTo( \$actor, "You need to evoke a topic to delete to do this.\\nType 'read "+Describe(this)+"' to see the available topics." );    
  return FALSE;    
\}    
    
if( !Get( this, "topic:"+\$(raw-evoke) )) \{    
  EmitTo( \$actor, "That topic does not exist or was deleted already." );    
  return FALSE;    
\}    
    
Set( this, "topic:"+\$(raw-evoke), nil );    
EmitTo( \$actor, "You delete the topic and all its contents." );
      </Core:Property>
      <Core:Property property="merry:react-pre:label-dob">
         X[M] if(!\$evoke \|\| \$evoke == "") \{
    EmitTo(\$actor, "What did you want to label your folder as?");
    return FALSE;
\}

if(\$this."trait:label") \{
    \$adjectives = explode(\$this."trait:label", " ");

    for(\$i = 0; \$i \< sizeof(\$adjectives); \$i++) \{
        Set(\$this, "details:default:adjective:" + \$adjectives[\$i], FALSE);
    \}
\}

\$this."trait:label" = replace_strings(\$evoke, "\\"", "");

\$adjectives = explode(\$this."trait:label", " ");

for(\$i = 0; \$i \< sizeof(\$adjectives); \$i++) \{
    Set(\$this, "details:default:adjective:" + \$adjectives[\$i], TRUE);
\}

\$evoke = nil;

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:fix-dob">
         X[M] /*  
 * D=Manual fix for folders with corrupted data. [temporary script that should be removed after awhile]  
 *  
 * Author: Kalle Alm  
 * Email:  kalle@mortalis.skotos.net  
 * Since:  Sep  5 19:46, 2005  
 * State:  EXPERIMENTAL  
 */  
EmitTo(\$actor, "[OOC: You have requested a fix of the folder. Doing that now. Try reading it afterwards.]");  
::clean_folder();  
/*  
 * ChangeLog [  
 *    Change(Sep  5 19:46, 2005; Zwoc)=Added script to codebase.  
 * ]  
 */
      </Core:Property>
      <Core:Property property="merry:react:place-where">
         X[M] /*
  D=Place a scroll or note into the folder.
*/

string into, signed, from, to, from_to, body, message;
object what;

/* deprecated
**
if( !\$(raw-evoke) ) \{
  EmitTo( \$actor, "You need to evoke a name when adding something to the folder. Note that if you choose a name that exists already, the information will be appended to that name.\\nExample: " + TAG( "place my scroll in my folder \\"mother things\\"", "syntax" ));
  return FALSE;
\}
*/

if( sizeof( \$what ) != 1 ) \{
  EmitTo( \$actor, "You may only place one thing into the folder at a time." );
  return FALSE;
\}

into = \$(raw-evoke);
what = NRefOb(\$what[0]);

if (!contains(name(what), "scroll") \&\& !contains(name(what), "Scroll") \&\& !contains(name(what), "Parchment") \&\& !contains(name(what), "invitation") \&\& !contains(name(what), "Invitation") \&\& !what.isascroll) \{
  EmitTo(\$actor, "You cannot put that in your folder.");
  return FALSE;
\}

if (!into) \{
    if (what."detail:description:writing") \{
        into = ascii::strip_skotos(\$s: replace_strings(explode(what."detail:description:writing", "\\n")[0], "'", "", "\\"", "", "\<", "", "\>", ""));
    \} else \{
        EmitTo(\$actor, "There's nothing written on that.");
        return FALSE;
    \}
\}

/* Make sure topic is not written already. */
if (Get(this, "topic:" + into)) \{
    EmitTo(\$actor, "Alas, that topic is already in use. Try another one?");
    return FALSE;
\}

if( what."base:holder" != \$actor \|\| this."base:holder" != \$actor ) \{
  EmitTo( \$actor, "You need to be holding " + Describe(what, nil, nil, 3) + " and the folder to do this." );
  return FALSE;
\}

/* Store core scroll data. */
\$csd = ([ "what"          : what."core:ur:parent",
          "delivery-from" : what."detail:description:delivery-from",
          "delivery-to"   : what."detail:description:delivery-to",
          "delivery-end"  : what."detail:description:delivery-end",
          "writing"       : what."detail:description:writing",
          "lastwriter"    : what.lastwriter,
          "lastwritetime"    : what.lastwritetime,
          "lastwriter_object"    : what.lastwriter_object,
          "lastwriter_recognition_difficulty"    : what.lastwriter_recognition_difficulty,
          "lastmodified"  : what."trait:lastmodified" ]);

Set(this, "csd:" + into, \$csd);

from = (\$tmp = Get( what, "details:" + NRefDetail(what) + ":description:delivery-from"))? \$tmp : nil;

\$tmp = Get( what, "details:" + NRefDetail(what) + ":description:delivery-to");
if( \$tmp )
  \$obj = common::lookup(\$name: \$tmp);
if( \$obj )
  to = Describe( \$obj );
else
  to = nil;

if( from )
  signed = (\$tmp = Get( what, "details:" + NRefDetail(what) + ":description:delivery-end"))? \$tmp : nil;
else
  signed = nil;

body = Get( what, "details:" + NRefDetail(what) + ":description:writing" );

if( !body ) \{
  EmitTo( \$actor, Describe(what, nil, \$actor)+" is blank." );
  return FALSE;
\}

what."base:environment" = nil;

message = "";

if (!from \&\& !to)
  message += "Unsigned and unaddressed";
if( from ) \{
  message += "From " + from;
  from = nil;
\} else if( to ) \{
  message += "To " + to;
  to = nil;
\}
if( to ) \{
  message += " to " + to;
  to = nil;
\}

if( signed ) \{
  message += ", signed \\"" + signed + "\\"";
  signed = nil;
\}

if( message != "" )
  message += ":\\n\\n";

message = Describe(what) + ". " + message + body;

Set(this, "topic:" + into, message);

EmitTo(\$actor, "You add the contents of " + Describe(what, nil, \$actor) + " to " + Describe(this, nil, \$actor) + " under '" + into + "'." );
EmitIn(\$actor."base:environment", Describe(\$actor) + " adds the contents of " + Describe(what, \$actor) + " to " + Describe(this, \$actor) + ".", \$actor);

Slay(what);
      </Core:Property>
      <Core:Property property="merry:react:pull-dob">
         X[M] /*  
 * D=Foo.  
 */  
Social(\$actor, "pull", \$adverb, \$(raw-evoke), "from", this);
      </Core:Property>
      <Core:Property property="merry:react:pull-iob">
         X[M] /*
 * D=Pull from a folder.
 *
 * Author: Kalle Alm
 * Since:  August, 2005
 * State:  UNSTABLE
 */

/* Check accessibility. */
if (this."base:holder" != \$actor) \{
    EmitTo(\$actor, "You need to hold it to do that.");
    return FALSE;
\}

if (!\$(raw-evoke)) \{
    EmitTo(\$actor, "You can pull items out of your folder by pulling them and speaking out the topic name.\\nE.g. pull from my folder \\"muffin recipe\\"");
    return FALSE;
\}

\$csd = Get(this, "csd:" + \$(raw-evoke));

if (!\$csd) \{
    EmitTo(\$actor, "Alas, that topic cannot be retrieved. [OOC: If you put things into your folder prior to June 18th, then a code-change that was put in place was not effective for your item.]");
    return FALSE;
\}

\$item = Spawn(\$csd["what"]);
\$item."detail:description:delivery-from" = \$csd["delivery-from"];
\$item."detail:description:delivery-to" = \$csd["delivery-to"];
\$item."detail:description:delivery-end" = \$csd["delivery-end"];
\$item."detail:description:writing" = \$csd["writing"];
\$item.lastwriter = \$csd["lastwriter"];
\$item.lastwritetime = \$csd["lastwritetime"];
\$item.lastwriter_object = \$csd["lastwriter_object"];
\$item.lastwriter_recognition_difficulty = \$csd["lastwriter_recognition_difficulty"];
\$item."trait:lastmodified" = \$csd["lastmodified"];
\$item."base:environment" = \$actor;
\$item."trait:lastfolderpull" = (\{ time(), \$actor \});

Set(this, "csd:" + \$(raw-evoke), nil);
Set(this, "topic:" + \$(raw-evoke), nil);

EmitTo(\$actor, "You retrieve " + Describe(\$item, nil, \$actor) + " from " + Describe(this, nil, \$actor) + ".");
EmitIn(\$actor."base:environment", Describe(\$actor) + " retrieves " + Describe(\$item, \$actor) + " from " + Describe(this, \$actor) + ".", \$actor);
      </Core:Property>
      <Core:Property property="merry:react:read-what">
         X[M] /*
 * D=Read the contents of the folder, or list the available topics.
 *
 * Author: Kalle Alm
 * Since:  January, 2005
 * State:  UNSTABLE
 *
 * ChangeLog [
 *    Change(Aug 8, 2005; Zwoc)=Tweaked code to include "pull from" and acquire the scroll in its original state.
 *    Change(Sep 1, 2005; Zwoc)=Updated code to use @cont.
 * ]
 */

/* sanity check */
if(!\$actor) return FALSE;

if (!this."base:holder" \|\| this."base:holder" != \$actor) \{
    return EmitTo( \$actor, "You need to be holding " + Describe(this) + " in order to read its contents." ), 0;
\}

if (!\$(raw-evoke)) \{
    /*
     * Just list the topics in the folder.
     */
    \$result = "The following topics are available -- to read a topic, type: " + TAG("read " + Describe(this) + " \\"[topic]\\"", "syntax") + "\\n";
    \$topics = map_indices(prefixed_map(Get(this, "*"), "topic:", TRUE));
    \$cleaned = FALSE;
    do \{
        \$worked  = FALSE;
        catch \{
            for (\$i = 0; \$i \< sizeof(\$topics); \$i++) \{
                \$ctop = \$topics[\$i];
                if (\$ctop == "") \{
                    \$ctop = "[empty]";
                \}
                \$result += UnSAM(ParseXML("- \<acmd cmd=\\"read my folder '" + \$ctop + "'\\"\>" + \$ctop + "\</acmd\>")) + "\\n";
            \}
            common::more(\$text: \$result);
            \$worked = TRUE;
        \}
        if (!\$worked) \{
            if (\$cleaned)
                error("attempt to clean " + name(this) + " failed");
            \$cleaned = TRUE;
            EmitTo(\$actor, "Your folder's data is corrupted and is being cleaned now.");
            \$delay(0, TRUE, "8585");
            ::clean_folder();
            \$i = -1;
            \$topics = map_indices(prefixed_map(Get(this, "*"), "topic:", TRUE));
        \}
    \} while (\$i == -1);
    return FALSE;
\}

if (\$(raw-evoke) == "[empty]") \$(raw-evoke) = "";

\$contents = Get(this, "topic:" + \$(raw-evoke));

if (!\$contents) \{
    /* We may want to list the topics containing evoke. */
    string *topics;
    int i, ix;

    topics = map_indices(prefixed_map(this."*", "topic:", TRUE));
    ix     = sizeof(topics);

    for (i = 0; i \< ix; i++) \{
        if (!contains(topics[i], \$(raw-evoke)))
            topics[i] = nil;
    \}
    topics -= (\{ nil \});
    if (sizeof(topics) \> 1) \{
        EmitTo(\$actor, "The following topics contain " + dump_value(\$(raw-evoke)) + ":\\n- " + implode(topics, "\\n- "));
        return FALSE;
    \} else if (!sizeof(topics)) \{
        EmitTo(\$actor, "No such topics found." );
        return FALSE;
    \}
    \$(raw-evoke) = topics[0];
    \$contents    = Get(this, "topic:" + \$(raw-evoke));
\}

EmitTo(\$actor, "You read the topic '"+\$(raw-evoke)+"':\\n\\n");

EmitTo(\$actor, \$contents);


EmitTo(\$actor, UnSAM(ParseXML("[\<acmd cmd=\\"pull from my folder '" + \$(raw-evoke) + "'\\"\>retrieve\</acmd\>] \\\\\| [\<acmd cmd=\\"erase my folder '" + \$(raw-evoke) + "'\\"\>erase\</acmd\>]")));
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:color">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:color:desc">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:material">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1067996116, "zwoc", "E", 1067996185, "zwoc", "X", 1101596937, "dionar", "X", 1101597827, "dionar", "E", 1101597917, "dionar", "E", 1106264115, "sorcha", "K", 1106264410, "sorcha", "K", 1106264495, "sorcha", "X", 1106264632, "sorcha", "K", 1106264822, "sorcha", "E", 1106265492, "sorcha", "E", 1106265691, "sorcha", "X", 1120946345, "zwoc", "P", 1121651093, "zwoc", "X", 1121651612, "zwoc", "P", 1121651676, "zwoc", "P", 1121652559, "zwoc", "P", 1121652923, "zwoc", "P", 1121652964, "zwoc", "P", 1121653333, "zwoc", "P", 1121653461, "zwoc", "P", 1121653533, "zwoc", "P", 1121653570, "zwoc", "P", 1121653937, "zwoc", "P", 1121654204, "zwoc", "X", 1121654930, "zwoc", "P", 1121654932, "zwoc", "P", 1121654947, "zwoc", "X", 1121655003, "zwoc", "P", 1121655024, "zwoc", "P", 1121655186, "zwoc", "X", 1121656107, "zwoc", "P", 1121656182, "zwoc", "P", 1121656202, "zwoc", "X", 1121697738, "zwoc", "P", 1121697833, "zwoc", "P", 1121697912, "zwoc", "P", 1121697946, "zwoc", "P", 1121697987, "zwoc", "X", 1121824776, "zwoc", "P", 1121825327, "zwoc", "P", 1121825419, "zwoc", "P", 1123551446, "zwoc", "P", 1123551503, "zwoc", "P", 1123551529, "zwoc", "P", 1125594722, "zwoc", "P", 1125595105, "zwoc", "P", 1125595119, "zwoc", "P", 1125595263, "zwoc", "P", 1125595924, "zwoc", "P", 1125596000, "zwoc", "P", 1125596024, "zwoc", "P", 1125962762, "zwoc", "P", 1125962847, "zwoc", "P", 1125963351, "zwoc", "P", 1125963433, "zwoc", "P", 1125963598, "zwoc", "P", 1125963649, "zwoc", "P", 1125963935, "zwoc", "P", 1125964067, "zwoc", "P", 1135720161, "tomdowd", "K", 1135720194, "tomdowd", "K", 1136086954, "arkenstone", "X", 1142626527, "zwoc", "P", 1153513559, "zwoc", "P", 1153513633, "zwoc", "P", 1153513859, "zwoc", "P", 1153513910, "zwoc", "P", 1153513925, "zwoc", "P", 1153513944, "zwoc", "P", 1153514242, "zwoc", "P", 1153514361, "zwoc", "P", 1153514397, "zwoc", "P", 1153769787, "zwoc", "P", 1231142135, "tonyd", "X", 1231151120, "balkaar", "E", 1231159007, "balkaar", "E", 1231160155, "balkaar", "E", 1231163329, "balkaar", "E", 1231163397, "balkaar", "E", 1231163486, "balkaar", "E", 1231163758, "balkaar", "E", 1231164017, "balkaar", "R", 1231164338, "balkaar", "E", 1231164429, "balkaar", "E", 1231164513, "balkaar", "E", 1231164575, "balkaar", "E", 1231164664, "balkaar", "E", 1231164824, "balkaar", "E", 1232040741, "slurpeeslurp", "E", 1232040775, "slurpeeslurp", "E", 1232040816, "slurpeeslurp", "E", 1232040882, "slurpeeslurp", "E", 1232040918, "slurpeeslurp", "E", 1243535174, "rorschakovacs", "E", 1243535207, "rorschakovacs", "E", 1243535272, "rorschakovacs", "E", 1243535343, "rorschakovacs", "E", 1243542179, "rastalabor", "E", 1243542198, "rastalabor", "E", 1245176351, "jominey", "E", 1283978398, "jominey", "E", 1283978418, "jominey", "E", 1283978534, "jominey", "E", 1283978591, "jominey", "E", 1283978708, "jominey", "E", 1283978776, "jominey", "E", 1283978828, "jominey", "E", 1294455668, "jominey", "E", 1321247266, "tonyd", "P", 1321247354, "tonyd", "P", 1409223161, "tonyd", "P", 1409223241, "tonyd", "P", 1409223349, "tonyd", "P", 1428031035, "jominey", "E", 1428031849, "jominey", "K", 1428032113, "jominey", "E", 1428032295, "jominey", "E", 1428032456, "jominey", "K", 1428032642, "jominey", "E", 1428032808, "jominey", "K", 1428112921, "slurpeeslurp", "K", 1428112943, "slurpeeslurp", "K", 1475976237, "jominey", "E", 1475976245, "jominey", "E", 1497838497, "jominey", "E", 1572749598, "jominey", "E", 1572749712, "jominey", "K", 1574180791, "jominey", "E", 1574180817, "jominey", "E", 1574180997, "jominey", "E", 1574181026, "jominey", "E", 1574181036, "jominey", "E", 1574181670, "jominey", "E", 1574181729, "jominey", "E", 1574181840, "jominey", "E", 1574181971, "jominey", "E", 1579724015, "jominey", "E", 1579724086, "jominey", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="trait:color">"purple"</Core:Property>
      <Core:Property property="trait:command">
         X[S] - \<acmd cmd="read my folder "\$(words)""\>\$(words)\</acmd\>\<br/\>
      </Core:Property>
      <Core:Property property="trait:material">
         "satin"
      </Core:Property>
      <Core:Property property="{author}">"Kalle Alm"</Core:Property>
      <Core:Property property="{email}">
         "kalle@mortalis.skotos.net"
      </Core:Property>
      <Core:Property property="{rev}">1</Core:Property>
      <Core:Property property="{sub_rev_stamp}">
         1153769787
      </Core:Property>
      <Core:Property property="{sub_rev}">7</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
