<object clone="/base/obj/thing" owner="lidiab">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="2" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="lizard"/>
            <Base:SName sname="fluffy"/>
            <Base:SName sname="npc"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="fluffies"/>
            <Base:PName pname="lizards"/>
            <Base:PName pname="npcs"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="fluffy"/>
          <Base:Adjective adjective="sabertooth"/>
          <Base:Adjective adjective="sabertoothed"/>
          <Base:Adjective adjective="sleek"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             large-bodied clumhach
          </Base:Description>
          <Base:Description type="examine">
             A sleek, large-bodied lizard <br/> NOTES: <br/> - characterized by long, curved saber-shaped canine teeth - The large maxillary canine teeth extend from the mouth even when closed. -- two pairs of upper canines with two sharp, peg-like teeth jutting down from either side of their upper jaw <br/> - With agile movements, and sleek musculature, this lizard resembles similar qualities inherent to felines.
          </Base:Description>
          <Base:Description type="look">
             A sleek, large-bodied sabertooth lizard.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:combat:armor:rating">
         5
      </Core:Property>
      <Core:Property property="export:combat:fightable">
         1
      </Core:Property>
      <Core:Property property="export:combat:unarmed">
         24
      </Core:Property>
      <Core:Property property="export:trait:body">1</Core:Property>
      <Core:Property property="export:trait:speed">6</Core:Property>
      <Core:Property property="merry:act:start">
         X[M] \$this."trait:color" = oneof("red", "yellow", "blue", "black", "pink", "white");

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:find_target">
         X[M] /* When the NPC is looking for a target */
int i;

/* In this example, we want to target PCs */
\$options = Match(this."base:environment", "pc");
\$preferred_options = (\{ \});

/* We need to convert the NRef's from the PC list into objects */
for(i=0; i\<sizeof(\$options); i++)
  \$options[i] = NRefOb(\$options[i]);

/* We prefer to target PCs that are already attacking us */
for(i=0; i\<sizeof(\$options); i++) \{
  if(\$options[i]."udat:object" \&\& \$options[i].combat \&\& \$options[i].combat["target"] == this) \$preferred_options += (\{ \$options[i] \});
\}
if(sizeof(\$preferred_options)) return \$preferred_options[random(sizeof(\$preferred_options))];

/* Next prefer to target PCs that are already in combat with us */
for(i=0; i\<sizeof(\$options); i++) \{
  if(\$options[i]."udat:object" \&\& \$options[i].combat) \$preferred_options += (\{ \$options[i] \});
\}
if(sizeof(\$preferred_options)) return \$preferred_options[random(sizeof(\$preferred_options))];

/* ... and stop there. The lobster doesn't want to fight anyone who isn't already fighting it */

return nil;

/* Next prefer to target PCs that aren't dying or dead or injured */
for(i=0; i\<sizeof(\$options); i++) \{
  if(\$options[i]."udat:object" \&\& !\$options[i]."status:injured" \&\& !\$options[i]."status:dying" \&\& !\$options[i]."status:dead") \$preferred_options += (\{ \$options[i] \});
\}
if(sizeof(\$preferred_options)) return \$preferred_options[random(sizeof(\$preferred_options))];

return nil;
      </Core:Property>
      <Core:Property property="merry:lib:give_combat_damage">
         X[M] if(\$damage \>= 4) \{
  ccombat::remove_from_combat(\$fighter: \$target);
  \$delay(0.5, TRUE, "30de");
  \$target."tmp:combat:skeleton:defeated" = Int(\$target."tmp:combat:skeleton:defeated")+1;
  EmitIn(\$char."base:environment", Describe(\$char)+" laughs at "+Describe(\$target)+", \\"Ha! I am the mightiest! Nobody can stand against me!\\"");
\}
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:take_combat_actions">
         X[M] /* When the NPC is given a turn in combat, this is the script where they decide what to do */
int i;

/* \$az = \$\{Chatters:IC:az:azrael\};
EmitTo(\$az, "Taking an action"); */

switch(random(3)) \{
  case 2:
    Social(this, oneof("scuttle", "scurry"), oneof("aggressively", "around", "frantically")); break;
    break;
  default:
    break;
\}
\$delay(2, TRUE, "52ac");

\$actions = copy(this.combat["options"]);
\$actions -= (\{ nil \});

/* Do we need a new target? */
if(!this.combat["target"])
  this.combat["target"] = ::find_target();

if(!this.combat["target"]) \{
  /* We couldn't find a target. Remove ourselves from the fight. */
  ccombat::remove_from_combat(\$fighter: this);
  ccombat::end_turn(\$char: this);
  return TRUE;
\}

if(!this.combat["target"].combat) \{
  ccombat::start_fight(\$attacker: this, \$target: this.combat["target"]);
  \$delay(0.1, TRUE, "64a5");
\}

\$turn_id = random(1000000000);
\$params = ([ "char":this, "taking_action":TRUE, "turn_id":\$turn_id ]);


/* Can we attack? */
for(i=0;i\<sizeof(\$actions);i++) \{
  if(\$actions[i][0] == "attack") \{
    if( Call(\$actions[i][1], \$actions[i][0], \$char: \$char, \$par: nil, \$check_valid: TRUE) ) \{
      return Call(\$actions[i][1], \$actions[i][0], \$par: \$params);
    \}
  \}
\}

/* Couldn't attack. Can we do another action? */
for(i=0;i\<sizeof(\$actions);i++) \{
  if(\$actions[i][0] == "aim" \|\| \$actions[i][0] == "guard") \{
    if( Call(\$actions[i][1], \$actions[i][0], \$char: \$char, \$par: nil, \$check_valid: TRUE) ) \{

      if(\$actions[i][0] == "aim") \{
        EmitIn(this."base:environment", Describe(this)+" moves into an offensive position.");
      \} else if(\$actions[i][0] == "guard") \{
        EmitIn(this."base:environment", Describe(this)+" moves into a defensive position.");
      \}

      return Call(\$actions[i][1], \$actions[i][0], \$par: \$params);
    \}
  \}
\}

/* Couldn't do anything. End the turn */
ccombat::end_turn(\$char: this); /* Because we return TRUE above during the delay, the script won't pass for us. So we need to tell it to pass */
return FALSE; /* This means we didn't complete our action, so the script will need to pass for us */
      </Core:Property>
      <Core:Property property="merry:lib:take_combat_damage_dying">
         X[M] /* Script run when the NPC takes enough damage to be dying */
\$char."tmp:combat:skeleton:won" = Int(\$char."tmp:combat:skeleton:won")+1;

EmitTo(\$\{Chatters:AE:az:azrael\}, "DYING!");
EmitIn(\$char."base:environment", Describe(\$char)+" grabs "+Describe(this)+" and begins to shake.");
EmitIn(\$char."base:environment", Describe(\$char)+" shakes and shakes.");
EmitIn(\$char."base:environment", Describe(this)+" starts falling apart, first a bone here and there, then a few limbs.");
EmitIn(\$char."base:environment", "After a short while, "+Describe(\$char)+" is left holding only a skull, which "+\$char."base:pronoun"+" throws away.");

ccombat::remove_from_combat(\$fighter: this);

return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-post:poke-dob">
         X[M] /* Poke the skeleton to start a fight */

Social(this, "turn", nil, nil, "to", \$actor);

\$target = ::find_target();
\$target = \$actor;

if(!\$target) return TRUE;

/* Set them up for new combat */
\$target."merry:inherit:act-pre:breakcombat" = \$\{Ironclaw:Lib:Combat:Cards:Combat\};
\$target."merry:inherit:act-pre:fight" = \$\{Ironclaw:Lib:Combat:Cards:Combat\};
\$target."merry:inherit:act-pre:pass" = \$\{Ironclaw:Lib:Combat:Cards:Combat\};
ccombat::start_fight(\$attacker: this, \$target: \$target);
return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1144052085, "-", "SYNC", 1221752477, "???", "R", 1402473932, "pp74", "E", 1402474320, "pp74", "K", 1402474792, "pp74", "E", 1402654142, "tonyd", "P", 1402654156, "tonyd", "P", 1402654169, "tonyd", "P", 1402654193, "tonyd", "P", 1402654209, "tonyd", "P", 1402654238, "tonyd", "P", 1402654250, "tonyd", "P", 1402654265, "tonyd", "P", 1402654281, "tonyd", "P", 1402654294, "tonyd", "P", 1402654337, "tonyd", "P", 1402654694, "tonyd", "P", 1402654849, "tonyd", "P", 1402654943, "tonyd", "P", 1403035993, "lidiab", "K", 1403036050, "lidiab", "K", 1403121765, "lidiab", "K" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="trait:color">"black"</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
