<object clone="/base/obj/thing" owner="tunk_bodin">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Allegory:Props:Crafting:UrCrafting)"/>
    <Base:Bulk immobile="false" mass="4" density="2"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="false" near="true" over="false" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="pottery"/>
            <Base:SName sname="sculpture"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="sculptures"/>
            <Base:PName pname="potterys"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="clay"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.trait:color) $(this.trait:material) {? equal | $(this.trait:type) | none || $(this.trait:type) } $(this.trait:brief)
          </Base:Description>
          <Base:Description type="examine">
             A $(this.trait:color) $(this.trait:material) {? equal | $(this.trait:type) | none || $(this.trait:type) } $(this.trait:brief). $(this.trait:extended_desc) <makers-mark/> <sbr/>          $(this.trait:ext_desc) It is of $(this.trait:state) quality.
          </Base:Description>
          <Base:Description type="look">
             A $(this.trait:color) $(this.trait:material) {? equal | $(this.trait:type) | none || $(this.trait:type) } $(this.trait:brief).
          </Base:Description>
          <Base:Description type="pbrief">
             $(this.trait:color) $(this.trait:material) sculptures
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="dest:location">
         \<Ironclaw:World:OOC:ClayStorage\>
      </Core:Property>
      <Core:Property property="export:alteration:create:default:mold">
         ([ "cost":(\{ 0, "You do not have enough ORIGINAL_OBJECT" \}), "description":(\{ "You mold ORIGINAL_OBJECT into NEW_OBJECT", "molds ORIGINAL_OBJECT into NEW_OBJECT" \}), "finished":(\{ "You have used the last of ORIGINAL_OBJECT.", "ACTOR has used the last of ORIGINAL_OBJECT." \}), "input-list":(\{ (\{ \<Ironclaw:Lib:Crafting:Old:CraftingDB\>, "alteration:knowledge:molding-sculpture" \}), (\{ \<Ironclaw:Lib:Crafting:Old:CraftingDB\>, "alteration:knowledge:molding-sculpture" \}) \}), "input-list-actor":(\{ "alteration:knowledge:molding-sculpture", "alteration:knowledge:molding-sculpture" \}), "input-list-actor-remote":(\{ "alteration:knowledge:molding-sculpture-remote", "alteration:knowledge:molding-sculpture-remote" \}), "newobject-properties":(\{ (\{ "trait:color", "trait:color" \}), (\{ "trait:material", "trait:material" \}), (\{ "trait:state", "trait:state" \}), (\{ "trait:quality", "trait:quality" \}), (\{ "trait:age", "trait:age" \}), (\{ "trait:quantity", "trait:quantity" \}) \}), "skill":"pottery", "stopvalue":(\{ "trait:fire_stage", 1, "This object has already begun the firing process and can no longer be shaped." \}) ])
      </Core:Property>
      <Core:Property property="export:dest:location">
         \<Ironclaw:World:OOC:ClayStorage\>
      </Core:Property>
      <Core:Property property="export:kiln:location">
         \<Ironclaw:World:INCOMPLETE:NewTown:PotteryShop:Studio\>
      </Core:Property>
      <Core:Property property="export:nip:item:cost">
         100
      </Core:Property>
      <Core:Property property="export:trait:age">1</Core:Property>
      <Core:Property property="export:trait:brief">
         "urcontainer"
      </Core:Property>
      <Core:Property property="export:trait:trash">1</Core:Property>
      <Core:Property property="export:trait:type">
         "none"
      </Core:Property>
      <Core:Property property="kiln:location">
         \<Ironclaw:World:INCOMPLETE:NewTown:PotteryShop:Studio\>
      </Core:Property>
      <Core:Property property="merry:act:start">
         X[M] Call(this, "age_clay");                        
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:age_clay">
         X[M] /* Allow the clay to age into uselessness unless fired */                    
int delay;                      
delay = 24*60*60;                    
\$this."trait:ext_desc" = "The clay is fresh and malleable.";                 
Set(\$this, "trait:age", 1);                   
\$delay(delay, TRUE, "4401");                  
Set(\$this, "trait:age", 2);                  
\$delay(delay, TRUE, "316f");                  
Set(\$this, "trait:age", 3);                  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:is_firing">
         X[M] /* Establish the firing process */            
/* Set the prop that tells us it is in progress */            
\$this.isfiring = 1;            
\$env = \$this."kiln:location";           
\$i = \$this."trait:fire_stage"; /* current stage of object */           
\$z = 5;  /* max number of stages */           
while(\$i\<\$z) \{ /* start it up and loop it */           
/* Delay until it reaches the next stage*/            
\$delay(600, TRUE, "c123");            
if(\$this."base:environment" == \$this."dest:location") \{ /* location check start */            
\$this."trait:fire_stage" += 1;            
/* Give emit message showing progress */            
EmitIn(\$env, Describe(\$this)+ " has made some progress.");                 
\} else \{            
\$this.isfiring = nil; /* Early termination stopper */           
return FALSE;            
\} /* location check end */            
\$i ++;           
 \} /* end the while loop */           
/* Set the object to not be busy anymore, as the process has completed */            
\$this.isfiring = nil;       
EmitIn(\$env, Describe(\$this)+ " has completed the firing process.");          
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:fire-dob">
         X[M] /* Fire the clay in the kiln */                            
/* EmitTo(\$actor, dump_value(args)); */                            
if(!\$using) \{                            
EmitTo(\$actor, "Where do you plan to fire " +Describe(\$this, nil, nil, STYLE_NONPOSS)+ "?");                            
return FALSE;                            
\}                            
                    
if(sizeof(\$using) \> 1) \{                            
EmitTo(\$actor, "You can only fire " +Describe(\$this, nil, nil, STYLE_NONPOSS)+ " in one place. Try a kiln opening or just the kiln itself.");                            
return FALSE;                            
\}                            
                    
\$kiln = NRefOb(\$using[0]);                            
\$slot = NRefDetail(\$using[0]);                            
/* EmitTo(\$actor, \$slot);     */                   
                        
if(\$kiln."trait:objecttype" != "kiln") \{                            
EmitTo(\$actor, "You can only fire " +Describe(\$this, nil, nil, STYLE_NONPOSS)+ " in a kiln.");                            
return FALSE;                            
\}                            
                    
if(\$slot == "default") \{                            
\$slot = "oven-1";                            
\}                            
                    
if(Get(\$kiln, "fire:array:"+\$slot)) \{                            
\$array = Get(\$kiln, "fire:array:"+\$slot);                            
\} else \{                            
\$array = (\{ \});                            
Set(\$kiln, "fire:array:" +\$slot, \$array);                            
\$array = Get(\$kiln, "fire:array:"+\$slot);                            
\}                           
                     
                    
/* Long nesting here */                    
if(sizeof(\$array) \> 0) \{ /* 1st if */                    
if(\$array[0] != nil) \{      /* 1st SubA if */                    
/* EmitTo(\$actor, "That spot is taken, checking next spot.");  */                          
\$slot = \$slot[0..strlen(\$slot)-2];                            
\$check = 1;                            
\$i = 1;                           
                     
while(\$check == 1) \{  /* 1st while */                     
\$slot = \$slot + Str(\$i);                          
                      
if(Get(\$kiln, "fire:array:"+\$slot)) \{  /* this block closes... */                    
\$array = Get(\$kiln, "fire:array:"+\$slot);                            
\} else \{                            
\$array = (\{ \});                            
Set(\$kiln, "fire:array:" +\$slot, \$array);                            
\$array = Get(\$kiln, "fire:array:"+\$slot);                            
\}  /* .... right here. */                    
                     
if(sizeof(\$array) \> 0) \{   /* 2nd if */                    
                    
if(\$array[0] != nil) \{      /* 3rd if */                    
/* EmitTo(\$actor, "That spot is taken, checking next spot.");    */                     
/* EmitTo(\$actor, Str(sizeof(\$array)));      */                    
\$slot = \$slot[0..strlen(\$slot)-2];                            
\$i += 1;                            
                    
if(\$i \> 6) \{   /* This block ends.... */                    
EmitTo(\$actor, "There is no room in the kiln at this time. Wait for other projects to complete.");                            
\$check = 2;                            
return FALSE;                            
\}  /* ...right here. */                    
                           
\} /* end 3rd if */                    
\} else \{                            
\$check = 2;                            
\} /* end 2nd if */                      
\} /* end 1st while */                    
\} /* end 1st SubA if */                   
\} /* end 1st if */                    
                     
\$array = (\{ \$this \});                            
Set(\$kiln, "fire:array:" +\$slot, \$array);                            
/* EmitTo(\$actor, \$slot);          */        
\$env = \$this."dest:location";                   
\$this."base:environment" = \$env;         
Call(\$this, "is_firing");             
                         
                     
/* place this item in the kiln array dependent on the opening or if \$using is just kiln, set it in the 1st opening. Place SAM props in the kiln object details that represent this item in there. --DONE-- */                                    
/* We can store this in a backstage room or even nil except they may get lost there  --DONE-- Ironclaw:Rooms:OOC:ClayStorage */                                      
/* start a script in this item that times the firing process and alter the trait:fire_stage accordingly. --DONE-- */                            
/* set a pre-empty script in the kiln openings that returns this to the actor. --DONE-- Make it stop the firing process. --DONE-- */                            
/* EmitTo(\$actor, dump_value(args)); */                            
return TRUE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:age">
         X[M] \$fresh = "The clay is fresh and malleable.";                 
\$old = "The clay has begun to harden and will lose consistency soon.";          
        
if(5 \> \$this."trait:fire_stage") \{        
if(\$this."trait:age" == 1) \{                 
Set(\$this, "trait:ext_desc", \$fresh);                 
\} else if(\$this."trait:age" == 2) \{                 
Set(\$this, "trait:ext_desc", \$old);                 
\} else if(\$this."trait:age" == 3) \{                 
\$env = \$this."base:environment";                
               
if(\$env."base:volition") \{               
\$env2 = \$env."base:environment";               
EmitTo(\$env, Describe(\$this, nil, nil, STYLE_FIRST_PERSON)+ " crumbles into dust from old age.");                 
EmitIn(\$env2, Describe(\$this)+ " crumbles into dust from old age.", \$env);                
\} else \{               
EmitIn(\$env, Describe(\$this)+ " crumbles into dust from old age.");                
\}               
               
               
\$delay(0.1, TRUE, "79b9");                
if(!\$this."no:slay") \{                 
Slay(\$this);                 
\}                 
\}             
\}      
return TRUE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:brief">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replacesname", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:color">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:fire_stage">
         X[M] \$stage_1 = "The clay is still fresh and malleable.";                 
\$stage_2 = "This object has begun the firing process but it has barely hardened at all.";          
\$stage_3 = "This object is in the middle of being fired and needs more time.";       
\$stage_4 = "This object has almost finished the firing process but needs a little more time.";       
\$stage_5 = "This object has been completely fired and can last for ages with the right care and attention.";       
if(\$this."trait:fire_stage" == 1) \{                 
Set(\$this, "trait:ext_desc", \$stage_1);                 
\} else if(\$this."trait:fire_stage" == 2) \{                 
Set(\$this, "trait:ext_desc", \$stage_2);                 
\} else if(\$this."trait:fire_stage" == 3) \{                 
Set(\$this, "trait:ext_desc", \$stage_3);           
\} else if(\$this."trait:fire_stage" == 4) \{                 
Set(\$this, "trait:ext_desc", \$stage_4);        
\} else if(\$this."trait:fire_stage" == 5) \{                 
Set(\$this, "trait:ext_desc", \$stage_5);        
\}       
return TRUE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:material">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:quality">
         X[M] /* set the description for the clay, based on quality */               
               
switch(this."trait:quality") \{               
  case 12:               
    this."trait:state" = "ideal";               
    break;               
  case 11:               
    this."trait:state" = "ideal";               
    break;               
  case 10:               
    this."trait:state" = "great";               
    break;               
  case 9:               
    this."trait:state" = "great";               
    break;               
  case 8:               
    this."trait:state" = "good";               
    break;               
  case 7:               
    this."trait:state" = "good";               
    break;               
  case 6:               
    this."trait:state" = "decent";               
    break;               
  case 5:               
    this."trait:state" = "decent";               
    break;               
  case 4:               
    this."trait:state" = "poor";               
    break;               
  case 3:               
    this."trait:state" = "poor";               
    break;          
  case 2:               
    this."trait:state" = "very poor";               
    break;               
  case 1:               
    this."trait:state" = "very poor";               
    break;               
  case 0:               
    this."trait:state" = "bad";               
    break;               
  default:               
    this."trait:state" = nil;               
    break;               
\}               
               
return TRUE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:type">
         X[M] Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);     
Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replacesname", \$object: this);     
return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1169532180, "tunk_bodin", "X", 1169532253, "tunk_bodin", "X", 1169534303, "tunk_bodin", "X", 1169534352, "tunk_bodin", "X", 1169534644, "tunk_bodin", "X", 1169534713, "tunk_bodin", "X", 1169534968, "tunk_bodin", "X", 1169535024, "tunk_bodin", "X", 1169535061, "tunk_bodin", "X", 1170130463, "tunk_bodin", "X", 1170721916, "tunk_bodin", "X", 1171233210, "tunk_bodin", "X", 1172077681, "tunk_bodin", "E", 1182118473, "tunk_bodin", "X", 1182118575, "tunk_bodin", "X", 1284269259, "jominey", "K" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="trait:trash">1</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
