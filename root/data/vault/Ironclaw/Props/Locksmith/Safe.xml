<object clone="/base/obj/thing" owner="tunk_bodin">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Allegory:Props:Crafting:UrCraftingContainer)"/>
    <Base:Bulk immobile="false" mass="110" density="8"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="true" capacity="1" maxweight="100" verb2="contain" verb3="contains"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="standing" combinable="false" discrete="false" by_weight="false" tight="true" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="true" inside="true" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="safe"/>
            <Base:SName sname="vault"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="safes"/>
            <Base:PName pname="vaults"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="small"/>
          <Base:Adjective adjective="solid"/>
          <Base:Adjective adjective="square"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.trait:material) safe
          </Base:Description>
          <Base:Description type="examine">
             The $(this.trait:material) safe is a solid, square vault to store valuables. It uses a dial locking mechanism based on the numbers zero to one hundred.
          </Base:Description>
          <Base:Description type="look">
             The $(this.trait:material) safe is a solid, square vault to store valuables.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="true" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" keycode="this:this:this" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="dial" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="dial"/>
            <Base:SName sname="lock"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="dials"/>
            <Base:PName pname="locks"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="safe"/>
          <Base:Adjective adjective="vault"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             black, numbered dial
          </Base:Description>
          <Base:Description type="examine">
             The black, numbered dial of a $(this.trait:material) safe. The dial stands at the number $[{ return desc_cardinal($this."safe:current"); }].
          </Base:Description>
          <Base:Description type="look">
             The black, numbered dial of a $(this.trait:material) safe.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:attempt:false">
         101
      </Core:Property>
      <Core:Property property="export:attempt:one">
         101
      </Core:Property>
      <Core:Property property="export:attempt:three">
         101
      </Core:Property>
      <Core:Property property="export:attempt:two">
         101
      </Core:Property>
      <Core:Property property="export:safe:combination">
         (\{ 1, 1, 1 \})
      </Core:Property>
      <Core:Property property="export:safe:current">
         1
      </Core:Property>
      <Core:Property property="export:trait:material">
         "steel"
      </Core:Property>
      <Core:Property property="merry:react-pre:fix-dob">
         X[M] int first, second, third; 
if(!\$evoke) \{ 
EmitTo(\$actor, "The correct format for setting the combination is a set of three numbers such as: fix safe '24 35 56."); 
return TRUE; 
\} 
if(\$evoke \&\& sscanf(\$evoke, "\\"%d %d %d\\"", first, second, third) \< 3) \{ 
EmitTo(\$actor, "The correct format for setting the combination is a set of three numbers such as: fix safe '24 35 56."); 
return FALSE; 
\} 
 
\$combo = copy(\$this."safe:combination"); 
 
if(first \>= 100 \|\| second \>= 100 \|\| third \>= 100 ) \{ 
EmitTo(\$actor, "The dial only goes as high as 100."); 
return FALSE; 
\} 
 
if(\$combo[0] == first \&\& \$combo[1] == second \&\& \$combo[2] == third ) \{ 
\$combo[0] = 1; 
\$combo[1] = 1; 
\$combo[2] = 1; 
\$this."safe:combination" = \$combo; 
EmitTo(\$actor, "The safe has been successfully set to the factory default settings. The current combination is - " +Str(\$this."safe:combination"[0])+ ":" +Str(\$this."safe:combination"[1])+ ":" +Str(\$this."safe:combination"[2])+ "."); 
return FALSE; 
\} 
 
if(\$combo[0] == 1 \&\& \$combo[1] == 1 \&\& \$combo[2] == 1 ) \{ 
\$combo[0] = first; 
\$combo[1] = second; 
\$combo[2] = third; 
\$this."safe:combination" = \$combo; 
EmitTo(\$actor, "The combination for the safe has been set to - " +Str(\$this."safe:combination"[0])+ ":" +Str(\$this."safe:combination"[1])+ ":" +Str(\$this."safe:combination"[2])+ "."); 
\} else \{ 
EmitTo(\$actor, "A new combination can only be set if the current combination is the factory default setting. The current combination of " +Describe(\$this)+ " is NOT the factory default setting. This can be accomplished by using fix safe 'current combination, such as: fix safe '1 1 1."); 
return FALSE; 
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:lock-what">
         X[M] if(\$this."details:default:exit:closed" == 1) \{                                
EmitTo(\$actor, "You spin the dial of " +Describe(\$this)+ ", resetting the tumbler and locking it.");                                       
EmitIn(\$actor."base:environment", Describe(\$actor)+ " spins the dial of " +Describe(\$this)+ ", resetting the tumbler and locking it.", \$actor);                                     
\$this."details:default:exit:locked" = 1;                                
\} else \{                                
EmitTo(\$actor, "You should close " +Describe(\$this)+ " first. Meanwhile, your actions have no effect.");                                
\}                                    
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:spin-dob">
         X[M] int attempt;               
/* EmitTo(\$actor, dump_value(args));    */                        
if(NRefDetail(\$dob[0]) == "dial") \{                                    
if(\$this."details:default:exit:closed" == 1) \{                              
                              
if(!\$evoke) \{                              
EmitTo(\$actor, "You spin the dial of " +Describe(\$this)+ ", resetting the tumbler and locking it.");                          
if(\$this."safe:combination"[0] == 1 \&\& \$this."safe:combination"[1] == 1 \&\& \$this."safe:combination"[2] == 1 ) \{                         
EmitTo(\$actor, "The combination for " +Describe(\$this)+ " is still set to the factory default. Use the 'fix' command to change it.");                               
\}                                         
EmitIn(\$actor."base:environment", Describe(\$actor)+ " spins the dial of " +Describe(\$this)+ ", resetting the tumbler and locking it.", \$actor);           
\$this."attempt:one" = 101;           
\$this."attempt:two" = 101;           
\$this."attempt:three" = 101;           
\$this."attempt:false" = 101;          
\$this."safe:current" = random(99) + 1;                               
\$this."details:default:exit:locked" = 1;                              
\} else \{                              
 if(sscanf(\$evoke, "\\"%d\\"", attempt ) == 1) \{                
if(attempt \>= 101 \|\| 0 \>= attempt) \{               
EmitTo(\$actor, "Invalid range. The dial only has the numbers one through one hundred.");               
return FALSE;               
\}              
            
\$this."safe:current" = attempt;            
if(\$this."attempt:one" == 101) \{            
\$this."attempt:one" = attempt;                
\} else if(\$this."attempt:two" == 101) \{            
\$this."attempt:two" = attempt;                
\} else if(\$this."attempt:three" == 101) \{            
\$this."attempt:three" = attempt;               
\} else \{            
\$this."attempt:false" = attempt;                
\}            
            
if(\$this."attempt:false" \<= 100) \{            
EmitTo(\$actor, "The dial clicks repeatedly and needs to be reset. This can be done by spinning it without a numerical destination.");                
\}            
EmitTo(\$actor, "You turn the dial to " +Str(attempt)+ ".");     
EmitIn(\$actor."base:environment", Describe(\$actor)+ " spins the dial of " +Describe(\$this)+ ".", \$actor);             
            
if(\$this."attempt:one" == \$this."safe:combination"[0] \&\& \$this."attempt:two" == \$this."safe:combination"[1] \&\& \$this."attempt:three" == \$this."safe:combination"[2]) \{            
EmitTo(\$actor, "Success!! The safe is unlocked.");         
EmitIn(\$actor."base:environment", "Success!! The safe is unlocked.", \$actor);        
\$this."details:default:exit:locked" = 0;                
\}            
\} else \{              
EmitTo(\$actor, "The correct format is spin dial '# such as: spin dial '12.");              
return FALSE;              
\}              
                                              
\}                              
                              
\} else \{                                
EmitTo(\$actor, "You should close " +Describe(\$this)+ " first. Meanwhile, your actions have no effect.");                                
\}                                      
return FALSE;                                    
\} else \{                                  
return TRUE;                                  
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:unlock-what">
         X[M] EmitTo(\$actor, "You will need to spin the dial of " +Describe(\$this)+ " to the appropriate combinations in order to unlock it.");                                                
return FALSE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:material">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1160977513, "tunk_bodin", "X", 1163905439, "tunk_bodin", "X", 1163918179, "tonyd", "P", 1163920827, "tunk_bodin", "X", 1168713589, "tunk_bodin", "R", 1172077533, "tunk_bodin", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
