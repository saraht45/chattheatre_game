<object clone="/base/obj/thing" owner="SkotOS">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Allegory:Props:Food:UrFood)"/>
    <Base:Bulk immobile="false" mass="0.03" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="true"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="meat"/>
            <Base:SName sname="hunk"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="meats"/>
            <Base:PName pname="hunks"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="hefty"/>
          <Base:Adjective adjective="round"/>
          <Base:Adjective adjective="scallop"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             scallop meat
          </Base:Description>
          <Base:Description type="look">
             A hefty round hunk of white raw scallop meat. Some might like it cooked, although others like it raw.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:trait:smell">
         "fresh fish and salt"
      </Core:Property>
      <Core:Property property="export:trait:taste">
         "of salty seawater"
      </Core:Property>
      <Core:Property property="merry:react-post:roast-dob">
         X[M] /* check if the meat is roasted already */
if(\$this."trait:brief" == "brownish roasted scallop meat") \{
   EmitTo(\$actor, "The meat is already roasted."); 
   return FALSE;
   \}

/* check if fire is present and used */
if(!\$using) \{
 EmitTo(\$actor, "You need some manner of fire to roast the meat by.");
 return FALSE;
\}
if(sizeof(\$using) != 1) \{
 EmitTo(\$actor, "One fire shall be enough to roast the meat by.");
 return FALSE;
\}

\$light = (\$using[0]);
if(NRefDetail(\$light) != "fire") \{
if(sizeof(\$using) != 1) return TRUE;
   EmitTo(\$actor, "You need some manner of fire to roast this with.");
   return FALSE;
   \}

/* emit the roasting */
 EmitTo(\$actor, Describe(\$this, nil, \$actor)+" slowly roasts over the fire, sending wafts of mouthwatering scents into the air.");
 EmitIn(\$actor."base:environment", Describe(\$this)+" slowly roasts over the fire, sending wafts of mouthwatering scents into the air. "+ Describe(\$actor)+" gradually turns the meat to allow the fire to mark all sides of it.", \$actor);

/* roast the meat */
\$this."trait:brief" = "brownish roasted scallop meat";
\$this."trait:look" = "A nicely roasted hunk of juicy, brownish scallop meat.";
\$this."trait:examine" = "A hunk of browish roasted scallop meat, well seasoned and flavoursomely roasted.";
\$this."trait:smell" = "smoke, spices and fish";
\$this."trait:taste" = "of roasted scallop meat with salty seasoning and juicy aromas";


if(\$this."base:environment" != \$actor) \{
 EmitTo(\$actor, Describe(\$this, nil, \$actor)+" slips out of your hands, and onto the ground. Oops.");
 EmitIn(\$actor."base:environment", Describe(\$this)+" slips out of "+Describe(\$actor)+"'s hands, and onto the ground. Oops.", \$actor);
 Slay(\$this);
 return FALSE;
\}

return FALSE;
      </Core:Property>
      <Core:Property property="new property name">
         "New Property Value"
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1144052085, "-", "SYNC", 1221752477, "???", "R", 1305337532, "delfina", "K", 1305337552, "delfina", "E", 1305337586, "delfina", "E", 1305338039, "delfina", "K", 1305339814, "delfina", "E", 1305339895, "delfina", "E", 1305339979, "delfina", "E", 1305339998, "delfina", "E", 1305340064, "delfina", "E", 1305340410, "delfina", "E", 1306109284, "delfina", "E", 1310246613, "slurpeeslurp", "E", 1310318510, "meandmine", "E", 1310318562, "meandmine", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
