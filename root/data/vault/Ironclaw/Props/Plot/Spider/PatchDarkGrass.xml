<object clone="/base/obj/thing" owner="balkaar">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="0.5" density="2"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="true"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="patch"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="patches"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="NEW"/>
          <Base:Adjective adjective="dark"/>
          <Base:Adjective adjective="grass"/>
          <Base:Adjective adjective="shadowy"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             patch of dark grass
          </Base:Description>
          <Base:Description type="examine">
             A patch of distinguishable dark grass hidden in the shadows of the surroundings. It seems to be in constant motion with sinuous leaves imperceptibly snaking under the stone.<sbr/>
$[if($this."trait:quantity" == 0) { return "You find no way to pick any grass from the patch presently"; } else if ($this."trait:quantity" == 1) { return "You can select a single grass that can be thorn from the patch"; } else { return "You can separate " +desc_cardinal($this."trait:quantity")+ " grasses from the patch and tear them down to your convenience"; }].
          </Base:Description>
          <Base:Description type="look">
             A patch of distinguishable dark grass that is hidden in the shadows of the surroundings.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="10"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:harvestable:harvestname">
         (\{ "tear", "tears", "to be thorn" \})
      </Core:Property>
      <Core:Property property="export:harvestable:item">
         \<Ironclaw:Props:Plot:Spider:Grass\>
      </Core:Property>
      <Core:Property property="export:harvestable:name">
         (\{ "dark grass", "dark grasses" \})
      </Core:Property>
      <Core:Property property="export:harvestable:properties">
         (\{ (\{ "trait:brief", "grass" \}), (\{ "trait:color", "sinuous dark", "serpentine shadowy", "spiral dusky", "curly shaded" \}) \})
      </Core:Property>
      <Core:Property property="export:trait:brief">
         "patch"
      </Core:Property>
      <Core:Property property="export:trait:flowertype">
         "grass"
      </Core:Property>
      <Core:Property property="export:trait:quality">
         5
      </Core:Property>
      <Core:Property property="export:trait:quantity">
         5
      </Core:Property>
      <Core:Property property="export:trait:smell">
         "heavily layered, sour herbs"
      </Core:Property>
      <Core:Property property="merry:lib:harvest">
         X[M] object tmp_ob;

/* check that someone isn't holding the plant */
tmp_ob = \$this;
while(tmp_ob = tmp_ob."base:environment") \{
  if(tmp_ob."base:volition" \&\& tmp_ob != \$actor) \{
    EmitTo(\$actor, "You cannot harvest "+Describe(\$this)+" while it is being held by "+Describe(tmp_ob)+".");
    return FALSE;
  \}
\}

/* check if there are flowers available */
if(\$this."trait:quantity" \< 1) \{
  EmitTo(\$actor, "There are no "+\$this."harvestable:harvestname"[1]+" "+\$this."harvestable:name"[1]+" on "+Describe(\$this)+".");
  return FALSE;
\}

/* reduce the number of flowers on the plant */
\$this."trait:quantity" -= 1;

/* create the flower object */
\$object = Spawn(\$this."harvestable:item");
/* set the properties in the flower */
for(\$i=0;\$i\<sizeof(\$this."harvestable:properties");\$i++) \{
  Set(\$object, \$this."harvestable:properties"[\$i][0], \$this."harvestable:properties"[\$i][random(sizeof(\$this."harvestable:properties"[\$i])-1)+1]);
\}
/* set the quality in the flower */
\$object."trait:quality" = \$this."trait:quality";

/* set snames and pnames in the flower */
Set(\$object, "details:default:sname:"+\$this."harvestable:name"[0]+":local", 1);
Set(\$object, "details:default:pname:"+\$this."harvestable:name"[1]+":local", 1);
/* set based on trait:brief, too */
Set(\$object, "details:default:sname:"+\$object."trait:brief"+":local", 1);
Set(\$object, "details:default:pname:"+\$object."trait:brief"+"s:local", 1);

/* give the flower to the player */
\$object."base:environment" = \$actor;

/* emit message to player and room */
EmitTo(\$actor, "You "+\$this."harvestable:harvestname"[0]+" "+Describe(\$object, nil, nil, STYLE_NONPOSS)+" from "+Describe(\$this, nil, nil, STYLE_NONPOSS)+".");
EmitIn(\$actor."base:environment", Describe(\$actor)+" "+\$this."harvestable:harvestname"[1]+" "+Describe(\$object, nil, nil, STYLE_NONPOSS)+" from "+Describe(\$this, nil, nil, STYLE_NONPOSS)+".", \$actor);

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:regenerate-harvestable">
         X[M] /* stop when we hit the quality of the plant */
if(\$this."trait:quantity" \>= \$this."trait:quality") return TRUE;

/* we're already regenerating flowers */
if(\$this."regenerating:harvestable") return TRUE;

/* not already regenerating flowers, start regenerating */
\$this."regenerating:harvestable" = 1;

/* wait a while, then add a flower */
while(\$this."trait:quantity" \< \$this."trait:quality") \{
  /* wait one day */
  \$delay((60*60*24), TRUE, "9d85");
  /* add a flower if appropraite */
  if(\$this."trait:quantity" \< \$this."trait:quality")
    \$this."trait:quantity" += 1;
\}

/* stop regenerating */
\$this."regenerating:harvestable" = nil;

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:harvest-dob">
         X[M] Call(\$this, "harvest");
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react:pick-what">
         X[M] Call(\$this, "harvest");
return FALSE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:quality">
         X[M] /* stop when we hit the quality of this plant */
if(\$this."trait:quantity" \< \$this."trait:quality") Call(\$this, "regenerate-harvestable");
return TRUE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:quantity">
         X[M] /* stop when we hit the quality of this plant */
if(\$this."trait:quantity" \< \$this."trait:quality") Call(\$this, "regenerate-harvestable");
return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1147072792, "tonyd", "E", 1147072816, "tonyd", "E", 1147073134, "tonyd", "E", 1147073615, "tonyd", "P", 1147073638, "tonyd", "P", 1147073697, "tonyd", "P", 1147073855, "tonyd", "P", 1147073964, "tonyd", "P", 1147073991, "tonyd", "P", 1147074079, "tonyd", "P", 1147074106, "tonyd", "P", 1147074231, "tonyd", "P", 1147074604, "tonyd", "P", 1147074845, "tonyd", "P", 1147074951, "tonyd", "P", 1147074968, "tonyd", "P", 1147075044, "tonyd", "P", 1147075207, "tonyd", "P", 1147075469, "tonyd", "P", 1147075658, "tonyd", "P", 1147075704, "tonyd", "P", 1147075884, "tonyd", "P", 1147076583, "tonyd", "P", 1147077144, "tonyd", "P", 1147077814, "tonyd", "P", 1147077843, "tonyd", "P", 1147077880, "tonyd", "P", 1147155938, "tonyd", "E", 1147676537, "tonyd", "E", 1176778610, "tonyd", "P", 1176778655, "tonyd", "P", 1230216613, "morwenlorelie", "R", 1249992244, "balkaar", "E", 1249992302, "balkaar", "E", 1249992613, "balkaar", "E", 1249992737, "balkaar", "E", 1249992763, "balkaar", "E", 1249992774, "balkaar", "E", 1249992808, "balkaar", "E", 1249992820, "balkaar", "E", 1249992832, "balkaar", "E", 1249992864, "balkaar", "E", 1249993179, "balkaar", "E", 1249993282, "balkaar", "E", 1249993353, "balkaar", "E", 1249994002, "balkaar", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
