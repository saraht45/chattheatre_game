<object clone="/base/obj/thing" owner="SkotOS">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="cocoon"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="cocoons"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             large {? | $(this.cocoon:empty) | empty |}cocoon
          </Base:Description>
          <Base:Description type="examine">
             A large {? | $(this.cocoon:empty) | empty |}cocoon. {? | $(this.cocoon:empty) |The fragile encasing appears to have once contained a large animal, although now it lies vacant. | The cocoon appears to be freshly made and contains a large animal that is still quite alive, as indicated by the frequent movements.}
          </Base:Description>
          <Base:Description type="look">
             A large {? | $(this.cocoon:empty) | empty |}cocoon. The {? | $(this.cocoon:empty) | empty |}encasing appears to be roughly six feet in length.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="merry:react-pre:cut-dob">
         X[M] if(\$this."base:environment" == \$actor) \{
    EmitTo(\$actor, "You should put " + Describe(\$this, nil, \$actor) + " down first.");
    return FALSE;
\}

if(\$this."cocoon:empty") \{
    EmitTo(\$actor, Describe(\$this, nil, \$actor) + " has already been cut open.");
    return FALSE;
\}

if(!\$this."cocoon:inhabitant") \{
    EmitTo(\$actor, "You cut " + Describe(\$this, nil, \$actor) + " open but nothing is inside.");
    EmitIn(\$this."base:environment", Describe(\$actor) + " cuts " + Describe(\$this) + " open but nothing is inside.", \$actor);
    return FALSE; 
\}

\$inhabitant = \$this."cocoon:inhabitant";
EmitTo(\$actor, "You cut " + Describe(\$this, nil, \$actor) + " open, revealing " + Describe(\$inhabitant) + ".");
EmitIn(\$this."base:environment", Describe(\$actor) + " cuts " + Describe(\$this) + " open, revealing " + Describe(\$inhabitant) + ".", \$actor);
EmitTo(\$inhabitant, "Gossamer strands tear away from you as you are cut from the cocoon.");

Act(\$inhabitant, "teleport", \$dest: \$actor."base:environment", \$silently: TRUE);

if(\$this."cocoon:inside") \{
    \$inside = \$this."cocoon:inside";
    \$inventory = \$inside."base:inventory";
 
    for(\$i = 0; \$i \< sizeof(\$inventory); \$i++) \{
        \$inventory[\$i]."base:environment" = \$actor."base:environment";
    \}
\}

\$this."cocoon:empty" = 1;

return FALSE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1144052085, "-", "SYNC", 1221752477, "???", "R", 1253696848, "jominey", "K", 1253696862, "jominey", "E", 1253697428, "jominey", "E", 1253697462, "jominey", "K", 1253697936, "jominey", "E", 1253697973, "jominey", "E", 1253698162, "jominey", "E", 1253698814, "jominey", "E", 1253742826, "jominey", "K", 1253744286, "jominey", "K", 1253744356, "jominey", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
