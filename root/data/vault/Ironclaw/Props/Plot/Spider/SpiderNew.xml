<object clone="/base/obj/thing" owner="jominey">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Ironclaw:Races:UrCombat-Roo-backup)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="1"/>
    <Base:Misc gender="neuter" volition="true" weapon="false" default_stance="standing" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="true">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="true" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="spider"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="spiders"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="giant"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.trait:size) $(this.trait:type) spider {? | $(this.npc:is_dead) | corpse }
          </Base:Description>
          <Base:Description type="examine">
             A $(this.trait:size) $(this.trait:type) spider barely sways its rotund abdomen at your gaze. The light from the surroundings coats the large, shiny segments of its body with a malevolent, yet appreciable sheen. A small, round, dismal head hosts a set of ominous fangs, dripping in anticipation with drool and other secretions. A dark, hairy carapace covers its eight strong, ridged legs which tense with a predatory and instinctual readiness. Four pairs of glassy, reflective, menacing eyes are symmetrically located on the spider's compact skull, their bottomless black pupils absorbing every movement in the vicinity.
          </Base:Description>
          <Base:Description type="look">
             A $(this.trait:size) $(this.trait:type) spider barely sways its rotund abdomen. The light from the surroundings coats the shiny segments of its body with a malevolent sheen. A small, dismal head hosts a set of ominous fangs. A hairy carapace covers its eight strong legs which tense with a predatory readiness. Four pairs of menacing eyes are symmetrically located on the spider's compact skull, their bottomless black pupils absorbing every movement in the vicinity.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="body" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="body"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="bodies"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="segmented"/>
          <Base:Adjective adjective="shiny"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             shiny, segmented body
          </Base:Description>
          <Base:Description type="look">
             Various sized segments make up the body of this $(this.trait:size) $(this.trait:type) spider. The light from the surroundings coats the large with segments a malevolent, yet appreciable sheen.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="eyes" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames>
            <Base:PName pname="eyes"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="eight"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             four pairs of menacing eyes
          </Base:Description>
          <Base:Description type="examine">
             Four pairs of glassy, reflective, menacing eyes are symmetrically located on the spider's compact skull, their bottomless black pupils absorbing every movement in the vicinity. Two smaller eyes are centrally positioned while the remaining six align on each side of the head to provide all-around vision.
          </Base:Description>
          <Base:Description type="look">
             Eight reflective eyes are symmetrically located on the spider's fanged head, their bottomless black pupils absorbing every movement in the room with a tense attention.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="fangs" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="fang"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="fangs"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="curved"/>
          <Base:Adjective adjective="ominous"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             ominous fangs
          </Base:Description>
          <Base:Description type="examine">
             A pair of curved, ominous fangs drip in anticipation with drool and other secretions at the sight of you.
          </Base:Description>
          <Base:Description type="look">
             A pair of ominous fangs drip in anticipation with drool and other secretions.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="head" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="head"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="heads"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             ominously-fanged head
          </Base:Description>
          <Base:Description type="examine">
             A small, round, dismal head hosts a set of ominous fangs, dripping in anticipation with drool and other secretions.
          </Base:Description>
          <Base:Description type="look">
             The $(this.trait:size) spider's ominous head. Eight eyes symmetrically adorn the skull barely drawing attention from the malicious fangs that protrude from its hungry mouth.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="legs" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames>
            <Base:PName pname="legs"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="eight"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             hairy legs
          </Base:Description>
          <Base:Description type="examine">
             Eight strong, ridged legs extend from the spider's giant body and stand tense with a predatory and instinctual readiness.
          </Base:Description>
          <Base:Description type="look">
             Eight hairy legs extend from the spider's giant body.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="bak:merry:lib:combat:got_hit">
         X[M] /* assign actions with this script rather than using the normal combat system */
\$az = nil /* defunct */;
EmitTo(\$az, "Checking damage");

if(Int(\$this."combat:damage") \<= 24) return TRUE;

/* high damage. Kill the NPC */

/* is the spider already dead? */
/*if(\$this."death:dead") return TRUE;*/

Social(\$this, "recoil", "painedly", nil);
EmitIn(\$this."base:environment", Describe(this)+" runs away.");

Call(\$\{Ironclaw:Lib:Combat:New:Combat\}, "remove_from_combat", \$fighter: \$this);

Slay(\$this);

return FALSE;
      </Core:Property>
      <Core:Property property="bak:merry:lib:combat:perform_actions">
         X[M] /* assign actions with this script rather than using the normal combat system */
int i;
\$az = nil /* defunct */;
EmitTo(\$az, "Performing action");

/* if someone is knocked out of combat, don't keep targeting them */
if(this.combat["target"] \&\& this.combat["combatants"] \&\& !member(this.combat["target"], this.combat["combatants"]))
 this.combat["target"] = nil;

/* if someone is dead, don't keep targeting them */
if(this.combat["target"] \&\& this.combat["target"]."death:dead")
 this.combat["target"] = nil;


if(!this.combat["target"]) \{
 /* find a new target */
 EmitTo(\$az, "NEED A NEW TARGET");
 /* look through the list of combatants */
 \$possibilities = Arr(copy(this.combat["combatants"]));

 while(!this.combat["target"] \&\& sizeof(\$possibilities)) \{
  \$choice = \$possibilities[random(sizeof(\$possibilities))];
  \$possibilities -= (\{ \$choice \});
  if(!member("spider", Arr(\$choice."details:default:snames")))
   this.combat["target"] = \$choice;
 \}

 Act(this, "pass");
 return TRUE;
\}
\$old_injurylevel = Call(\$\{Ironclaw:Lib:Combat:New:Combat\}, "get_injury_level", \$actor: this.combat["target"]);



while(sizeof(\$actions)) \{
 \$delay(5, TRUE, "cc3c");

 \$current_action = \$actions[random(sizeof(\$actions))];
 \$actions -= (\{ \$current_action \});

 EmitTo(\$az, dump_value(\$current_action));

 if(!this.combat["target"]) \{
  /* find a new target */
  /* not written yet, so just pass */
  Act(this, "pass");
  return TRUE;
 \}

 if(\$current_action[0] == "attack") \{

  /* Should we kill the target? */
  if(\$old_injurylevel == 4 \&\& !random(3)) \{
   /* kill the target instead of hurting them */
   \$verb = (\{ "hiss" \});
   \$adverb = (\{ "angrily", "aggressively", "fearfully" \});
   \$verb = \$verb[random(sizeof(\$verb))];
   \$adverb = \$adverb[random(sizeof(\$adverb))];
   Social(this, \$verb, \$adverb, nil, "at", this.combat["target"]);
   \$delay(5, TRUE, "e716");
   \$verb = (\{ "skitter" \});
   \$adverb = (\{ "directly" \});
   \$verb = \$verb[random(sizeof(\$verb))];
   \$adverb = \$adverb[random(sizeof(\$adverb))];
   Social(this, \$verb, \$adverb, nil, "toward", this.combat["target"]);
   \$delay(5, TRUE, "1ee5");
   \$verb = (\{ "bite" \});
   \$adverb = (\{ "finally", "powerfully", "angrily" \});
   \$verb = \$verb[random(sizeof(\$verb))];
   \$adverb = \$adverb[random(sizeof(\$adverb))];
   Social(this, \$verb, \$adverb, nil, nil, this.combat["target"]);


   /* Now kill the PC */
   \$delay(5, TRUE, "977b");
   EmitTo(this.combat["target"], "Through the pain from the massive trauma caused by the spider, you feel the life leaving your body.");
   \$delay(30, TRUE, "137e");
   EmitTo(this.combat["target"], "You feel the last of the life leave your body.");

   \$delay(2, TRUE, "bb3f");

   this.combat["target"]."breakcombat:decision" = nil;
   Call(\$\{Ironclaw:Lib:Combat:New:Combat\}, "remove_from_combat", \$fighter: this.combat["target"]);
   Call(\$\{Ironclaw:Lib:Characters:Death\}, "die", \$victim: this.combat["target"]);
   \$delay(15, TRUE, "f637");
   /* only do one action */
   EmitTo(\$az, "Spider killed "+dump_value(this.combat["target"]));
   Act(this, "pass");
  
  
  \} else \{
  if(!random(5)) \{
   Social(this, "skitter", "agitatedly", nil, "over", NewNRef(this."base:environment", "floor") );
  \} else \{
   \$verb = (\{ "hiss" \});
   \$adverb = (\{ "angrily", "aggressively", "fearfully" \});
   \$verb = \$verb[random(sizeof(\$verb))];
   \$adverb = \$adverb[random(sizeof(\$adverb))];
   Social(this, \$verb, \$adverb, nil, "at", this.combat["target"]);
  \}
  \$delay(5, TRUE, "cc72");
  \$verb = (\{ "skitter" \});
  \$adverb = (\{ "directly" \});
  \$verb = \$verb[random(sizeof(\$verb))];
  \$adverb = \$adverb[random(sizeof(\$adverb))];
  Social(this, \$verb, \$adverb, nil, "toward", this.combat["target"]);

  \$delay(5, TRUE, "b971");
  switch(random(5)) \{
   case 4:
    Social(this, "snap", "at", nil, nil, this.combat["target"], "with", NewNRef(this, "fangs"));
    break;
   case 3:
    Social(this, "jab", nil, nil, nil, this.combat["target"], "with", NewNRef(this, "legs"));
    break;
   case 2:
    Social(this, "bite", nil, nil, nil, this.combat["target"]);
    break;
   case 1:
    Social(this, "slice", nil, nil, nil, this.combat["target"], "with", NewNRef(this, "fangs"));
    break;
   default:
    Social(this, "snap", "at", nil, nil, this.combat["target"], "with", NewNRef(this, "fangs"));
    break;
  \}


  /* give damage */
  \$injurylevel = Call(\$\{Ironclaw:Lib:Combat:New:Combat\}, "get_injury_level", \$actor: this.combat["target"]);
  this.combat["target"]."combat:damage" = Int(this.combat["target"]."combat:damage")+ \$current_action[3];

  /* check if they are too injured to keep fighting */
  /* did they go up an injury level? */
  if(\$injurylevel \< Call(\$\{Ironclaw:Lib:Combat:New:Combat\}, "get_injury_level", \$actor: this.combat["target"])) \{
   \$injurylevel = Call(\$\{Ironclaw:Lib:Combat:New:Combat\}, "get_injury_level", \$actor: this.combat["target"]);

   if(\$injurylevel \>= 3) \{
    /* offer them a breakcombat */
    this.combat["target"]."breakcombat:decision" = TRUE;
    if(\$injurylevel == 3) \{
     /* risking long term injuries */
     interaction::question(\$actor: this.combat["target"], \$question: "You are getting very tired. If you continue to fight you risk suffering LONG TERM injuries, or possibly DEATH. Do you want to concede the battle, and stop fighting?", \$expires: 80, \$env: "FALSE", \$yes_ob: \$\{Ironclaw:Lib:Combat:New:Combat\}, \$no_ob: \$\{Ironclaw:Lib:Combat:New:Combat\}, \$expire_ob: \$\{Ironclaw:Lib:Combat:New:Combat\}, \$yes_fun: "continue_fight_no", \$no_fun: "continue_fight", \$expire_fun: "continue_fight_expire", \$par: ([ "fighter":this.combat["target"], "actor":this ]));
    \} else if(\$injurylevel == 4) \{
     /* risking permanent injuries */
     interaction::question(\$actor: this.combat["target"], \$question: "You are extremely tired. If you continue to fight you risk suffering PERMANENT injuries, or DEATH. Do you want to concede the battle, and stop fighting?", \$expires: 80, \$env: "FALSE", \$yes_ob: \$\{Ironclaw:Lib:Combat:New:Combat\}, \$no_ob: \$\{Ironclaw:Lib:Combat:New:Combat\}, \$expire_ob: \$\{Ironclaw:Lib:Combat:New:Combat\}, \$yes_fun: "continue_fight_no", \$no_fun: "continue_fight", \$expire_fun: "continue_fight_expire", \$par: ([ "fighter":this.combat["target"], "actor":this ]));
    \} else \{
     /* can't keep risking more. Truly lost the fight */
     EmitTo(this, "You are far too injured to even consider fighting anyone.");
     this.combat["target"]."breakcombat:decision" = nil;
     Call(\$\{Ironclaw:Lib:Combat:New:Combat\}, "remove_from_combat", \$fighter: this.combat["target"]);
    \}
   \}
   \}
  \}

  /* only do one action */
  EmitTo(\$az, "Attack performed");
  Act(this, "pass");
  return TRUE;
 \}
\}
EmitTo(\$az, "Actions performed");

Act(this, "pass");

return TRUE;
      </Core:Property>
      <Core:Property property="base:initialcontents"/>
      <Core:Property property="error">
         "Failed to locate library spawnpoint."
      </Core:Property>
      <Core:Property property="export:career:combat:unarmed">
         24
      </Core:Property>
      <Core:Property property="export:combat:armor:rating">
         15
      </Core:Property>
      <Core:Property property="export:nip-core:consent:allow-all">
         1
      </Core:Property>
      <Core:Property property="export:nip-core:hooks">
         ([ "decide":\<Lib:NIP:base:hooks:decide\>, "delay":\<Lib:NIP:base:hooks:delay\>, "emoting":\<Lib:NIP:lib:emoting\>, "internal":\<Lib:NIP:base:hooks:internal\>, "resource-control":\<Lib:NIP:lib:resource-control\> ])
      </Core:Property>
      <Core:Property property="export:nip-core:inherits">
         ([ \<Lib:NIP:base:lib:hooks\>:(\{ "lib:core:find-hook", "lib:core:register-hook", "lib:core:unregister-hook", "lib:modify:hooks", "setprop-post:hook" \}), \<Lib:NIP:base:lib:signals\>:(\{ "lib:modify:signals", "setprop-post:signal", "lib:calc_sighookpath" \}), \<Lib:NIP:base:lib:stream\>:(\{ "setprop-post:sigexecptr", "setprop-post:sigstream" \}), \<Lib:NIP:base:signals:DECIDE\>:(\{ "setprop-post:decide" \}), \<Lib:NIP:lib:emoting\>:(\{ "lib:handler:emoting:parse", "lib:behave", "lib:handler:emoting:preparse" \}), \<Lib:NIP:lib:resource-control\>:(\{ "witness-post:login%nip:resource-control", "witness:enter-from%nip:resource-control", "witness:teleport%resource-control", "lib:entering" \}), \<Lib:NIP:lib:spawn-control\>:(\{ "act:stop" \}) ])
      </Core:Property>
      <Core:Property property="export:nip-core:libraries">
         (\{ \<Lib:NIP:base:lib:signals\>, \<Lib:NIP:base:lib:hooks\>, \<Lib:NIP:base:lib:stream\>, \<Lib:NIP:lib:resource-control\>, \<Kalle:renamed-to-restore-MOVED-nip-object:Lib:NIP:core\>, \<Lib:NIP:base:signals:DELAY\>, \<Lib:NIP:base:signals:DECIDE\>, \<Lib:NIP:base:signals:INTERNAL\>, \<Lib:NIP:lib:emoting\>, \<Lib:NIP:lib:spawn-control\> \})
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:behavior:">
         ([ 4:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:emoting:frequency">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:hints:">
         ([ 4:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:resource-control:ttl">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:resource-control:ttl_increase">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:spawn:area">
         ([ 4:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:sighookpath">
         (\{ "delay:DELAY-init", "delay:DELAY-exec", "internal:INTERNAL-exec", "decide:DECIDE-init", "emoting:DECIDE", "decide:DECIDE-exec", "decide:DECIDE-post" \})
      </Core:Property>
      <Core:Property property="export:nip-core:signals">
         ([ 10:"DELAY", 500:"INTERNAL", 1000:"DECIDE" ])
      </Core:Property>
      <Core:Property property="export:nip-core:system:revision">
         44
      </Core:Property>
      <Core:Property property="export:nip:trait:emoting:frequency">
         7
      </Core:Property>
      <Core:Property property="export:nip:trait:freemoting:frequency">
         7
      </Core:Property>
      <Core:Property property="export:nip:trait:freemoting:steal-frequency">
         10
      </Core:Property>
      <Core:Property property="export:nip:trait:resource-control:ttl">
         1800
      </Core:Property>
      <Core:Property property="export:nip:trait:resource-control:ttl_increase">
         600
      </Core:Property>
      <Core:Property property="export:nip:trait:spawn:area">
         \<Ironclaw:NPCs:Spawnpoints:spiderlair:area-properties\>
      </Core:Property>
      <Core:Property property="export:skill:combat:dodge">
         10
      </Core:Property>
      <Core:Property property="export:skill:combat:endurance">
         15
      </Core:Property>
      <Core:Property property="export:skill:combat:unarmed">
         8
      </Core:Property>
      <Core:Property property="export:skill:combatunarmed">
         8
      </Core:Property>
      <Core:Property property="export:trait:agility">
         6
      </Core:Property>
      <Core:Property property="export:trait:body">10</Core:Property>
      <Core:Property property="export:trait:mind">2</Core:Property>
      <Core:Property property="export:trait:size">
         "giant"
      </Core:Property>
      <Core:Property property="export:trait:speed">8</Core:Property>
      <Core:Property property="loading">1</Core:Property>
      <Core:Property property="merry:inherit:act-pre:breakcombat">
         \<Ironclaw:Lib:Combat:New:Combat\>
      </Core:Property>
      <Core:Property property="merry:inherit:act-pre:pass">
         \<Ironclaw:Lib:Combat:New:Combat\>
      </Core:Property>
      <Core:Property property="merry:inherit:act:start">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:act:stop">
         \<Lib:NIP:lib:spawn-control\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:behave">
         \<Lib:NIP:lib:emoting\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:calc_sighookpath">
         \<Lib:NIP:base:lib:signals\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:find-hook">
         \<Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:merry_add">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:merry_delete">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:register-hook">
         \<Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:sysupdate">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:unregister-hook">
         \<Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:decide:decide-exec">
         \<Lib:NIP:base:hooks:decide\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:decide:decide-init">
         \<Lib:NIP:base:hooks:decide\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:decide:decide-post">
         \<Lib:NIP:base:hooks:decide\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:delay:delay-exec">
         \<Lib:NIP:base:hooks:delay\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:delay:delay-init">
         \<Lib:NIP:base:hooks:delay\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:emoting:decide">
         \<Lib:NIP:lib:emoting\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:entering">
         \<Lib:NIP:lib:resource-control\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:find_nip_object">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:handler:emoting:parse">
         \<Lib:NIP:lib:emoting\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:handler:emoting:preparse">
         \<Lib:NIP:lib:emoting\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:heartbeat">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:internal:internal-exec">
         \<Lib:NIP:base:hooks:internal\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:log">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:modify:hooks">
         \<Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:modify:libraries">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:modify:signals">
         \<Lib:NIP:base:lib:signals\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:ncs:handler">
         \<Lib:NIP:NCS\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:shutdown">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:add">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:decide">
         \<Lib:NIP:base:signals:DECIDE\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:del">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:delete">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:error">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:hook">
         \<Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:nip">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:nip-core">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:sigexecptr">
         \<Lib:NIP:base:lib:stream\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:signal">
         \<Lib:NIP:base:lib:signals\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:sigstream">
         \<Lib:NIP:base:lib:stream\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:sub">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:witness-post:login%nip:resource-control">
         \<Lib:NIP:lib:resource-control\>
      </Core:Property>
      <Core:Property property="merry:inherit:witness:enter-from%nip:resource-control">
         \<Lib:NIP:lib:resource-control\>
      </Core:Property>
      <Core:Property property="merry:inherit:witness:teleport%resource-control">
         \<Lib:NIP:lib:resource-control\>
      </Core:Property>
      <Core:Property property="ndp">
         " *** FINISHED ADDITION *** "
      </Core:Property>
      <Core:Property property="nip-core:consent:allow-all">
         1
      </Core:Property>
      <Core:Property property="nip-core:hooks">
         ([ "decide":\<Lib:NIP:base:hooks:decide\>, "delay":\<Lib:NIP:base:hooks:delay\>, "emoting":\<Lib:NIP:lib:emoting\>, "internal":\<Lib:NIP:base:hooks:internal\>, "resource-control":\<Lib:NIP:lib:resource-control\> ])
      </Core:Property>
      <Core:Property property="nip-core:inherits">
         ([ \<Lib:NIP:base:lib:hooks\>:(\{ "lib:core:find-hook", "lib:core:register-hook", "lib:core:unregister-hook", "lib:modify:hooks", "setprop-post:hook" \}), \<Lib:NIP:base:lib:signals\>:(\{ "lib:modify:signals", "setprop-post:signal", "lib:calc_sighookpath" \}), \<Lib:NIP:base:lib:stream\>:(\{ "setprop-post:sigexecptr", "setprop-post:sigstream" \}), \<Lib:NIP:base:signals:DECIDE\>:(\{ "setprop-post:decide" \}), \<Lib:NIP:lib:emoting\>:(\{ "lib:handler:emoting:parse", "lib:behave", "lib:handler:emoting:preparse" \}), \<Lib:NIP:lib:resource-control\>:(\{ "witness-post:login%nip:resource-control", "witness:enter-from%nip:resource-control", "witness:teleport%resource-control", "lib:entering" \}), \<Lib:NIP:lib:spawn-control\>:(\{ "act:stop" \}) ])
      </Core:Property>
      <Core:Property property="nip-core:libraries">
         (\{ \<Lib:NIP:base:lib:signals\>, \<Lib:NIP:base:lib:hooks\>, \<Lib:NIP:base:lib:stream\>, \<Lib:NIP:lib:resource-control\>, \<Kalle:renamed-to-restore-MOVED-nip-object:Lib:NIP:core\>, \<Lib:NIP:base:signals:DELAY\>, \<Lib:NIP:base:signals:DECIDE\>, \<Lib:NIP:base:signals:INTERNAL\>, \<Lib:NIP:lib:emoting\>, \<Lib:NIP:lib:spawn-control\> \})
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:behavior:">
         ([ 4:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:emoting:frequency">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:hints:">
         ([ 4:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:resource-control:ttl">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:resource-control:ttl_increase">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:spawn:area">
         ([ 4:1 ])
      </Core:Property>
      <Core:Property property="nip-core:sighookpath">
         (\{ "delay:DELAY-init", "delay:DELAY-exec", "internal:INTERNAL-exec", "decide:DECIDE-init", "emoting:DECIDE", "decide:DECIDE-exec", "decide:DECIDE-post" \})
      </Core:Property>
      <Core:Property property="nip-core:signals">
         ([ 10:"DELAY", 500:"INTERNAL", 1000:"DECIDE" ])
      </Core:Property>
      <Core:Property property="nip-core:system:revision">
         44
      </Core:Property>
      <Core:Property property="nip:trait:emoting:frequency">
         7
      </Core:Property>
      <Core:Property property="nip:trait:freemoting:frequency">
         7
      </Core:Property>
      <Core:Property property="nip:trait:freemoting:steal-frequency">
         10
      </Core:Property>
      <Core:Property property="nip:trait:resource-control:ttl">
         1800
      </Core:Property>
      <Core:Property property="nip:trait:resource-control:ttl_increase">
         600
      </Core:Property>
      <Core:Property property="npc:resource-control:live_time">
         1266735668
      </Core:Property>
      <Core:Property property="npc:status:spawndate">
         1266735668
      </Core:Property>
      <Core:Property property="npc:sys:sighookpath">
         (\{ "delay:DELAY-init", "delay:DELAY-exec", "internal:INTERNAL-exec", "decide:DECIDE-init", "emoting:DECIDE", "decide:DECIDE-exec", "decide:DECIDE-post" \})
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1265593703, "catobelpas", "R", 1265593717, "catobelpas", "E", 1265593765, "catobelpas", "E", 1265593799, "catobelpas", "E", 1265593972, "catobelpas", "E", 1265593986, "catobelpas", "E", 1265594009, "catobelpas", "E", 1265594021, "catobelpas", "E", 1265594058, "catobelpas", "E", 1266338764, "slurpeeslurp", "E", 1266338798, "slurpeeslurp", "E", 1266338845, "slurpeeslurp", "E", 1266338856, "slurpeeslurp", "E", 1266338864, "slurpeeslurp", "E", 1266338874, "slurpeeslurp", "E", 1266338882, "slurpeeslurp", "E", 1266340123, "slurpeeslurp", "E", 1266340143, "slurpeeslurp", "E", 1266340370, "slurpeeslurp", "E", 1266340446, "slurpeeslurp", "E", 1266341638, "slurpeeslurp", "E", 1266341759, "slurpeeslurp", "E", 1266342137, "slurpeeslurp", "E", 1266342385, "slurpeeslurp", "K", 1266342398, "slurpeeslurp", "E", 1266342533, "slurpeeslurp", "E", 1266343115, "slurpeeslurp", "E", 1266343192, "slurpeeslurp", "E", 1266650130, "tonyd", "P", 1266650392, "tonyd", "P", 1266650435, "tonyd", "P", 1266650475, "tonyd", "P", 1266650504, "tonyd", "P", 1266650525, "tonyd", "P", 1266650602, "tonyd", "P", 1266650617, "tonyd", "P", 1266650775, "tonyd", "P", 1266651149, "tonyd", "P", 1266674060, "tonyd", "P", 1266674095, "tonyd", "P", 1266674123, "tonyd", "P", 1266674165, "tonyd", "P", 1266674216, "tonyd", "P", 1266674259, "tonyd", "P", 1266674294, "tonyd", "P", 1266674334, "tonyd", "P", 1266674604, "tonyd", "P", 1266674623, "tonyd", "P", 1266675385, "tonyd", "P", 1266675419, "tonyd", "P", 1266675991, "tonyd", "P", 1266676027, "tonyd", "P", 1266676192, "tonyd", "P", 1266676336, "tonyd", "P", 1266676455, "tonyd", "P", 1266676528, "tonyd", "P", 1266730283, "tonyd", "P", 1266730352, "tonyd", "P", 1266730521, "tonyd", "E", 1266730671, "tonyd", "E", 1266730687, "tonyd", "E", 1266730883, "tonyd", "E", 1266730895, "tonyd", "E", 1266730917, "tonyd", "E", 1266730942, "tonyd", "E", 1266731076, "tonyd", "E", 1266731171, "tonyd", "E", 1266732713, "tonyd", "P", 1266733478, "tonyd", "P", 1266733627, "tonyd", "P", 1266734602, "tonyd", "P", 1266734627, "tonyd", "P", 1266734740, "tonyd", "P", 1266734833, "tonyd", "P", 1266734855, "tonyd", "P", 1266735146, "tonyd", "P", 1266735153, "tonyd", "P", 1266735334, "tonyd", "P", 1266735690, "tonyd", "S", 1266735806, "tonyd", "S", 1266736498, "catobelpas", "E", 1266736578, "tonyd", "E", 1266736800, "tonyd", "S", 1266737001, "tonyd", "E", 1266737332, "tonyd", "E", 1266741293, "tonyd", "S", 1266741620, "tonyd", "S", 1266741686, "tonyd", "S", 1266742076, "tonyd", "S", 1267136040, "jominey", "E", 1267136059, "jominey", "S", 1267136135, "jominey", "S", 1267998221, "morwenlorelie", "S", 1267998229, "morwenlorelie", "S", 1267998271, "morwenlorelie", "E", 1267998289, "morwenlorelie", "E", 1267998322, "morwenlorelie", "K", 1269160474, "tonyd", "P", 1269160983, "tonyd", "P", 1269161512, "tonyd", "P", 1270060812, "jominey", "E", 1270060815, "jominey", "E", 1270060818, "jominey", "E", 1270060820, "jominey", "E", 1270060823, "jominey", "E", 1270060825, "jominey", "E", 1270060828, "jominey", "E", 1270060831, "jominey", "E", 1270060833, "jominey", "E", 1270060836, "jominey", "E", 1270060838, "jominey", "E", 1270060840, "jominey", "E", 1270060855, "jominey", "K", 1270060866, "jominey", "E", 1270060892, "jominey", "E", 1270060914, "jominey", "E", 1270060952, "jominey", "E", 1270060959, "jominey", "E", 1270060967, "jominey", "E", 1270061028, "jominey", "E", 1270061184, "jominey", "E", 1270061249, "jominey", "E", 1270061317, "jominey", "E", 1270061778, "jominey", "E", 1270062852, "jominey", "K", 1270062898, "jominey", "R", 1270063192, "jominey", "E", 1270063221, "jominey", "E", 1270063244, "jominey", "E", 1270063393, "jominey", "S", 1270063393, "jominey", "S", 1270063393, "jominey", "S", 1270063393, "jominey", "S", 1270063393, "jominey", "S", 1270063393, "jominey", "S", 1270063393, "jominey", "S", 1270063393, "jominey", "S", 1270063393, "jominey", "S", 1270063393, "jominey", "S", 1270063416, "jominey", "E", 1270064964, "jominey", "E", 1282500842, "jominey", "E", 1282500879, "jominey", "E", 1282500912, "jominey", "E", 1282500972, "jominey", "E", 1282500998, "jominey", "E" \})
      </Core:Property>
      <Core:Property property="sigstream">2</Core:Property>
      <Core:Property property="skill:advancedefensive">
         2
      </Core:Property>
      <Core:Property property="skill:attackingdefensive">
         0
      </Core:Property>
      <Core:Property property="skill:cutoffensive">3</Core:Property>
      <Core:Property property="skill:dodgedefensive">
         1
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="skill:feintoffensive">
         0
      </Core:Property>
      <Core:Property property="skill:fumbledefensive">
         0
      </Core:Property>
      <Core:Property property="skill:guarddefensive">
         3
      </Core:Property>
      <Core:Property property="skill:idledefensive">
         0
      </Core:Property>
      <Core:Property property="skill:recoverdefensive">
         2
      </Core:Property>
      <Core:Property property="skill:restdefensive">
         1
      </Core:Property>
      <Core:Property property="skill:retiredefensive">
         2
      </Core:Property>
      <Core:Property property="skill:salutedefensive">
         0
      </Core:Property>
      <Core:Property property="skill:thrustoffensive">
         3
      </Core:Property>
      <Core:Property property="trait:build">"hefty"</Core:Property>
      <Core:Property property="trait:color">
         "garnet-colored"
      </Core:Property>
      <Core:Property property="trait:eyeshape">
         "alert"
      </Core:Property>
      <Core:Property property="trait:size">"bulky"</Core:Property>
      <Core:Property property="trait:variation">
         "pale grey"
      </Core:Property>
      <Core:Property property="volition">1</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
