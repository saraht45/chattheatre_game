<object clone="/base/obj/thing" owner="slurpeeslurp">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="15" density="8"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="3" maxweight="10" verb2="contain" verb3="contains"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="true">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="basket"/>
            <Base:SName sname="container"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="baskets"/>
            <Base:PName pname="containers"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             woven bamboo basket
          </Base:Description>
          <Base:Description type="look">
             A woven bamboo basket, complete with lid. It stands upright with a circular base that tapers toward the sky and inward. $[if(!this."details:default:exit:closed") {   
    if($this."active:snake") {   
        return "It holds " + Describe(NewNRef($this, $this."active:snake")) + ".";   
    } else {   
        return "It appears to be empty.";   
    }  
  }]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="true" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="snakes-1" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="snake"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="snakes"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="first"/>
          <Base:Adjective adjective="sleeping"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             small collection of sleeping snakes
          </Base:Description>
          <Base:Description type="look">
             A small collection of snakes sleep soundly in the bottom of the weaved bamboo basket.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="snakes-2" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="snake"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="snakes"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="second"/>
          <Base:Adjective adjective="stirring"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             small collection of stirring snakes
          </Base:Description>
          <Base:Description type="look">
             A small collection of snakes begin to stir in the bottom of the weaved bamboo basket. They appear to be fairly lackadaiscal in their movements.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="snakes-3" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="snake"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="snakes"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="swirling"/>
          <Base:Adjective adjective="third"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             small collection of swirling snakes
          </Base:Description>
          <Base:Description type="look">
             A small collection of snakes begin to swirl up toward the lid of the basket. They appear to be shifting in an almost rhythmic fashion.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:sam:emit:snakes-2">
         X[S] \{ A series of low hissing noises can be heard from within the basket. \| The basket shifts to-and-fro as the contents inside move. \}
      </Core:Property>
      <Core:Property property="export:sam:emit:snakes-3">
         X[S] \{ The snakes spiral upward undulating their bodies rhythmically with the music. \| The snakes sway side-to-side in perfect harmony with the music. \}
      </Core:Property>
      <Core:Property property="merry:act:start">
         X[M] Set(this, "active:snake", "snakes-1");
Set(this, "details:snakes-2:hidden", TRUE);
Set(this, "details:snakes-3:hidden", TRUE);

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:capture">
         X[M] /* Return the snakes to the basket. (Only staff can do this) */

Set(this, "details:snakes-1:hidden", TRUE);
Set(this, "details:snakes-2:hidden", FALSE);
Set(this, "details:snakes-3:hidden", TRUE);
Set(this, "active:snake", "snakes-2");

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:dance">
         X[M] /* Make them dance */

this."handler:emit" = In("emit", 60 + random(45));

Set(this, "active:snake", "snakes-3");
Set(this, "details:snakes-1:hidden", TRUE);
Set(this, "details:snakes-2:hidden", TRUE);
Set(this, "details:snakes-3:hidden", FALSE);

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:emit">
         X[M] /* Emit movement. */

if(this."handler:emit") \{
    Stop(this."handler:emit");
    this."handler:emit" = nil;
\}

\$emit = UnSAM(Get(this, "sam:emit:" + Str(this."active:snake")));

EmitIn(this."base:environment", Str(\$emit));

this."handler:emit" = In("emit", 60 + random(45));

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:release">
         X[M] /* Release the snakes! (Only staff can do this) */

Set(this, "details:snakes-1:hidden", TRUE);
Set(this, "details:snakes-2:hidden", TRUE);
Set(this, "details:snakes-3:hidden", TRUE);
Set(this, "active:snake", nil);

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:sleep">
         X[M] /* Put the snakes to sleep */

if(this."handler:emit") \{
    Stop(this."handler:emit");
    this."handler:emit" = nil;
\}

Set(this, "active:snake", "snakes-1");
Set(this, "details:snakes-1:hidden", FALSE);
Set(this, "details:snakes-2:hidden", TRUE);
Set(this, "details:snakes-3:hidden", TRUE);

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:wake">
         X[M] /* Wake up the snakes */

this."handler:emit" = In("emit", 60 + random(45));

Set(this, "active:snake", "snakes-2");
Set(this, "details:snakes-1:hidden", TRUE);
Set(this, "details:snakes-2:hidden", FALSE);
Set(this, "details:snakes-3:hidden", TRUE);

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:close-what">
         X[M] Set(this, "details:snakes-1:hidden", TRUE);
Set(this, "details:snakes-2:hidden", TRUE);
Set(this, "details:snakes-3:hidden", TRUE);

if(this."active:snake" == "snakes-3") \{
    EmitIn(this."base:environment", "The snakes circularly coil their bodies around the bottom of the basket before it closes.");
    this."active:snake" = "snakes-2";
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:open-what">
         X[M] if(this."active:snake") \{
    \$activesnake = this."active:snake";
    Set(this, "details:" + \$activesnake + ":hidden", FALSE);
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:tap-dob">
         X[M] if(this."active:snake" == "snakes-1") \{
    if(this."details:default:exit:closed") \{
        EmitIn(this."base:environment", "The contents of the basket began to stir and rattle.");
    \} else \{
        EmitIn(this."base:environment", "The snakes begin to rattle and circularly shift within the basket.");
    \}

    ::wake();
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:timer:emit">
         X[M] ::emit();

return TRUE;
      </Core:Property>
      <Core:Property property="merry:witness-post:play">
         X[M] \$owner = \$\{Chatters:IC:ja:jaipur\};
\$instrument = \$\{Allegory:Props:Instruments:Wind:Pungi\};

if(this."details:default:exit:closed") \{
    return TRUE;
\}

if(!\$dob) \{
    return TRUE;
\} 

if(!\$dob[0]) \{
    return TRUE;
\}

if(NRefOb(\$dob[0])."base:urparent" != \$instrument) \{
    return TRUE;
\}

if(\$actor != \$owner) \{
    return TRUE;
\}

if(\$this."active:snake" == "snakes-3") \{
    return TRUE;
\}

\$delay(2, FALSE, "317c");

EmitIn(\$this."base:environment", Describe(\$actor) + "'s melody prompts the snakes within the basket to engage in a sinuous dance.");

::dance();

return TRUE;
      </Core:Property>
      <Core:Property property="merry:witness-post:slow">
         X[M] \$owner = \$\{Chatters:IC:ja:jaipur\};
\$instrument = \$\{Allegory:Props:Instruments:Wind:Pungi\};

if(!\$dob) \{
    return TRUE;
\} 

if(!\$dob[0]) \{
    return TRUE;
\}

if(NRefOb(\$dob[0])."base:urparent" != \$instrument) \{
    return TRUE;
\}

if(\$actor != \$owner) \{
    return TRUE;
\}

if(this."active:snake" == "snakes-1") \{
    return TRUE;
\}

EmitIn(this."base:environment", Describe(\$actor) + " slows " + \$actor."base:possessive" + " flute to a soft, soothing melody.");

\$delay(4, FALSE, "084e");

if(this."details:default:exit:closed") \{
    EmitIn(this."base:environment", "The basket begins to settle.");
\} else \{
    EmitIn(this."base:environment", "The snakes inside the basket begin a downward descent in an attempt to settle.");
\}

::sleep();

return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1147235617, "sanc_the_dark", "E", 1147235632, "sanc_the_dark", "E", 1147235661, "sanc_the_dark", "E", 1147235672, "sanc_the_dark", "E", 1147235717, "sanc_the_dark", "E", 1147235762, "sanc_the_dark", "E", 1147235791, "sanc_the_dark", "E", 1147235831, "sanc_the_dark", "E", 1147235906, "sanc_the_dark", "E", 1147235932, "sanc_the_dark", "E", 1147236055, "sanc_the_dark", "E", 1147236070, "sanc_the_dark", "E", 1147236552, "sanc_the_dark", "E", 1203299089, "slurpeeslurp", "E", 1203299120, "slurpeeslurp", "E", 1203299142, "slurpeeslurp", "E", 1203299497, "slurpeeslurp", "E", 1203299565, "slurpeeslurp", "E", 1203299694, "slurpeeslurp", "E", 1203299713, "slurpeeslurp", "E", 1203300494, "slurpeeslurp", "E", 1203300582, "slurpeeslurp", "E", 1203300667, "slurpeeslurp", "E", 1203655312, "slurpeeslurp", "E", 1203655374, "slurpeeslurp", "E", 1203655417, "slurpeeslurp", "E", 1203655656, "slurpeeslurp", "E", 1203655852, "slurpeeslurp", "E", 1203655913, "slurpeeslurp", "E", 1203656510, "slurpeeslurp", "E", 1203656594, "slurpeeslurp", "E", 1203657324, "slurpeeslurp", "E", 1203657348, "slurpeeslurp", "E", 1203657397, "slurpeeslurp", "E", 1203657435, "slurpeeslurp", "E", 1203657453, "slurpeeslurp", "E", 1203657801, "slurpeeslurp", "E", 1203658058, "slurpeeslurp", "E", 1204001204, "haystack", "E", 1244702004, "slurpeeslurp", "E", 1244702341, "slurpeeslurp", "K", 1244702423, "slurpeeslurp", "E", 1248396848, "jominey", "E", 1248396999, "jominey", "E", 1248397065, "jominey", "E", 1248397093, "jominey", "E", 1248397154, "jominey", "E", 1248397412, "jominey", "K", 1248397546, "jominey", "K", 1248397561, "jominey", "K", 1248397823, "jominey", "K", 1248397892, "jominey", "E", 1248398038, "jominey", "E", 1248398137, "jominey", "E", 1248398335, "jominey", "E", 1248399301, "jominey", "E", 1248399355, "jominey", "E", 1248399970, "jominey", "E", 1248400064, "jominey", "E", 1248400108, "jominey", "E", 1248400196, "jominey", "E", 1248400214, "jominey", "E", 1248400295, "jominey", "E", 1248400332, "jominey", "E", 1248400527, "jominey", "E", 1248400562, "jominey", "E", 1248400711, "jominey", "E", 1248400754, "jominey", "E", 1248400789, "jominey", "E", 1248401104, "jominey", "E", 1248401257, "jominey", "E", 1248401380, "jominey", "E", 1248401420, "jominey", "E", 1248401445, "jominey", "E", 1248401518, "jominey", "E", 1248401541, "jominey", "E", 1248401573, "jominey", "E", 1248401762, "jominey", "E", 1248401907, "jominey", "E", 1248401927, "jominey", "E", 1248401991, "jominey", "E", 1248402115, "jominey", "E", 1248402121, "jominey", "E", 1248402473, "jominey", "E", 1248402549, "jominey", "E", 1248402673, "jominey", "E", 1248402863, "jominey", "E", 1248402912, "jominey", "E", 1248402959, "jominey", "E", 1248403021, "jominey", "E", 1248404717, "jominey", "E", 1248404747, "jominey", "E", 1248404762, "jominey", "E", 1248404775, "jominey", "E", 1248404871, "jominey", "E", 1248404947, "jominey", "E", 1248404994, "jominey", "E", 1248405019, "jominey", "E", 1248405045, "jominey", "E", 1248405437, "jominey", "E", 1248405461, "jominey", "E", 1248405483, "jominey", "E", 1248405669, "jominey", "E", 1248405774, "jominey", "E", 1248405799, "jominey", "E", 1248405816, "jominey", "E", 1248405919, "jominey", "E", 1248468116, "jominey", "R", 1248741661, "jominey", "E", 1248741680, "jominey", "E", 1248858774, "slurpeeslurp", "E", 1270373430, "slurpeeslurp", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
