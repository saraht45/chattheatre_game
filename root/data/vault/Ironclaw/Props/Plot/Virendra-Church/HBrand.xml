<object clone="/base/obj/thing" owner="slurpeeslurp">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="2" density="7.8"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="iron"/>
            <Base:SName sname="brand"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="irons"/>
            <Base:PName pname="brands"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="branding"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.trait:brief)
          </Base:Description>
          <Base:Description type="examine">
             $(this.trait:examine)<sbr/><quality-full/>
          </Base:Description>
          <Base:Description type="look">
             $(this.trait:look)
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="head" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="head"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="heads"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="brand"/>
          <Base:Adjective adjective="branding"/>
          <Base:Adjective adjective="iron"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the iron brand's head
          </Base:Description>
          <Base:Description type="examine">
             The typically heated head of the $(this.trait:brief). This is the portion of the iron that is pressed against an object for marking. It has been forged to depict the octogram of creation with a capitalized 'H' in the center.
          </Base:Description>
          <Base:Description type="look">
             The head of the iron $(this.trait:brief). It has been forged to depict the octogram of creation with a capitalized 'H' in the center.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:symbol:tattoo">
         "the octogram of creation framing a capitalized 'H' in the center"
      </Core:Property>
      <Core:Property property="export:symbol:tattoo:adjective">
         "branded"
      </Core:Property>
      <Core:Property property="export:trait:brief">
         "iron brand"
      </Core:Property>
      <Core:Property property="export:trait:examine">
         "It is a tool which uses the process of pressing a heated metal shape against an object or person with the intention of leaving a mark. This particular brand has been forged to depict the octogram of creation with a capitalized 'H' in the center."
      </Core:Property>
      <Core:Property property="export:trait:look">
         "It is a tool which uses the process of pressing a heated metal shape against an object or person with the intention of leaving a mark. This particular brand has been forged to depict the octogram of creation with a capitalized 'H' in the center."
      </Core:Property>
      <Core:Property property="export:trait:objecttype">
         "iron"
      </Core:Property>
      <Core:Property property="merry:lib:brand:no">
         X[M] object victim, who;
string detail;

who = \$par["actor"];
victim = \$par["victim"];
detail = \$par["detail"];

EmitTo(who, Describe(victim) + " does not consent to being branded.");
EmitTo(victim, "You deny " + Describe(who) + "'s request to brand you.");

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:brand:yes">
         X[M] object victim, who;
string detail, tattoo;

who = \$par["actor"];
victim = \$par["victim"];
detail = \$par["detail"];

/* what does the brand look like? */
tattoo = "It has been "+this."symbol:tattoo:adjective"+" with "+this."symbol:tattoo";

tattoo += ".";

/* emote the branding */
EmitTo(who, "You lean forward with "+Describe(this, nil, who)+", marking "+Describe(NewNRef(victim, detail))+".");
EmitTo(victim, Describe(who)+" leans forward with "+Describe(this, who)+", marking "+Describe(NewNRef(victim, detail), nil, victim)+".");
EmitIn(victim."base:environment", Describe(who)+" leans forward with "+Describe(this, who)+", marking "+Describe(NewNRef(victim, detail))+".", who, victim);

/* mark this detail as tattood */
Set(victim, "appearance:symbol:"+detail, tattoo);
Set(victim, "appearance:symbol:"+detail+":adjective", this."symbol:tattoo:adjective");
Set(victim, "details:"+detail+":adjective:"+this."symbol:tattoo:adjective", TRUE);
Set(victim, "details:"+detail+":sname:tattoo", TRUE);
Set(victim, "details:"+detail+":sname:brand", TRUE);
Set(victim, "details:"+detail+":pname:brands", TRUE);
Set(victim, "details:"+detail+":pname:tattoos", TRUE);

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:apply-dob">
         X[M] /* check that they are applying the brand to a valid target */

if(\$this."base:environment" != \$actor) \{
  EmitTo(\$actor, "You must be holding "+Describe(this)+" to apply it.");
  return FALSE;
\}

/* check that they are applying it to only one thing */
if(\$iob \&\& (sizeof(\$iob) == 1)) \{
  /* check they are targetting a character */
  if(!NRefOb(\$iob[0])."udat:possessed") \{
    EmitTo(\$actor, "You can't apply a "+Describe(this, nil, \$actor)+" to "+Describe(\$iob[0])+".");
    return FALSE;
  \}
  /* check they are applying to the forehead */
  if(NRefDetail(\$iob[0]) != "brow") \{
    EmitTo(\$actor, "You can only apply this brand to the forehead.");
    return FALSE;
  \}
  /* check they aren't branding themselves */
  if(NRefOb(\$iob[0]) == \$actor) \{
    EmitTo(\$actor, "You're not seriously going to try and brand yourself, are you?");
    return FALSE;
  \}
  /* check they aren't targetting the default detail */
  if(NRefDetail(\$iob[0]) == "default") \{
    EmitTo(\$actor, "What body part do you intend to apply "+Describe(this, nil, \$actor)+" to?");
    return FALSE;
  \}
  /* check that they don't already have a bandage */
  if(typeof(Get(NRefOb(\$iob[0]), "combat:injury:"+NRefDetail(\$iob[0])+":bandaged")) != T_NIL) \{
    EmitTo(\$actor, Describe(\$iob[0], nil, \$actor)+" is covered by a bandage.");
    return FALSE;
  \}
  /* check that they don't already have a tattoo */
  if(typeof(Get(NRefOb(\$iob[0]), "appearance:symbol:"+NRefDetail(\$iob[0]))) != T_NIL) \{
    EmitTo(\$actor, Describe(\$iob[0], nil, \$actor)+" is already marked.");
    return FALSE;
  \}
  return TRUE;
\} else if(\$iob \&\& (sizeof(\$iob) \>= 1)) \{
  EmitTo( \$actor, "You may only apply " +Describe(this, nil, \$actor)+" to one person at a time." );
  return FALSE;
\} else \{
  EmitTo( \$actor, "What do you intend to apply " +Describe(this, nil, \$actor)+" to?" );
  return FALSE;
\}
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react:apply-dob">
         X[M] /* set the body part to be bandaged */
object victim;
string detail, tattoo;

/* sanity checking already done in the pre script */

victim = NRefOb(\$iob[0]);
detail = NRefDetail(\$iob[0]);

EmitTo(\$actor, "Requesting consent from " + Describe(victim) + ".");
interaction::question(\$actor: victim, \$question: Describe(\$actor) + " is trying to brand you. Do you consent to this action?", \$env: "TRUE", \$expires: 160, \$yes_ob: this, \$yes_fun: "brand:yes", \$no_ob: this, \$no_fun: "brand:no", \$expire_ob: this, \$expire_fun: "brand:no", \$par: ([ "victim":victim, "actor":\$actor, "detail":detail]));

return FALSE;
      </Core:Property>
      <Core:Property property="new property name">
         "New Property Value"
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1144052085, "-", "SYNC", 1221752477, "???", "R", 1238198292, "morwenlorelie", "X", 1238198369, "morwenlorelie", "X", 1238198402, "morwenlorelie", "E", 1238198432, "morwenlorelie", "E", 1238198607, "morwenlorelie", "K", 1238198615, "morwenlorelie", "E", 1238198640, "morwenlorelie", "X", 1238198669, "morwenlorelie", "K", 1238198815, "morwenlorelie", "K", 1238198832, "morwenlorelie", "E", 1238198902, "morwenlorelie", "K", 1238199067, "morwenlorelie", "R", 1238203819, "morwenlorelie", "K", 1242838936, "morwenlorelie", "R", 1242839499, "morwenlorelie", "E", 1242839722, "morwenlorelie", "X", 1242839740, "morwenlorelie", "X", 1303487282, "slurpeeslurp", "E", 1303487826, "slurpeeslurp", "E", 1303487938, "slurpeeslurp", "E", 1303488024, "slurpeeslurp", "K", 1303488081, "slurpeeslurp", "E", 1303488087, "slurpeeslurp", "E", 1303488113, "slurpeeslurp", "E", 1303488151, "slurpeeslurp", "E", 1303488203, "slurpeeslurp", "E", 1303488214, "slurpeeslurp", "E", 1303492701, "slurpeeslurp", "E", 1303492760, "slurpeeslurp", "E", 1303492783, "slurpeeslurp", "E", 1303492838, "slurpeeslurp", "E", 1303493026, "slurpeeslurp", "E", 1303493152, "slurpeeslurp", "E", 1303493353, "slurpeeslurp", "E", 1303493493, "slurpeeslurp", "E", 1303493625, "slurpeeslurp", "E", 1303493950, "slurpeeslurp", "E", 1303494562, "jominey", "E", 1303494821, "jominey", "E", 1303494998, "jominey", "E", 1303495042, "jominey", "E", 1303495189, "jominey", "E", 1303495219, "jominey", "E", 1303495234, "jominey", "E", 1303495335, "jominey", "E", 1303495363, "jominey", "E", 1303495404, "jominey", "E", 1303495451, "jominey", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
