<object clone="/base/obj/thing" owner="SkotOS">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(IronClaw:Props:Furniture:Storage:Trunk)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="1"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="NEW" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             NEW detail
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="default" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="pine"/>
          <Base:Adjective adjective="tattered"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="NEW">empty</Base:Description>
          <Base:Description type="examine">
             $[Call($this, "examine"); return nil;]
          </Base:Description>
          <Base:Description type="look">
             This sturdy, once decorative $(this.trait:color) $(this.trait:material) trunk is about two feet tall with a domed top. You notice a prominent lock on it.
          </Base:Description>
          <Base:Description type="new">empty</Base:Description>
        </Base:Descriptions>
        <Base:Exit door="true" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" keycode="keys:storage:trunk:lostdye" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="lock" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="lock"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="locks"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="NEW"/>
          <Base:Adjective adjective="corroded"/>
          <Base:Adjective adjective="iron"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             corroded iron lock
          </Base:Description>
          <Base:Description type="look">
             $[Call($this, "locklook"); return nil;]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="new" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             NEW detail
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="base:initialcontents"/>
      <Core:Property property="details:default:lastlocked">
         "Thu Feb  5 15:04:23 2009 by StoryPlotter Sirazad"
      </Core:Property>
      <Core:Property property="details:default:lastunlocked">
         "Thu Feb  5 19:28:42 2009 by StoryPlotter Sirazad"
      </Core:Property>
      <Core:Property property="lock:difficulty">11</Core:Property>
      <Core:Property property="merry:lib:examine">
         X[M] /*base emit*/
EmitTo(\$actor, "This sturdy, once decorative " +Str(\$this."trait:color")+ " "+ Str(\$this."trait:material") +" trunk is about two feet tall with a domed top. Once upon a time it has been sanded to perfection, though time has taken its toll and you no longer are able to tell what the original stain looked like. There is not really any reason to talk about quality here, the furniture's storage ruined it big time.");

/*if closed emit*/
if(\$this."details:default:exit:locked" == TRUE) \{
   EmitTo(\$actor, "The corroded iron lock on the trunk is locked.");
/*else*/
\} else if(\$this."details:default:exit:locked" == FALSE) \{
   EmitTo(\$actor, "The corroded iron lock on this trunk is open.");
\} 

/*if bashed emit*/
if(\$this."trait:isbashed" == 1) \{
   EmitTo(\$actor, "The lid of the trunk is shattered.");
/*else*/
\} else if(!\$this."trait:isbashed") \{ 
   EmitTo(\$actor, "The lid of the trunk is somewhat weak.");
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:lidlook">
         X[M] /*if closed emit*/
if(\$this."trait:isbashed" == TRUE) \{
   EmitTo(\$actor, "The lid of the trunk is bashed open. You won't be able to close that ever again.");
/*else*/
\} else \{
   EmitTo(\$actor, "The lid of the trunk is not overly firm, you might be able to bash it.");
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:locklook">
         X[M] /*if closed emit*/
if(\$this."details:default:exit:locked" == TRUE) \{
   EmitTo(\$actor, "A corroded iron lock. This lock is closed, you need a key or lockpick set to open it.");
/*else*/
\} else \{
   EmitTo(\$actor, "A corroded iron lock. This lock is open, use your key to lock the trunk.");
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:bash-dob">
         X[M] /*check if already smashes*/
if(\$this."trait:isbashed" == 1) \{
   EmitIn(\$actor."base:environment", "The trunk's lid is already in pieces. There isn't any reason to keep bashing.");
   return TRUE;\}

/*check actor's abilities*/
\$strength = Int(\$actor."trait:body");
\$agility = Int(\$actor."trait:agility");
\$mind = Int(\$actor."trait:mind");

\$effect = (3*\$strength + \$agility + \$mind)/5;

/*check if they manage to smash the trunk */
if(\$effect == 5) \{
   EmitTo(\$actor, "You pull all your abilities and position a nice hit to a spot you picked previously on the trunk, but you didn't quite manage to hit it in a way you wanted to. While the wood bends and cracks, the wood still resist. Someone more adept is needed for the task.");
   EmitIn(\$actor."base:environment", Describe(\$actor)+ "obviously gathers all " +\$actor."trait:possessive"+ " strength to deliver a nice hit to a carefully picked spot on the trunk, but the disappointed expression on " +\$actor."trait:possessive"+ " face as well as the cracking noise that signals the resistance of the trunk indicate lack of success.", \$actor);

\} else if(\$effect \> 5) \{
   EmitTo(\$actor, "You gather all your abilities and deliver a blow that proves to be fatal to the lid of the trunk smashing the trunk open. BANNNGGGG.");
   EmitIn(\$actor."base:environment", "BANNNNGGG. The lid of the trunk is crushed into pieces as " +Describe(\$actor)+ " unleashes " +\$actor."base:possessive"+ " might on the poor piece of innocent and harmless, once fully functional furniture.", \$actor);

   /*if they succeed: make the item uncloseable and unlockable and open and unlocked, change look of trunk*/
   \$this."details:default:exit:door" = FALSE;
   \$this."details:default:exit:closed" = FALSE;
   \$this."details:default:exit:keycode" = nil;
   \$this."details:default:exit:locked" = FALSE; 
   \$this."trait:isbashed" = 1;

/*emit failure*/
\} else \{
   EmitTo(\$actor, "You do your best to smash the trunk, but the trunk is sturdier then it appears to be and resists your attempts.");
   EmitIn(\$actor."base:environment", Describe(\$actor)+" tries " +\$actor."base:possessive"+ " best to smash the trunk, but the trunk is sturdier then it appears to be and resists " +\$actor."base:possessive"+ " attempts.", \$actor);
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:correct-dob">
         X[M] /*make it closeable*/
\$this."details:default:exit:door" = TRUE;

/*make it closed*/
\$this."details:default:exit:closed" = TRUE;

/*make it lockable*/
\$this."details:default:exit:keycode" = "keys:storage:trunk:lostdye";

/*make it locked*/
\$this."details:default:exit:locked" = TRUE; 
return TRUE;

/*isn't bashed*/
\$this."trait:isbashed" = nil;
      </Core:Property>
      <Core:Property property="merry:react-post:smash-dob">
         X[M] /*check if already smashes*/
if(\$this."trait:isbashed" == 1) \{return TRUE;\}

/*check actor's abilities*/
\$strength = Int(\$actor."trait:body");
\$agility = Int(\$actor."trait:agility");
\$mind = Int(\$actor."trait:mind");

\$effect = (3*\$strength + \$agility + \$mind)/5;

/*check if they manage to smash the trunk */
if(\$effect == 5) \{
   EmitTo(\$actor, "You pull all your abilities and position a nice hit to a spot you picked previously on the trunk, but you didn't quite manage to hit it in a way you wanted to. While the wood bends and cracks, the wood still resist. Someone more adept is needed for the task.");
   EmitIn(\$actor."base:environment", Describe(\$actor)+ "obviously gathers all " +\$actor."trait:possessive"+ " strength to deliver a nice hit to a carefully picked spot on the trunk, but the disappointed expression on " +\$actor."trait:possessive"+ " face as well as the cracking noise that signals the resistance of the trunk indicate lack of success.", \$actor);

\} else if(\$effect \> 5) \{
   EmitTo(\$actor, "You gather all your abilities and deliver a blow that proves to be fatal to the lid of the trunk smashing the trunk open. BANNNGGGG.");
   EmitIn(\$actor."base:environment", "BANNNNGGG. The lid of the trunk is crushed into pieces as " +Describe(\$actor)+ " unleashes " +\$actor."base:possessive"+ " might on the poor piece of innocent and harmless, once fully functional furniture.", \$actor);

   /*if they succeed: make the item uncloseable and unlockable and open and unlocked, change look of trunk*/
   \$this."details:default:exit:door" = FALSE;
   \$this."details:default:exit:closed" = FALSE;
   \$this."details:default:exit:keycode" = nil;
   \$this."details:default:exit:locked" = FALSE; 
   \$this."trait:isbashed" = 1;

/*emit failure*/
\} else \{
   EmitTo(\$actor, "You do your best to smash the trunk, but the trunk is sturdier then it appears to be and resists your attempts.");
   EmitIn(\$actor."base:environment", Describe(\$actor)+" tries " +\$actor."base:possessive"+ " best to smash the trunk, but the trunk is sturdier then it appears to be and resists " +\$actor."base:possessive"+ " attempts.", \$actor);
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:pick-what">
         X[M] /* Trying to pick the lock on the trunk */
/*is the proper details targeted?*/
if(sizeof(\$what) != 1) return FALSE;
   \$target = \$what[0];
   if(NRefDetail(\$target) != "lock") \{
        EmitTo(\$actor, "You can only pick the lock on the trunk.");
        return FALSE;
   \}

/*check for difficulty*/
if(!\$this."lock:difficulty") \{
   \$this."lock:difficulty" = random(15)+1; 
\}

/* Check if the trunk is locked */
if(\$this."details:default:exit:locked" == FALSE) \{
  EmitTo(\$actor, Describe(\$this)+" is not locked.");
  return FALSE;
\}

/* Check if we have some lockpicks */
if(!sizeof(Match(\$actor, "set", \$actor, "lockpick"))) \{
  EmitTo(\$actor, "You do not have any lockpicking tools.");
  return FALSE;
\}

/* is this jammed?*/
if(\$this."trait:jammed" == 10) \{
  EmitTo(\$actor, Describe(\$this)+" appears to be jammed. There's nothing more you can do.");
  return FALSE;
\}

/* make the lockpicking roll */
\$result = Call(\$\{IronClaw:Lib:UrPeople:System\}, "roll", \$dicearray: (\{ \$actor."trait:mind", \$actor."skill:thief:lock-picking", \$actor."career:thief:lock-picking" \}));

if(\$result \> \$this."lock:difficulty") \{
  EmitTo(\$actor, "You hear a click as you unlock "+Describe(\$target)+".");
  EmitIn(\$actor."base:environment", "You hear a click as "+Describe(\$actor)+" unlocks "+Describe(\$this)+".");
  \$this."details:default:exit:locked" == TRUE;

\} else if(\$result \< 4) \{
  EmitTo(\$actor, "You hear a click as the locking mechanism twists sickeningly.");
  EmitTo(\$this."base:environment", "You hear a click as the locking mechanism in "+Describe(\$this, nil, \$this."base:environment")+" twists sickeningly.");
  if(!\$this."trait:jammed") \{
     \$this."trait:jammed" = 1;
  \} else \{
     \$this."trait:jammed" += 1;
  \}
\} else \{
  EmitTo(\$actor, "You don't manage to unlock "+Describe(\$this)+".");
\}

return FALSE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1233430294, "balkaar", "S", 1233430309, "balkaar", "S", 1233430315, "balkaar", "S", 1233430365, "balkaar", "S", 1233430587, "balkaar", "E", 1233430818, "balkaar", "E", 1233430854, "balkaar", "E", 1233611494, "balkaar", "E", 1233611592, "balkaar", "E", 1233693047, "balkaar", "E", 1233693110, "balkaar", "E", 1233693222, "balkaar", "E", 1233693229, "balkaar", "E", 1233693236, "balkaar", "E", 1233693242, "balkaar", "E", 1233693332, "balkaar", "E", 1233693682, "balkaar", "E", 1233693693, "balkaar", "E", 1233694344, "balkaar", "E", 1233694488, "balkaar", "E", 1233694620, "balkaar", "E", 1233697196, "balkaar", "E", 1233697307, "balkaar", "E", 1233697900, "balkaar", "E", 1233697984, "balkaar", "E", 1233698069, "balkaar", "E", 1233698129, "balkaar", "S", 1233698222, "balkaar", "E", 1233698298, "balkaar", "E", 1233698380, "balkaar", "E", 1233698441, "balkaar", "E", 1233698643, "balkaar", "S", 1233857013, "balkaar", "E", 1233857433, "balkaar", "E", 1233857975, "balkaar", "E", 1233858243, "balkaar", "E", 1233859111, "balkaar", "E", 1233861887, "balkaar", "E", 1233862034, "balkaar", "E", 1233863402, "balkaar", "E", 1233863427, "balkaar", "E", 1233863460, "balkaar", "E", 1233863798, "balkaar", "E", 1233864156, "balkaar", "E", 1233864205, "balkaar", "E", 1233864347, "balkaar", "E", 1233864432, "balkaar", "E", 1233864564, "balkaar", "E", 1233864674, "balkaar", "E", 1233868319, "balkaar", "E", 1233869448, "balkaar", "E", 1233870145, "balkaar", "E", 1233870493, "balkaar", "E", 1233870672, "balkaar", "E", 1233871506, "balkaar", "E", 1233871522, "balkaar", "E", 1233871658, "balkaar", "S", 1233871670, "balkaar", "E", 1233871683, "balkaar", "S", 1233879880, "balkaar", "E", 1233880001, "balkaar", "E", 1233880088, "balkaar", "S", 1233880095, "balkaar", "S", 1233885104, "jominey", "K", 1233885151, "jominey", "K", 1233885164, "balkaar", "E", 1233885243, "jominey", "E", 1233885262, "jominey", "E", 1233885283, "jominey", "E", 1233885314, "jominey", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="trait:color">
         "mud-covered"
      </Core:Property>
      <Core:Property property="trait:material">
         "tattered pine"
      </Core:Property>
      <Core:Property property="trait:quality">2</Core:Property>
      <Core:Property property="trait:smells:lastchecked">
         1233863825
      </Core:Property>
      <Core:Property property="trait:variation">
         "faded"
      </Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
