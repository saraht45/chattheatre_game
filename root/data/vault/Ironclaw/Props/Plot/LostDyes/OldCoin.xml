<object clone="/base/obj/thing" owner="SkotOS">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="0.0001" density="4"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="coin"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="coins"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.trait:type) $(this.trait:color) $(this.trait:material) coin
          </Base:Description>
          <Base:Description type="examine">
             A  $(this.trait:type) $(this.trait:color) $(this.trait:material) coin. Upon the coin markings have been etched that are obscure and undefinable.
          </Base:Description>
          <Base:Description type="look">
             A  $(this.trait:type) $(this.trait:color) $(this.trait:material) coin.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="cash:value">100</Core:Property>
      <Core:Property property="export:cash:value">
         100
      </Core:Property>
      <Core:Property property="merry:react-post:flip-dob">
         X[M] \$delay(1, TRUE, "030f");                                                                  
EmitIn(\$actor."base:environment", Describe(\$actor)+ " flips a denar gracefully into the air, end over end, before it lands "+ oneof("tails side up", "heads side up", "tails side up", "heads side up", "tails side up", "heads side up", "tails side up", "heads side up", "tails side up", "heads side up", "tails side up", "heads side up", "tails side up", "heads side up", "tails side up", "heads side up", "tails side up", "heads side up", "tails side up", "heads side up", "tails side up", "heads side up", "tails side up", "heads side up", "tails side up", "heads side up", "tails side up", "heads side up", "tails side up", "heads side up", "tails side up", "heads side up", "tails side up", "heads side up", "tails side up", "heads side up", "tails side up", "heads side up", "tails side up", "heads side up", "tails side up", "heads side up", "tails side up", "heads side up", "tails side up", "heads side up", "tails side up", "heads side up", "tails side up", "heads side up", "on edge (Are you serious?!?)")+ " in the palm of " + \$actor."base:possessive" + " hand." );
      </Core:Property>
      <Core:Property property="merry:react-pre:deposit-what">
         X[M] /* We are checking if this coin is being dropped into a money pouch */ 
/* Set \$value to be the value of the coin */ 
\$value = \$this."cash:value"; 
 
/* Check if the coin is being dropped into a money pouch */ 
 
/* we need to test \$where exists */ 
/* test that there is only one \$where */ 
/* and check that \$where is a money pouch */ 
/* If not, return true, so the deposit can continue like normal */ 
if(!\$where \|\| (sizeof(\$where) != 1) \|\| (NRefOb(\$where[0])."trait:objecttype" != "moneypouch")) 
  return TRUE; 
 
/* to stop lag doing bad things, mark this coin as gone */ 
if(\$this.destroyed) return TRUE; 
\$this.destroyed = TRUE; 
 
/* We are depositing into a money pouch, so increase the value of the pouch accordingly */ 
\$pouch = NRefOb(\$where[0]); 
 
/* If the pouch already has cash:balance, then increase it */ 
if(\$pouch."cash:balance") \{ 
  \$pouch."cash:balance" += \$value; 
\} else \{ 
/* otherwise, set it to be the value of this coin */ 
  \$pouch."cash:balance" = \$value; 
\} 
 
/* Destroy the coin (since it's now in the money pouch) */ 
Slay(\$this); 
/* Due to spammage, removed emits */ 
/* EmitTo(\$actor, "You make a deposit into your money pouch."); 
EmitIn(\$actor."base:environment", Describe(\$actor)+ " makes a deposit into " +\$actor."base:possessive"+ " money pouch.", \$actor); */ 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:drop-what">
         X[M] /* We are checking if this coin is being dropped into a money pouch */ 
/* Set \$value to be the value of the coin */ 
\$value = \$this."cash:value"; 
 
/* Check if the coin is being dropped into a money pouch */ 
 
/* we need to test \$where exists */ 
/* test that there is only one \$where */ 
/* and check that \$where is a money pouch */ 
/* If not, return true, so the drop can continue like normal */ 
if(!\$where \|\| (sizeof(\$where) != 1) \|\| (NRefOb(\$where[0])."trait:objecttype" != "moneypouch")) 
  return TRUE; 
 
/* to stop lag doing bad things, mark this coin as gone */ 
if(\$this.destroyed) return TRUE; 
\$this.destroyed = TRUE; 
 
/* We are dropping into a money pouch, so increase the value of the pouch accordingly */ 
\$pouch = NRefOb(\$where[0]); 
 
/* If the pouch already has cash:balance, then increase it */ 
if(\$pouch."cash:balance") \{ 
  \$pouch."cash:balance" += \$value; 
\} else \{ 
/* otherwise, set it to be the value of this coin */ 
  \$pouch."cash:balance" = \$value; 
\} 
 
/* Destroy the coin (since it's now in the money pouch) */ 
Slay(\$this); 
/* Due to spammage, removed emits */ 
/* EmitTo(\$actor, "You make a deposit into your money pouch."); 
EmitIn(\$actor."base:environment", Describe(\$actor)+ " makes a deposit into " +\$actor."base:possessive"+ " money pouch.", \$actor); */ 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:start">
         X[M] \$this."trait:type" = oneof( "foreign", "odd", "obscure", "strange", "alien" ); return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1144052085, "-", "SYNC", 1221752477, "???", "R", 1230034867, "morwenlorelie", "E", 1230035039, "morwenlorelie", "X", 1230035252, "morwenlorelie", "K", 1230035261, "morwenlorelie", "E", 1230035294, "morwenlorelie", "E", 1230035544, "morwenlorelie", "E", 1233884047, "balkaar", "E", 1233884219, "balkaar", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
