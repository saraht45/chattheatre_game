<object clone="/base/obj/thing" owner="SkotOS">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Allegory:Props:Crafting:UrCrafting)"/>
    <Base:Bulk immobile="false" mass="0.3" density="1"/>
    <Base:Container flexible="true" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="lying" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="pouch"/>
            <Base:SName sname="moneypouch"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="pouches"/>
            <Base:PName pname="moneypouches"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="cotton"/>
          <Base:Adjective adjective="holed"/>
          <Base:Adjective adjective="money"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             holed {? equal | $(this.trait:color) | none || $(this.trait:color) } {? equal | $(this.trait:material) | none || $(this.trait:material) } money pouch
          </Base:Description>
          <Base:Description type="examine">
             A bag of {? equal | $(this.trait:color) | none || $(this.trait:color) } {? equal | $(this.trait:material) | none | material | $(this.trait:material) } made into a money pouch.<sbr/> Money pouches are common, from the lowliest servant to the mightiest king, everyone needs somewhere to keep their denarii. Unfortunately, this pouch appears to have various tears and one fairly large hole. {? | $(this.details:default:exit:closed) | | {? equal | $(actor) | $(this.base:environment) | This pouch contains $[if($this."cash:balance" == 100){ return "one denar."; } else if((!$this."cash:balance") || ($this."cash:balance" == 0)){ return "no money."; } else { $result = $this."cash:balance" / 100; /*if($this."cash:balance"%100 != 0) { $result = $result+"."+$this."cash:balance"%100/10; if($this."cash:balance"%10 != 0) { $result = $result+$this."cash:balance"%10; } }*/ return $result+" denarii."; }]} }
          </Base:Description>
          <Base:Description type="look">
             A bag of {? equal | $(this.trait:color) | none || $(this.trait:color) } {? equal | $(this.trait:material) | none | material | $(this.trait:material) } made into a money pouch. Unfortunately, this pouch appears to have various tears and one fairly large hole. {? | $(this.details:default:exit:closed) | | {? equal | $(actor) | $(this.base:environment) | This pouch contains $[if($this."cash:balance" == 100){ return "one denar."; } else if((!$this."cash:balance") || ($this."cash:balance" == 0)){ return "no money."; } else { $result = $this."cash:balance" / 100; /*if($this."cash:balance"%100 != 0) { $result = $result+"."+$this."cash:balance"%100/10; if($this."cash:balance"%10 != 0) { $result = $result+$this."cash:balance"%10; } }*/ return $result+" denarii."; }]} }
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:Covered value="waist"/>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:alteration:add:default:dye">
         ([ "noslay":"true", "properties":(\{ (\{ "trait:color", "trait:color" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:cash:amount_to_fill">
         10000
      </Core:Property>
      <Core:Property property="export:cash:balance">
         0
      </Core:Property>
      <Core:Property property="export:cash:max">8000</Core:Property>
      <Core:Property property="export:nip:item:cost">
         0
      </Core:Property>
      <Core:Property property="export:trait:brief">
         "pouch"
      </Core:Property>
      <Core:Property property="export:trait:material">
         "cotton"
      </Core:Property>
      <Core:Property property="export:trait:objecttype">
         "moneypouch"
      </Core:Property>
      <Core:Property property="export:trait:trash">0</Core:Property>
      <Core:Property property="merry:react-post:shake-dob">
         X[M] if(\$this."cash:balance" \> 0 ) \{            
  EmitTo(\$actor, "You shake your moneypouch and it jingles with coins.");             
  EmitIn(\$actor."base:environment", Describe(\$actor) + " shakes " + \$actor."base:possessive" + " moneypouch and it jingles with coins.", \$actor); 
\}            
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:deposit-where">
         X[M] if(NRefOb(\$what[0])."cash:value") \{    
  EmitTo(\$actor, "You have made a deposit into your money pouch.");    
  EmitIn(\$actor."base:environment", Describe(\$actor)+ " makes a deposit into " +\$actor."base:possessive"+ " money pouch.", \$actor);  
return FALSE;    
\}    
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:set-what">
         X[M] if(\$this."base:environment" != \$actor) return TRUE; 
 
if(!\$where) 
\{ 
  if(!\$evoke \|\| !sscanf(\$evoke[1..strlen(\$evoke)-2], "%*d")) 
  \{ 
    EmitTo(\$actor, "Format: Set my pouch \\"20"); 
  \} else \{ 
    \$this."cash:amount_to_fill" = Int(\$evoke[1..strlen(\$evoke)-2])*100; 
    if(\$this."cash:amount_to_fill" == 0) \{ 
      \$amount = "nothing"; 
    \} else if(\$this."cash:amount_to_fill" == 100) \{ 
      \$amount = "one denar"; 
    \} else \{ 
      if(\$this."cash:amount_to_fill" \> 50000) \{ 
        \$this."cash:amount_to_fill" = 50000; 
      \} 
      \$amount = desc_cardinal(\$this."cash:amount_to_fill"/100)+" denarii"; 
    \} 
    EmitTo(\$actor, "You set your pouch to carry "+\$amount+" when you leave your rooms or the bank."); 
  \} 
  return FALSE; 
\} 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:withdraw-dob">
         X[M] if(\$this."base:environment" != \$actor) return TRUE; 
 
/* Check we are only trying to take from one thing */ 
if(sizeof(\$dob) != 1)\{ 
  EmitTo(\$actor, "You may only take money from one thing at a time."); 
  return FALSE; 
\} 
 
/* If no evoke */ 
if(!\$evoke) \{ 
EmitTo(\$actor, "The correct syntax is: withdraw from [this] '[amount]. i.e. withdraw from my money pouch '12."); 
return FALSE; 
\} 
\$target = NRefOb(\$dob[0]); 
 
/* Check that the object is a money purse */ 
if(\$this."trait:objecttype" != "moneypouch")\{ 
  EmitTo(\$actor, "You may only get money from purses and money pouches."); 
  return FALSE; 
\} 
 
/* How much do we get? */ 
\$amount = Int(\$evoke[1..strlen(\$evoke)-2])*100; 
 
if(\$amount \> 10000) \{ 
  EmitTo(\$actor, TAG("[Withdrawing too many coins is bad for the game. Please keep them in the money pouch unless you specifically need to hand them over to another character. Even then, hand over a few, and have the other character deposit the coins first. Thank you.]", "imp")); 
  return TRUE; 
\} 
 
/* 
EmitTo(\$actor, "Amount is "+Str(\$amount)); 
EmitTo(\$actor, "The pouch holds "+Str(\$this."cash:balance")); 
*/ 
 
if(\$amount \> \$this."cash:balance") 
  \$amount = \$this."cash:balance"; 
 
/*EmitTo(\$actor, "Amount is now "+Str(\$amount));*/ 
 
/* Take the money */ 
 
/* take money from the pouch */ 
\$this."cash:balance" -= \$amount; 
 
/* Spawn the coins */ 
while(\$amount \&\& (\$amount \> 0)) 
\{ 
  if(\$amount \>= 2400) \{ 
    \$coin = Spawn(\$\{Allegory:Props:Finance:Cash:Lira\}); 
    \$amount -= 2400; 
  \} else if(\$amount \>= 100) \{ 
    \$coin = Spawn(\$\{Allegory:Props:Finance:Cash:Florin\}); 
    \$amount -= 100; 
 
/* CHEATER CATCHING CODE 
COMMENTED OUT*/ 
  \} else if(FALSE \&\& \$amount \< 100) \{ 
    \$coin = Spawn(\$\{Allegory:Props:Finance:Cash:Florin\}); 
    \$amount -= 100; 
    if(\$actor."pouchexploit:timestamp" \&\& \$actor."pouchexploit:timestamp"+60*5 \> time()) \{ 
      /* they already used this trick less than 5 minutes ago. Probably exploiting */ 
      if(\$actor."pouchexploit:counter") \{ 
        \$actor."pouchexploit:counter" = \$actor."pouchexploit:counter" + 1; 
      \} else \{ 
        \$actor."pouchexploit:counter" = 1; 
      \} 
      /* make a second record, just to be safe (and for easier checking) */ 
      if(\$actor."udat:name") \{ 
        \$tmp = Get(\$\{Ironclaw:Props:Finance:MoneyPouch\}, "pouchexploit"); 
        \$tmp[Str(\$actor."udat:name")+":"+Str(\$actor."skotos:charname")] = \$actor."pouchexploit:counter"; 
        Set(\$\{Ironclaw:Props:Finance:MoneyPouch\}, "pouchexploit", \$tmp); 
      \} 
    \} 
    \$actor."pouchexploit:timestamp" = time(); 
  \} else if(\$amount \>= 10) \{ 
    \$coin = Spawn(\$\{Ironclaw:Props:Finance:Cash:10\}); 
    \$amount -= 10; 
  \} else if(\$amount \>= 1) \{ 
    \$coin = Spawn(\$\{Ironclaw:Props:Finance:Cash:1\}); 
    \$amount -= 1; 
  \} 
  \$coin."base:environment" = \$actor; 
\} 
      EmitTo(\$actor, "You make a withdrawal from your money pouch."); 
EmitIn(\$actor."base:environment", Describe(\$actor)+ " makes a withdrawal from " +\$actor."base:possessive"+ " money pouch.", \$actor); 
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react:withdraw-iob">
         X[M] if(\$this."base:environment" != \$actor) return TRUE; 
 
/* Check we are only trying to take from one thing */ 
if(sizeof(\$iob) != 1)\{ 
  EmitTo(\$actor, "You may only take money from one thing at a time."); 
  return FALSE; 
\} 
 
\$target = NRefOb(\$iob[0]); 
 
/* Check that the object is a money purse */ 
if(\$this."trait:objecttype" != "moneypouch")\{ 
  EmitTo(\$actor, "You may only get money from purses and money pouches."); 
  return FALSE; 
\} 
 
/* If no evoke */ 
if(!\$evoke) \{ 
EmitTo(\$actor, "The correct syntax is: withdraw from [this] '[amount]. i.e. withdraw from my money pouch '12."); 
return FALSE; 
\} 
 
/* How much do we get? */ 
\$amount = Int(\$evoke[1..strlen(\$evoke)-2])*100; 
 
/* 
EmitTo(\$actor, "Amount is "+Str(\$amount)); 
EmitTo(\$actor, "The pouch holds "+Str(\$this."cash:balance")); 
*/ 
 
if(\$amount \> \$this."cash:balance") 
  \$amount = \$this."cash:balance"; 
 
/*EmitTo(\$actor, "Amount is now "+Str(\$amount));*/ 
 
/* Take the money */ 
 
/* take money from the pouch */ 
\$this."cash:balance" -= \$amount; 
 
/* Spawn the coins */ 
while(\$amount \&\& (\$amount \> 0)) 
\{ 
  if(\$amount \>= 2400) \{ 
    \$coin = Spawn(\$\{Ironclaw:Props:Finance:Cash:Aureal-broken\}); 
    \$amount -= 2400; 
  \} else if(\$amount \>= 100) \{ 
    \$coin = Spawn(\$\{Allegory:Props:Finance:Cash:Florin\}); 
    \$amount -= 100; 
 
/* CHEATER CATCHING CODE 
 COMMENTED OUT */ 
  \} else if(FALSE \&\& \$amount \< 100) \{ 
    \$coin = Spawn(\$\{Allegory:Props:Finance:Cash:Florin\}); 
    \$amount -= 100; 
    if(\$actor."pouchexploit:timestamp" \&\& \$actor."pouchexploit:timestamp"+60*5 \> time()) \{ 
      /* they already used this trick less than 5 minutes ago. Probably exploiting */ 
      if(\$actor."pouchexploit:counter") \{ 
        \$actor."pouchexploit:counter" = \$actor."pouchexploit:counter" + 1; 
      \} else \{ 
        \$actor."pouchexploit:counter" = 1; 
      \} 
      /* make a second record, just to be safe (and for easier checking) */ 
      if(\$actor."udat:name") \{ 
        \$tmp = Get(\$\{Ironclaw:Props:Finance:MoneyPouch\}, "pouchexploit"); 
        \$tmp[Str(\$actor."udat:name")+":"+Str(\$actor."skotos:charname")] = \$actor."pouchexploit:counter"; 
        Set(\$\{Ironclaw:Props:Finance:MoneyPouch\}, "pouchexploit", \$tmp); 
      \} 
    \} 
    \$actor."pouchexploit:timestamp" = time(); 
  \} else if(\$amount \>= 10) \{ 
    \$coin = Spawn(\$\{Ironclaw:Props:Finance:Cash:10\}); 
    \$amount -= 10; 
  \} else if(\$amount \>= 1) \{ 
    \$coin = Spawn(\$\{Ironclaw:Props:Finance:Cash:1\}); 
    \$amount -= 1; 
  \} 
  \$coin."base:environment" = \$actor; 
\} 
      EmitTo(\$actor, "You make a withdrawal from your money pouch."); 
EmitIn(\$actor."base:environment", Describe(\$actor)+ " makes a withdrawal from " +\$actor."base:possessive"+ " money pouch.", \$actor); 
return FALSE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:color">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:material">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="pouchexploit">
         ([ "asaia:sarai":1, "gbabe:niza":31, "merewyn:ian":327, "merewyn:maymay":153, "merewyn:whisper":89, "teetsforpres:chinco":60, "victoria_fox:aleuria":286, "victoria_fox:araceli":152, "victoria_fox:demona":11, "victoria_fox:jamus":3, "victoria_fox:julie":18, "victoria_fox:juliet":22, "victoria_fox:ramzi":2, "victoria_fox:shania":19 ])
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1144052085, "-", "SYNC", 1221752477, "???", "R", 1230034145, "morwenlorelie", "E", 1230034171, "morwenlorelie", "K", 1230034185, "morwenlorelie", "E", 1230034284, "morwenlorelie", "E", 1230034292, "morwenlorelie", "E", 1230034302, "morwenlorelie", "E", 1230034307, "morwenlorelie", "E", 1230034328, "morwenlorelie", "X", 1230034448, "morwenlorelie", "X", 1230034678, "morwenlorelie", "K" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
