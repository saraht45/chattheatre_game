<object clone="/base/obj/thing" owner="slurpeeslurp">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Ironclaw:Props:Plot:NobleHunt:Dec2014:UrFightable)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="myr"/>
            <Base:SName sname="beast"/>
            <Base:SName sname="creature"/>
            <Base:SName sname="animal"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="myrs"/>
            <Base:PName pname="beasts"/>
            <Base:PName pname="creatures"/>
            <Base:PName pname="animals"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="luxurious"/>
          <Base:Adjective adjective="pacific"/>
          <Base:Adjective adjective="piebald"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             piebald Myr  {? | $(this.trait:dead) | corpse | }
          </Base:Description>
          <Base:Description type="examine">
             A large, regal creature covered in with a luxurious piebald hide, and having large, pointed ears, four slender legs, and a seemingly pacific face. A series of sizable horns adorn the top of its head, and act as a defensive mechanism against larger predators. It does not, however, appear to be overly intelligent, and grazes lazily on soft twigs and nearby digestible shoots. It can be cut for edible meat, skinned for raw material, and the horns can be pulled off with great effort. {? | $(this.trait:meatless) | Someone appears to have already picked all the meat from this carcass. |} {? | $(this.trait:horns) | All usable horns have been removed from the head.} {? | $(this.trait:skinned) | The hide of the beast has already been removed.}
          </Base:Description>
          <Base:Description type="look">
             A large, regal creature covered in a luxurious piebald hide, and having large, pointed ears, four slender legs, and a seemingly pacific face. A series of sizable horns adorn the top of its head, and act as a defensive mechanism against larger predators. It does not, however, appear to be overly intelligent, and grazes lazily on soft twigs and nearby digestible shoots. It can be cut for edible meat, skinned for raw material, and the horns can be pulled off with great effort. {? | $(this.trait:meatless) | Someone appears to have already picked all the meat from this carcass. |} {? | $(this.trait:horns) | All usable horns have been removed from the head.} {? | $(this.trait:skinned) | The hide of the beast has already been removed.}
          </Base:Description>
          <Base:Description type="pnmae">marquest</Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:horns:quantity">
         3
      </Core:Property>
      <Core:Property property="merry:lib:take_combat_actions">
         X[M] /* When the NPC is given a turn in combat, this is the script where they decide what to do */  
int i;  
  
/* \$az = \$\{Chatters:IC:az:azrael\};  
EmitTo(\$az, "Taking an action"); */  
 
/* Is the enemy being offered a bribe? If so, take it. */ 
if(\$char.combat \&\& \$char.combat["target"]) \{ 
  \$target = \$char.combat["target"]; 
  if(\$target.combat["status"]["bribing"]) \{ 
    return Call(\$char, "fight_outcome_accept_bribe"); 
  \} 
\} 
  
switch(random(2)) \{  
  case 0:  
    Social(this, oneof("snort", "bleat"), oneof("warningly", "angrily", "threateningly")); break;  
  case 1:  
    Social(this, oneof("duck", "charge", "careen"), oneof("right", "left", "back-and-forth")); break;  
  default:  
    Social(this, oneof("snort", "bleat"), oneof("warningly", "angrily", "threateningly")); break;   
\}  
\$delay(2, TRUE, "52ac");  
  
\$actions = copy(this.combat["options"]);  
\$actions -= (\{ nil \});  
  
/* Do we need a new target? */  
if(!this.combat["target"])  
  this.combat["target"] = ::find_target();  
  
if(!this.combat["target"]) \{  
  /* We couldn't find a target. Remove ourselves from the fight. */  
  ccombat::remove_from_combat(\$fighter: this);  
  ccombat::end_turn(\$char: this);  
  return TRUE;  
\}  
  
if(!this.combat["target"].combat) \{  
  ccombat::start_fight(\$attacker: this, \$target: this.combat["target"]);  
  \$delay(0.1, TRUE, "64a5");  
\}  
  
\$turn_id = random(1000000000);  
\$params = ([ "char":this, "taking_action":TRUE, "turn_id":\$turn_id ]);  
  
  
/* Can we attack? */  
for(i=0;i\<sizeof(\$actions);i++) \{  
  if(\$actions[i][0] == "attack") \{  
    if( Call(\$actions[i][1], \$actions[i][0], \$char: \$char, \$par: nil, \$check_valid: TRUE) ) \{  
      return Call(\$actions[i][1], \$actions[i][0], \$par: \$params);  
    \}  
  \}  
\}  

/* Couldn't attack. Can we do another action? */  
for(i=0;i\<sizeof(\$actions);i++) \{  
  if(\$actions[i][0] == "aim" \|\| \$actions[i][0] == "guard") \{  
    if( Call(\$actions[i][1], \$actions[i][0], \$char: \$char, \$par: nil, \$check_valid: TRUE) ) \{  
  
      if(\$actions[i][0] == "aim") \{  
        EmitIn(this."base:environment", Describe(this)+" attempts to "+oneof("focus on "+Describe(this.combat["target"]), "line up an attack")+".");  
      \} else if(\$actions[i][0] == "guard") \{  
        EmitIn(this."base:environment", Describe(this)+" shifts side to side, attempting to read the attack.");  
      \}  
  
      return Call(\$actions[i][1], \$actions[i][0], \$par: \$params);  
    \}  
  \}  
\}  
  
/* Couldn't do anything. End the turn */  
ccombat::end_turn(\$char: this); /* Because we return TRUE above during the delay, the script won't pass for us. So we need to tell it to pass */  
return FALSE; /* This means we didn't complete our action, so the script will need to pass for us */
      </Core:Property>
      <Core:Property property="merry:react-pre:cut-dob">
         X[M] if(!\$this."body:quantity") \{ 
  \$this."body:quantity" = 4;
\}


/* check if beast has meat */
if(\$this."trait:meat" == 1) 
\{
  EmitTo(\$actor, "Someone already removed the meat from the beast.");
  return FALSE;
\}

/* emit cutting the meat */
EmitTo(\$actor, "You cut into the flesh of the Myr beast and retrieve a large slab of meat.");
EmitIn(\$actor."base:environment", Describe(\$actor)+" cuts into the flesh of the Myr beast and retrieves a large slab of meat.", \$actor);

/* spawn the meat, set counter */
\$meat = Spawn(\$\{Ironclaw:Props:Plot:NobleHunt:Dec2014:MyrSteak\});
\$meat."base:environment" = \$actor;
\$this."body:quantity" -= 1;
if(\$this."body:quantity" == 0)
\{
  \$this."trait:meat" = 1;
  \$this."trait:meatless" = 1;
  \$this."details:default:adjective:harvestable" = nil;
  Set(\$this, "details:default:adjective:meatless", TRUE);
\} 

return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:pull-dob">
         X[M] if(!\$this."horns:quantity") \{ \$this."horns:quantity" = 3; \}  
  
   /* check if creature has horns */  
   if(\$this."trait:horns") \{  
      EmitTo(\$actor, "Someone already removed the horns from this creature.");  
      return FALSE;  
   \}  
  
   /* emit pulling the horns */  
   EmitTo(\$actor, "You latch onto the creature's head and begin desperately pulling on one of the horns. With great effort, you manage to claim one as a reward.");  
   EmitIn(\$actor."base:environment", Describe(\$actor)+" latches onto the Myr's head and begins desperately pulling on one of the horns. With great effort, one is claimed as a reward for hard work.", \$actor);  
  
   /* spawn the horn, set counter */  
   \$horns = Spawn(\$\{Ironclaw:Props:Plot:NobleHunt:Dec2014:MyrHorn\});  
   \$horns."base:environment" = \$actor;  
   \$this."horns:quantity" -= 1;  
   if(\$this."horns:quantity" == 0)  \{\$this."trait:horns" = TRUE;\}  
   return FALSE;  
    return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:skin-dob">
         X[M] /* make definitions */  
   \$precision = Int(\$actor."skill:combat:precision");  
   \$tailoring = Int(\$actor."skill:alteration:tailoring");  
   \$tool= nil;  

if(\$tailoring \> \$precision) \$precision = \$tailoring;  


/* check if there is any hide left to take from the Myr */  
if(\$this."trait:skinned") \{  
  EmitTo(\$actor, "There is no usable hide left on this beast.");  
  return FALSE;  
  \}  
  
/* check if they have tools */  
if(sizeof(Match(\$actor, "dagger")) \|\| sizeof(Match(\$actor, "knife")))  
  \$tool= TRUE;  
  if(!\$tool) \{  
     EmitTo(\$actor, "You need a suitable tool for this task, such as a knife or a dagger.");  
     return FALSE;  
     \}  
  
/* check if they have skills*/  
if(!\$precision) \{  
   EmitTo(\$actor, "Despite your best efforts, skinning a beast isn't easy. You don't manage to do much, apart from shredding the skin. It never hurts to entrust those with better control over their hands or knowledge in hide handling with the task.");  
   EmitIn(\$actor."base:environment", Describe(\$actor)+" leans over the Myr's corpse and carefully attempts to peel back the hide. Despite the best efforts of "+\$actor."trait:nominative"+" , skinning a beast isn't easy. The only accomplishment is the skin being shredded, but there are still places that can be salvaged. It never hurts to entrust those with better control over their hands or knowledge in hide handling with the task.", \$actor);  
   \$this."trait:skinned" = TRUE;  
   return FALSE;\}  
  
/* set success rates */  
if(\$precision \< 4) \{  
   \$this."trait:amount" = 1;  
   \$this."trait:style" = "awkwardly";  
   \$this."trait:description" = "digs into the beast, managing to peel off a thin layer of hide while butchering the rest. Only a single yard is whole enough to be prepared later by fabric workers for garments.";  
\} else if(\$precision \< 7) \{  
   \$this."trait:amount" = 2;  
   \$this."trait:style" = "unprofessionally";  
   \$this."trait:description" = "slowly slices into the beast. The blade seems to unintentionally skip on the skin a few times, ruining the outcome considerably. Still, two yards of hide is saved, which can be further prepared by people skilled in cloth work to produce garments.";  
\} else if(\$precision \< 10) \{  
   \$this."trait:amount" = 3;  
   \$this."trait:style" = "slowly";  
   \$this."trait:description" = "gradually slips the blade under the creature's skin. Due to unfamiliarity with the beast's body, the dagger skips a few times, making it difficult to produce an undamaged amount of hide for a cloth worker. The skinner ends up having 3 yards of fabric at the end of the process which can be turned over to cloth workers for further preparation and garment making.";  
\} else if(\$precision \< 12) \{  
   \$this."trait:amount" = 5;  
   \$this."trait:style" = "familiarly";  
   \$this."trait:description" = "with slow, methodic movemeents opens the beast and peels the hide from the carcass. Small chunks of flesh still cling to the fabric and some areas are quite hard to clean. The dedicated and skilled work of the skinner rewards them with five yards of hide. A skilled clothier can easily process it usable fur for clothing.";  
\} else if(\$precision \< 17) \{  
   \$this."trait:amount" = 6;  
   \$this."trait:style" = "with agile moves";  
   \$this."trait:description" = "professionally parts the hide of the beast from the meat. Occasionally, the blade skips on the bloody skin, ruining patches of the fabric. The hard work is rewarded by 6 yards of hide ready for the needleworkers to prepare into usable fabric for clothing.";  
\} else if(\$precision \< 21) \{  
   \$this."trait:amount" = 8;  
   \$this."trait:style" = "professionally";  
   \$this."trait:description" = "knowledgeably guides the blade through the beast, separating hide from meat. Only a few, slight corrections will be needed to conceal the damage, and the skinner has managed to secure some 8 yards of the hide for preparation by clothiers.";  
\} else \{  
   \$this."trait:amount" = 10;  
   \$this."trait:style" = "masterfully";  
   \$this."trait:description" = "slips the dagger under the beast's skin with delicate ease. The hide is flawlessly removed with no flesh attached to it. A full amount of fabric is saved this way and can be given to clothiers to prepare for garment making.";  
\}   
  
/* spawn cloth */  
\$this."trait:skinned" = TRUE;  
EmitTo(\$actor, "You "+\$this."trait:style"+" skin the beast, securing " +\$this."trait:amount"+ " yard(s) of hide in the process. A person skilled in cloth work is needed to prepare the raw material into clothing.");  
EmitIn(\$actor."base:environment", Describe(\$actor)+ " "+\$this."trait:style"+" starts to skin the Myr: " +\$actor."trait:nominative"+" "+\$this."trait:description", \$actor);  
\$cloth = Spawn(\$\{Ironclaw:Props:Plot:NobleHunt:Dec2014:UnpreparedMyrHide\});  
\$cloth."trait:amount" = \$this."trait:amount";  
\$cloth."base:environment" = \$actor;  
  
return FALSE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1144052085, "-", "SYNC", 1221752477, "???", "R", 1263776745, "slurpeeslurp", "K", 1263776757, "slurpeeslurp", "E", 1263776803, "slurpeeslurp", "E", 1352053795, "slurpeeslurp", "K", 1352054384, "slurpeeslurp", "K", 1352055027, "slurpeeslurp", "E", 1352055201, "slurpeeslurp", "E", 1352055215, "slurpeeslurp", "E", 1352055413, "slurpeeslurp", "E", 1352055479, "slurpeeslurp", "E", 1352057403, "slurpeeslurp", "K", 1352059946, "slurpeeslurp", "K", 1417873453, "slurpeeslurp", "K", 1417873583, "slurpeeslurp", "K", 1417874798, "slurpeeslurp", "E", 1417874856, "slurpeeslurp", "K", 1417874880, "slurpeeslurp", "K", 1417875120, "slurpeeslurp", "E", 1417875324, "slurpeeslurp", "E", 1417875905, "slurpeeslurp", "E", 1417875931, "slurpeeslurp", "K", 1417877684, "slurpeeslurp", "K", 1417877710, "slurpeeslurp", "R", 1417879011, "slurpeeslurp", "E", 1417879120, "slurpeeslurp", "E", 1417879136, "slurpeeslurp", "K", 1417879249, "slurpeeslurp", "K", 1417879253, "slurpeeslurp", "E", 1417879315, "slurpeeslurp", "E", 1417880079, "slurpeeslurp", "E", 1417880590, "slurpeeslurp", "E", 1417880595, "slurpeeslurp", "E", 1417880839, "slurpeeslurp", "E", 1417880935, "slurpeeslurp", "E", 1417881620, "jominey", "E", 1417882092, "slurpeeslurp", "E", 1417882124, "slurpeeslurp", "K", 1417882154, "slurpeeslurp", "K", 1417882518, "slurpeeslurp", "E", 1417883476, "slurpeeslurp", "K", 1417884211, "jominey", "E", 1417884935, "jominey", "K" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
