<object clone="/base/obj/thing" owner="balkaar">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Allegory:Props:Food:Vegetables:UrVegetable)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="lying" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="pumpkin"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="pumpkins"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="orange"/>
          <Base:Adjective adjective="round"/>
          <Base:Adjective adjective="small"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             small round pumpkin
          </Base:Description>
          <Base:Description type="examine">
             This is a rotund pumpkin, too small and soft to be carved, but safe enough for throwing at people. You can try rolling them on the ground or throwing them between characters. Not to mention throwing it at no-one in particular.
          </Base:Description>
          <Base:Description type="look">
             A small rotund pumpkin too small to be carved and a little bit soft around the edges. Don't you wanna throw it at someone?
          </Base:Description>
          <Base:Description type="pbrief">
             pumpkins
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:trait:carveable">
         1
      </Core:Property>
      <Core:Property property="export:trait:dyeable">
         1
      </Core:Property>
      <Core:Property property="export:trait:name">
         "pumpkin"
      </Core:Property>
      <Core:Property property="export:trait:quantity">
         80
      </Core:Property>
      <Core:Property property="export:trait:smell">
         "rich scents of pumpkin sweetness, though a distant flavour indicates that the pumpkin might be overripe"
      </Core:Property>
      <Core:Property property="export:trait:taste">
         "of overwhelming thickness of pumpkin with a hint of mushy moisture"
      </Core:Property>
      <Core:Property property="export:trait:type">
         "pumpkin"
      </Core:Property>
      <Core:Property property="merry:react:carve-dob">
         X[M] /* carve a pumpkin */

/* are they holding it? */
if(\$this."base:environment" != \$actor) \{
 EmitTo(\$actor, "You must be holding "+Describe(\$this, nil, \$actor)+".");
 return FALSE;
\}

/* do they have a knife? */
\$knife = Match(\$actor, "knife");
if(!sizeof(\$knife)) \{
 EmitTo(\$actor, "You'll need a knife to carve "+Describe(\$this, nil, \$actor)+".");
 return FALSE;
\}


if(\$adverb \&\& \$adverb == "zestily") \{
 EmitTo(\$actor, "You carve "+Describe(\$this, nil, \$actor)+" into a bowl.");
 EmitIn(\$actor."base:environment", Describe(\$actor)+" carves "+Describe(\$this, \$actor)+" into a bowl.", \$actor);
 \$this."core:ur:parent" = \$\{IronClaw:Props:Holiday:Halloween:Props:PumpkinBowl\};
 return FALSE;
\}

EmitTo(\$actor, "You carve a scary face into "+Describe(\$this, nil, \$actor)+".");
EmitIn(\$actor."base:environment", Describe(\$actor)+" carves a scary face into "+Describe(\$this, \$actor)+".", \$actor);
\$this."core:ur:parent" = \$\{IronClaw:Props:Holiday:Halloween:Props:Pumpkin\};


return FALSE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:color">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:material">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replacesname", \$object: this);
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1599882977, "jominey", "E", 1599882991, "jominey", "E", 1599882997, "jominey", "E", 1599921361, "jominey", "E", 1620958990, "ezralee", "K" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
