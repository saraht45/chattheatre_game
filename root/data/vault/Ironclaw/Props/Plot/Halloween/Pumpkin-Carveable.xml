<object clone="/base/obj/thing" owner="jominey">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="lying" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="pumpkin"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="pumpkins"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="medium"/>
          <Base:Adjective adjective="medium-sized"/>
          <Base:Adjective adjective="round"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             {? | $(this.trait:carving) | carved | } $(this.trait:color) pumpkin
          </Base:Description>
          <Base:Description type="examine">
             This medium-sized $(this.trait:color) pumpkin {? | $(this.trait:carving) | has been carved with the image of $(this.trait:carving). | is suitable for carving. }
          </Base:Description>
          <Base:Description type="look">
             This medium-sized $(this.trait:color) pumpkin {? | $(this.trait:carving) | has been carved with the image of $(this.trait:carving). | is suitable for carving. }
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:trait:carveable">
         1
      </Core:Property>
      <Core:Property property="export:trait:dyeable">
         1
      </Core:Property>
      <Core:Property property="export:trait:smell">
         "rich scents of pumpkin sweetness, though a distant flavour indicates that the pumpkin might be overripe"
      </Core:Property>
      <Core:Property property="export:trait:taste">
         "of overwhelming thickness of pumpkin with a hint of mushy moisture"
      </Core:Property>
      <Core:Property property="merry:react:carve-dob">
         X[M] /* carve a pumpkin */

/* are they holding it? */
if(\$this."base:environment" != \$actor) \{
 EmitTo(\$actor, "You must be holding "+Describe(\$this, nil, \$actor)+".");
 return FALSE;
\}

/* do they have a knife? */
\$knife = Match(\$actor, "knife");
if(!sizeof(\$knife)) \{
 EmitTo(\$actor, "You'll need a knife to carve "+Describe(\$this, nil, \$actor)+".");
 return FALSE;
\}

if(\$this."trait:carveable" == 0) \{
    EmitTo(\$actor, "The pumpkin has already been carved.");
    return FALSE;
\}

if(!\$evoke) \{
   EmitTo(\$actor, "What image did you want to carve into the pumpkin?");
   EmitTo(\$actor, "[OOC Syntax: carve my pumpkin 'a spooky face']");
   return FALSE;
\}

\$this."trait:carving" = replace_strings(\$evoke, "\\"", "");

\$this."trait:carveable" = 0;

\$evoke = nil;

return TRUE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:color">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:material">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replacesname", \$object: this);
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1414558917, "jominey", "E", 1414558924, "jominey", "E", 1414558965, "jominey", "K", 1414558973, "jominey", "K", 1414559100, "jominey", "E", 1414559153, "jominey", "E", 1414559218, "jominey", "E", 1414559299, "jominey", "E", 1414559307, "jominey", "K", 1414559348, "jominey", "K", 1414559554, "jominey", "K", 1414616168, "rorschakovacs", "K", 1414616187, "rorschakovacs", "E", 1572489025, "ezralee", "K" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
