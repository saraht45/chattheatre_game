<object clone="/base/obj/thing" owner="SkotOS">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Shared:Systems:ItemBuilder:DefaultObject)"/>
    <Base:Bulk immobile="false" mass="0.2" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="1"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="sitting" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="true">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="frog"/>
            <Base:SName sname="amphibian"/>
            <Base:SName sname="pet"/>
            <Base:SName sname="leaffrog"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="frogs"/>
            <Base:PName pname="amphibians"/>
            <Base:PName pname="pets"/>
            <Base:PName pname="leaffrogs"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="compact"/>
          <Base:Adjective adjective="golden"/>
          <Base:Adjective adjective="leaf"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.trait:size) $(this.trait:color) leaf frog
          </Base:Description>
          <Base:Description type="examine">
             A $(this.trait:size) $(this.trait:color) leaf frog. It has solid black eyes and $(this.trait:variation)-tipped toes with a $(this.trait:marking) pattern along its body. It is constantly jumping, making it very difficult for you to keep track of.
          </Base:Description>
          <Base:Description type="look">
             A $(this.trait:size) $(this.trait:color) leaf frog. It has solid black eyes and $(this.trait:variation)-tipped toes.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="back-legs" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="leg"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="legs"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="hind"/>
          <Base:Adjective adjective="strong"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the leaf frog's strong hind legs
          </Base:Description>
          <Base:Description type="look">
             The hind legs of a $(this.trait:size) $(this.trait:color) leaf frog are strong and lean for jumping.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="body" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="body"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="bodies"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             the leaf frog's patterned body
          </Base:Description>
          <Base:Description type="look">
             The body of this $(this.trait:size) $(this.trait:color) treefrog is decorated with a $(this.trait:marking) pattern.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="eyes" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="eye"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="eyes"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="black"/>
          <Base:Adjective adjective="round"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the leaf frog's round black eyes
          </Base:Description>
          <Base:Description type="look">
             The round black eyes of the $(this.trait:size) $(this.trait:color) leaf frog.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="front-legs" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="leg"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="legs"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="front"/>
          <Base:Adjective adjective="thin"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the leaf frog's thin front legs
          </Base:Description>
          <Base:Description type="look">
             The thin front legs of the $(this.trait:size) $(this.trait:color) leaf frog. They aid it in jumping.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="legs" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="leg"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="legs"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             compact golden treefrog's legs
          </Base:Description>
          <Base:Description type="look">
             A compact golden treefrog has a pair of thin front legs and a pair of strong hind legs for leaping.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="mouth" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="mouth"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="mouths"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             the leaf frog's mouth
          </Base:Description>
          <Base:Description type="look">
             The mouth of the $(this.trait:size) $(this.trait:color) leaf frog. A long tongue occasionally pokes out to scoop up passing treats.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="skin" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="skin"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="skins"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="slick"/>
          <Base:Adjective adjective="smooth"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the leaf frog's smooth, slick skin
          </Base:Description>
          <Base:Description type="look">
             The skin of this $(this.trait:size) $(this.trait:color) leaf frog is smooth and slick with a $(this.trait:marking) pattern spanning the length of the body.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="tongue" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="tongue"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="tongues"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="sticky"/>
          <Base:Adjective adjective="stretchy"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the leaf frog's stretchy, sticky tongue
          </Base:Description>
          <Base:Description type="look">
             The stretchy, sticky tongue of the $(this.trait:size) $(this.trait:color) leaf frog. It occasionally snaps out to capture passing delicacies.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="voice" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="abrupt"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the leaf frog's abrupt ribbit
          </Base:Description>
          <Base:Description type="look">
             This is not a real thing.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="approval:description">
         "Pet- Compact golden treefrog"
      </Core:Property>
      <Core:Property property="approval:time">
         1255337674
      </Core:Property>
      <Core:Property property="approval:unapproved">
         1
      </Core:Property>
      <Core:Property property="base:initialcontents"/>
      <Core:Property property="error">
         "Libraries are needed: \<Lib:NIP:lib:emoting\>"
      </Core:Property>
      <Core:Property property="export:nip-core:hooks">
         ([ "decide":\<Lib:NIP:base:hooks:decide\>, "delay":\<Lib:NIP:base:hooks:delay\>, "emoting":\<Lib:NIP:lib:emoting\>, "freemoting":\<Lib:NIP:lib:freemoting\>, "internal":\<Lib:NIP:base:hooks:internal\>, "movement":\<Lib:NIP:lib:movement\>, "resource-control":\<Lib:NIP:lib:resource-control\> ])
      </Core:Property>
      <Core:Property property="export:nip-core:inherits">
         ([ \<Lib:NIP:base:lib:hooks\>:(\{ "lib:core:find-hook", "lib:core:register-hook", "lib:core:unregister-hook", "lib:modify:hooks", "setprop-post:hook" \}), \<Lib:NIP:base:lib:signals\>:(\{ "lib:modify:signals", "setprop-post:signal", "lib:calc_sighookpath" \}), \<Lib:NIP:base:lib:stream\>:(\{ "setprop-post:sigexecptr", "setprop-post:sigstream" \}), \<Lib:NIP:base:signals:DECIDE\>:(\{ "setprop-post:decide" \}), \<Lib:NIP:lib:emoting\>:(\{ "lib:handler:emoting:parse", "lib:behave", "lib:handler:emoting:preparse" \}), \<Lib:NIP:lib:freemoting\>:(\{ "lib:handler_freemote" \}), \<Lib:NIP:lib:movement\>:(\{ "lib:core_movement_exit" \}), \<Lib:NIP:lib:resource-control\>:(\{ "witness-post:login%nip:resource-control", "witness:enter-from%nip:resource-control", "witness:teleport%resource-control", "lib:entering" \}) ])
      </Core:Property>
      <Core:Property property="export:nip-core:libraries">
         (\{ \<Lib:NIP:base:lib:signals\>, \<Lib:NIP:base:lib:hooks\>, \<Lib:NIP:base:lib:stream\>, \<Lib:NIP:lib:resource-control\>, \<Kalle:renamed-to-restore-MOVED-nip-object:Lib:NIP:core\>, \<Lib:NIP:base:signals:DELAY\>, \<Lib:NIP:base:signals:DECIDE\>, \<Lib:NIP:base:signals:INTERNAL\>, \<Lib:NIP:lib:emoting\>, \<Lib:NIP:lib:freemoting\>, \<Lib:NIP:lib:movement\> \})
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:behavior:">
         ([ 4:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:emoting:frequency">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:freemoting:frequency">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:hints:">
         ([ 4:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:movement:frequency">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:resource-control:ttl">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:prop:nip:trait:resource-control:ttl_increase">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="export:nip-core:sighookpath">
         (\{ "delay:DELAY-init", "delay:DELAY-exec", "internal:INTERNAL-exec", "decide:DECIDE-init", "emoting:DECIDE", "freemoting:DECIDE", "movement:DECIDE", "decide:DECIDE-exec", "decide:DECIDE-post" \})
      </Core:Property>
      <Core:Property property="export:nip-core:signals">
         ([ 10:"DELAY", 500:"INTERNAL", 1000:"DECIDE" ])
      </Core:Property>
      <Core:Property property="export:nip-core:system:revision">
         44
      </Core:Property>
      <Core:Property property="export:nip:trait:freemoting:frequency">
         20
      </Core:Property>
      <Core:Property property="export:nip:trait:freemoting:steal-frequency">
         10
      </Core:Property>
      <Core:Property property="export:nip:trait:movement:frequency">
         10
      </Core:Property>
      <Core:Property property="export:nip:trait:resource-control:ttl">
         1800
      </Core:Property>
      <Core:Property property="export:nip:trait:resource-control:ttl_increase">
         600
      </Core:Property>
      <Core:Property property="loading">1</Core:Property>
      <Core:Property property="merry:act:start">
         X[M] \$this."trait:color" = oneof("vibrant orange", "vibrant blue", "vibrant green", "ruby red", "vibrant pink", "vibrant purple", "pale amber", "wild tangerine", "vivid red", "fuschia", "rainbow-colored", "vivid persimmon", "bright yellow", "albino", "lush green", "dark wine-colored", "seashell white", "shocking green", "honey-colored", "misty blue", "shadowy black", "outrageous orange", "woody brown", "golden yellow", "golden orange", "silvery-green", "silvery-blue", "gold", "storm grey", "lightning yellow", "silvery-white");
\$this."trait:size" = oneof("oblong", "itty bitty", "tiny", "very small", "compact", "miniature", "miniscule", "beefy", "fat", "plump", "pot-bellied", "slender", "sleek", "waifish", "oversized", "dainty", "athletic", "agile", "medium-sized", "large", "hulking", "palm-sized", "delicate", "fragile", "puny");
\$this."trait:variation" = oneof("black", "white", "yellow", "orange", "green", "beige", "grey", "pink", "red", "purple", "silver", "gold", "bronze", "copper", "plum", "amber", "turquoise", "cerulean", "lilac", "cerise", "ochre");
\$this."trait:marking" = oneof("colorful diagonal", "repetitive heart-shaped", "spiraling star-shaped", "heavily dotted", "wavy lined", "symmetrical moon-shaped", "colorful streaked", "random dotted", "complex geometric", "splotched", "polka dotted", "decorative spackled");

return TRUE;
      </Core:Property>
      <Core:Property property="merry:inherit:act:start">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:behave">
         \<Lib:NIP:lib:emoting\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:calc_sighookpath">
         \<Lib:NIP:base:lib:signals\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:find-hook">
         \<Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:merry_add">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:merry_delete">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:register-hook">
         \<Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:sysupdate">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core:unregister-hook">
         \<Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:core_movement_exit">
         \<Lib:NIP:lib:movement\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:decide:decide-exec">
         \<Lib:NIP:base:hooks:decide\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:decide:decide-init">
         \<Lib:NIP:base:hooks:decide\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:decide:decide-post">
         \<Lib:NIP:base:hooks:decide\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:delay:delay-exec">
         \<Lib:NIP:base:hooks:delay\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:delay:delay-init">
         \<Lib:NIP:base:hooks:delay\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:emoting:decide">
         \<Lib:NIP:lib:emoting\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:entering">
         \<Lib:NIP:lib:resource-control\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:find_nip_object">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:freemoting:decide">
         \<Lib:NIP:lib:freemoting\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:handler:emoting:parse">
         \<Lib:NIP:lib:emoting\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:handler:emoting:preparse">
         \<Lib:NIP:lib:emoting\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:handler_freemote">
         \<Lib:NIP:lib:freemoting\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:heartbeat">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:internal:internal-exec">
         \<Lib:NIP:base:hooks:internal\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:log">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:modify:hooks">
         \<Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:modify:libraries">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:modify:signals">
         \<Lib:NIP:base:lib:signals\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:movement:decide">
         \<Lib:NIP:lib:movement\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:ncs:handler">
         \<Lib:NIP:NCS\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:shutdown">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:add">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:decide">
         \<Lib:NIP:base:signals:DECIDE\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:del">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:delete">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:error">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:hook">
         \<Lib:NIP:base:lib:hooks\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:nip">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:nip-core">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:sigexecptr">
         \<Lib:NIP:base:lib:stream\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:signal">
         \<Lib:NIP:base:lib:signals\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:sigstream">
         \<Lib:NIP:base:lib:stream\>
      </Core:Property>
      <Core:Property property="merry:inherit:setprop-post:sub">
         \<Lib:NIP:core\>
      </Core:Property>
      <Core:Property property="merry:inherit:witness-post:login%nip:resource-control">
         \<Lib:NIP:lib:resource-control\>
      </Core:Property>
      <Core:Property property="merry:inherit:witness:enter-from%nip:resource-control">
         \<Lib:NIP:lib:resource-control\>
      </Core:Property>
      <Core:Property property="merry:inherit:witness:teleport%resource-control">
         \<Lib:NIP:lib:resource-control\>
      </Core:Property>
      <Core:Property property="merry:react-post:croak-iob">
         X[M] /* describe the frog being croaked at */
EmitTo(\$actor, "The frog inquisitively stares at you before croaking responsively at your voice."); 
EmitIn(\$actor."base:environment", "The frog inquisitively stares about before croaking responsively.", \$actor); 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:kiss-dob">
         X[M] /* describe the frog being kissed */
EmitTo(\$actor, "The frog darts it's stretchy, slimy tongue outward, lashing your lips vengefully. What did you expect, for it to turn into a prince or a princess? Hah!"); 
EmitIn(\$actor."base:environment", "The frog darts it's stretchy, slimy tongue outward, lashing the lips of the kisser vengefully. Some fairy tale reaction, huh?", \$actor); 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:name-dob">
         X[M] if(\$actor == \$this."trait:ownerone" \|\| \$actor == \$this."trait:ownertwo")\{
if(this."trait:name") \{
  EmitTo(\$actor, Describe(this)+" already has a name. Sheesh.");
  return TRUE;
\}

\$name = capitalize(\$evoke[1..strlen(\$evoke)-2]);
/* If we have any punctuation at the end of the command, remove it */
if(!((\$name[strlen(\$name)-1] \>= 97) \&\& (\$name[strlen(\$name)-1] \<= 122)) \&\& !((\$name[strlen(\$name)-1] \>= 65) \&\& (\$name[strlen(\$name)-1] \<= 90)))
  \$name = \$name[0..strlen(\$name)-2];
/* Only take the first word of the name */
sscanf(\$name, "%s %*s", \$name);

/* Tell the actor that this was successful */
EmitTo(\$actor, Describe(this)+" will now respond to "+\$name+".");

/* Set the name */
this."trait:name" = \$name;
/* set the sname */
Set(this, "details:default:sname:"+lower_case(\$name), 1);


return TRUE;
\} else \{return FALSE;\}
      </Core:Property>
      <Core:Property property="merry:react-post:pet-dob">
         X[M] /* describe the frog being petted */
EmitTo(\$actor, "As you pet the frog, it begins to gently ribbit. Surprisingly, it stands still for your attention."); 
EmitIn(\$actor."base:environment", "As the frog is petted, it begins to gently ribbit. Surprisingly, it stands still for the attention.", \$actor); 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:poke-dob">
         X[M] /* describe the frog being poked */
EmitTo(\$actor, "The leaf frog's eyes bulge and it croaks abruptly at your less-than-appealing approach."); 
EmitIn(\$actor."base:environment", "The leaf frog's eyes bulge and an abrupt croak escapes it's mouth as it reacts to being touched in such a reproachable fashion.", \$actor); 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:ribbit-close">
         X[M] /* describe the frog being ribbited at */
EmitTo(\$actor, "The frog stares at you in amazement as it listens to your voice. It hops forward, apparently encouraged by the sound."); 
EmitIn(\$actor."base:environment", "The frog stares in amazement for a brief moment before happily hopping toward the extended ribbit.", \$actor); 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:touch-dob">
         X[M] /* describe the frog being touched */
EmitTo(\$actor, "The frog hops startledly as soon as your fingertips touch it's slick skin. It croaks in protest before darting toward the nearest shadow to seek protection."); 
EmitIn(\$actor."base:environment", "The frog hops startledly upon being touched and croaks in protest before darting toward the nearest shadow in search of protection.", \$actor); 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:take">
         X[M] /* Record what room the actor is in */
\$room = \$actor."Base:environment";

/* if the pet has no owner, let the first person to take it become the owner */
if(!\$this."trait:ownerone")
 \$this."trait:ownerone" = \$actor;


/* Check if the actor is allowed to pick up the pet */
  /* check if \$actor is the pet's parent */
if(\$actor == \$this."trait:ownerone" \|\| \$actor == \$this."trait:ownertwo") \{
  /* if the actor is allowed to pick up the pet */
  /* tell the actor that they picked up the pet */
  /* tell the room that the actor picked up the pet */
  EmitTo(\$actor, "You pick up "+Describe(\$this)+".");
  EmitIn(\$room, Describe(\$actor)+" picks up "+ Describe(\$this)+".", \$actor);
  \$this."base:environment" = \$actor;

\} else \{
  /* the actor is not the pet's mother */

  /* if the pet is already being held by someone */
  if(\$this."base:environment"."base:volition") \{
    /* use the normal give/take/offer code */
    return TRUE;
  \} else \{
    /* tell the actor that they can't take the pet */
    /* tell the room that the actor is a kidnapper! */
    EmitTo(\$actor, "That pet is not yours!");
    EmitIn(\$room, Describe(\$actor)+" attempts to take "+ Describe(\$this)+".", \$actor);
  \}
\}

/* return false, so that the actor doesn't see a message about not being allowed to pick up the pet */
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react:control-dob">
         X[M] /* check if we are the mother, or if we are carrying the pet */
if((\$actor != \$this."base:environment") \&\& (\$actor != \$this."trait:ownerone" \|\| \$actor != \$this."trait:ownertwo"))
\{
  /* we aren't allowed to give commands */
  EmitTo(\$actor, "You cannot control "+Describe(\$this)+" unless you are carrying "+\$this."base:objective"+".");
  return FALSE;
\}

if(\$evoke) \{

  /* If the actor gave a command */
  \$command = \$evoke[1..strlen(\$evoke)-2];

  if(\$command == "croak") \{
    EmitIn(\$actor."base:environment", Describe(\$this)+" lets out a low croak.");
  \} else if(\$command == "dance") \{
    EmitIn(\$actor."base:environment", Describe(\$this)+" dances with " + \$this."base:possessive" + " hind legs spiritedly.");
  \} else if(\$command == "hold-me") \{
    EmitIn(\$actor."base:environment", Describe(\$this)+" searches for someone to hold " + \$this."base:objective" + ".");
  \} else if(\$command == "pout") \{
    EmitIn(\$actor."base:environment", Describe(\$this, nil, nil, STYLE_NONPOSS)+" lifts " + \$this."base:possessive" + " eyes at " + Describe(\$actor) + " in an almost pleading fashion.");
  \} else if(\$command == "sleep") \{
    EmitIn(\$actor."base:environment", Describe(\$this)+" sleeps undisturbedly on " + \$actor."base:possessive" + " shoulder.", \$actor);
    EmitTo(\$actor, Describe(\$this, nil, \$actor) + " sleeps undisturbedly on your shoulder.");
  \} else if(\$command == "hop") \{
    EmitIn(\$actor."base:environment", Describe(\$this)+" daringly tries to hop off of " + \$actor."base:possessive" + " shoulder.");
  \} else if(\$command == "curious") \{
    EmitIn(\$actor."base:environment", Describe(\$this, nil, nil, STYLE_NONPOSS)+ " curiously gazes at nearby objects and people.");
  \} else if(\$command == "hungry") \{
    EmitIn(\$actor."base:environment", Describe(\$this, nil, nil, STYLE_NONPOSS)+ " rests lifelessly on " + Describe(\$actor) + "'s shoulder before abruptly lashing out " + \$this."base:possessive" + " tongue to secure a meal.");
  \} else if(\$command == "nudge-kiss") \{
    EmitIn(\$actor."base:environment", Describe(\$this, nil, nil, STYLE_NONPOSS)+" nudgingly kisses " +Describe(\$actor) + ".");
  \} else if(\$command == "snuggle") \{
    EmitIn(\$actor."base:environment", Describe(\$this, nil, nil, STYLE_NONPOSS)+" lightly snuggles " + Describe(\$actor) +"'s neck.");
  \} else if(\$command == "coo") \{
    EmitIn(\$actor."base:environment", Describe(\$this) + " makes unnatural cooing sounds.");
  \} else if(\$command == "play") \{
    EmitIn(\$actor."base:environment", Describe(\$this) + " gazes blankly at "+ \$actor."base:objective" + " as " + \$actor."base:pronoun" + " makes foolish gestures.");
  \} else if(\$command == "peekaboo") \{
    EmitIn(\$actor."base:environment", Describe(\$this, nil, nil, STYLE_NONPOSS)+" ridiclously observes as " + Describe(\$actor) + " repeatedly hides and reveals " + \$actor."base:possessive" + " face.");
  \} else if(\$command == "sleepy") \{
    switch(random(3)) \{
      case 2:
        EmitIn(\$actor."base:environment", Describe(\$this)+" blinks wearily.");
        break;
      case 1:
        EmitIn(\$actor."base:environment", Describe(\$this)+" attempts to stay awake.");
        break;
      case 0:
        EmitIn(\$actor."base:environment", Describe(\$this)+" nearly falls and blinks wakefully.");
        break;
      default:
        break;
    \}
  \} else \{
  EmitTo(\$actor, "Valid controls for "+Describe(\$this)+" are: croak, dance, hold-me, pout, sleep, hop, curious, hungry, peekaboo, nudge-kiss, snuggle, coo, play and sleepy.");
  \}

\} else \{

  /* If the actor did NOT give a command */
   EmitTo(\$actor, "You must include a command you want followed. Such as: control "+Describe(\$this, nil, \$actor)+ " 'sleep'.");

\}
return FALSE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:color">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:object">
         X[M] Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);   
Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replacesname", \$object: this);   
return TRUE;
      </Core:Property>
      <Core:Property property="ndp">
         " *** FINISHED ADDITION *** "
      </Core:Property>
      <Core:Property property="nip-core:hooks">
         ([ "decide":\<Lib:NIP:base:hooks:decide\>, "delay":\<Lib:NIP:base:hooks:delay\>, "emoting":\<Lib:NIP:lib:emoting\>, "freemoting":\<Lib:NIP:lib:freemoting\>, "internal":\<Lib:NIP:base:hooks:internal\>, "movement":\<Lib:NIP:lib:movement\>, "resource-control":\<Lib:NIP:lib:resource-control\> ])
      </Core:Property>
      <Core:Property property="nip-core:inherits">
         ([ \<Lib:NIP:base:lib:hooks\>:(\{ "lib:core:find-hook", "lib:core:register-hook", "lib:core:unregister-hook", "lib:modify:hooks", "setprop-post:hook" \}), \<Lib:NIP:base:lib:signals\>:(\{ "lib:modify:signals", "setprop-post:signal", "lib:calc_sighookpath" \}), \<Lib:NIP:base:lib:stream\>:(\{ "setprop-post:sigexecptr", "setprop-post:sigstream" \}), \<Lib:NIP:base:signals:DECIDE\>:(\{ "setprop-post:decide" \}), \<Lib:NIP:lib:emoting\>:(\{ "lib:handler:emoting:parse", "lib:behave", "lib:handler:emoting:preparse" \}), \<Lib:NIP:lib:freemoting\>:(\{ "lib:handler_freemote" \}), \<Lib:NIP:lib:movement\>:(\{ "lib:core_movement_exit" \}), \<Lib:NIP:lib:resource-control\>:(\{ "witness-post:login%nip:resource-control", "witness:enter-from%nip:resource-control", "witness:teleport%resource-control", "lib:entering" \}) ])
      </Core:Property>
      <Core:Property property="nip-core:libraries">
         (\{ \<Lib:NIP:base:lib:signals\>, \<Lib:NIP:base:lib:hooks\>, \<Lib:NIP:base:lib:stream\>, \<Lib:NIP:lib:resource-control\>, \<Kalle:renamed-to-restore-MOVED-nip-object:Lib:NIP:core\>, \<Lib:NIP:base:signals:DELAY\>, \<Lib:NIP:base:signals:DECIDE\>, \<Lib:NIP:base:signals:INTERNAL\>, \<Lib:NIP:lib:emoting\>, \<Lib:NIP:lib:freemoting\>, \<Lib:NIP:lib:movement\> \})
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:behavior:">
         ([ 4:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:emoting:frequency">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:freemoting:frequency">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:hints:">
         ([ 4:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:movement:frequency">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:resource-control:ttl">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="nip-core:prop:nip:trait:resource-control:ttl_increase">
         ([ 1:1 ])
      </Core:Property>
      <Core:Property property="nip-core:sighookpath">
         (\{ "delay:DELAY-init", "delay:DELAY-exec", "internal:INTERNAL-exec", "decide:DECIDE-init", "emoting:DECIDE", "freemoting:DECIDE", "movement:DECIDE", "decide:DECIDE-exec", "decide:DECIDE-post" \})
      </Core:Property>
      <Core:Property property="nip-core:signals">
         ([ 10:"DELAY", 500:"INTERNAL", 1000:"DECIDE" ])
      </Core:Property>
      <Core:Property property="nip-core:system:revision">
         44
      </Core:Property>
      <Core:Property property="nip:trait:freemoting:frequency">
         20
      </Core:Property>
      <Core:Property property="nip:trait:freemoting:steal-frequency">
         10
      </Core:Property>
      <Core:Property property="nip:trait:movement:frequency">
         10
      </Core:Property>
      <Core:Property property="nip:trait:resource-control:ttl">
         1800
      </Core:Property>
      <Core:Property property="nip:trait:resource-control:ttl_increase">
         600
      </Core:Property>
      <Core:Property property="npc:resource-control:live_time">
         1256690054
      </Core:Property>
      <Core:Property property="npc:status:spawndate">
         1256690054
      </Core:Property>
      <Core:Property property="npc:sys:sighookpath">
         (\{ "delay:DELAY-init", "delay:DELAY-exec", "internal:INTERNAL-exec", "decide:DECIDE-init", "emoting:DECIDE", "freemoting:DECIDE", "movement:DECIDE", "decide:DECIDE-exec", "decide:DECIDE-post" \})
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1256685045, "slurpeeslurp", "R", 1256685478, "slurpeeslurp", "E", 1256685512, "slurpeeslurp", "E", 1256686515, "slurpeeslurp", "E", 1256686641, "slurpeeslurp", "E", 1256686794, "slurpeeslurp", "E", 1256686873, "slurpeeslurp", "E", 1256686921, "slurpeeslurp", "E", 1256686946, "slurpeeslurp", "E", 1256686982, "slurpeeslurp", "E", 1256687026, "slurpeeslurp", "E", 1256687069, "slurpeeslurp", "E", 1256687112, "slurpeeslurp", "E", 1256687132, "slurpeeslurp", "E", 1256687140, "slurpeeslurp", "E", 1256687146, "slurpeeslurp", "E", 1256687154, "slurpeeslurp", "E", 1256687166, "slurpeeslurp", "E", 1256687173, "slurpeeslurp", "E", 1256687179, "slurpeeslurp", "E", 1256687186, "slurpeeslurp", "E", 1256687193, "slurpeeslurp", "E", 1256687200, "slurpeeslurp", "E", 1256687305, "slurpeeslurp", "E", 1256687419, "slurpeeslurp", "E", 1256687453, "slurpeeslurp", "E", 1256687597, "slurpeeslurp", "E", 1256687634, "slurpeeslurp", "E", 1256687920, "slurpeeslurp", "E", 1256687976, "slurpeeslurp", "E", 1256688102, "slurpeeslurp", "E", 1256688150, "slurpeeslurp", "E", 1256688274, "slurpeeslurp", "E", 1256688295, "slurpeeslurp", "E", 1256688315, "slurpeeslurp", "E", 1256688377, "slurpeeslurp", "E", 1256688400, "slurpeeslurp", "E", 1256688441, "slurpeeslurp", "E", 1256688609, "slurpeeslurp", "E", 1256688769, "slurpeeslurp", "E", 1256690591, "jominey", "S", 1256690595, "jominey", "S", 1256690598, "jominey", "S", 1256777641, "jominey", "S", 1256777697, "jominey", "E", 1256777877, "jominey", "E", 1256777907, "jominey", "E", 1256778003, "jominey", "E", 1256778086, "jominey", "E", 1256778115, "jominey", "E", 1256778162, "jominey", "E", 1256781012, "jominey", "E", 1256945304, "tonyd", "E", 1256945317, "tonyd", "R" \})
      </Core:Property>
      <Core:Property property="sigstream">2</Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
