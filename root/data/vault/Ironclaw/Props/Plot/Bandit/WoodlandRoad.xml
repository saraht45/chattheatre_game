<object clone="/base/obj/thing" owner="slurpeeslurp">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="10000" maxweight="10000"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="true"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="100" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="false" under="false" on="false" inside="false" near="true" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="here"/>
            <Base:SName sname="road"/>
            <Base:SName sname="street"/>
            <Base:SName sname="room"/>
            <Base:SName sname="woodland"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="heres"/>
            <Base:PName pname="roads"/>
            <Base:PName pname="streets"/>
            <Base:PName pname="rooms"/>
            <Base:PName pname="woodlands"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             woodland road
          </Base:Description>
          <Base:Description type="examine">
             A simple woodland road running north and south. Large masses of trees line either side of it.
          </Base:Description>
          <Base:Description type="glance">
             A simple woodland road, lined by trees on either side.
          </Base:Description>
          <Base:Description type="look">
             A simple woodland road running north and south. Large masses of trees line either side of it.
          </Base:Description>
          <Base:Description type="mapurl">
             http://i441.photobucket.com/albums/qq139/storyguide_nyx/woodland-road-thomas-young.jpg
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="exit-northwest" prime="false" def="true" abstract="false" hidden="true" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="true" inside="false" near="true" over="false" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="trail"/>
            <Base:SName sname="exit"/>
            <Base:SName sname="nw"/>
            <Base:SName sname="northwest"/>
            <Base:SName sname="northwestern"/>
            <Base:SName sname="northwestward"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="trails"/>
            <Base:PName pname="exists"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             the northwestern trail
          </Base:Description>
          <Base:Description type="examine">
             The main road gradually gives way to a trail leading northwest. $[Call($this, "look_trail"); return nil;]
          </Base:Description>
          <Base:Description type="look">
             The main road gradually gives way to a trail leading northwest.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit dest="NREF(Ironclaw:Props:Plot:Bandit:Campsite|exit-southeast)" door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false">
          <Base:Direction dir="northwest"/>
        </Base:Exit>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="branch" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="false" near="true" over="true" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="branch"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="branches"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="lower"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             low branch on the oak tree
          </Base:Description>
          <Base:Description type="examine">
             One of the oak trees lower branches has been taken over by a swarm of honey bees and a newly-created beehive of large proportions.
          </Base:Description>
          <Base:Description type="look">
             One of the oak trees lower branches has been taken over by a swarm of bees and a newly-created beehive.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="creek" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="false" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="creek"/>
            <Base:SName sname="river"/>
            <Base:SName sname="water"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="creeks"/>
            <Base:PName pname="rivers"/>
            <Base:PName pname="waters"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="dirty"/>
          <Base:Adjective adjective="small"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             small creek
          </Base:Description>
          <Base:Description type="examine">
             A small, clear creek can be seen a short distance into the forest. It twists its way northward, accompanied by the quiet trickling sound of water.
          </Base:Description>
          <Base:Description type="look">
             A small creek twists its way northward, accompanied by the quiet trickling sound of water.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="dirt" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="true" under="false" on="true" inside="true" near="true" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="dirt"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="dirts"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             some dirt
          </Base:Description>
          <Base:Description type="examine">
             Some dirt has been unearthed from beneath the grass.
          </Base:Description>
          <Base:Description type="look">
             Some dirt has been unearthed from beneath the grass.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="footprints" prime="false" def="true" abstract="false" hidden="true" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="footprint"/>
            <Base:SName sname="print"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="footprints"/>
            <Base:PName pname="prints"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             some footprints
          </Base:Description>
          <Base:Description type="look">
             $[Call($this, "look_footprint"); return nil;]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="grass" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="true" inside="true" near="true" over="true" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="grass"/>
            <Base:SName sname="ground"/>
            <Base:SName sname="floor"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="grasses"/>
            <Base:PName pname="grounds"/>
            <Base:PName pname="floors"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="green"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the grass
          </Base:Description>
          <Base:Description type="examine">
             The woodland road is comprised of fresh green grass and dirt.
          </Base:Description>
          <Base:Description type="look">
             The woodland road is comprised of fresh green grass and dirt.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="oak-tree" prime="false" def="false" abstract="false" hidden="true" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="false" near="true" over="false" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="tree"/>
            <Base:SName sname="oak"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="trees"/>
            <Base:PName pname="oaks"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="broad-leafed"/>
          <Base:Adjective adjective="oversized"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             oversized oak tree
          </Base:Description>
          <Base:Description type="examine">
             An oversized, broad-leafed oak tree measuring 30 feet in circumference, and standing 95 feet tall with a crown spread of 100 feet. A large beehive swarming with insects can be seen hanging from one of the lower branches.
          </Base:Description>
          <Base:Description type="look">
             An oversized, broad-leafed oak tree measuring 30 feet in circumference, and standing 95 feet tall with a crown spread of 100 feet.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="sky" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="sky"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="skies"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="day"/>
          <Base:Adjective adjective="night"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the <day><dry> bright </dry><drizzle> drizzling </drizzle><snow> cloud-filled </snow></day><night><dry> dark </dry><drizzle> greyish night </drizzle><snow> grey, clouded night </snow></night> sky
          </Base:Description>
          <Base:Description type="look">
             <day> It is daytime.</day><night> It is night time.</night> <dawn><drizzle>The light of dawn glints through a haze of miniature raindrops. </drizzle><dry>The sky is streaked in the multi-colored hues of dawn.</dry><snow>The multi-colored hues of the dawn sky are dimmed and twisted by copious amounts of fluffy white clouds.</snow></dawn><morning><drizzle>The morning sky is filled with a light drizzle. </drizzle><dry>A crisp morning lights the world.</dry><cold>A very crisp, cold morning lights the world.</cold></morning><midday><dry>Midday has arrived.</dry><drizzle>The sun pierces the heavens and creates circular rainbows, marking the midday sky. </drizzle><snow>Midday has arrived although barely noticeable due to the large, white clouds conquering the heavens.</snow></midday><afternoon><dry>The blue skies of afternoon.</dry><spring>The warmth of a spring afternoon begins to warm the ground. </spring><winter>The frigid skies of a winter afternoon.</winter></afternoon><dusk>Dusk creeps over the land in dulled hues of grey.</dusk><evening><dry>The evening skies bring with them the appearance of the first stars.</dry><drizzle>The evening sky holds ghost-white wisps of clouds that sprinkle the earth in a light drizzle. </drizzle><snow>The evening skies hide the stars behind ominous clouds.</snow></evening><midnight>Midnight embraces the world in its dark cloak.</midnight><aftermidnight>The end of night nears and dawn will soon arrive.</aftermidnight>
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="trees" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="true">
        <Base:Preposition close="true" against="false" under="true" on="false" inside="true" near="true" over="false" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="trees"/>
            <Base:SName sname="mass"/>
            <Base:SName sname="wood"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="trees"/>
            <Base:PName pname="woods"/>
            <Base:PName pname="masses"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="tall"/>
          <Base:Adjective adjective="thick"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the masses of trees lining the road
          </Base:Description>
          <Base:Description type="examine">
             Masses of tall trees line either side of the woodland road, making it impossible to discern what might be lurking inside. They block out the majority of the sky, only allowing for an occasional peek. A short distance in, you can spot a small creek twisting its way northward, accompanied by the quiet trickling sound of water.
          </Base:Description>
          <Base:Description type="look">
             Masses of tall trees line either side of the woodland road.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="weather" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="weather"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             the weather
          </Base:Description>
          <Base:Description type="look">
             $[Call(${Allegory:Lib:Weather:DB}, "display_weather");]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:sys:emit:area">
         \<Ironclaw:Props:Plot:Bandit:WoodlandRoad\>
      </Core:Property>
      <Core:Property property="export:sys:emit:rand-default">
         5
      </Core:Property>
      <Core:Property property="export:sys:emit:sam-default">
         X[S] \{The quiet sound of trickling water fills your ears.\|A swarm of bees make themselves known, buzzing noisily while they work.\|Incessant buzzing turns into a dull roar as swarms of honey bees tirelessly flap their wings near the over-sized oak tree.\|The occasional sound of water splashing against rocks and other debris can be heard from within the woods.\|A few honey bees glide upon unseen breezes, buzzing harmlessly past your head.\|The gentle sound of running water continuously streams through your ears, attempting to lull you into a state of relaxation.\|A group of bees circle the over-sized oak tree repeatedly, ferociously flapping their wings as if in competition with one another.
\|Water laps at the floor of the woods to create soft, soothing sounds.\|An abrupt flurry of buzzing can be heard from within the beehive, but you can't be sure what the raucous is about.\|The busy bees occasionally buzz off toward the creek for a short break from their rigorous work schedule.\|The delicate music of water meeting ground reaches your ears, evoking a sense of peace in your soul.\}
      </Core:Property>
      <Core:Property property="merry:act-pre:approach">
         X[M] if(\$this.trapped) \{    
    EmitTo(\$actor, "You flail " + oneof("pitifully", "pathetically", "uselessly") + ".");    
    EmitIn(\$this."base:environment", Describe(\$this) + " flails " + oneof("pitifully", "pathetically", "uselessly") + ".", \$actor);    
    return FALSE;    
\}    
    
return TRUE;
      </Core:Property>
      <Core:Property property="merry:inherit:lib:tweak_pop">
         \<Lib:emitter\>
      </Core:Property>
      <Core:Property property="merry:inherit:react:enter-from%emitter">
         \<Lib:emitter\>
      </Core:Property>
      <Core:Property property="merry:inherit:react:enter-into%emitter">
         \<Lib:emitter\>
      </Core:Property>
      <Core:Property property="merry:inherit:react:teleport%emitter">
         \<Lib:emitter\>
      </Core:Property>
      <Core:Property property="merry:lib:injure">
         X[M] /*    
** \$who    
** \$where    
*/    
    
\$armor_rating = Int(\$who."career:combat:armor")+Int(\$who."skill:combat:armor");    
if(\$armor_rating \> Int(\$who."combat:armor:rating")) \$armor_rating = Int(\$who."combat:armor:rating");    
    
\$hit = random(12) + 12;    
\$defense = ironclaw::roll(\$roller: \$who, \$skills: (\{ \}), \$bonus: (\{ "trait:body", "skill:combat:endurance", "career:combat:endurance", \$armor_rating \}));    
\$hit = \$hit - \$defense;    
    
if(\$hit \< 1) \$hit = 1;    
if(\$hit \> 6) \$hit = 6;    
    
switch(\$hit) \{    
    case 1:    
        \$adverb = "slight";    
        break;    
    case 2:    
        \$adverb = nil;    
    case 3:    
        \$adverb = "bad";    
        break;    
    case 4:    
        \$adverb = "deep";    
        break;    
    default:    
        \$adverb = "serious";    
\}    
    
Call(\$\{Ironclaw:Lib:Combat:New:hitdescription\}, "describe_hit", \$attacker: \$this, \$action: (\{ "attack", "hurt", \$adverb, \$hit, ([ "injury":\$injury, "lib":\$this ]) \}), \$hitlocation: NewNRef(\$who, \$where), \$victim: \$who);    
    
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:injury:fall">
         X[M] mapping output;    
    
\$desc1 = Describe(\$victim) + " hits the ground with a painful thud, leaving a " + \$adverb + " wound on " + Describe(\$hitlocation, \$victim) + ".";    
\$desc2 = TAG("You hit the ground with a painful thud, leaving a " + \$adverb + " wound on " + Describe(\$hitlocation, nil, \$victim) + ".", "imp");    
\$desc3 = Describe(\$victim) + " hits the ground with a painful thud, leaving a " + \$adverb + " wound on " + Describe(\$hitlocation, \$victim) + ".";    
    
output = ([ "desc":nil, "longdesc":nil, "desc1":\$desc1, "desc2":\$desc2, "desc3":\$desc3, "extras":([ ]) ]);    
return output;
      </Core:Property>
      <Core:Property property="merry:lib:injury:trap">
         X[M] mapping output;    
    
\$desc1 = Describe(\$victim) + " gets caught up in a trap, leaving a " + \$adverb + " wound on " + Describe(\$hitlocation, \$victim) + ".";    
\$desc2 = TAG("You stumble into a trap, causing a " + \$adverb + " wound on " + Describe(\$hitlocation, nil, \$victim) + ".", "imp");    
\$desc3 = Describe(\$victim) + " stumbles into a trap, causing a " + \$adverb + " wound on " + Describe(\$hitlocation, \$victim) + ".";    
    
output = ([ "desc":nil, "longdesc":nil, "desc1":\$desc1, "desc2":\$desc2, "desc3":\$desc3, "extras":([ ]) ]);    
return output;
      </Core:Property>
      <Core:Property property="merry:lib:trap:hold">
         X[M] EmitTo(\$actor, "A sudden WHOOSH is heard as you step down on a soft patch of ground. A few moments later, you find yourself hanging upside-down from a tree branch.");    
    
EmitIn(\$actor."base:environment", "A sudden WHOOSH is heard as " + Describe(\$actor) + " steps down on a soft patch of ground. A few moments later, " + Str(\$actor."base:pronoun") + " finds " + Str(\$actor."base:objective") + "self hanging upside-down from a tree branch.", \$actor);    
    
\$actor.trapped = 1;    
\$actor."merry:inherit:act-pre:approach" = \$this;    
\$actor."merry:inherit:react-pre:release-dob" = \$this;    
\$actor."base:stancestring" = "hanging";    
    
\$delay(5, FALSE, "d2c7");    
    
while(\$actor.trapped) \{    
    EmitTo(\$actor, "You sway gently in the breeze.");    
    EmitIn(\$actor."base:environment", Describe(\$actor) + " sways gently in the breeze.", \$actor);    
    \$delay(20, FALSE, "95f0");    
\}    
    
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:trap:spikes">
         X[M] int i;    
    
EmitTo(\$actor, "A muffled click is heard as you step down on a soft patch of ground. A few moments later, small needle-like spikes rain down on the entire area.");    
    
EmitIn(\$actor."base:environment", "A muffled click is heard as " + Describe(\$actor) + " steps down on a soft patch of ground. A few moments later, small needle-like spikes rain down on the entire area.", \$actor);    
    
\$delay(3, FALSE, "d2c7");    
    
\$inv = \$this."base:inventory";    
    
for(i = 0; i \< sizeof(\$inv); i++) \{    
    if(\$inv[i]."skotos:charname" \&\& (random(2) \> 0 \|\| \$inv[i] == \$actor)) \{    
        \$hit = random(24) + 1;    
        \$bonus = (\{ "trait:speed" \});    
        \$skills = (\{ "combat:dodge", "mental:observation" \});    
    
        \$dodge = ironclaw::roll(\$roller: \$inv[i], \$skills: (\{ "combat:dodge", "mental:observation" \}), \$bonus: (\{ "trait:speed" \}));    
        \$block = 0;    
    
        if(\$inv[i]."base:shield") \{    
            \$block = ironclaw::roll(\$roller: \$inv[i], \$skills: (\{ "combat:shield", "mental:observation" \}), \$bonus: (\{ "trait:speed" \}));    
        \}    
    
        if(\$dodge \>= \$hit) \{    
            EmitTo(\$inv[i], TAG("You dodge out of the way.", "imp"));    
            EmitIn(\$inv[i]."base:environment", Describe(\$inv[i]) + " dodges out of the way.", \$inv[i]);    
        \} else if(\$block \>= \$hit) \{    
            EmitTo(\$inv[i], TAG("You deflect a spike with your shield", "imp"));    
            EmitIn(\$inv[i]."base:environment", Describe(\$inv[i]) + " deflects a spike with " + Str(\$inv[i]."base:possessive") + " shield.", \$inv[i]);    
        \} else \{    
            \$details = (\{ "back", "right-shoulder", "left-shoulder", "right-ear", "left-ear", "head", "right-arm", "left-arm", "right-side", "left-side", "right-leg", "left-leg", "right-hand", "left-hand" \});    
            \$detail = \$details[random(sizeof(\$details))];    
    
            ::injure(\$who: \$inv[i], \$where: \$detail, \$injury: "injury:spike");    
        \}    
    \}    
\}    
    
\$delay(2, FALSE, "0d2a");    
EmitIn(\$actor."base:environment", "The spikes eventually settle and all is still again.");    
    
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:approach">
         X[M] \$delay(3, TRUE, "acfa");    
\$detail = NRefDetail(\$what);    
    
if(Get(\$this, "trap:" + \$detail)) \{    
    \$trap = Get(\$this, "trap:" + \$detail);    
    
    /* Only do something if the trap hasn't be disarmed */    
    if(!\$trap["disarmed"]) \{    
        /* Check if \$actor has spotted the trap. If so, let them approach safely. */    
        /* Otherwise, trigger the trap and set it as disarmed. */    
        if(Get(\$actor, "trap:" + \$detail + ":spotted")) \{    
            EmitTo(\$actor, "You carefully approach " + Describe(\$what) + " and avoid triggering it in the process.");    
        \} else \{    
            if(FindMerry(\$this, "lib", "trap:" + \$trap["type"])) \{    
                Call(\$this, "trap:" + \$trap["type"]);    
            \}    
    
            \$trap["disarmed"] = 1;    
            Set(\$this, "trap:" + \$detail, \$trap);    
        \}    
    \}    
\}    
    
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:examine-what">
         X[M] \$delay(1, TRUE, "acfa");    
\$detail = NRefDetail(\$what[0]);    
    
if(Get(\$this, "trap:" + \$detail)) \{    
    \$trap = Get(\$this, "trap:" + \$detail);    
    
    \$difficulty = 6;    
    if(\$trap["difficulty"]) \$difficulty = \$trap["difficulty"];    
    
    if(Get(\$actor, "trap:" + \$trap["type"] + ":spotted:roll")) \{    
        \$roll = Get(\$actor, "trap:" + \$trap["type"] + ":spotted:roll");    
    \} else \{    
        \$roll = ironclaw::roll(\$roller: \$actor, \$skills: (\{ "career:spy", "career:thief", "mental:observation" \}), \$bonus: (\{ \}));    
    \}    
    
    if(\$roll \>= \$difficulty) \{            
        if(\$trap["disarmed"]) \{    
            EmitTo(\$actor, "Upon closer examination, you notice a pressure plate has been placed beneath the soil here. It has been recently disarmed and is safe to pass over.");    
        \} else \{    
            EmitTo(\$actor, "Upon closer examination, you notice a pressure plate has been placed beneath the soil here. It should be disarmed before anyone attempts to go near it.");    
        \}    
    
        if(!Get(\$actor, "trap:" + \$detail + ":spotted")) \{    
            Set(\$actor, "trap:" + \$detail + ":spotted", 1);    
            \$delay(300, FALSE, "7d7d");    
            Set(\$actor, "trap:" + \$detail + ":spotted", nil);    
        \}    
    \}    
\}    
    
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:disarm-dob">
         X[M] \$detail = NRefDetail(\$dob[0]);    
    
if(Get(\$this, "trap:" + \$detail)) \{    
    \$trap = Get(\$this, "trap:" + \$detail);    
    \$difficulty = \$trap["difficulty"];    
    
    if(!Get(\$actor, "trap:" + \$detail + ":spotted")) \{    
        return TRUE;    
    \}    
    
    if(\$trap["disarmed"]) \{    
        EmitTo(\$actor, "That trap has already been disarmed.");    
    \} else \{    
        EmitTo(\$actor, "You carefully uncover a pressure plate beneath the soil and proceed to disarm it. It is now safe to pass over.");    
        EmitIn(\$actor."base:environment", Describe(\$actor) + " carefully uncovers a pressure plate beneath the soil and proceeds to disarm it.", \$actor);    
        
        \$trap["disarmed"] = 1;    
      
        Set(\$this, "trap:" + \$detail, \$trap);    
    \}    
\}    
    
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:release-dob">
         X[M] \$victim = NRefOb(\$dob[0]);    
    
if(!\$victim.trapped) \{    
    return TRUE;    
\}    
    
if(\$actor == \$victim) \{    
    EmitTo(\$actor, "You attempt to release yourself from the trap but only succeed in making yourself tired.");    
    EmitIn(\$actor."base:environment", Describe(\$actor) + " flails " + oneof("pathetically", "uselessly", "pitifully") + ".", \$actor);    
    
    return FALSE;    
\}    
    
EmitTo(\$actor, "You release " + Describe(\$victim) + " from the trap.");    
EmitTo(\$victim, Describe(\$actor) + " releases you from the trap.");    
EmitIn(\$actor."base:environment", Describe(\$actor) + " releases " + Describe(\$victim) + " from the trap.", \$victim, \$actor);    
    
\$delay(1, FALSE, "02d8");    
    
\$hit = random(24) + 1;    
\$bonus = (\{ "trait:agility" \});    
\$defense = ironclaw::roll(\$roller: \$victim, \$skills: (\{ \}), \$bonus: (\{ "trait:agility" \}));    
    
if(\$defense \>= \$hit) \{    
    EmitTo(\$victim, "You land nimbly on your feet.");    
    EmitIn(\$victim."base:environment", Describe(\$victim) + " lands nimbly on " + Str(\$victim."base:possessive") + " feet.", \$victim);    
    \$victim."base:stancestring" = "standing";    
\} else \{    
    \$victim."base:stancestring" = "lying";    
    Call(\$\{Ironclaw:Props:Plot:Bandit:WoodlandRoad\}, "injure", \$who: \$victim, \$where: "head", \$injury: "injury:fall");    
\}    
    
\$victim.trapped = nil;    
\$victim."merry:inherit:act-pre:approach" = nil;    
\$victim."merry:inherit:react-pre:release-dob" = nil;    
    
return FALSE;
      </Core:Property>
      <Core:Property property="new property name">
         "New Property Value"
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1144052085, "-", "SYNC", 1221752477, "???", "R", 1236557936, "morwenlorelie", "E", 1236559153, "morwenlorelie", "K", 1236559169, "morwenlorelie", "E", 1236561129, "morwenlorelie", "K", 1236561143, "morwenlorelie", "E", 1236561177, "morwenlorelie", "E", 1236569851, "morwenlorelie", "K", 1236569974, "morwenlorelie", "E", 1236570854, "morwenlorelie", "K", 1236570903, "morwenlorelie", "E", 1236571044, "morwenlorelie", "E", 1236571048, "morwenlorelie", "E", 1239210773, "morwenlorelie", "R", 1242255305, "morwenlorelie", "K", 1242255452, "morwenlorelie", "K", 1242255464, "morwenlorelie", "E", 1267096774, "balkaar", "E", 1267096827, "balkaar", "E", 1267131192, "balkaar", "E", 1267131205, "balkaar", "E", 1267132113, "balkaar", "E", 1267132390, "balkaar", "E", 1267132698, "balkaar", "E", 1267132910, "balkaar", "K", 1267132945, "balkaar", "E", 1267132949, "balkaar", "E", 1267132955, "balkaar", "E", 1267132962, "balkaar", "E", 1267132967, "balkaar", "E", 1267132971, "balkaar", "E", 1267133014, "balkaar", "X", 1267133037, "balkaar", "E", 1267133113, "balkaar", "E", 1267133172, "balkaar", "E", 1267133370, "balkaar", "E", 1267133460, "balkaar", "E", 1267133498, "balkaar", "E", 1267133509, "balkaar", "E", 1267133584, "balkaar", "E", 1267133588, "balkaar", "E", 1267133746, "balkaar", "E", 1267133788, "balkaar", "E", 1267133904, "balkaar", "E", 1267134703, "rastalabor", "X", 1267173949, "balkaar", "E", 1267175885, "balkaar", "E", 1267176063, "balkaar", "E", 1267176620, "balkaar", "E", 1267178665, "balkaar", "E", 1267178682, "balkaar", "E", 1267178741, "balkaar", "E", 1267178808, "balkaar", "E", 1267179944, "balkaar", "E", 1267989936, "slurpeeslurp", "E", 1305987897, "morwenlorelie", "K", 1306123111, "slurpeeslurp", "E", 1306123331, "slurpeeslurp", "E", 1306123332, "slurpeeslurp", "E", 1306123333, "slurpeeslurp", "E", 1306123335, "slurpeeslurp", "E", 1306123338, "slurpeeslurp", "E", 1306123693, "slurpeeslurp", "E", 1306123696, "slurpeeslurp", "E", 1306123699, "slurpeeslurp", "E", 1306125919, "slurpeeslurp", "K", 1306125976, "slurpeeslurp", "E", 1306125981, "slurpeeslurp", "E", 1306125997, "slurpeeslurp", "E", 1306126006, "slurpeeslurp", "E", 1306126006, "slurpeeslurp", "E", 1306126027, "slurpeeslurp", "E", 1306126088, "slurpeeslurp", "E", 1306126129, "slurpeeslurp", "E", 1306126143, "slurpeeslurp", "E", 1306126150, "slurpeeslurp", "E", 1306126151, "slurpeeslurp", "E", 1306404193, "slurpeeslurp", "E", 1306404504, "slurpeeslurp", "E", 1306404777, "slurpeeslurp", "E", 1306404834, "slurpeeslurp", "E", 1306404834, "slurpeeslurp", "E", 1306404834, "slurpeeslurp", "E", 1306404868, "slurpeeslurp", "E", 1306406098, "slurpeeslurp", "K", 1306406118, "slurpeeslurp", "E", 1306406429, "slurpeeslurp", "K", 1306406485, "slurpeeslurp", "K", 1306406935, "slurpeeslurp", "E", 1306406981, "slurpeeslurp", "E", 1306407186, "slurpeeslurp", "K", 1306407211, "slurpeeslurp", "E", 1306409794, "slurpeeslurp", "K", 1306409820, "slurpeeslurp", "E", 1306409822, "slurpeeslurp", "E", 1306409886, "slurpeeslurp", "E", 1306410502, "slurpeeslurp", "E", 1306410535, "slurpeeslurp", "E", 1306410672, "slurpeeslurp", "E", 1306410691, "slurpeeslurp", "E", 1306527266, "balkaar", "E", 1306527324, "balkaar", "E", 1306527813, "balkaar", "E", 1306527855, "balkaar", "E", 1306527932, "balkaar", "E", 1306528602, "balkaar", "E", 1306528675, "balkaar", "E", 1306528752, "balkaar", "E", 1306528897, "balkaar", "E", 1306529174, "balkaar", "E", 1306529254, "balkaar", "E", 1306529343, "balkaar", "E", 1306529396, "balkaar", "E", 1306529404, "balkaar", "E", 1306530587, "balkaar", "E", 1306530974, "balkaar", "E", 1306531229, "slurpeeslurp", "K", 1306531251, "slurpeeslurp", "E", 1306531719, "balkaar", "E", 1306532734, "balkaar", "E", 1306533046, "jominey", "E", 1306533110, "jominey", "E", 1306534107, "jominey", "E", 1306534192, "jominey", "E", 1306534246, "jominey", "E", 1306534423, "jominey", "E", 1306534539, "jominey", "E", 1306534589, "jominey", "E", 1306534618, "jominey", "E", 1306534804, "jominey", "E", 1306534936, "jominey", "E", 1306534952, "jominey", "E", 1306534974, "jominey", "E", 1306535000, "jominey", "E", 1306535057, "jominey", "E", 1306536998, "jominey", "E", 1306537059, "jominey", "E", 1306537094, "jominey", "E", 1306537139, "jominey", "E", 1306537165, "jominey", "E", 1306537308, "jominey", "E", 1306537371, "jominey", "E", 1306537481, "jominey", "E", 1306537565, "jominey", "E", 1306538164, "jominey", "E", 1306538188, "jominey", "E", 1306538626, "jominey", "E", 1306539290, "jominey", "E", 1306539730, "jominey", "E", 1306539908, "jominey", "E", 1306539965, "jominey", "E", 1306540163, "jominey", "E", 1306540215, "jominey", "E", 1306540308, "jominey", "E", 1306540398, "jominey", "E", 1306540485, "jominey", "E", 1306540579, "jominey", "E", 1306540641, "jominey", "E", 1306541536, "jominey", "E", 1306541654, "jominey", "E", 1306541678, "jominey", "E", 1306542942, "jominey", "E", 1306542996, "jominey", "E", 1306543210, "jominey", "E", 1306543311, "jominey", "E", 1306543351, "jominey", "E", 1306543403, "jominey", "E", 1306543453, "jominey", "E", 1306543548, "jominey", "E", 1306543642, "jominey", "E", 1306543668, "jominey", "E", 1306543887, "jominey", "E", 1306544048, "jominey", "E", 1306544171, "jominey", "E", 1306544292, "jominey", "E", 1306544388, "jominey", "E", 1306544449, "jominey", "E", 1306544738, "jominey", "E", 1306544864, "jominey", "E", 1306544996, "jominey", "E", 1306545237, "jominey", "E", 1306545315, "jominey", "E", 1306545385, "jominey", "E", 1306545420, "jominey", "E", 1306545538, "jominey", "E", 1306545619, "jominey", "E", 1306545665, "jominey", "E", 1306546564, "jominey", "E", 1306547181, "jominey", "E", 1306547199, "jominey", "E", 1306547330, "jominey", "E", 1306547356, "jominey", "E", 1306547384, "jominey", "E", 1306547498, "jominey", "E", 1306547570, "jominey", "E", 1306547661, "jominey", "E", 1306547691, "jominey", "E", 1306547711, "jominey", "E", 1306547795, "jominey", "E", 1306547840, "jominey", "E", 1306568587, "balkaar", "E", 1306569313, "balkaar", "E", 1306569342, "balkaar", "E", 1306569380, "balkaar", "E", 1306569454, "balkaar", "E", 1306600267, "balkaar", "E", 1306605774, "tunk_bodin", "X", 1306608721, "tunk_bodin", "X", 1306609671, "tunk_bodin", "X", 1306610135, "tunk_bodin", "X", 1306610199, "jominey", "E", 1306610385, "jominey", "E", 1306610451, "tunk_bodin", "E", 1306610469, "tunk_bodin", "X", 1306611282, "jominey", "E", 1306611332, "jominey", "E", 1306611381, "jominey", "E", 1306611565, "jominey", "E", 1306611614, "jominey", "E", 1306611700, "jominey", "E", 1306611762, "jominey", "E", 1306614501, "arrianna", "E", 1318102039, "meandmine", "E", 1318102051, "meandmine", "E", 1318102076, "meandmine", "E", 1318102097, "meandmine", "E", 1318102351, "meandmine", "E", 1318102358, "meandmine", "E", 1318102454, "meandmine", "K", 1318103067, "slurpeeslurp", "E", 1318103180, "slurpeeslurp", "X", 1318107802, "slurpeeslurp", "E", 1333739300, "meandmine", "K", 1352055836, "slurpeeslurp", "E", 1352055878, "slurpeeslurp", "E", 1352055902, "slurpeeslurp", "E", 1352055956, "slurpeeslurp", "E", 1446487785, "lidiab", "K" \})
      </Core:Property>
      <Core:Property property="searching:randomobjects">
         1
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="sys:emit:channels">
         (\{ "default" \})
      </Core:Property>
      <Core:Property property="sys:emit:clist">
         (\{ "default" \})
      </Core:Property>
      <Core:Property property="sys:emit:enabled">
         (\{ "default" \})
      </Core:Property>
      <Core:Property property="sys:emit:population"/>
      <Core:Property property="sys:emit:rand-default">
         5
      </Core:Property>
      <Core:Property property="sys:emit:sam-default">
         X[S] \{The quiet sound of trickling water fills your ears.\|A swarm of bees make themselves known, buzzing noisily while they work.\|Incessant buzzing turns into a dull roar as swarms of honey bees tirelessly flap their wings near the oversized oak tree.\|The occasional sound of water splashing against rocks and other debris can be heard from within the woods.\|A few honey bees glide upon unseen breezes, buzzing harmlessly past your head.\|The gentle sound of running water continuously streams through your ears, attempting to lull you into a state of relaxation.\|A group of bees circle the oversized oak tree repeatedly, ferociously flapping their wings as if in competition with one another.
\|Water laps at the floor of the woods to create soft, soothing sounds.\|An abrupt flurry of buzzing can be heard from within the beehive, but you can't be sure what the raucous is about.\|The busy bees occasionally buzz off toward the creek for a short break from their rigourous work schedule.\|The delicate music of water meeting ground reaches your ears, evoking a sense of peace in your soul.\}
      </Core:Property>
      <Core:Property property="trait:smells:lastchecked">
         1446487971
      </Core:Property>
      <Core:Property property="trap:creek">
         ([ "difficulty":6, "disarmed":1, "type":"spikes" ])
      </Core:Property>
      <Core:Property property="trap:exit-northwest">
         ([ "difficulty":12, "disarmed":1, "type":"spikes" ])
      </Core:Property>
      <Core:Property property="trap:oak-tree">
         ([ "difficulty":10, "disarmed":1, "type":"hold" ])
      </Core:Property>
      <Core:Property property="trap:trail">
         ([ "difficulty":8, "type":"hold" ])
      </Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
