<object clone="/base/obj/thing" owner="tunk_bodin">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Allegory:Props:Crafting:UrCrafting)"/>
    <Base:Bulk immobile="false" mass="0.3" density="1.1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="sitting" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="true"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="false" under="false" on="true" inside="false" near="true" over="true" behind="false" before="false" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="food"/>
            <Base:SName sname="foodstuff"/>
            <Base:SName sname="consumable"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="foods"/>
            <Base:PName pname="foodstuffs"/>
            <Base:PName pname="consumables"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.trait:food)
          </Base:Description>
          <Base:Description type="examine">
             The $(this.trait:food) appears $[if($this."trait:quantity" == 0) { return "gone"; } else if($this."trait:quantity" <= 0) { return "gone";} else if($this."trait:quantity" >= 1 && $this."trait:quantity" <= 3) { return "almost gone"; } else if($this."trait:quantity" >= 2 && $this."trait:quantity" <= 6) { return "nearly gone"; } else if($this."trait:quantity" >= 5 && $this."trait:quantity" <= 9) { return "about half eaten"; } else if($this."trait:quantity" >= 8 && $this."trait:quantity" <= 12) { return "partially eaten"; } else { return "whole"; }]. $(this.trait:desc)
          </Base:Description>
          <Base:Description type="look">
             The $(this.trait:food) appears $[if($this."trait:quantity" == 0) { return "gone"; } else if($this."trait:quantity" <= 0) { return "gone";} else if($this."trait:quantity" >= 1 && $this."trait:quantity" <= 3) { return "almost gone"; } else if($this."trait:quantity" >= 2 && $this."trait:quantity" <= 6) { return "nearly gone"; } else if($this."trait:quantity" >= 5 && $this."trait:quantity" <= 9) { return "about half eaten"; } else if($this."trait:quantity" >= 8 && $this."trait:quantity" <= 12) { return "partially eaten"; } else { return "whole"; }]. $(this.trait:desc)
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="10"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:nip:item:cost">
         0
      </Core:Property>
      <Core:Property property="export:trait:desc">
         "A delicious foodstuff."
      </Core:Property>
      <Core:Property property="export:trait:food">
         "foodname"
      </Core:Property>
      <Core:Property property="export:trait:objecttype">
         "urfood"
      </Core:Property>
      <Core:Property property="export:trait:quantity">
         14
      </Core:Property>
      <Core:Property property="export:trait:smell">
         "food"
      </Core:Property>
      <Core:Property property="export:trait:taste">
         "like food"
      </Core:Property>
      <Core:Property property="merry:lib:emit_action">
         X[M] \$verb = Get (\$\{SkotOS:Socials:Socials\}, "verbs:objects:" + \$imperative);                             
if(sizeof(\$verb) \> 0)                      
\{                      
  if(\$verb[0]."verb:third")                      
    \$verbs = Str(\$verb[0]."verb:third");               
  if(\$verb[0]."verb:imperative")              
    \$verb = Str(\$verb[0]."verb:imperative");              
\} else \{                     
\$verbs = "eats";              
\$verb = "eat";              
\}                     
if(\$this."trait:quantity" == 1 \|\| \$this."trait:quantity" \>= 1) \{                     
EmitTo(\$actor, "You " +\$verb+ " " +Describe(\$this, nil, \$actor)+ ". It tastes " +\$this."trait:taste"+ ".");                     
EmitIn(\$actor."base:environment", Describe(\$actor)+ " " +\$verbs+ " " +Describe(\$this, \$actor)+ ".", \$actor);                     
if(\$this."trait:quantity" == 1) \{                     
\$this."trait:quantity" -= 1;                     
\} else \{                     
\$this."trait:quantity" -= 2;                     
\}                     
if(\$this."trait:quantity" == 0) \{                                                       
if(\$this."no:slay" == 1) \{                     
return FALSE;                     
\} else \{            
EmitTo(\$actor, "You consume the last of " +Describe(\$this, nil, \$actor)+ ".");   
EmitIn(\$actor."base:environment", Describe(\$actor)+ " consumes the last of " +Describe(\$this, \$actor)+ ".", \$actor);   
Slay(\$this);                     
return FALSE;                     
\}                                                     
return FALSE;                                                       
\}                                                       
return FALSE;                                                        
\} else \{                                                    
EmitTo(\$actor, Describe(\$this)+ " is already eaten.");                                                   
return FALSE;                                                        
\}
      </Core:Property>
      <Core:Property property="merry:lib:emit_action_gobble">
         X[M] \$verb = Get (\$\{SkotOS:Socials:Socials\}, "verbs:objects:" + \$imperative);                             
if(sizeof(\$verb) \> 0)                      
\{                      
  if(\$verb[0]."verb:third")                      
    \$verbs = Str(\$verb[0]."verb:third");               
  if(\$verb[0]."verb:imperative")              
    \$verb = Str(\$verb[0]."verb:imperative");              
\} else \{                     
\$verbs = "gobbles";              
\$verb = "gobble";              
\}                     
if(\$this."trait:quantity" == 1 \|\| \$this."trait:quantity" \>= 1) \{                     
EmitTo(\$actor, "You " +\$verb+ " " +Describe(\$this, nil, \$actor)+ " completely. It tastes " +\$this."trait:taste"+ ".");                     
EmitIn(\$actor."base:environment", Describe(\$actor)+ " " +\$verbs+ " " +Describe(\$this, \$actor)+ " completely.", \$actor);                                                                                         
if(\$this."no:slay" == 1) \{                     
return FALSE;                     
\} else \{            
EmitTo(\$actor, "You consume the last of " +Describe(\$this, nil, \$actor)+ ".");   
EmitIn(\$actor."base:environment", Describe(\$actor)+ " consumes the last of " +Describe(\$this, \$actor)+ ".", \$actor);   
Slay(\$this);                     
return FALSE;                     
\}                                                                                                     
return FALSE;                                                        
\} else \{                                                    
EmitTo(\$actor, Describe(\$this)+ " is already eaten.");                                                   
return FALSE;                                                        
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:bite-dob">
         X[M] if (\$this."base:environment" != \$actor) \{EmitTo(\$actor, "You must possess " +Describe(\$this)+ " to do that."); return FALSE; \}        
Call(\$this, "emit_action");                     
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:chew-dob">
         X[M] if (\$this."base:environment" != \$actor) \{EmitTo(\$actor, "You must possess " +Describe(\$this)+ " to do that."); return FALSE; \}        
Call(\$this, "emit_action");                     
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:chew-iob">
         X[M] if (\$this."base:environment" != \$actor) \{EmitTo(\$actor, "You must possess " +Describe(\$this)+ " to do that."); return FALSE; \}        
Call(\$this, "emit_action");                     
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:eat">
         X[M] if (\$this."base:environment" != \$actor) \{EmitTo(\$actor, "You must possess " +Describe(\$this)+ " to do that."); return FALSE; \}        
Call(\$this, "emit_action");                     
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:gnaw-dob">
         X[M] if (\$this."base:environment" != \$actor) \{EmitTo(\$actor, "You must possess " +Describe(\$this)+ " to do that."); return FALSE; \}        
Call(\$this, "emit_action");                     
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:gnaw-iob">
         X[M] if (\$this."base:environment" != \$actor) \{EmitTo(\$actor, "You must possess " +Describe(\$this)+ " to do that."); return FALSE; \}        
Call(\$this, "emit_action");                     
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:gobble-dob">
         X[M] if (\$this."base:environment" != \$actor) \{EmitTo(\$actor, "You must possess " +Describe(\$this)+ " to do that."); return FALSE; \}        
Call(\$this, "emit_action_gobble");                     
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:gobble-what">
         X[M] if (\$this."base:environment" != \$actor) \{EmitTo(\$actor, "You must possess " +Describe(\$this)+ " to do that."); return FALSE; \}        
Call(\$this, "emit_action_gobble");                     
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:munch-dob">
         X[M] if (\$this."base:environment" != \$actor) \{EmitTo(\$actor, "You must possess " +Describe(\$this)+ " to do that."); return FALSE; \}        
Call(\$this, "emit_action");                     
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:munch-iob">
         X[M] if (\$this."base:environment" != \$actor) \{EmitTo(\$actor, "You must possess " +Describe(\$this)+ " to do that."); return FALSE; \}        
Call(\$this, "emit_action");                     
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:nibble-dob">
         X[M] if (\$this."base:environment" != \$actor) \{EmitTo(\$actor, "You must possess " +Describe(\$this)+ " to do that."); return FALSE; \}        
Call(\$this, "emit_action");                     
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:nibble-iob">
         X[M] if (\$this."base:environment" != \$actor) \{EmitTo(\$actor, "You must possess " +Describe(\$this)+ " to do that."); return FALSE; \}        
Call(\$this, "emit_action");                     
return FALSE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:food">
         X[M] Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);                                                         
Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replacesname", \$object: this);                                                         
return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1177468991, "tunk_bodin", "X", 1177469112, "tunk_bodin", "X", 1177469241, "tunk_bodin", "X", 1177469257, "tunk_bodin", "X", 1177469274, "tunk_bodin", "X", 1177469302, "tunk_bodin", "X", 1177469550, "tunk_bodin", "X", 1177469584, "tunk_bodin", "X", 1177469619, "tunk_bodin", "X", 1177469903, "tunk_bodin", "X", 1177473423, "tunk_bodin", "X", 1177473446, "tunk_bodin", "X", 1205565795, "tonyd", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes>
      <Notes:Category cat="QA" catstate="Open">
        <Notes:Note ix="1152145639" state="Open" user="tunk_bodin">
           Very basic UrFood. Set trait:food, trait:taste, trait:smell and trait:desc.
        </Notes:Note>
      </Notes:Category>
    </Notes:Notes>
  </Base:Thing>
</object>
