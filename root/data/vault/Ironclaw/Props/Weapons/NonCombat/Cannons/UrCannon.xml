<object clone="/base/obj/thing" owner="SkotOS">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="singular name"/>
            <Base:SName sname="cannon"/>
            <Base:SName sname="weapon"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="plural name"/>
            <Base:PName pname="cannons"/>
            <Base:PName pname="weapons"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.trait:size) $(this.trait:material) $(this.trait:cannontype)
          </Base:Description>
          <Base:Description type="examine">
             You see a $(this.trait:size) cannon made of $(this.trait:material) designed to fire explosive shells. The barrel is smooth and well taken care of.
          </Base:Description>
          <Base:Description type="look">
             A $(this.trait:size) $(this.trait:color) $(this.trait:material) $(this.trait:cannontype).
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="NEW" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             NEW detail
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="carriage" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="singular name"/>
            <Base:SName sname="carriage"/>
            <Base:SName sname="cannon carriage"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="NEW">empty</Base:Description>
          <Base:Description type="brief">
             cannon carriage
          </Base:Description>
          <Base:Description type="examine">
             The typical a wooden carriage designed for cannons to be mounted on. The whole carriage is dominated by two vast wheels and a weight to balance the tube.
          </Base:Description>
          <Base:Description type="look">
             The typical a wooden wheeled carriage designed for cannons to be mounted on.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="knob" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="singular name"/>
            <Base:SName sname="knob"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="NEW">empty</Base:Description>
          <Base:Description type="brief">
             $(this.trait:material) knob
          </Base:Description>
          <Base:Description type="look">
             A carefully shaped $(this.trait:material) knob.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="muzzle" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="singular name"/>
            <Base:SName sname="muzzle"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="NEW">empty</Base:Description>
          <Base:Description type="brief">
             ornamental muzzle
          </Base:Description>
          <Base:Description type="look">
             A carved $(this.trait:material) dragon head petrified with open mouth to shape the muzzle.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="vent" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="singular name"/>
            <Base:SName sname="vent"/>
            <Base:SName sname="hole"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="NEW">empty</Base:Description>
          <Base:Description type="brief">vent</Base:Description>
          <Base:Description type="look">
             The vent is a lightning hole which serves to ignite the gun powder and fire the cannon.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="wheels" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="singular name"/>
            <Base:SName sname="wheel"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="plural name"/>
            <Base:PName pname="wheels"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             large wheels
          </Base:Description>
          <Base:Description type="examine">
             Two oversized red oak wheels are attached to the carriage that makes it easy to navigate the otherwise weighty cannon.
          </Base:Description>
          <Base:Description type="look">
             Two oversized red oak wheels are attached to the carriage.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:trait:cannontype">
         "cannon"
      </Core:Property>
      <Core:Property property="gimli:react-post:load-dob">
         "E[G]\\n// load the cannon with powder\\nif(!\$this.\\"loaded:gunpowder\\") \{\\n  // if there isn't gunpowder in the cannon\\n  // first check that they are loading it using *something*\\n  if(!\$using) \{\\n    EmitTo(\$actor, \\"First, you must load \\"+Describe(this, nil, \$actor)+\\" with a barrel of gunpowder.\\");\\n    return FALSE;\\n  \}\\n  if(sizeof(\$using) != 1) \{\\n     EmitTo(\$actor, \\"Please only load one thing in \\"+Describe(this)+\\" at a time.\\");\\n     return FALSE;\\n  \}\\n  \$item = NRefOb(\$using[0]);\\n  if(\$item.\\"core:ur:parent\\" != \$\{Ironclaw:Props:Weapons:NonCombat:Ammunition:Powder\}) \{\\n    EmitTo(\$actor, \\"Use gunpowder!\\");\\n    return TRUE;\\n  \}\\n  // describe the actor loading the gunpowder\\n  EmitTo(\$actor, \\"You pour \\"+Describe(\$item)+\\" into \\"+Describe(\$this)+\\"'s barrel.\\");\\n  EmitIn(\$actor.\\"base:environment\\", Describe(\$actor)+\\" pours \\"+Describe(\$item)+\\" into \\"+Describe(\$this)+\\"'s barrel.\\", \$actor);\\n  // mark the cannon as being loaded with gunpowder\\n  \$this.\\"loaded:gunpowder\\" = TRUE;\\n\\n  // destroy the gunpowder\\n  // check if the gunpowder barrel says how much is left\\n  if(!\$item.\\"trait:quantity\\") \{\\n    // it doesn't have a value saying how much gunpowder there is. Let's set it as having two more charges left (since we just used one charge, three total)\\n    \$item.\\"trait:quantity\\" = 2;\\n  \} else \{\\n    // reduce the number of uses left\\n    \$item.\\"trait:quantity\\" -= 1;\\n    /* if there is no powder left, destroy the item */\\n    if(!\$item.\\"trait:quantity\\") \{\\n      EmitTo(\$actor, \\"Having emptied it, you discard \\"+Describe(\$item)+\\".\\");\\n      EmitIn(\$actor.\\"base:environment\\", \\"Having emptied it, \\"+Describe(\$actor)+\\" discards \\"+Describe(\$item)+\\".\\", \$actor);\\n      Slay(\$item);\\n    \}\\n  \}\\n\\n  /* stop the script so it doesn't continue on to loading the cannonball */\\n  return FALSE;\\n\}\\n\\n/* load the cannon with cannonball */\\nif(!\$this.\\"loaded:cannonball\\") \{\\n  /* if there isn't cannonball in the cannon */\\n  /* first check that they are loading it using *something* */\\n\\n  if(!\$using)\{\\n     EmitTo(\$actor, \\"You must load \\"+Describe(this, nil, \$actor)+\\" with a cannonball.\\");\\n     return FALSE;\\n  \}\\n  if(sizeof(\$using) != 1) \{\\n     EmitTo(\$actor, \\"Please only load one thing in \\"+Describe(this)+\\" at a time.\\");\\n     return FALSE;\\n  \}\\n  \$item = NRefOb(\$using[0]);\\n  if(\$item.\\"core:ur:parent\\" !=\$\{Ironclaw:Props:Weapons:NonCombat:Ammunition:Cannonball\})\{\\n    EmitTo(\$actor, \\"Use a cannonball!\\");\\n    return TRUE;\\n  \}\\n\\n  /*describe actor loading the cannonball*/\\n    EmitTo(\$actor, \\"You roll a cannonball into \\"+Describe(this)+\\"'s muzzle.\\");\\n    EmitIn(\$actor.\\"base:environment\\", Describe(\$actor)+\\" rolls a cannonball into \\"+Describe(\$this)+\\"'s muzzle.\\", \$actor);\\n\\n  /*mark cannon as being loaded with cannonball*/\\n      \$this.\\"loaded:cannonball\\" = TRUE;\\n\\n  /*destroy cannonball*/\\n    Slay(\$item);\\n\\n  /*stop script*/\\n  return FALSE;\\n\}\\n\\n\\n\\n\\n\\n\\n/* fire the cannon */\\nEmitIn(\$actor.\\"base:environment\\", \\"BOOM!\\");\\n/* mark the cannon as not being loaded with gunpowder or a cannonball anymore */\\n\$this.\\"loaded:gunpowder\\" = nil;\\n\$this.\\"loaded:cannonball\\" = nil;\\nreturn TRUE;"
      </Core:Property>
      <Core:Property property="merry:react-post:load-dob">
         X[M] /* Gimli-Powered! Do not edit! Edit gimli:react-post:load-dob instead! */
/* load the cannon with powder */
if(!\$this."loaded:gunpowder") \{
  /* if there isn't gunpowder in the cannon */
  /* first check that they are loading it using *something* */
  if(!\$using) \{
    EmitTo(\$actor, "First, you must load "+Describe(this, nil, \$actor)+" with a barrel of gunpowder.");
    return FALSE;
  \}
  if(sizeof(\$using) != 1) \{
     EmitTo(\$actor, "Please only load one thing in "+Describe(this)+" at a time.");
     return FALSE;
  \}
  \$item = NRefOb(\$using[0]);
  if(\$item."core:ur:parent" != \$\{Ironclaw:Props:Weapons:NonCombat:Ammunition:Powder\}) \{
    EmitTo(\$actor, "Use gunpowder!");
    return TRUE;
  \}
  /* describe the actor loading the gunpowder */
  EmitTo(\$actor, "You pour "+Describe(\$item)+" into "+Describe(\$this)+"'s barrel.");
  EmitIn(\$actor."base:environment", Describe(\$actor)+" pours "+Describe(\$item)+" into "+Describe(\$this)+"'s barrel.", \$actor);
  /* mark the cannon as being loaded with gunpowder */
  \$this."loaded:gunpowder" = TRUE;

  /* destroy the gunpowder */
  /* check if the gunpowder barrel says how much is left */
  if(!\$item."trait:quantity") \{
    /* it doesn't have a value saying how much gunpowder there is. Let's set it as having two more charges left (since we just used one charge, three total) */
    \$item."trait:quantity" = 2;
  \} else \{
    /* reduce the number of uses left */
    \$item."trait:quantity" -= 1;
    /* if there is no powder left, destroy the item */
    if(!\$item."trait:quantity") \{
      EmitTo(\$actor, "Having emptied it, you discard "+Describe(\$item)+".");
      EmitIn(\$actor."base:environment", "Having emptied it, "+Describe(\$actor)+" discards "+Describe(\$item)+".", \$actor);
      Slay(\$item);
    \}
  \}

  /* stop the script so it doesn't continue on to loading the cannonball */
  return FALSE;
\}

/* load the cannon with cannonball */
if(!\$this."loaded:cannonball") \{
  /* if there isn't cannonball in the cannon */
  /* first check that they are loading it using *something* */

  if(!\$using)\{
     EmitTo(\$actor, "You must load "+Describe(this, nil, \$actor)+" with a cannonball.");
     return FALSE;
  \}
  if(sizeof(\$using) != 1) \{
     EmitTo(\$actor, "Please only load one thing in "+Describe(this)+" at a time.");
     return FALSE;
  \}
  \$item = NRefOb(\$using[0]);
  if(\$item."core:ur:parent" !=\$\{Ironclaw:Props:Weapons:NonCombat:Ammunition:Cannonball\})\{
    EmitTo(\$actor, "Use a cannonball!");
    return TRUE;
  \}

  /*describe actor loading the cannonball*/
    EmitTo(\$actor, "You roll a cannonball into "+Describe(this)+"'s muzzle.");
    EmitIn(\$actor."base:environment", Describe(\$actor)+" rolls a cannonball into "+Describe(\$this)+"'s muzzle.", \$actor);

  /*mark cannon as being loaded with cannonball*/
      \$this."loaded:cannonball" = TRUE;

  /*destroy cannonball*/
    Slay(\$item);

  /*stop script*/
  return FALSE;
\}






/* fire the cannon */
EmitIn(\$actor."base:environment", "BOOM!");
/* mark the cannon as not being loaded with gunpowder or a cannonball anymore */
\$this."loaded:gunpowder" = nil;
\$this."loaded:cannonball" = nil;
return TRUE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:material">
         X[M] return Call(\$\{Allegory:Props:Crafting:UrCrafting\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:size">
         X[M] return Call(\$\{Allegory:Props:Crafting:UrCrafting\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="new property name">
         "New Property Value"
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1144052085, "-", "SYNC", 1202437829, "balkaar", "R", 1202438402, "balkaar", "E", 1202438493, "balkaar", "E", 1202438527, "balkaar", "E", 1202438626, "balkaar", "E", 1202438655, "balkaar", "E", 1202438670, "balkaar", "E", 1202438859, "balkaar", "E", 1202438986, "balkaar", "E", 1202439217, "balkaar", "E", 1202439374, "balkaar", "E", 1202439960, "balkaar", "E", 1202440193, "balkaar", "E", 1202440411, "balkaar", "E", 1202440522, "balkaar", "E", 1202440822, "tonyd", "E", 1202441124, "balkaar", "E", 1202896684, "balkaar", "E", 1203292890, "balkaar", "E", 1203292943, "balkaar", "E", 1203293068, "balkaar", "E", 1203293104, "balkaar", "E", 1203295605, "balkaar", "E", 1203295756, "balkaar", "E", 1203295959, "balkaar", "E", 1203295978, "balkaar", "E", 1203295992, "balkaar", "E", 1203296209, "balkaar", "E", 1203296369, "balkaar", "E", 1203296695, "balkaar", "E", 1203296705, "balkaar", "E", 1203296715, "balkaar", "E", 1203296737, "balkaar", "E", 1203296774, "balkaar", "E", 1203296819, "balkaar", "E", 1203296867, "balkaar", "E", 1203296970, "balkaar", "E", 1203296986, "balkaar", "E", 1203297333, "balkaar", "E", 1203297481, "balkaar", "E", 1203297534, "balkaar", "E", 1203298209, "balkaar", "E", 1203325808, "balkaar", "E", 1203325895, "balkaar", "E", 1203326027, "balkaar", "E", 1203326092, "balkaar", "E", 1203330097, "balkaar", "E", 1203330263, "balkaar", "E", 1203330291, "balkaar", "E", 1203330504, "balkaar", "E", 1203330691, "balkaar", "E", 1203557083, "balkaar", "E", 1203557914, "balkaar", "E", 1203558010, "balkaar", "E", 1203558156, "balkaar", "E", 1203558356, "balkaar", "E", 1203558476, "balkaar", "E", 1203558557, "tonyd", "P", 1203559299, "tonyd", "P", 1204026433, "balkaar", "E", 1204026531, "balkaar", "E", 1204069400, "balkaar", "E", 1204075431, "balkaar", "E", 1204076027, "balkaar", "E", 1204076636, "balkaar", "E", 1204076856, "balkaar", "E", 1204076892, "balkaar", "E", 1204077326, "balkaar", "E", 1204077706, "balkaar", "E", 1204080698, "balkaar", "E", 1204080806, "balkaar", "E", 1204080930, "balkaar", "E", 1204081086, "balkaar", "E", 1204158640, "tonyd", "P", 1204158695, "tonyd", "P", 1204158805, "tonyd", "P", 1204158832, "tonyd", "P", 1204344853, "balkaar", "P", 1204344965, "balkaar", "P", 1204345024, "balkaar", "P", 1204345050, "balkaar", "P", 1204345455, "balkaar", "P", 1204345470, "balkaar", "P", 1204345489, "balkaar", "P", 1204345502, "balkaar", "P", 1204345515, "balkaar", "P", 1204345720, "tonyd", "P", 1204345949, "tonyd", "P", 1211078202, "slurpeeslurp", "E", 1441784534, "tonyd", "P", 1441784603, "tonyd", "P", 1441784621, "tonyd", "P", 1441784829, "tonyd", "P", 1441785385, "tonyd", "P", 1441785687, "tonyd", "P" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="trait:cannontype">
         "cannon"
      </Core:Property>
      <Core:Property property="x_gimliinstance">
         ([  ])
      </Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
