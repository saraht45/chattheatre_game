<object clone="/base/obj/thing" owner="tunk_bodin">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Allegory:Props:Crafting:UrCrafting)"/>
    <Base:Bulk immobile="false" mass="0.3" density="1"/>
    <Base:Container flexible="true" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="lying" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="true" under="false" on="false" inside="true" near="true" over="false" behind="false" before="false" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="pouch"/>
            <Base:SName sname="moneypouch"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="pouches"/>
            <Base:PName pname="moneypouches"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="cotton"/>
          <Base:Adjective adjective="money"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             {? equal | $(this.trait:fittedto) | $(this.base:worn-by) | $(this.trait:fit) } {? | $(this.trait:ribbon:material) | beribboned } {? equal | $(this.trait:color) | none || $(this.trait:color) } {? | $(this.trait:embroidery) | {? | $(this.trait:embroidery:pattern) | $(this.trait:embroidery:pattern)} embroidered } {? equal | $(this.trait:material) | none || $(this.trait:material) } $(this.trait:brief)
          </Base:Description>
          <Base:Description type="examine">
             A {? equal | $(this.trait:fittedto) | $(this.base:worn-by) | $(this.trait:fit) } {? | $(this.trait:ribbon:material) | beribboned } {? equal | $(this.trait:color) | none || $(this.trait:color) } {? equal | $(this.trait:material) | none | material | $(this.trait:material) } $(this.trait:brief). $(this.trait:look) {? | $(this.trait:embroidery) | $(this.trait:embroidery).} {? | $(this.details:default:exit:closed) | <describe what="$(this)" looker="$(looker)" cap="1"/> is closed. | <describe what="$(this)" looker="$(looker)" cap="1"/> is open. {? equal | $(actor) | $(this.base:environment) | This pouch contains $[if($this."cash:balance" == 100){ return "one denar."; } else if((!$this."cash:balance") || ($this."cash:balance" == 0)){ return "no money."; } else { $result = $this."cash:balance" / 100; /*if($this."cash:balance"%100 != 0) { $result = $result+"."+$this."cash:balance"%100/10; if($this."cash:balance"%10 != 0) { $result = $result+$this."cash:balance"%10; } }*/ return $result+" denarii."; }]} }
          </Base:Description>
          <Base:Description type="look">
             A {? equal | $(this.trait:fittedto) | $(this.base:worn-by) | $(this.trait:fit) } {? | $(this.trait:ribbon:material) | beribboned } {? equal | $(this.trait:color) | none || $(this.trait:color) } {? equal | $(this.trait:material) | none | material | $(this.trait:material) } $(this.trait:brief). $(this.trait:look) {? | $(this.trait:embroidery) | $(this.trait:embroidery).} {? | $(this.details:default:exit:closed) | <describe what="$(this)" looker="$(looker)" cap="1"/> is closed. | <describe what="$(this)" looker="$(looker)" cap="1"/> is open. {? equal | $(actor) | $(this.base:environment) | This pouch contains $[if($this."cash:balance" == 100){ return "one denar."; } else if((!$this."cash:balance") || ($this."cash:balance" == 0)){ return "no money."; } else { $result = $this."cash:balance" / 100; /*if($this."cash:balance"%100 != 0) { $result = $result+"."+$this."cash:balance"%100/10; if($this."cash:balance"%10 != 0) { $result = $result+$this."cash:balance"%10; } }*/ return $result+" denarii."; }]} }
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="true" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="10"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:Covered value="waist"/>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:cash:amount_to_fill">
         0
      </Core:Property>
      <Core:Property property="export:cash:balance">
         0
      </Core:Property>
      <Core:Property property="export:cash:max">0</Core:Property>
      <Core:Property property="export:nip:item:cost">
         0
      </Core:Property>
      <Core:Property property="export:trait:basematerial">
         "cloth"
      </Core:Property>
      <Core:Property property="export:trait:brief">
         "money pouch"
      </Core:Property>
      <Core:Property property="export:trait:look">
         "A small bag used for storing coins."
      </Core:Property>
      <Core:Property property="export:trait:material">
         "cotton"
      </Core:Property>
      <Core:Property property="export:trait:objecttype">
         "moneypouch"
      </Core:Property>
      <Core:Property property="export:trait:trash">0</Core:Property>
      <Core:Property property="merry:react-pre:deposit-where">
         X[M] if(NRefOb(\$what[0])."cash:value") \{     
  EmitTo(\$actor, "You have made a deposit into " + Describe(\$this, nil, \$actor) + ".");     
  EmitIn(\$actor."base:environment", Describe(\$actor)+ " makes a deposit into " + Describe(\$this, \$actor) + ".", \$actor);   
return FALSE;     
\}     
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:embroider-dob">
         X[M] /* embroider clothes */   
   
object database;   
database = \$\{Allegory:Lib:Crafting:Clothing:EmbroideryDB\};   
   
/* sanity check */   
if(this."trait:embroidery:pattern") \{   
 EmitTo(\$actor, Describe(\$this, nil, \$actor) + " is already embroidered.");   
 return TRUE;   
\}   
   
if(sizeof(\$dob) != 1) \{   
 EmitTo(\$actor, "Please only attempt to embroider one garment at a time.");   
 return FALSE;   
\}   
   
if(!\$using) \{   
 EmitTo(\$actor, "You need some thread to embroider with.");   
 return FALSE;   
\}   
   
if(sizeof(\$using) != 1) \{   
 EmitTo(\$actor, "You can only work with one spool of thread at a time.");   
 return FALSE;   
\}   
   
\$thread = NRefOb(\$using[0]);   
if(!\$thread."trait:objecttype" \&\& \$thread.objecttype != "thread") \{   
 EmitTo(\$actor, "You can only embroider " + Describe(\$this, nil, \$actor) + " with thread.");   
 return FALSE;   
\}   
   
if(this."base:worn-by") \{   
 EmitTo(\$actor, "How can you embroider " + Describe(this, nil, \$actor) + " while someone is wearing it?");   
 return FALSE;   
\}   
   
if(\$this."base:environment" != \$actor) \{   
 EmitTo(\$actor, "You must be holding " + Describe(\$this, nil, \$actor) + " to embroider it.");   
 return FALSE;   
\}   
   
\$skill = Int(\$actor."skill:career:needleworker");   
   
/* \$skill = Int(\$actor."skill:alteration:tailoring")+Int(\$actor."career:alteration:tailoring"); */   
   
if(\$(raw-evoke)) \{   
 \$tmp = Get(database, \$(raw-evoke));   
 if(\$tmp) \{   
  /* found a change to make */   
  if(\$tmp["skill"] \&\& \$tmp["skill"] \> \$skill) \{   
   EmitTo(\$actor, "You don't have enough skill to embroider " + Describe(this, nil, \$actor) + " in that way.");   
   return FALSE;   
  \}   
   
  if(\$tmp["design"]) \{   
   \$design = \$tmp["design"];   
  \} else \{   
   \$design = "It has been embroidered with a " + \$(raw-evoke) + " design.";   
  \}   
   
  /* no further objections. Make the change. */   
  EmitTo(\$actor, "You embroider " + Describe(this, nil, \$actor) + " with a "+\$(raw-evoke) + " pattern using " + Describe(\$thread, nil, \$actor) + ".");   
  EmitIn(\$actor."base:environment", Describe(\$actor) + " embroiders " + Describe(this, \$actor) + " with a " + \$(raw-evoke) + " pattern using " + Describe(\$thread, \$actor) + ".", \$actor);   
   
  /* set the embroidery */   
  this."trait:embroidery:pattern" = \$(raw-evoke);   
  this."trait:embroidery" = replace_strings(\$design, "COLOR", Get(\$thread, "trait:color") + " " + Get(\$thread, "trait:material"));   
   
  \$thread."trait:quantity" -= 10;   
   
  /* and set the adjectives */   
  \$words = explode(\$(raw-evoke), " ");   
  for(\$i = 0; \$i \< sizeof(\$words); \$i++)   
   Set(this, "details:default:adjective:" + lower_case(\$words[\$i]) + ":local", 1);   
   
  return FALSE;   
 \}   
\}   
   
/* list embroidery options */   
\$options = (\{ \});   
\$tmp = Get(database, "*");   
\$indices = map_indices(\$tmp);   
\$indices -= (\{ "revisions" \});   
   
for(\$i=0;\$i\<sizeof(\$indices);\$i++) \{   
 if(typeof(\$tmp[\$indices[\$i]]) == T_MAPPING \&\& (!\$tmp[\$indices[\$i]]["skill"] \|\| Int(\$tmp[\$indices[\$i]]["skill"]) \<= \$skill)) \{   
  \$options \|= (\{ \$indices[\$i] \});   
 \}   
\}   
   
if(!sizeof(\$options)) \{   
 EmitTo(\$actor, "You don't know how to embroider " + Describe(this, nil, \$actor) + ".");   
 return FALSE;   
\}   
   
EmitTo(\$actor, "To embroider clothing, it must not be worn. Then the command is:");   
EmitTo(\$actor, "embroider " + Describe(this) + " 'PATTERN");   
EmitTo(\$actor, "Your pattern options are: " + implode(\$options, ", "));   
   
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react:shake-dob">
         X[M] \$owner = ironclaw::find_owner(\$object: this);
if(!\$owner \|\| \$owner == -1) return TRUE;

if(Int(\$owner."trait:money") \>= 1000 ) \{
  EmitTo(\$actor, "You shake "+Describe(this, nil, \$actor)+" and it jingles with coins.");
  EmitIn(\$actor."base:environment", Describe(\$actor) + " shakes "+Describe(this, \$actor)+" and it jingles with coins.", \$actor);
  return FALSE;
\} else if(Int(\$owner."trait:money") \> 0) \{
  EmitTo(\$actor, "You shake "+Describe(this, nil, \$actor)+" and it jingles with a few stray bits.");
  EmitIn(\$actor."base:environment", Describe(\$actor) + " shakes "+Describe(this, \$actor)+" and it jingles with a few stray bits.", \$actor);
  return FALSE;
\}
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:withdraw-dob">
         X[M] /* You can only take from your own pouches */
\$owner = ironclaw::find_owner(\$object: this);
if(\$owner != \$actor) return TRUE;

/* Check we are only trying to take from one thing */
if(sizeof(\$dob) != 1)\{
  EmitTo(\$actor, "You may only take money from one thing at a time.");
  return FALSE;
\}

/* If no evoke */
if(!\$evoke) \{
EmitTo(\$actor, "The correct syntax is: withdraw from [this] '[amount]. i.e. withdraw from my money pouch '12.");
return FALSE;
\}
\$target = NRefOb(\$dob[0]);

/* Check that the object is a money purse */
if(\$this."trait:objecttype" != "moneypouch")\{
  EmitTo(\$actor, "You may only get money from purses and money pouches.");
  return FALSE;
\}

/* How much do we get? */
\$amount = Int(\$evoke[1..strlen(\$evoke)-2])*100;

if(\$amount \< 0) \{
  EmitTo(\$actor, "You cannot withdraw a negative amount from your money pouch.");
  return FALSE;
\}

if(\$amount \> 10000) \{
  EmitTo(\$actor, TAG("[Withdrawing too many coins is bad for the game. Please keep them in the money pouch unless you specifically need to hand them over to another character. Even then, hand over a few, and have the other character deposit the coins first. Thank you.]", "imp"));
  return TRUE;
\}

/*
EmitTo(\$actor, "Amount is "+Str(\$amount));
EmitTo(\$actor, "The pouch holds "+Str(\$actor."trait:money"));
*/

if(\$amount \> Int(\$actor."trait:money"))
  \$amount = Int(\$actor."trait:money");

/*EmitTo(\$actor, "Amount is now "+Str(\$amount));*/

/* Take the money */

/* take money from the pouch */
\$actor."trait:money" = Int(\$actor."trait:money") - \$amount;

/* Spawn the coins */
while(\$amount \&\& (\$amount \> 0))
\{
  if(\$amount \>= 2400) \{
    \$coin = Spawn(\$\{Allegory:Props:Finance:Cash:Lira\});
    \$amount -= 2400;
  \} else if(\$amount \>= 100) \{
    \$coin = Spawn(\$\{Allegory:Props:Finance:Cash:Florin\});
    \$amount -= 100;
  \} else if(\$amount \>= 10) \{
    \$coin = Spawn(\$\{Ironclaw:Props:Finance:Cash:10\});
    \$amount -= 10;
  \} else if(\$amount \>= 1) \{
    \$coin = Spawn(\$\{Ironclaw:Props:Finance:Cash:1\});
    \$amount -= 1;
  \}
  \$coin."owner:original" = \$actor;
  \$coin."base:environment" = \$actor;
\}
EmitTo(\$actor, "You make a withdrawal from " + Describe(\$this, nil, \$actor) + ".");
EmitIn(\$actor."base:environment", Describe(\$actor)+ " makes a withdrawal from " + Describe(\$this, \$actor) + ".", \$actor);
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react:withdraw-iob">
         X[M] /* You can only take from your own pouches */
\$owner = ironclaw::find_owner(\$object: this);
if(\$owner != \$actor) return TRUE;

/* Check we are only trying to take from one thing */
if(sizeof(\$iob) != 1)\{
  EmitTo(\$actor, "You may only take money from one thing at a time.");
  return FALSE;
\}

\$target = NRefOb(\$iob[0]);

/* Check that the object is a money purse */
if(\$this."trait:objecttype" != "moneypouch")\{
  EmitTo(\$actor, "You may only get money from purses and money pouches.");
  return FALSE;
\}

/* If no evoke */
if(!\$evoke) \{
EmitTo(\$actor, "The correct syntax is: withdraw from [this] '[amount]. i.e. withdraw from my money pouch '12.");
return FALSE;
\}

/* How much do we get? */
\$amount = Int(\$evoke[1..strlen(\$evoke)-2])*100;

/*
EmitTo(\$actor, "Amount is "+Str(\$amount));
EmitTo(\$actor, "The pouch holds "+Str(\$this."cash:balance"));
*/

if(\$amount \< 0) \{
  EmitTo(\$actor, "You cannot withdraw a negative amount from your money pouch.");
  return FALSE;
\}

if(\$amount \> Int(\$actor."trait:money"))
  \$amount = Int(\$actor."trait:money");

/*EmitTo(\$actor, "Amount is now "+Str(\$amount));*/

/* Take the money */

/* take money from the pouch */
\$actor."trait:money" = Int(\$actor."trait:money") - \$amount;

/* Spawn the coins */
while(\$amount \&\& (\$amount \> 0))
\{
  if(\$amount \>= 2400) \{
    \$coin = Spawn(\$\{Allegory:Props:Finance:Cash:Lira\});
    \$amount -= 2400;
  \} else if(\$amount \>= 100) \{
    \$coin = Spawn(\$\{Allegory:Props:Finance:Cash:Florin\});
    \$amount -= 100;
  \} else if(\$amount \>= 10) \{
    \$coin = Spawn(\$\{Ironclaw:Props:Finance:Cash:10\});
    \$amount -= 10;
  \} else if(\$amount \>= 1) \{
    \$coin = Spawn(\$\{Ironclaw:Props:Finance:Cash:1\});
    \$amount -= 1;
  \}
  \$coin."owner:original" = \$actor;
  \$coin."base:environment" = \$actor;
\}
      EmitTo(\$actor, "You make a withdrawal from " + Describe(\$this, nil, \$actor) + ".");
EmitIn(\$actor."base:environment", Describe(\$actor)+ " makes a withdrawal from " + Describe(\$this, \$actor) + ".", \$actor);
return FALSE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:color">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:material">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="pouchexploit">
         ([ "asaia:sarai":1, "gbabe:niza":31, "merewyn:ian":327, "merewyn:maymay":153, "merewyn:whisper":89, "teetsforpres:chinco":60, "victoria_fox:aleuria":286, "victoria_fox:araceli":152, "victoria_fox:demona":11, "victoria_fox:jamus":3, "victoria_fox:julie":18, "victoria_fox:juliet":22, "victoria_fox:ramzi":2, "victoria_fox:shania":19 ])
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1178797313, "necate", "E", 1178828153, "necate", "E", 1194171122, "tonyd", "P", 1194171142, "tonyd", "P", 1194171261, "tonyd", "P", 1194171278, "tonyd", "P", 1194171826, "tonyd", "P", 1194171945, "tonyd", "P", 1194171969, "tonyd", "P", 1194172406, "tonyd", "P", 1194172495, "tonyd", "P", 1194172538, "tonyd", "P", 1194172559, "tonyd", "P", 1194172615, "tonyd", "P", 1200710900, "tonyd", "P", 1200710927, "tonyd", "P", 1201173834, "tonyd", "E", 1226233071, "slurpeeslurp", "E", 1231293236, "jominey", "E", 1249370525, "jominey", "E", 1249370749, "jominey", "K", 1249370838, "jominey", "K", 1249370862, "jominey", "K", 1249370990, "jominey", "K", 1249371157, "jominey", "K", 1254165942, "slurpeeslurp", "E", 1276034508, "slurpeeslurp", "E", 1283984616, "slurpeeslurp", "E", 1283984698, "slurpeeslurp", "E", 1294455251, "jominey", "E", 1294455312, "jominey", "E", 1294455358, "jominey", "E", 1302734786, "jominey", "E", 1302734821, "jominey", "E", 1302734868, "jominey", "E", 1302734928, "jominey", "E", 1315432437, "slurpeeslurp", "E", 1315432479, "slurpeeslurp", "E", 1315432554, "slurpeeslurp", "K", 1315433370, "slurpeeslurp", "E", 1315433398, "slurpeeslurp", "E", 1315433439, "slurpeeslurp", "E", 1315433537, "slurpeeslurp", "E", 1315433587, "slurpeeslurp", "E", 1315434231, "morwenlorelie", "X", 1315434694, "morwenlorelie", "X", 1329461017, "tonyd", "E", 1360218955, "tonyd", "P", 1360219010, "tonyd", "P", 1360220787, "tonyd", "E", 1360738692, "tonyd", "P", 1360738879, "tonyd", "P", 1360738929, "tonyd", "P", 1360739002, "tonyd", "P", 1360739024, "tonyd", "P", 1360739059, "tonyd", "P", 1360739119, "tonyd", "P", 1360739145, "tonyd", "P", 1360739154, "tonyd", "P", 1360739181, "tonyd", "P", 1360739212, "tonyd", "P", 1360739240, "tonyd", "P", 1360739255, "tonyd", "P", 1360906385, "tonyd", "E", 1360911068, "tonyd", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
