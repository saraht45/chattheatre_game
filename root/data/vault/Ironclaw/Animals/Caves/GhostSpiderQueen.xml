<object clone="/base/obj/thing" owner="slurpeeslurp">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="npc"/>
            <Base:SName sname="matriarch"/>
            <Base:SName sname="spider"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="spiders"/>
            <Base:PName pname="npcs"/>
            <Base:PName pname="matriarchs"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="ghost"/>
          <Base:Adjective adjective="massive"/>
          <Base:Adjective adjective="mutant"/>
          <Base:Adjective adjective="white"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             ghost spider matriarch
          </Base:Description>
          <Base:Description type="examine">
             A massive, 300 pound white spider supported by ten long, sturdy legs that are covered in ultra soft fuzz. Seven wide, unblinking eyes adorn the underside of its bulging belly, and four razor-sharp fangs dripping a black substance protrude from an oddly-positioned mouth overhead.
          </Base:Description>
          <Base:Description type="look">
             A massive, 300 pound white spider supported by ten long, sturdy legs. Seven eyes adorn the underside of its bulging belly, and four razor-sharp fangs protrude from an oddly-positioned mouth overhead.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="eyes" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="eye"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="eyes"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="unblinking"/>
          <Base:Adjective adjective="wide"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             seven wide, unblinking eyes
          </Base:Description>
          <Base:Description type="examine">
             Seven wide, unblinking eyes are fixated upon you. Not for a moment do they waver nor reveal anything of use.
          </Base:Description>
          <Base:Description type="look">
             Seven wide, unblinking eyes are fixated upon you.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="fangs" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="teeth"/>
            <Base:SName sname="fang"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="teeth"/>
            <Base:PName pname="fangs"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="razor-sharp"/>
          <Base:Adjective adjective="thick"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             four razor-sharp fangs
          </Base:Description>
          <Base:Description type="examine">
             Four razor-sharp fangs protrude from an oddly-positioned mouth just above the belly of the beast. They are coated in a thick black substance of unknown origin.
          </Base:Description>
          <Base:Description type="look">
             Four razor-sharp fangs protrude from an oddly-positioned mouth just above the belly of the beast.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="head" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="head"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="heads"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="enormous"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             enormous head
          </Base:Description>
          <Base:Description type="examine">
             An enormous head sans any recognizable face save for an oddly-positioned mouth sits atop the bulging belly of the beast.
          </Base:Description>
          <Base:Description type="look">
             An enormous head sans any recognizable face save for an oddly-positioned mouth sits atop the bulging belly of the beast.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="legs" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames>
            <Base:PName pname="legs"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="long"/>
          <Base:Adjective adjective="sturdy"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             ten long, sturdy legs
          </Base:Description>
          <Base:Description type="examine">
             Ten long, sturdy legs covered in fuzz hold the creature upright. They twitch occasionally as if they are restless.
          </Base:Description>
          <Base:Description type="look">
             Ten long, sturdy legs covered in fuzz hold the creature upright. They twitch occasionally as if they are restless.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:combat:armor:rating">
         15
      </Core:Property>
      <Core:Property property="export:skill:combat:dodge">
         24
      </Core:Property>
      <Core:Property property="export:skill:combat:endurance">
         15
      </Core:Property>
      <Core:Property property="export:skill:combat:precision">
         20
      </Core:Property>
      <Core:Property property="export:skill:combat:unarmed">
         100
      </Core:Property>
      <Core:Property property="export:trait:agility">
         12
      </Core:Property>
      <Core:Property property="export:trait:body">12</Core:Property>
      <Core:Property property="export:trait:mind">12</Core:Property>
      <Core:Property property="export:trait:speed">
         12
      </Core:Property>
      <Core:Property property="merry:lib:fight_outcome_kill">
         X[M] if(!\$par["char"]) return TRUE;

EmitTo(\$par["char"], "You kill " + Describe(\$this) + ".");
EmitIn(this."base:environment", Describe(\$par["char"]) + " kills " + Describe(this) + ".", \$par["char"]);

this."status:hurt" = nil;
this."savedprop:status:hurt" = nil;
this."status:afraid" = nil;
this."savedprop:status:afraid" = nil;
this."status:recently_afraid" = nil;
this."savedprop:status:recently_afraid" = nil;
this."status:injured" = nil;
this."savedprop:status:injured" = nil;

this."base:urparent" = \$\{Ironclaw:Animals:Caves:GhostSpiderQueenCorpse\};
this."base:stancestring" = "lying";
this."base:proximity" = NewNRef(\$this."base:environment", "ground");
this."base:prepositionstring" = "near";

\$par["char"]."tmp:combat:spider:kill" = Int(\$par["char"]."tmp:combat:spider:kill")+1;

\$delay(60*60*24*2, TRUE, "46b3");

/* Decay code necessary? */

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:fight_outcome_release">
         X[M] if(!\$par["char"]) return TRUE;

EmitTo(\$par["char"], "You release "+Describe(this)+".");
EmitIn(this."base:environment", Describe(\$par["char"])+" releases "+Describe(this)+".", \$par["char"]);

\$delay(3, FALSE, "59d2");

EmitIn(this."base:environment", Describe(\$this) + " lurches away into the depths of the cave.");

this."status:hurt" = nil;
this."savedprop:status:hurt" = nil;
this."status:afraid" = nil;
this."savedprop:status:afraid" = nil;
this."status:recently_afraid" = nil;
this."savedprop:status:recently_afraid" = nil;
this."status:injured" = nil;
this."savedprop:status:injured" = nil;

\$par["char"]."tmp:combat:spider:release" = Int(\$par["char"]."tmp:combat:spider:release")+1;

Slay(\$this);

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:find_target">
         X[M] /* When the NPC is looking for a target */
int i;

/* In this example, we want to target PCs */
\$options = Match(this."base:environment", "pc");
\$preferred_options = (\{ \});

/* We need to convert the NRef's from the PC list into objects */
for(i=0; i\<sizeof(\$options); i++)
  \$options[i] = NRefOb(\$options[i]);

/* We prefer to target PCs that are already attacking us */
for(i=0; i\<sizeof(\$options); i++) \{
  if(\$options[i]."udat:object" \&\& \$options[i].combat \&\& \$options[i].combat["target"] == this) \$preferred_options += (\{ \$options[i] \});
\}
if(sizeof(\$preferred_options)) return \$preferred_options[random(sizeof(\$preferred_options))];

/* Next prefer to target PCs that are already in combat with us */
for(i=0; i\<sizeof(\$options); i++) \{
  if(\$options[i]."udat:object" \&\& \$options[i].combat) \$preferred_options += (\{ \$options[i] \});
\}
if(sizeof(\$preferred_options)) return \$preferred_options[random(sizeof(\$preferred_options))];

/* Next prefer to target PCs that aren't dying or dead or injured */
for(i=0; i\<sizeof(\$options); i++) \{
  if(\$options[i]."udat:object" \&\& !\$options[i]."status:injured" \&\& !\$options[i]."status:dying" \&\& !\$options[i]."status:dead") \$preferred_options += (\{ \$options[i] \});
\}
if(sizeof(\$preferred_options)) return \$preferred_options[random(sizeof(\$preferred_options))];

return nil;
      </Core:Property>
      <Core:Property property="merry:lib:give_combat_damage">
         X[M] if(\$damage \>= 4) \{
  ccombat::remove_from_combat(\$fighter: \$target);
  \$delay(0.5, TRUE, "30de");
  \$target."tmp:combat:spider:defeated" = Int(\$target."tmp:combat:spider:defeated")+1;
  EmitIn(\$char."base:environment", TAG(Describe(\$char) + " hisses at " + Describe(\$target) + " in smug victory.", "social:third"));
\}
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:take_combat_actions">
         X[M] /* When the NPC is given a turn in combat, this is the script where they decide what to do */
int i;

/* \$az = \$\{Chatters:IC:az:azrael\};
EmitTo(\$az, "Taking an action"); */

switch(random(3)) \{
  case 2:
    EmitIn(\$this."base:environment", TAG(Describe(\$this) + " scrapes challengingly at the ground with its ten long, sturdy legs.", "social:third"));
  case 1:
    EmitIn(\$this."base:environment", TAG(Describe(\$this) + " rears upward, fangs a'flashing and lets forth a surprising, guttural growl.", "social:third"));
  default:
    EmitIn(\$this."base:environment", TAG(Describe(\$this) + " hisses abruptly through its fangs spewing a thick coat of black substance toward you.", "social:third"));
\}
\$delay(2, TRUE, "52ac");

\$actions = copy(this.combat["options"]);
\$actions -= (\{ nil \});

/* Do we need a new target? */
if(!this.combat["target"])
  this.combat["target"] = ::find_target();

if(!this.combat["target"]) \{
  /* We couldn't find a target. Remove ourselves from the fight. */
  ccombat::remove_from_combat(\$fighter: this);
  ccombat::end_turn(\$char: this);
  return TRUE;
\}

if(!this.combat["target"].combat) \{
  ccombat::start_fight(\$attacker: this, \$target: this.combat["target"]);
  \$delay(0.1, TRUE, "64a5");
\}

\$turn_id = random(1000000000);
\$params = ([ "char":this, "taking_action":TRUE, "turn_id":\$turn_id ]);


/* Can we attack? */
for(i=0;i\<sizeof(\$actions);i++) \{
  if(\$actions[i][0] == "attack") \{
    if( Call(\$actions[i][1], \$actions[i][0], \$char: \$char, \$par: nil, \$check_valid: TRUE) ) \{
      return Call(\$actions[i][1], \$actions[i][0], \$par: \$params);
    \}
  \}
\}

/* Couldn't attack. Can we do another action? */
for(i=0;i\<sizeof(\$actions);i++) \{
  if(\$actions[i][0] == "aim" \|\| \$actions[i][0] == "guard") \{
    if( Call(\$actions[i][1], \$actions[i][0], \$char: \$char, \$par: nil, \$check_valid: TRUE) ) \{

      if(\$actions[i][0] == "aim") \{
        EmitIn(this."base:environment", TAG(Describe(this) + " cocks its head slightly to the left, gauging your next move.", "social:third"));
      \} else if(\$actions[i][0] == "guard") \{
        EmitIn(this."base:environment", TAG(Describe(this) + " half-way climbs the side of the cave wall, partially concealing itself from your view.", "social:third"));
      \}

      return Call(\$actions[i][1], \$actions[i][0], \$par: \$params);
    \}
  \}
\}

/* Couldn't do anything. End the turn */
ccombat::end_turn(\$char: this); /* Because we return TRUE above during the delay, the script won't pass for us. So we need to tell it to pass */
return FALSE; /* This means we didn't complete our action, so the script will need to pass for us */
      </Core:Property>
      <Core:Property property="merry:lib:take_combat_damage_dying">
         X[M] /* Script run when the NPC takes enough damage to be dying */
\$char."tmp:combat:spider:won" = Int(\$char."tmp:combat:spider:won")+1;

EmitTo(\$char, "With hate-filled rage, you completely decimate "+Describe(this)+"!");
EmitIn(\$char."base:environment", "With hate-filled rage, "+Describe(\$char)+" completely decimates "+Describe(this)+"!", \$char);
ccombat::remove_from_combat(\$fighter: this);

\$delay(0.5, FALSE, "b561");

/* Ask the PC what they want to do, having beaten the NPC */
interaction::question(\$actor: \$char, \$question: "What do you want to do with this ghost spider matriarch??", \$expires: 60, \$env: "FALSE", \$a: "I say we kill the beast!.", \$a_ob: this, \$a_fun: "fight_outcome_kill", \$b: "It's really kind and gentle. It can be our friend! Set it free.", \$b_ob: this, \$b_fun: "fight_outcome_release", \$expire_ob: this, \$expire_fun: "fight_outcome_release", \$par: ([ "char":\$char ]));


return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:fight-dob">
         X[M] /* Poke the skeleton to start a fight */

Social(this, "turn", nil, nil, "to", \$actor);

\$target = ::find_target();
\$target = \$actor;

if(!\$target) return TRUE;

/* Set them up for new combat */
\$target."merry:inherit:act-pre:breakcombat" = \$\{Ironclaw:Lib:Combat:Cards:Combat\};
\$target."merry:inherit:act-pre:fight" = \$\{Ironclaw:Lib:Combat:Cards:Combat\};
\$target."merry:inherit:act-pre:pass" = \$\{Ironclaw:Lib:Combat:Cards:Combat\};
ccombat::start_fight(\$attacker: this, \$target: \$target);

return FALSE;
      </Core:Property>
      <Core:Property property="merry:witness-post:enter-from">
         X[M] if(this.combat) return TRUE;
if(!\$actor."udat:object") return TRUE;
if(this."base:environment" == nil /* defunct */) return TRUE;
if(this."tmp:starting_fight") return TRUE;
this."tmp:starting_fight" = TRUE;

\$delay(3, TRUE, "e14b");

Social(this, "gobble", "loudly");
\$delay(3, TRUE, "ac64");

\$target = ::find_target();

this."tmp:starting_fight" = nil;

if(!\$target \|\| \$target."base:environment" != this."base:environment") return TRUE;
EmitIn(\$this."base:environment", TAG(Describe(\$this) + " aggressively glomps toward " + Describe(\$target) + ".", "social:third"), \$target);
EmitTo(\$target, TAG(Describe(\$this) + " aggressively glomps toward you on its ten long, sturdy legs.", "social:second"));

this."tmp:starting_fight" = TRUE;
\$delay(3, TRUE, "94df");
this."tmp:starting_fight" = nil;

if(!\$target \|\| \$target."base:environment" != this."base:environment")
  return TRUE;

/* Set them up for new combat */
\$target."merry:inherit:act-pre:breakcombat" = \$\{Ironclaw:Lib:Combat:Cards:Combat\};
\$target."merry:inherit:act-pre:fight" = \$\{Ironclaw:Lib:Combat:Cards:Combat\};
\$target."merry:inherit:act-pre:pass" = \$\{Ironclaw:Lib:Combat:Cards:Combat\};

/* Start the fight */
ccombat::start_fight(\$attacker: \$target, \$target: this);

return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1144052085, "-", "SYNC", 1221752477, "???", "R", 1403644594, "jominey", "K", 1403644632, "jominey", "E", 1403644799, "jominey", "K", 1403646457, "jominey", "K", 1403648316, "jominey", "E", 1403648354, "jominey", "K", 1403648372, "jominey", "E", 1403648794, "jominey", "E", 1403648884, "jominey", "E", 1403649254, "jominey", "E", 1403649519, "jominey", "E", 1403649984, "jominey", "E", 1403650100, "jominey", "E", 1403650108, "jominey", "E", 1403650167, "jominey", "E", 1403650538, "jominey", "E", 1403650652, "jominey", "E", 1403650682, "jominey", "E", 1403654377, "jominey", "E", 1403656626, "jominey", "E", 1403656823, "jominey", "E", 1403656860, "jominey", "E", 1403669138, "jominey", "E", 1403669173, "jominey", "E", 1403669179, "jominey", "E", 1403669190, "jominey", "E", 1403669204, "jominey", "E", 1403669212, "jominey", "E", 1403669221, "jominey", "E", 1403669232, "jominey", "E", 1403729311, "slurpeeslurp", "E", 1417117833, "rorschakovacs", "E", 1422665369, "slurpeeslurp", "K", 1422665373, "slurpeeslurp", "E", 1422665643, "slurpeeslurp", "E", 1422667398, "slurpeeslurp", "E", 1422667409, "slurpeeslurp", "E", 1422667448, "slurpeeslurp", "E", 1422667568, "slurpeeslurp", "K", 1422667569, "slurpeeslurp", "K", 1422669412, "slurpeeslurp", "E", 1422670302, "slurpeeslurp", "E", 1422684228, "slurpeeslurp", "K", 1422684239, "slurpeeslurp", "E", 1422684247, "slurpeeslurp", "E", 1422684254, "slurpeeslurp", "E", 1422684680, "slurpeeslurp", "E", 1422685019, "slurpeeslurp", "E", 1422735500, "slurpeeslurp", "E", 1422735561, "slurpeeslurp", "E", 1422737246, "slurpeeslurp", "E", 1422737370, "slurpeeslurp", "E", 1422737623, "slurpeeslurp", "E", 1422737653, "slurpeeslurp", "E", 1422737940, "slurpeeslurp", "E", 1422738272, "slurpeeslurp", "E", 1422738866, "slurpeeslurp", "E", 1422739025, "slurpeeslurp", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
