<object clone="/base/obj/thing" owner="jominey">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="pelican"/>
            <Base:SName sname="bird"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="pelicans"/>
            <Base:PName pname="birds"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="great"/>
          <Base:Adjective adjective="white"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             great white pelican
          </Base:Description>
          <Base:Description type="examine">
             A large, flying bird with white plumage and a long, curving neck. Its enormous yellow-orange bill arcs downward and comprises nearly a third of the aquatic bird's length. The lower mandible of the creature's beak bears an over-sized pouch which enables it to trap small quantities of fish
          </Base:Description>
          <Base:Description type="look">
             A large, flying bird with white plumage and a curving neck. Its enormous bill comprises nearly a third of the aquatic bird's length. The lower mandible of the creature's beak bears an over-sized pouch which enables it to trap small quantities of fish.
          </Base:Description>
          <Base:Description type="pnmae">marquest</Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="beak" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="beak"/>
            <Base:SName sname="bill"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="beaks"/>
            <Base:PName pname="bills"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             large, cavernous beak
          </Base:Description>
          <Base:Description type="look">
             The large beak of the pelican, with a cavernous pouch of flesh.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="eyes" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="eye"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="eyes"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             beady black eyes
          </Base:Description>
          <Base:Description type="look">
             The beady black eyes of the pelican.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="feathers" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="feather"/>
            <Base:SName sname="plumage"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="feathers"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             bright white plumage
          </Base:Description>
          <Base:Description type="look">
             The bright white feathers of the pelican.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="feet" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="foot"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="feet"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             flappy feet
          </Base:Description>
          <Base:Description type="look">
             The large flappy feet of the pelican.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="wingss" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="wing"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="wings"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">wings</Base:Description>
          <Base:Description type="look">
             A pair of wings.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:trait:help">
         "Once you name your pelican, it will consider you its master."
      </Core:Property>
      <Core:Property property="merry:react-post:name-dob">
         X[M] if(this."trait:name") \{  
  EmitTo(\$actor, Describe(this)+" already has a name. Sheesh.");  
  return TRUE;  
\}  

if(this."base:environment" != \$actor) \{
    EmitTo(\$actor, "You can only name pets that you are holding.");
    return TRUE;
\}                         

\$name = capitalize(\$evoke[1..strlen(\$evoke)-2]);  
/* If we have any punctuation at the end of the command, remove it */  
if(!((\$name[strlen(\$name)-1] \>= 97) \&\& (\$name[strlen(\$name)-1] \<= 122)) \&\& !((\$name[strlen(\$name)-1] \>= 65) \&\& (\$name[strlen(\$name)-1] \<= 90)))  
  \$name = \$name[0..strlen(\$name)-2];  
/* Only take the first word of the name */  
sscanf(\$name, "%s %*s", \$name);  
  
/* Tell the actor that this was successful */  
EmitTo(\$actor, Describe(this)+" will now respond to "+\$name+" and will consider you its master.");  
  
/* Set the name */  
this."trait:name" = \$name;  
/* set the sname */  
Set(this, "details:default:sname:"+lower_case(\$name), 1);  

this."trait:master" = \$actor;                  
  
  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:offer-who">
         X[M] if(\$what) \{
    for(\$i = 0; \$i \< sizeof(\$what); \$i++) \{
        if(NRefOb(\$what[\$i])."trait:objecttype" == "fish") \{
            EmitIn(\$this."base:environment", TAG(capitalize(Describe(\$this)) + " gobbles down " + Describe(NRefOb(\$what[\$i])) + ".", "social:third"), \$actor);
            EmitIn(\$this."base:environment", TAG(capitalize(Describe(\$this)) + " gobbles down " + Describe(NRefOb(\$what[\$i]), nil, \$actor) + ".", "social:first"));
            Slay(\$what[\$i]);
        \}
    \}
\}

return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:take">
         X[M] if((\$actor != \$this.master \&\& \$actor == \$this."trait:ownertwo")) \{
    EmitTo(\$actor, "You cannot take " + Describe(\$this)+ " because it is not yours.");
    return FALSE;
\}
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:control-dob">
         X[M] /* Check if the actor is the controller. */

if((\$actor == \$this."trait:master")) \{
   if(\$evoke) \{

      /* Identify the command from the actor's evoke. */
      \$command = \$evoke[1..strlen(\$evoke)-2];

      \$env = \$actor."base:environment";

       /* Select appropriate emit based on the command. */
      if(\$command == "clack") \{
         EmitIn(\$env, TAG(capitalize(Describe(\$this)) + " elevates his head, angling his beak skyward before clacking it loudly, the skin of the lower beak flapping comically as he does so.", "social:third"));
      \} else if(\$command == "squawk") \{
         EmitIn(\$env, TAG(capitalize(Describe(\$this)) + " splays his wings, letting loose a loud squawk as he proudly flutters his little tail.", "social:third"));
      \} else if(\$command == "nod") \{   
         EmitIn(\$env, TAG("With a comic exaggeration to his movements, " + Describe(\$this) + " bobs his head repeatedly up and down.", "social:third"));
      \} else if(\$command == "ruffle") \{   
         EmitIn(\$env, TAG("With a deep inhalation, " + Describe(\$this) + " ruffles every feather of his body, puffing the fine plumage to nearly double it's normal size before exhaling as all the feathers return to their sleek appearance.", "social:third"));
      \} else if(\$command == "no") \{   
         EmitIn(\$env, TAG(capitalize(Describe(\$this)) + " makes a chirring, guttural sound as he slowly wags his head back and forth.", "social:third"));
      \} else if(\$command == "flap") \{   
         EmitIn(\$env, TAG("With an impressive wingspan, " + Describe(\$this) + " splays his wings wide before repeatedly flapping them, the air buffeting around him as he does so.", "social:third"));
      \} else if(\$command == "dance") \{   
         EmitIn(\$env, TAG("With little to no grace, " + Describe(\$this) + " flaps his webbed feet repeatedly, his body jiggling back and forth as he jitters and jigs with a chuffed expression on his face.", "social:third"));
      \} else if(\$command == "flirt") \{   
         EmitIn(\$env, TAG(capitalize(Describe(\$this)) + " makes small, soft chittering sounds as he bows his head with a bashful expression, his eyes wide and and twinkling.", "social:third"));
      \} else if(\$command == "fish") \{
         if(member("bay", \$actor."base:environment"."base:details")) \{
             EmitIn(\$env, TAG(capitalize(Describe(\$this)) + " leaps into the air with a woosh of feathers, swooping downward to dip his cavernous lower beak into the water. It balloons with water that splashes back out as he gulps down a hapless fish with a self-satisfied glint to his eyes.", "social:third"));
         \} else \{
             EmitIn(\$env, TAG(capitalize(Describe(\$this)) + " scans the area with a hungry expression, huffing with a squawk of annoyance as he sees no water in which to seek his next meal.", "social:third"));
         \}
      \} else \{
         EmitTo(\$actor, "Valid controls for "+Describe(\$this)+" are: clack, squawk, nod, ruffle, no, flap, dance, flirt, fish. You can also offer it fish.");\}
   \} else \{
      /* If the actor did not give a command, list commands to the controller. */
      EmitTo(\$actor, "Valid controls for "+Describe(\$this)+" are: clack, squawk, nod, ruffle, no, flap, dance, flirt, fish. You can also offer it fish.");\}
   \} else \{
      EmitTo(\$actor, "You cannot control "+Describe(\$this)+".");
\}
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react:offer-to">
         X[M] EmitTo(\$actor, dump_value(args));

return FALSE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1536799827, "jominey", "E", 1536799830, "jominey", "E", 1536799926, "jominey", "E", 1536799967, "jominey", "E", 1536799995, "jominey", "E", 1536800027, "jominey", "E", 1536800059, "jominey", "E", 1536800102, "jominey", "K", 1536800160, "jominey", "E", 1536800187, "jominey", "E", 1536800201, "jominey", "E", 1536800402, "jominey", "E", 1536800407, "jominey", "E", 1536800417, "jominey", "E", 1536800499, "jominey", "E", 1536800532, "jominey", "E", 1536800614, "jominey", "E", 1536800617, "jominey", "E", 1536800833, "jominey", "E", 1536800855, "jominey", "E", 1536801189, "jominey", "E", 1536801214, "jominey", "E", 1536801248, "jominey", "E", 1536801284, "jominey", "E", 1536801302, "jominey", "E", 1536801687, "jominey", "E", 1536801984, "jominey", "E", 1536802078, "jominey", "E", 1536802097, "jominey", "E", 1536802231, "jominey", "E", 1536802302, "jominey", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
