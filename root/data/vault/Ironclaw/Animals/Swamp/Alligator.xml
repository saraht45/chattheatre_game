<object clone="/base/obj/thing" owner="SkotOS">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="alligator"/>
            <Base:SName sname="gator"/>
            <Base:SName sname="npc"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="alligators"/>
            <Base:PName pname="gators"/>
            <Base:PName pname="npcs"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="mutant"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.trait:size) $(this.trait:color) alligator
          </Base:Description>
          <Base:Description type="examine">
             A $(this.trait:size) alligator swivels its big head in a threatening manner. The light from the surroundings coats the shiny segments of its body with a malevolent sheen. A large, deformed head hosts a set of sharp teeth. A long body covered in $(this.trait:color) scales stretches out to take up most of the room. Stubby legs hold this creature close to the ground and a long spiked tail finishes off this alligator.
          </Base:Description>
          <Base:Description type="look">
             A $(this.trait:size) alligator swivels its big head in a threatening manner. The light from the surroundings coats the shiny segments of its body with a malevolent sheen. A large, deformed head hosts a set of sharp teeth. A long body covered in $(this.trait:color) scales stretches out to take up most of the room. Stubby legs hold this creature close to the ground and a long spiked tail finishes off this alligator.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="eyes" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames>
            <Base:PName pname="eyes"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="pair"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             alligator's pair of menacing eyes
          </Base:Description>
          <Base:Description type="examine">
             Two reflective eyes are symmetrically located on the alligator's massive head. Bottomless black pupils absorb every movement in the room with a tense attention.
          </Base:Description>
          <Base:Description type="look">
             Two reflective eyes are symmetrically located on the alligator's massive head. Bottomless black pupils absorb every movement in the room with a tense attention.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="fangs" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="teeth"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="teeth"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="curved"/>
          <Base:Adjective adjective="ominous"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             alligator's set of ominous teeth
          </Base:Description>
          <Base:Description type="examine">
             A set of sharp, long teeth drip in anticipation with drool and other secretions at the sight of you.
          </Base:Description>
          <Base:Description type="look">
             A set of ominous teeth drip in anticipation with drool and other secretions.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="head" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="head"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="heads"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             alligator's massive head
          </Base:Description>
          <Base:Description type="examine">
             The $(this.trait:size) alligator's massive head. A set of eyes symmetrically adorn the skull barely drawing attention from the malicious teeth that protrude from its hungry mouth. Sharp spikes protrude from the back and tail of the creature.
          </Base:Description>
          <Base:Description type="look">
             The $(this.trait:size) alligator's massive head. A set of eyes symmetrically adorn the skull barely drawing attention from the malicious teeth that protrude from its hungry mouth. Sharp spikes protrude from the back and tail of the creature.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="legs" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames>
            <Base:PName pname="legs"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="stubby"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             alligator's stubby legs
          </Base:Description>
          <Base:Description type="examine">
             Stubby, scaly legs extend from the alligator's $(this.trait:size) body.
          </Base:Description>
          <Base:Description type="look">
             Stubby, scaly legs extend from the alligator's $(this.trait:size) body.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="tail" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="tail"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="spiked"/>
          <Base:Adjective adjective="thick"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             alligator's spiked tail
          </Base:Description>
          <Base:Description type="examine">
             A thick tail protrudes from the back of the alligator, lashing to-and-fro with its dangerous spikes.
          </Base:Description>
          <Base:Description type="look">
             A thick tail protrudes from the back of the alligator, lashing to-and-fro with its dangerous spikes.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:combat:armor:rating">
         5
      </Core:Property>
      <Core:Property property="export:combat:fightable">
         1
      </Core:Property>
      <Core:Property property="export:skill:combat:dodge">
         5
      </Core:Property>
      <Core:Property property="export:skill:combat:endurance">
         5
      </Core:Property>
      <Core:Property property="export:skill:combat:unarmed">
         6
      </Core:Property>
      <Core:Property property="export:trait:agility">
         4
      </Core:Property>
      <Core:Property property="export:trait:body">6</Core:Property>
      <Core:Property property="export:trait:mind">2</Core:Property>
      <Core:Property property="export:trait:speed">4</Core:Property>
      <Core:Property property="merry:act:start">
         X[M] \$size = oneof("large", "elongated", "huge", "gigantic", "slender", "muscular", "stocky", "average", "small");
\$color = oneof("moss-green", "miry-grey", "murky-brown", "camouflage", "muddy-brown", "spotted-green", "yellowish-green", "mottled-green", "mottled-brown", "pale-green", "vibrant-green", "silvery-black", "swamp black", "greenish-black");

\$this."trait:size" = \$size;
Set(\$this, "details:default:adjective:" + \$size, TRUE);

\$this."trait:color" = \$color;
Set(\$this, "details:default:adjective:" + \$color, TRUE);

\$this."base:immobile" = TRUE;

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:fight_outcome_kill">
         X[M] if(!\$par["char"]) return TRUE;

EmitTo(\$par["char"], "You kill " + Describe(\$this) + ".");
EmitIn(this."base:environment", Describe(\$par["char"]) + " kills " + Describe(this) + ".", \$par["char"]);

this."status:hurt" = nil;
this."savedprop:status:hurt" = nil;
this."status:afraid" = nil;
this."savedprop:status:afraid" = nil;
this."status:recently_afraid" = nil;
this."savedprop:status:recently_afraid" = nil;
this."status:injured" = nil;
this."savedprop:status:injured" = nil;

this."base:urparent" = \$\{Ironclaw:Animals:Swamp:Alligator-Corpse\};
this."base:stancestring" = "lying";
this."base:proximity" = NewNRef(\$this."base:environment", "ground");
this."base:prepositionstring" = "near";

\$par["char"]."tmp:combat:alligator:kill" = Int(\$par["char"]."tmp:combat:alligator:kill")+1;

\$delay(60*60*24*2, TRUE, "46b3");

/* Decay code necessary? */

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:fight_outcome_release">
         X[M] if(!\$par["char"]) return TRUE;

EmitTo(\$par["char"], "You release "+Describe(this)+".");
EmitIn(this."base:environment", Describe(\$par["char"])+" releases "+Describe(this)+".", \$par["char"]);

\$delay(3, FALSE, "59d2");

EmitIn(this."base:environment", Describe(\$this) + " slips into the water and disappears.");

this."status:hurt" = nil;
this."savedprop:status:hurt" = nil;
this."status:afraid" = nil;
this."savedprop:status:afraid" = nil;
this."status:recently_afraid" = nil;
this."savedprop:status:recently_afraid" = nil;
this."status:injured" = nil;
this."savedprop:status:injured" = nil;

\$par["char"]."tmp:combat:alligator:release" = Int(\$par["char"]."tmp:combat:alligator:release")+1;

Slay(\$this);

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:find_target">
         X[M] /* When the NPC is looking for a target */
int i;

/* In this example, we want to target PCs */
\$options = Match(this."base:environment", "pc");
\$preferred_options = (\{ \});

/* We need to convert the NRef's from the PC list into objects */
for(i=0; i\<sizeof(\$options); i++)
  \$options[i] = NRefOb(\$options[i]);

/* We prefer to target PCs that are already attacking us */
for(i=0; i\<sizeof(\$options); i++) \{
  if(\$options[i]."udat:object" \&\& \$options[i].combat \&\& \$options[i].combat["target"] == this) \$preferred_options += (\{ \$options[i] \});
\}
if(sizeof(\$preferred_options)) return \$preferred_options[random(sizeof(\$preferred_options))];

/* Next prefer to target PCs that are already in combat with us */
for(i=0; i\<sizeof(\$options); i++) \{
  if(\$options[i]."udat:object" \&\& \$options[i].combat) \$preferred_options += (\{ \$options[i] \});
\}
if(sizeof(\$preferred_options)) return \$preferred_options[random(sizeof(\$preferred_options))];

/* Next prefer to target PCs that aren't dying or dead or injured */
for(i=0; i\<sizeof(\$options); i++) \{
  if(\$options[i]."udat:object" \&\& !\$options[i]."status:injured" \&\& !\$options[i]."status:dying" \&\& !\$options[i]."status:dead") \$preferred_options += (\{ \$options[i] \});
\}
if(sizeof(\$preferred_options)) return \$preferred_options[random(sizeof(\$preferred_options))];

return nil;
      </Core:Property>
      <Core:Property property="merry:lib:give_combat_damage">
         X[M] if(\$damage \>= 4) \{
  ccombat::remove_from_combat(\$fighter: \$target);
  \$delay(0.5, TRUE, "30de");
  \$target."tmp:combat:alligator:defeated" = Int(\$target."tmp:combat:alligator:defeated")+1;
  EmitIn(\$char."base:environment", TAG(Describe(\$char) + " gazes at " + Describe(\$target) + " with quiet satisfaction.", "social:third"));
\}
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:take_combat_actions">
         X[M] /* When the NPC is given a turn in combat, this is the script where they decide what to do */
int i;

/* \$az = \$\{Chatters:IC:az:azrael\};
EmitTo(\$az, "Taking an action"); */

switch(random(3)) \{
  case 2:
    EmitIn(\$this."base:environment", TAG(Describe(\$this) + " lashes its tail angrily.", "social:third"));
  case 1:
    EmitIn(\$this."base:environment", TAG(Describe(\$this) + " growls viciously before snapping its teeth in warning.", "social:third"));
  default:
    EmitIn(\$this."base:environment", TAG(Describe(\$this) + " crouches down low, revealing its sharp teeth to everyone in its vicinity.", "social:third"));
\}
\$delay(2, TRUE, "52ac");

\$actions = copy(this.combat["options"]);
\$actions -= (\{ nil \});

/* Do we need a new target? */
if(!this.combat["target"])
  this.combat["target"] = ::find_target();

if(!this.combat["target"]) \{
  /* We couldn't find a target. Remove ourselves from the fight. */
  ccombat::remove_from_combat(\$fighter: this);
  ccombat::end_turn(\$char: this);
  return TRUE;
\}

if(!this.combat["target"].combat) \{
  ccombat::start_fight(\$attacker: this, \$target: this.combat["target"]);
  \$delay(0.1, TRUE, "64a5");
\}

\$turn_id = random(1000000000);
\$params = ([ "char":this, "taking_action":TRUE, "turn_id":\$turn_id ]);


/* Can we attack? */
for(i=0;i\<sizeof(\$actions);i++) \{
  if(\$actions[i][0] == "attack") \{
    if( Call(\$actions[i][1], \$actions[i][0], \$char: \$char, \$par: nil, \$check_valid: TRUE) ) \{
      return Call(\$actions[i][1], \$actions[i][0], \$par: \$params);
    \}
  \}
\}

/* Couldn't attack. Can we do another action? */
for(i=0;i\<sizeof(\$actions);i++) \{
  if(\$actions[i][0] == "aim" \|\| \$actions[i][0] == "guard") \{
    if( Call(\$actions[i][1], \$actions[i][0], \$char: \$char, \$par: nil, \$check_valid: TRUE) ) \{

      if(\$actions[i][0] == "aim") \{
        EmitIn(this."base:environment", TAG(Describe(this) + " pauses completely, methodically keeping its intense gaze on its target.", "social:third"));
      \} else if(\$actions[i][0] == "guard") \{
        EmitIn(this."base:environment", TAG(Describe(this) + " slips into some nearby water, attempting to conceal itself in the surrounding muck and mud.", "social:third"));
      \}

      return Call(\$actions[i][1], \$actions[i][0], \$par: \$params);
    \}
  \}
\}

/* Couldn't do anything. End the turn */
ccombat::end_turn(\$char: this); /* Because we return TRUE above during the delay, the script won't pass for us. So we need to tell it to pass */
return FALSE; /* This means we didn't complete our action, so the script will need to pass for us */
      </Core:Property>
      <Core:Property property="merry:lib:take_combat_damage_dying">
         X[M] /* Script run when the NPC takes enough damage to be dying */
\$char."tmp:combat:alligator:won" = Int(\$char."tmp:combat:alligator:won")+1;

EmitTo(\$char, "With an almighty strike, you cut down "+Describe(this)+"!");
EmitIn(\$char."base:environment", "With an almighty strike, "+Describe(\$char)+" cuts down "+Describe(this)+"!", \$char);
ccombat::remove_from_combat(\$fighter: this);

\$delay(0.5, FALSE, "b561");

/* Ask the PC what they want to do, having beaten the NPC */
interaction::question(\$actor: \$char, \$question: "What do you want to do with this alligator??", \$expires: 60, \$env: "FALSE", \$a: "Kill it.", \$a_ob: this, \$a_fun: "fight_outcome_kill", \$b: "Let it go.", \$b_ob: this, \$b_fun: "fight_outcome_release", \$expire_ob: this, \$expire_fun: "fight_outcome_release", \$par: ([ "char":\$char ]));


return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:fight-dob">
         X[M] /* Poke the skeleton to start a fight */

Social(this, "turn", nil, nil, "to", \$actor);

\$target = ::find_target();
\$target = \$actor;

if(!\$target) return TRUE;

/* Set them up for new combat */
/*
\$target."merry:inherit:act-pre:breakcombat" = \$\{Ironclaw:Lib:Combat:Cards:Combat\};
\$target."merry:inherit:act-pre:fight" = \$\{Ironclaw:Lib:Combat:Cards:Combat\};
\$target."merry:inherit:act-pre:pass" = \$\{Ironclaw:Lib:Combat:Cards:Combat\};
*/
ccombat::start_fight(\$attacker: this, \$target: \$target);

return FALSE;
      </Core:Property>
      <Core:Property property="merry:witness-post:enter-from">
         X[M] if(this.combat) return TRUE;
if(!\$actor."udat:object") return TRUE;
if(this."base:environment" == nil /* defunct */) return TRUE;
if(this."tmp:starting_fight") return TRUE;
this."tmp:starting_fight" = TRUE;

\$delay(3, TRUE, "e14b");

Social(this, "gobble", "loudly");
\$delay(3, TRUE, "ac64");

\$target = ::find_target();

this."tmp:starting_fight" = nil;

if(!\$target \|\| \$target."base:environment" != this."base:environment") return TRUE;
EmitIn(\$this."base:environment", TAG(Describe(\$this) + " snaps its sharp teeth at " + Describe(\$target) + ".", "social:third"), \$target);
EmitTo(\$target, TAG(Describe(\$this) + " snaps it sharp teeth at you.", "social:second"));

this."tmp:starting_fight" = TRUE;
\$delay(3, TRUE, "94df");
this."tmp:starting_fight" = nil;

if(!\$target \|\| \$target."base:environment" != this."base:environment")
  return TRUE;

/* Set them up for new combat */
/*
\$target."merry:inherit:act-pre:breakcombat" = \$\{Ironclaw:Lib:Combat:Cards:Combat\};
\$target."merry:inherit:act-pre:fight" = \$\{Ironclaw:Lib:Combat:Cards:Combat\};
\$target."merry:inherit:act-pre:pass" = \$\{Ironclaw:Lib:Combat:Cards:Combat\};
*/

/* Start the fight */
ccombat::start_fight(\$attacker: \$target, \$target: this);

return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1144052085, "-", "SYNC", 1221752477, "???", "R", 1403644594, "jominey", "K", 1403644632, "jominey", "E", 1403644799, "jominey", "K", 1403646457, "jominey", "K", 1403648316, "jominey", "E", 1403648354, "jominey", "K", 1403648372, "jominey", "E", 1403648794, "jominey", "E", 1403648884, "jominey", "E", 1403649254, "jominey", "E", 1403649519, "jominey", "E", 1403649984, "jominey", "E", 1403650100, "jominey", "E", 1403650108, "jominey", "E", 1403650167, "jominey", "E", 1403650538, "jominey", "E", 1403650652, "jominey", "E", 1403650682, "jominey", "E", 1403654377, "jominey", "E", 1403656626, "jominey", "E", 1403656823, "jominey", "E", 1403656860, "jominey", "E", 1403669138, "jominey", "E", 1403669173, "jominey", "E", 1403669179, "jominey", "E", 1403669190, "jominey", "E", 1403669204, "jominey", "E", 1403669212, "jominey", "E", 1403669221, "jominey", "E", 1403669232, "jominey", "E", 1403729311, "slurpeeslurp", "E", 1417117833, "rorschakovacs", "E", 1450246217, "tonyd", "P", 1453777949, "jominey", "E", 1456044785, "tonyd", "P", 1456044841, "tonyd", "P", 1458650937, "jominey", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
