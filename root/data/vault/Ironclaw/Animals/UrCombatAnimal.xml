<object clone="/base/obj/thing" owner="SkotOS">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details/>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:combat:fightable">
         1
      </Core:Property>
      <Core:Property property="export:combat:naturalweapon">
         \<Ironclaw:Lib:Combat:Weapons:Claws\>
      </Core:Property>
      <Core:Property property="gimli:act-pre:enter%ccombat">
         "E[G]\\n// We don't want animals leaving during combat\\n\\nif(\$actor.combat) \{\\n  // They are already in combat\\n  \\n  // Can they successfully break from combat?\\n  // Disabled this to stop animals breaking from combat\\n  // if(Call(\$\{Ironclaw:Lib:Combat:Cards:Combat\}, \\"breakcombat\\", \$char: \$actor)) return TRUE;\\n\\n  // Apparently not...\\n  EmitTo(\$actor, \\"You cannot leave \\"+Describe(\$actor.\\"base:environment\\")+\\" while in combat.\\");\\n  EmitTo(\$actor, \\"You can attempt to 'breakcombat' to end the fight. Or you can defeat or be defeated by your opponents.\\");\\n  return FALSE;\\n\}\\n\\nreturn TRUE;"
      </Core:Property>
      <Core:Property property="gimli:lib:take_combat_action_attack">
         "E[G]\\n// Script gets run when NPC tries to take this action\\nif(\$this.dead) return FALSE; // Charge actions, to end the turn\\n\\n// Does the skink escape?\\n\$escaping = FALSE;\\nif(!\$this.combat \|\| !\$this.combat[\\"target\\"]) \$escaping = TRUE;\\nif(!\$escaping) \{\\n  \$defender_weapon = ccombat::get_weapon(\$char: \$this.combat[\\"target\\"], \$type: \\"parry\\");\\n  \$tmp = ccombat::get_dicepool(\$char: \$this.combat[\\"target\\"], \$pool: \\"defending\\", \$weapon: \$defender_weapon, \$type: \\"parry\\");\\n  \$result = ironclaw::make_opposed_roll(\$val1: 5, \$val2: \$tmp, \$opposed_roll_range: 2);\\n  if(\$result \> 0) \$escaping = TRUE;\\n\}\\n\\nif(\$escaping) \{\\n  switch(random(5)) \{\\n    case 4:\\n      EmitIn(\$this.\\"base:environment\\", Describe(\$this)+\\" flees.\\");\\n      break;\\n    case 3:\\n      EmitIn(\$this.\\"base:environment\\", Describe(\$this)+\\" scurries away.\\");\\n      break;\\n    case 2:\\n      EmitIn(\$this.\\"base:environment\\", Describe(\$this)+\\" ducks into a crack.\\");\\n      break;\\n    case 1:\\n      EmitIn(\$this.\\"base:environment\\", Describe(\$this)+\\" vanishes into a shadow.\\");\\n      break;\\n    default:\\n      EmitIn(\$this.\\"base:environment\\", Describe(\$this)+\\" dives down a small hole.\\");\\n      break;\\n  \}\\n\\n  Slay(\$this);\\n\} else \{\\n  switch(random(5)) \{\\n    case 4:\\n      EmitIn(\$this.\\"base:environment\\", Describe(\$this)+\\" looks for an opening to flee.\\");\\n      break;\\n    case 3:\\n      EmitIn(\$this.\\"base:environment\\", Describe(\$this)+\\" scurries this way and that, trying to get away.\\");\\n      break;\\n    case 2:\\n      EmitIn(\$this.\\"base:environment\\", Describe(\$this)+\\" ducks towards a crack.\\");\\n      break;\\n    case 1:\\n      EmitIn(\$this.\\"base:environment\\", Describe(\$this)+\\" isn't fast enough to vanish into a shadow.\\");\\n      break;\\n    default:\\n      EmitIn(\$this.\\"base:environment\\", Describe(\$this)+\\" is cut off when it tries to dive down a small hole.\\");\\n      break;\\n  \}\\n\}\\n\\nreturn FALSE; // Charge action"
      </Core:Property>
      <Core:Property property="merry:act-pre:enter%ccombat">
         X[M] /* Gimli-Powered! Do not edit! Edit gimli:act-pre:enter%ccombat instead! */
/* We don't want animals leaving during combat */

if(\$actor.combat) \{
  /* They are already in combat */
  
  /* Can they successfully break from combat? */
  /* Disabled this to stop animals breaking from combat */
  /* if(Call(\$\{Ironclaw:Lib:Combat:Cards:Combat\}, "breakcombat", \$char: \$actor)) return TRUE; */

  /* Apparently not... */
  EmitTo(\$actor, "You cannot leave "+Describe(\$actor."base:environment")+" while in combat.");
  EmitTo(\$actor, "You can attempt to 'breakcombat' to end the fight. Or you can defeat or be defeated by your opponents.");
  return FALSE;
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:inherit:act-pre:breakcombat">
         \<Ironclaw:Lib:Combat:Cards:Combat\>
      </Core:Property>
      <Core:Property property="merry:inherit:act-pre:fight">
         \<Ironclaw:Lib:Combat:Cards:Combat\>
      </Core:Property>
      <Core:Property property="merry:inherit:act-pre:pass">
         \<Ironclaw:Lib:Combat:Cards:Combat\>
      </Core:Property>
      <Core:Property property="merry:lib:combat_getdamaged">
         X[M] if(\$this.dead) return TRUE;
if(Int(\$damage) == 0) return TRUE;
\$this.dead = 1;

/*
  EmitTo(\$attacker, \$attackdesc[0]+\$defencedesc[0]+".");
  EmitTo(\$this, \$attackdesc[1]+\$defencedesc[1]+".");
  EmitIn(\$this."base:environment", \$attackdesc[2]+\$defencedesc[2]+".", \$attacker, \$this);


\$delay(0.5, TRUE, "6944");
*/

EmitIn(\$this."base:environment", Describe(\$this)+" dies from its wounds.");

::die();

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:die">
         X[M] Slay(\$this);
return TRUE;

/* We don't yet have good code for making animal corpses */


/* \$corpse = Spawn(\$\{Ironclaw:Animals:NIP:Tuatara-corpse\});*/
\$this."death:dead" = 1;
\$corpse."base:environment" = \$this."base:environment";
\$corpse."trait:build" = \$this."trait:build";
\$corpse."trait:color" = \$this."trait:color";
\$corpse."trait:linecolor" = \$this."trait:linecolor";
\$corpse."base:proximity" = \$this."base:proximity";

Slay(\$this);

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:take_combat_action_attack">
         X[M] /* Gimli-Powered! Do not edit! Edit gimli:lib:take_combat_action_attack instead! */
/* Script gets run when NPC tries to take this action */
if(\$this.dead) return FALSE; /* Charge actions, to end the turn */

/* Does the skink escape? */
\$escaping = FALSE;
if(!\$this.combat \|\| !\$this.combat["target"]) \$escaping = TRUE;
if(!\$escaping) \{
  \$defender_weapon = ccombat::get_weapon(\$char: \$this.combat["target"], \$type: "parry");
  \$tmp = ccombat::get_dicepool(\$char: \$this.combat["target"], \$pool: "defending", \$weapon: \$defender_weapon, \$type: "parry");
  \$result = ironclaw::make_opposed_roll(\$val1: 5, \$val2: \$tmp, \$opposed_roll_range: 2);
  if(\$result \> 0) \$escaping = TRUE;
\}

if(\$escaping) \{
  switch(random(5)) \{
    case 4:
      EmitIn(\$this."base:environment", Describe(\$this)+" flees.");
      break;
    case 3:
      EmitIn(\$this."base:environment", Describe(\$this)+" scurries away.");
      break;
    case 2:
      EmitIn(\$this."base:environment", Describe(\$this)+" ducks into a crack.");
      break;
    case 1:
      EmitIn(\$this."base:environment", Describe(\$this)+" vanishes into a shadow.");
      break;
    default:
      EmitIn(\$this."base:environment", Describe(\$this)+" dives down a small hole.");
      break;
  \}

  Slay(\$this);
\} else \{
  switch(random(5)) \{
    case 4:
      EmitIn(\$this."base:environment", Describe(\$this)+" looks for an opening to flee.");
      break;
    case 3:
      EmitIn(\$this."base:environment", Describe(\$this)+" scurries this way and that, trying to get away.");
      break;
    case 2:
      EmitIn(\$this."base:environment", Describe(\$this)+" ducks towards a crack.");
      break;
    case 1:
      EmitIn(\$this."base:environment", Describe(\$this)+" isn't fast enough to vanish into a shadow.");
      break;
    default:
      EmitIn(\$this."base:environment", Describe(\$this)+" is cut off when it tries to dive down a small hole.");
      break;
  \}
\}

return FALSE; /* Charge action */
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1457945983, "tonyd", "E", 1457946033, "tonyd", "P", 1457946080, "tonyd", "P", 1457946100, "tonyd", "P", 1457946118, "tonyd", "P", 1457946133, "tonyd", "P", 1457946145, "tonyd", "P", 1457946157, "tonyd", "P", 1457946195, "tonyd", "P", 1457946230, "tonyd", "P" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="x_gimliinstance">
         ([  ])
      </Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
