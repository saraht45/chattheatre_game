<object clone="/base/obj/thing" owner="slurpeeslurp">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="dray"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="drays"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="mounted"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="arturl">
             http://greywolf.critter.net/images/ironclaw/standups/icsu03/icsu03-dray-r.gif
          </Base:Description>
          <Base:Description type="brief">
             $(this.trait:size), $(this.trait:color) dray
          </Base:Description>
          <Base:Description type="examine">
             This is a $(this.trait:size) cow-like, $(this.trait:color) working beast. It bears distinguished black markings, similar to slashes, upon it's flat, elongated forehead, muscular upper arms, thick upper legs, and lower back. Clover-shaped black hooves line the bottoms of the hands and feet, providing traction in nearly any weather. This animal is often used to pull carts and plows, and also remains the primary source of meat for the cities. It can be skinned for material and carved for meat.
          </Base:Description>
          <Base:Description type="look">
             A $(this.trait:size), cow-like, $(this.trait:color) working beast bearing distinguished black marks.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="arms" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="arm"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="arms"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="muscular"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the dray's muscular arms
          </Base:Description>
          <Base:Description type="examine">
             A pair of muscular arms. The upper portion bears distinguished black markings.
          </Base:Description>
          <Base:Description type="look">
             A pair of muscular arms. The upper portion bears distinguished black markings.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="feet" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="foot"/>
            <Base:SName sname="hoof"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="feet"/>
            <Base:PName pname="hooves"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             the dray's clover-shaped hooves
          </Base:Description>
          <Base:Description type="examine">
             Clover-shaped black hooves line the bottoms of the hands and feet, providing traction in nearly any weather.
          </Base:Description>
          <Base:Description type="look">
             Clover-shaped black hooves line the bottoms of the hands and feet, providing traction in nearly any weather.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="head" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="head"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="heads"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="enormous"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             dray's elongated forehead
          </Base:Description>
          <Base:Description type="examine">
             An enormous head sans any recognizable face save for an oddly-positioned mouth sits atop the bulging belly of the beast.
          </Base:Description>
          <Base:Description type="look">
             A flat, elongated forehead bearing distinguishable black marks.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="legs" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="leg"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="legs"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="thick"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the dray's thick legs
          </Base:Description>
          <Base:Description type="examine">
             A pair of thick legs. The upper portion bears distinguished black markings.
          </Base:Description>
          <Base:Description type="look">
             A pair of thick legs. The upper portion bears distinguished black markings.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="tail" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="tail"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="tails"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="downturned"/>
          <Base:Adjective adjective="short"/>
          <Base:Adjective adjective="thick"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the dray's downturned tail
          </Base:Description>
          <Base:Description type="examine">
             A short, thick tail is seamlessly attached to the lower back of the dray. It is downturned, pointing toward the calves.
          </Base:Description>
          <Base:Description type="look">
             A short, thick tail is seamlessly attached to the lower back of the dray. It is downturned, pointing toward the calves.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:combat:armor:rating">
         20
      </Core:Property>
      <Core:Property property="export:skill:combat:dodge">
         22
      </Core:Property>
      <Core:Property property="export:skill:combat:endurance">
         28
      </Core:Property>
      <Core:Property property="export:skill:combat:unarmed">
         24
      </Core:Property>
      <Core:Property property="export:trait:agility">
         14
      </Core:Property>
      <Core:Property property="export:trait:body">20</Core:Property>
      <Core:Property property="export:trait:mind">6</Core:Property>
      <Core:Property property="export:trait:speed">8</Core:Property>
      <Core:Property property="merry:act:start">
         X[M] \$this."trait:size" = oneof("large", "massive", "huge", "gigantic", "hulking", "muscular", "stocky");
\$this."trait:color" = oneof("moss-green", "miry-grey", "murky-brown", "camouflage", "muddy-brown", "spotted-green", "yellowish-green", "mottled-green", "mottled-brown", "pale-green", "vibrant-green", "silvery-black", "swamp black", "greenish-black");
      </Core:Property>
      <Core:Property property="merry:lib:fight_outcome_kill">
         X[M] if(!\$par["char"]) return TRUE;

EmitTo(\$par["char"], "You kill " + Describe(\$this) + ".");
EmitIn(this."base:environment", Describe(\$par["char"]) + " kills " + Describe(this) + ".", \$par["char"]);

this."status:hurt" = nil;
this."savedprop:status:hurt" = nil;
this."status:afraid" = nil;
this."savedprop:status:afraid" = nil;
this."status:recently_afraid" = nil;
this."savedprop:status:recently_afraid" = nil;
this."status:injured" = nil;
this."savedprop:status:injured" = nil;

this."base:urparent" = \$\{Ironclaw:Animals:Wild:WildDrayCorpse\};
this."base:stancestring" = "lying";
this."base:proximity" = NewNRef(\$this."base:environment", "ground");
this."base:prepositionstring" = "near";

\$par["char"]."tmp:combat:dray:kill" = Int(\$par["char"]."tmp:combat:dray:kill")+1;

\$delay(60*60*24*2, TRUE, "46b3");

/* Decay code necessary? */

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:fight_outcome_release">
         X[M] if(!\$par["char"]) return TRUE;

EmitTo(\$par["char"], "You release "+Describe(this)+".");
EmitIn(this."base:environment", Describe(\$par["char"])+" releases "+Describe(this)+".", \$par["char"]);

\$delay(3, FALSE, "59d2");

EmitIn(this."base:environment", Describe(\$this) + " gallops off into the distance.");

this."status:hurt" = nil;
this."savedprop:status:hurt" = nil;
this."status:afraid" = nil;
this."savedprop:status:afraid" = nil;
this."status:recently_afraid" = nil;
this."savedprop:status:recently_afraid" = nil;
this."status:injured" = nil;
this."savedprop:status:injured" = nil;

\$par["char"]."tmp:combat:dray:release" = Int(\$par["char"]."tmp:combat:dray:release")+1;

Slay(\$this);

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:find_target">
         X[M] /* When the NPC is looking for a target */
int i;

/* In this example, we want to target PCs */
\$options = Match(this."base:environment", "pc");
\$preferred_options = (\{ \});

/* We need to convert the NRef's from the PC list into objects */
for(i=0; i\<sizeof(\$options); i++)
  \$options[i] = NRefOb(\$options[i]);

/* We prefer to target PCs that are already attacking us */
for(i=0; i\<sizeof(\$options); i++) \{
  if(\$options[i]."udat:object" \&\& \$options[i].combat \&\& \$options[i].combat["target"] == this) \$preferred_options += (\{ \$options[i] \});
\}
if(sizeof(\$preferred_options)) return \$preferred_options[random(sizeof(\$preferred_options))];

/* Next prefer to target PCs that are already in combat with us */
for(i=0; i\<sizeof(\$options); i++) \{
  if(\$options[i]."udat:object" \&\& \$options[i].combat) \$preferred_options += (\{ \$options[i] \});
\}
if(sizeof(\$preferred_options)) return \$preferred_options[random(sizeof(\$preferred_options))];

/* Next prefer to target PCs that aren't dying or dead or injured */
for(i=0; i\<sizeof(\$options); i++) \{
  if(\$options[i]."udat:object" \&\& !\$options[i]."status:injured" \&\& !\$options[i]."status:dying" \&\& !\$options[i]."status:dead") \$preferred_options += (\{ \$options[i] \});
\}
if(sizeof(\$preferred_options)) return \$preferred_options[random(sizeof(\$preferred_options))];

return nil;
      </Core:Property>
      <Core:Property property="merry:lib:give_combat_damage">
         X[M] if(\$damage \>= 4) \{
  ccombat::remove_from_combat(\$fighter: \$target);
  \$delay(0.5, TRUE, "30de");
  \$target."tmp:combat:dray:defeated" = Int(\$target."tmp:combat:dray:defeated")+1;
  EmitIn(\$char."base:environment", TAG(Describe(\$char) + " whinnies at " + Describe(\$target) + " in a DON'T MESS WITH ME AGAIN fashion.", "social:third"));
\}
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:take_combat_actions">
         X[M] /* When the NPC is given a turn in combat, this is the script where they decide what to do */
int i;

/* \$az = \$\{Chatters:IC:az:azrael\};
EmitTo(\$az, "Taking an action"); */

switch(random(3)) \{
  case 2:
    EmitIn(\$this."base:environment", TAG(Describe(\$this) + " blows steamily throught its nostrils and paws at the ground noisily with its hooves.", "social:third"));
  case 1:
    EmitIn(\$this."base:environment", TAG(Describe(\$this) + " rears upward, throwing its hooves wildly in the air.", "social:third"));
  default:
    EmitIn(\$this."base:environment", TAG(Describe(\$this) + " bucks and kicks agitatedly.", "social:third"));
\}
\$delay(2, TRUE, "52ac");

\$actions = copy(this.combat["options"]);
\$actions -= (\{ nil \});

/* Do we need a new target? */
if(!this.combat["target"])
  this.combat["target"] = ::find_target();

if(!this.combat["target"]) \{
  /* We couldn't find a target. Remove ourselves from the fight. */
  ccombat::remove_from_combat(\$fighter: this);
  ccombat::end_turn(\$char: this);
  return TRUE;
\}

if(!this.combat["target"].combat) \{
  ccombat::start_fight(\$attacker: this, \$target: this.combat["target"]);
  \$delay(0.1, TRUE, "64a5");
\}

\$turn_id = random(1000000000);
\$params = ([ "char":this, "taking_action":TRUE, "turn_id":\$turn_id ]);


/* Can we attack? */
for(i=0;i\<sizeof(\$actions);i++) \{
  if(\$actions[i][0] == "attack") \{
    if( Call(\$actions[i][1], \$actions[i][0], \$char: \$char, \$par: nil, \$check_valid: TRUE) ) \{
      return Call(\$actions[i][1], \$actions[i][0], \$par: \$params);
    \}
  \}
\}

/* Couldn't attack. Can we do another action? */
for(i=0;i\<sizeof(\$actions);i++) \{
  if(\$actions[i][0] == "aim" \|\| \$actions[i][0] == "guard") \{
    if( Call(\$actions[i][1], \$actions[i][0], \$char: \$char, \$par: nil, \$check_valid: TRUE) ) \{

      if(\$actions[i][0] == "aim") \{
        EmitIn(this."base:environment", TAG(Describe(this) + " unwaveringly sets its gaze upon you, observing your every move.", "social:third"));
      \} else if(\$actions[i][0] == "guard") \{
        EmitIn(this."base:environment", TAG(Describe(this) + " clops sidewardly to some nearby brush in an attempt to be evasive.", "social:third"));
      \}

      return Call(\$actions[i][1], \$actions[i][0], \$par: \$params);
    \}
  \}
\}

/* Couldn't do anything. End the turn */
ccombat::end_turn(\$char: this); /* Because we return TRUE above during the delay, the script won't pass for us. So we need to tell it to pass */
return FALSE; /* This means we didn't complete our action, so the script will need to pass for us */
      </Core:Property>
      <Core:Property property="merry:lib:take_combat_damage_dying">
         X[M] /* Script run when the NPC takes enough damage to be dying */
\$char."tmp:combat:dray:won" = Int(\$char."tmp:combat:dray:won")+1;

EmitTo(\$char, "With a bellow and one last hit, you cut down the "+Describe(this)+"!");
EmitIn(\$char."base:environment", "With a bellow and one last hit, "+Describe(\$char)+" cuts down "+Describe(this)+"!", \$char);
ccombat::remove_from_combat(\$fighter: this);

\$delay(0.5, FALSE, "b561");

/* Ask the PC what they want to do, having beaten the NPC */
interaction::question(\$actor: \$char, \$question: "What do you want to do with this wild dray??", \$expires: 60, \$env: "FALSE", \$a: "Kill it, yo.", \$a_ob: this, \$a_fun: "fight_outcome_kill", \$b: "Let it live to prance another day!", \$b_ob: this, \$b_fun: "fight_outcome_release", \$expire_ob: this, \$expire_fun: "fight_outcome_release", \$par: ([ "char":\$char ]));


return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:fight-dob">
         X[M] /* Poke the skeleton to start a fight */

Social(this, "turn", nil, nil, "to", \$actor);

\$target = ::find_target();
\$target = \$actor;

if(!\$target) return TRUE;

/* Set them up for new combat */
\$target."merry:inherit:act-pre:breakcombat" = \$\{Ironclaw:Lib:Combat:Cards:Combat\};
\$target."merry:inherit:act-pre:fight" = \$\{Ironclaw:Lib:Combat:Cards:Combat\};
\$target."merry:inherit:act-pre:pass" = \$\{Ironclaw:Lib:Combat:Cards:Combat\};
ccombat::start_fight(\$attacker: this, \$target: \$target);

return FALSE;
      </Core:Property>
      <Core:Property property="merry:witness-post:enter-from">
         X[M] if(this.combat) return TRUE;
if(!\$actor."udat:object") return TRUE;
if(this."base:environment" == nil /* defunct */) return TRUE;
if(this."tmp:starting_fight") return TRUE;
this."tmp:starting_fight" = TRUE;

\$delay(3, TRUE, "e14b");

Social(this, "gobble", "loudly");
\$delay(3, TRUE, "ac64");

\$target = ::find_target();

this."tmp:starting_fight" = nil;

if(!\$target \|\| \$target."base:environment" != this."base:environment") return TRUE;
EmitIn(\$this."base:environment", TAG(Describe(\$this) + " whinnies and careens toward " + Describe(\$target) + ".", "social:third"), \$target);
EmitTo(\$target, TAG(Describe(\$this) + " uses its muscular legs to careen toward you, whinnying all the while.", "social:second"));

this."tmp:starting_fight" = TRUE;
\$delay(3, TRUE, "94df");
this."tmp:starting_fight" = nil;

if(!\$target \|\| \$target."base:environment" != this."base:environment")
  return TRUE;

/* Set them up for new combat */
\$target."merry:inherit:act-pre:breakcombat" = \$\{Ironclaw:Lib:Combat:Cards:Combat\};
\$target."merry:inherit:act-pre:fight" = \$\{Ironclaw:Lib:Combat:Cards:Combat\};
\$target."merry:inherit:act-pre:pass" = \$\{Ironclaw:Lib:Combat:Cards:Combat\};

/* Start the fight */
ccombat::start_fight(\$attacker: \$target, \$target: this);

return TRUE;
      </Core:Property>
      <Core:Property property="new property name">
         "New Property Value"
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1144052085, "-", "SYNC", 1221752477, "???", "R", 1403644594, "jominey", "K", 1403644632, "jominey", "E", 1403644799, "jominey", "K", 1403646457, "jominey", "K", 1403648316, "jominey", "E", 1403648354, "jominey", "K", 1403648372, "jominey", "E", 1403648794, "jominey", "E", 1403648884, "jominey", "E", 1403649254, "jominey", "E", 1403649519, "jominey", "E", 1403649984, "jominey", "E", 1403650100, "jominey", "E", 1403650108, "jominey", "E", 1403650167, "jominey", "E", 1403650538, "jominey", "E", 1403650652, "jominey", "E", 1403650682, "jominey", "E", 1403654377, "jominey", "E", 1403656626, "jominey", "E", 1403656823, "jominey", "E", 1403656860, "jominey", "E", 1403669138, "jominey", "E", 1403669173, "jominey", "E", 1403669179, "jominey", "E", 1403669190, "jominey", "E", 1403669204, "jominey", "E", 1403669212, "jominey", "E", 1403669221, "jominey", "E", 1403669232, "jominey", "E", 1403729311, "slurpeeslurp", "E", 1417117833, "rorschakovacs", "E", 1422665369, "slurpeeslurp", "K", 1422665373, "slurpeeslurp", "E", 1422665643, "slurpeeslurp", "E", 1422667398, "slurpeeslurp", "E", 1422667409, "slurpeeslurp", "E", 1422667448, "slurpeeslurp", "E", 1422667568, "slurpeeslurp", "K", 1422667569, "slurpeeslurp", "K", 1422669412, "slurpeeslurp", "E", 1422670302, "slurpeeslurp", "E", 1422684228, "slurpeeslurp", "K", 1422684239, "slurpeeslurp", "E", 1422684247, "slurpeeslurp", "E", 1422684254, "slurpeeslurp", "E", 1422684680, "slurpeeslurp", "E", 1422685019, "slurpeeslurp", "E", 1422724833, "slurpeeslurp", "K", 1422724837, "slurpeeslurp", "E", 1422724857, "slurpeeslurp", "E", 1422724933, "slurpeeslurp", "E", 1422725198, "slurpeeslurp", "E", 1422726070, "slurpeeslurp", "E", 1422730265, "slurpeeslurp", "K", 1422730286, "slurpeeslurp", "E", 1422730324, "slurpeeslurp", "E", 1422730827, "slurpeeslurp", "E", 1422730860, "slurpeeslurp", "E", 1422730918, "slurpeeslurp", "E", 1422735631, "slurpeeslurp", "E", 1537679017, "vandringar", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
