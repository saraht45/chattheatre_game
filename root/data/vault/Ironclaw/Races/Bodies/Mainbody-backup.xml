<object clone="/base/obj/thing" owner="tonyd">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Ironclaw:Races:Bodies:Rightside)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="true" transparent-container="false" public-container="false" tight="false" capacity="15" maxweight="30" verb2="are carrying" verb3="is carrying"/>
    <Base:Misc gender="neuter" volition="true" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="true">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="true"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="person"/>
            <Base:SName sname="being"/>
            <Base:SName sname="mammal"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="people"/>
            <Base:PName pname="mammals"/>
            <Base:PName pname="persons"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             {? | $(this.death:dead) |the corpse of } {? equal | $(this.trait:hiding) | 1 | {? equal | $(this.trait:title) | none ||$(this.trait:title) } $(this.trait:superbrief) | }
          </Base:Description>
          <Base:Description type="examine">
             {? | $(this.trait:override:examine) | $(this.trait:override:examine) | $(this.trait:examine) } $[if($this."combat:injuries" && (sizeof(map_indices($this."combat:injuries")) > 0)) return Describe($this)+" appears to be injured.";]
          </Base:Description>
          <Base:Description type="look">
             {? | $(this.trait:override:look) | $(this.trait:override:look) | <describe what="$(this)" cap="1"/> $(this.trait:lastname) is <a_or_an>$(this.appearance:height) $(this.appearance:build) $(this.trait:animal)</a_or_an>, with $(this.appearance:furlength) $(this.appearance:furtexture) $(this.appearance:furcolor) $(this.appearance:furtype){? equal | $(this.appearance:hashair) | yes |, and $(this.appearance:hairlength) $(this.appearance:hairtype) $(this.appearance:haircolor) hair$(this.appearance:hairstyle_string).|.} $[Call(${Ironclaw:Lib:Characters:Descriptions}, "describe_features")] } $[if($this."combat:injuries" && (sizeof(map_indices($this."combat:injuries")) > 0)) return Describe($this)+" appears to be injured.";]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="abs" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="abs"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:abs:adjectives) $(this.appearance:symbol:abs:adjective) $(this.appearance:abs) abs
          </Base:Description>
          <Base:Description type="examine">
             A set of $(this.appearance:abs) abs. $(this.appearance:symbol:abs) $[injuries::show_injuries()]
          </Base:Description>
          <Base:Description type="look">
             A set of $(this.appearance:abs) abs. $(this.appearance:symbol:abs) $[injuries::show_injuries()]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="adams-apple" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="larynx"/>
            <Base:SName sname="adamsapple"/>
            <Base:SName sname="adams-apple"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="adamsapples"/>
            <Base:PName pname="adams-apples"/>
            <Base:PName pname="larynxes"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:adams-apple:adjectives) $(this.appearance:symbol:adams-apple:adjective) $(this.appearance:adams-apple) adams apple
          </Base:Description>
          <Base:Description type="examine">
             A set of $(this.appearance:abs) abs. $(this.appearance:symbol:abs) $[injuries::show_injuries()]
          </Base:Description>
          <Base:Description type="look">
             A set of $(this.appearance:abs) abs. $(this.appearance:symbol:abs) $[injuries::show_injuries()]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="ankles" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="ankles"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:ankles:adjectives) $(this.appearance:symbol:ankles:adjective) $(this.appearance:ankles) ankles
          </Base:Description>
          <Base:Description type="examine">
             A $(this.appearance:ankles) pair of ankles. $(this.appearance:symbol:ankles) $[injuries::show_injuries()]
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:ankles) pair of ankles. $(this.appearance:symbol:ankles) $[injuries::show_injuries()]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="armpits" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="armpits"/>
            <Base:SName sname="pits"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:armpits:adjectives) $(this.appearance:symbol:armpits:adjective) $(this.appearance:armpits) armpits
          </Base:Description>
          <Base:Description type="examine">
             A pair of $(this.appearance:armpits) armpits. $(this.appearance:symbol:armpits) $[injuries::show_injuries()]
          </Base:Description>
          <Base:Description type="look">
             A pair of $(this.appearance:armpits) armpits. $(this.appearance:symbol:armpits) $[injuries::show_injuries()]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="arms" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="arms"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:arms:adjectives) $(this.appearance:symbol:arms:adjective) $(this.appearance:arms) arms
          </Base:Description>
          <Base:Description type="examine">
             A pair of $(this.appearance:arms) arms. $(this.appearance:symbol:arms) $[injuries::show_injuries()]
          </Base:Description>
          <Base:Description type="look">
             A pair of $(this.appearance:arms) arms. $(this.appearance:symbol:arms) $[injuries::show_injuries()]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="attention" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="attention"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="attentions"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.appearance:attention) attention
          </Base:Description>
          <Base:Description type="examine">
             A $(this.appearance:attention) attention. This is just here for parser play.
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:attention) attention. This is just here for parser play.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="back" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="true" under="false" on="true" inside="false" near="false" over="true" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="back"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="backs"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:back:adjectives) $(this.appearance:symbol:back:adjective) $(this.appearance:back) back
          </Base:Description>
          <Base:Description type="examine">
             A $(this.appearance:back) $(this.appearance:symbol:back:adjective) back. $[injuries::show_injuries()] $(this.appearance:symbol:back)
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:back) $(this.appearance:symbol:back:adjective) back. $[injuries::show_injuries()] $(this.appearance:symbol:back)
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="biceps" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="biceps"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:biceps:adjectives) $(this.appearance:symbol:biceps:adjective) $(this.appearance:biceps) biceps
          </Base:Description>
          <Base:Description type="examine">
             A pair of $(this.appearance:biceps) biceps. $(this.appearance:symbol:biceps) $[injuries::show_injuries()]
          </Base:Description>
          <Base:Description type="look">
             A pair of $(this.appearance:biceps) biceps. $(this.appearance:symbol:biceps) $[injuries::show_injuries()]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="body" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="body"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="bodies"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="human"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:body:adjectives) $(this.appearance:height) $(this.appearance:build) body
          </Base:Description>
          <Base:Description type="examine">
             A $(this.appearance:height) $(this.appearance:build) body, either considered as the complete person, or the person without their limbs. $(this.appearance:symbol:body) $[injuries::show_injuries()]
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:height) $(this.appearance:build) body, either considered as the complete person, or the person without their limbs. $(this.appearance:symbol:body) $[injuries::show_injuries()]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="bones" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="bones"/>
            <Base:SName sname="skeleton"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             skeleton of $(this.appearance:bones) bones
          </Base:Description>
          <Base:Description type="examine">
             A $(this.appearance:height) $(this.appearance:build) body, either considered as the complete person, or the person without their limbs. $(this.appearance:symbol:body) {? | $(this.combat:injury:body) |They have $(this.combat:injury:body).} $[injuries::show_injuries()]
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:height) $(this.appearance:build) body, either considered as the complete person, or the person without their limbs. $(this.appearance:symbol:body) {? | $(this.combat:injury:body) |They have $(this.combat:injury:body).} $[injuries::show_injuries()]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="breastbone" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="breastbone"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="breastbones"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:breastbone:adjectives) $(this.appearance:symbol:breastbone:adjective) $(this.appearance:breastbone) breastbone
          </Base:Description>
          <Base:Description type="examine">
             A $(this.appearance:height) $(this.appearance:build) body, either considered as the complete person, or the person without their limbs. $(this.appearance:symbol:body) {? | $(this.combat:injury:body) |They have $(this.combat:injury:body).} $[injuries::show_injuries()]
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:height) $(this.appearance:build) body, either considered as the complete person, or the person without their limbs. $(this.appearance:symbol:body) {? | $(this.combat:injury:body) |They have $(this.combat:injury:body).} $[injuries::show_injuries()]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="breasts" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="breasts"/>
            <Base:SName sname="boobs"/>
            <Base:SName sname="bosoms"/>
            <Base:SName sname="bossoms"/>
            <Base:SName sname="mammaries"/>
            <Base:SName sname="poitrine"/>
            <Base:SName sname="bust"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:breasts:adjectives) $(this.appearance:symbol:breasts:adjective) $(this.appearance:breasts) breasts
          </Base:Description>
          <Base:Description type="examine">
             A $(this.appearance:height) $(this.appearance:build) body, either considered as the complete person, or the person without their limbs. $(this.appearance:symbol:body) {? | $(this.combat:injury:body) |They have $(this.combat:injury:body).} $[injuries::show_injuries()]
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:height) $(this.appearance:build) body, either considered as the complete person, or the person without their limbs. $(this.appearance:symbol:body) {? | $(this.combat:injury:body) |They have $(this.combat:injury:body).} $[injuries::show_injuries()]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="breath" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="breath"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.appearance:breath) breath
          </Base:Description>
          <Base:Description type="examine">
             Some $(this.appearance:breath) breath. What is exhaled from the body after an inhalation.
          </Base:Description>
          <Base:Description type="look">
             Some $(this.appearance:breath) breath. What is exhaled from the body after an inhalation.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="brow" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="brow"/>
            <Base:SName sname="forehead"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="brows"/>
            <Base:PName pname="foreheads"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:brow:adjectives) $(this.appearance:symbol:brow:adjective) {? equal | $(this.appearance:browshape) | ordinary || $(this.appearance:browshape) } forehead
          </Base:Description>
          <Base:Description type="examine">
             A $(this.combat:injury:brow:adjectives) $(this.appearance:symbol:brow:adjective) {? equal | $(this.appearance:browshape) | ordinary || $(this.appearance:browshape) } forehead. This is the frontal top portion of the face.
          </Base:Description>
          <Base:Description type="look">
             A $(this.combat:injury:brow:adjectives) $(this.appearance:symbol:brow:adjective) {? equal | $(this.appearance:browshape) | ordinary || $(this.appearance:browshape) } forehead. This is the frontal top portion of the face.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="calves" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="true">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="calves"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:calves:adjectives) $(this.appearance:symbol:calves:adjective) $(this.appearance:calves) calves
          </Base:Description>
          <Base:Description type="examine">
             A $(this.appearance:calves) pair of calves. $(this.appearance:symbol:calves) $[injuries::show_injuries()]
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:calves) pair of calves. $(this.appearance:symbol:calves) $[injuries::show_injuries()]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="cheeks" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="cheeks"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:cheeks:adjectives) $(this.appearance:symbol:cheeks:adjective) $(this.appearance:cheeks) {? equal | $(this.appearance:cheekshape) | ordinary ||$(this.appearance:cheekshape) } cheeks
          </Base:Description>
          <Base:Description type="look">
             {? equal | $(this.appearance:cheekshape) | ordinary |A pair of $(this.appearance:cheeks) cheeks.|A pair of $(this.appearance:cheeks:adjective) $(this.appearance:cheekshape) cheeks.} $(this.appearance:symbol:cheeks) {? | $(this.combat:injury:cheeks) |They have $(this.combat:injury:cheeks).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="chest" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="chest"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="chests"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="left"/>
          <Base:Adjective adjective="right"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:chest:adjectives) $(this.appearance:symbol:chest:adjective) $(this.appearance:chest) chest
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:chest) chest. $(this.appearance:symbol:chest) {? | $(this.combat:injury:chest) |It has $(this.combat:injury:chest).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="chin" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="chin"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="chins"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:chin:adjectives) $(this.appearance:symbol:chin:adjective) $(this.appearance:chin) {? equal | $(this.appearance:jawshape) | ordinary |chin|$(this.appearance:jawshape) chin}
          </Base:Description>
          <Base:Description type="look">
             {? equal | $(this.appearance:jawshape) | ordinary |A $(this.appearance:chin) chin.|A $(this.appearance:chin:adjective) $(this.appearance:jawshape) chin.} $(this.appearance:symbol:chin) {? | $(this.combat:injury:chin) |It has $(this.combat:injury:chin).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="cleavage" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="cleavage"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="cleavages"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:abs:adjectives) $(this.appearance:symbol:cleavage:adjective) $(this.appearance:cleavage) cleavage
          </Base:Description>
          <Base:Description type="look">
             Some $(this.appearance:cleavage) cleavage. $(this.appearance:symbol:cleavage) {? | $(this.combat:injury:cleavage) |It has $(this.combat:injury:cleavage).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="collarbones" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="true">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames>
            <Base:PName pname="bones"/>
            <Base:PName pname="clavicles"/>
            <Base:PName pname="collarbones"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="collar"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:collarbones:adjectives) $(this.appearance:symbol:collarbones:adjective) $(this.appearance:collarbones) collarbones
          </Base:Description>
          <Base:Description type="look">
             The bone across the upper front of the body, connecting the breastbone to the shoulders. $(this.appearance:symbol:collarbone) {? | $(this.combat:injury:collarbone) |It has $(this.combat:injury:collarbone).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="decolletage" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="decolletage"/>
            <Base:SName sname="dec"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="decolletages"/>
            <Base:PName pname="decs"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:decolletage:adjectives) $(this.appearance:symbol:decolletage:adjective) $(this.appearance:decolletage) decolletage
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:decolletage) decolletage. $(this.appearance:symbol:decolletage) {? | $(this.combat:injury:decolletage) |It has $(this.combat:injury:decolletage).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="digits" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="pname: digits"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="left"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:digits:adjectives)  $(this.appearance:digits) ten digits
          </Base:Description>
          <Base:Description type="look">
             A set of ten digits not counting the toes. {? | $(this.combat:injury:digits) |They have $(this.combat:injury:digits).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="earlobes" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="earlobes"/>
            <Base:SName sname="lobes"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="ear"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:earlobes:adjectives) $(this.appearance:symbol:earlobes:adjectives) $(this.appearance:earlobes) {? equal | $(this.appearance:earshape) | ordinary ||$(this.appearance:earshape) }earlobes
          </Base:Description>
          <Base:Description type="look">
             {? equal | $(this.appearance:earshape) | ordinary |A pair of $(this.appearance:earlobes) ears.|A pair of $(this.appearance:earlobes:adjective) $(this.appearance:earshape) earlobes.} $(this.appearance:symbol:earlobes) {? | $(this.combat:injury:earlobes) |They have $(this.combat:injury:earlobes).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="ears" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="ears"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:ears:adjectives) $(this.appearance:symbol:ears:adjective) $(this.appearance:ears) {? equal | $(this.appearance:earshape) | ordinary ||$(this.appearance:earshape) }ears
          </Base:Description>
          <Base:Description type="look">
             {? equal | $(this.appearance:earshape) | ordinary |A pair of $(this.appearance:ears) ears.|A pair of $(this.appearance:ears:adjective) $(this.appearance:earshape) ears.} $(this.appearance:symbol:ears) {? | $(this.combat:injury:ears) |They have $(this.combat:injury:ears).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="ego" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="ego"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="egos"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.appearance:ego) ego
          </Base:Description>
          <Base:Description type="look">
             You cannot look at this.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="elbows" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="elbows"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:elbows:adjectives) $(this.appearance:symbol:elbows:adjective) $(this.appearance:elbows) elbows
          </Base:Description>
          <Base:Description type="look">
             A pair of $(this.appearance:elbows) elbows. $(this.appearance:symbol:elbows) {? | $(this.combat:injury:elbows) |They have $(this.combat:injury:elbows).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="expression" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="expression"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="expressions"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.appearance:expression) expression
          </Base:Description>
          <Base:Description type="look">
             That is not a real thing.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="eyebrows" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="eyebrows"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             {? equal | $(this.appearance:eyebrowshape) | ordinary ||$(this.appearance:eyebrowshape) }eyebrows
          </Base:Description>
          <Base:Description type="look">
             {? equal | $(this.appearance:eyebrowshape) | ordinary |A pair of eyebrows.|A pair of $(this.appearance:eyebrowshape) eyebrows.}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="eyelashes" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="eyelashes"/>
            <Base:SName sname="lashes"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.appearance:eyelashes) eyelashes
          </Base:Description>
          <Base:Description type="look">
             A pair of $(this.appearance:eyelashes) eyelashes.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="eyelids" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="eyelids"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:eyelids:adjectives) $(this.appearance:symbol:eyelids:adjective) $(this.appearance:eyelids) $(this.appearance:eyeshadow) eyelids
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:eyelids) $(this.appearance:eyeshadow) pair of eyelids. $(this.appearance:symbol:eyelids) {? | $(this.combat:injury:eyelids) |They have $(this.combat:injury:eyelids).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="eyes" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="eyes"/>
            <Base:SName sname="peepers"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:eyes:adjectives) {? | $(this.appearance:eyeshadow) | $(this.appearance:eyeshadow)-shadowed } $(this.appearance:eyes) {? equal | $(this.appearance:eyeshape) $(this.appearance:eyecolor) | ordinary ||$(this.appearance:eyeshape) $(this.appearance:eyecolor) }eyes
          </Base:Description>
          <Base:Description type="look">
             A pair of {? | $(this.appearance:eyeshadow) | $(this.appearance:eyeshadow)-shadowed } $(this.appearance:eyes) {? equal | $(this.appearance:eyeshape) $(this.appearance:eyecolor) | ordinary ||$(this.appearance:eyeshape) $(this.appearance:eyecolor) }eyes. {? | $(this.combat:injury:eyes) |they have $(this.combat:injury:eyes).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="face" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="face"/>
            <Base:SName sname="feature"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="faces"/>
            <Base:PName pname="features"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:face:adjectives) $(this.appearance:symbol:face:adjective) $(this.appearance:face)  face
          </Base:Description>
          <Base:Description type="look">
             {? equal | $(this.appearance:facialhair) | none |A $(this.appearance:face) face consisting of $(this.appearance:cheekshape) cheeks, a $(this.appearance:noseshape) nose over a $(this.appearance:mouthshape) mouth with $(this.appearance:lipshape) lips covering $(this.appearance:teeth) teeth that permit a $(this.appearance:tongue) tongue to peek out on occasion. The face is framed by $(this.appearance:earshape) ears and holds $(this.appearance:eyeshape:adjective) $(this.appearance:eyecolor) eyes.|A $(this.appearance:face) face consisting of $(this.appearance:cheekshape) cheeks, a $(this.appearance:noseshape) nose over a $(this.appearance:mouthshape) mouth with $(this.appearance:lipshape) lips covering $(this.appearance:teeth) teeth that permit a $(this.appearance:tongue) tongue to peek out on occasion. The face is framed by $(this.appearance:earshape) ears and holds $(this.appearance:eyeshape:adjective) $(this.appearance:eyecolor) eyes. The $(this.appearance:face) face also bears $(this.appearance:facialhair) which {? | $(this.appearance:facialprep) | $(this.appearance:facialprep) | is } $(this.appearance:faciallength).} $(this.appearance:symbol:face) {? | $(this.combat:injury:face) |It has $(this.combat:injury:face).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="facialhair" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="facialhair"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             {? | $(this.appearance:faciallength) | $(this.appearance:facialhair) | lack of facialhair}
          </Base:Description>
          <Base:Description type="look">
             A {? | $(this.appearance:facialhair) | $(this.appearance:facialhair) which {? | $(this.appearance:facialprep) | $(this.appearance:facialprep) | is } $(this.appearance:faciallength)| <capitalize what="$(this.base:possessive)"/> lack of facial hair}.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="feet" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="false" under="false" on="false" inside="false" near="true" over="false" behind="false" before="false" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="feet"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:feet:adjectives) $(this.appearance:symbol:feet:adjective) $(this.appearance:feet) $(this.appearance:feettype:p)
          </Base:Description>
          <Base:Description type="look">
             A pair of $(this.appearance:feet) $(this.appearance:feettype:p). $(this.appearance:symbol:feet) {? | $(this.combat:injury:feet) |They have $(this.combat:injury:feet).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="fingernails" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="fingernails"/>
            <Base:SName sname="nails"/>
            <Base:SName sname="claws"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="finger"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             {? | $(this.declawed) | missing $(this.appearance:clawtype) |            $(this.combat:injury:fingernails:adjectives)  $(this.appearance:clawlength) $(this.appearance:clawapp) $(this.appearance:clawtype) }
          </Base:Description>
          <Base:Description type="look">
             {? | $(this.declawed) | Where you would expect to see $(this.appearance:clawtype) you notice instead that they have been messily removed from the fingers. |            Ten $(this.appearance:clawlength) $(this.appearance:clawapp) $(this.appearance:clawtype), at the ends of the fingers. {? | $(this.combat:injury:fingernails) |It has $(this.combat:injury:fingernails).} }
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="fingers" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="fingers"/>
            <Base:SName sname="digits"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:fingers:adjectives) $(this.appearance:symbol:fingers:adjective) $(this.appearance:fingers) fingers
          </Base:Description>
          <Base:Description type="look">
             A complete set of $(this.appearance:fingers) fingers. $(this.appearance:symbol:fingers) {? | $(this.combat:injury:fingers) |They have $(this.combat:injury:fingers).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="fingertips" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="true">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="fingertips"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:fingertips:adjectives) $(this.appearance:symbol:fingertips:adjective) $(this.appearance:fingertips) fingertips
          </Base:Description>
          <Base:Description type="look">
             Two $(this.appearance:fingertips) sets of fingertips. $(this.appearance:symbol:fingertips) {? | $(this.combat:injury:fingertips) |They have $(this.combat:injury:fingertips).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="fists" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="fists"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="left"/>
          <Base:Adjective adjective="right"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:fists:adjectives) $(this.appearance:symbol:fists:adjective) $(this.appearance:fists) fists
          </Base:Description>
          <Base:Description type="look">
             A pair of $(this.appearance:fists) fists. $(this.appearance:symbol:fists) {? | $(this.combat:injury:fists) |They have $(this.combat:injury:fists).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="forearms" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="forearms"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:forearms:adjectives) $(this.appearance:symbol:forearms:adjective) $(this.appearance:forearms) forearms
          </Base:Description>
          <Base:Description type="look">
             A pair of $(this.appearance:forearms) forearms. $(this.appearance:symbol:forearms) {? | $(this.combat:injury:forearms) |They have $(this.combat:injury:forearms).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="frown" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="frown"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.appearance:frown) frown
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:frown) frown.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="fur" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="fur"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             {? equal | $(this.appearance:furtexture) | ordinary ||$(this.appearance:furtexture) } $(this.appearance:furcolor) $(this.appearance:furtype)
          </Base:Description>
          <Base:Description type="look">
             A covering of {? equal | $(this.appearance:furlength) | ordinary ||$(this.appearance:furlength) } {? equal | $(this.appearance:furtexture) | ordinary ||$(this.appearance:furtexture) } $(this.appearance:furcolor) $(this.appearance:furtype).
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="gaze" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="gaze"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="gazes"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.appearance:gaze) gaze
          </Base:Description>
          <Base:Description type="look">
             That is not a real thing.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="groin" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="groin"/>
            <Base:SName sname="crotch"/>
            <Base:SName sname="private"/>
            <Base:SName sname="genitals"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="crotches"/>
            <Base:PName pname="genitalia"/>
            <Base:PName pname="groins"/>
            <Base:PName pname="privates"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:groin:adjectives) $(this.appearance:groin) groin
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:groin) groin. {? | $(this.combat:injury:groin) |It has $(this.combat:injury:groin).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="gut" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="gut"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="guts"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:gut:adjectives) $(this.appearance:symbol:gut:adjective) $(this.appearance:gut) gut
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:gut) gut. $(this.appearance:symbol:gut) {? | $(this.combat:injury:gut) |It has $(this.combat:injury:gut).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="hair" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="hair"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             {? equal | $(this.appearance:hashair) | yes |{? equal | $(this.appearance:hairlength) | ordinary ||$(this.appearance:hairlength) }{? equal | $(this.appearance:hairtype) | ordinary ||$(this.appearance:hairtype) }{? equal | $(this.appearance:haircolor) | ordinary ||{? equal | $(this.appearance:haircoloradj) | ordinary ||$(this.appearance:haircoloradj)}$(this.appearance:haircolor) }hair|lack of hair}
          </Base:Description>
          <Base:Description type="examine">
             {? equal | $(this.appearance:hashair) | yes |A head of {? equal | $(this.appearance:hairlength) | ordinary ||$(this.appearance:hairlength) }{? equal | $(this.appearance:hairtype) | ordinary ||$(this.appearance:hairtype) }{? equal | $(this.appearance:haircolor) | ordinary ||{? equal | $(this.appearance:haircoloradj) | ordinary ||$(this.appearance:haircoloradj)}$(this.appearance:haircolor) }hair{? | $(this.appearance:hairstyle_examine) |. <capitalize what="$(this.base:possessive)"/> hair $(this.appearance:hairstyle_examine)|$(this.appearance:hairstyle_string)}| <capitalize what="$(this.trait:nominative)"/> lacks hair}. $(this.appearance:hairstyle_examinedescription)
          </Base:Description>
          <Base:Description type="look">
             {? equal | $(this.appearance:hashair) | yes |A head of {? equal | $(this.appearance:hairlength) | ordinary ||$(this.appearance:hairlength) }{? equal | $(this.appearance:hairtype) | ordinary ||$(this.appearance:hairtype) }{? equal | $(this.appearance:haircolor) | ordinary ||{? equal | $(this.appearance:haircoloradj) | ordinary ||$(this.appearance:haircoloradj)}$(this.appearance:haircolor) }hair{? | $(this.appearance:hairstyle_examine) |. <capitalize what="$(this.base:possessive)"/> hair $(this.appearance:hairstyle_examine)|$(this.appearance:hairstyle_string)}| <capitalize what="$(this.trait:nominative)"/> lacks hair}. $(this.appearance:hairstyle_lookdescription)
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="hands" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="hands"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             {? | $(this.declawed) | declawed }           $(this.combat:injury:hands:adjectives) $(this.appearance:symbol:hands) {? equal | $(this.appearance:hands) | ordinary ||$(this.appearance:hands) }hands
          </Base:Description>
          <Base:Description type="look">
             {? equal | $(this.appearance:hands) | ordinary |A pair of hands.|A pair of $(this.appearance:hands) hands.} $(this.appearance:symbol:hands) {? | $(this.combat:injury:hands) |They have $(this.combat:injury:hands).} {? | $(this.declawed) | The nails on this hand have been messily removed. }
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="head" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="head"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="heads"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:head:adjectives) $(this.appearance:symbol:head:adjective) $(this.appearance:head) head
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:head) head. $(this.appearance:symbol:head) {? | $(this.combat:injury:head) |It has $(this.combat:injury:head).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="heart" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="heart"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.appearance:heart) heart
          </Base:Description>
          <Base:Description type="examine">
             You cannot examine this.
          </Base:Description>
          <Base:Description type="glance">
             You cannot glance at this.
          </Base:Description>
          <Base:Description type="look">
             You cannot look at this.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="heels" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="heels"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:heels:adjectives) $(this.appearance:symbol:heels:adjective) $(this.appearance:heels) heels
          </Base:Description>
          <Base:Description type="look">
             A pair of $(this.appearance:heels) heels. $(this.appearance:symbol:heels) {? | $(this.combat:injury:heels) |They have $(this.combat:injury:heels).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="hipbones" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="hipbones"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:hipbones:adjectives) $(this.appearance:symbol:hipbones:adjective) $(this.appearance:hipbones) hipbones
          </Base:Description>
          <Base:Description type="look">
             A pair of $(this.appearance:hipbones) hipbones. $(this.appearance:symbol:hipbones) {? | $(this.combat:injury:hipbones) |They have $(this.combat:injury:hipbones).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="hips" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="hips"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:hips:adjectives) $(this.appearance:symbol:hips:adjective) $(this.appearance:hips) hips
          </Base:Description>
          <Base:Description type="look">
             A pair of $(this.appearance:hips) hips. $(this.appearance:symbol:hips) {? | $(this.combat:injury:hips) |They have $(this.combat:injury:hips).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="jaw" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="jaw"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="jaws"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:jaw:adjectives) $(this.appearance:symbol:jaw:adjective) $(this.appearance:jaw) {? equal | $(this.appearance:jawshape) | ordinary ||$(this.appearance:jawshape)} jaw
          </Base:Description>
          <Base:Description type="look">
             {? equal | $(this.appearance:jawshape) | ordinary |A $(this.appearance:jaw) jaw.|A $(this.appearance:jaw:adjective) $(this.appearance:jawshape) jaw.} $(this.appearance:symbol:jaw) {? | $(this.combat:injury:jaw) |It has $(this.combat:injury:jaw).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="jugular" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="vein"/>
            <Base:SName sname="jugular"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="jugulars"/>
            <Base:PName pname="veins"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="jugular"/>
          <Base:Adjective adjective="neck"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:jugular:adjectives) $(this.appearance:symbol:jugular:adjective) $(this.appearance:jugular) jugular vein
          </Base:Description>
          <Base:Description type="look">
             The $(this.appearance:jugular) jugular veins, running along the neck. $(this.appearance:symbol:jugular) {? | $(this.combat:injury:jugular) |It has $(this.combat:injury:jugular).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="knees" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="knees"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:knees:adjectives) $(this.appearance:symbol:knees:adjective) $(this.appearance:knees) knees
          </Base:Description>
          <Base:Description type="look">
             A pair of $(this.appearance:knees) knees. $(this.appearance:symbol:knees) {? | $(this.combat:injury:knees) |They have $(this.combat:injury:knees).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="knuckles" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="true">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="knuckles"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:knuckles:adjectives) $(this.appearance:symbol:knuckles:adjective) $(this.appearance:knuckles) knuckles
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:knuckles) set of knuckles. $(this.appearance:symbol:knuckles) {? | $(this.combat:injury:knuckles) |They have $(this.combat:injury:knuckles).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="lap" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="true" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="lap"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="laps"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.appearance:lap) lap
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:lap) lap.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="left-collarbone" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="collarbone"/>
            <Base:SName sname="bone"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="collar"/>
          <Base:Adjective adjective="first"/>
          <Base:Adjective adjective="left"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:left-collarbone:adjectives) $(this.appearance:symbol:left-collarbone:adjective) $(this.appearance:left-collarbone) left collarbone
          </Base:Description>
          <Base:Description type="look">
             The bone across the upper front of the body, connecting the breastbone to the shoulders. $(this.appearance:symbol:left-collarbone) {? | $(this.combat:injury:left-collarbone) |It has $(this.combat:injury:left-collarbone).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="legs" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="true" under="false" on="true" inside="false" near="false" over="true" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="legs"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:legs:adjectives) $(this.appearance:symbol:legs:adjective) $(this.appearance:legs) legs
          </Base:Description>
          <Base:Description type="look">
             A pair of $(this.appearance:legs) legs. $(this.appearance:symbol:legs) {? | $(this.combat:injury:legs) |They have $(this.combat:injury:legs).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="limbs" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="limb"/>
            <Base:SName sname="member"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="limbs"/>
            <Base:PName pname="members"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="lower"/>
          <Base:Adjective adjective="nether"/>
          <Base:Adjective adjective="upper"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">limbs</Base:Description>
          <Base:Description type="look">
             The arms and legs, together with their hands, feet, elbows, knees, etc...
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="lip-lower" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="lip"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="bottom"/>
          <Base:Adjective adjective="lower"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:lip-lower:adjectives) $(this.appearance:symbol:lip-lower:adjective) $(this.appearance:lip-lower) $(this.appearance:lipshape) $(this.appearance:lips) lower lip
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:lip-lower) $(this.appearance:lipshape) $(this.appearance:lips) lower lip. $(this.appearance:symbol:lip-lower) {? | $(this.combat:injury:lip-lower) |It has $(this.combat:injury:lip-lower).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="lip-upper" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="lip"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="top"/>
          <Base:Adjective adjective="upper"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:lip-upper:adjectives) $(this.appearance:symbol:lip-upper:adjective) $(this.appearance:lip-upper) $(this.appearance:lipshape) $(this.appearance:lips) upper lip
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:lip-upper) $(this.appearance:lipshape) $(this.appearance:lips) upper lip. $(this.appearance:symbol:lip-upper) {? | $(this.combat:injury:lip-upper) |It has $(this.combat:injury:lip-upper).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="lips" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="lips"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:lips:adjectives) $(this.appearance:symbol:lips:adjective) $(this.appearance:lipshape) $(this.appearance:lips) lips
          </Base:Description>
          <Base:Description type="look">
             A pair of $(this.appearance:lipshape) $(this.appearance:lips) lips. $(this.appearance:symbol:lips) {? | $(this.combat:injury:lips) |They have $(this.combat:injury:lips).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="lower-back" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="true" under="false" on="true" inside="false" near="false" over="true" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames>
            <Base:PName pname="back"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="lower"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:lower-back:adjectives) $(this.appearance:symbol:lower-back:adjective) $(this.appearance:lower-back) lower back
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:lower-back) lower back. $(this.appearance:symbol:lower-back) {? | $(this.combat:injury:lower-back) |It has $(this.combat:injury:lower-back).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="mind" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="mind"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="minds"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.appearance:mind) mind
          </Base:Description>
          <Base:Description type="look">
             You cannot look at this.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="mouth" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="mouth"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="mouths"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:mouth:adjectives) $(this.appearance:symbol:mouth:adjective) $(this.appearance:mouth) {? equal | $(this.appearance:mouthshape) | ordinary ||$(this.appearance:mouthshape) }mouth
          </Base:Description>
          <Base:Description type="look">
             {? equal | $(this.appearance:mouthshape) | ordinary |A $(this.appearance:mouth) mouth.|A $(this.appearance:mouth:adjective) $(this.appearance:mouthshape) mouth.} $(this.appearance:symbol:mouth) {? | $(this.combat:injury:mouth) |It has $(this.combat:injury:mouth).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="muscles" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="muscle"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="muscles"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.appearance:muscles) muscles
          </Base:Description>
          <Base:Description type="look">
             The contractile tissue which produces movement in an animate body.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="nape" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="nape"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:nape:adjectives) $(this.appearance:symbol:nape:adjective) $(this.appearance:nape) nape
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:nape) nape, otherwise known as the back of the neck. $(this.appearance:symbol:nape) {? | $(this.combat:injury:nape) |It has $(this.combat:injury:nape).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="navel" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="navel"/>
            <Base:SName sname="bellybutton"/>
            <Base:SName sname="omphalos"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="bellybuttons"/>
            <Base:PName pname="navels"/>
            <Base:PName pname="omphalae"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:navel:adjectives) $(this.appearance:symbol:navel:adjective) $(this.appearance:navel) navel
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:navel) navel. $(this.appearance:symbol:navel) {? | $(this.combat:injury:navel) |It has $(this.combat:injury:navel).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="neck" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="neck"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="necks"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:neck:adjectives) $(this.appearance:symbol:neck:adjective) $(this.appearance:neck) neck
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:neck) neck. $(this.appearance:symbol:neck) {? | $(this.combat:injury:neck) |It has $(this.combat:injury:neck).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="nerves" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames>
            <Base:PName pname="nerves"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">nerves</Base:Description>
          <Base:Description type="examine">
             This is an internal part of the body, sometimes referenced with emotion.
          </Base:Description>
          <Base:Description type="look">
             This is an internal part of the body, sometimes referenced with emotion.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="new" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             NEW detail
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="nipples" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="nipples"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:nipples:adjectives) $(this.appearance:symbol:nipples:adjective) $(this.appearance:nipples) nipples
          </Base:Description>
          <Base:Description type="look">
             A pair of $(this.appearance:nipples) nipples. $(this.appearance:symbol:nipples) {? | $(this.combat:injury:nipples) |They have $(this.combat:injury:nipples).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="nose" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="true" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="nose"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="noses"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:nose:adjectives) $(this.appearance:symbol:nose:adjective) $(this.appearance:nose) {? equal | $(this.appearance:noseshape) | ordinary ||$(this.appearance:noseshape) }nose
          </Base:Description>
          <Base:Description type="look">
             {? equal | $(this.appearance:noseshape) | ordinary |A $(this.appearance:nose) nose.|A $(this.appearance:nose:adjective) $(this.appearance:noseshape) nose.} $(this.appearance:symbol:nose) {? | $(this.combat:injury:nose) |It has $(this.combat:injury:nose).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="nostrils" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="nostrils"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:nostrils:adjectives) $(this.appearance:symbol:nostrils:adjective) $(this.appearance:nostrils) nostrils
          </Base:Description>
          <Base:Description type="look">
             A pair of $(this.appearance:nostrils) nostrils. $(this.appearance:symbol:nostrils) {? | $(this.combat:injury:nostrils) |They have $(this.combat:injury:nostrils).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="palms" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="palms"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:palms:adjectives) $(this.appearance:symbol:palms:adjective) $(this.appearance:palms) palms
          </Base:Description>
          <Base:Description type="look">
             A pair of $(this.appearance:palms) palms. $(this.appearance:symbol:palms) {? | $(this.combat:injury:palms) |They have $(this.combat:injury:palms).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="pects" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="pects"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:pects:adjectives) $(this.appearance:symbol:pects:adjective) $(this.appearance:pects) $(this.trait:brief:muscle) pects
          </Base:Description>
          <Base:Description type="look">
             A pair of $(this.appearance:pects) $(this.trait:brief:muscle) pects. $(this.appearance:symbol:pects) {? | $(this.combat:injury:pects) |They have $(this.combat:injury:pects).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="pinkies" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="pinkies"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="little"/>
          <Base:Adjective adjective="pinky"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">pinkies</Base:Description>
          <Base:Description type="look">
             The little fingers of the hands, with nails at the ends.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="presence" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="presence"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="presences"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.appearance:presence) presence
          </Base:Description>
          <Base:Description type="look">
             That is not a real thing.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="pupils" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="pupils"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.appearance:pupils) pupils
          </Base:Description>
          <Base:Description type="look">
             A pair of $(this.appearance:pupils) pupils.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="reach" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="true" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="reach"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="reaches"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="NEW">empty</Base:Description>
          <Base:Description type="brief">reach</Base:Description>
          <Base:Description type="examine">
             The length of which someone can extend themselves. This generally refers to the reach of ones arms.
          </Base:Description>
          <Base:Description type="look">
             The length of which someone can extend themselves.
          </Base:Description>
          <Base:Description type="new">empty</Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="ribs" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="ribcage"/>
            <Base:SName sname="rib"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="ribcages"/>
            <Base:PName pname="ribs"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="left"/>
          <Base:Adjective adjective="right"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:ribs:adjectives) $(this.appearance:symbol:ribs:adjective) $(this.appearance:ribs) ribs
          </Base:Description>
          <Base:Description type="look">
             A set of $(this.appearance:ribs) ribs. $(this.appearance:symbol:ribs) {? | $(this.combat:injury:ribs) |They have $(this.combat:injury:ribs).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="right-collarbone" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="collarbone"/>
            <Base:SName sname="bone"/>
            <Base:SName sname="clavicle"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="collar"/>
          <Base:Adjective adjective="right"/>
          <Base:Adjective adjective="second"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:right-collarbone:adjectives) $(this.appearance:symbol:right-collarbone:adjective) $(this.appearance:right-collarbone) right collarbone
          </Base:Description>
          <Base:Description type="look">
             The bone across the upper front of the body, connecting the breastbone to the shoulders. $(this.appearance:symbol:right-collarbone) {? | $(this.combat:injury:right-collarbone) |It has $(this.combat:injury:right-collarbone).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="rump" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="rump"/>
            <Base:SName sname="butt"/>
            <Base:SName sname="ass"/>
            <Base:SName sname="rear"/>
            <Base:SName sname="bum"/>
            <Base:SName sname="derriere"/>
            <Base:SName sname="buttock"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="asses"/>
            <Base:PName pname="buttocks"/>
            <Base:PName pname="butts"/>
            <Base:PName pname="bums"/>
            <Base:PName pname="derrieres"/>
            <Base:PName pname="rears"/>
            <Base:PName pname="rumps"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:rump:adjectives) $(this.appearance:symbol:rump:adjective) $(this.appearance:rump:adjective) $(this.appearance:butt) $(this.trait:butt)
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:butt) $(this.trait:butt). $(this.appearance:symbol:rump) {? | $(this.combat:injury:rump) |It has $(this.combat:injury:rump).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="scalp" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="scalp"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="scalps"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:scalp:adjectives) $(this.appearance:symbol:scalp:adjective) $(this.appearance:scalp) scalp
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:scalp) scalp. $(this.appearance:symbol:scalp) {? | $(this.combat:injury:scalp) |It has $(this.combat:injury:scalp).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="scar" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="duelling"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.trait:scarname) scar
          </Base:Description>
          <Base:Description type="examine">
             A scar of $(this.trait:scarname) prominence.
          </Base:Description>
          <Base:Description type="look">
             A $(this.trait:scarname) scar.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="shadow" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="shadow"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="shadows"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">shadow</Base:Description>
          <Base:Description type="examine">
             A shadow. A reflected image cast on a surface by a body intercepting light.
          </Base:Description>
          <Base:Description type="look">
             A shadow. A reflected image cast on a surface by a body intercepting light.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="shins" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="shins"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:shins:adjectives) $(this.appearance:symbol:shins:adjective) $(this.appearance:shins) shins
          </Base:Description>
          <Base:Description type="look">
             A pair of $(this.appearance:shins) shins. $(this.appearance:symbol:shins) {? | $(this.combat:injury:shins) |They have $(this.combat:injury:shins).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="shoulderblades" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="shoulderblades"/>
            <Base:SName sname="scapulas"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:shoulderblades:adjectives) $(this.appearance:symbol:shoulderblades:adjective) $(this.appearance:shoulderblades) shoulderblades
          </Base:Description>
          <Base:Description type="look">
             The triangular bones across the upper back of the body, connected to the collarbone. $(this.appearance:symbol:shoulderblades) {? | $(this.combat:injury:shoulderblades) |They have $(this.combat:injury:shoulderblades).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="shoulders" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="shoulders"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:shoulders:adjectives) $(this.appearance:symbol:shoulders:adjective) $(this.appearance:shoulders) shoulders
          </Base:Description>
          <Base:Description type="look">
             A pair of $(this.appearance:shoulders) shoulders. $(this.appearance:symbol:shoulders) {? | $(this.combat:injury:shoulders) |They have $(this.combat:injury:shoulders).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="sides" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="sides"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:sides:adjectives) $(this.appearance:symbol:sides:adjective) $(this.appearance:sides) sides
          </Base:Description>
          <Base:Description type="look">
             The sides, between the ribs and the waist. $(this.appearance:symbol:sides) {? | $(this.combat:injury:sides) |They have $(this.combat:injury:sides).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="skin" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="skin"/>
            <Base:SName sname="complexion"/>
            <Base:SName sname="flesh"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="complexions"/>
            <Base:PName pname="skins"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.appearance:skin) skin
          </Base:Description>
          <Base:Description type="look">
             Skin{? | $(this.appearance:skin)) | of a $(this.appearance:skin) complexion}.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="smile" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="smile"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.appearance:smile) smile
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:smile) smile.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="soles" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="true">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="soles"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:soles:adjectives) $(this.appearance:symbol:soles:adjective) $(this.appearance:soles) soles
          </Base:Description>
          <Base:Description type="look">
             A pair of $(this.appearance:soles) soles. $(this.appearance:symbol:soles) {? | $(this.combat:injury:soles) |They have $(this.combat:injury:soles).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="soul" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="soul"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="souls"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.appearance:soul) soul
          </Base:Description>
          <Base:Description type="look">
             You cannot look at this.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="spine" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="spine"/>
            <Base:SName sname="chord"/>
            <Base:SName sname="vertebra"/>
            <Base:SName sname="bone"/>
            <Base:SName sname="backbone"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="backbones"/>
            <Base:PName pname="bones"/>
            <Base:PName pname="chords"/>
            <Base:PName pname="spines"/>
            <Base:PName pname="vertebrae"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="back"/>
          <Base:Adjective adjective="spinal"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:spine:adjectives) $(this.appearance:symbol:spine:adjective) $(this.appearance:spine) backbone
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:spine) backbone. $(this.appearance:symbol:spine) {? | $(this.combat:injury:spine) |It has $(this.combat:injury:spine).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="stomach" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="stomach"/>
            <Base:SName sname="belly"/>
            <Base:SName sname="tummy"/>
            <Base:SName sname="abdomen"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="abdomens"/>
            <Base:PName pname="bellies"/>
            <Base:PName pname="tummys"/>
            <Base:PName pname="stomachs"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:stomach:adjectives) $(this.appearance:symbol:stomach:adjective) $(this.appearance:stomach) stomach
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:stomach) stomach. $(this.appearance:symbol:stomach) {? | $(this.combat:injury:stomach) |It has $(this.combat:injury:stomach).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="teeth" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="tooth"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="teeth"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.appearance:teeth) teeth
          </Base:Description>
          <Base:Description type="look">
             A set of $(this.appearance:teeth) teeth.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="temples" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="temples"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:temples:adjectives) $(this.appearance:symbol:temples:adjective) $(this.appearance:temples) temples
          </Base:Description>
          <Base:Description type="look">
             A pair of $(this.appearance:temples) temples, on either side of the forehead. $(this.appearance:symbol:temples) {? | $(this.combat:injury:temples) |They have $(this.combat:injury:temples).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="thighs" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="thighs"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:thighs:adjectives) $(this.appearance:symbol:thighs:adjective) $(this.appearance:thighs) thighs
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:thighs) pair of thighs. $(this.appearance:symbol:thighs) {? | $(this.combat:injury:thighs) |They have $(this.combat:injury:thighs).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="throat" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="throat"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="throats"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:throat:adjectives) $(this.appearance:symbol:throat:adjective) $(this.appearance:throat) throat
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:throat) throat. $(this.appearance:symbol:throat) {? | $(this.combat:injury:throat) |It has $(this.combat:injury:throat).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="thumbs" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="thumbs"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:thumbs:adjectives) $(this.appearance:symbol:thumbs:adjective) $(this.appearance:thumbs) thumbs
          </Base:Description>
          <Base:Description type="look">
             A pair of $(this.appearance:thumbs) thumbs. $(this.appearance:symbol:thumbs) {? | $(this.combat:injury:thumbs) |They have $(this.combat:injury:thumbs).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="toenail" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="toenail"/>
            <Base:SName sname="nail"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="toe"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:toenail:adjectives)  $(this.appearance:toenail) toenail
          </Base:Description>
          <Base:Description type="look">
             A toenail, at the end of a toe. {? | $(this.combat:injury:toenail) |It has $(this.combat:injury:toenail).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="toenails" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="toenails"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="nails"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="toe"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:toenails:adjectives)  $(this.appearance:toenails) toenails
          </Base:Description>
          <Base:Description type="look">
             Ten toenails, at the ends of the toes. {? | $(this.combat:injury:toenails) |They have $(this.combat:injury:toenails).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="toes" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="toes"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:toes:adjectives) $(this.appearance:symbol:toes:adjective) $(this.appearance:toes) toes
          </Base:Description>
          <Base:Description type="look">
             A set of $(this.appearance:toes) toes. $(this.appearance:symbol:toes) {? | $(this.combat:injury:toes) |They have $(this.combat:injury:toes).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="tongue" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="tongue"/>
            <Base:SName sname="tounge"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="tongues"/>
            <Base:PName pname="tounges"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:tongue:adjectives)  $(this.appearance:tongue) tongue
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:tongue) tongue. {? | $(this.combat:injury:tongue) |It has $(this.combat:injury:tongue).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="torso" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="torso"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="torsos"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:torso:adjectives)  $(this.appearance:torso) torso
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:torso) torso. {? | $(this.combat:injury:torso) |It has $(this.combat:injury:torso).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="triceps" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="triceps"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:triceps:adjectives) $(this.appearance:symbol:triceps:adjective) $(this.appearance:triceps:adjective) $(this.appearance:muscle) triceps
          </Base:Description>
          <Base:Description type="look">
             A pair of $(this.appearance:triceps:adjective) $(this.appearance:muscle) triceps. $(this.appearance:symbol:triceps) {? | $(this.combat:injury:triceps) |They have $(this.combat:injury:triceps).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="voice" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="voice"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="voices"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.appearance:voice) voice
          </Base:Description>
          <Base:Description type="look">
             That is not a real thing.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="waist" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="waist"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="waists"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="left"/>
          <Base:Adjective adjective="right"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:waist:adjectives) $(this.appearance:symbol:waist:adjective) $(this.appearance:waist) waist
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:waist) waist. $(this.appearance:symbol:waist) {? | $(this.combat:injury:waist) |It has $(this.combat:injury:waist).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="weight" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="weight"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">weight</Base:Description>
          <Base:Description type="look">
             That is not a real thing.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="windpipe" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="windpipe"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:windpipe:adjectives) $(this.appearance:symbol:windpipe:adjective) $(this.appearance:windpipe) windpipe
          </Base:Description>
          <Base:Description type="examine">
             A $(this.appearance:windpipe) windpipe. $(this.appearance:symbol:windpipe) $[injuries::show_injuries()]
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:windpipe) windpipe. $(this.appearance:symbol:windpipe) $[injuries::show_injuries()]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="words" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames>
            <Base:PName pname="words"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">words</Base:Description>
          <Base:Description type="look">
             That is not a real thing.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="wrists" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="wrists"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:wrists:adjectives) $(this.appearance:symbol:wrists:adjective) $(this.appearance:wrists) wrists
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:wrists) pair of wrists. $(this.appearance:symbol:wrists) {? | $(this.combat:injury:wrists) |They have $(this.combat:injury:wrists).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="disabled:merry:setprop-post:appearance:hairstyle">
         X[M] return Call(\$\{Allegory:Lib:UrPeople:Description\}, "updatehairdesc", \$action: "hairstyle", \$body: \$this);
      </Core:Property>
      <Core:Property property="export:alteration:add:fur:furdye">
         ([ "properties":(\{ (\{ "trait:color", "appearance:furcolor" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:alteration:add:fur:furgrowth">
         ([  ])
      </Core:Property>
      <Core:Property property="export:alteration:add:hair:hairdye">
         ([ "properties":(\{ (\{ "trait:color", "appearance:haircolor" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:alteration:add:hair:hairgrowth">
         ([  ])
      </Core:Property>
      <Core:Property property="export:alteration:add:head:hairgrowth">
         ([  ])
      </Core:Property>
      <Core:Property property="export:alteration:add:tattoo:ink">
         ([ "noslay":"true", "properties":(\{ (\{ "trait:color", "appearance:symbolcolor" \}) \}), "stopvalue":(\{ "appearance:symbolcolor", "sketched", "This tattoo has already been inked." \}) ])
      </Core:Property>
      <Core:Property property="export:alteration:create:default:tattoo">
         ([ "description":(\{ "You tattoo MODIFICATION onto ORIGINAL_OBJECT", "tattoos MODIFICATION onto ORIGINAL_OBJECT" \}), "fixed":"true", "input-list":(\{ (\{ \<IronClaw:Lib:UrPeople:Tattoos\>, "alteration:knowledge:tattoos" \}) \}), "input-list-actor":(\{ "alteration:knowledge:tattoos" \}), "modification":"a tattoo", "noskillroll":"true", "properties":(\{ (\{ "appearance:symbol" \}) \}), "requiredtools":(\{ "a needle and ink", (\{ "needle" \}), (\{ "ink" \}) \}), "stopvalue":(\{ "appearance:symbol", "nothing", "Your victim already has a tattoo." \}) ])
      </Core:Property>
      <Core:Property property="export:alteration:create:fur:alter">
         ([ "description":(\{ "You texturize ORIGINAL_OBJECT", "texturizes ORIGINAL_OBJECT" \}), "fixed":"true", "input-list":(\{ (\{ \<IronClaw:Lib:UrPeople:FurStyles\>, "alteration:knowledge:furstyles" \}), (\{ \<IronClaw:Lib:UrPeople:FurStyles\>, "alteration:knowledge:furtexture" \}), (\{ \<IronClaw:Lib:UrPeople:FurStyles\>, "alteration:knowledge:furtexture" \}) \}), "input-list-actor":(\{ "alteration:knowledge:FurStyles", "alteration:knowledge:furlength", "alteration:knowledge:furlength" \}), "noskillroll":"true", "requiredtools":(\{ "a pair of scissors and a comb", (\{ "scissors" \}), (\{ "comb" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:alteration:create:fur:cut">
         ([ "description":(\{ "You cut ORIGINAL_OBJECT", "cuts ORIGINAL_OBJECT" \}), "fixed":"true", "input-list":(\{ (\{ \<IronClaw:Lib:UrPeople:FurStyles\>, "alteration:knowledge:furlength" \}) \}), "input-list-actor":(\{ "alteration:knowledge:furlength" \}), "noskillroll":"true", "requiredtools":(\{ "a pair of scissors and a comb", (\{ "scissors" \}), (\{ "comb" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:alteration:create:hair:alter">
         ([ "description":(\{ "You style ORIGINAL_OBJECT", "styles ORIGINAL_OBJECT" \}), "fixed":"true", "input-list":(\{ (\{ \<Allegory:Lib:UrPeople:Hairstyles\>, "alteration:knowledge:hairstyles" \}), (\{ \<Allegory:Lib:UrPeople:Hairstyles\>, "alteration:knowledge:hairlength" \}), (\{ \<Allegory:Lib:UrPeople:Hairstyles\>, "alteration:knowledge:hairtype" \}) \}), "input-list-actor":(\{ "alteration:knowledge:hairstyles", "alteration:knowledge:hairlength", "alteration:knowledge:hairtype" \}), "noskillroll":"true", "requiredtools":(\{ "a pair of scissors and a comb", (\{ "scissors" \}), (\{ "comb" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:alteration:create:hair:cut">
         ([ "description":(\{ "You cut ORIGINAL_OBJECT", "cuts ORIGINAL_OBJECT" \}), "fixed":"true", "input-list":(\{ (\{ \<Allegory:Lib:UrPeople:Hairstyles\>, "alteration:knowledge:hairlength" \}) \}), "input-list-actor":(\{ "alteration:knowledge:hairlength" \}), "noskillroll":"true", "requiredtools":(\{ "a pair of scissors and a comb", (\{ "scissors" \}), (\{ "comb" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:alteration:create:hair:style">
         ([ "description":(\{ "You style ORIGINAL_OBJECT", "styles ORIGINAL_OBJECT" \}), "fixed":"true", "input-list":(\{ (\{ \<Allegory:Lib:UrPeople:Hairstyles\>, "alteration:knowledge:hairstyles" \}) \}), "input-list-actor":(\{ "alteration:knowledge:hairstyles" \}), "noskillroll":"true", "requiredtools":(\{ "a pair of scissors and a comb", (\{ "scissors" \}), (\{ "comb" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:alteration:create:tail:alter">
         ([ "description":(\{ "You style ORIGINAL_OBJECT", "styles ORIGINAL_OBJECT" \}), "fixed":"true", "input-list":(\{ (\{ \<IronClaw:Lib:UrPeople:Tailstyles\>, "alteration:knowledge:tailstyles" \}), (\{ \<IronClaw:Lib:UrPeople:Tailstyles\>, "alteration:knowledge:tailtexture" \}), (\{ \<IronClaw:Lib:UrPeople:Tailstyles\>, "alteration:knowledge:tailtexture" \}) \}), "input-list-actor":(\{ "alteration:knowledge:Tailstyles", "alteration:knowledge:taillength", "alteration:knowledge:taillength" \}), "noskillroll":"true", "requiredtools":(\{ "a pair of scissors and a comb", (\{ "scissors" \}), (\{ "comb" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:alteration:create:tail:cut">
         ([ "description":(\{ "You cut ORIGINAL_OBJECT", "cuts ORIGINAL_OBJECT" \}), "fixed":"true", "input-list":(\{ (\{ \<IronClaw:Lib:UrPeople:Tailstyles\>, "alteration:knowledge:taillength" \}) \}), "input-list-actor":(\{ "alteration:knowledge:taillength" \}), "noskillroll":"true", "requiredtools":(\{ "a pair of scissors and a comb", (\{ "scissors" \}), (\{ "comb" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:alteration:create:tail:style">
         ([ "description":(\{ "You style ORIGINAL_OBJECT", "styles ORIGINAL_OBJECT" \}), "fixed":"true", "input-list":(\{ (\{ \<IronClaw:Lib:UrPeople:Tailstyles\>, "alteration:knowledge:tailtexture" \}) \}), "input-list-actor":(\{ "alteration:knowledge:tailtexture" \}), "noskillroll":"true", "requiredtools":(\{ "a pair of scissors and a comb", (\{ "scissors" \}), (\{ "comb" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:appearance:build">
         "average"
      </Core:Property>
      <Core:Property property="export:appearance:clawtype">
         "nails"
      </Core:Property>
      <Core:Property property="export:appearance:facialhair">
         "none"
      </Core:Property>
      <Core:Property property="export:appearance:faciallength">
         "ordinary"
      </Core:Property>
      <Core:Property property="export:appearance:feettype">
         "feet"
      </Core:Property>
      <Core:Property property="export:appearance:feettype:p">
         "feet"
      </Core:Property>
      <Core:Property property="export:appearance:feettype:s">
         "foot"
      </Core:Property>
      <Core:Property property="export:appearance:furtype">
         "fur"
      </Core:Property>
      <Core:Property property="export:appearance:hashair">
         "yes"
      </Core:Property>
      <Core:Property property="export:appearance:height">
         "average"
      </Core:Property>
      <Core:Property property="export:appearance:symbol">
         "nothing"
      </Core:Property>
      <Core:Property property="export:appearance:symbolcolor">
         "sketched"
      </Core:Property>
      <Core:Property property="export:client:theme">
         "ironclaw"
      </Core:Property>
      <Core:Property property="export:rank:name">
         "freedman"
      </Core:Property>
      <Core:Property property="export:rank:rank">3</Core:Property>
      <Core:Property property="export:student:learningpoints">
         30
      </Core:Property>
      <Core:Property property="export:trait:animal">
         "unknown"
      </Core:Property>
      <Core:Property property="export:trait:animaltype">
         "unknown"
      </Core:Property>
      <Core:Property property="export:trait:body">3</Core:Property>
      <Core:Property property="export:trait:brief">
         "someone"
      </Core:Property>
      <Core:Property property="export:trait:butt">
         "rump"
      </Core:Property>
      <Core:Property property="export:trait:chance">
         5
      </Core:Property>
      <Core:Property property="export:trait:dex">3</Core:Property>
      <Core:Property property="export:trait:examine">
         "You examine someone."
      </Core:Property>
      <Core:Property property="export:trait:hiding">
         1
      </Core:Property>
      <Core:Property property="export:trait:income">
         0
      </Core:Property>
      <Core:Property property="export:trait:incomecosts">
         0
      </Core:Property>
      <Core:Property property="export:trait:look">
         "You look at someone."
      </Core:Property>
      <Core:Property property="export:trait:mind">3</Core:Property>
      <Core:Property property="export:trait:money">0</Core:Property>
      <Core:Property property="export:trait:nominative">
         "he"
      </Core:Property>
      <Core:Property property="export:trait:nottrash">
         1
      </Core:Property>
      <Core:Property property="export:trait:objective">
         "her"
      </Core:Property>
      <Core:Property property="export:trait:possessive">
         "her"
      </Core:Property>
      <Core:Property property="export:trait:pouchmoney">
         0
      </Core:Property>
      <Core:Property property="export:trait:sex">
         "woman"
      </Core:Property>
      <Core:Property property="export:trait:smells">
         ([  ])
      </Core:Property>
      <Core:Property property="export:trait:speed">3</Core:Property>
      <Core:Property property="export:trait:will">3</Core:Property>
      <Core:Property property="merry:act-post:command%supereyes">
         X[M] /* record data to give information to viewers on what actions the PC is doing */
if(!args["imperative"]) \{
 /* does this only happen when moving between rooms? */
 /* if so, it's a good chance to clear supereyes info */
 this.supereyes = nil;
 return TRUE;
\}
/*if(this==\$\{Chatters:IC:az:azrael\})
 EmitTo(this, dump_value(args));*/
if(args["privacy"] \|\| args["secrecy"]) return TRUE;
if(member(args["imperative"], (\{ "look", "examine", "say" \}))) \{
 if(this.supereyes)
  this.supereyes["evoke"] = nil;
 return TRUE;
\}
args["timestamp"] = time();
if(args["obscurity"])
 args["evoke"] = nil;
this.supereyes = args;
return TRUE;
      </Core:Property>
      <Core:Property property="merry:act-post:linkdie%income">
         X[M] mapping map; 
string *array; 
int i; 

/* disabled. No income top-ups anymore */
return TRUE;
 
/* Set the money based on income */ 
/*EmitTo(\$\{Chatters:IC:Az:Azrael\}, "Setting income for "+Describe(\$this)+".");*/ 
if(\$this."trait:income" \|\| \$this."trait:extraincome") 
\{ 
/* Check if the player gets more money */ 
  /* Check if the player has waited a day before getting money */ 
  if(!\$this."trait:income_time" \|\| (\$this."trait:income_time" \< time())) 
  \{ 
 
    /* Count the players money */ 
    \$amount = 0; 
 
    /* check what the player has on them */ 
    \$objects = (\{ \$actor \}); 
 
    /* and what is in the players rooms */ 
    map = Get(\$actor, "*"); 
    map = prefixed_map(map, "virtualhome:"); 
    if(sizeof(map_indices(map)) != 0)\{ 
      for(i = 0; i \< sizeof(map_values(map)); i++)\{ 
        if(typeof(map_values(map)[i]) == 4) 
        \$objects \|= map_values(map)[i]."base:inventory"; 
      \} 
    \} 
 
    for(i = 0; i \< sizeof(\$objects); i++)\{ 
      if(!\$objects[i]."base:volition" \|\| (\$objects[i]==\$this)) \{ 
        \$hidden = map_indices(prefixed_map(Get(\$objects[i], "*"), "searching:")); 
        if(sizeof(\$hidden)) \{ 
          for(\$j=0;\$j\<sizeof(\$hidden);\$j++) \{ 
            if(sscanf(\$hidden[\$j], "searching:%s:searchmapping", \$tmp)) \{ 
              \$level = map_indices(Get(\$objects[i], \$hidden[\$j])); 
              for(\$k=0;\$k\<sizeof(\$level);\$k++) \{ 
                \$objects += Get(\$objects[i], \$hidden[\$j])[\$level[\$k]]; 
              \} 
            \} 
          \} 
        \} 
 
        if(\$objects[i]."cash:balance") \{ 
          \$amount += \$objects[i]."cash:balance"; 
        \} else if(\$objects[i]."cash:value") \{ 
          \$amount += \$objects[i]."cash:value"; 
        \} 
        \$objects += \$objects[i]."base:inventory"; 
      \} 
    \} 
 
    \$this."trait:pouchmoney" = \$amount; 
 
    /* Check if this player already has more money than his income */ 
    \$money = \$this."trait:money" + \$this."trait:pouchmoney" + Int(\$this."trait:incomecosts"); 
    /* grant money increase */ 
    if(\$money \< Int(\$this."trait:income")+Int(\$this."trait:extraincome")) 
    \{ 
      if(\$this.guild) \$this."trait:incomepaid" = Int(\$this."trait:income") + Int(\$this."trait:extraincome") - \$money; 
      \$this."trait:money" = Int(\$this."trait:income") + Int(\$this."trait:extraincome") - \$this."trait:pouchmoney" - Int(\$this."trait:incomecosts"); 
      \$this."trait:income_time" = time()+(60*60*16); 
 
      /* add to the economy tracker */ 
      \$tracker = \$\{Ironclaw:Lib:Economy:economy\}; 
      \$tracker."moneypool:pc" += Int(\$this."trait:income") + Int(\$this."trait:extraincome") - \$money; 
      if(!\$tracker."guild:income") 
        \$tracker."guild:income" = 0; 
      \$tracker."guild:income" += Int(\$this."trait:income") + Int(\$this."trait:extraincome") - \$money; 
 
    \} 
  \} 
\} 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:act-post:login%bancheck">
         X[M] /* sanity checking */ 
if(!\$actor \|\| !\$actor."udat:name") return TRUE; 
 
/* is this account banned? */ 
if(\$actor."udat:object" \&\& \$actor."udat:object"."ironclaw:banned") \{ 
  \$delay(1, TRUE, "8f5b"); 
  /* record the IP */ 
  \$\{Ironclaw:Lib:Characters:Banned\}.ipmap[Call(\$\{UserAPI:UDatD\}, "udat_ipdata", \$name: \$actor."udat:name", \$category: "text")[0][0]] = (\{ Str(\$actor."udat:name"), time() \});
 
  /* give a friendly "you are banned" message */ 
  EmitTo(\$actor, "This account has been banned. If you have any queries about why it has been banned, please e-mail azrael@ironclaw.skotos.net. Thank you, and have a nice day.");
  ::log(\$chat_log: "Account Ban against '"+Str(\$actor."udat:name")+"' enforced against \<"+name(this)+"\> on IP "+Call(\$\{UserAPI:UDatD\}, "udat_ipdata", \$name: \$actor."udat:name", \$category: "text")[0][0]+".");
  \$delay(0.1, TRUE, "e8ea"); 
  Act(\$actor, "disconnect"); 
  return TRUE; 
\} 
/* is this IP banned? */ 
if(\$\{Ironclaw:Lib:Characters:Banned\}.ipmap[Call(\$\{UserAPI:UDatD\}, "udat_ipdata", \$name: \$actor."udat:name", \$category: "text")[0][0]]) \{ 
  if(\$\{Ironclaw:Lib:Characters:Banned\}.ipmap[Call(\$\{UserAPI:UDatD\}, "udat_ipdata", \$name: \$actor."udat:name", \$category: "text")[0][0]][1] + 60*60*48 \< time()) \{ 
    \$\{Ironclaw:Lib:Characters:Banned\}.ipmap[Call(\$\{UserAPI:UDatD\}, "udat_ipdata", \$name: \$actor."udat:name", \$category: "text")[0][0]] = nil; 
  \} else \{ 
    \$delay(1, TRUE, "eba2"); 
 
    /* give a friendly "you are banned" message */ 
    EmitTo(\$actor, "This account has been banned. If you have any queries about why it has been banned, please e-mail azrael@ironclaw.skotos.net. Thank you, and have a nice day.");
    ::log(\$chat_log: "IP Ban against "+Str(Call(\$\{UserAPI:UDatD\}, "udat_ipdata", \$name: \$actor."udat:name", \$category: "text")[0][0])+" enforced against \<"+name(this)+"\> on account '"+Str(\$actor."udat:name")+"'.");
    \$delay(0.1, TRUE, "7afb"); 
    Act(\$actor, "disconnect"); 
    return TRUE; 
  \} 
\} 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:act-post:login%fixes">
         X[M] mapping map;        
string *array;        
int i;        
      
return TRUE;      
        
/* fixing temporary hack now we don't need it for scabbard descriptions */        
\$actor."base:infravision" = nil;        
        
/* reduce learning points */        
if(\$actor."student:learningpoints" \> 100)        
  \$actor."student:learningpoints" = 100;        
        
/* Fix the eyebrows */        
/*        
if(\$actor."appearance:browshape" \&\& !\$actor."appearance:eyebrowshape") \{        
  \$actor."appearance:eyebrowshape" = \$actor."appearance:browshape";        
  \$actor."appearance:browshape" = nil;        
\}        
*/        
        
/* Set player cap name */        
if(!\$actor."skotos:playercapname")        
  \$actor."skotos:playercapname" = capitalize(\$actor."skotos:charname");        
        
/* temporarily just set it (for people broken from masks) */        
\$actor."skotos:playercapname" = capitalize(\$actor."skotos:charname");        
        
/* Remove redundant properties */        
\$actor."alteration:knowledge:tailoring-cloth-remote" = nil;        
\$actor."alteration:knowledge:tailoring-roll-remote" = nil;        
\$actor."alteration:knowledge:forging-metal" = nil;        
\$actor."alteration:knowledge:forging-metal-remote" = nil;        
\$actor."skill:alteration:metalwork" = nil;        
        
if(\$actor."career:combat:mace") \{        
  if(!\$actor."career:combat:club" \|\| (Int(\$actor."career:combat:club") \< Int(\$actor."career:combat:mace"))) \{        
    \$actor."career:combat:club" = Int(\$actor."career:combat:mace");        
  \}        
  \$actor."career:combat:mace" = nil;        
\}        
if(\$actor."skill:combat:mace") \{        
  if(!\$actor."skill:combat:club" \|\| (Int(\$actor."skill:combat:club") \< Int(\$actor."skill:combat:mace"))) \{        
    \$actor."skill:combat:club" = Int(\$actor."skill:combat:mace");        
  \}        
  \$actor."skill:combat:mace" = nil;        
\}        
if(\$actor."skill:career:woodcarver") \{        
  if(!\$actor."skill:career:carpenter" \|\| (Int(\$actor."skill:career:carpenter") \< Int(\$actor."skill:career:woodcarver"))) \{        
    \$actor."skill:career:carpenter" = Int(\$actor."skill:career:woodcarver");        
  \}        
  \$actor."skill:career:woodcarver" = nil;        
\}        
        
        
        
/* Set the actors skills again, in case careers have changed */        
/* Get a mapping of all the actors skills */        
map = Get(\$actor, "*");        
map = prefixed_map(map, "skill:career:");        
        
array = map_indices(map);        
for(i=0;i\<sizeof(array);i++)\{        
  Set(\$actor, array[i], Get(\$actor, array[i]));        
\}        
        
return TRUE;
      </Core:Property>
      <Core:Property property="merry:act-post:login%income">
         X[M] mapping map; 
string *array; 
int i; 

/* disabled - no more income top-ups */
return TRUE;
 
/* Set the money based on income */ 
/*EmitTo(\$\{Chatters:IC:Az:Azrael\}, "Setting income for "+Describe(\$this)+".");*/ 
if(\$this."trait:income" \|\| \$this."trait:extraincome") 
\{ 
/* Check if the player gets more money */ 
  /* Check if the player has waited a day before getting money */ 
  if(!\$this."trait:income_time" \|\| (\$this."trait:income_time" \< time())) 
  \{ 
 
    /* Count the players money */ 
    \$amount = 0; 
 
    /* check what the player has on them */ 
    \$objects = (\{ \$actor \}); 
 
    /* and what is in the players rooms */ 
    map = Get(\$actor, "*"); 
    map = prefixed_map(map, "virtualhome:"); 
    if(sizeof(map_indices(map)) != 0)\{ 
      for(i = 0; i \< sizeof(map_values(map)); i++)\{ 
        if(typeof(map_values(map)[i]) == 4) 
        \$objects \|= map_values(map)[i]."base:inventory"; 
      \} 
    \} 
 
    for(i = 0; i \< sizeof(\$objects); i++)\{ 
      if(!\$objects[i]."base:volition" \|\| (\$objects[i]==\$this)) \{ 
        \$hidden = map_indices(prefixed_map(Get(\$objects[i], "*"), "searching:")); 
        if(sizeof(\$hidden)) \{ 
          for(\$j=0;\$j\<sizeof(\$hidden);\$j++) \{ 
            if(sscanf(\$hidden[\$j], "searching:%s:searchmapping", \$tmp)) \{ 
              \$level = map_indices(Get(\$objects[i], \$hidden[\$j])); 
              for(\$k=0;\$k\<sizeof(\$level);\$k++) \{ 
                \$objects += Get(\$objects[i], \$hidden[\$j])[\$level[\$k]]; 
              \} 
            \} 
          \} 
        \} 
 
        if(\$objects[i]."cash:balance") \{ 
          \$amount += \$objects[i]."cash:balance"; 
        \} else if(\$objects[i]."cash:value") \{ 
          \$amount += \$objects[i]."cash:value"; 
        \} 
        \$objects += \$objects[i]."base:inventory"; 
      \} 
    \} 
 
    \$this."trait:pouchmoney" = \$amount; 
 
    /* Check if this player already has more money than his income */ 
    \$money = \$this."trait:money" + \$this."trait:pouchmoney" + Int(\$this."trait:incomecosts"); 
    /* grant money increase */ 
    if(\$money \< Int(\$this."trait:income")+Int(\$this."trait:extraincome")) 
    \{ 
      if(\$this.guild) \$this."trait:incomepaid" = Int(\$this."trait:income") + Int(\$this."trait:extraincome") - \$money; 
      \$this."trait:money" = Int(\$this."trait:income") + Int(\$this."trait:extraincome") - \$this."trait:pouchmoney" - Int(\$this."trait:incomecosts"); 
      \$this."trait:income_time" = time()+(60*60*16); 
 
      /* add to the economy tracker */ 
      \$tracker = \$\{Ironclaw:Lib:Economy:economy\}; 
      \$tracker."moneypool:pc" += Int(\$this."trait:income") + Int(\$this."trait:extraincome") - \$money; 
      if(!\$tracker."guild:income") 
        \$tracker."guild:income" = 0; 
      \$tracker."guild:income" += Int(\$this."trait:income") + Int(\$this."trait:extraincome") - \$money; 
    \} 
  \} 
\} 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:act-post:login%motd">
         X[M] int i, sz;
/* display message of the day */
\$delay(1, TRUE, "915e");

/* display the game message of the day */
/*EmitTo(\$actor, TAG("Welcome to Ironclaw. No news is good news, right?", "imp"));*/

/* display the guild message of the day */
if(\$actor.guild \&\& \$actor.guild.motd \&\& \$actor.guild.motd != "")
  EmitTo(\$actor, TAG(\$actor.guild.motd, "imp"));

/* display the guild voting message */
if(\$actor.guild \&\& \$actor.guild) \{
  \$message = Call(\$\{Ironclaw:Lib:Guilds:New\}, "get_guild_vote_message");
  if(\$message)
    EmitTo(\$actor, TAG(\$message, "imp"));
\}

/* are there any other messages to display on login? */
if(sizeof(Arr(\$actor."login:messages"))) \{
  sz = sizeof(Arr(\$actor."login:messages"));
  for(i=0;i\<sz;i++)
    EmitTo(\$actor, Str(Arr(\$actor."login:messages")[i]));
  \$actor."login:messages" = (\{ \});
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:act-post:quit%income">
         X[M] mapping map; 
string *array; 
int i; 

/* disabled - no more income top-ups */
return TRUE;

 
/* Set the money based on income */ 
/*EmitTo(\$\{Chatters:IC:Az:Azrael\}, "Setting income for "+Describe(\$this)+".");*/ 
if(\$this."trait:income" \|\| \$this."trait:extraincome") 
\{ 
/* Check if the player gets more money */ 
  /* Check if the player has waited a day before getting money */ 
  if(!\$this."trait:income_time" \|\| (\$this."trait:income_time" \< time())) 
  \{ 
 
    /* Count the players money */ 
    \$amount = 0; 
 
    /* check what the player has on them */ 
    \$objects = (\{ \$actor \}); 
 
    /* and what is in the players rooms */ 
    map = Get(\$actor, "*"); 
    map = prefixed_map(map, "virtualhome:"); 
    if(sizeof(map_indices(map)) != 0)\{ 
      for(i = 0; i \< sizeof(map_values(map)); i++)\{ 
        if(typeof(map_values(map)[i]) == 4) 
        \$objects \|= map_values(map)[i]."base:inventory"; 
      \} 
    \} 
 
    for(i = 0; i \< sizeof(\$objects); i++)\{ 
      if(!\$objects[i]."base:volition" \|\| (\$objects[i]==\$this)) \{ 
        \$hidden = map_indices(prefixed_map(Get(\$objects[i], "*"), "searching:")); 
        if(sizeof(\$hidden)) \{ 
          for(\$j=0;\$j\<sizeof(\$hidden);\$j++) \{ 
            if(sscanf(\$hidden[\$j], "searching:%s:searchmapping", \$tmp)) \{ 
              \$level = map_indices(Get(\$objects[i], \$hidden[\$j])); 
              for(\$k=0;\$k\<sizeof(\$level);\$k++) \{ 
                \$objects += Get(\$objects[i], \$hidden[\$j])[\$level[\$k]]; 
              \} 
            \} 
          \} 
        \} 
 
        if(\$objects[i]."cash:balance") \{ 
          \$amount += \$objects[i]."cash:balance"; 
        \} else if(\$objects[i]."cash:value") \{ 
          \$amount += \$objects[i]."cash:value"; 
        \} 
        \$objects += \$objects[i]."base:inventory"; 
      \} 
    \} 
 
    \$this."trait:pouchmoney" = \$amount; 
 
    /* Check if this player already has more money than his income */ 
    \$money = \$this."trait:money" + \$this."trait:pouchmoney" + Int(\$this."trait:incomecosts"); 
    /* grant money increase */ 
    if(\$money \< Int(\$this."trait:income")+Int(\$this."trait:extraincome")) 
    \{ 
      if(\$this.guild) \$this."trait:incomepaid" = Int(\$this."trait:income") + Int(\$this."trait:extraincome") - \$money; 
      \$this."trait:money" = Int(\$this."trait:income") + Int(\$this."trait:extraincome") - \$this."trait:pouchmoney" - Int(\$this."trait:incomecosts"); 
      \$this."trait:income_time" = time()+(60*60*16); 
    \} 
  \} 
\} 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:act-post:take%alts">
         X[M] /* disabled until I can finish this code */ 
return TRUE; 
/* check that they aren't alt sharing */ 
if(\$actor != \$\{Chatters:AE:az:azrael\}) 
  return TRUE; 
EmitTo(\$actor, "Test"); 
EmitTo(\$actor, dump_value(args)); 
 
 
chat::send_msg(\$message: Describe(\$actor)+" has picked up an item that an alt dropped.", \$line: "lg", \$actor: \$\{Chatters:IC:me:messenger\}); 
if(!\$actor."vp:notes") \$actor."vp:notes" = (\{ \}); 
\$actor."vp:notes" += (\{ (\{ time(), "warning", Describe(\$actor)+" has picked up an item that an alt dropped. "+dump_value(\$targets) \}) \}); 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:act-pre:evoke">
         X[M] return TRUE;                    
EmitTo(\$actor, "Check evoke");                    
if(!\$actor."SkotOS:CurrentLang" \|\| (\$actor."SkotOS:CurrentLang" == "0")) return TRUE;                    
                    
EmitTo(\$actor, "Act evoke");                    
return TRUE;                    
                    
\$(evoke-actor) = \$evoke;                    
                    
                   
\$(evoke-target) = INLANG("western", 8, \$evoke);                    
\$(evoke-witness) = INLANG("western", 8, \$evoke);                    
\$(verb-extra:pe) = "(in something)";                    
                    
return TRUE;
      </Core:Property>
      <Core:Property property="merry:act:say">
         X[M] string *speech_pattern;          
mixed social_args;          
int i, ix;          
          
speech_pattern = Arr(this."trait:speech-pattern");          
if (!sizeof(speech_pattern))          
    return TRUE;          
          
/* Produce the social_args. */          
ix          = sizeof(\$roles);          
social_args = (\{ \});          
for (i = 0; i \< ix; i++)          
    social_args += (\{ GetVar(\$roles[i] + ":preposition"), GetVar(\$roles[i]) \});          
          
Social(this, speech_pattern[random(sizeof(speech_pattern))], \$adverb, \$(raw-evoke), social_args...);
      </Core:Property>
      <Core:Property property="merry:act:start">
         X[M] if(this."skotos:playercapname")\{                   
 this."trait:superbrief" = this."skotos:playercapname";                   
\}                   
                   
return TRUE;
      </Core:Property>
      <Core:Property property="merry:inherit:act-post:approach%partitions">
         \<Lib:Systems:Partitions\>
      </Core:Property>
      <Core:Property property="merry:inherit:act-post:command%smell">
         \<Ironclaw:Lib:Characters:Smell\>
      </Core:Property>
      <Core:Property property="merry:inherit:act-post:enter%partitions">
         \<Lib:Systems:Partitions\>
      </Core:Property>
      <Core:Property property="merry:inherit:act-post:enter%supereyes">
         \<Ironclaw:Neoct:Verbs:OOC:S:@supereyes\>
      </Core:Property>
      <Core:Property property="merry:inherit:act-post:examine%supereyes">
         \<Ironclaw:Neoct:Verbs:OOC:S:@supereyes\>
      </Core:Property>
      <Core:Property property="merry:inherit:act-post:linkdie%partitions">
         \<Lib:Systems:Partitions\>
      </Core:Property>
      <Core:Property property="merry:inherit:act-post:logout%partitions">
         \<Lib:Systems:Partitions\>
      </Core:Property>
      <Core:Property property="merry:inherit:act-post:look%supereyes">
         \<Ironclaw:Neoct:Verbs:OOC:S:@supereyes\>
      </Core:Property>
      <Core:Property property="merry:inherit:act-post:place%partitions">
         \<Lib:Systems:Partitions\>
      </Core:Property>
      <Core:Property property="merry:inherit:act-post:quit%partitions">
         \<Lib:Systems:Partitions\>
      </Core:Property>
      <Core:Property property="merry:inherit:act-post:teleport%partitions">
         \<Lib:Systems:Partitions\>
      </Core:Property>
      <Core:Property property="merry:inherit:act-post:throw%partitions">
         \<Lib:Systems:Partitions\>
      </Core:Property>
      <Core:Property property="merry:inherit:act-post:zthrow%partitions">
         \<Lib:Systems:Partitions\>
      </Core:Property>
      <Core:Property property="merry:inherit:act-pre:approach%partitions">
         \<Lib:Systems:Partitions\>
      </Core:Property>
      <Core:Property property="merry:inherit:act-pre:leave%partitions">
         \<Lib:Systems:Partitions\>
      </Core:Property>
      <Core:Property property="merry:inherit:act-pre:take%partitions">
         \<Lib:Systems:Partitions\>
      </Core:Property>
      <Core:Property property="merry:inherit:act-pre:throw%partitions">
         \<Lib:Systems:Partitions\>
      </Core:Property>
      <Core:Property property="merry:inherit:act:enter%partitions">
         \<Lib:Systems:Partitions\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:log">
         \<Lib:chatlib\>
      </Core:Property>
      <Core:Property property="merry:react-post:add-iob">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "add", \$addition: \$dob, \$target: \$iob);
      </Core:Property>
      <Core:Property property="merry:react-pre:add-iob">
         X[M] if(!\$dob) return TRUE;                     
return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "valid-check", \$addition: \$dob, \$object: \$iob);
      </Core:Property>
      <Core:Property property="merry:setprop-post:appearance:furcolor">
         X[M] return Call(\$\{Allegory:Lib:UrPeople:Description\}, "updatedesc", \$body: \$this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:appearance:furlength">
         X[M] return Call(\$\{Allegory:Lib:UrPeople:Description\}, "updatedesc", \$body: \$this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:appearance:furtexture">
         X[M] return Call(\$\{Allegory:Lib:UrPeople:Description\}, "updatedesc", \$body: \$this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:appearance:haircolor">
         X[M] return Call(\$\{Allegory:Lib:UrPeople:Description\}, "updatehairdesc", \$action: "haircolor", \$body: \$this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:appearance:hairlength">
         X[M] return Call(\$\{Allegory:Lib:UrPeople:Description\}, "updatehairdesc", \$action: "hairlength", \$body: \$this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:appearance:hairtype">
         X[M] return Call(\$\{Allegory:Lib:UrPeople:Description\}, "updatehairdesc", \$action: "hairtype", \$body: \$this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:appearance:hashair">
         X[M] return Call(\$\{Allegory:Lib:UrPeople:Description\}, "updatehairdesc", \$action: "hashair", \$body: \$this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:skill:career">
         X[M] return Call(\$\{Ironclaw:Lib:Teaching:TeachingLib\}, "updatecareer", \$body: \$this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:skotos:charname">
         X[M] \$this."trait:superbrief" = capitalize(\$this."skotos:charname");
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:animal">
         X[M] Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replacenames", \$object: \$this);        
return TRUE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:superbrief">
         X[M] return Call(\$\{Allegory:Lib:UrPeople:Description\}, "updatedesc", \$body: \$this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:title">
         X[M] Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: \$this);        
Call(\$\{Allegory:Lib:UrPeople:Description\}, "updatedesc", \$body: \$this);        
return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1168307066, "tonyd", "E", 1168307212, "tonyd", "X", 1168310482, "tonyd", "E", 1168714720, "tunk_bodin", "R", 1168926776, "tunk_bodin", "X", 1169345952, "tonyd", "E", 1169359235, "tunk_bodin", "X", 1169556807, "barbra18", "K", 1169705652, "tonyd", "P", 1169707693, "tonyd", "P", 1169707911, "tonyd", "P", 1169709050, "tonyd", "P", 1169709381, "tonyd", "P", 1170029936, "belle", "X", 1170624252, "necate", "K", 1171415899, "belle", "X", 1171418826, "belle", "X", 1171764562, "tonyd", "P", 1171764628, "tonyd", "P", 1171956129, "belle", "X", 1172079844, "tunk_bodin", "E", 1172080148, "tunk_bodin", "E", 1172992940, "tonyd", "E", 1173086451, "tonyd", "E", 1173520509, "tonyd", "E", 1173520879, "tonyd", "E", 1174582607, "tunk_bodin", "E", 1174583107, "tunk_bodin", "E", 1174583190, "tunk_bodin", "E", 1174583291, "tunk_bodin", "E", 1174752526, "tonyd", "E", 1175658129, "necate", "K", 1177750605, "tonyd", "P", 1177750810, "tonyd", "P", 1177750966, "tonyd", "P", 1177750991, "tonyd", "P", 1179023722, "tonyd", "S", 1179170227, "tonyd", "P", 1182697766, "tunk_bodin", "X", 1182698037, "tunk_bodin", "X", 1182698158, "tunk_bodin", "X", 1182698240, "tunk_bodin", "X", 1185235697, "rorschakovacs", "E", 1185235726, "rorschakovacs", "E", 1185237336, "rorschakovacs", "E", 1185682596, "tonyd", "P", 1185683217, "tonyd", "P", 1185683298, "tonyd", "P", 1185683324, "tonyd", "P", 1186465793, "random1377", "E", 1187219265, "tonyd", "P", 1187219287, "tonyd", "P", 1187219308, "tonyd", "P", 1187533603, "tonyd", "E", 1190087592, "necate", "K", 1190087648, "necate", "K", 1190854278, "rorschakovacs", "R", 1190854304, "rorschakovacs", "R", 1191518285, "rorschakovacs", "E", 1191537176, "rorschakovacs", "X", 1191537200, "rorschakovacs", "E", 1192234606, "tonyd", "E", 1192234638, "tonyd", "E", 1192328649, "tonyd", "E", 1192455553, "tonyd", "E", 1192455757, "tonyd", "E", 1192455866, "tonyd", "E", 1192455995, "tonyd", "E", 1192456067, "tonyd", "E", 1192456140, "tonyd", "E", 1193452910, "tonyd", "E", 1195985188, "tonyd", "E", 1195987027, "tonyd", "E", 1195987158, "tonyd", "E", 1195987219, "tonyd", "E", 1195987259, "tonyd", "E", 1195987453, "tonyd", "E", 1195987477, "tonyd", "E", 1195987530, "tonyd", "E", 1195987915, "tonyd", "E", 1195988742, "tonyd", "E", 1195988800, "tonyd", "E", 1195988851, "tonyd", "E", 1195989017, "tonyd", "E", 1195990174, "tonyd", "X", 1195990351, "tonyd", "X", 1195990426, "tonyd", "E", 1195991458, "tonyd", "X", 1196060430, "slurpeeslurp", "E", 1196060462, "slurpeeslurp", "E", 1196066705, "tonyd", "E", 1196066952, "tonyd", "X", 1196067177, "tonyd", "E", 1196068390, "tonyd", "E", 1196068502, "tonyd", "E", 1196176933, "slurpeeslurp", "E", 1199698362, "tonyd", "P", 1199698416, "tonyd", "P", 1201290891, "haystack", "E", 1201444567, "tonyd", "E", 1202351198, "tonyd", "E", 1204276731, "tonyd", "P", 1204276820, "tonyd", "P", 1204276848, "tonyd", "P", 1204276897, "tonyd", "P", 1204277697, "tonyd", "P", 1204277993, "tonyd", "P", 1204278054, "tonyd", "P", 1206868154, "tonyd", "S", 1206868521, "tonyd", "S", 1208062854, "necate", "K", 1210339728, "slurpeeslurp", "E", 1211082076, "tonyd", "P", 1211082099, "tonyd", "P", 1211082134, "tonyd", "P", 1211166443, "tonyd", "P", 1213421877, "tonyd", "E", 1213421932, "tonyd", "E", 1213422499, "tonyd", "E", 1213422556, "tonyd", "E", 1213422588, "tonyd", "E", 1213422883, "tonyd", "E", 1213422936, "tonyd", "E", 1213423008, "tonyd", "E", 1213423189, "tonyd", "E", 1213423257, "tonyd", "E", 1213423325, "tonyd", "E", 1213423433, "tonyd", "E", 1213423454, "tonyd", "E", 1213423584, "tonyd", "E", 1213423645, "tonyd", "E", 1213423688, "tonyd", "E", 1213423887, "tonyd", "E", 1213423986, "tonyd", "E", 1213424294, "tonyd", "E", 1213424324, "tonyd", "E", 1213424362, "tonyd", "E", 1213424510, "tonyd", "E", 1213425091, "tonyd", "E", 1213425912, "tonyd", "E", 1213864144, "slurpeeslurp", "E", 1213864384, "slurpeeslurp", "E", 1213864492, "slurpeeslurp", "E", 1213864644, "slurpeeslurp", "E", 1213864712, "slurpeeslurp", "K", 1213864771, "slurpeeslurp", "E", 1213865206, "slurpeeslurp", "E", 1213865277, "slurpeeslurp", "E", 1213865380, "slurpeeslurp", "E", 1213865390, "slurpeeslurp", "E", 1213865428, "slurpeeslurp", "K", 1213865501, "slurpeeslurp", "K", 1214726701, "necate", "K", 1214727104, "necate", "K", 1214727437, "necate", "K", 1214727558, "necate", "K", 1214730882, "tonyd", "E", 1215235191, "slurpeeslurp", "K", 1215235224, "slurpeeslurp", "E", 1215398220, "rorschakovacs", "E", 1215545089, "rorschakovacs", "E", 1215994682, "rorschakovacs", "K", 1215994853, "rorschakovacs", "K", 1215995207, "rorschakovacs", "K", 1216433317, "tonyd", "P", 1217688428, "tonyd", "E", 1218948706, "slurpeeslurp", "K", 1218948729, "slurpeeslurp", "E", 1219728209, "tonyd", "E", 1219728264, "tonyd", "E", 1219728319, "tonyd", "E", 1220080027, "tonyd", "E", 1220080111, "tonyd", "E", 1220080514, "tonyd", "E", 1220668140, "rorschakovacs", "E", 1220668271, "rorschakovacs", "E", 1220668294, "rorschakovacs", "E", 1220668378, "rorschakovacs", "E", 1220743400, "rorschakovacs", "E", 1220743463, "rorschakovacs", "E", 1220743523, "rorschakovacs", "E", 1220743540, "rorschakovacs", "E", 1220743568, "rorschakovacs", "E", 1220743576, "rorschakovacs", "E", 1220743626, "rorschakovacs", "E", 1220743648, "rorschakovacs", "E", 1220743699, "rorschakovacs", "E", 1220743739, "rorschakovacs", "K", 1220743961, "rorschakovacs", "E", 1220744081, "rorschakovacs", "E", 1220749294, "slurpeeslurp", "E", 1223600443, "slurpeeslurp", "E", 1224379113, "tonyd", "X", 1225100070, "tonyd", "P", 1232027764, "morwenlorelie", "E", 1234653135, "tonyd", "E", 1235536770, "rastalabor", "E", 1235710178, "tonyd", "E", 1236294668, "morwenlorelie", "E", 1236294701, "morwenlorelie", "E", 1236294890, "morwenlorelie", "E", 1237249139, "morwenlorelie", "K", 1237249291, "morwenlorelie", "E", 1237249355, "morwenlorelie", "E", 1238950760, "rastalabor", "X", 1238950792, "rastalabor", "X", 1243615533, "tonyd", "P", 1243615586, "tonyd", "P", 1243615840, "tonyd", "P", 1243788932, "tonyd", "P", 1243791633, "tonyd", "P", 1243792440, "tonyd", "P", 1243794463, "tonyd", "P", 1243867689, "morwenlorelie", "E", 1244003929, "tonyd", "P", 1244004015, "tonyd", "P", 1244099453, "tonyd", "P", 1244099849, "tonyd", "P", 1244258457, "slurpeeslurp", "K", 1244731167, "tonyd", "S", 1244731511, "tonyd", "S", 1244731517, "tonyd", "S", 1244731522, "tonyd", "S", 1245216497, "tonyd", "E", 1246183722, "tonyd", "S", 1246626946, "rorschakovacs", "E", 1246626997, "rorschakovacs", "E", 1249023810, "slurpeeslurp", "E", 1249023835, "slurpeeslurp", "E", 1249023848, "slurpeeslurp", "E", 1249023982, "slurpeeslurp", "K", 1251109565, "slurpeeslurp", "E", 1251109655, "slurpeeslurp", "E", 1251515475, "tonyd", "E", 1251515667, "tonyd", "E", 1251515773, "tonyd", "E", 1251985664, "slurpeeslurp", "K", 1251985735, "slurpeeslurp", "E", 1251985828, "slurpeeslurp", "E", 1252122797, "tonyd", "E", 1252124657, "tonyd", "E", 1252476518, "slurpeeslurp", "E", 1252476564, "slurpeeslurp", "E", 1252476612, "slurpeeslurp", "E", 1252476933, "slurpeeslurp", "E", 1252478246, "slurpeeslurp", "E", 1252478312, "slurpeeslurp", "E", 1252478451, "slurpeeslurp", "E", 1252478533, "slurpeeslurp", "E", 1252478659, "slurpeeslurp", "E", 1254141150, "tonyd", "E", 1254159345, "slurpeeslurp", "K", 1255227473, "jominey", "K", 1255227590, "jominey", "K", 1255227657, "jominey", "K", 1255227966, "jominey", "K", 1256425172, "jominey", "K", 1256425197, "jominey", "K", 1256425228, "jominey", "K", 1256425261, "jominey", "K", 1256459387, "tonyd", "P", 1256459420, "tonyd", "P", 1256459533, "tonyd", "P", 1256459552, "tonyd", "P", 1256459597, "tonyd", "P", 1256459885, "tonyd", "P", 1256460478, "tonyd", "P", 1256460504, "tonyd", "P", 1256766885, "slurpeeslurp", "E", 1256766915, "slurpeeslurp", "E", 1256766966, "slurpeeslurp", "E", 1258699025, "rastalabor", "X", 1260713297, "slurpeeslurp", "E", 1260713356, "slurpeeslurp", "E", 1260713452, "slurpeeslurp", "E", 1260713584, "slurpeeslurp", "E", 1260727843, "jominey", "E", 1260727861, "jominey", "E", 1260727878, "jominey", "E", 1261274545, "slurpeeslurp", "E", 1261274633, "slurpeeslurp", "E", 1262494708, "tonyd", "E", 1263095531, "slurpeeslurp", "E", 1263095652, "slurpeeslurp", "E", 1263096160, "slurpeeslurp", "E", 1263591355, "slurpeeslurp", "E", 1263591376, "slurpeeslurp", "E", 1263591393, "slurpeeslurp", "E", 1263591405, "slurpeeslurp", "E", 1263592089, "slurpeeslurp", "K", 1263592158, "slurpeeslurp", "K", 1263592206, "slurpeeslurp", "E", 1263592233, "slurpeeslurp", "E", 1263592259, "slurpeeslurp", "E", 1263592411, "slurpeeslurp", "E", 1263592440, "slurpeeslurp", "E", 1263592480, "slurpeeslurp", "E", 1265515814, "necate", "E", 1265515846, "necate", "E", 1265515886, "necate", "E", 1267330643, "tonyd", "E", 1268798232, "orcsuit", "E", 1268798338, "orcsuit", "E", 1268799997, "orcsuit", "E", 1268801503, "orcsuit", "E", 1268801669, "orcsuit", "E", 1268801703, "orcsuit", "E", 1270893348, "tonyd", "E", 1271636394, "slurpeeslurp", "E" \})
      </Core:Property>
      <Core:Property property="skill:advancedefensive">
         2
      </Core:Property>
      <Core:Property property="skill:attackingdefensive">
         0
      </Core:Property>
      <Core:Property property="skill:cutoffensive">3</Core:Property>
      <Core:Property property="skill:dodgedefensive">
         1
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="skill:feintoffensive">
         0
      </Core:Property>
      <Core:Property property="skill:fumbledefensive">
         0
      </Core:Property>
      <Core:Property property="skill:guarddefensive">
         3
      </Core:Property>
      <Core:Property property="skill:idledefensive">
         0
      </Core:Property>
      <Core:Property property="skill:recoverdefensive">
         2
      </Core:Property>
      <Core:Property property="skill:restdefensive">
         1
      </Core:Property>
      <Core:Property property="skill:retiredefensive">
         2
      </Core:Property>
      <Core:Property property="skill:salutedefensive">
         0
      </Core:Property>
      <Core:Property property="skill:thrustoffensive">
         3
      </Core:Property>
      <Core:Property property="trait:income">2240</Core:Property>
      <Core:Property property="volition">1</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
