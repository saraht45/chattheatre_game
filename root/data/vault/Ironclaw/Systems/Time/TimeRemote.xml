<object clone="/base/obj/thing" owner="tonyd">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="0.3" density="1.1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="remote"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="remotes"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">remote</Base:Description>
          <Base:Description type="examine">
             A remote, for the time of day in the IronClaw World. When pressed it should signal a change of day period.
          </Base:Description>
          <Base:Description type="look">
             A remote, for the time of day in the IronClaw world.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="10"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="gimli:react-post:press-dob">
         "E[G]\\nstring output;\\nint i, j;\\nmapping map;\\noutput = \\"\\";\\n\$az = \$\{Chatters:IC:az:azrael\};\\nif(\$actor != \$az \&\& \$actor != \$\{Chatters:IC:si:sirazad\}) \{\\n EmitTo(\$actor, \\"You are not authorized to use this remote. And by that, I mean you're not l33t enough.\\");\\n return FALSE;\\n\}\\n\\n\$command = explode(Str(\$(raw-evoke)), \\" \\");\\n\\nif(!\$(raw-evoke) \|\| !sizeof(\$command)) \{\\n EmitTo(\$actor, \\"No command given\\");\\n return TRUE;\\n\}\\n\\n\\nif(sizeof(\$command) \>= 2\\n \&\& \$command[0] == \\"update\\"\\n \&\& \$command[1] == \\"characters\\"\\n ) \{\\n /* run general script to do something to all characters */\\n object char;\\n\\n\\n \$results = ([ ]);\\n \$char_list = (\{ \});\\n\\n\\n EmitTo(\$actor, \\"Updating all PCs.\\");\\n \$folder = \\"Chatters:IC\\";\\n \$folders = Call(\$\{/usr/System/sys/idd\}, \\"idd:get-folders\\");\\n for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{\\n  \$delay(0.00001, TRUE, \\"2768\\");\\n  \$folder = \\"Chatters:IC:\\"+\$folders[\$i];\\n  // EmitTo(\$actor, dump_value(\$folders[\$i]));\\n  \$characters = Call(\$\{/usr/System/sys/idd\}, \\"idd:get-objects\\");\\n  for(\$j=0;\$j\<sizeof(\$characters);\$j++) \{\\n    char = Obj(\\"Chatters:IC:\\"+\$folders[\$i]+\\":\\"+\$characters[\$j]);\\n\\n    // PUT YOUR CODE HERE\\n    if(char.\\"tmp:event_idle_checking\\") EmitTo(\$actor, dump_value(char));\\n    char.\\"tmp:event_idle_checking\\" = nil;\\n    // char.\\"status:dying\\" = nil;\\n    \\n  \}\\n \}\\n\\n\\n EmitTo(\$actor, \\"PCs update done.\\");\\n return TRUE;\\n\} else if(sizeof(\$command) \>= 2\\n \&\& \$command[0] == \\"update\\"\\n \&\& \$command[1] == \\"guilds\\"\\n ) \{\\n /* run general script to do something to all characters */\\n object char;\\n EmitTo(\$actor, \\"Updating all guilds.\\");\\n \$folder = \\"Ironclaw:Guilds:\\";\\n \$guilds = Call(\$\{/usr/System/sys/idd\}, \\"idd:get-objects\\");\\n for(\$j=0;\$j\<sizeof(\$guilds);\$j++) \{\\n  char = Obj(\\"Ironclaw:Guilds:\\"+\$guilds[\$j]);\\n  /* PUT YOUR CODE HERE */\\n  if(char.\\"npc:teacher\\") \{\\n    \$tmp = dump_value(char.\\"npc:teacher\\");\\n    if(contains(\$tmp, \\"pickpocket\\"))\\n      EmitTo(\$actor, dump_value(char));\\n  \}\\n \}\\n EmitTo(\$actor, \\"Guilds update done.\\");\\n return TRUE;\\n\\n\} else if(sizeof(\$command) \>= 2\\n \&\& \$command[0] == \\"skill\\"\\n \&\& \$command[1] == \\"list\\"\\n ) \{\\n /* run general script to do something to all characters */\\n object char;\\n EmitTo(\$actor, \\"Searching PCs for skills.\\");\\n \$allskills = ([ ]);\\n \$folder = \\"Chatters:IC\\";\\n \$folders = Call(\$\{/usr/System/sys/idd\}, \\"idd:get-folders\\");\\n for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{\\n  \$delay(0.00001, TRUE, \\"2769\\");\\n  \$folder = \\"Chatters:IC:\\"+\$folders[\$i];\\n  EmitTo(\$actor, dump_value(\$folders[\$i]));\\n  \$characters = Call(\$\{/usr/System/sys/idd\}, \\"idd:get-objects\\");\\n  for(\$j=0;\$j\<sizeof(\$characters);\$j++) \{\\n   char = Obj(\\"Chatters:IC:\\"+\$folders[\$i]+\\":\\"+\$characters[\$j]);\\n   /* PUT YOUR CODE HERE */\\n     \$skills = map_indices(prefixed_map(char.\\"*\\", \\"skill:\\"));\\n     for(\$k=0;\$k\<sizeof(\$skills);\$k++) \{\\n       \$allskills[\$skills[\$k]] = 1;\\n     \}\\n  \}\\n \}\\n\\n for(\$k=0;\$k\<sizeof(map_indices(\$allskills));\$k++)\\n   EmitTo(\$actor, dump_value(map_indices(\$allskills)[\$k]));\\n\\n EmitTo(\$actor, \\"PCs update done.\\");\\n return TRUE;\\n\} else if(sizeof(\$command) \>= 2\\n \&\& \$command[0] == \\"test\\"\\n \&\& \$command[1] == \\"script\\"\\n ) \{\\n  EmitTo(\$az, \\"Testing script\\");\\n\\n//  \$first = \$\{IronClaw:Props:Furniture:Container:Box:Sewing\}.\\"core:ur:firstchild\\";\\n\\n  \$children = (\{ \$\{Generic:UrBook\} \});\\n  while(sizeof(\$children)) \{\\n    // EmitTo(\$actor, \\"Child: \\"+dump_value(\$children[0]));\\n    \$first = \$children[0].\\"core:ur:firstchild\\";\\n    \$children -= (\{ \$children[0] \});\\n    \\n    if(!\$first) continue;\\n    // EmitTo(\$actor, \\"First: \\"+dump_value(\$first));\\n    \$current = \$first;\\n    do \{\\n      // if(\$current.\\"core:ur:firstchild\\") \$children += (\{ \$current.\\"core:ur:firstchild\\" \});\\n      \$children += (\{ \$current \});\\n    // EmitTo(\$actor, dump_value(\$current));\\n    // EmitTo(\$actor, dump_value(\$current.\\"base:inventory\\"));\\n      if(contains(lower_case(dump_value(\$current.\\"trait:page00\\")), \\"sock\\")\\n      \|\| contains(lower_case(dump_value(\$current.\\"trait:page01\\")), \\"sock\\")\\n      \|\| contains(lower_case(dump_value(\$current.\\"trait:page02\\")), \\"sock\\")\\n      \|\| contains(lower_case(dump_value(\$current.\\"trait:page03\\")), \\"sock\\")\\n      \|\| contains(lower_case(dump_value(\$current.\\"trait:page04\\")), \\"sock\\")\\n      \|\| contains(lower_case(dump_value(\$current.\\"trait:page05\\")), \\"sock\\")\\n      \|\| contains(lower_case(dump_value(\$current.\\"trait:page06\\")), \\"sock\\")\\n      \|\| contains(lower_case(dump_value(\$current.\\"trait:page07\\")), \\"sock\\")\\n      ) \{\\n        EmitTo(\$actor, \\"FOUND: \\"+dump_value(\$current));\\n      \}\\n    \\n      \$current = \$current.\\"core:ur:sibling:next\\";\\n    \} while (\$first != \$current);\\n  \}\\n  EmitTo(\$actor, \\"Done!\\");\\n  return TRUE;\\n\\n\\n  while(\$first != \$next) \{\\n    \$current = \$next;\\n    \$next = \$next.\\"core:ur:sibling:next\\";\\n    \$count++;\\n    \\n    EmitTo(\$az, dump_value(\$current));\\n    EmitTo(\$az, \\"INVENTORY\\");\\n    EmitTo(\$az, dump_value(\$current.\\"base:inventory\\"));\\n    EmitTo(\$az, \\"-----------\\");\\n    \\n    if(\$owner = ironclaw::find_owner(\$object: \$current)) \{\\n      if(\$owner == -1) \{\\n        EmitTo(\$actor, \\"No owner for \\"+dump_value(\$current));\\n        /*Slay(\$current);\\n        continue;\\n      \}\\n      //\$count3++;\\n      //\$owner.\\"trait:money\\" = Int(\$owner.\\"trait:money\\")+Int(\$current.\\"cash:value\\");\\n      //\$count4 += Int(\$next.\\"cash:value\\");\\n      //Slay(\$current);\\n      */\\n      \} else \{\\n        EmitTo(\$actor, dump_value(\$current) + \\" - \\" + dump_value(\$owner));\\n      \}\\n    \}\\n  \}\\n  /*\\n  EmitTo(\$az, dump_value(\$count)+\\" coins checked\\");\\n  EmitTo(\$az, dump_value(\$count3)+\\" owners found\\");\\n  EmitTo(\$az, dump_value(\$count4)+\\" moved\\");\\n  EmitTo(\$az, \\"Script tested\\");\\n  */\\n  EmitTo(\$actor, \\"Check complete\\");\\n  return FALSE;\\n\\n\\n  \$count = 0;\\n  \$count2 = 0;\\n  \$count3 = 0;\\n  \$count4 = 0;\\n  \$first = nil /* defunct */;\\n  \$next = \$first.\\"core:ur:sibling:next\\";\\n  while(\$first != \$next) \{\\n    \$count++;\\n    if(\$next.\\"cash:balance\\") \{\\n      \$count2++;\\n      if(\$owner = ironclaw::find_owner(\$object: \$next)) \{\\n        if(\$owner == -1) \{\\n          /* This means that there is no owner - e.g. a deleted PC */\\n          EmitTo(\$actor, \\"No owner for \\"+dump_value(\$next));\\n          \$del = \$next;\\n          \$next = \$next.\\"core:ur:sibling:next\\";\\n          Slay(\$del);\\n          continue;\\n        \}\\n        \$count3++;\\n        \$owner.\\"trait:money\\" = Int(\$owner.\\"trait:money\\")+Int(\$next.\\"cash:balance\\");\\n        \$count4 += Int(\$next.\\"cash:balance\\");\\n        \$next.\\"cash:balance\\" = 0;\\n      \} else \{\\n        /*\\n        EmitTo(\$actor, \\"Unknown owner for \\"+dump_value(\$next));\\n        if(\$count2 \> \$count3+100) return TRUE;\\n        */\\n      \}\\n    \}\\n    \$next = \$next.\\"core:ur:sibling:next\\";\\n  \}\\n  EmitTo(\$az, dump_value(\$count));\\n  EmitTo(\$az, dump_value(\$count2));\\n  EmitTo(\$az, dump_value(\$count3));\\n  EmitTo(\$az, dump_value(\$count4));\\n  EmitTo(\$az, \\"Script tested\\");\\n  return FALSE;\\n\\n\} else if(sizeof(\$command) \>= 3\\n \&\& \$command[0] == \\"run\\"\\n \&\& \$command[1] == \\"daily\\"\\n \&\& \$command[2] == \\"functions\\"\\n ) \{\\n /* run daily updating script */\\n Call(\$\{Ironclaw:Lib:Characters:DailyFunctions\}, \\"run_daily_functions\\");\\n return TRUE;\\n\} else if(sizeof(\$command) \>= 2\\n \&\& \$command[0] == \\"update\\"\\n \&\& \$command[1] == \\"injuries\\"\\n ) \{\\n /* run general script to do something to all characters */\\n string description;\\n \$object = \$\{Ironclaw:Races:Bodies:Mainbody\};\\n EmitTo(\$actor, dump_value(\$object.\\"base:details:local\\"));\\n for(\$i=0;\$i\<sizeof(\$object.\\"base:details:local\\");\$i++) \{\\n  EmitTo(\$actor, dump_value(\$object.\\"base:details:local\\"[\$i]));\\n/*  EmitTo(\$actor, dump_value(Get(\$object, \\"details:\\"+\$object.\\"base:details:local\\"[\$i]+\\":descriptions:look\\"))); */\\n\\n  description = dump_value(Get(\$object, \\"details:\\"+\$object.\\"base:details:local\\"[\$i]+\\":descriptions:look\\"));\\n  if(description != \\"nil\\") \{\\n  if(sscanf(description[4..], \\"%s \{? \| \$(this.combat:injury:%*s) \|It has \$(this.combat:injury:%*s).\}\\", description) == 3) \{\\n   description += \\" \$[injuries::show_injuries()]\\";\\n  \} else \{\\n   description = dump_value(Get(\$object, \\"details:\\"+\$object.\\"base:details:local\\"[\$i]+\\":descriptions:look\\"))[4..];\\n  \}\\n\\n  Set(\$object, \\"details:\\"+\$object.\\"base:details:local\\"[\$i]+\\":descriptions:look\\", ParseXML(description));\\n\\n  EmitTo(\$actor, dump_value(ParseXML(description)) );\\n  \}\\n\\n  description = dump_value(Get(\$object, \\"details:\\"+\$object.\\"base:details:local\\"[\$i]+\\":descriptions:examine\\"));\\n  if(description != \\"nil\\") \{\\n  if(sscanf(description[4..], \\"%s \{? \| \$(this.combat:injury:%*s) \|It has \$(this.combat:injury:%*s).\}\\", description) == 3) \{\\n   description += \\" \$[injuries::show_injuries()]\\";\\n  \} else \{\\n   description = dump_value(Get(\$object, \\"details:\\"+\$object.\\"base:details:local\\"[\$i]+\\":descriptions:examine\\"))[4..];\\n  \}\\n\\n  Set(\$object, \\"details:\\"+\$object.\\"base:details:local\\"[\$i]+\\":descriptions:examine\\", ParseXML(description));\\n\\n  EmitTo(\$actor, dump_value(ParseXML(description)) );\\n  \}\\n\\n\\n \}\\n EmitTo(\$actor, \\"Injuries update done.\\");\\n return TRUE;\\n\} else if(sizeof(\$command) \>= 3\\n \&\& \$command[0] == \\"get\\"\\n \&\& \$command[1] == \\"favor\\"\\n ) \{\\n \$pc = lower_case(\$command[2]);\\n if(\$pc = \\"nobles\\") \{\\n  \$pc = (\{ \});\\n  \$guild = \$\{Ironclaw:Guilds:rinaldi\};\\n  for(\$i=0;\$i\<sizeof(\$guild.members);\$i++)\\n   if(\$guild.members[\$i].\\"rank:rank\\" \>= 9) \$pc \|= (\{ \$guild.members[\$i] \});\\n  \$guild = \$\{Ironclaw:Guilds:bisclavret\};\\n  for(\$i=0;\$i\<sizeof(\$guild.members);\$i++)\\n   if(\$guild.members[\$i].\\"rank:rank\\" \>= 9) \$pc \|= (\{ \$guild.members[\$i] \});\\n  \$guild = \$\{Ironclaw:Guilds:doloreaux\};\\n  for(\$i=0;\$i\<sizeof(\$guild.members);\$i++)\\n   if(\$guild.members[\$i].\\"rank:rank\\" \>= 9) \$pc \|= (\{ \$guild.members[\$i] \});\\n  \$guild = \$\{Ironclaw:Guilds:avoirdupois\};\\n  for(\$i=0;\$i\<sizeof(\$guild.members);\$i++)\\n   if(\$guild.members[\$i].\\"rank:rank\\" \>= 9) \$pc \|= (\{ \$guild.members[\$i] \});\\n \}\\n EmitTo(\$actor, dump_value(Call(\$\{Ironclaw:Lib:Favor:Mk2\}, \\"getfavorfromgroup\\", \$from: \$pc)));\\n return TRUE;\\n\} else if(sizeof(\$command) \>= 3\\n \&\& \$command[0] == \\"update\\"\\n \&\& \$command[1] == \\"injurydesc\\"\\n ) \{\\n \$ob = Obj(\$command[2]);\\n if(!\$ob) \{\\n  EmitTo(\$actor, \\"Unknown object\\");\\n  return TRUE;\\n \}\\n EmitTo(\$actor, \\"Updating injury descriptions on \\"+dump_value(\$ob)+\\".\\");\\n \$arr = Arr(Get(\$ob, \\"base:details\\"));\\n for(\$i=0;\$i\<sizeof(\$arr)\&\&\$i\<15;\$i++) \{\\n  if(Get(\$ob, \\"details:\\"+\$arr[\$i]+\\":description:look:local\\")) \{\\n   \$tmp = mixed_to_ascii(Get(\$ob, \\"details:\\"+\$arr[\$i]+\\":description:look:local\\"));\\n   \$result = sscanf(\$tmp, \\"%s\$[injuries::show_injuries()]%s\\", \$one, \$two);\\n   if(!\$result) \{\\n    \$result = sscanf(\$tmp, \\"%s\{? \| \$(this.combat:injury:\\"+\$arr[\$i]+\\") \|They have \$(this.combat:injury:\\"+\$arr[\$i]+\\").\}%s\\", \$one, \$two);\\n    Set(\$ob, \\"details:\\"+\$arr[\$i]+\\":description:look:local\\", ascii_to_mixed(Str(\$one)+\\"\$[injuries::show_injuries()]\\"+Str(\$two)));\\n   \}\\n   \$tmp = mixed_to_ascii(Get(\$ob, \\"details:\\"+\$arr[\$i]+\\":description:examine:local\\"));\\n   \$result = sscanf(\$tmp, \\"%s\$[injuries::show_injuries()]%s\\", \$one, \$two);\\n   if(!\$result) \{\\n    \$result = sscanf(\$tmp, \\"%s\{? \| \$(this.combat:injury:\\"+\$arr[\$i]+\\") \|They have \$(this.combat:injury:\\"+\$arr[\$i]+\\").\}%s\\", \$one, \$two);\\n    Set(\$ob, \\"details:\\"+\$arr[\$i]+\\":description:examine:local\\", ascii_to_mixed(Str(\$one)+\\"\$[injuries::show_injuries()]\\"+Str(\$two)));\\n   \}\\n  \}\\n \}\\n EmitTo(\$actor, \\"Update complete.\\");\\n return TRUE;\\n\} else if(sizeof(\$command) \>= 2\\n \&\& \$command[0] == \\"heal\\"\\n \&\& \$command[1] == \\"injuries\\"\\n ) \{\\n object char;\\n EmitTo(\$actor, \\"healing injuries on all PCs.\\");\\n\\n \$snames = (\{ \});\\n \$pnames = (\{ \});\\n \$adjectives = (\{ \});\\n\\n \$folder = \\"Chatters:IC\\";\\n \$folders = Call(\$\{/usr/System/sys/idd\}, \\"idd:get-folders\\");\\n for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{\\n  \$delay(0.00001, TRUE, \\"573b\\");\\n  \$folder = \\"Chatters:IC:\\"+\$folders[\$i];\\n  EmitTo(\$actor, dump_value(\$folders[\$i]));\\n  \$characters = Call(\$\{/usr/System/sys/idd\}, \\"idd:get-objects\\");\\n  for(\$j=0;\$j\<sizeof(\$characters);\$j++) \{\\n   char = Obj(\\"Chatters:IC:\\"+\$folders[\$i]+\\":\\"+\$characters[\$j]);\\n\\n\\n   \$injuries = Match(char, nil, \$actor, \\"injured\\");\\n   for(\$k=0;\$k\<sizeof(\$injuries);\$k++) \{\\n    \$detail = NRefDetail(\$injuries[\$k]);\\n\\n    Set(char, \\"details:\\"+\$detail+\\":sname:injury\\", nil);\\n    Set(char, \\"details:\\"+\$detail+\\":pname:injury\\", nil);\\n    Set(char, \\"details:\\"+\$detail+\\":pname:injuries\\", nil);\\n    Set(char, \\"details:\\"+\$detail+\\":adjective:injured\\", nil);\\n\\n    Set(char, \\"details:\\"+\$detail+\\":sname:bruise\\", nil);\\n    Set(char, \\"details:\\"+\$detail+\\":pname:bruise\\", nil);\\n    Set(char, \\"details:\\"+\$detail+\\":pname:bruises\\", nil);\\n    Set(char, \\"details:\\"+\$detail+\\":adjective:bruised\\", nil);\\n\\n    Set(char, \\"details:\\"+\$detail+\\":sname:cut\\", nil);\\n    Set(char, \\"details:\\"+\$detail+\\":pname:cut\\", nil);\\n    Set(char, \\"details:\\"+\$detail+\\":pname:cuts\\", nil);\\n    Set(char, \\"details:\\"+\$detail+\\":adjective:cut\\", nil);\\n\\n    Set(char, \\"details:\\"+\$detail+\\":sname:sting\\", nil);\\n    Set(char, \\"details:\\"+\$detail+\\":pname:sting\\", nil);\\n    Set(char, \\"details:\\"+\$detail+\\":pname:stings\\", nil);\\n    Set(char, \\"details:\\"+\$detail+\\":adjective:stung\\", nil);\\n\\n    Set(char, \\"details:\\"+\$detail+\\":sname:bandage\\", nil);\\n    Set(char, \\"details:\\"+\$detail+\\":pname:bandages\\", nil);\\n    Set(char, \\"details:\\"+\$detail+\\":adjective:bandaged\\", nil);\\n\\n    Set(char, \\"details:\\"+\$detail+\\":sname:scratch\\", nil);\\n    Set(char, \\"details:\\"+\$detail+\\":pname:scratches\\", nil);\\n    Set(char, \\"details:\\"+\$detail+\\":adjective:scratched\\", nil);\\n\\n    Set(char, \\"details:\\"+\$detail+\\":sname:bullet wound\\", nil);\\n    Set(char, \\"details:\\"+\$detail+\\":pname:bullet wound\\", nil);\\n    Set(char, \\"details:\\"+\$detail+\\":pname:bullet wounds\\", nil);\\n    Set(char, \\"details:\\"+\$detail+\\":adjective:shot\\", nil);\\n\\n    Set(char, \\"details:\\"+\$detail+\\":sname:welt\\", nil);\\n    Set(char, \\"details:\\"+\$detail+\\":pname:welt\\", nil);\\n    Set(char, \\"details:\\"+\$detail+\\":pname:welts\\", nil);\\n    Set(char, \\"details:\\"+\$detail+\\":adjective:welted\\", nil);\\n\\n    Set(char, \\"details:\\"+\$detail+\\":sname:bite\\", nil);\\n    Set(char, \\"details:\\"+\$detail+\\":pname:bites\\", nil);\\n    Set(char, \\"details:\\"+\$detail+\\":adjective:bitten\\", nil);\\n\\n    \$snames \|= Arr(Get(char, \\"details:\\"+\$detail+\\":snames:local\\"));\\n    \$pnames \|= Arr(Get(char, \\"details:\\"+\$detail+\\":pnames:local\\"));\\n    \$adjectives \|= Arr(Get(char, \\"details:\\"+\$detail+\\":adjectives:local\\"));\\n\\n   \}\\n/*   EmitTo(\$az, \\"Done!\\");\\n   EmitTo(\$az, dump_value(\$snames));\\n   EmitTo(\$az, dump_value(\$pnames));\\n   EmitTo(\$az, dump_value(\$adjectives));\\n   return FALSE;*/\\n\\n   char.\\"combat:damage\\" = nil;\\n   char.\\"combat:fatigue\\" = nil;\\n   char.\\"combat:injuries\\" = nil;\\n   char.\\"combat:actions\\" = nil;\\n   char.\\"combat:actions:current\\" = nil;\\n   char.\\"combat:actions:queue\\" = nil;\\n   char.\\"combat:defenceitems\\" = nil;\\n   char.\\"combat:healing\\" = nil;\\n   char.\\"combat:type\\" = nil;\\n   \$injuries = map_indices(prefixed_map(Get(char, \\"*\\"), \\"combat:injury\\"));\\n   for(\$k=0;\$k\<sizeof(\$injuries);\$k++)\\n    Set(char, \$injuries[\$k], nil);\\n\\n  \}\\n \}\\n EmitTo(\$actor, \\"All PC injuries healed.\\");\\n\\n EmitTo(\$az, dump_value(\$snames));\\n EmitTo(\$az, dump_value(\$pnames));\\n EmitTo(\$az, dump_value(\$adjectives));\\n\\n return TRUE;\\n\} else if(sizeof(\$command) \>= 2\\n \&\& \$command[0] == \\"update\\"\\n \&\& \$command[1] == \\"careers\\"\\n ) \{\\n object char;\\n EmitTo(\$actor, \\"Updating careers information for all PCs.\\");\\n \$folder = \\"Chatters:IC\\";\\n \$folders = Call(\$\{/usr/System/sys/idd\}, \\"idd:get-folders\\");\\n for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{\\n  \$delay(0.00001, TRUE, \\"573a\\");\\n  \$folder = \\"Chatters:IC:\\"+\$folders[\$i];\\n  EmitTo(\$actor, dump_value(\$folders[\$i]));\\n  \$characters = Call(\$\{/usr/System/sys/idd\}, \\"idd:get-objects\\");\\n  for(\$j=0;\$j\<sizeof(\$characters);\$j++) \{\\n   char = Obj(\\"Chatters:IC:\\"+\$folders[\$i]+\\":\\"+\$characters[\$j]);\\n   char.\\"skill:career:test\\" = 10;\\n   char.\\"skill:career:test\\" = nil;\\n  \}\\n \}\\n EmitTo(\$actor, \\"Careers info update done.\\");\\n return TRUE;\\n\} else if(sizeof(\$command) \>= 4\\n \&\& \$command[0] == \\"search\\"\\n \&\& \$command[1] == \\"merry\\"\\n ) \{\\n object this_object;\\n string *indices;\\n\\n \$searchstring = lower_case(implode(\$command[3..], \\" \\"));\\n\\n EmitTo(\$actor, \\"Searching for merry code in \\"+\$command[2]);\\n EmitTo(\$actor, \\"Searching for \\\\\\"\\"+\$searchstring+\\"\\\\\\"\\");\\n\\n \$folders_to_search = (\{ \$command[2] \});\\n \$objects = (\{ \});\\n \$found = (\{ \});\\n while(sizeof(\$folders_to_search)) \{\\n   \$folder = \$folders_to_search[0];\\n   \$folders_to_search -= (\{ \$folders_to_search[0] \});\\n   /* EmitTo(\$actor, \\"Searching folder \\"+\$folder); */\\n   \$results = Call(\$\{/usr/System/sys/idd\}, \\"idd:get-folders\\");\\n   for(\$i=0;\$i\<sizeof(\$results);\$i++)\\n     \$folders_to_search += (\{ \$folder+\$results[\$i]+\\":\\" \});\\n   \$delay(0.001, TRUE, \\"8a76\\");\\n\\n   \$results = Call(\$\{/usr/System/sys/idd\}, \\"idd:get-objects\\");\\n   for(\$i=0;\$i\<sizeof(\$results);\$i++) \{\\n     this_object = Obj(\$folder+\$results[\$i]);\\n     \$scripts = prefixed_map(this_object.\\"*\\", \\"merry:\\");\\n     indices = map_indices(\$scripts);\\n     for(\$j=0;\$j\<sizeof(indices);\$j++) \{\\n       \$result = sscanf(mixed_to_ascii(\$scripts[indices[\$j]], TRUE), \\"%*s\\"+\$searchstring+\\"%*s\\");\\n       if(\$result)\\n         /* EmitTo(\$actor, TAG(indices[\$j]+\\" - \\"+name(this_object), \\"Imp\\")); */\\n         \$found += (\{ indices[\$j]+\\" - \\"+name(this_object) \});\\n         if(sizeof(\$found) \> 50) \{\\n           EmitTo(\$actor, \\"Max results reached\\");\\n           break;\\n         \}\\n     \}\\n     \$delay(0.001, TRUE, \\"640b\\");\\n   \}\\n \}\\n\\n EmitTo(\$actor, \\"Merry Search complete\\");\\n if(!sizeof(\$found)) \{\\n   EmitTo(\$actor, \\"No items found that match your query.\\");\\n \} else \{\\n   EmitTo(\$actor, \\"Summary:\\");\\n   for(\$i=0;\$i\<sizeof(\$found);\$i++) \{\\n     EmitTo(\$actor, TAG(\$found[\$i], \\"Imp\\"));\\n     \$delay(0.001, TRUE, \\"583c\\");\\n   \}\\n \}\\n\\n\\n return TRUE;\\n\} else if(sizeof(\$command) \>= 2\\n \&\& \$command[0] == \\"update\\"\\n \&\& \$command[1] == \\"tokens\\"\\n ) \{\\n object char;\\n EmitTo(\$actor, \\"Updating old tokens for all guilds.\\");\\n \$folder = \\"Ironclaw:Guilds\\";\\n \$guilds = Call(\$\{/usr/System/sys/idd\}, \\"idd:get-objects\\");\\n\\n \$token_types = (\{ \});\\n\\n for(i=0;i\<sizeof(\$guilds);i++) \{\\n  \$guild = Obj(\\"Ironclaw:Guilds:\\"+\$guilds[i]);\\n  EmitTo(\$az, \\"Updating \\"+\$guilds[i]);\\n\\n  /* add this guild's tokens to the list */\\n  /*EmitTo(\$az, dump_value( map_indices(prefixed_map(Get(\$guild, \\"*\\"), \\"token\\")) ));*/\\n  \$token_types \|= map_indices(prefixed_map(Get(\$guild, \\"*\\"), \\"token\\"));\\n  if(member(\\"tokens:teacher\\", map_indices(prefixed_map(Get(\$guild, \\"*\\"), \\"token\\"))))\\n   EmitTo(\$az, \\"THIS GUILD! THIS ONE HERE! ALERT! ALERT!\\");\\n\\n  /* convert old tokens to new */\\n  if(\$guild.\\"tokens:teacher\\") \{\\n   \$guild.\\"tokens:academic\\" = Int(\$guild.\\"tokens:academic\\") + Int(\$guild.\\"tokens:teacher\\");\\n  \}\\n  \$guild.\\"tokens:teacher\\" = nil;\\n  if(\$guild.\\"tokens:assassin\\") \{\\n   \$guild.\\"tokens:subterfuge\\" = Int(\$guild.\\"tokens:subterfuge\\") + Int(\$guild.\\"tokens:assassin\\");\\n  \}\\n   \$guild.\\"tokens:assassin\\" = nil;\\n  if(\$guild.\\"tokens:soldier\\") \{\\n   \$guild.\\"tokens:martial\\" = Int(\$guild.\\"tokens:martial\\") + Int(\$guild.\\"tokens:soldier\\");\\n  \}\\n   \$guild.\\"tokens:soldier\\" = nil;\\n  if(\$guild.\\"tokens:guard\\") \{\\n   \$guild.\\"tokens:martial\\" = Int(\$guild.\\"tokens:martial\\") + Int(\$guild.\\"tokens:guard\\");\\n  \}\\n   \$guild.\\"tokens:guard\\" = nil;\\n  if(\$guild.\\"tokens:mercenary\\") \{\\n   \$guild.\\"tokens:martial\\" = Int(\$guild.\\"tokens:martial\\") + Int(\$guild.\\"tokens:mercenary\\");\\n  \}\\n   \$guild.\\"tokens:mercenary\\" = nil;\\n  if(\$guild.\\"tokens:pirate\\") \{\\n   \$guild.\\"tokens:martial\\" = Int(\$guild.\\"tokens:martial\\") + Int(\$guild.\\"tokens:pirate\\");\\n  \}\\n   \$guild.\\"tokens:pirate\\" = nil;\\n  if(\$guild.\\"tokens:sailor\\") \{\\n   \$guild.\\"tokens:martial\\" = Int(\$guild.\\"tokens:martial\\") + Int(\$guild.\\"tokens:sailor\\");\\n  \}\\n   \$guild.\\"tokens:sailor\\" = nil;\\n\\n \}\\n EmitTo(\$actor, \\"Token update finished.\\");\\n EmitTo(\$az, dump_value(\$token_types));\\n return TRUE;\\n\} else if(sizeof(\$command) \>= 2\\n \&\& \$command[0] == \\"favor\\"\\n \&\& \$command[1] == \\"status\\"\\n ) \{\\n /* run general script to do something to all characters */\\n object char;\\n EmitTo(\$actor, \\"Gathering favor info\\");\\n\\n \$favor_info = ([ ]);\\n\\n /* only recount favor if it's been more than an hour since last count */\\n if(Int(this.\\"tmp:favor_info:timestamp\\")+60*60 \< time()) \{\\n  \$folder = \\"Chatters:IC\\";\\n  \$folders = Call(\$\{/usr/System/sys/idd\}, \\"idd:get-folders\\");\\n  for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{\\n   \$delay(0.00001, TRUE, \\"cf6f\\");\\n   \$folder = \\"Chatters:IC:\\"+\$folders[\$i];\\n   EmitTo(\$actor, dump_value(\$folders[\$i]));\\n   \$characters = Call(\$\{/usr/System/sys/idd\}, \\"idd:get-objects\\");\\n   for(\$j=0;\$j\<sizeof(\$characters);\$j++) \{\\n    char = Obj(\\"Chatters:IC:\\"+\$folders[\$i]+\\":\\"+\$characters[\$j]);\\n    /* PUT YOUR CODE HERE */\\n    if(char.\\"trait:favor\\") \{\\n     if(!char.\\"rank:rank\\") char.\\"rank:rank\\" = 3;\\n     \$favor_info[char.\\"rank:rank\\"] = Arr(\$favor_info[char.\\"rank:rank\\"]);\\n     \$favor_info[char.\\"rank:rank\\"] \|= (\{ (\{ char, char.\\"trait:favor\\" \}) \});\\n    \}\\n   \}\\n  \}\\n  EmitTo(\$actor, \\"Favor update done.\\");\\n  this.\\"tmp:favor_info\\" = \$favor_info;\\n  this.\\"tmp:favor_info:timestamp\\" = time();\\n \} else \{\\n  \$favor_info = this.\\"tmp:favor_info\\";\\n \}\\n /*EmitTo(\$actor, dump_value(\$favor_info));*/\\n /* sort through the favor info to display it */\\n for(\$i=0;\$i\<sizeof(map_indices(\$favor_info));\$i++) \{\\n  \$rank = \$favor_info[map_indices(\$favor_info)[\$i]];\\n  EmitTo(\$actor, \\"Rank \\"+dump_value(map_indices(\$favor_info)[\$i])+\\": \\"+dump_value(sizeof(\$rank))+\\" members.\\");\\n  /* sort everyone in this rank */\\n  if(sizeof(\$rank) \> 1) \{\\n   for(\$j=1;\$j\<sizeof(\$rank);\$j++) \{\\n    if(\$rank[\$j-1][1] \> \$rank[\$j][1]) \{\\n     /*EmitTo(\$actor, \\"Switching \\"+dump_value(\$rank[\$j-1])+\\" and \\"+dump_value(\$rank[\$j]));*/\\n     \$tmp = \$rank[\$j-1];\\n     \$rank[\$j-1] = \$rank[\$j];\\n     \$rank[\$j] = \$tmp;\\n     \$j = 0;\\n    \}\\n   \}\\n  \}\\n  \$tmp = nil;\\n  \$list = \\"\\";\\n  for(\$j=0;\$j\<sizeof(\$rank);\$j++) \{\\n   if(\$rank[\$j][1] != \$tmp) \{\\n    \$tmp = \$rank[\$j][1];\\n    if(\$list != \\"\\")\\n     EmitTo(\$actor, \$list);\\n    \$list = dump_value(\$rank[\$j][1]);\\n   \}\\n   \$char = \$rank[\$j][0];\\n   if(Int(\$char.\\"cdat:lastlogin\\")+60*60*24*31 \> time()) \{\\n    \$list += \\", \\"+Str(\$char.\\"skotos:charname\\");\\n    if(\$char.\\"trait:favor:promotion\\") \$list += \\" (Already awaiting promotion)\\";\\n    if(\$char.\\"trait:favor:demotion\\") \$list += \\" (Risking demotion)\\";\\n   \}\\n\\n  \}\\n  if(\$list != \\"\\") \{\\n   EmitTo(\$actor, \$list);\\n   \$list = \\"\\";\\n  \}\\n\\n  /*EmitTo(\$actor, dump_value(\$rank));*/\\n \}\\n return TRUE;\\n\} else if(sizeof(\$command) \>= 2\\n \&\& \$command[0] == \\"check\\"\\n \&\& \$command[1] == \\"favor\\"\\n ) \{\\n /* run general script to do something to all characters */\\n object char;\\n EmitTo(\$actor, \\"Gathering favor info\\");\\n\\n \$favored = ([ ]);\\n\\n \$folder = \\"Chatters:IC\\";\\n \$folders = Call(\$\{/usr/System/sys/idd\}, \\"idd:get-folders\\");\\n for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{\\n  \$delay(0.00001, TRUE, \\"cf6z\\");\\n  \$folder = \\"Chatters:IC:\\"+\$folders[\$i];\\n  // EmitTo(\$actor, dump_value(\$folders[\$i]));\\n  \$characters = Call(\$\{/usr/System/sys/idd\}, \\"idd:get-objects\\");\\n  for(\$j=0;\$j\<sizeof(\$characters);\$j++) \{\\n   char = Obj(\\"Chatters:IC:\\"+\$folders[\$i]+\\":\\"+\$characters[\$j]);\\n   /* PUT YOUR CODE HERE */\\n   if(char.\\"favor:giving\\") \{\\n    // EmitIn(\$actor.\\"base:environment\\", dump_value(char.\\"skotos:playercapname\\")+ \\" giving \\"+dump_value(char.\\"favor:giving\\"));\\n    if(!char.\\"loyalty:name\\") \{\\n      EmitIn(\$actor.\\"base:environment\\", dump_value(char.\\"skotos:playercapname\\")+ \\" isn't loyal to any groups yet. Can't give favor\\");\\n    \} else \{\\n      for(\$k=0;\$k\<sizeof(map_indices(char.\\"favor:giving\\"));\$k++) \{\\n        \$targ = map_indices(char.\\"favor:giving\\")[\$k];\\n        if(!\$favored[\$targ]) \$favored[\$targ] = ([ ]);\\n        if(!\$favored[\$targ][char.\\"loyalty:name\\"]) \$favored[\$targ][char.\\"loyalty:name\\"] = 0;\\n      \\n        if(char.\\"favor:giving\\"[\$targ] \> 0) \$favored[\$targ][char.\\"loyalty:name\\"]++;\\n        if(char.\\"favor:giving\\"[\$targ] \< 0) \$favored[\$targ][char.\\"loyalty:name\\"]--;\\n      \}\\n    \}\\n   \}\\n  \}\\n \}\\n EmitTo(\$actor, \\"Favor update done.\\");\\n for(\$i=0;\$i\<sizeof(map_indices(\$favored));\$i++) \{\\n \\n   char = Obj(map_indices(\$favored)[\$i]);\\n   \\n   if(!char.\\"skotos:playercapname\\" \&\& char.\\"skotos:charname\\") char.\\"skotos:playercapname\\" = capitalize(char.\\"skotos:charname\\");\\n   \\n   EmitIn(\$actor.\\"base:environment\\", char.\\"skotos:playercapname\\" + \\":\\");\\n   \\n   for(\$j=0;\$j\<sizeof(map_indices(\$favored[name(char)]));\$j++) \{\\n     \$value = \$favored[name(char)][map_indices(\$favored[name(char)])[\$j]];\\n     EmitIn(\$actor.\\"base:environment\\", \\"- \\"+map_indices(\$favored[name(char)])[\$j]+\\": \\"+\$value);\\n   \}\\n   \\n \}\\n // EmitTo(\$actor, dump_value(\$favored));\\n return TRUE;\\n\} else if(sizeof(\$command) \>= 2\\n \&\& \$command[0] == \\"clear\\"\\n \&\& \$command[1] == \\"vp\\"\\n ) \{\\n EmitTo(\$actor, \\"Clearing Virtual Place data\\");\\n \$room = \$\{orcsuit:Lib:vp:testing:swamp_room\};\\n \$data = \$\{orcsuit:Lib:vp:testing:swampvp\};\\n \$count = 0;\\n while(\$room.\\"core:ur:firstchild\\" \&\& \$count \< 10) \{\\n  EmitTo(\$actor, dump_value(\$room.\\"core:ur:firstchild\\"));\\n  Slay(\$room.\\"core:ur:firstchild\\");\\n  \$count++;\\n \}\\n EmitTo(\$actor, \\"Room cleared\\");\\n \$data.runprocess = \$data.nextprocess;\\n EmitTo(\$actor, \\"runprocess reset\\");\\n return FALSE;\\n\} else if(sizeof(\$command) \>= 2\\n \&\& \$command[0] == \\"favor\\"\\n \&\& \$command[1] == \\"broadcast\\"\\n ) \{\\n /* set up a repeating (drifting) broadcast */\\n /* let's say, about every 12 hours? */\\n \$id = random(1000);\\n this.\\"broadcast:favor_reminder\\" = \$id;\\n while(\$this.\\"broadcast:favor_reminder\\" == \$id) \{\\n  /* gather a list of logged on players and send message */\\n  \$message = \\"[Broadcast] Don't forget to use the new, very important @favor/@disfavor commands. See http://forum.skotos.net/showthread.php?t=74537 for more info.\\";\\n  \$players = common::wholist();\\n  for(\$i=0;\$i\<sizeof(\$players);\$i++)\\n   EmitTo(\$players[\$i], \$message);\\n\$id = \\"turn it off!\\";\\nEmitTo(\$\{Chatters:IC:ro:roo\}, \\"Favor emitter disabled!\\");\\n  /* wait a bit more than 12 hours before the next message */\\n  \$delay(60*60*12+60*random(120), TRUE, \\"2848\\");\\n\\n \}\\n return TRUE;\\n\} else if(sizeof(\$command) \>= 2\\n \&\& \$command[0] == \\"update\\"\\n \&\& \$command[1] == \\"sync\\"\\n ) \{\\n if(sizeof(\$command) \<= 2) \{\\n  EmitTo(\$actor, \\"Format: update sync woe:name (you can specify either an object or directory)\\");\\n  return FALSE;\\n \}\\n EmitTo(\$actor, \\"Updating synced information\\");\\n\\n /* is it an object? */\\n \$startob = Obj(\$command[2]);\\n\\n /* look through the directory, updating all objects */\\n if(\$startob) \{\\n  \$folders_to_check = (\{ \});\\n \} else \{\\n  \$folders_to_check = (\{ \$command[2] \});\\n \}\\n while(sizeof(\$folders_to_check) \|\| \$startob) \{\\n  \$delay(0.01, TRUE, \\"b3d0\\");\\n  if(!\$startob) \{\\n   \$folder = \$folders_to_check[0];\\n   EmitTo(\$actor, dump_value(\$folder));\\n   \$folders = Call(\$\{/usr/System/sys/idd\}, \\"idd:get-folders\\");\\n   for(i=0;i\<sizeof(\$folders);i++)\\n    \$folders_to_check += (\{ \$folder+\\":\\"+\$folders[i] \});\\n   \$folders_to_check -= (\{ \$folders_to_check[0] \});\\n   \$objects = Call(\$\{/usr/System/sys/idd\}, \\"idd:get-objects\\");\\n  \} else \{\\n   \$folder = \\"\\";\\n   \$objects = (\{ name(\$startob) \});\\n   \$startob = nil;\\n  \}\\n  for(\$j=0;\$j\<sizeof(\$objects);\$j++) \{\\n   \$ob = Obj(\$folder+\\":\\"+\$objects[\$j]);\\n   if(!\$ob) \{\\n    chat::log(\$log: \\"3\|Error updating synced objects - Invalid object: \\"+Str(\$folder)+\\":\\"+Str(\$objects[\$j])+\\".\\");\\n    return FALSE;\\n   \}\\n\\n   \$properties = map_indices(Get(\$ob, \\"*\\"));\\n   for(i=0;i\<sizeof(\$properties);i++) \{\\n    \$my_prop = \$properties[i];\\n    \$my_string = dump_value(Get(\$ob, \$my_prop));\\n    \$my_type = typeof(Get(\$ob, \$my_prop));\\n\\n    /* does this property have anything that looks like it needs updating? */\\n    if(sscanf(\$my_string, \\"%*s\<MOVED:%*s\\") == 2) \{\\n     /* Yes, looks like we need to do an update */\\n     while(sscanf(\$my_string, \\"%s\<MOVED:%*d-%*d:%s\>%s\\", \$one, \$two, \$three) == 5) \{\\n      if(!Obj(\$two)) \{\\n       chat::log(\$log: \\"3\|Error updating synced objects - \\"+Str(\$two)+\\" does not exist. Found in \\"+dump_value(\$ob)+\\" - \\"+\$my_prop+\\". Please resolve manually.\\");\\n       return FALSE;\\n      \}\\n      \$my_string = \$one+\\"\<\\"+\$two+\\"\>\\"+\$three;\\n     \}\\n     if(typeof(ascii_to_mixed(\$my_string)) != \$my_type) \{\\n      chat::log(\$log: \\"3\|Error updating synced objects - Type mismatch when converting \\"+\$my_prop+\\" in \\"+dump_value(\$ob)+\\". Please resolve manually.\\");\\n      return FALSE;\\n     \}\\n     Set(\$ob, \$my_prop, ascii_to_mixed(\$my_string));\\n    \}\\n   \}\\n\\n  \}\\n \}\\n EmitTo(\$actor, \\"Sync update done\\");\\n return TRUE;\\n\\n \$ob = Obj(\$command[2]);\\n if(!\$ob) \{\\n  EmitTo(\$actor, \\"Invalid object.\\");\\n  return FALSE;\\n \}\\n\\n \$properties = map_indices(Get(\$ob, \\"*\\"));\\n for(i=0;i\<sizeof(\$properties);i++) \{\\n  \$my_prop = \$properties[i];\\n  \$my_string = dump_value(Get(\$ob, \$my_prop));\\n  \$my_type = typeof(Get(\$ob, \$my_prop));\\n\\n  /* does this property have anything that looks like it needs updating? */\\n  if(sscanf(\$my_string, \\"%*s\<MOVED:%*s\\") == 2) \{\\n   /* Yes, looks like we need to do an update */\\n   while(sscanf(\$my_string, \\"%s\<MOVED:%*d-%*d:%s\>%s\\", \$one, \$two, \$three) == 5) \{\\n    if(!Obj(\$two)) \{\\n     chat::log(\$log: \\"3\|Error updating synced objects - \\"+Str(\$two)+\\" does not exist. Found in \\"+dump_value(\$ob)+\\" - \\"+\$my_prop+\\". Please resolve manually.\\");\\n     return FALSE;\\n    \}\\n    \$my_string = \$one+\\"\<\\"+\$two+\\"\>\\"+\$three;\\n   \}\\n   if(typeof(ascii_to_mixed(\$my_string)) != \$my_type) \{\\n    chat::log(\$log: \\"3\|Error updating synced objects - Type mismatch when converting \\"+\$my_prop+\\" in \\"+dump_value(\$ob)+\\". Please resolve manually.\\");\\n    return FALSE;\\n   \}\\n   Set(\$ob, \$my_prop, ascii_to_mixed(\$my_string));\\n  \}\\n \}\\n\\n EmitTo(\$actor, \\"Sync update done\\");\\n return TRUE;\\n\} else if(sizeof(\$command) \>= 2\\n \&\& \$command[0] == \\"test\\"\\n \&\& \$command[1] == \\"money\\"\\n ) \{\\n /* run general script to do something to all characters */\\n object char;\\n\\n EmitTo(\$actor, \\"Testing money stuff\\");\\n \$amount = 0;\\n \$folder = \\"Chatters:IC\\";\\n \$folders = Call(\$\{/usr/System/sys/idd\}, \\"idd:get-folders\\");\\n for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{\\n  \$delay(0.00001, TRUE, \\"2284\\");\\n  \$folder = \\"Chatters:IC:\\"+\$folders[\$i];\\n  /* EmitTo(\$actor, dump_value(\$folders[\$i])); */\\n  \$characters = Call(\$\{/usr/System/sys/idd\}, \\"idd:get-objects\\");\\n  for(\$j=0;\$j\<sizeof(\$characters);\$j++) \{\\n   char = Obj(\\"Chatters:IC:\\"+\$folders[\$i]+\\":\\"+\$characters[\$j]);\\n   /* PUT YOUR CODE HERE */\\n   /*  EmitTo(\$actor, dump_value(char)); */\\n   if(Int(char.\\"cdat:lastlogin\\")+60*60*24*5 \< time()) \{\\n     \$income = Int(char.\\"trait:income\\")+Int(char.\\"trait:extraincome\\");\\n      if(Int(char.\\"trait:money\\") \< \$income)\\n       \$amount += \$income;\\n   \}\\n  \}\\n \}\\n\\n EmitTo(\$actor, \\"Finished testing money\\");\\n EmitTo(\$actor, \\"Total amount earned: \\"+Str(\$amount/100));\\n\} else if(sizeof(\$command) \>= 4\\n \&\& \$command[0] == \\"give\\"\\n \&\& \$command[1] == \\"influence\\"\\n ) \{\\n  EmitTo(\$actor, \\"Giving influence\\");\\n  \\n  \$char = Obj(\\"Chatters:IC:\\"+lower_case(\$command[2])[..1]+\\":\\"+lower_case(\$command[2]));\\n  if(!\$char) \{ EmitTo(\$actor, \\"Couldn't find \\"+\$command[2]); return TRUE; \}\\n  \$points = Int(\$command[3]);\\n  if(!\$points) \{EmitTo(\$actor, \\"Unknown points \\"+\$command[3]); return TRUE;\}\\n  \\n \\n  \\n  \$group = \$char.\\"loyalty:group\\";\\n  if(!\$group) \$group = \\"rinaldi\\";\\n\\n  EmitTo(\$actor, \\"Group is: \\"+\$group);\\n  \\n  EmitTo(\$actor, dump_value(Int(Get(\$char, \\"rank:influence:\\"+\$group))));\\n  Set(\$char, \\"rank:influence:\\"+\$group, Int(Get(\$char, \\"rank:influence:\\"+\$group))+\$points);\\n  EmitTo(\$actor, dump_value(Int(Get(\$char, \\"rank:influence:\\"+\$group))));\\n    \\n  \\n  return TRUE;\\n\} else if(sizeof(\$command) \>= 2\\n \&\& \$command[0] == \\"tally\\"\\n \&\& \$command[1] == \\"events\\"\\n ) \{\\n /* run general script to do something to all characters */\\n object char;\\n\\n EmitTo(\$actor, \\"Counting events points\\");\\n \$results = ([ ]);\\n \$amount = 0;\\n \$folder = \\"Chatters:IC\\";\\n \$folders = Call(\$\{/usr/System/sys/idd\}, \\"idd:get-folders\\");\\n for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{\\n  \$delay(0.00001, TRUE, \\"c4bc\\");\\n  \$folder = \\"Chatters:IC:\\"+\$folders[\$i];\\n  /* EmitTo(\$actor, dump_value(\$folders[\$i])); */\\n  \$characters = Call(\$\{/usr/System/sys/idd\}, \\"idd:get-objects\\");\\n  for(\$j=0;\$j\<sizeof(\$characters);\$j++) \{\\n   char = Obj(\\"Chatters:IC:\\"+\$folders[\$i]+\\":\\"+\$characters[\$j]);\\n   /* PUT YOUR CODE HERE */\\n   /*  EmitTo(\$actor, dump_value(char)); */\\n   if(char.\\"event:points\\") \{\\n     \$name = char.\\"skotos:playercapname\\";\\n     if(!\$name) \$name = char.\\"skotos:charname\\";\\n     if(!\$name) \$name = Describe(char);\\n     \$results[\$name] = sizeof(map_indices(char.\\"event:points\\"));\\n   \}\\n  \}\\n \}\\n\\n EmitTo(\$actor, \\"Finished tally\\");\\n EmitTo(\$actor, dump_value(\$results));\\n\}\\n\\nEmitTo(\$actor, \\"Unknown command\\");\\nreturn TRUE;"
      </Core:Property>
      <Core:Property property="merry:react-post:jab-dob">
         X[M] /* update the characters skills */
\$az = \$\{Chatters:AE:az:azrael\};
if(\$actor != \$az \&\& \$actor != \$\{Chatters:IC:si:sirazad\}) return TRUE;
if(!\$(raw-evoke)) return TRUE;

\$commands = explode(\$(raw-evoke), " ");
if(sizeof(\$commands) \>= 3 \&\& \$commands[0] == "reset" \&\& \$commands[1] == "guild" \&\& \$commands[2] == "titles") \{
 if(sizeof(\$commands) == 3) \{
  EmitTo(\$actor, "Which guild do you want to reset the titles on?");
  return TRUE;
 \}
 EmitTo(\$actor, "Resetting the titles on "+Str(\$commands[3])+".");
 \$guild = Obj("Ironclaw:Guilds:"+lower_case(\$commands[3]));
 if(!\$guild) \{
  EmitTo(\$actor, "Guild not found");
  return TRUE;
 \}
 for(\$i=0;\$i\<sizeof(\$guild.members);\$i++) \{
  \$rank = \$guild.members[\$i]."rank:rank";
  if(!\$rank) \$rank = 3;
  EmitTo(\$actor, "Resetting "+dump_value(\$guild.members[\$i])+" at rank "+dump_value(\$rank)+".");
  Call(\$\{Allegory:Lib:Characters:Promotion\}, "set_rank", \$char: \$guild.members[\$i], \$rank: \$rank, \$title: nil);
 \}
 return TRUE;
\}

return TRUE;

/* find the items to delete */
\$array = (\{ \$\{Allegory:Props:Animals:Fish:OddCatches:Boots\}, \$\{Allegory:Props:Animals:Fish:OddCatches:RustyBucket\}, \$\{Allegory:Props:Animals:Fish:OddCatches:Seaweed\} \});

/*\$array = (\{ \$\{IronClaw:Props:Fishing:FishitUp:BrokenShell\}, \$\{IronClaw:Props:Fishing:FishitUp:Driftwood\}, \$\{IronClaw:Props:Fishing:FishitUp:EmptyContainer\}, \$\{IronClaw:Props:Fishing:FishitUp:FishingLine\}, \$\{IronClaw:Props:Fishing:FishitUp:SoggyScroll\}, \$\{IronClaw:Animals:Fish:Types:Bonefish\}, \$\{IronClaw:Animals:Fish:Types:Weakfish\}, \$\{IronClaw:Animals:Fish:Types:Gag\}, \$\{IronClaw:Animals:Fish:Types:Scamp\}, \$\{IronClaw:Animals:Fish:Types:SilverPerch\}, \$\{IronClaw:Animals:Fish:Types:Bluefish\}, \$\{IronClaw:Animals:Fish:Types:BlackDrum\}, \$\{IronClaw:Animals:Fish:Types:BlackGrouper\}, \$\{IronClaw:Animals:Fish:Types:Croaker\}, \$\{IronClaw:Animals:Fish:Types:RedDrum\}, \$\{IronClaw:Animals:Fish:Types:SandSeatrout\}, \$\{IronClaw:Animals:Fish:Types:YellowfinGrouper\}, \$\{IronClaw:Animals:Fish:Types:Spearfish\}, \$\{IronClaw:Animals:Fish:Types:Jewfish\}, \$\{IronClaw:Animals:Fish:Types:LefteyeFlounder\}, \$\{IronClaw:Animals:Fish:Types:RedGrouper\}, \$\{IronClaw:Animals:Fish:Types:Cobia\}, \$\{IronClaw:Animals:Fish:Types:SilverSeatrout\}, \$\{IronClaw:Animals:Fish:Types:BlueMarlin\} \});*/


for(\$i=0;\$i\<sizeof(\$array);\$i++) \{
 \$start = \$array[\$i];
 EmitTo(\$az, dump_value(\$start));
 \$start = \$start."core:ur:firstchild";
 if(\$start) \{
  /* count items */
  \$current = \$start;
  \$counter = 0;
  do \{
   \$counter++;
   \$current = \$current."core:ur:sibling:next";
   \$delay(0.00001, TRUE, "422a");
  \} while (\$start != \$current);
  EmitTo(\$az, Str(\$counter)+" items.");
  \$deleted = 0;
  for(\$j=0;\$j\<\$counter;\$j++) \{
   if(\$current) \{
    \$next = \$current."core:ur:sibling:next";
    if(!\$current."base:environment") \{
     Slay(\$current);
     \$deleted++;
    \}
    \$current = \$next;
    \$delay(0.00001, TRUE, "cee9");
   \}
  \}
  EmitTo(\$az, Str(\$deleted)+" items deleted.");
 \} else \{
  EmitTo(\$az, "No child objects.");
 \}
\}
EmitTo(\$az, "Done!");
return TRUE;

\$start = \$\{Allegory:Props:Animals:Fish:Saltwater:Cobia\};
EmitTo(\$az, dump_value(\$start));
\$start = \$start."core:ur:firstchild";
if(!\$start) \{
 EmitTo(\$az, "No child objects.");
 return TRUE;
\}
\$current = \$start;
\$counter = 0;
EmitTo(\$az, "Start deleting");
if(!\$start."base:environment") \{
 do \{
  \$current = \$current."core:ur:sibling:next";
 \} while (!\$current."base:environment" \&\& \$start != \$current);
 if(\$current."base:environment")
  \$start = \$current;
\}
if(!\$start."base:environment") \{
 while(\$current) \{
  \$tmp = \$current;
  \$current = \$current."core:ur:sibling:next";
  Slay(\$tmp);
  \$counter++;
 \}
 EmitTo(\$az, "Done deleting");
 EmitTo(\$az, Str(\$counter)+" items deleted.");
 return TRUE;
\}
do \{
  \$next = \$current."core:ur:sibling:next";
  if(!\$current."base:environment") \{
    Slay(\$current);
    \$counter++;
  \}
  \$current = \$next;
\} while (\$start != \$current);
EmitTo(\$az, "Done deleting");
EmitTo(\$az, Str(\$counter)+" items deleted.");
return TRUE;

/* now figure out the leaderships */
\$start = \$\{IronClaw:Props:Guilds:GuildRing\};
\$start = \$start."core:ur:firstchild";
\$current = \$start;
do \{
  if(!\$current.guild) \{
    \$current = \$current."core:ur:sibling:next";
    continue;
  \}
  \$guild = \$current.guild;
  \$delay(0.01, TRUE, "2b5d");
  if(\$current."guild:rank" == 1) \{
    if(\$guild."tmp:holders") \{
      if(sizeof(\$guild."tmp:holders") == 1) \{
        \$holder = \$guild."tmp:holders"[0];
        if(\$holder != \$guild.leader) \{
          if(\$guild.leader) \{
            EmitTo(\$az, "Mismatch! "+Describe(\$holder)+" is not leader of "+dump_value(\$guild)+" - "+Describe(\$guild.leader)+" is.");
          \} else \{
            EmitTo(\$az, "Mismatch! "+Describe(\$holder)+" is not leader of "+dump_value(\$guild));
            \$guild.leader = \$holder;
          \}
        \}
      \} else \{
        if(\$guild.leader) \{
          EmitTo(\$az, dump_value(\$guild)+" - "+dump_value(\$guild."tmp:holders")+" - "+Describe(\$guild.leader));
        \} else \{
          EmitTo(\$az, dump_value(\$guild)+" - "+dump_value(\$guild."tmp:holders"));
        \}
      \}
      \$guild."tmp:holders" = nil;
    \}
  \}

  \$current = \$current."core:ur:sibling:next";
\} while (\$start != \$current);


EmitTo(\$az, "Done");

return TRUE;

    for(\$j=0;\$j\<sizeof(Arr(\$guild.ringlist));\$j++) \{
      string output;
      if(\$guild.ringlist[\$j]."guild:rank" \<= 3) \{
        /*output += ". Found a ring "+dump_value(\$guild."ringlist"[\$j]);*/
        /* find who has the ring */
        \$tmp = \$guild.ringlist[\$j];
        while(\$tmp) \{
          if(\$tmp."base:volition" \&\& \$tmp.guild == \$guild) \{
            output += " Owner is: "+dump_value(\$tmp);
            \$leader = \$tmp;
            \$holders \|= (\{ \$tmp \});
            \$count++;
/*            \$guild."leader" = \$tmp;*/
          \}
          if(\$tmp.homeowner \&\& \$tmp.homeowner.guild == \$guild) \{
            output += " Owner is: "+dump_value(\$tmp.homeowner);
            \$leader = \$tmp.homeowner;
            \$holders \|= (\{ \$tmp.homeowner \});
            \$count++;
/*            \$guild."leader" = \$tmp."homeowner";*/
          \}
          \$tmp = \$tmp."base:environment";
        \}
      \}
    \}





\$folder = "Chatters:IC";

/* run script in each character */
EmitTo(\$az, "Running character info script");
\$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");

\$cont = TRUE;
\$debug = nil;

for(\$z1=0;\$z1\<sizeof(\$folders)\&\&\$cont;\$z1++) \{
  \$delay(0.01, TRUE, "be6b");
  \$folder = "Chatters:IC:"+\$folders[\$z1];
  \$characters = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
  for(\$z2=0;\$z2\<sizeof(\$characters)\&\&\$cont;\$z2++) \{
    \$character = Obj("Chatters:IC:"+\$folders[\$z1]+":"+\$characters[\$z2]);
if(\$character."trait:religion" == "lutara" \&\& \$character.religionchange \&\& \$character.religionchange \< 1225100711) \{
 EmitTo(\$az, "Lutaran heathen found: "+dump_value(\$character));
 if(!\$character."secrets:doorways:vines_to_cave") \{
  if(!\$character."login:messages") \$character."login:messages" = (\{ \});
  \$character."login:messages" \|= (\{ "Last night you had a MOST unusual dream. You dreamt that a bough from some tree was growing strong and healthy, hanging over the walls of the Doloreaux compound. In your dream, you picked a leaf from that bough, and pressed it to your forehead." \});
 \}
\}

  \}
\}

return TRUE;




return TRUE;

\$folder = "Chatters:IC";

/* run script in each character */
EmitTo(\$az, "Running character info script");
\$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");

\$cont = TRUE;
\$debug = nil;

for(\$z1=0;\$z1\<sizeof(\$folders)\&\&\$cont;\$z1++) \{
  \$delay(0.01, TRUE, "be6a");
  \$folder = "Chatters:IC:"+\$folders[\$z1];
  \$characters = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
  for(\$z2=0;\$z2\<sizeof(\$characters)\&\&\$cont;\$z2++) \{
    \$character = Obj("Chatters:IC:"+\$folders[\$z1]+":"+\$characters[\$z2]);

if(\$character."skilldouble:updated" != 3) \{

/* count how many LPs they currently have */
EmitTo(\$az, "Updating "+Describe(\$character));
EmitTo(\$debug, "0");

\$skills = map_indices(prefixed_map(\$character."*", "skill:"));
for(\$i=0;\$i\<sizeof(\$skills);\$i++) \{
  EmitTo(\$debug, dump_value(\$skills[\$i])+": "+dump_value(Get(\$character, \$skills[\$i])));

  \$parentvalue = nil;
  \$parentvalue = Int(Get(\$character."core:ur:parent", \$skills[\$i]));
EmitTo(\$debug, "1");
  \$multiplier = 5;
  if(strlen(\$skills[\$i]) \> 12 \&\& \$skills[\$i][..12] == "skill:career:") \{
    EmitTo(\$debug, "Skipping this one");
    continue;
  \} else if(strlen(\$skills[\$i]) \> 10 \&\& \$skills[\$i][..10] == "skill:lang:") \{
    \$multiplier = 3;
  \}
EmitTo(\$debug, "1");

  /* get the value of this skill */
  \$value = Int(Get(\$character, \$skills[\$i]));
  \$lp = 0;

  for(\$j=Int(\$parentvalue)+1;\$j\<=\$value;\$j++) \{
   \$amount = \$j*\$multiplier;
   if(\$amount \> 100) \$amount = 100;
   \$lp += \$amount;
  \}
EmitTo(\$debug, "3");

  EmitTo(\$debug, "LP of "+dump_value(\$lp));
  \$value = Int(\$parentvalue);

  \$cost = \$multiplier;
  for(\$j=Int(\$parentvalue)+1;\$cost\<=\$lp \&\& \$j\<=24;\$j++) \{
   \$cost = \$j*\$multiplier;
   if(\$cost \> 50) \$cost = 50;
   if(\$multiplier == 3 \&\& \$cost \> 30) \$cost = 30;
   if(\$cost \<= \$lp) \{
    \$lp -= \$cost;
    \$value = \$j;
   \}
  \}


EmitTo(\$debug, "4");


  /* update skills and learning point pool */
  EmitTo(\$debug, "Should change to "+dump_value(\$value)+" and refund "+dump_value(\$lp)+" lps");
  Set(\$character, \$skills[\$i], \$value);
  \$character."student:learningpoints" += \$lp;

EmitTo(\$debug, "5");

\}

\$character."skilldouble:updated" = 3;
\}

  \}
\}

return TRUE;


/*EmitTo(\$az, "Updating parent object");
if(\$evoke) \{
 EmitTo(\$az, dump_value( "Ironclaw:Races:Animals:Ur"+capitalize(\$(raw-evoke)) ));
 \$parent = Obj("Ironclaw:Races:Animals:Ur"+capitalize(\$(raw-evoke)));
 \$skills = map_indices(prefixed_map(\$parent."*", "skill:"));
 for(\$i=0;\$i\<sizeof(\$skills);\$i++) \{
  EmitTo(\$az, dump_value(\$skills[\$i])+": "+dump_value(Get(\$parent, \$skills[\$i])));
  if(\$skills[\$i] == "skill:fatigue") continue;
  Set(\$parent, \$skills[\$i], nil);
 \}
 \$skills = map_indices(prefixed_map(\$parent."*", "career:"));
 for(\$i=0;\$i\<sizeof(\$skills);\$i++) \{
  EmitTo(\$az, dump_value(\$skills[\$i])+": "+dump_value(Get(\$parent, \$skills[\$i])));
  Set(\$parent, \$skills[\$i], nil);
 \}
 \$parent."trait:income" = nil;
\}
return TRUE;*/

/*if(\$evoke) \{
  \$value = Get(\$character, "skill:"+\$(raw-evoke));
  if(!\$value) \{
    EmitTo(\$az, "Couldn't find that skill!");
    return FALSE;
  \}

  \$multiplier = 5;
  if(strlen(\$(raw-evoke)) \>= 6 \&\& \$(raw-evoke)[..6] == "career:") \{
    \$multiplier = 15;
  \} else if(strlen(\$(raw-evoke)) \>= 4 \&\& \$(raw-evoke)[..4] == "lang:") \{
    \$multiplier = 3;
  \} else if(strlen(\$(raw-evoke)) \>= 9 \&\& \$(raw-evoke)[..9] == "knowledge:") \{
    \$multiplier = 2;
  \}

  if(\$value \< 1) \{
    \$cost = 0;
  \} else if(\$value == 1) \{
    \$cost = \$multiplier;
  \} else \{
    \$cost = (\$value - 1)*\$multiplier;
  \}

  EmitTo(\$az, \$(raw-evoke)+" value is "+dump_value(\$value));
  EmitTo(\$az, "Multiplier is "+dump_value(\$multiplier));
  EmitTo(\$az, "Cost of skill is "+dump_value(\$cost));
  if(TRUE) \{
    if(\$value \> 1) \{
      Set(\$character, "skill:"+\$(raw-evoke), \$value - 1);
    \} else \{
      Set(\$character, "skill:"+\$(raw-evoke), nil);
    \}
    EmitTo(\$az, "REFUNDED "+dump_value(\$cost));
  \}
  return FALSE;
\}*/



\$folder = "Chatters:IC";

/* run script in each character */
EmitTo(\$az, "Running character info script");
\$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");

\$cont = TRUE;
\$debug = nil;

for(\$z1=0;\$z1\<sizeof(\$folders)\&\&\$cont;\$z1++) \{
  \$delay(0.01, TRUE, "8033");
  \$folder = "Chatters:IC:"+\$folders[\$z1];
  \$characters = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
  for(\$z2=0;\$z2\<sizeof(\$characters)\&\&\$cont;\$z2++) \{
    \$character = Obj("Chatters:IC:"+\$folders[\$z1]+":"+\$characters[\$z2]);

if(\$character."skilldouble:updated" != 2) \{

/* count how many LPs they currently have */
EmitTo(\$az, "Updating "+Describe(\$character));
EmitTo(\$debug, "0");

\$pool = Int(\$character."student:learningpoints");
\$pool *= 2;

\$careers = 0;

\$skills = map_indices(prefixed_map(\$character."*", "skill:"));
for(\$i=0;\$i\<sizeof(\$skills);\$i++) \{
  /*EmitTo(\$az, dump_value(\$skills[\$i])+": "+dump_value(Get(\$character, \$skills[\$i])));*/
  if(\$skills[\$i] == "skill:fatigue") continue;

  \$parentvalue = nil;
  \$parentvalue = Get(\$character."core:ur:parent", \$skills[\$i]);
  if(sizeof(explode(\$skills[\$i], ":")) \>= 3) \{
   \$name = lower_case(explode(\$skills[\$i], ":")[2]);
  \} else \{
   \$name = "blah";
  \}
EmitTo(\$debug, "1");
  \$multiplier = 5;
  if(strlen(\$skills[\$i]) \> 12 \&\& \$skills[\$i][..12] == "skill:career:") \{
    \$multiplier = 15;
  \} else if(strlen(\$skills[\$i]) \> 10 \&\& \$skills[\$i][..10] == "skill:lang:") \{
    \$multiplier = 3;
  \} else if(strlen(\$skills[\$i]) \> 15 \&\& \$skills[\$i][..15] == "skill:knowledge:") \{
    \$multiplier = 2;
  \}
EmitTo(\$debug, "2");
  /* get the value of this skill */
  \$value = Int(Get(\$character, \$skills[\$i]));
  \$lp = 0;
  if(\$character."temp:career1" \&\& lower_case(\$character."temp:career1") == \$name) \{
   if(\$character."temp:career1" == \$character."temp:career2") \{
    for(\$j=5;\$j\<\$value;\$j++) \{
     \$amount = \$j*\$multiplier;
     if(\$amount \> 200) \$amount = 200;
     \$lp += \$amount;
    \}
   \} else \{
    for(\$j=4;\$j\<\$value;\$j++) \{
     \$amount = \$j*\$multiplier;
     if(\$amount \> 200) \$amount = 200;
     \$lp += \$amount;
    \}
   \}
  \} else if(\$character."temp:career2" \&\& lower_case(\$character."temp:career2") == \$name) \{
   if(\$value == 2) \{
    \$value = 3;
    Set(\$character, \$skills[\$i], 3);
   \}
   for(\$j=3;\$j\<\$value;\$j++) \{
    \$amount = \$j*\$multiplier;
    if(\$amount \> 200) \$amount = 200;
    \$lp += \$amount;
   \}
  \} else \{
   for(\$j=Int(\$parentvalue);\$j\<\$value;\$j++) \{
    \$amount = 0;
    if(\$j == 0) \{
     \$amount = \$multiplier;
    \} else \{
     \$amount = \$j*\$multiplier;
    \}
    if(\$amount \> 200) \$amount = 200;
    \$lp += \$amount;
   \}
  \}
EmitTo(\$debug, "3");

  /*EmitTo(\$az, "LP of "+dump_value(\$lp));*/
  \$lp *= 2;
  \$multiplier = 5;
  if(strlen(\$skills[\$i]) \> 12 \&\& \$skills[\$i][..12] == "skill:career:") \{
    \$multiplier = 10;
  \} else if(strlen(\$skills[\$i]) \> 10 \&\& \$skills[\$i][..10] == "skill:lang:") \{
    \$multiplier = 3;
  \}
  if(\$character."temp:career1" \&\& lower_case(\$character."temp:career1") == \$name) \{
   if(\$character."temp:career1" == \$character."temp:career2") \{
    \$start = 6;
    \$value = 5;
   \} else \{
    \$start = 5;
    \$value = 4;
   \}
  \} else if(\$character."temp:career2" \&\& lower_case(\$character."temp:career2") == \$name) \{
   \$start = 4;
   \$value = 3;
  \} else \{
   \$start = Int(\$parentvalue)+1;
   \$value = Int(\$parentvalue);
  \}

  \$cost = \$multiplier;
  for(\$j=\$start;\$cost\<=\$lp \&\& \$j\<=24;\$j++) \{
   \$cost = \$j * \$multiplier;
   if(\$cost \> 100) \$cost = 100;
   if(\$cost \<= \$lp) \{
    \$lp -= \$cost;
    \$value = \$j;
   \}
  \}
EmitTo(\$debug, "4");

  if(strlen(\$skills[\$i]) \> 12 \&\& \$skills[\$i][..12] == "skill:career:")
   \$careers += \$value;

  /* update skills and learning point pool */
  /*EmitTo(\$az, "Should change to "+dump_value(\$value)+" and refund "+dump_value(\$lp)+" lps");*/
  Set(\$character, \$skills[\$i], \$value);
  \$pool += \$lp;
EmitTo(\$debug, "5");

\}


/* update the learning points */
/*EmitTo(\$az, Describe(\$character)+" has "+dump_value(\$pool)+" learning points (previously "+dump_value(\$character."student:learningpoints")+")");*/
/*\$character."student:learningpoints" = \$pool;*/

if(\$careers \> 48)
  EmitTo(\$az, Describe(\$character)+" has TOO MANY CAREERS: "+dump_value(\$careers)+" - this needs to be reduced to 48.");

\$character."skilldouble:updated" = 2;
\}

  \}
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:press-dob">
         X[M] /* Gimli-Powered! Do not edit! Edit gimli:react-post:press-dob instead! */
string output;
int i, j;
mapping map;
output = "";
\$az = \$\{Chatters:AE:az:azrael\};
if(\$actor != \$az \&\& \$actor != \$\{Chatters:IC:si:sirazad\}) \{
 EmitTo(\$actor, "You are not authorized to use this remote. And by that, I mean you're not l33t enough.");
 return FALSE;
\}

\$command = explode(Str(\$(raw-evoke)), " ");

if(!\$(raw-evoke) \|\| !sizeof(\$command)) \{
 EmitTo(\$actor, "No command given");
 return TRUE;
\}


if(sizeof(\$command) \>= 2
 \&\& \$command[0] == "update"
 \&\& \$command[1] == "characters"
 ) \{
 /* run general script to do something to all characters */
 object char;


 \$results = ([ ]);
 \$char_list = (\{ \});


 EmitTo(\$actor, "Updating all PCs.");
 \$folder = "Chatters:IC";
 \$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");
 for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{
  \$delay(0.00001, TRUE, "2768");
  \$folder = "Chatters:IC:"+\$folders[\$i];
  /* EmitTo(\$actor, dump_value(\$folders[\$i])); */
  \$characters = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
  for(\$j=0;\$j\<sizeof(\$characters);\$j++) \{
    char = Obj("Chatters:IC:"+\$folders[\$i]+":"+\$characters[\$j]);

    /* PUT YOUR CODE HERE */
    if(char."tmp:event_idle_checking") EmitTo(\$actor, dump_value(char));
    char."tmp:event_idle_checking" = nil;
    /* char."status:dying" = nil; */
    
  \}
 \}


 EmitTo(\$actor, "PCs update done.");
 return TRUE;
\} else if(sizeof(\$command) \>= 2
 \&\& \$command[0] == "update"
 \&\& \$command[1] == "guilds"
 ) \{
 /* run general script to do something to all characters */
 object char;
 EmitTo(\$actor, "Updating all guilds.");
 \$folder = "Ironclaw:Guilds:";
 \$guilds = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
 for(\$j=0;\$j\<sizeof(\$guilds);\$j++) \{
  char = Obj("Ironclaw:Guilds:"+\$guilds[\$j]);
  /* PUT YOUR CODE HERE */
  if(char."npc:teacher") \{
    \$tmp = dump_value(char."npc:teacher");
    if(contains(\$tmp, "pickpocket"))
      EmitTo(\$actor, dump_value(char));
  \}
 \}
 EmitTo(\$actor, "Guilds update done.");
 return TRUE;

\} else if(sizeof(\$command) \>= 2
 \&\& \$command[0] == "skill"
 \&\& \$command[1] == "list"
 ) \{
 /* run general script to do something to all characters */
 object char;
 EmitTo(\$actor, "Searching PCs for skills.");
 \$allskills = ([ ]);
 \$folder = "Chatters:IC";
 \$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");
 for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{
  \$delay(0.00001, TRUE, "2769");
  \$folder = "Chatters:IC:"+\$folders[\$i];
  EmitTo(\$actor, dump_value(\$folders[\$i]));
  \$characters = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
  for(\$j=0;\$j\<sizeof(\$characters);\$j++) \{
   char = Obj("Chatters:IC:"+\$folders[\$i]+":"+\$characters[\$j]);
   /* PUT YOUR CODE HERE */
     \$skills = map_indices(prefixed_map(char."*", "skill:"));
     for(\$k=0;\$k\<sizeof(\$skills);\$k++) \{
       \$allskills[\$skills[\$k]] = 1;
     \}
  \}
 \}

 for(\$k=0;\$k\<sizeof(map_indices(\$allskills));\$k++)
   EmitTo(\$actor, dump_value(map_indices(\$allskills)[\$k]));

 EmitTo(\$actor, "PCs update done.");
 return TRUE;
\} else if(sizeof(\$command) \>= 2
 \&\& \$command[0] == "test"
 \&\& \$command[1] == "script"
 ) \{
  EmitTo(\$az, "Testing script");

/*  \$first = \$\{IronClaw:Props:Furniture:Container:Box:Sewing\}."core:ur:firstchild"; */

  \$children = (\{ \$\{Generic:UrBook\} \});
  while(sizeof(\$children)) \{
    /* EmitTo(\$actor, "Child: "+dump_value(\$children[0])); */
    \$first = \$children[0]."core:ur:firstchild";
    \$children -= (\{ \$children[0] \});
    
    if(!\$first) continue;
    /* EmitTo(\$actor, "First: "+dump_value(\$first)); */
    \$current = \$first;
    do \{
      /* if(\$current."core:ur:firstchild") \$children += (\{ \$current."core:ur:firstchild" \}); */
      \$children += (\{ \$current \});
    /* EmitTo(\$actor, dump_value(\$current)); */
    /* EmitTo(\$actor, dump_value(\$current."base:inventory")); */
      if(contains(lower_case(dump_value(\$current."trait:page00")), "sock")
      \|\| contains(lower_case(dump_value(\$current."trait:page01")), "sock")
      \|\| contains(lower_case(dump_value(\$current."trait:page02")), "sock")
      \|\| contains(lower_case(dump_value(\$current."trait:page03")), "sock")
      \|\| contains(lower_case(dump_value(\$current."trait:page04")), "sock")
      \|\| contains(lower_case(dump_value(\$current."trait:page05")), "sock")
      \|\| contains(lower_case(dump_value(\$current."trait:page06")), "sock")
      \|\| contains(lower_case(dump_value(\$current."trait:page07")), "sock")
      ) \{
        EmitTo(\$actor, "FOUND: "+dump_value(\$current));
      \}
    
      \$current = \$current."core:ur:sibling:next";
    \} while (\$first != \$current);
  \}
  EmitTo(\$actor, "Done!");
  return TRUE;


  while(\$first != \$next) \{
    \$current = \$next;
    \$next = \$next."core:ur:sibling:next";
    \$count++;
    
    EmitTo(\$az, dump_value(\$current));
    EmitTo(\$az, "INVENTORY");
    EmitTo(\$az, dump_value(\$current."base:inventory"));
    EmitTo(\$az, "-----------");
    
    if(\$owner = ironclaw::find_owner(\$object: \$current)) \{
      if(\$owner == -1) \{
        EmitTo(\$actor, "No owner for "+dump_value(\$current));
        /*Slay(\$current);
        continue;
      \}
      //\$count3++;
      //\$owner."trait:money" = Int(\$owner."trait:money")+Int(\$current."cash:value");
      //\$count4 += Int(\$next."cash:value");
      //Slay(\$current);
      */
      \} else \{
        EmitTo(\$actor, dump_value(\$current) + " - " + dump_value(\$owner));
      \}
    \}
  \}
  /*
  EmitTo(\$az, dump_value(\$count)+" coins checked");
  EmitTo(\$az, dump_value(\$count3)+" owners found");
  EmitTo(\$az, dump_value(\$count4)+" moved");
  EmitTo(\$az, "Script tested");
  */
  EmitTo(\$actor, "Check complete");
  return FALSE;


  \$count = 0;
  \$count2 = 0;
  \$count3 = 0;
  \$count4 = 0;
  \$first = nil /* defunct */;
  \$next = \$first."core:ur:sibling:next";
  while(\$first != \$next) \{
    \$count++;
    if(\$next."cash:balance") \{
      \$count2++;
      if(\$owner = ironclaw::find_owner(\$object: \$next)) \{
        if(\$owner == -1) \{
          /* This means that there is no owner - e.g. a deleted PC */
          EmitTo(\$actor, "No owner for "+dump_value(\$next));
          \$del = \$next;
          \$next = \$next."core:ur:sibling:next";
          Slay(\$del);
          continue;
        \}
        \$count3++;
        \$owner."trait:money" = Int(\$owner."trait:money")+Int(\$next."cash:balance");
        \$count4 += Int(\$next."cash:balance");
        \$next."cash:balance" = 0;
      \} else \{
        /*
        EmitTo(\$actor, "Unknown owner for "+dump_value(\$next));
        if(\$count2 \> \$count3+100) return TRUE;
        */
      \}
    \}
    \$next = \$next."core:ur:sibling:next";
  \}
  EmitTo(\$az, dump_value(\$count));
  EmitTo(\$az, dump_value(\$count2));
  EmitTo(\$az, dump_value(\$count3));
  EmitTo(\$az, dump_value(\$count4));
  EmitTo(\$az, "Script tested");
  return FALSE;

\} else if(sizeof(\$command) \>= 3
 \&\& \$command[0] == "run"
 \&\& \$command[1] == "daily"
 \&\& \$command[2] == "functions"
 ) \{
 /* run daily updating script */
 Call(\$\{Ironclaw:Lib:Characters:DailyFunctions\}, "run_daily_functions");
 return TRUE;
\} else if(sizeof(\$command) \>= 2
 \&\& \$command[0] == "update"
 \&\& \$command[1] == "injuries"
 ) \{
 /* run general script to do something to all characters */
 string description;
 \$object = \$\{Ironclaw:Races:Bodies:Mainbody\};
 EmitTo(\$actor, dump_value(\$object."base:details:local"));
 for(\$i=0;\$i\<sizeof(\$object."base:details:local");\$i++) \{
  EmitTo(\$actor, dump_value(\$object."base:details:local"[\$i]));
/*  EmitTo(\$actor, dump_value(Get(\$object, "details:"+\$object."base:details:local"[\$i]+":descriptions:look"))); */

  description = dump_value(Get(\$object, "details:"+\$object."base:details:local"[\$i]+":descriptions:look"));
  if(description != "nil") \{
  if(sscanf(description[4..], "%s \{? \| \$(this.combat:injury:%*s) \|It has \$(this.combat:injury:%*s).\}", description) == 3) \{
   description += " \$[injuries::show_injuries()]";
  \} else \{
   description = dump_value(Get(\$object, "details:"+\$object."base:details:local"[\$i]+":descriptions:look"))[4..];
  \}

  Set(\$object, "details:"+\$object."base:details:local"[\$i]+":descriptions:look", ParseXML(description));

  EmitTo(\$actor, dump_value(ParseXML(description)) );
  \}

  description = dump_value(Get(\$object, "details:"+\$object."base:details:local"[\$i]+":descriptions:examine"));
  if(description != "nil") \{
  if(sscanf(description[4..], "%s \{? \| \$(this.combat:injury:%*s) \|It has \$(this.combat:injury:%*s).\}", description) == 3) \{
   description += " \$[injuries::show_injuries()]";
  \} else \{
   description = dump_value(Get(\$object, "details:"+\$object."base:details:local"[\$i]+":descriptions:examine"))[4..];
  \}

  Set(\$object, "details:"+\$object."base:details:local"[\$i]+":descriptions:examine", ParseXML(description));

  EmitTo(\$actor, dump_value(ParseXML(description)) );
  \}


 \}
 EmitTo(\$actor, "Injuries update done.");
 return TRUE;
\} else if(sizeof(\$command) \>= 3
 \&\& \$command[0] == "get"
 \&\& \$command[1] == "favor"
 ) \{
 \$pc = lower_case(\$command[2]);
 if(\$pc = "nobles") \{
  \$pc = (\{ \});
  \$guild = \$\{Allegory:Guilds:italy\};
  for(\$i=0;\$i\<sizeof(\$guild.members);\$i++)
   if(\$guild.members[\$i]."rank:rank" \>= 9) \$pc \|= (\{ \$guild.members[\$i] \});
  \$guild = \$\{Allegory:Guilds:scotland\};
  for(\$i=0;\$i\<sizeof(\$guild.members);\$i++)
   if(\$guild.members[\$i]."rank:rank" \>= 9) \$pc \|= (\{ \$guild.members[\$i] \});
  \$guild = \$\{Allegory:Guilds:germany\};
  for(\$i=0;\$i\<sizeof(\$guild.members);\$i++)
   if(\$guild.members[\$i]."rank:rank" \>= 9) \$pc \|= (\{ \$guild.members[\$i] \});
  \$guild = \$\{Allegory:Guilds:france\};
  for(\$i=0;\$i\<sizeof(\$guild.members);\$i++)
   if(\$guild.members[\$i]."rank:rank" \>= 9) \$pc \|= (\{ \$guild.members[\$i] \});
 \}
 EmitTo(\$actor, dump_value(Call(\$\{Ironclaw:Lib:Favor:Mk2\}, "getfavorfromgroup", \$from: \$pc)));
 return TRUE;
\} else if(sizeof(\$command) \>= 3
 \&\& \$command[0] == "update"
 \&\& \$command[1] == "injurydesc"
 ) \{
 \$ob = Obj(\$command[2]);
 if(!\$ob) \{
  EmitTo(\$actor, "Unknown object");
  return TRUE;
 \}
 EmitTo(\$actor, "Updating injury descriptions on "+dump_value(\$ob)+".");
 \$arr = Arr(Get(\$ob, "base:details"));
 for(\$i=0;\$i\<sizeof(\$arr)\&\&\$i\<15;\$i++) \{
  if(Get(\$ob, "details:"+\$arr[\$i]+":description:look:local")) \{
   \$tmp = mixed_to_ascii(Get(\$ob, "details:"+\$arr[\$i]+":description:look:local"));
   \$result = sscanf(\$tmp, "%s\$[injuries::show_injuries()]%s", \$one, \$two);
   if(!\$result) \{
    \$result = sscanf(\$tmp, "%s\{? \| \$(this.combat:injury:"+\$arr[\$i]+") \|They have \$(this.combat:injury:"+\$arr[\$i]+").\}%s", \$one, \$two);
    Set(\$ob, "details:"+\$arr[\$i]+":description:look:local", ascii_to_mixed(Str(\$one)+"\$[injuries::show_injuries()]"+Str(\$two)));
   \}
   \$tmp = mixed_to_ascii(Get(\$ob, "details:"+\$arr[\$i]+":description:examine:local"));
   \$result = sscanf(\$tmp, "%s\$[injuries::show_injuries()]%s", \$one, \$two);
   if(!\$result) \{
    \$result = sscanf(\$tmp, "%s\{? \| \$(this.combat:injury:"+\$arr[\$i]+") \|They have \$(this.combat:injury:"+\$arr[\$i]+").\}%s", \$one, \$two);
    Set(\$ob, "details:"+\$arr[\$i]+":description:examine:local", ascii_to_mixed(Str(\$one)+"\$[injuries::show_injuries()]"+Str(\$two)));
   \}
  \}
 \}
 EmitTo(\$actor, "Update complete.");
 return TRUE;
\} else if(sizeof(\$command) \>= 2
 \&\& \$command[0] == "heal"
 \&\& \$command[1] == "injuries"
 ) \{
 object char;
 EmitTo(\$actor, "healing injuries on all PCs.");

 \$snames = (\{ \});
 \$pnames = (\{ \});
 \$adjectives = (\{ \});

 \$folder = "Chatters:IC";
 \$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");
 for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{
  \$delay(0.00001, TRUE, "573b");
  \$folder = "Chatters:IC:"+\$folders[\$i];
  EmitTo(\$actor, dump_value(\$folders[\$i]));
  \$characters = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
  for(\$j=0;\$j\<sizeof(\$characters);\$j++) \{
   char = Obj("Chatters:IC:"+\$folders[\$i]+":"+\$characters[\$j]);


   \$injuries = Match(char, nil, \$actor, "injured");
   for(\$k=0;\$k\<sizeof(\$injuries);\$k++) \{
    \$detail = NRefDetail(\$injuries[\$k]);

    Set(char, "details:"+\$detail+":sname:injury", nil);
    Set(char, "details:"+\$detail+":pname:injury", nil);
    Set(char, "details:"+\$detail+":pname:injuries", nil);
    Set(char, "details:"+\$detail+":adjective:injured", nil);

    Set(char, "details:"+\$detail+":sname:bruise", nil);
    Set(char, "details:"+\$detail+":pname:bruise", nil);
    Set(char, "details:"+\$detail+":pname:bruises", nil);
    Set(char, "details:"+\$detail+":adjective:bruised", nil);

    Set(char, "details:"+\$detail+":sname:cut", nil);
    Set(char, "details:"+\$detail+":pname:cut", nil);
    Set(char, "details:"+\$detail+":pname:cuts", nil);
    Set(char, "details:"+\$detail+":adjective:cut", nil);

    Set(char, "details:"+\$detail+":sname:sting", nil);
    Set(char, "details:"+\$detail+":pname:sting", nil);
    Set(char, "details:"+\$detail+":pname:stings", nil);
    Set(char, "details:"+\$detail+":adjective:stung", nil);

    Set(char, "details:"+\$detail+":sname:bandage", nil);
    Set(char, "details:"+\$detail+":pname:bandages", nil);
    Set(char, "details:"+\$detail+":adjective:bandaged", nil);

    Set(char, "details:"+\$detail+":sname:scratch", nil);
    Set(char, "details:"+\$detail+":pname:scratches", nil);
    Set(char, "details:"+\$detail+":adjective:scratched", nil);

    Set(char, "details:"+\$detail+":sname:bullet wound", nil);
    Set(char, "details:"+\$detail+":pname:bullet wound", nil);
    Set(char, "details:"+\$detail+":pname:bullet wounds", nil);
    Set(char, "details:"+\$detail+":adjective:shot", nil);

    Set(char, "details:"+\$detail+":sname:welt", nil);
    Set(char, "details:"+\$detail+":pname:welt", nil);
    Set(char, "details:"+\$detail+":pname:welts", nil);
    Set(char, "details:"+\$detail+":adjective:welted", nil);

    Set(char, "details:"+\$detail+":sname:bite", nil);
    Set(char, "details:"+\$detail+":pname:bites", nil);
    Set(char, "details:"+\$detail+":adjective:bitten", nil);

    \$snames \|= Arr(Get(char, "details:"+\$detail+":snames:local"));
    \$pnames \|= Arr(Get(char, "details:"+\$detail+":pnames:local"));
    \$adjectives \|= Arr(Get(char, "details:"+\$detail+":adjectives:local"));

   \}
/*   EmitTo(\$az, "Done!");
   EmitTo(\$az, dump_value(\$snames));
   EmitTo(\$az, dump_value(\$pnames));
   EmitTo(\$az, dump_value(\$adjectives));
   return FALSE;*/

   char."combat:damage" = nil;
   char."combat:fatigue" = nil;
   char."combat:injuries" = nil;
   char."combat:actions" = nil;
   char."combat:actions:current" = nil;
   char."combat:actions:queue" = nil;
   char."combat:defenceitems" = nil;
   char."combat:healing" = nil;
   char."combat:type" = nil;
   \$injuries = map_indices(prefixed_map(Get(char, "*"), "combat:injury"));
   for(\$k=0;\$k\<sizeof(\$injuries);\$k++)
    Set(char, \$injuries[\$k], nil);

  \}
 \}
 EmitTo(\$actor, "All PC injuries healed.");

 EmitTo(\$az, dump_value(\$snames));
 EmitTo(\$az, dump_value(\$pnames));
 EmitTo(\$az, dump_value(\$adjectives));

 return TRUE;
\} else if(sizeof(\$command) \>= 2
 \&\& \$command[0] == "update"
 \&\& \$command[1] == "careers"
 ) \{
 object char;
 EmitTo(\$actor, "Updating careers information for all PCs.");
 \$folder = "Chatters:IC";
 \$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");
 for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{
  \$delay(0.00001, TRUE, "573a");
  \$folder = "Chatters:IC:"+\$folders[\$i];
  EmitTo(\$actor, dump_value(\$folders[\$i]));
  \$characters = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
  for(\$j=0;\$j\<sizeof(\$characters);\$j++) \{
   char = Obj("Chatters:IC:"+\$folders[\$i]+":"+\$characters[\$j]);
   char."skill:career:test" = 10;
   char."skill:career:test" = nil;
  \}
 \}
 EmitTo(\$actor, "Careers info update done.");
 return TRUE;
\} else if(sizeof(\$command) \>= 4
 \&\& \$command[0] == "search"
 \&\& \$command[1] == "merry"
 ) \{
 object this_object;
 string *indices;

 \$searchstring = lower_case(implode(\$command[3..], " "));

 EmitTo(\$actor, "Searching for merry code in "+\$command[2]);
 EmitTo(\$actor, "Searching for \\""+\$searchstring+"\\"");

 \$folders_to_search = (\{ \$command[2] \});
 \$objects = (\{ \});
 \$found = (\{ \});
 while(sizeof(\$folders_to_search)) \{
   \$folder = \$folders_to_search[0];
   \$folders_to_search -= (\{ \$folders_to_search[0] \});
   /* EmitTo(\$actor, "Searching folder "+\$folder); */
   \$results = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");
   for(\$i=0;\$i\<sizeof(\$results);\$i++)
     \$folders_to_search += (\{ \$folder+\$results[\$i]+":" \});
   \$delay(0.001, TRUE, "8a76");

   \$results = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
   for(\$i=0;\$i\<sizeof(\$results);\$i++) \{
     this_object = Obj(\$folder+\$results[\$i]);
     \$scripts = prefixed_map(this_object."*", "merry:");
     indices = map_indices(\$scripts);
     for(\$j=0;\$j\<sizeof(indices);\$j++) \{
       \$result = sscanf(mixed_to_ascii(\$scripts[indices[\$j]], TRUE), "%*s"+\$searchstring+"%*s");
       if(\$result)
         /* EmitTo(\$actor, TAG(indices[\$j]+" - "+name(this_object), "Imp")); */
         \$found += (\{ indices[\$j]+" - "+name(this_object) \});
         if(sizeof(\$found) \> 50) \{
           EmitTo(\$actor, "Max results reached");
           break;
         \}
     \}
     \$delay(0.001, TRUE, "640b");
   \}
 \}

 EmitTo(\$actor, "Merry Search complete");
 if(!sizeof(\$found)) \{
   EmitTo(\$actor, "No items found that match your query.");
 \} else \{
   EmitTo(\$actor, "Summary:");
   for(\$i=0;\$i\<sizeof(\$found);\$i++) \{
     EmitTo(\$actor, TAG(\$found[\$i], "Imp"));
     \$delay(0.001, TRUE, "583c");
   \}
 \}


 return TRUE;
\} else if(sizeof(\$command) \>= 2
 \&\& \$command[0] == "update"
 \&\& \$command[1] == "tokens"
 ) \{
 object char;
 EmitTo(\$actor, "Updating old tokens for all guilds.");
 \$folder = "Ironclaw:Guilds";
 \$guilds = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");

 \$token_types = (\{ \});

 for(i=0;i\<sizeof(\$guilds);i++) \{
  \$guild = Obj("Ironclaw:Guilds:"+\$guilds[i]);
  EmitTo(\$az, "Updating "+\$guilds[i]);

  /* add this guild's tokens to the list */
  /*EmitTo(\$az, dump_value( map_indices(prefixed_map(Get(\$guild, "*"), "token")) ));*/
  \$token_types \|= map_indices(prefixed_map(Get(\$guild, "*"), "token"));
  if(member("tokens:teacher", map_indices(prefixed_map(Get(\$guild, "*"), "token"))))
   EmitTo(\$az, "THIS GUILD! THIS ONE HERE! ALERT! ALERT!");

  /* convert old tokens to new */
  if(\$guild."tokens:teacher") \{
   \$guild."tokens:academic" = Int(\$guild."tokens:academic") + Int(\$guild."tokens:teacher");
  \}
  \$guild."tokens:teacher" = nil;
  if(\$guild."tokens:assassin") \{
   \$guild."tokens:subterfuge" = Int(\$guild."tokens:subterfuge") + Int(\$guild."tokens:assassin");
  \}
   \$guild."tokens:assassin" = nil;
  if(\$guild."tokens:soldier") \{
   \$guild."tokens:martial" = Int(\$guild."tokens:martial") + Int(\$guild."tokens:soldier");
  \}
   \$guild."tokens:soldier" = nil;
  if(\$guild."tokens:guard") \{
   \$guild."tokens:martial" = Int(\$guild."tokens:martial") + Int(\$guild."tokens:guard");
  \}
   \$guild."tokens:guard" = nil;
  if(\$guild."tokens:mercenary") \{
   \$guild."tokens:martial" = Int(\$guild."tokens:martial") + Int(\$guild."tokens:mercenary");
  \}
   \$guild."tokens:mercenary" = nil;
  if(\$guild."tokens:pirate") \{
   \$guild."tokens:martial" = Int(\$guild."tokens:martial") + Int(\$guild."tokens:pirate");
  \}
   \$guild."tokens:pirate" = nil;
  if(\$guild."tokens:sailor") \{
   \$guild."tokens:martial" = Int(\$guild."tokens:martial") + Int(\$guild."tokens:sailor");
  \}
   \$guild."tokens:sailor" = nil;

 \}
 EmitTo(\$actor, "Token update finished.");
 EmitTo(\$az, dump_value(\$token_types));
 return TRUE;
\} else if(sizeof(\$command) \>= 2
 \&\& \$command[0] == "favor"
 \&\& \$command[1] == "status"
 ) \{
 /* run general script to do something to all characters */
 object char;
 EmitTo(\$actor, "Gathering favor info");

 \$favor_info = ([ ]);

 /* only recount favor if it's been more than an hour since last count */
 if(Int(this."tmp:favor_info:timestamp")+60*60 \< time()) \{
  \$folder = "Chatters:IC";
  \$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");
  for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{
   \$delay(0.00001, TRUE, "cf6f");
   \$folder = "Chatters:IC:"+\$folders[\$i];
   EmitTo(\$actor, dump_value(\$folders[\$i]));
   \$characters = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
   for(\$j=0;\$j\<sizeof(\$characters);\$j++) \{
    char = Obj("Chatters:IC:"+\$folders[\$i]+":"+\$characters[\$j]);
    /* PUT YOUR CODE HERE */
    if(char."trait:favor") \{
     if(!char."rank:rank") char."rank:rank" = 3;
     \$favor_info[char."rank:rank"] = Arr(\$favor_info[char."rank:rank"]);
     \$favor_info[char."rank:rank"] \|= (\{ (\{ char, char."trait:favor" \}) \});
    \}
   \}
  \}
  EmitTo(\$actor, "Favor update done.");
  this."tmp:favor_info" = \$favor_info;
  this."tmp:favor_info:timestamp" = time();
 \} else \{
  \$favor_info = this."tmp:favor_info";
 \}
 /*EmitTo(\$actor, dump_value(\$favor_info));*/
 /* sort through the favor info to display it */
 for(\$i=0;\$i\<sizeof(map_indices(\$favor_info));\$i++) \{
  \$rank = \$favor_info[map_indices(\$favor_info)[\$i]];
  EmitTo(\$actor, "Rank "+dump_value(map_indices(\$favor_info)[\$i])+": "+dump_value(sizeof(\$rank))+" members.");
  /* sort everyone in this rank */
  if(sizeof(\$rank) \> 1) \{
   for(\$j=1;\$j\<sizeof(\$rank);\$j++) \{
    if(\$rank[\$j-1][1] \> \$rank[\$j][1]) \{
     /*EmitTo(\$actor, "Switching "+dump_value(\$rank[\$j-1])+" and "+dump_value(\$rank[\$j]));*/
     \$tmp = \$rank[\$j-1];
     \$rank[\$j-1] = \$rank[\$j];
     \$rank[\$j] = \$tmp;
     \$j = 0;
    \}
   \}
  \}
  \$tmp = nil;
  \$list = "";
  for(\$j=0;\$j\<sizeof(\$rank);\$j++) \{
   if(\$rank[\$j][1] != \$tmp) \{
    \$tmp = \$rank[\$j][1];
    if(\$list != "")
     EmitTo(\$actor, \$list);
    \$list = dump_value(\$rank[\$j][1]);
   \}
   \$char = \$rank[\$j][0];
   if(Int(\$char."cdat:lastlogin")+60*60*24*31 \> time()) \{
    \$list += ", "+Str(\$char."skotos:charname");
    if(\$char."trait:favor:promotion") \$list += " (Already awaiting promotion)";
    if(\$char."trait:favor:demotion") \$list += " (Risking demotion)";
   \}

  \}
  if(\$list != "") \{
   EmitTo(\$actor, \$list);
   \$list = "";
  \}

  /*EmitTo(\$actor, dump_value(\$rank));*/
 \}
 return TRUE;
\} else if(sizeof(\$command) \>= 2
 \&\& \$command[0] == "check"
 \&\& \$command[1] == "favor"
 ) \{
 /* run general script to do something to all characters */
 object char;
 EmitTo(\$actor, "Gathering favor info");

 \$favored = ([ ]);

 \$folder = "Chatters:IC";
 \$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");
 for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{
  \$delay(0.00001, TRUE, "cf6z");
  \$folder = "Chatters:IC:"+\$folders[\$i];
  /* EmitTo(\$actor, dump_value(\$folders[\$i])); */
  \$characters = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
  for(\$j=0;\$j\<sizeof(\$characters);\$j++) \{
   char = Obj("Chatters:IC:"+\$folders[\$i]+":"+\$characters[\$j]);
   /* PUT YOUR CODE HERE */
   if(char."favor:giving") \{
    /* EmitIn(\$actor."base:environment", dump_value(char."skotos:playercapname")+ " giving "+dump_value(char."favor:giving")); */
    if(!char."loyalty:name") \{
      EmitIn(\$actor."base:environment", dump_value(char."skotos:playercapname")+ " isn't loyal to any groups yet. Can't give favor");
    \} else \{
      for(\$k=0;\$k\<sizeof(map_indices(char."favor:giving"));\$k++) \{
        \$targ = map_indices(char."favor:giving")[\$k];
        if(!\$favored[\$targ]) \$favored[\$targ] = ([ ]);
        if(!\$favored[\$targ][char."loyalty:name"]) \$favored[\$targ][char."loyalty:name"] = 0;
      
        if(char."favor:giving"[\$targ] \> 0) \$favored[\$targ][char."loyalty:name"]++;
        if(char."favor:giving"[\$targ] \< 0) \$favored[\$targ][char."loyalty:name"]--;
      \}
    \}
   \}
  \}
 \}
 EmitTo(\$actor, "Favor update done.");
 for(\$i=0;\$i\<sizeof(map_indices(\$favored));\$i++) \{
 
   char = Obj(map_indices(\$favored)[\$i]);
   
   if(!char."skotos:playercapname" \&\& char."skotos:charname") char."skotos:playercapname" = capitalize(char."skotos:charname");
   
   EmitIn(\$actor."base:environment", char."skotos:playercapname" + ":");
   
   for(\$j=0;\$j\<sizeof(map_indices(\$favored[name(char)]));\$j++) \{
     \$value = \$favored[name(char)][map_indices(\$favored[name(char)])[\$j]];
     EmitIn(\$actor."base:environment", "- "+map_indices(\$favored[name(char)])[\$j]+": "+\$value);
   \}
   
 \}
 /* EmitTo(\$actor, dump_value(\$favored)); */
 return TRUE;
\} else if(sizeof(\$command) \>= 2
 \&\& \$command[0] == "clear"
 \&\& \$command[1] == "vp"
 ) \{
 EmitTo(\$actor, "Clearing Virtual Place data");
 \$room = \$\{orcsuit:Lib:vp:testing:swamp_room\};
 \$data = \$\{orcsuit:Lib:vp:testing:swampvp\};
 \$count = 0;
 while(\$room."core:ur:firstchild" \&\& \$count \< 10) \{
  EmitTo(\$actor, dump_value(\$room."core:ur:firstchild"));
  Slay(\$room."core:ur:firstchild");
  \$count++;
 \}
 EmitTo(\$actor, "Room cleared");
 \$data.runprocess = \$data.nextprocess;
 EmitTo(\$actor, "runprocess reset");
 return FALSE;
\} else if(sizeof(\$command) \>= 2
 \&\& \$command[0] == "favor"
 \&\& \$command[1] == "broadcast"
 ) \{
 /* set up a repeating (drifting) broadcast */
 /* let's say, about every 12 hours? */
 \$id = random(1000);
 this."broadcast:favor_reminder" = \$id;
 while(\$this."broadcast:favor_reminder" == \$id) \{
  /* gather a list of logged on players and send message */
  \$message = "[Broadcast] Don't forget to use the new, very important @favor/@disfavor commands. See http://forum.skotos.net/showthread.php?t=74537 for more info.";
  \$players = common::wholist();
  for(\$i=0;\$i\<sizeof(\$players);\$i++)
   EmitTo(\$players[\$i], \$message);
\$id = "turn it off!";
EmitTo(nil /* defunct */, "Favor emitter disabled!");
  /* wait a bit more than 12 hours before the next message */
  \$delay(60*60*12+60*random(120), TRUE, "2848");

 \}
 return TRUE;
\} else if(sizeof(\$command) \>= 2
 \&\& \$command[0] == "update"
 \&\& \$command[1] == "sync"
 ) \{
 if(sizeof(\$command) \<= 2) \{
  EmitTo(\$actor, "Format: update sync woe:name (you can specify either an object or directory)");
  return FALSE;
 \}
 EmitTo(\$actor, "Updating synced information");

 /* is it an object? */
 \$startob = Obj(\$command[2]);

 /* look through the directory, updating all objects */
 if(\$startob) \{
  \$folders_to_check = (\{ \});
 \} else \{
  \$folders_to_check = (\{ \$command[2] \});
 \}
 while(sizeof(\$folders_to_check) \|\| \$startob) \{
  \$delay(0.01, TRUE, "b3d0");
  if(!\$startob) \{
   \$folder = \$folders_to_check[0];
   EmitTo(\$actor, dump_value(\$folder));
   \$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");
   for(i=0;i\<sizeof(\$folders);i++)
    \$folders_to_check += (\{ \$folder+":"+\$folders[i] \});
   \$folders_to_check -= (\{ \$folders_to_check[0] \});
   \$objects = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
  \} else \{
   \$folder = "";
   \$objects = (\{ name(\$startob) \});
   \$startob = nil;
  \}
  for(\$j=0;\$j\<sizeof(\$objects);\$j++) \{
   \$ob = Obj(\$folder+":"+\$objects[\$j]);
   if(!\$ob) \{
    chat::log(\$log: "3\|Error updating synced objects - Invalid object: "+Str(\$folder)+":"+Str(\$objects[\$j])+".");
    return FALSE;
   \}

   \$properties = map_indices(Get(\$ob, "*"));
   for(i=0;i\<sizeof(\$properties);i++) \{
    \$my_prop = \$properties[i];
    \$my_string = dump_value(Get(\$ob, \$my_prop));
    \$my_type = typeof(Get(\$ob, \$my_prop));

    /* does this property have anything that looks like it needs updating? */
    if(sscanf(\$my_string, "%*s\<MOVED:%*s") == 2) \{
     /* Yes, looks like we need to do an update */
     while(sscanf(\$my_string, "%s\<MOVED:%*d-%*d:%s\>%s", \$one, \$two, \$three) == 5) \{
      if(!Obj(\$two)) \{
       chat::log(\$log: "3\|Error updating synced objects - "+Str(\$two)+" does not exist. Found in "+dump_value(\$ob)+" - "+\$my_prop+". Please resolve manually.");
       return FALSE;
      \}
      \$my_string = \$one+"\<"+\$two+"\>"+\$three;
     \}
     if(typeof(ascii_to_mixed(\$my_string)) != \$my_type) \{
      chat::log(\$log: "3\|Error updating synced objects - Type mismatch when converting "+\$my_prop+" in "+dump_value(\$ob)+". Please resolve manually.");
      return FALSE;
     \}
     Set(\$ob, \$my_prop, ascii_to_mixed(\$my_string));
    \}
   \}

  \}
 \}
 EmitTo(\$actor, "Sync update done");
 return TRUE;

 \$ob = Obj(\$command[2]);
 if(!\$ob) \{
  EmitTo(\$actor, "Invalid object.");
  return FALSE;
 \}

 \$properties = map_indices(Get(\$ob, "*"));
 for(i=0;i\<sizeof(\$properties);i++) \{
  \$my_prop = \$properties[i];
  \$my_string = dump_value(Get(\$ob, \$my_prop));
  \$my_type = typeof(Get(\$ob, \$my_prop));

  /* does this property have anything that looks like it needs updating? */
  if(sscanf(\$my_string, "%*s\<MOVED:%*s") == 2) \{
   /* Yes, looks like we need to do an update */
   while(sscanf(\$my_string, "%s\<MOVED:%*d-%*d:%s\>%s", \$one, \$two, \$three) == 5) \{
    if(!Obj(\$two)) \{
     chat::log(\$log: "3\|Error updating synced objects - "+Str(\$two)+" does not exist. Found in "+dump_value(\$ob)+" - "+\$my_prop+". Please resolve manually.");
     return FALSE;
    \}
    \$my_string = \$one+"\<"+\$two+"\>"+\$three;
   \}
   if(typeof(ascii_to_mixed(\$my_string)) != \$my_type) \{
    chat::log(\$log: "3\|Error updating synced objects - Type mismatch when converting "+\$my_prop+" in "+dump_value(\$ob)+". Please resolve manually.");
    return FALSE;
   \}
   Set(\$ob, \$my_prop, ascii_to_mixed(\$my_string));
  \}
 \}

 EmitTo(\$actor, "Sync update done");
 return TRUE;
\} else if(sizeof(\$command) \>= 2
 \&\& \$command[0] == "test"
 \&\& \$command[1] == "money"
 ) \{
 /* run general script to do something to all characters */
 object char;

 EmitTo(\$actor, "Testing money stuff");
 \$amount = 0;
 \$folder = "Chatters:IC";
 \$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");
 for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{
  \$delay(0.00001, TRUE, "2284");
  \$folder = "Chatters:IC:"+\$folders[\$i];
  /* EmitTo(\$actor, dump_value(\$folders[\$i])); */
  \$characters = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
  for(\$j=0;\$j\<sizeof(\$characters);\$j++) \{
   char = Obj("Chatters:IC:"+\$folders[\$i]+":"+\$characters[\$j]);
   /* PUT YOUR CODE HERE */
   /*  EmitTo(\$actor, dump_value(char)); */
   if(Int(char."cdat:lastlogin")+60*60*24*5 \< time()) \{
     \$income = Int(char."trait:income")+Int(char."trait:extraincome");
      if(Int(char."trait:money") \< \$income)
       \$amount += \$income;
   \}
  \}
 \}

 EmitTo(\$actor, "Finished testing money");
 EmitTo(\$actor, "Total amount earned: "+Str(\$amount/100));
\} else if(sizeof(\$command) \>= 4
 \&\& \$command[0] == "give"
 \&\& \$command[1] == "influence"
 ) \{
  EmitTo(\$actor, "Giving influence");
  
  \$char = Obj("Chatters:IC:"+lower_case(\$command[2])[..1]+":"+lower_case(\$command[2]));
  if(!\$char) \{ EmitTo(\$actor, "Couldn't find "+\$command[2]); return TRUE; \}
  \$points = Int(\$command[3]);
  if(!\$points) \{EmitTo(\$actor, "Unknown points "+\$command[3]); return TRUE;\}
  
 
  
  \$group = \$char."loyalty:group";
  if(!\$group) \$group = "rinaldi";

  EmitTo(\$actor, "Group is: "+\$group);
  
  EmitTo(\$actor, dump_value(Int(Get(\$char, "rank:influence:"+\$group))));
  Set(\$char, "rank:influence:"+\$group, Int(Get(\$char, "rank:influence:"+\$group))+\$points);
  EmitTo(\$actor, dump_value(Int(Get(\$char, "rank:influence:"+\$group))));
    
  
  return TRUE;
\} else if(sizeof(\$command) \>= 2
 \&\& \$command[0] == "tally"
 \&\& \$command[1] == "events"
 ) \{
 /* run general script to do something to all characters */
 object char;

 EmitTo(\$actor, "Counting events points");
 \$results = ([ ]);
 \$amount = 0;
 \$folder = "Chatters:IC";
 \$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");
 for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{
  \$delay(0.00001, TRUE, "c4bc");
  \$folder = "Chatters:IC:"+\$folders[\$i];
  /* EmitTo(\$actor, dump_value(\$folders[\$i])); */
  \$characters = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
  for(\$j=0;\$j\<sizeof(\$characters);\$j++) \{
   char = Obj("Chatters:IC:"+\$folders[\$i]+":"+\$characters[\$j]);
   /* PUT YOUR CODE HERE */
   /*  EmitTo(\$actor, dump_value(char)); */
   if(char."event:points") \{
     \$name = char."skotos:playercapname";
     if(!\$name) \$name = char."skotos:charname";
     if(!\$name) \$name = Describe(char);
     \$results[\$name] = sizeof(map_indices(char."event:points"));
   \}
  \}
 \}

 EmitTo(\$actor, "Finished tally");
 EmitTo(\$actor, dump_value(\$results));
\}

EmitTo(\$actor, "Unknown command");
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:prod-dob">
         X[M] /* TMP VALUES */
\$db = \$\{Ironclaw:Lib:Teaching:SkillsDB\};

\$az = \$\{Chatters:AE:az:azrael\};
\$folder = "Chatters:IC";
EmitTo(\$az, "Character update started");
\$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");
for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{
  \$folder = "Chatters:IC:"+\$folders[\$i];
  \$characters = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
  for(\$j=0;\$j\<sizeof(\$characters);\$j++) \{
    \$char = Obj("Chatters:IC:"+\$folders[\$i]+":"+\$characters[\$j]);
    /* CODE GOES HERE */
    
    \$arr = map_indices(prefixed_map(\$char."*", "skill:"));
    for(\$k=0;\$k\<sizeof(\$arr);\$k++) \{
     if(explode(\$arr[\$k], ":")[1] != "career")
      Set(\$db, \$arr[\$k], ([ ]));
    \}
    
    \$delay(0.002, TRUE, "8ea5");
  \}
\}
EmitTo(\$az, "Character update done");
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:set-what">
         X[M] EmitTo(\$actor, "Setting remote.");
if(!this.setting)
\{
  this.setting = "time/morning";
  EmitTo(\$actor, "You set your remote to morning.");
\} else \{
  if(this.setting == "time/morning")
  \{
    this.setting = "time/midday";
    EmitTo(\$actor, "You set your remote to midday.");
  \} else if(this.setting == "time/midday")
  \{
    this.setting = "time/dusk";
    EmitTo(\$actor, "You set your remote to dusk.");
  \} else if(this.setting == "time/dusk")
  \{
    this.setting = "time/midnight";
    EmitTo(\$actor, "You set your remote to midnight.");
  \} else if(this.setting == "time/midnight")
  \{
    this.setting = "time/morning";
    EmitTo(\$actor, "You set your remote to morning.");
  \} else \{
    this.setting = "time/morning";
    EmitTo(\$actor, "You set your remote to morning.");
  \}
\}
\$this."base:environment" = \$actor;
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:shove-dob">
         X[M] EmitTo(\$actor, "Clearing searching mappings.");
\$roomlist = Get(\$\{Ironclaw:Systems:Time:TimeCounter\}, "roomlist");

/*\$roomlist = (\{ \$\{IronClaw:Rooms:Backstage:PrivateMeetings\} \});*/

EmitTo(\$actor, dump_value(\$roomlist));

\$roomlist -= (\{ nil \});

for(\$counter = 0; \$counter \< sizeof(\$roomlist); \$counter++)
\{
\$delay(1, TRUE, "0a63");
EmitTo(\$actor, "Getting properties for... "+dump_value(\$roomlist[\$counter]));
  \$searchlist = prefixed_map(\$roomlist[\$counter]."*", "searching:");
  \$indices = map_indices(\$searchlist);
  for(\$i=0;\$i\<sizeof(\$indices);\$i++) \{
    if(typeof(\$searchlist[\$indices[\$i]]) == T_MAPPING) \{
      EmitTo(\$actor, dump_value(\$searchlist[\$indices[\$i]]));
      \$thismapping = \$searchlist[\$indices[\$i]];
      \$thisindex = map_indices(\$thismapping);
      for(\$j=0;\$j\<sizeof(\$thisindex);\$j++) \{
        EmitTo(\$actor, dump_value(\$thismapping[\$thisindex[\$j]]));
        \$items = \$thismapping[\$thisindex[\$j]];
        for(\$k=0;\$k\<sizeof(\$items);\$k++) \{
          if(\$items[\$k])
            Slay(\$items[\$k]);
        \}
      \}
      Set(\$roomlist[\$counter], \$indices[\$i], nil);
    \}
  \}
\}
EmitTo(\$actor, "Done clearing searching mappings.");

return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1103000566, "tonyd", "E", 1103000641, "tonyd", "E", 1103000704, "tonyd", "E", 1108464004, "tonyd", "X", 1108464078, "tonyd", "E", 1108464240, "tonyd", "E", 1108464284, "tonyd", "E", 1108464309, "tonyd", "E", 1108464384, "tonyd", "E", 1108464412, "tonyd", "E", 1108776269, "tonyd", "E", 1108776367, "tonyd", "E", 1108784349, "tonyd", "E", 1108784541, "tonyd", "E", 1108784772, "tonyd", "E", 1111369135, "tonyd", "P", 1111369166, "tonyd", "P", 1111369201, "tonyd", "P", 1111369235, "tonyd", "P", 1120716377, "tonyd", "E", 1120716430, "tonyd", "E", 1120716496, "tonyd", "E", 1120716609, "tonyd", "E", 1120716702, "tonyd", "E", 1141016631, "tonyd", "P", 1141016692, "tonyd", "P", 1141018730, "tonyd", "P", 1141018751, "tonyd", "P", 1141018866, "tonyd", "P", 1141019458, "tonyd", "P", 1141019725, "tonyd", "P", 1167099507, "tonyd", "E", 1167788113, "tonyd", "P", 1167788133, "tonyd", "P", 1167788199, "tonyd", "P", 1167788321, "tonyd", "P", 1167788393, "tonyd", "P", 1167788522, "tonyd", "P", 1167788645, "tonyd", "P", 1167788663, "tonyd", "P", 1167788692, "tonyd", "P", 1167788744, "tonyd", "P", 1167788776, "tonyd", "P", 1167788785, "tonyd", "P", 1167788815, "tonyd", "P", 1167788859, "tonyd", "P", 1167788876, "tonyd", "P", 1167788931, "tonyd", "P", 1167789007, "tonyd", "P", 1167789093, "tonyd", "P", 1167789169, "tonyd", "P", 1177010564, "tonyd", "P", 1177010574, "tonyd", "P", 1177010905, "tonyd", "P", 1177010919, "tonyd", "P", 1177011156, "tonyd", "P", 1177011828, "tonyd", "P", 1177011930, "tonyd", "P", 1177011988, "tonyd", "P", 1177012146, "tonyd", "P", 1177012177, "tonyd", "P", 1177012217, "tonyd", "P", 1177012286, "tonyd", "P", 1177012342, "tonyd", "P", 1177012372, "tonyd", "P", 1177012387, "tonyd", "P", 1177012500, "tonyd", "P", 1177012540, "tonyd", "P", 1177012590, "tonyd", "P", 1177478566, "tonyd", "E", 1177478781, "tonyd", "P", 1177478812, "tonyd", "P", 1177478844, "tonyd", "P", 1190955325, "tonyd", "P", 1190955344, "tonyd", "P", 1190955363, "tonyd", "P", 1190955551, "tonyd", "P", 1190955767, "tonyd", "P", 1190957273, "tonyd", "P", 1190957285, "tonyd", "P", 1190957307, "tonyd", "P", 1190957338, "tonyd", "P", 1190957349, "tonyd", "P", 1190957372, "tonyd", "P", 1190957424, "tonyd", "P", 1190957458, "tonyd", "P", 1190957470, "tonyd", "P", 1190957530, "tonyd", "P", 1192239592, "tonyd", "P", 1192239690, "tonyd", "P", 1192239700, "tonyd", "P", 1192239735, "tonyd", "P", 1192239770, "tonyd", "P", 1192239780, "tonyd", "P", 1192239794, "tonyd", "P", 1192239847, "tonyd", "P", 1192239997, "tonyd", "P", 1192240060, "tonyd", "P", 1192240117, "tonyd", "P", 1192240171, "tonyd", "P", 1192243872, "tonyd", "P", 1192318531, "tonyd", "P", 1192318558, "tonyd", "P", 1192318698, "tonyd", "P", 1192318996, "tonyd", "P", 1192319494, "tonyd", "P", 1192319574, "tonyd", "P", 1192319705, "tonyd", "P", 1192319854, "tonyd", "P", 1192320081, "tonyd", "P", 1192320800, "tonyd", "P", 1192322025, "tonyd", "P", 1192322105, "tonyd", "P", 1192334058, "tonyd", "P", 1192334200, "tonyd", "P", 1192334333, "tonyd", "P", 1192334452, "tonyd", "P", 1192334756, "tonyd", "P", 1192334765, "tonyd", "P", 1192334800, "tonyd", "P", 1192334917, "tonyd", "P", 1192334939, "tonyd", "P", 1192334969, "tonyd", "P", 1192335007, "tonyd", "P", 1192335055, "tonyd", "P", 1192335101, "tonyd", "P", 1192335215, "tonyd", "P", 1192335384, "tonyd", "P", 1192335677, "tonyd", "P", 1192335765, "tonyd", "P", 1192335776, "tonyd", "P", 1192335787, "tonyd", "P", 1192335801, "tonyd", "P", 1192335937, "tonyd", "P", 1192335970, "tonyd", "P", 1192336005, "tonyd", "P", 1192336069, "tonyd", "P", 1192336368, "tonyd", "P", 1192336404, "tonyd", "P", 1192336429, "tonyd", "P", 1192336475, "tonyd", "P", 1192598537, "tonyd", "P", 1195082664, "tonyd", "P", 1195083070, "tonyd", "P", 1195083079, "tonyd", "P", 1195083132, "tonyd", "P", 1195083199, "tonyd", "P", 1195083231, "tonyd", "P", 1195083304, "tonyd", "P", 1195083319, "tonyd", "P", 1195083339, "tonyd", "P", 1195083444, "tonyd", "P", 1195083472, "tonyd", "P", 1195084105, "tonyd", "P", 1199694179, "tonyd", "P", 1199694253, "tonyd", "P", 1199694463, "tonyd", "P", 1199694779, "tonyd", "P", 1199694798, "tonyd", "P", 1199694922, "tonyd", "P", 1199694963, "tonyd", "P", 1199694992, "tonyd", "P", 1199695026, "tonyd", "P", 1199695055, "tonyd", "P", 1199695067, "tonyd", "P", 1199695114, "tonyd", "P", 1199695138, "tonyd", "P", 1199695170, "tonyd", "P", 1199695282, "tonyd", "P", 1199695372, "tonyd", "P", 1199695476, "tonyd", "P", 1199695514, "tonyd", "P", 1199695639, "tonyd", "P", 1199695701, "tonyd", "P", 1199695774, "tonyd", "P", 1199695792, "tonyd", "P", 1199695833, "tonyd", "P", 1199695901, "tonyd", "P", 1199696037, "tonyd", "P", 1199696102, "tonyd", "P", 1199696290, "tonyd", "P", 1199696430, "tonyd", "P", 1199696519, "tonyd", "P", 1199696610, "tonyd", "P", 1199696619, "tonyd", "P", 1199696731, "tonyd", "P", 1199696802, "tonyd", "P", 1199697121, "tonyd", "P", 1199697214, "tonyd", "P", 1199697254, "tonyd", "P", 1199697269, "tonyd", "P", 1199697344, "tonyd", "P", 1199697349, "tonyd", "P", 1199697563, "tonyd", "P", 1199697668, "tonyd", "P", 1199697740, "tonyd", "P", 1200710294, "tonyd", "P", 1200710371, "tonyd", "P", 1203302903, "tonyd", "P", 1203302918, "tonyd", "P", 1203302974, "tonyd", "P", 1203303020, "tonyd", "P", 1203303030, "tonyd", "P", 1203303086, "tonyd", "P", 1203303143, "tonyd", "P", 1203303199, "tonyd", "P", 1203304230, "tonyd", "P", 1203304248, "tonyd", "P", 1203304271, "tonyd", "P", 1203304288, "tonyd", "P", 1203305716, "tonyd", "P", 1203306349, "tonyd", "P", 1203318468, "tonyd", "P", 1203318616, "tonyd", "P", 1203318654, "tonyd", "P", 1203318666, "tonyd", "P", 1203318684, "tonyd", "P", 1203318729, "tonyd", "P", 1203319658, "tonyd", "P", 1203320941, "tonyd", "P", 1203320967, "tonyd", "P", 1203321387, "tonyd", "P", 1204763605, "tonyd", "P", 1204763636, "tonyd", "P", 1204764079, "tonyd", "P", 1204764106, "tonyd", "P", 1204764137, "tonyd", "P", 1204764191, "tonyd", "P", 1204764258, "tonyd", "P", 1204764472, "tonyd", "P", 1204764504, "tonyd", "P", 1204764520, "tonyd", "P", 1204764537, "tonyd", "P", 1204764878, "tonyd", "P", 1204765098, "tonyd", "P", 1204765204, "tonyd", "P", 1204765246, "tonyd", "P", 1204765290, "tonyd", "P", 1204765313, "tonyd", "P", 1204765361, "tonyd", "P", 1204765756, "tonyd", "P", 1204765790, "tonyd", "P", 1204765865, "tonyd", "P", 1204765952, "tonyd", "P", 1204766021, "tonyd", "P", 1204766040, "tonyd", "P", 1204766058, "tonyd", "P", 1204766078, "tonyd", "P", 1204766092, "tonyd", "P", 1204766132, "tonyd", "P", 1204766181, "tonyd", "P", 1204766232, "tonyd", "P", 1204766304, "tonyd", "P", 1204858856, "tonyd", "P", 1204858988, "tonyd", "P", 1205144387, "tonyd", "P", 1205144539, "tonyd", "P", 1205144586, "tonyd", "P", 1209699945, "tonyd", "P", 1209699988, "tonyd", "P", 1209700001, "tonyd", "P", 1209700060, "tonyd", "P", 1209700117, "tonyd", "P", 1209700423, "tonyd", "P", 1209700503, "tonyd", "P", 1209700593, "tonyd", "P", 1209700668, "tonyd", "P", 1209700692, "tonyd", "P", 1209700732, "tonyd", "P", 1209700786, "tonyd", "P", 1209700822, "tonyd", "P", 1209700856, "tonyd", "P", 1209700878, "tonyd", "P", 1209700919, "tonyd", "P", 1209700935, "tonyd", "P", 1209701290, "tonyd", "P", 1209701440, "tonyd", "P", 1209701617, "tonyd", "P", 1209701646, "tonyd", "P", 1211080478, "tonyd", "P", 1211080495, "tonyd", "P", 1211080786, "tonyd", "P", 1211080843, "tonyd", "P", 1211080865, "tonyd", "P", 1211080930, "tonyd", "P", 1211080941, "tonyd", "P", 1211080979, "tonyd", "P", 1211081159, "tonyd", "P", 1211081227, "tonyd", "P", 1211081236, "tonyd", "P", 1211081257, "tonyd", "P", 1211081534, "tonyd", "P", 1211081584, "tonyd", "P", 1211081588, "tonyd", "P", 1211081629, "tonyd", "P", 1211081665, "tonyd", "P", 1211081764, "tonyd", "P", 1211081844, "tonyd", "P", 1211081897, "tonyd", "P", 1211081928, "tonyd", "P", 1211082236, "tonyd", "P", 1211082271, "tonyd", "P", 1211082396, "tonyd", "P", 1211082423, "tonyd", "P", 1211082466, "tonyd", "P", 1211082493, "tonyd", "P", 1211082523, "tonyd", "P", 1211082624, "tonyd", "P", 1211082663, "tonyd", "P", 1211082717, "tonyd", "P", 1211082747, "tonyd", "P", 1211082775, "tonyd", "P", 1211091839, "tonyd", "P", 1211091959, "tonyd", "P", 1211091980, "tonyd", "P", 1211092150, "tonyd", "P", 1211092199, "tonyd", "P", 1211092248, "tonyd", "P", 1211092320, "tonyd", "P", 1211092952, "tonyd", "P", 1211093052, "tonyd", "P", 1211093084, "tonyd", "P", 1211093113, "tonyd", "P", 1211093188, "tonyd", "P", 1211093228, "tonyd", "P", 1211093233, "tonyd", "P", 1211093259, "tonyd", "P", 1211093309, "tonyd", "P", 1211093405, "tonyd", "P", 1211093450, "tonyd", "P", 1211093475, "tonyd", "P", 1211093507, "tonyd", "P", 1211093572, "tonyd", "P", 1211093767, "tonyd", "P", 1211093783, "tonyd", "P", 1211093804, "tonyd", "P", 1211093821, "tonyd", "P", 1211093834, "tonyd", "P", 1211093852, "tonyd", "P", 1211093963, "tonyd", "P", 1211093989, "tonyd", "P", 1211094025, "tonyd", "P", 1211094070, "tonyd", "P", 1211094137, "tonyd", "P", 1214109086, "tonyd", "P", 1214109383, "tonyd", "P", 1214109644, "tonyd", "P", 1214109718, "tonyd", "P", 1214109779, "tonyd", "P", 1215136271, "tonyd", "E", 1220675114, "tonyd", "P", 1220675225, "tonyd", "P", 1224214325, "tonyd", "P", 1224214359, "tonyd", "P", 1224214478, "tonyd", "P", 1224215179, "tonyd", "P", 1224215212, "tonyd", "P", 1224215248, "tonyd", "P", 1224215293, "tonyd", "P", 1224215320, "tonyd", "P", 1224215333, "tonyd", "P", 1224215471, "tonyd", "P", 1224215670, "tonyd", "P", 1224215820, "tonyd", "P", 1224216151, "tonyd", "P", 1224216186, "tonyd", "P", 1224216771, "tonyd", "P", 1224219019, "tonyd", "P", 1224219052, "tonyd", "P", 1224219083, "tonyd", "P", 1224221174, "tonyd", "P", 1224221191, "tonyd", "P", 1224221304, "tonyd", "P", 1224221862, "tonyd", "P", 1224221921, "tonyd", "P", 1224221929, "tonyd", "P", 1224295988, "tonyd", "P", 1224296009, "tonyd", "P", 1224296065, "tonyd", "P", 1224296431, "tonyd", "P", 1224296460, "tonyd", "P", 1224297153, "tonyd", "P", 1224297420, "tonyd", "P", 1224297470, "tonyd", "P", 1224297524, "tonyd", "P", 1224299413, "tonyd", "P", 1224299953, "tonyd", "P", 1224300034, "tonyd", "P", 1224300088, "tonyd", "P", 1224300107, "tonyd", "P", 1224300118, "tonyd", "P", 1224300136, "tonyd", "P", 1224300150, "tonyd", "P", 1224304656, "tonyd", "P", 1224305210, "tonyd", "P", 1224305294, "tonyd", "P", 1224305644, "tonyd", "P", 1224305668, "tonyd", "P", 1224305755, "tonyd", "P", 1224305945, "tonyd", "P", 1224308179, "tonyd", "P", 1224308208, "tonyd", "P", 1224308236, "tonyd", "P", 1224308309, "tonyd", "P", 1224308397, "tonyd", "P", 1224308425, "tonyd", "P", 1224308485, "tonyd", "P", 1224308514, "tonyd", "P", 1224308546, "tonyd", "P", 1224308576, "tonyd", "P", 1224308784, "tonyd", "P", 1224309205, "tonyd", "P", 1224367353, "tonyd", "P", 1224367418, "tonyd", "P", 1224367498, "tonyd", "P", 1224367528, "tonyd", "P", 1224367846, "tonyd", "P", 1224367914, "tonyd", "P", 1224367984, "tonyd", "P", 1224368224, "tonyd", "P", 1224370697, "tonyd", "P", 1224371021, "tonyd", "P", 1224371173, "tonyd", "P", 1224371485, "tonyd", "P", 1224371721, "tonyd", "P", 1224374960, "tonyd", "P", 1224375085, "tonyd", "P", 1224375140, "tonyd", "P", 1224375234, "tonyd", "P", 1224375343, "tonyd", "P", 1224375693, "tonyd", "P", 1224375941, "tonyd", "P", 1224376096, "tonyd", "P", 1224376281, "tonyd", "P", 1224376450, "tonyd", "P", 1224376489, "tonyd", "P", 1224376511, "tonyd", "P", 1224376715, "tonyd", "P", 1224377077, "tonyd", "P", 1224377107, "tonyd", "P", 1224377188, "tonyd", "P", 1224377210, "tonyd", "P", 1224377283, "tonyd", "P", 1224377328, "tonyd", "P", 1224377377, "tonyd", "P", 1224377410, "tonyd", "P", 1224377492, "tonyd", "P", 1224377549, "tonyd", "P", 1224377611, "tonyd", "P", 1224377642, "tonyd", "P", 1224377728, "tonyd", "P", 1224377777, "tonyd", "P", 1224377850, "tonyd", "P", 1224377913, "tonyd", "P", 1224377944, "tonyd", "P", 1224378961, "tonyd", "P", 1224379402, "tonyd", "P", 1224379450, "tonyd", "P", 1224379518, "tonyd", "P", 1224379594, "tonyd", "P", 1224379695, "tonyd", "P", 1224379735, "tonyd", "P", 1224380041, "tonyd", "P", 1224381772, "tonyd", "P", 1224383252, "tonyd", "P", 1224383555, "tonyd", "P", 1224383579, "tonyd", "P", 1224383645, "tonyd", "P", 1224383726, "tonyd", "P", 1224383856, "tonyd", "P", 1224383950, "tonyd", "P", 1224383983, "tonyd", "P", 1224383998, "tonyd", "P", 1224384199, "tonyd", "P", 1224384289, "tonyd", "P", 1224384361, "tonyd", "P", 1224384419, "tonyd", "P", 1224384800, "tonyd", "P", 1224384963, "tonyd", "P", 1224385273, "tonyd", "P", 1225102089, "tonyd", "P", 1225102161, "tonyd", "P", 1225102356, "tonyd", "P", 1225517231, "tonyd", "P", 1225517325, "tonyd", "P", 1225517945, "tonyd", "P", 1225517956, "tonyd", "P", 1225518013, "tonyd", "P", 1225518600, "tonyd", "P", 1225518715, "tonyd", "P", 1225518757, "tonyd", "P", 1225518800, "tonyd", "P", 1225518881, "tonyd", "P", 1225518901, "tonyd", "P", 1225519139, "tonyd", "P", 1225519228, "tonyd", "P", 1225519236, "tonyd", "P", 1225519379, "tonyd", "P", 1225519407, "tonyd", "P", 1225519463, "tonyd", "P", 1225519488, "tonyd", "P", 1225519507, "tonyd", "P", 1225519539, "tonyd", "P", 1225519620, "tonyd", "P", 1225519631, "tonyd", "P", 1225519735, "tonyd", "P", 1225520064, "tonyd", "P", 1225520127, "tonyd", "P", 1225520131, "tonyd", "P", 1225520146, "tonyd", "P", 1225521245, "tonyd", "P", 1225521270, "tonyd", "P", 1225521380, "tonyd", "P", 1225521400, "tonyd", "P", 1225521417, "tonyd", "P", 1225521531, "tonyd", "P", 1225521583, "tonyd", "P", 1225521614, "tonyd", "P", 1225522055, "tonyd", "P", 1225522068, "tonyd", "P", 1225522321, "tonyd", "P", 1225522901, "tonyd", "P", 1225522970, "tonyd", "P", 1225522986, "tonyd", "P", 1225523000, "tonyd", "P", 1225523028, "tonyd", "P", 1225523042, "tonyd", "P", 1225523417, "tonyd", "P", 1225525851, "tonyd", "P", 1225525984, "tonyd", "P", 1225526010, "tonyd", "P", 1225526044, "tonyd", "P", 1225526108, "tonyd", "P", 1225526392, "tonyd", "P", 1225527061, "tonyd", "P", 1225527234, "tonyd", "P", 1225527312, "tonyd", "P", 1225527450, "tonyd", "P", 1225527502, "tonyd", "P", 1225527575, "tonyd", "P", 1225592574, "tonyd", "P", 1225592961, "tonyd", "P", 1225622284, "tonyd", "P", 1225622445, "tonyd", "P", 1225622818, "tonyd", "P", 1225622848, "tonyd", "P", 1225622902, "tonyd", "P", 1225622961, "tonyd", "P", 1225623030, "tonyd", "P", 1229175875, "tonyd", "P", 1229175899, "tonyd", "P", 1229175918, "tonyd", "P", 1229175966, "tonyd", "P", 1229175997, "tonyd", "P", 1229176021, "tonyd", "P", 1229176146, "tonyd", "P", 1229176210, "tonyd", "P", 1229176400, "tonyd", "P", 1229176467, "tonyd", "P", 1229176488, "tonyd", "P", 1229176553, "tonyd", "P", 1229176597, "tonyd", "P", 1229176660, "tonyd", "P", 1229176689, "tonyd", "P", 1229176770, "tonyd", "P", 1229176970, "tonyd", "P", 1229177076, "tonyd", "P", 1229177521, "tonyd", "P", 1229177571, "tonyd", "P", 1229177622, "tonyd", "P", 1229177712, "tonyd", "P", 1229177901, "tonyd", "P", 1229177918, "tonyd", "P", 1229177965, "tonyd", "P", 1229178002, "tonyd", "P", 1229178289, "tonyd", "P", 1229224126, "tonyd", "P", 1229224154, "tonyd", "P", 1229224289, "tonyd", "P", 1229224321, "tonyd", "P", 1229224432, "tonyd", "P", 1229224492, "tonyd", "P", 1229224540, "tonyd", "P", 1229224592, "tonyd", "P", 1229224703, "tonyd", "P", 1229225059, "tonyd", "P", 1229225082, "tonyd", "P", 1229225111, "tonyd", "P", 1229225124, "tonyd", "P", 1229225323, "tonyd", "P", 1229225383, "tonyd", "P", 1229225633, "tonyd", "P", 1229225774, "tonyd", "P", 1229225878, "tonyd", "P", 1229225962, "tonyd", "P", 1229226081, "tonyd", "P", 1229226184, "tonyd", "P", 1229226374, "tonyd", "P", 1229226556, "tonyd", "P", 1230015115, "tonyd", "P", 1231151097, "tonyd", "P", 1231151147, "tonyd", "P", 1231151163, "tonyd", "P", 1231158097, "tonyd", "P", 1231159450, "tonyd", "P", 1231159512, "tonyd", "P", 1231159631, "tonyd", "P", 1231159667, "tonyd", "P", 1231159742, "tonyd", "P", 1231159852, "tonyd", "P", 1231160246, "tonyd", "P", 1231160270, "tonyd", "P", 1231160469, "tonyd", "P", 1231160530, "tonyd", "P", 1231160563, "tonyd", "P", 1231160654, "tonyd", "P", 1231160921, "tonyd", "P", 1231161080, "tonyd", "P", 1231161232, "tonyd", "P", 1231161395, "tonyd", "P", 1231161594, "tonyd", "P", 1231161662, "tonyd", "P", 1231196844, "tonyd", "P", 1231197235, "tonyd", "P", 1231197519, "tonyd", "P", 1231197635, "tonyd", "P", 1231197668, "tonyd", "P", 1231197750, "tonyd", "P", 1231197909, "tonyd", "P", 1231198174, "tonyd", "P", 1231198428, "tonyd", "P", 1231198505, "tonyd", "P", 1231198579, "tonyd", "P", 1231198610, "tonyd", "P", 1237030465, "tonyd", "P", 1237030537, "tonyd", "P", 1237030624, "tonyd", "P", 1237030739, "tonyd", "P", 1237031745, "tonyd", "P", 1237031789, "tonyd", "P", 1237036897, "tonyd", "P", 1237036915, "tonyd", "P", 1237036993, "tonyd", "P", 1237037117, "tonyd", "P", 1239837147, "tonyd", "P", 1239837335, "tonyd", "P", 1239837607, "tonyd", "P", 1239837620, "tonyd", "P", 1239837630, "tonyd", "P", 1239837640, "tonyd", "P", 1239838226, "tonyd", "P", 1239838409, "tonyd", "P", 1239838566, "tonyd", "P", 1254134748, "tonyd", "P", 1254134806, "tonyd", "P", 1254134818, "tonyd", "P", 1254134969, "tonyd", "P", 1254134997, "tonyd", "P", 1254135083, "tonyd", "P", 1254136569, "tonyd", "P", 1254137549, "tonyd", "P", 1254138448, "tonyd", "P", 1254138474, "tonyd", "P", 1254138654, "tonyd", "P", 1254138689, "tonyd", "P", 1254138765, "tonyd", "P", 1254138921, "tonyd", "P", 1254138942, "tonyd", "P", 1254139027, "tonyd", "P", 1254139062, "tonyd", "P", 1254139228, "tonyd", "P", 1254139507, "tonyd", "P", 1254139524, "tonyd", "P", 1254139535, "tonyd", "P", 1254139594, "tonyd", "P", 1254139650, "tonyd", "P", 1254139668, "tonyd", "P", 1254139934, "tonyd", "P", 1254141074, "tonyd", "P", 1254629645, "tonyd", "P", 1254871816, "tonyd", "P", 1254872005, "tonyd", "P", 1254872026, "tonyd", "P", 1254872118, "tonyd", "P", 1254872654, "tonyd", "P", 1254872722, "tonyd", "P", 1254872736, "tonyd", "P", 1254872745, "tonyd", "P", 1254872774, "tonyd", "P", 1254872895, "tonyd", "P", 1254872950, "tonyd", "P", 1254872996, "tonyd", "P", 1254873062, "tonyd", "P", 1254873160, "tonyd", "P", 1261902108, "tonyd", "P", 1261902232, "tonyd", "P", 1261902337, "tonyd", "P", 1261902366, "tonyd", "P", 1264929015, "tonyd", "P", 1264929236, "tonyd", "P", 1264929421, "tonyd", "P", 1265537750, "tonyd", "P", 1265537790, "tonyd", "P", 1265540283, "tonyd", "P", 1265540317, "tonyd", "P", 1265540555, "tonyd", "P", 1265540585, "tonyd", "P", 1265541325, "tonyd", "P", 1265541331, "tonyd", "P", 1265541644, "tonyd", "P", 1265542093, "tonyd", "P", 1265542163, "tonyd", "P", 1265542888, "tonyd", "P", 1265542963, "tonyd", "P", 1265543104, "tonyd", "P", 1265543227, "tonyd", "P", 1265543302, "tonyd", "P", 1265543343, "tonyd", "P", 1265543456, "tonyd", "P", 1265543794, "tonyd", "P", 1265544231, "tonyd", "P", 1265544327, "tonyd", "P", 1265544353, "tonyd", "P", 1265544375, "tonyd", "P", 1265544428, "tonyd", "P", 1265544441, "tonyd", "P", 1265544942, "tonyd", "P", 1265545040, "tonyd", "P", 1265545194, "tonyd", "P", 1265545393, "tonyd", "P", 1265545420, "tonyd", "P", 1265545470, "tonyd", "P", 1265545577, "tonyd", "P", 1265545903, "tonyd", "P", 1265546021, "tonyd", "P", 1265546168, "tonyd", "P", 1265546325, "tonyd", "P", 1265622464, "tonyd", "P", 1265622560, "tonyd", "P", 1265623009, "tonyd", "P", 1265623100, "tonyd", "P", 1265623263, "tonyd", "P", 1265623400, "tonyd", "P", 1265851168, "tonyd", "P", 1265851182, "tonyd", "P", 1265851231, "tonyd", "P", 1267322908, "tonyd", "P", 1268140148, "tonyd", "P", 1268140169, "tonyd", "P", 1271585333, "tonyd", "P", 1271585622, "tonyd", "P", 1271585801, "tonyd", "P", 1271586000, "tonyd", "P", 1271586145, "tonyd", "P", 1271586218, "tonyd", "P", 1271586243, "tonyd", "P", 1271586297, "tonyd", "P", 1271586533, "tonyd", "P", 1271586598, "tonyd", "P", 1271586694, "tonyd", "P", 1271586968, "tonyd", "P", 1271587070, "tonyd", "P", 1271587123, "tonyd", "P", 1271587204, "tonyd", "P", 1271587486, "tonyd", "P", 1273980898, "tonyd", "P", 1273980914, "tonyd", "P", 1273981080, "tonyd", "P", 1273987094, "tonyd", "P", 1273987542, "tonyd", "P", 1273987593, "tonyd", "P", 1273987916, "tonyd", "P", 1273987938, "tonyd", "P", 1273988675, "tonyd", "P", 1273988904, "tonyd", "P", 1273989076, "tonyd", "P", 1273989091, "tonyd", "P", 1273989249, "tonyd", "P", 1273989507, "tonyd", "P", 1273989752, "tonyd", "P", 1273990803, "tonyd", "P", 1273990808, "tonyd", "P", 1273990844, "tonyd", "P", 1273990978, "tonyd", "P", 1273991087, "tonyd", "P", 1273991152, "tonyd", "P", 1273991284, "tonyd", "P", 1273991314, "tonyd", "P", 1273991349, "tonyd", "P", 1273991409, "tonyd", "P", 1273991437, "tonyd", "P", 1273991447, "tonyd", "P", 1273991558, "tonyd", "P", 1273991577, "tonyd", "P", 1273991634, "tonyd", "P", 1273991649, "tonyd", "P", 1273991665, "tonyd", "P", 1273991683, "tonyd", "P", 1273991693, "tonyd", "P", 1273991773, "tonyd", "P", 1273991845, "tonyd", "P", 1273991873, "tonyd", "P", 1273991905, "tonyd", "P", 1273991924, "tonyd", "P", 1273991972, "tonyd", "P", 1273992098, "tonyd", "P", 1273992257, "tonyd", "P", 1273992284, "tonyd", "P", 1274523350, "tonyd", "P", 1277258123, "tonyd", "P", 1277258203, "tonyd", "P", 1277258241, "tonyd", "P", 1277258607, "tonyd", "P", 1277258877, "tonyd", "P", 1277258987, "tonyd", "P", 1277259036, "tonyd", "P", 1277259062, "tonyd", "P", 1277259112, "tonyd", "P", 1277259137, "tonyd", "P", 1277259165, "tonyd", "P", 1277259222, "tonyd", "P", 1277259285, "tonyd", "P", 1277259524, "tonyd", "P", 1277259620, "tonyd", "P", 1277259761, "tonyd", "P", 1277259811, "tonyd", "P", 1277259821, "tonyd", "P", 1277259898, "tonyd", "P", 1277259915, "tonyd", "P", 1277260160, "tonyd", "P", 1277260239, "tonyd", "P", 1277260290, "tonyd", "P", 1277260307, "tonyd", "P", 1277260324, "tonyd", "P", 1277260358, "tonyd", "P", 1277260458, "tonyd", "P", 1277260700, "tonyd", "P", 1277260793, "tonyd", "P", 1277260820, "tonyd", "P", 1277260839, "tonyd", "P", 1277260927, "tonyd", "P", 1277260986, "tonyd", "P", 1277261582, "tonyd", "P", 1277261665, "tonyd", "P", 1277261793, "tonyd", "P", 1277261950, "tonyd", "P", 1277261968, "tonyd", "P", 1277262232, "tonyd", "P", 1277262723, "tonyd", "P", 1277264705, "tonyd", "P", 1277265935, "tonyd", "P", 1277265986, "tonyd", "P", 1277266034, "tonyd", "P", 1277266129, "tonyd", "P", 1277266283, "tonyd", "P", 1277266374, "tonyd", "P", 1277266453, "tonyd", "P", 1277266586, "tonyd", "P", 1277266630, "tonyd", "P", 1277266700, "tonyd", "P", 1277266715, "tonyd", "P", 1277267675, "tonyd", "P", 1277268368, "tonyd", "P", 1277268427, "tonyd", "P", 1277269302, "tonyd", "P", 1277269342, "tonyd", "P", 1277270400, "tonyd", "P", 1277270515, "tonyd", "P", 1277270557, "tonyd", "P", 1277270704, "tonyd", "P", 1279078553, "tonyd", "P", 1279078578, "tonyd", "P", 1279078670, "tonyd", "P", 1279078850, "tonyd", "P", 1279078856, "tonyd", "P", 1279078882, "tonyd", "P", 1279078936, "tonyd", "P", 1279079407, "tonyd", "P", 1279079475, "tonyd", "P", 1279079490, "tonyd", "P", 1279079511, "tonyd", "P", 1279079541, "tonyd", "P", 1279079644, "tonyd", "P", 1279079687, "tonyd", "P", 1279079700, "tonyd", "P", 1279079716, "tonyd", "P", 1279079731, "tonyd", "P", 1279079792, "tonyd", "P", 1279079847, "tonyd", "P", 1279079869, "tonyd", "P", 1279079962, "tonyd", "P", 1279079973, "tonyd", "P", 1279080676, "tonyd", "P", 1279080696, "tonyd", "P", 1279080718, "tonyd", "P", 1279080738, "tonyd", "P", 1279080772, "tonyd", "P", 1279080866, "tonyd", "P", 1279080951, "tonyd", "P", 1279080991, "tonyd", "P", 1279081025, "tonyd", "P", 1279081117, "tonyd", "P", 1279081194, "tonyd", "P", 1279081236, "tonyd", "P", 1279081264, "tonyd", "P", 1279081274, "tonyd", "P", 1279081329, "tonyd", "P", 1279081358, "tonyd", "P", 1279081467, "tonyd", "P", 1279081599, "tonyd", "P", 1279081644, "tonyd", "P", 1279081778, "tonyd", "P", 1279082309, "tonyd", "P", 1279082318, "tonyd", "P", 1279367972, "tonyd", "P", 1292557175, "tonyd", "P", 1292557208, "tonyd", "P", 1295225817, "tonyd", "P", 1295225842, "tonyd", "P", 1295225856, "tonyd", "P", 1295227038, "tonyd", "P", 1295235177, "tonyd", "P", 1295235197, "tonyd", "P", 1306033594, "tonyd", "P", 1306034151, "tonyd", "P", 1306034165, "tonyd", "P", 1306034193, "tonyd", "P", 1306034206, "tonyd", "P", 1306974908, "tonyd", "P", 1307433425, "tonyd", "P", 1309071480, "tonyd", "P", 1309071494, "tonyd", "P", 1309071573, "tonyd", "P", 1309071796, "tonyd", "P", 1309072561, "tonyd", "P", 1309072742, "tonyd", "P", 1309073702, "tonyd", "P", 1309073718, "tonyd", "P", 1309489384, "rorschakovacs", "R", 1310097775, "tonyd", "P", 1310098208, "tonyd", "P", 1310098270, "tonyd", "P", 1310098386, "tonyd", "P", 1310098418, "tonyd", "P", 1310098474, "tonyd", "P", 1310098495, "tonyd", "P", 1310098531, "tonyd", "P", 1310098582, "tonyd", "P", 1310098646, "tonyd", "P", 1310098698, "tonyd", "P", 1310099038, "tonyd", "P", 1310099079, "tonyd", "P", 1321763486, "tonyd", "P", 1321763535, "tonyd", "P", 1321763607, "tonyd", "P", 1321763660, "tonyd", "P", 1321763797, "tonyd", "P", 1328771692, "tonyd", "P", 1328771719, "tonyd", "P", 1328771732, "tonyd", "P", 1328771931, "tonyd", "P", 1328771953, "tonyd", "P", 1328771981, "tonyd", "P", 1328771989, "tonyd", "P", 1328772111, "tonyd", "P", 1328772166, "tonyd", "P", 1328772183, "tonyd", "P", 1328772260, "tonyd", "P", 1328772286, "tonyd", "P", 1328772313, "tonyd", "P", 1328772330, "tonyd", "P", 1337154394, "tonyd", "P", 1337671014, "tonyd", "P", 1337671102, "tonyd", "P", 1339761446, "tonyd", "P", 1339761475, "tonyd", "P", 1357359501, "tonyd", "P", 1357359600, "tonyd", "P", 1357359654, "tonyd", "P", 1357359667, "tonyd", "P", 1357359920, "tonyd", "P", 1357360105, "tonyd", "P", 1357360235, "tonyd", "P", 1357360353, "tonyd", "P", 1357360402, "tonyd", "P", 1357360429, "tonyd", "P", 1357360472, "tonyd", "P", 1357360553, "tonyd", "P", 1357360705, "tonyd", "P", 1357360808, "tonyd", "P", 1357361021, "tonyd", "P", 1357361041, "tonyd", "P", 1357361086, "tonyd", "P", 1357361221, "tonyd", "P", 1357361262, "tonyd", "P", 1357361278, "tonyd", "P", 1357361340, "tonyd", "P", 1357361373, "tonyd", "P", 1357361380, "tonyd", "P", 1357361509, "tonyd", "P", 1357361899, "tonyd", "P", 1360557652, "tonyd", "P", 1360558236, "tonyd", "P", 1360558365, "tonyd", "P", 1360558642, "tonyd", "P", 1360558700, "tonyd", "P", 1360658051, "tonyd", "P", 1360658308, "tonyd", "P", 1360658787, "tonyd", "P", 1360658873, "tonyd", "P", 1360733347, "tonyd", "P", 1360733399, "tonyd", "P", 1360733475, "tonyd", "P", 1360735137, "tonyd", "P", 1360737895, "tonyd", "P", 1360737948, "tonyd", "P", 1360737979, "tonyd", "P", 1360738154, "tonyd", "P", 1360738366, "tonyd", "P", 1360906735, "tonyd", "P", 1379323769, "tonyd", "P", 1379323955, "tonyd", "P", 1379323962, "tonyd", "P", 1379324072, "tonyd", "P", 1379324203, "tonyd", "P", 1379324238, "tonyd", "P", 1379324356, "tonyd", "P", 1379324387, "tonyd", "P", 1379324437, "tonyd", "P", 1379324454, "tonyd", "P", 1379324479, "tonyd", "P", 1379324613, "tonyd", "P", 1379324776, "tonyd", "P", 1379324797, "tonyd", "P", 1379324969, "tonyd", "P", 1379324990, "tonyd", "P", 1379325066, "tonyd", "P", 1379325359, "tonyd", "P", 1379325486, "tonyd", "P", 1379325572, "tonyd", "P", 1379325646, "tonyd", "P", 1379325702, "tonyd", "P", 1379325744, "tonyd", "P", 1379325890, "tonyd", "P", 1379325960, "tonyd", "P", 1379325996, "tonyd", "P", 1379326187, "tonyd", "P", 1379328582, "tonyd", "P", 1379328659, "tonyd", "P", 1379328803, "tonyd", "P", 1379335473, "tonyd", "P", 1379336181, "tonyd", "P", 1379337818, "tonyd", "P", 1379337860, "tonyd", "P", 1379337869, "tonyd", "P", 1379337993, "tonyd", "P", 1379338006, "tonyd", "P", 1380181979, "tonyd", "P", 1380182034, "tonyd", "P", 1380182077, "tonyd", "P", 1380182101, "tonyd", "P", 1380182450, "tonyd", "P", 1380182479, "tonyd", "P", 1380182565, "tonyd", "P", 1380182605, "tonyd", "P", 1381376071, "tonyd", "P", 1381376112, "tonyd", "P", 1381376247, "tonyd", "P", 1381376272, "tonyd", "P", 1381379413, "tonyd", "P", 1381379592, "tonyd", "P", 1381379656, "tonyd", "P", 1381379667, "tonyd", "P", 1381379698, "tonyd", "P", 1381379714, "tonyd", "P", 1381379741, "tonyd", "P", 1381379761, "tonyd", "P", 1381379787, "tonyd", "P", 1381462079, "tonyd", "P", 1381462222, "tonyd", "P", 1381462277, "tonyd", "P", 1382662114, "jominey", "E", 1391246124, "tonyd", "P", 1391246153, "tonyd", "P", 1391246225, "tonyd", "P", 1391246277, "tonyd", "P", 1391246647, "tonyd", "P", 1391246661, "tonyd", "P", 1391246838, "tonyd", "P", 1391246958, "tonyd", "P", 1391247121, "tonyd", "P", 1391247130, "tonyd", "P", 1391247386, "tonyd", "P", 1391247497, "tonyd", "P", 1391247539, "tonyd", "P", 1391247565, "tonyd", "P", 1391247759, "tonyd", "P", 1391247842, "tonyd", "P", 1391247973, "tonyd", "P", 1391248050, "tonyd", "P", 1391248105, "tonyd", "P", 1391248149, "tonyd", "P", 1391248294, "tonyd", "P", 1391248753, "tonyd", "P", 1391248911, "tonyd", "P", 1391248990, "tonyd", "P", 1391248995, "tonyd", "P", 1391249064, "tonyd", "P", 1391249174, "tonyd", "P", 1409991883, "tonyd", "P", 1409991912, "tonyd", "P", 1409991998, "tonyd", "P", 1409992014, "tonyd", "P", 1409992030, "tonyd", "P", 1409992304, "tonyd", "P", 1409992856, "tonyd", "P", 1409992898, "tonyd", "P", 1409992955, "tonyd", "P", 1409993165, "tonyd", "P", 1409993346, "tonyd", "P", 1409993374, "tonyd", "P", 1409993443, "tonyd", "P", 1409993490, "tonyd", "P", 1409993535, "tonyd", "P", 1409993632, "tonyd", "P", 1409994167, "tonyd", "P", 1409994317, "tonyd", "P", 1409994346, "tonyd", "P", 1409994487, "tonyd", "P", 1409994506, "tonyd", "P", 1409994898, "tonyd", "P", 1409994931, "tonyd", "P", 1409994950, "tonyd", "P", 1409994967, "tonyd", "P", 1409995080, "tonyd", "P", 1409995231, "tonyd", "P", 1409995265, "tonyd", "P", 1409995325, "tonyd", "P", 1409995382, "tonyd", "P", 1409995508, "tonyd", "P", 1409995586, "tonyd", "P", 1409995644, "tonyd", "P", 1409995702, "tonyd", "P", 1409995726, "tonyd", "P", 1409995806, "tonyd", "P", 1409995814, "tonyd", "P", 1409995868, "tonyd", "P", 1411874747, "tonyd", "P", 1411874757, "tonyd", "P", 1411874816, "tonyd", "P", 1411875309, "tonyd", "P", 1411875529, "tonyd", "P", 1411875535, "tonyd", "P", 1411875547, "tonyd", "P", 1411875564, "tonyd", "P", 1411875568, "tonyd", "P", 1411876008, "tonyd", "P", 1411876045, "tonyd", "P", 1411876081, "tonyd", "P", 1411876102, "tonyd", "P", 1411876158, "tonyd", "P", 1411876165, "tonyd", "P", 1411876211, "tonyd", "P", 1411876314, "tonyd", "P", 1411876462, "tonyd", "P", 1411876481, "tonyd", "P", 1411876498, "tonyd", "P", 1411876550, "tonyd", "P", 1411876569, "tonyd", "P", 1411876592, "tonyd", "P", 1411876609, "tonyd", "P", 1411876651, "tonyd", "P", 1411876672, "tonyd", "P", 1411876683, "tonyd", "P", 1411876752, "tonyd", "P", 1411876778, "tonyd", "P", 1411876804, "tonyd", "P", 1411876836, "tonyd", "P", 1419912217, "tonyd", "P", 1419912257, "tonyd", "P", 1419912289, "tonyd", "P", 1419913241, "tonyd", "P", 1419913273, "tonyd", "P", 1419913559, "tonyd", "P", 1419914350, "tonyd", "P", 1419914679, "tonyd", "P", 1419914799, "tonyd", "P", 1419914995, "tonyd", "P", 1419915080, "tonyd", "P", 1419915097, "tonyd", "P", 1428283806, "tonyd", "P", 1428283819, "tonyd", "P", 1428283860, "tonyd", "P", 1429921872, "tonyd", "P", 1429921898, "tonyd", "P", 1429921931, "tonyd", "P", 1429921962, "tonyd", "P", 1429921989, "tonyd", "P", 1429922005, "tonyd", "P", 1429922037, "tonyd", "P", 1429922051, "tonyd", "P", 1429922080, "tonyd", "P", 1429922103, "tonyd", "P", 1429922130, "tonyd", "P", 1429922310, "tonyd", "P", 1429922328, "tonyd", "P", 1429923006, "tonyd", "P", 1429923411, "tonyd", "P", 1429923505, "tonyd", "P", 1429923511, "tonyd", "P", 1429923584, "tonyd", "P", 1429923642, "tonyd", "P", 1429923706, "tonyd", "P", 1429923726, "tonyd", "P", 1429923760, "tonyd", "P", 1429923888, "tonyd", "P", 1429924341, "tonyd", "P", 1429924818, "tonyd", "P", 1429924906, "tonyd", "P", 1429924925, "tonyd", "P", 1429925057, "tonyd", "P", 1430824167, "tonyd", "P", 1434010857, "tonyd", "P", 1434010967, "tonyd", "P", 1434011031, "tonyd", "P", 1434011067, "tonyd", "P", 1434011136, "tonyd", "P", 1434011260, "tonyd", "P", 1434011281, "tonyd", "P", 1434011336, "tonyd", "P", 1434011604, "tonyd", "P", 1434011716, "tonyd", "P", 1434011757, "tonyd", "P", 1434011797, "tonyd", "P", 1434012664, "tonyd", "P", 1434012675, "tonyd", "P", 1434012704, "tonyd", "P", 1443314654, "tonyd", "P", 1443314671, "tonyd", "P", 1443314735, "tonyd", "P", 1443314745, "tonyd", "P", 1443314773, "tonyd", "P", 1443314796, "tonyd", "P", 1443314809, "tonyd", "P", 1443314827, "tonyd", "P", 1443314864, "tonyd", "P", 1443314899, "tonyd", "P", 1443314942, "tonyd", "P", 1443314980, "tonyd", "P", 1443315008, "tonyd", "P", 1443340479, "tonyd", "P", 1443340504, "tonyd", "P", 1443340689, "tonyd", "P", 1443340832, "tonyd", "P", 1443340917, "tonyd", "P", 1453973881, "tonyd", "P", 1453974066, "tonyd", "P", 1453974082, "tonyd", "P", 1453974103, "tonyd", "P", 1453974114, "tonyd", "P", 1453974141, "tonyd", "P", 1453974186, "tonyd", "P", 1453974213, "tonyd", "P", 1453974233, "tonyd", "P", 1453974323, "tonyd", "P", 1453974438, "tonyd", "P", 1453974473, "tonyd", "P", 1459925578, "tonyd", "P", 1459925657, "tonyd", "P", 1459925726, "tonyd", "P", 1459925802, "tonyd", "P", 1459925945, "tonyd", "P", 1459925965, "tonyd", "P", 1459926027, "tonyd", "P", 1459926176, "tonyd", "P", 1459926236, "tonyd", "P", 1463036817, "tonyd", "P", 1463036835, "tonyd", "P", 1463036862, "tonyd", "P", 1463036909, "tonyd", "P", 1463036985, "tonyd", "P", 1463037056, "tonyd", "P", 1463037089, "tonyd", "P", 1469163288, "tonyd", "P", 1469163304, "tonyd", "P", 1469163317, "tonyd", "P", 1469163338, "tonyd", "P", 1495690214, "tonyd", "P" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="x_gimliinstance">
         ([  ])
      </Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
