<object clone="/base/obj/thing" owner="tunk_bodin">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="1" density="0.1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0" verb2="is cut into" verb3="is cut into"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="cake"/>
            <Base:SName sname="food"/>
            <Base:SName sname="dessert"/>
            <Base:SName sname="cheesecake"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="foods"/>
            <Base:PName pname="desserts"/>
            <Base:PName pname="cakes"/>
            <Base:PName pname="cheesecakes"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="berrylicious"/>
          <Base:Adjective adjective="cheese"/>
          <Base:Adjective adjective="circular"/>
          <Base:Adjective adjective="fresh"/>
          <Base:Adjective adjective="large"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             berry cheesecake
          </Base:Description>
          <Base:Description type="examine">
             A large, fresh, and berrylicious cheesecake. It is circular in shape and topped with a thick triple berry sauce and a graham cracker crust.
          </Base:Description>
          <Base:Description type="look">
             A large, fresh, and berrylicious cheesecake topped with triple berry sauce and a graham cracker crust.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:nip:item:cost">
         28000
      </Core:Property>
      <Core:Property property="export:trait:quantity">
         75
      </Core:Property>
      <Core:Property property="export:trait:smell">
         "fruity berries and sweet cream cheese"
      </Core:Property>
      <Core:Property property="merry:react-post:cut-dob">
         X[M] \$slice = Spawn(\$\{Ironclaw:Holidays:FoolsDay:Props:CakeSlice\});      
Set(\$slice,"base:environment", \$actor);  
  
this."trait:quantity" = Int(this."trait:quantity") - 1;  
  
if(this."trait:quantity" \<= 0) \{  
    EmitTo(\$actor, "You cut the final slice from "+Describe(\$this)+" and place it on a napkin.");      
    EmitIn(\$actor."base:environment", Describe(\$actor)+" cuts the final slice from "+Describe(\$this)+" and places it on a napkin.", \$actor);      
    Slay(this);  
\} else \{  
    EmitTo(\$actor, "You cut a slice from "+Describe(\$this, nil, \$actor)+" and place it on a napkin.");      
    EmitIn(\$actor."base:environment", Describe(\$actor)+" cuts a slice from "+Describe(\$this, \$actor)+" and places it on a napkin.", \$actor);      
\}  
    
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:slice-dob">
         X[M] \$slice = Spawn(\$\{Ironclaw:Holidays:FoolsDay:Props:CakeSlice\});      
Set(\$slice,"base:environment", \$actor);  
  
this."trait:quantity" = Int(this."trait:quantity") - 1;  
  
if(this."trait:quantity" \<= 0) \{  
    EmitTo(\$actor, "You cut the final slice from "+Describe(\$this)+" and place it on a napkin.");      
    EmitIn(\$actor."base:environment", Describe(\$actor)+" cuts the final slice from "+Describe(\$this)+" and places it on a napkin.", \$actor);      
    Slay(this);  
\} else \{  
    EmitTo(\$actor, "You cut a slice from "+Describe(\$this, nil, \$actor)+" and place it on a napkin.");      
    EmitIn(\$actor."base:environment", Describe(\$actor)+" cuts a slice from "+Describe(\$this, \$actor)+" and places it on a napkin.", \$actor);      
\}  
    
return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1301684150, "tunk_bodin", "X" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
