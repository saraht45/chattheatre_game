<object clone="/usr/SkotOS/obj/meracha" owner="tonyd">
  <SkotOS:MerAcHa action_id="teach">
    <Core:PCProperties>
      <Core:Property property="merry:global:action">
         X[M] NRef *arr;

/* disabled */
return TRUE;

if (\$consented) \{
   /* this code is not executed the first time around */
   EmitTo(nil /* defunct */, "Azrael gets this message about teaching!\\n");
   EmitTo(\$actor, Describe(\$actor)+" is teaching "+Describe(\$target));
   /* do something to kill the target */
   return TRUE;
\}

EmitTo(\$actor, "Want to teach something");

if(!\$(about:words)) \{
  EmitTo(\$actor, "What skill would you like to teach "+Describe(\$dob)+" about?");
  return FALSE;
\}

if(sizeof(\$(about:words)) \> 1) \{
  EmitTo(\$actor, "Please restrain yourself to single-word skill names.");
  return FALSE;
\}

\$topic = \$(about:words)[0];

EmitTo(\$actor, \$topic);
EmitTo(\$actor, "Have a topic of "+\$topic+". Checking if you know anything about that.");

/* Get a mapping of all the actors skills */
\$map = Get(\$actor, "*");
\$map = prefixed_map(\$map, "skill:");

\$list = map_indices(\$map);

/* Search through for this skill */
for (\$i = 0; \$i \< sizeof(\$list); \$i++)
\{
  if(sscanf(\$list[\$i], "skill:%s:"+\$topic, \$category) == 1)
    EmitTo(\$actor, "Found skill");
\}

if(!\$category)
\{
  EmitTo(\$actor, "You don't know anything about "+\$topic+".");
  return FALSE;
\}

/* consent not yet given, demand it */
Act(\$actor, "demand_consent",
     \$target: \$dob[0], \$message: "teach "+\$topic+" to", \$action: "teach", \$args: args + ([ "consented": TRUE, "actor":\$actor ]));
return FALSE;


return TRUE;

if (\$dob) \{
  if (sizeof(\$dob) \> 1) \{
    EmitTo(\$actor, "Please only " + \$imperative +
           " one thing at a time.\\n");
    return FALSE;
  \}
  return Call(\$\{Allegory:Props:Crafting:UrCrafting\}, "create", \$target: \$dob, \$modification: "tailor", \$words: \$(into:words));
\}

return TRUE;

\$categories = (\{ (\{ "lang", "languages" \}) \});

/* Get a mapping of all the actors skills */
\$map = Get(\$actor, "*");
\$map = prefixed_map(\$map, "skill:");

/* for some reason all objects have skill:fatigue */
\$map -= (\{ "skill:fatigue" \});

if(sizeof(map_indices(\$map)) == 0)
\{
  EmitTo(\$actor, "You don't know any skills...yet");
  return FALSE;
\}

/* for each category */
for (\$j = 0; \$j \< sizeof(\$categories); \$j++)
\{
  /* Get a list of skills of this category */
  \$tmpmap = prefixed_map(\$map, "skill:"+\$categories[\$j][0]+":", TRUE);
  \$list = map_indices(\$tmpmap);

  /* Remove these skills from the master skill mapping */
  \$map -= map_indices(prefixed_map(\$map, "skill:"+\$categories[\$j][0]+":"));

  /* List the skills */
  if(sizeof(\$list) \> 0) EmitTo(\$actor, \$categories[\$j][1]+":");
  for (\$i = 0; \$i \< sizeof(\$list); \$i++)
  \{
    EmitTo(\$actor, \$list[\$i]+": "+\$tmpmap[\$list[\$i]]);
  \}
\}

/* List remaining skills */
\$map = prefixed_map(\$map, "skill:", TRUE);
\$list = map_indices(\$map);
if(sizeof(\$list) \> 0) EmitTo(\$actor, "Other skills:");
for (\$i = 0; \$i \< sizeof(\$list); \$i++)
\{
  if(sscanf(\$list[\$i], "%*s:%s", \$name) == 2)
    EmitTo(\$actor, \$name+": "+\$map[\$list[\$i]]);
\}

return FALSE;
      </Core:Property>
      <Core:Property property="new property name">
         "New Property Value"
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1113782535, "tonyd", "E", 1113783060, "tonyd", "E", 1113783104, "tonyd", "P", 1113783555, "tonyd", "P", 1113783727, "tonyd", "P", 1113783739, "tonyd", "P", 1113783830, "tonyd", "P", 1113783849, "tonyd", "P", 1113785501, "tonyd", "P", 1113785533, "tonyd", "P", 1113785576, "tonyd", "P", 1113785732, "tonyd", "P", 1113785778, "tonyd", "P", 1113785811, "tonyd", "P", 1113785862, "tonyd", "P", 1113786053, "tonyd", "P", 1113786078, "tonyd", "P", 1113786112, "tonyd", "P", 1113786129, "tonyd", "P", 1113786189, "tonyd", "P", 1113786209, "tonyd", "P", 1113786461, "tonyd", "P", 1113786595, "tonyd", "P", 1113786642, "tonyd", "P", 1113786715, "tonyd", "P", 1113786877, "tonyd", "P", 1113787399, "tonyd", "P", 1113787461, "tonyd", "P", 1113788009, "tonyd", "P", 1113788177, "tonyd", "P", 1113788296, "tonyd", "P", 1113788353, "tonyd", "P", 1113788383, "tonyd", "P", 1113788410, "tonyd", "P", 1113788562, "tonyd", "P", 1113788823, "tonyd", "P", 1113788843, "tonyd", "P", 1113788876, "tonyd", "P", 1113788900, "tonyd", "P", 1113788945, "tonyd", "P", 1113788956, "tonyd", "P", 1113788987, "tonyd", "P", 1113789097, "tonyd", "P", 1113789190, "tonyd", "P", 1113789246, "tonyd", "P", 1113789297, "tonyd", "P", 1113789370, "tonyd", "P", 1113789418, "tonyd", "P", 1113789828, "tonyd", "P", 1113789867, "tonyd", "P", 1113789882, "tonyd", "P", 1113790008, "tonyd", "P", 1113790130, "tonyd", "P", 1113790143, "tonyd", "P", 1113790157, "tonyd", "P", 1113790173, "tonyd", "P", 1113803304, "tonyd", "P", 1113803320, "tonyd", "P", 1113803360, "tonyd", "P", 1114317711, "tonyd", "E", 1114317725, "tonyd", "E", 1114318547, "tonyd", "P", 1114394272, "tonyd", "P", 1136621012, "tonyd", "E", 1173189344, "librarysage", "R" \})
      </Core:Property>
    </Core:PCProperties>
  </SkotOS:MerAcHa>
</object>
