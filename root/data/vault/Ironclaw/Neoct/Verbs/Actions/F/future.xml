<object clone="/usr/SkotOS/obj/meracha" owner="tunk_bodin">
  <SkotOS:MerAcHa action_id="@future">
    <Core:PCProperties>
      <Core:Property property="merry:global:action">
         X[M] string icmonth, days, t;    
int monthnumber, daynumber, year;    
string *daynames;    
    
if(!\$evoke) \{    
EmitTo( \$actor, "There was no evoke. To calculate the ICday of a certain RLdate, use @future '[month] [date] i.e. @future '12 01");    
return FALSE;    
\}    
    
/* Get the date they want to check */    
if(sscanf(\$evoke, "\\"%d %d %d\\"", monthnumber, daynumber, year) \< 2) \{    
  EmitTo( \$actor, "The correct format for this is month followed by date such as: 12 01 for the 1st of December." );    
  return FALSE;    
\}    
    
/* set the year, if it's not already set */    
if(!year) year = get_year(time());    
if(year \< 2000) year += 2000;    
    
/* Check if this is a valid date */    
if((year \< 2000) \|\| (year \> 2030)) \$invalid = TRUE;    
if ((monthnumber \< 1) \|\| (monthnumber \> 12)) \$invalid = TRUE;    
if ((daynumber \< 1) \|\| (daynumber \> 31)) \$invalid = TRUE;    
/* check number of days in the month */    
switch(monthnumber) \{    
  case 4:    
  case 6:    
  case 9:    
  case 11:    
    if(daynumber \> 30) \$invalid = TRUE;    
    break;    
  case 2:    
    if(daynumber == 29) \{    
      if(year%4 != 0)    
        \$invalid = TRUE;    
    \} else if(daynumber \> 28) \{    
      \$invalid = TRUE;    
    \}    
    break;    
\}    
    
if(\$invalid) \{    
  EmitTo( \$actor, "That is an invalid date. The correct format for this is month followed by date such as: 12 01 for the 1st of December." );    
  return FALSE;    
\}    
    
/* calculate the timestamp */    
\$timestamp = calculate_stamp( year, monthnumber, daynumber );    
    
t = ctime( \$timestamp );    
t = t[..10] + TAG( t[11..19], "imp" ) + t[20..];    
EmitTo( \$actor, "OOC -- The date you are using is "+t+" Skotos Time." );   
    
daynames = (\{ "Dimache", "Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi" \});    
    
/* Find the details we want */    
sscanf(ctime( \$timestamp ), "%*s %s %d %*s %d", icmonth, daynumber, year);    
    
/* find in-character day of week */    
days = daynames[\$timestamp/(60*60*16)%7];    
    
/* Replace strings */    
icmonth = replace_strings(icmonth, "Jan", "Yule", "Feb", "Snow", "Mar", "Sap", "Apr", "Grass", "May", "Flower", "Jun", "Strawberry", "Jul", "Thunder", "Aug", "Green", "Sep", "Harvest", "Oct", "Hunter's", "Nov", "Frost", "Dec", "Night" );    
    
EmitTo(\$actor, "It will be "+TAG(days, "imp")+", the "+TAG(desc_ordinal(daynumber), "imp")+" day of "+TAG(icmonth, "imp")+". The year will be "+TAG(Str(year-1119), "imp")+" Apres le Miracle.");    
    
if((daynumber==23)\&\&(icmonth=="Night")) \{    
  /* the 23rd of Night */    
  EmitTo(\$actor, "It will be the "+TAG("Secret of the Unhewn Stone", "imp")+" for the Doloreaux.");    
\} else if((daynumber==29)\&\&(icmonth=="Snow")) \{    
  /* the 29th of Snow */    
  EmitTo(\$actor, "It will be "+TAG("Leap Day", "imp")+".");    
\} else if(days=="Dimache") \{    
  /* the holy days of Dimache */    
  EmitTo(\$actor, "It will be a "+TAG("Holy Day", "imp")+" for those who follow S'Allumer. Trade and dueling are restricted.");    
\}    
    
if(((\$timestamp/(60*60))%16) \> 12)    
\{    
  EmitTo( \$actor, "It will be midnight." );    
  EmitTo(\$actor, "It will become "+ daynames[((\$timestamp/(60*60*16+1))+1)%7] +" late in the day.");    
\} else \{    
  EmitTo( \$actor, "It will be midday." );    
  EmitTo(\$actor, "It will become "+ daynames[((\$timestamp/(60*60*16))+1)%7] +" early in the day.");    
\}    
    
return FALSE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1053708676, "zwoc", "E", 1134100436, "tunk_bodin", "X", 1134100787, "tunk_bodin", "X", 1134100857, "tunk_bodin", "X", 1134100898, "tunk_bodin", "X", 1134101362, "tunk_bodin", "X", 1134102438, "tunk_bodin", "X", 1134102475, "tunk_bodin", "X", 1134102886, "tunk_bodin", "X", 1134103565, "tunk_bodin", "X", 1134103611, "tunk_bodin", "X", 1134104005, "tunk_bodin", "X", 1134104053, "tunk_bodin", "X", 1134104103, "tunk_bodin", "X", 1134104165, "tunk_bodin", "X", 1134168572, "tonyd", "P", 1134168706, "tonyd", "P", 1134168863, "tonyd", "P", 1134168908, "tonyd", "P", 1134168949, "tonyd", "P", 1134169002, "tonyd", "P", 1134169028, "tonyd", "P", 1134169062, "tonyd", "P", 1134169226, "tonyd", "P", 1134169267, "tonyd", "P", 1134169313, "tonyd", "P", 1134169674, "tonyd", "P", 1134169799, "tonyd", "P", 1134169970, "tonyd", "P", 1134169994, "tonyd", "P", 1134170024, "tonyd", "P", 1134171093, "tonyd", "P", 1134171127, "tonyd", "P", 1134171160, "tonyd", "P", 1134171194, "tonyd", "P", 1134171256, "tonyd", "P", 1134171301, "tonyd", "P", 1134171486, "tonyd", "P", 1134172182, "tonyd", "P", 1134172221, "tonyd", "P", 1134173155, "tonyd", "P", 1134173665, "tonyd", "P", 1134173766, "tonyd", "P", 1134173881, "tonyd", "P", 1134173961, "tonyd", "P", 1134174011, "tonyd", "P", 1134174065, "tonyd", "P", 1134174394, "tonyd", "P", 1134174484, "tonyd", "P", 1134174727, "tonyd", "P", 1134174743, "tonyd", "P", 1134175050, "tonyd", "P", 1134178588, "tonyd", "P", 1134178613, "tonyd", "P", 1134178645, "tonyd", "P", 1134178801, "tonyd", "P", 1134178882, "tonyd", "P", 1134179009, "tonyd", "P", 1134179024, "tonyd", "P", 1134179035, "tonyd", "P", 1134179213, "tonyd", "P", 1134179229, "tonyd", "P", 1134180970, "tonyd", "P", 1134181032, "tonyd", "P", 1134181258, "tonyd", "P", 1134181436, "tonyd", "P", 1134181533, "tonyd", "P", 1134181683, "tonyd", "P", 1134181780, "tonyd", "P", 1134181930, "tonyd", "P", 1134182153, "tonyd", "P", 1134182178, "tonyd", "P", 1134182425, "tonyd", "P", 1134182437, "tonyd", "P", 1134189576, "tunk_bodin", "X", 1134189619, "tunk_bodin", "X", 1134193903, "tunk_bodin", "X", 1135909760, "tonyd", "E", 1138245835, "tunk_bodin", "X", 1138246156, "tunk_bodin", "X", 1138246401, "tunk_bodin", "X", 1138247013, "tunk_bodin", "X", 1138247711, "tunk_bodin", "X", 1138247818, "tunk_bodin", "X", 1138248225, "tunk_bodin", "X", 1138248625, "tunk_bodin", "X", 1138248944, "tonyd", "P", 1138249124, "tonyd", "P", 1138249296, "tonyd", "P", 1138249379, "tonyd", "P", 1138249468, "tonyd", "P", 1138249577, "tonyd", "P", 1138249604, "tonyd", "P", 1138249700, "tonyd", "P", 1138249845, "tonyd", "P", 1138249934, "tonyd", "P", 1138250104, "tonyd", "P", 1138250170, "tonyd", "P", 1138250211, "tonyd", "P", 1138250279, "tonyd", "P", 1138250458, "tonyd", "P", 1138250616, "tonyd", "P", 1138250810, "tonyd", "P", 1138250951, "tonyd", "P", 1138250985, "tonyd", "P", 1138251000, "tonyd", "P", 1138251019, "tonyd", "P", 1138253815, "tonyd", "P", 1138253840, "tonyd", "P", 1138331024, "tunk_bodin", "X", 1142300212, "tunk_bodin", "X", 1142300297, "tunk_bodin", "X", 1173187701, "librarysage", "R", 1223522192, "tunk_bodin", "X" \})
      </Core:Property>
    </Core:PCProperties>
  </SkotOS:MerAcHa>
</object>
