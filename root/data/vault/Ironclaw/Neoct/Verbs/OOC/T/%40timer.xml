<object clone="/usr/SkotOS/obj/verb" owner="SkotOS">
  <Socials:Verb imp="@timer" evoke="forbidden" audible="false" private="true" secret="true" obscured="false" target-abstracts="false" disabled="false" ooc="true" raw_verb="true">
    <Ur:UrObject/>
    <Socials:SocialObjects/>
    <Socials:VerbActions/>
    <Core:Properties>
      <Core:Property property="merry:global:command">
         X[M] if(!\$line) \{
 EmitTo(\$actor, "The "+Str(\$imperative)+" command will start a countdown timer, so you know how long you've been playing for, and can be warned to end your scenes and log off.");
 EmitTo(\$actor, "Format: "+Str(\$imperative)+" duration");
 EmitTo(\$actor, "e.g. "+Str(\$imperative)+" 2 hours");
 EmitTo(\$actor, "e.g. "+Str(\$imperative)+" 15 minutes");
 EmitTo(\$actor, "e.g. "+Str(\$imperative)+" 1 hour 12 minutes");
 return FALSE;
\}
sscanf(\$line, "%d hours%s", \$hours, \$rest);
if(!\$rest) \{
 sscanf(\$line, "%d hour%s", \$hours, \$rest);
 if(!\$rest) \{
  \$rest = \$line;
  \$hours = 0;
 \}
\}
\$line = \$rest;
\$rest = nil;
sscanf(\$line, "%d minute%s", \$minutes, \$rest);

\$total = 0;
if(\$hours) \$total += \$hours * 60*60;
if(\$minutes) \$total += \$minutes * 60;

if(\$actor."timer:countdown:id") \{
 EmitTo(\$actor, "Resetting timer for "+Str(Int(\$hours))+" hours and "+Str(Int(\$minutes))+" minutes.");
\} else \{
 EmitTo(\$actor, "Starting timer for "+Str(Int(\$hours))+" hours and "+Str(Int(\$minutes))+" minutes.");
\}

\$id = random(10000);
\$actor."timer:countdown:id" = \$id;
\$actor."timer:countdown" = time()+\$total;
while(\$actor."timer:countdown" \> time()) \{
 if(\$actor."timer:countdown:id" != \$id) return FALSE;
 if(\$actor."timer:countdown" \> time()+60*30) \{
  \$delay(\$actor."timer:countdown"-time()-60*30, FALSE, "e5f7");
  if(\$actor."timer:countdown" \> time()+60*29)
   EmitTo(\$actor, TAG("30 minutes to go.", "imp"));
 \} else  if(\$actor."timer:countdown" \> time()+60*10) \{
  \$delay(\$actor."timer:countdown"-time()-60*10, FALSE, "53af");
  if(\$actor."timer:countdown" \> time()+60*9)
   EmitTo(\$actor, TAG("10 minutes to go.", "imp"));
 \} else  if(\$actor."timer:countdown" \> time()+60*5) \{
  \$delay(\$actor."timer:countdown"-time()-60*5, FALSE, "102a");
  if(\$actor."timer:countdown" \> time()+60*4)
   EmitTo(\$actor, TAG("5 minutes to go.", "imp"));
 \} else  if(\$actor."timer:countdown" \> time()+60*1) \{
  \$delay(\$actor."timer:countdown"-time()-60*1, FALSE, "6093");
  if(\$actor."timer:countdown" \> time()+50)
   EmitTo(\$actor, TAG("1 minute to go.", "imp"));
 \} else  if(\$actor."timer:countdown" \> time()+30) \{
  \$delay(\$actor."timer:countdown"-time()-30, FALSE, "5230");
  if(\$actor."timer:countdown" \> time()+25)
   EmitTo(\$actor, TAG("30 seconds to go.", "imp"));
 \} else if(\$actor."timer:countdown" \> time()+10) \{
  \$delay(\$actor."timer:countdown"-time()-10, FALSE, "e05c");
  if(\$actor."timer:countdown" \> time()+8)
   EmitTo(\$actor, TAG("10 seconds to go.", "imp"));
 \} else \{
  \$delay(10, FALSE, "cbf0");
 \}
\}
if(\$actor."timer:countdown:id" != \$id) return FALSE;
EmitTo(\$actor, TAG("Time to log off!", "imp"));
\$actor."timer:countdown:id" = nil;
\$actor."timer:countdown" = nil;

return FALSE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1260351942, "tonyd", "E", 1260352138, "tonyd", "P", 1260352279, "tonyd", "P", 1260352388, "tonyd", "P", 1260352471, "tonyd", "P", 1260352587, "tonyd", "P", 1260352651, "tonyd", "P", 1260352729, "tonyd", "P", 1260352770, "tonyd", "P", 1260352829, "tonyd", "P", 1260352936, "tonyd", "P", 1260352951, "tonyd", "P", 1260352969, "tonyd", "P", 1260353271, "tonyd", "P", 1260353559, "tonyd", "P", 1260353566, "tonyd", "P", 1260353653, "tonyd", "P", 1260353712, "tonyd", "P", 1260353779, "tonyd", "P", 1260353837, "tonyd", "P", 1260353874, "tonyd", "P", 1260353904, "tonyd", "P", 1260353914, "tonyd", "P", 1260353928, "tonyd", "P", 1260354058, "tonyd", "P", 1260354112, "tonyd", "P" \})
      </Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Socials:Verb>
</object>
