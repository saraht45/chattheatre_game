<object clone="/usr/SkotOS/obj/verb" owner="SkotOS">
  <Socials:Verb imp="@mark" second="marks" third="marks" evoke="optional" audible="false" private="true" secret="true" obscured="false" target-abstracts="false" disabled="true" ooc="true" raw_verb="true">
    <Ur:UrObject/>
    <Socials:SocialObjects/>
    <Socials:VerbActions/>
    <Core:Properties>
      <Core:Property property="merry:global:command">
         X[M] /* OOC marks this location */

if(!\$line) \{
  EmitTo(\$actor, "Format: @mark list");
  EmitTo(\$actor, "Format: @mark add \<name\>");
  EmitTo(\$actor, "Format: @mark remove \<name\>");
  return FALSE;
\}

\$words = explode(lower_case(\$line), " ");

if(\$words[0] != "list" \&\& \$words[0] != "add" \&\& \$words[0] != "remove") \{
  EmitTo(\$actor, "Unknown Command.");
  EmitTo(\$actor, "Format: @mark list");
  EmitTo(\$actor, "Format: @mark add \<name\>");
  EmitTo(\$actor, "Format: @mark remove \<name\>");
  return FALSE;
\}

if((\$words[0] == "add" \|\| \$words[0] == "remove") \&\& sizeof(\$words) \< 2) \{
  EmitTo(\$actor, "Unknown location name.");
  EmitTo(\$actor, "Format: @mark list");
  EmitTo(\$actor, "Format: @mark add \<name\>");
  EmitTo(\$actor, "Format: @mark remove \<name\>");
  return FALSE;
\}

if(!\$actor."trait:locations") \$actor."trait:locations" = ([ ]);
\$locations = \$actor."trait:locations";

/* are they asking for a list? */
if(\$words[0] == "list") \{
  /* list locations */
  if(!sizeof(map_indices(\$locations))) \{
    EmitTo(\$actor, "You have no locations marked.");
    return FALSE;
  \}
  EmitTo(\$actor, "Marked Locations: ");
  for(\$i=0;\$i\<sizeof(map_indices(\$locations));\$i++) \{
    if(\$locations[map_indices(\$locations)[\$i]][0]) \{
      EmitTo(\$actor, map_indices(\$locations)[\$i]+" - "+\$locations[map_indices(\$locations)[\$i]][1]);
    \} else \{
      \$locations[map_indices(\$locations)[\$i]] = nil;
      \$actor."trait:locations" = \$locations;
      \$i--;
    \}
  \}
\} else if(\$words[0] == "add") \{
  \$name = implode(\$words[1..sizeof(\$words)-1], " ");

  if(\$locations[\$name]) \{
    EmitTo(\$actor, "Location target for \\""+\$name+"\\" replaced.");
    /*
    \$locations[\$name] = (\{ \$actor."base:environment", Str(UnSAM(\$actor."base:environment"."details:default:description:brief")) \});
    */
    \$locations[\$name] = (\{ \$actor."base:environment", Describe(\$actor."base:environment") \});
  \} else \{
    EmitTo(\$actor, "Location target for \\""+\$name+"\\" added.");
    /*
    \$locations[\$name] = (\{ \$actor."base:environment", Str(UnSAM(\$actor."base:environment"."details:default:description:brief")) \});
    */
    \$locations[\$name] = (\{ \$actor."base:environment", Describe(\$actor."base:environment") \});
  \}
  \$actor."trait:locations" = \$locations;
\} else if(\$words[0] == "remove") \{
  \$name = implode(\$words[1..sizeof(\$words)-1], " ");
  if(\$locations[\$name]) \{
    EmitTo(\$actor, "Location target for \\""+\$name+"\\" removed.");
    \$locations[\$name] = nil;
    \$actor."trait:locations" = \$locations;
  \} else \{
    EmitTo(\$actor, "Location target for \\""+\$name+"\\" not found.");
  \}
\}

return FALSE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1187858090, "tonyd", "E", 1187858481, "tonyd", "P", 1187860649, "tonyd", "P", 1187861505, "tonyd", "P", 1187861783, "tonyd", "P", 1187862392, "tonyd", "P", 1187862461, "tonyd", "P", 1187862501, "tonyd", "P", 1187862535, "tonyd", "P", 1187862602, "tonyd", "P", 1187862638, "tonyd", "P", 1187863922, "tonyd", "P", 1187863979, "tonyd", "R", 1187864082, "tonyd", "R", 1475766583, "jominey", "P", 1475766820, "jominey", "P", 1475766965, "jominey", "P", 1574397234, "jominey", "E" \})
      </Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Socials:Verb>
</object>
