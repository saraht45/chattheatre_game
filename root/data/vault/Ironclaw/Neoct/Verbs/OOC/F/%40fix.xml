<object clone="/usr/SkotOS/obj/verb" owner="tonyd">
  <Socials:Verb imp="@fix" second="@fix" third="@fixes" evoke="optional" audible="false" private="true" secret="true" obscured="false" target-abstracts="false" disabled="false" ooc="true" raw_verb="false">
    <Ur:UrObject/>
    <Socials:SocialObjects>
      <Socials:SocialObject role="what" direct="true" single="true" raw="false" requirement="required" distance="close">
        <Socials:SocObPreps/>
        <Socials:SocObFilters/>
      </Socials:SocialObject>
    </Socials:SocialObjects>
    <Socials:VerbActions/>
    <Core:Properties>
      <Core:Property property="merry:global:command">
         X[M] \$what = NRefOb(\$what[0]);
/* check the actor isn't trying to immobilize something silly */
if(\$what."base:immobile") \{
  if(\$what."base:integration") \{
    EmitTo(\$actor, "That is already immobile.");
  \} else \{
    EmitTo(\$actor, Describe(\$what)+" is already immobile.");
  \}
  return FALSE;
\} else if(\$what."base:volition") \{
  EmitTo(\$actor, "You can't immobilize "+Describe(\$what)+".");
  return FALSE;
\} else if(\$what == \$actor."base:environment") \{
  EmitTo(\$actor, Describe(\$what)+" is already immobile.");
  return FALSE;
\} else if(\$what."base:environment" \&\& (\$what."base:environment" != \$actor."base:environment")) \{
  EmitTo(\$actor, "You can only immobilize things that are in the room.");
  return FALSE;
\}

/* find out what their rank is here */
\$rank = Call(\$\{Ironclaw:Lib:Guilds:Guild\}, "get_rank", \$who: \$actor, \$guild: Call(\$\{Ironclaw:Lib:Guilds:Guild\}, "get_owner", \$what: \$actor."base:environment"));

/* if they have enough rank, fix it in place */
if(\$rank) \{
  \$what."base:immobile" = 1;
  \$what."guild:fixedrank" = \$rank;
  \$what."guild:fixedby" = \$actor;
  EmitTo(\$actor, "You fix "+Describe(\$what)+" in place.");
  EmitIn(\$actor."base:environment", Describe(\$actor)+" fixes "+Describe(\$what)+" into place.", \$actor);
\} else \{
  /* not enough rank, give error message */
  if(\$what."base:integration") \{
    EmitTo(\$actor, "You do not have enough rank here to fix that in place.");
  \} else \{
    EmitTo(\$actor, "You do not have enough rank here to fix "+Describe(\$what)+" in place.");
  \}
\}

return FALSE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1142480439, "tonyd", "E", 1142480480, "tonyd", "E", 1142480521, "tonyd", "E", 1142482618, "tonyd", "P", 1142482709, "tonyd", "P", 1142482724, "tonyd", "P", 1142483049, "tonyd", "P", 1142483174, "tonyd", "P", 1142483348, "tonyd", "P", 1142483367, "tonyd", "P", 1142485161, "tonyd", "P", 1142485229, "tonyd", "P", 1142485308, "tonyd", "P", 1142485415, "tonyd", "P", 1142485599, "tonyd", "P", 1142487294, "tonyd", "P", 1142487387, "tonyd", "P", 1142488934, "tonyd", "E", 1142489186, "tonyd", "E", 1142489369, "tonyd", "E", 1142489393, "tonyd", "E", 1142489519, "tonyd", "E", 1142489578, "tonyd", "E", 1142489636, "tonyd", "E", 1142489688, "tonyd", "E", 1142489717, "tonyd", "E", 1142489804, "tonyd", "E", 1142489941, "tonyd", "E", 1142490225, "tonyd", "E", 1142499921, "tonyd", "E", 1142499949, "tonyd", "E", 1142513821, "tonyd", "E", 1142514269, "tonyd", "E", 1172498509, "librarysage", "R", 1231205028, "jominey", "E" \})
      </Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Socials:Verb>
</object>
