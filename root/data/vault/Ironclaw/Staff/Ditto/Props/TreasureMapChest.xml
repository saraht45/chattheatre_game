<object clone="/base/obj/thing" owner="meandmine">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Allegory:Props:Furniture:UrFurnitureContainer)"/>
    <Base:Bulk immobile="false" mass="40" density="2"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="2" maxweight="100" verb2="contain" verb3="contains"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="board"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="boards"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="game"/>
          <Base:Adjective adjective="large"/>
          <Base:Adjective adjective="rectangular"/>
          <Base:Adjective adjective="wood"/>
          <Base:Adjective adjective="wooden"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             large, wooden game board
          </Base:Description>
          <Base:Description type="examine">
             A large, wooden game board with random tiles, latches, hinges, and symbols scattered on its surface. Each tile and symbol can be examined, as each is a detailed engraving. {? | $(this.open:steps) | The bottom of this game board has opened up. | This is a thick game board that seems hollow. }
          </Base:Description>
          <Base:Description type="look">
             A large, wooden game board with pictures scattered on its surface. {? | $(this.open:steps) |The bottom of this game board has opened up. | This is a thick game board that seems hollow.}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="true" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="edge" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="false" under="false" on="false" inside="false" near="true" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="pattern"/>
            <Base:SName sname="symbol"/>
            <Base:SName sname="puzzle"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="patterns"/>
            <Base:PName pname="symbols"/>
            <Base:PName pname="puzzles"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="strange"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the strange patterns of the game board
          </Base:Description>
          <Base:Description type="examine">
             Around the edge of the game board is a strange pattern of horizontal and diagonal lines that seem simultaneously random and somehow familiar.<propcheck skill="career:scholar" min="8"> The pattern seems to be made of pieces of letters. </propcheck><propcheck skill="academics:history" min="10"> The patterns seem to be made of partial letters and almost words.</propcheck><propcheck skill="career:translator" min="4">  The patterns seem to be made of partial letters, where all the letters are missing their lines that slant from right to left.</propcheck>
          </Base:Description>
          <Base:Description type="look">
             Around the edge of the game board is a strange pattern of horizontal and diagonal lines.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="hinges" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="false" under="false" on="false" inside="false" near="true" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="hinge"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="hinges"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="brass"/>
          <Base:Adjective adjective="small"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             game board's hinges
          </Base:Description>
          <Base:Description type="examine">
             Small brass hinges decorate this game board and most of them appear to have no real purpose.
          </Base:Description>
          <Base:Description type="look">
             Small brass hinges decorate this game board.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="latches" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="false" under="false" on="false" inside="false" near="true" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="latch"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="latches"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="brass"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             game board's latches
          </Base:Description>
          <Base:Description type="examine">
             The bottom and sides of this game board are decorated with small brass latches that click when opened and closed. {? greaterthan | $(this.open:steps) | 1 | They has been cleverly arranged so that the false bottom is now unlocked. | The latches are not arranged so that anything happens. }
          </Base:Description>
          <Base:Description type="look">
             The bottom and sides of this game board are decorated with small brass latches that click when opened and closed.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="scroll" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="picture"/>
            <Base:SName sname="scroll"/>
            <Base:SName sname="puzzle"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="pictures"/>
            <Base:PName pname="scrolls"/>
            <Base:PName pname="puzzles"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="subtle"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             scroll picture
          </Base:Description>
          <Base:Description type="examine">
             A subtle picture of a rolled up scroll is engraved on the back of this chest.<propcheck skill="mental:observation" min="24"> You see that the scroll has been pulled on often.</propcheck><propcheck-not skill="mental:observation" min="24"><propcheck skill="mental:observation" min="18"> With insightful observation you spot the wear and tear on this scroll from all the manhandling.</propcheck></propcheck-not><propcheck-not skill="mental:observation" min="18"><propcheck skill="mental:observation" min="10"> Your keen eye notice that this picture is a carved figurine of a scroll put onto the chest.</propcheck></propcheck-not><propcheck-not skill="mental:observation" min="10"><propcheck skill="mental:observation" min="5">  You notice some very good shadow detailing in this picture.</propcheck></propcheck-not>
          </Base:Description>
          <Base:Description type="look">
             A subtle scroll picture is engraved on the back of this chest.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="silhouette" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="puzzle"/>
            <Base:SName sname="picture"/>
            <Base:SName sname="silhouette"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="silhouettes"/>
            <Base:PName pname="pictures"/>
            <Base:PName pname="puzzles"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             silhouetted picture
          </Base:Description>
          <Base:Description type="examine">bla</Base:Description>
          <Base:Description type="look">
             A silhouetted boar picture is engraved sneakily within the elaborate swirls picture.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="spear" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="spear"/>
            <Base:SName sname="picture"/>
            <Base:SName sname="puzzle"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="puzzles"/>
            <Base:PName pname="spears"/>
            <Base:PName pname="pictures"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="gold-leaf"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             spear picture
          </Base:Description>
          <Base:Description type="examine">
             A gold-leaf picture of a spear is engraved on the lid.  It is accurately detailed to represent a warrior's spear.<propcheck skill="career:jeweler" min="24"> You can not help feeling the urge to turn this spear picture.</propcheck><propcheck-not skill="career:jeweler" min="24"><propcheck skill="career:jeweler" min="20"> The more you look at this picture of a spear the more you realize it is crooked.</propcheck></propcheck-not><propcheck-not skill="career:jeweler" min="20"><propcheck skill="career:jeweler" min="13">  Wear and tear makes you realize this picture moves.</propcheck></propcheck-not><propcheck-not skill="career:jeweler" min="13"><propcheck skill="career:jeweler" min="7">  This engraving has lost some of it's gold leaf.</propcheck></propcheck-not>
          </Base:Description>
          <Base:Description type="look">
             A gold-leaf spear picture is engraved on the lid.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="star" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="star"/>
            <Base:SName sname="picture"/>
            <Base:SName sname="puzzle"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="puzzles"/>
            <Base:PName pname="pictures"/>
            <Base:PName pname="stars"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="elabrorate"/>
          <Base:Adjective adjective="large"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             star picture
          </Base:Description>
          <Base:Description type="examine">
             A large picture of a star is right under the lock of this chest. Is is an elaborate five pointed star.<propcheck skill="social:painter" min="24"> You can immediately tell by the wearing down of the picture that you are suppose to push the star.</propcheck><propcheck-not skill="social:painter" min="24"><propcheck skill="social:painter" min="15"> You see that some points of the star are more faded then other.</propcheck></propcheck-not><propcheck-not skill="social:painter" min="16"><propcheck skill="social:painter" min="13"> Looks like a lot of people have touched this star .</propcheck></propcheck-not><propcheck-not skill="social:painter" min="13"><propcheck skill="social:painter" min="7">  This picture seems almost pristine aside from the fading of the points.</propcheck></propcheck-not>
          </Base:Description>
          <Base:Description type="look">
             A large star picture is engraved under the lock.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="swirl" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="puzzle"/>
            <Base:SName sname="picture"/>
            <Base:SName sname="swirl"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="puzzles"/>
            <Base:PName pname="pictures"/>
            <Base:PName pname="swirls"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="intricate"/>
          <Base:Adjective adjective="prominent"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             swirl picture
          </Base:Description>
          <Base:Description type="examine">
             A intricate swirl pattern is prominent. The eye catching engraving may distract you from other pictures.<propcheck skill="alteration:woodcarving" min="24"> With all of your experience with woody things you can see how to rotate this swirl.</propcheck><propcheck-not skill="alteration:woodcarving" min="24"><propcheck skill="alteration:woodcarving" min="17"> You see discolored wood around the swirl in a circular pattern.</propcheck></propcheck-not><propcheck-not skill="alteration:woodcarving" min="17"><propcheck skill="alteration:woodcarving" min="11"> They way the swirl lays on the woods makes you think it moves.</propcheck></propcheck-not><propcheck-not skill="alteration:woodcarving" min="11"><propcheck skill="alteration:woodcarving" min="6">  The swirling pattern looks like a lot of people have fiddled with it.</propcheck></propcheck-not>
          </Base:Description>
          <Base:Description type="look">
             An intricate swirl patterned is engraved prominently.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="tower" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="tower"/>
            <Base:SName sname="picture"/>
            <Base:SName sname="puzzle"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="puzzles"/>
            <Base:PName pname="towers"/>
            <Base:PName pname="pictures"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="simple"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             tower picture
          </Base:Description>
          <Base:Description type="examine">
             A simple picture of a tower graces the left side of this chest.  It seems to be the negative relief engraving.<propcheck skill="academics:history" min="24"> Your knowledge is useful in determining this tower engraving should slide easily.</propcheck><propcheck-not skill="academics:history" min="24"><propcheck skill="academics:history" min="16"> You see deep gouges next to the tower and can tell that this piece moves directionally.</propcheck></propcheck-not><propcheck-not skill="academics:history" min="16"><propcheck skill="academics:history" min="11"> Feeling this tower you see that it wiggles a bit and probably moves somehow.</propcheck></propcheck-not><propcheck-not skill="academics:history" min="11"><propcheck skill="academics:history" min="5">  This  tower picture has seen many fingers in it's past.</propcheck></propcheck-not>
          </Base:Description>
          <Base:Description type="look">
             A simple  tower picture is engraved on the left side of this chest.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:merry:act:start">
         X[M] \$delay(0.2, TRUE, "e19c");                    
Set(\$this, "details:default:exit:closed:silently", TRUE);                    
return TRUE;
      </Core:Property>
      <Core:Property property="export:merry:react-post:close-what">
         X[M] \$targ = \$this;       
\$gap = 0.2;            
\$msg1 = "The image of a ";            
\$msg2 = " itself back into its original place on " +Describe(\$targ, nil, nil, STYLE_NONPOSS)+".";        
\$delay(\$gap, TRUE, "e61f");            
if(\$targ."open:steps" == 8) \{            
EmitIn(\$actor."base:environment", \$msg1+"swirl rotates"+\$msg2);            
Set(\$targ, "open:steps", 7);            
\}           
\$delay(\$gap, TRUE, "5fec");            
if(\$targ."open:steps" == 7) \{            
EmitIn(\$actor."base:environment", \$msg1+"silhouette drags"+\$msg2);            
Set(\$targ, "open:steps", 6);            
\}                
\$delay(\$gap, TRUE, "69d1");            
if(\$targ."open:steps" == 6) \{            
EmitIn(\$actor."base:environment", \$msg1+"spear turns"+\$msg2);            
Set(\$targ, "open:steps", 5);            
\}             
\$delay(\$gap, TRUE, "42bd");            
if(\$targ."open:steps" == 5) \{            
EmitIn(\$actor."base:environment", \$msg1+"scroll pushes"+\$msg2);            
Set(\$targ, "open:steps", 4);            
\}             
\$delay(\$gap, TRUE, "6fa8");            
if(\$targ."open:steps" == 4) \{            
EmitIn(\$actor."base:environment", \$msg1+"star pulls"+\$msg2);            
Set(\$targ, "open:steps", 3);            
\}             
\$delay(\$gap, TRUE, "4b33");            
if(\$targ."open:steps" == 3) \{            
EmitIn(\$actor."base:environment", \$msg1+"tower slides"+\$msg2);            
Set(\$targ, "open:steps", 2);            
\}                 
return TRUE;
      </Core:Property>
      <Core:Property property="export:merry:react-post:drag-dob">
         X[M] if(\$dob \&\& sizeof(\$dob) == 1 \&\& NRefDetail(\$dob[0]) != "default") Call(\$\{Ironclaw:Staff:Ditto:Props:TreasureMapChest\}, "puzzlebox", \$actor: \$actor, \$verb: \$verb, \$targ: NRefOb(\$dob[0]));                   
return TRUE;
      </Core:Property>
      <Core:Property property="export:merry:react-post:fiddle-dob">
         X[M] if(\$dob \&\& sizeof(\$dob) == 1 \&\& NRefDetail(\$dob[0]) == "latches") \{                       
if(\$this."open:steps") \{                       
EmitTo(\$actor, "The latches are already open. Your efforts are in vain.");                       
EmitIn(\$actor."base:environment", "The latches are already open. "+Describe(\$actor)+"'s effort is in vain.", \$actor);                       
\} else \{                       
if(\$actor."skill:mental:observation" \|\| \$actor."skill:career:scholar") \{                       
EmitTo(\$actor, "You fiddle with the latches until they all click open.");                       
EmitIn(\$actor."base:environment", Describe(\$actor)+ " fiddles with the latches until they are all open.", \$actor);                       
Set(\$this, "open:steps", 1);                       
\} else \{                       
EmitTo(\$actor, "You did your best but this may require someone with a different set of skills. You might consider one who understands the puzzles.");                       
EmitIn(\$actor."base:environment", Describe(\$actor)+ " tries "+\$actor."base:possessive"+" best yet to no avail.", \$actor);                       
\}                       
\}                       
\}                       
return TRUE;
      </Core:Property>
      <Core:Property property="export:merry:react-post:pull-dob">
         X[M] if(\$dob \&\& sizeof(\$dob) == 1 \&\& NRefDetail(\$dob[0]) != "default") Call(\$\{Ironclaw:Staff:Ditto:Props:TreasureMapChest\}, "puzzlebox", \$actor: \$actor, \$verb: \$verb, \$targ: NRefOb(\$dob[0]));                   
return TRUE;
      </Core:Property>
      <Core:Property property="export:merry:react-post:push-dob">
         X[M] if(\$dob \&\& sizeof(\$dob) == 1 \&\& NRefDetail(\$dob[0]) != "default") Call(\$\{Ironclaw:Staff:Ditto:Props:TreasureMapChest\}, "puzzlebox", \$actor: \$actor, \$verb: \$verb, \$targ: NRefOb(\$dob[0]));                   
return TRUE;
      </Core:Property>
      <Core:Property property="export:merry:react-post:rotate-dob">
         X[M] if(\$dob \&\& sizeof(\$dob) == 1 \&\& NRefDetail(\$dob[0]) != "default") Call(\$\{Ironclaw:Staff:Ditto:Props:TreasureMapChest\}, "puzzlebox", \$actor: \$actor, \$verb: \$verb, \$targ: NRefOb(\$dob[0]));                   
return TRUE;
      </Core:Property>
      <Core:Property property="export:merry:react-post:slide-dob">
         X[M] if(\$dob \&\& sizeof(\$dob) == 1 \&\& NRefDetail(\$dob[0]) != "default") Call(\$\{Ironclaw:Props:Plot:Tsunami:Chest\}, "puzzlebox", \$actor: \$actor, \$verb: \$verb, \$targ: NRefOb(\$dob[0]));                   
return TRUE;
      </Core:Property>
      <Core:Property property="export:merry:react-post:turn-dob">
         X[M] if(\$dob \&\& sizeof(\$dob) == 1 \&\& NRefDetail(\$dob[0]) != "default") Call(\$\{Ironclaw:Props:Plot:Tsunami:Chest\}, "puzzlebox", \$actor: \$actor, \$verb: \$verb, \$targ: NRefOb(\$dob[0]));                   
return TRUE;
      </Core:Property>
      <Core:Property property="export:merry:react-pre:break-dob">
         X[M] if(\$dob \&\& sizeof(\$dob) == 1 \&\& NRefDetail(\$dob[0]) == "lock") \{                      
                     
if(!\$this."open:steps") \{                     
   EmitTo(\$actor, "It was a good attempt however the lock can be reached easily while " +Describe(\$this, nil, nil, STYLE_NONPOSS)+ " is still covered in barnacles.");                     
   EmitIn(\$actor."base:environment", Describe(\$actor)+ " fails to break the lock due to the massive covering of barnacles.", \$actor);                     
   return FALSE;                     
\}                     
if(\$this."open:steps" \> 1) \{                     
   EmitTo(\$actor, "The lock is already broken.");                     
   return FALSE;                     
\}                     
                     
if(\$this."open:steps" == 1) \{                     
   if(\$actor."skill:career:blacksmith") \{                     
      EmitTo(\$actor, "You cleanly snap the lock in two. Although still rusted to " +Describe(\$this, nil, nil, STYLE_NONPOSS)+ ", it no longer has a hold upon it.");                     
      EmitIn(\$actor."base:environment", Describe(\$actor)+ " cleanly snaps the lock in two. Although still rusted to " +Describe(\$this, nil, nil, STYLE_NONPOSS)+ ", it no longer has a hold upon it.", \$actor);                     
      Set(\$this, "open:steps", 2);                     
   \} else \{                     
      EmitTo(\$actor, "You did your best but this may require someone with a different set of skills. You might consider one who understands metal.");                       
      EmitIn(\$actor."base:environment", Describe(\$actor)+ " tries "+\$actor."base:possessive"+" best yet to no avail.", \$actor);                     
      return FALSE;                     
   \}                     
\}                       
\}                     
return TRUE;
      </Core:Property>
      <Core:Property property="export:merry:react-pre:open-what">
         X[M] if(\$this."open:steps" \&\& \$this."open:steps"\>7) \{                        
return TRUE;                        
\} else \{                        
if(!\$this."open:steps") EmitTo(\$actor, "The barnacles keep " +Describe(\$this, nil, nil, STYLE_NONPOSS)+ " sealed tight and would need to be scraped off.");                        
if(\$this."open:steps") \{                        
if(\$this."open:steps" == 1) \{                        
EmitTo(\$actor, "A rusty lock keeps " +Describe(\$this, nil, nil, STYLE_NONPOSS)+ " sealed tight and would need to be broken off.");                        
\} else \{                        
EmitTo(\$actor, "Having cleared "+Describe(\$this, nil, nil, STYLE_NONPOSS)+" of most of the barnacles and removal of the rusty lock has not unsealed the container. It appears there may be other steps to be taken. Perhaps they are revealed in the images upon its surface.");                        
\}                        
\}                        
return FALSE;                        
\}
      </Core:Property>
      <Core:Property property="export:open:map">
         ([ "drag":(\{ "silhouette", 6 \}), "pull":(\{ "scroll", 4 \}), "push":(\{ "star", 3 \}), "rotate":(\{ "swirl", 7 \}), "slide":(\{ "tower", 2 \}), "turn":(\{ "spear", 5 \}) ])
      </Core:Property>
      <Core:Property property="export:trait:brief">
         "treasure chest"
      </Core:Property>
      <Core:Property property="export:trait:examine">
         "A rectangular structure with four walls and a lid for storage."
      </Core:Property>
      <Core:Property property="export:trait:objecttype">
         "chest"
      </Core:Property>
      <Core:Property property="export:writable">1</Core:Property>
      <Core:Property property="merry:act:start">
         X[M] \$delay(0.2, TRUE, "a6a4");                    
Set(\$this, "details:default:exit:closed:silently", TRUE);                    
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:puzzlebox">
         X[M] /*                       
 * step 1 - scrape barnacles (must be carpenter or sailor)                      
 * step 2 - break rusty lock - blacksmith                      
 * step 3 - solve puzzle                                
 * reset each time they mess up                      
 * electrical shock when they mess up                      
 * skill checks examining appropriate details to determine what to do.                      
 * When done, open chest                      
 * Inside chest is map - NEED TO MAKE                      
 */                      
                                 
/* send object as \$targ */                      
                      
/*                      
 * track steps via \$chest."open:steps"                      
 * step nil = nothing has been done yet                      
 * step 1 = barnacles removed                      
 * step 2 = lock broken                      
 * step 3 = slide tower done                      
 * step 4 = push star done                      
 * step 5 = pull scroll done                      
 * step 6 = turn spear done                      
 * step 7 = drag silh done                      
 * step 8 = rotate swirl done and can be opened                      
 */                   
                  
if(\$targ."open:steps") \{                 
   \$map = Get(\$this, "open:map");                 
   \$det_exp = \$map[\$verb][0];                 
   \$det = NRefDetail(\$dob[0]);                  
   if(\$det == \$det_exp) \{                        
      \$timing = \$map[\$verb][1];                 
      \$step = Get(\$targ, "open:steps");                 
      if(\$timing == \$step) \{                 
         EmitIn(\$actor."base:environment", "The "+\$det+" moves into place with an audible *click*.");               
         Set(\$targ, "open:steps", \$step+1);               
      \} else \{                 
         if(\$targ."open:steps" \> 2) Call(\$\{Ironclaw:Props:Plot:Tsunami:Chest\}, "puzzlereset", \$targ: \$targ, \$actor: \$actor);                 
      \}                 
   \} else \{                 
      if(\$targ."open:steps" \> 2) Call(\$\{Ironclaw:Props:Plot:Tsunami:Chest\}, "puzzlereset", \$targ: \$targ, \$actor: \$actor);                  
   \}                 
\}                      
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:puzzlereset">
         X[M] EmitTo(\$actor, "A shock of electricity briefly emanates throughout your body.");            
EmitIn(\$actor."base:environment", Describe(\$actor)+ " seizes involuntarily as a shock of electricity briefly emanates through " +\$actor."base:possessive"+ " body.", \$actor);            
\$gap = 0.2;            
\$msg1 = "The image of a ";            
\$msg2 = " itself back into its original place on " +Describe(\$targ, nil, nil, STYLE_NONPOSS)+".";            
\$delay(\$gap, TRUE, "5fec");            
if(\$targ."open:steps" == 7) \{            
EmitIn(\$actor."base:environment", \$msg1+"silhouette drags"+\$msg2);            
Set(\$targ, "open:steps", 6);            
\}                
\$delay(\$gap, TRUE, "69d1");            
if(\$targ."open:steps" == 6) \{            
EmitIn(\$actor."base:environment", \$msg1+"spear turns"+\$msg2);            
Set(\$targ, "open:steps", 5);            
\}             
\$delay(\$gap, TRUE, "42bd");            
if(\$targ."open:steps" == 5) \{            
EmitIn(\$actor."base:environment", \$msg1+"scroll pushes"+\$msg2);            
Set(\$targ, "open:steps", 4);            
\}             
\$delay(\$gap, TRUE, "6fa8");            
if(\$targ."open:steps" == 4) \{            
EmitIn(\$actor."base:environment", \$msg1+"star pulls"+\$msg2);            
Set(\$targ, "open:steps", 3);            
\}             
\$delay(\$gap, TRUE, "4b33");            
if(\$targ."open:steps" == 3) \{            
EmitIn(\$actor."base:environment", \$msg1+"tower slides"+\$msg2);            
Set(\$targ, "open:steps", 2);            
\}                 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:close-what">
         X[M] \$targ = \$this;       
\$gap = 0.2;            
\$msg1 = "The image of a ";            
\$msg2 = " itself back into its original place on " +Describe(\$targ, nil, nil, STYLE_NONPOSS)+".";       
\$delay(\$gap, TRUE, "2829");            
if(\$targ."open:steps" == 8) \{            
EmitIn(\$actor."base:environment", \$msg1+"swirl rotates"+\$msg2);            
Set(\$targ, "open:steps", 7);            
\}             
\$delay(\$gap, TRUE, "5fec");            
if(\$targ."open:steps" == 7) \{            
EmitIn(\$actor."base:environment", \$msg1+"silhouette drags"+\$msg2);            
Set(\$targ, "open:steps", 6);            
\}                
\$delay(\$gap, TRUE, "69d1");            
if(\$targ."open:steps" == 6) \{            
EmitIn(\$actor."base:environment", \$msg1+"spear turns"+\$msg2);            
Set(\$targ, "open:steps", 5);            
\}             
\$delay(\$gap, TRUE, "42bd");            
if(\$targ."open:steps" == 5) \{            
EmitIn(\$actor."base:environment", \$msg1+"scroll pushes"+\$msg2);            
Set(\$targ, "open:steps", 4);            
\}             
\$delay(\$gap, TRUE, "6fa8");            
if(\$targ."open:steps" == 4) \{            
EmitIn(\$actor."base:environment", \$msg1+"star pulls"+\$msg2);            
Set(\$targ, "open:steps", 3);            
\}             
\$delay(\$gap, TRUE, "4b33");            
if(\$targ."open:steps" == 3) \{            
EmitIn(\$actor."base:environment", \$msg1+"tower slides"+\$msg2);            
Set(\$targ, "open:steps", 2);            
\}                 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:drag-dob">
         X[M] if(\$dob \&\& sizeof(\$dob) == 1 \&\& NRefDetail(\$dob[0]) != "default") Call(\$\{Ironclaw:Staff:Ditto:Props:TreasureMapChest\}, "puzzlebox", \$actor: \$actor, \$verb: \$verb, \$targ: NRefOb(\$dob[0]));                   
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:pull-dob">
         X[M] if(\$dob \&\& sizeof(\$dob) == 1 \&\& NRefDetail(\$dob[0]) != "default") Call(\$\{Ironclaw:Staff:Ditto:Props:TreasureMapChest\}, "puzzlebox", \$actor: \$actor, \$verb: \$verb, \$targ: NRefOb(\$dob[0]));                   
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:push-dob">
         X[M] if(\$dob \&\& sizeof(\$dob) == 1 \&\& NRefDetail(\$dob[0]) != "default") Call(\$\{Ironclaw:Staff:Ditto:Props:TreasureMapChest\}, "puzzlebox", \$actor: \$actor, \$verb: \$verb, \$targ: NRefOb(\$dob[0]));                   
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:rotate-dob">
         X[M] if(\$dob \&\& sizeof(\$dob) == 1 \&\& NRefDetail(\$dob[0]) != "default") Call(\$\{Ironclaw:Staff:Ditto:Props:TreasureMapChest\}, "puzzlebox", \$actor: \$actor, \$verb: \$verb, \$targ: NRefOb(\$dob[0]));                   
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:scrape-dob">
         X[M] if(\$dob \&\& sizeof(\$dob) == 1 \&\& NRefDetail(\$dob[0]) == "barnacles") \{                       
if(\$this."open:steps") \{                       
EmitTo(\$actor, "Most of the barnacles have been scraped off previously. Your efforts are in vain.");                       
EmitIn(\$actor."base:environment", "Most of the barnacles have been scraped off previously. "+Describe(\$actor)+"'s effort is in vain.", \$actor);                       
\} else \{                       
if(\$actor."skill:career:carpenter" \|\| \$actor."skill:career:sailor") \{                       
EmitTo(\$actor, "You toil and scrape until most of the barnacles are cleared from " +Describe(\$this, nil, nil, STYLE_NONPOSS)+ ".");                       
EmitIn(\$actor."base:environment", Describe(\$actor)+ " toils and scrapes until most of the barnacles are cleared from " +Describe(\$this, nil, nil, STYLE_NONPOSS)+ ".", \$actor);                       
Set(\$this, "open:steps", 1);                       
\} else \{                       
EmitTo(\$actor, "You did your best but this may require someone with a different set of skills. You might consider one who understands the sea or how to handle lumber.");                       
EmitIn(\$actor."base:environment", Describe(\$actor)+ " tries "+\$actor."base:possessive"+" best yet to no avail.", \$actor);                       
\}                       
\}                       
\}                       
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:slide-dob">
         X[M] if(\$dob \&\& sizeof(\$dob) == 1 \&\& NRefDetail(\$dob[0]) != "default") Call(\$\{Ironclaw:Props:Plot:Tsunami:Chest\}, "puzzlebox", \$actor: \$actor, \$verb: \$verb, \$targ: NRefOb(\$dob[0]));                   
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:turn-dob">
         X[M] if(\$dob \&\& sizeof(\$dob) == 1 \&\& NRefDetail(\$dob[0]) != "default") Call(\$\{Ironclaw:Props:Plot:Tsunami:Chest\}, "puzzlebox", \$actor: \$actor, \$verb: \$verb, \$targ: NRefOb(\$dob[0]));                   
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:break-dob">
         X[M] if(\$dob \&\& sizeof(\$dob) == 1 \&\& NRefDetail(\$dob[0]) == "lock") \{                      
                     
if(!\$this."open:steps") \{                     
   EmitTo(\$actor, "It was a good attempt however the lock cannot be reached easily while " +Describe(\$this, nil, nil, STYLE_NONPOSS)+ " is still covered in barnacles.");                     
   EmitIn(\$actor."base:environment", Describe(\$actor)+ " fails to break the lock due to the massive covering of barnacles.", \$actor);                     
   return FALSE;                     
\}                     
if(\$this."open:steps" \> 1) \{                     
   EmitTo(\$actor, "The lock is already broken.");                     
   return FALSE;                     
\}                     
                     
if(\$this."open:steps" == 1) \{                     
   if(\$actor."skill:career:blacksmith") \{                     
      EmitTo(\$actor, "You cleanly snap the lock in two. Although still rusted to " +Describe(\$this, nil, nil, STYLE_NONPOSS)+ ", it no longer has a hold upon it.");                     
      EmitIn(\$actor."base:environment", Describe(\$actor)+ " cleanly snaps the lock in two. Although still rusted to " +Describe(\$this, nil, nil, STYLE_NONPOSS)+ ", it no longer has a hold upon it.", \$actor);                     
      Set(\$this, "open:steps", 2);                     
   \} else \{                     
      EmitTo(\$actor, "You did your best but this may require someone with a different set of skills. You might consider one who understands metal.");                       
      EmitIn(\$actor."base:environment", Describe(\$actor)+ " tries "+\$actor."base:possessive"+" best yet to no avail.", \$actor);                     
      return FALSE;                     
   \}                     
\}                       
\}                     
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:open-what">
         X[M] if(\$this."open:steps" \&\& \$this."open:steps"\>7) \{                        
return TRUE;                        
\} else \{                        
if(!\$this."open:steps") EmitTo(\$actor, "The latches keep " +Describe(\$this, nil, nil, STYLE_NONPOSS)+ " sealed tight.");                        
if(\$this."open:steps") \{                        
if(\$this."open:steps" == 1) \{                        
EmitTo(\$actor, "A latches keeps " +Describe(\$this, nil, nil, STYLE_NONPOSS)+ " sealed tight need to be manipulated somehow.");                        
\} else \{                        
EmitTo(\$actor, "Having rearranged"+Describe(\$this, nil, nil, STYLE_NONPOSS)+" all of the latches are open.");                        
\}                        
\}                        
return FALSE;                        
\}
      </Core:Property>
      <Core:Property property="open:map">
         ([ "drag":(\{ "silhouette", 6 \}), "pull":(\{ "scroll", 4 \}), "push":(\{ "star", 3 \}), "rotate":(\{ "swirl", 7 \}), "slide":(\{ "tower", 2 \}), "turn":(\{ "spear", 5 \}) ])
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1310397716, "meandmine", "X", 1310399019, "meandmine", "P", 1310399027, "meandmine", "P", 1310399172, "meandmine", "P", 1310399275, "meandmine", "X", 1310402161, "tunk_bodin", "X", 1310402296, "tunk_bodin", "X", 1310404779, "meandmine", "X", 1310404974, "meandmine", "X", 1310407238, "meandmine", "P", 1310407293, "meandmine", "P", 1310407415, "meandmine", "X", 1310407651, "meandmine", "X", 1310407833, "meandmine", "X", 1310408719, "meandmine", "X", 1310409297, "meandmine", "X", 1310409418, "meandmine", "X", 1310410758, "meandmine", "X", 1310412575, "meandmine", "X", 1310413020, "meandmine", "X", 1310414396, "meandmine", "X", 1310415027, "meandmine", "X", 1310415395, "meandmine", "X", 1310415540, "meandmine", "X", 1310415691, "meandmine", "X", 1310416631, "meandmine", "X", 1310417073, "meandmine", "X", 1310417127, "meandmine", "X", 1310417223, "meandmine", "X", 1310417402, "meandmine", "X", 1310417565, "meandmine", "X", 1311476393, "meandmine", "K", 1311476636, "meandmine", "K", 1376087582, "meandmine", "K", 1376087713, "meandmine", "E", 1376087719, "meandmine", "E", 1376093210, "meandmine", "K", 1376093301, "meandmine", "E", 1376093361, "meandmine", "K", 1376093530, "meandmine", "K", 1376093578, "meandmine", "K", 1376093718, "meandmine", "K", 1376093902, "meandmine", "K", 1376094036, "meandmine", "K", 1376095172, "meandmine", "X", 1376095928, "meandmine", "X" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="writable">"true"</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
