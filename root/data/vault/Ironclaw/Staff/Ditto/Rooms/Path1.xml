<object clone="/base/obj/thing" owner="meandmine">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Ironclaw:World:OuterPerimeter:Paths:UrPath)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="1"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="true"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="80" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="path"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="paths"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="examine">
             This section of road stretches from north to south. Thick vegetation and tall trees enclose the road on either side. Tufts of grass edge the dirt path with the occasional grassy island in the center. Three skeletons are to the side of the road.
          </Base:Description>
          <Base:Description type="glance">
             This section of road stretches from northwest to southeast. Thick vegetation and tall trees enclose the road on either side. Tufts of grass edge the dirt path with the occasional grassy island in the center.
          </Base:Description>
          <Base:Description type="look">
             This section of road stretches from northwest to southeast. Thick vegetation and tall trees enclose the road on either side. Tufts of grass edge the dirt path with the occasional grassy island in the center. Three skeletons are to the side of the road.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="exit-north" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="true" inside="false" near="true" over="true" behind="false" before="false" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="stretch"/>
            <Base:SName sname="road"/>
            <Base:SName sname="north"/>
            <Base:SName sname="exit"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="stretches"/>
            <Base:PName pname="exits"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="north"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             stretch of dirt road
          </Base:Description>
          <Base:Description type="examine">
             A long stretch of dirt road  leading up the mountain.
          </Base:Description>
          <Base:Description type="look">
             A long stretch of dirt road leading up the mountain.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit dest="NREF(Ironclaw:Staff:Ditto:Rooms:Hotsprings|exit-north)" door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="exit-south" prime="false" def="false" abstract="false" hidden="false" luminosity="70" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="true" inside="false" near="true" over="false" behind="false" before="false" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="south"/>
            <Base:SName sname="stretch"/>
            <Base:SName sname="road"/>
            <Base:SName sname="exit"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="stretches"/>
            <Base:PName pname="exits"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="south"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             stretch of dirt road
          </Base:Description>
          <Base:Description type="examine">
             A long stretch of dirt road that leads to the campsite.
          </Base:Description>
          <Base:Description type="look">
             A long stretch of dirt road that leads to the campsite.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit dest="NREF(Ironclaw:Staff:Ditto:Rooms:Mountain|exit-north)" door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="skeletons" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="true">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="false" before="false" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="skeleton"/>
            <Base:SName sname="body"/>
            <Base:SName sname="corpse"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="skeletons"/>
            <Base:PName pname="bodies"/>
            <Base:PName pname="corpses"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             three sets of skeletons
          </Base:Description>
          <Base:Description type="examine">
             Three complete sets of skeletons are lying close together.  The lack of flesh and the decaying clothing suggest that these skeletons are quite old.  The closer you get to them the worse the smell of decomposition gets.  You notice a satchel on each skeleton, unfortunately, you must pry the hand of each skeleton off the satchel to see what is inside of it.
          </Base:Description>
          <Base:Description type="look">
             Three complete sets of skeletons are lying close together.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="auto-trait:integration:206347">
         \<[Allegory:Props:Clothing:Containers:Satchel]#206347\>
      </Core:Property>
      <Core:Property property="auto-trait:integration:207216">
         \<[Allegory:Props:Clothing:Containers:Satchel]#207216\>
      </Core:Property>
      <Core:Property property="auto-trait:integration:207257">
         \<[Allegory:Props:Clothing:Containers:Satchel]#207257\>
      </Core:Property>
      <Core:Property property="merry:lib:injure">
         X[M] /*             
** \$who             
** \$where             
*/             
             
\$armor_rating = Int(\$who."career:combat:armor")+Int(\$who."skill:combat:armor");             
if(\$armor_rating \> Int(\$who."combat:armor:rating")) \$armor_rating = Int(\$who."combat:armor:rating");             
             
\$hit = random(12) + 12;             
\$defense = ironclaw::roll(\$roller: \$who, \$skills: (\{ \}), \$bonus: (\{ "trait:body", "skill:combat:endurance", "career:combat:endurance", \$armor_rating \}));             
\$hit = \$hit - \$defense;             
             
if(\$hit \< 1) \$hit = 1;             
if(\$hit \> 6) \$hit = 6;             
             
switch(\$hit) \{             
    case 1:             
        \$adverb = "slight";             
        break;             
    case 2:             
        \$adverb = nil;             
    case 3:             
        \$adverb = "bad";             
        break;             
    case 4:             
        \$adverb = "deep";             
        break;             
    default:             
        \$adverb = "serious";             
\}             
             
Call(\$\{Ironclaw:Lib:Combat:New:hitdescription\}, "describe_hit", \$attacker: \$this, \$action: (\{ "attack", "hurt", \$adverb, \$hit, ([ "injury":\$injury, "lib":\$this ]) \}), \$hitlocation: NewNRef(\$who, \$where), \$victim: \$who);             
             
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:injury:spike">
         X[M] mapping output;            
            
\$desc1 = Describe(\$victim) + " is struck with a spike, leaving a " + \$adverb + " wound on " + Describe(\$hitlocation, \$victim) + ".";            
\$desc2 = TAG("You are struck with a spike, leaving a " + \$adverb + " wound on " + Describe(\$hitlocation, nil, \$victim) + ".", "imp");            
\$desc3 = Describe(\$victim) + " is struck with a spike, leaving a " + \$adverb + " wound on " + Describe(\$hitlocation, \$victim) + ".";            
            
output = ([ "desc":nil, "longdesc":nil, "desc1":\$desc1, "desc2":\$desc2, "desc3":\$desc3, "extras":([ ]) ]);            
return output;
      </Core:Property>
      <Core:Property property="merry:lib:trap:spikes">
         X[M] int i;            
            
EmitTo(\$actor, "A muffled click is heard as you step down on a soft patch of ground. A few moments later, small needle-like spikes rain down on the entire area.");            
            
EmitIn(\$actor."base:environment", "A muffled click is heard as " + Describe(\$actor) + " steps down on a soft patch of ground. A few moments later, small needle-like spikes rain down on the entire area.", \$actor);            
            
\$delay(3, FALSE, "d2c7");            
            
\$inv = \$this."base:inventory";            
            
for(i = 0; i \< sizeof(\$inv); i++) \{            
    if(\$inv[i]."skotos:charname" \&\& (random(2) \> 0 \|\| \$inv[i] == \$actor)) \{            
        \$hit = random(24) + 1;            
        \$bonus = (\{ "trait:speed" \});            
        \$skills = (\{ "combat:dodge", "mental:observation" \});            
            
        \$dodge = ironclaw::roll(\$roller: \$inv[i], \$skills: (\{ "combat:dodge", "mental:observation" \}), \$bonus: (\{ "trait:speed" \}));            
        \$block = 0;            
            
        if(\$inv[i]."base:shield") \{            
            \$block = ironclaw::roll(\$roller: \$inv[i], \$skills: (\{ "combat:shield", "mental:observation" \}), \$bonus: (\{ "trait:speed" \}));            
        \}            
            
        if(\$dodge \>= \$hit) \{            
            EmitTo(\$inv[i], TAG("You dodge out of the way.", "imp"));            
            EmitIn(\$inv[i]."base:environment", Describe(\$inv[i]) + " dodges out of the way.", \$inv[i]);            
        \} else if(\$block \>= \$hit) \{            
            EmitTo(\$inv[i], TAG("You deflect a spike with your shield", "imp"));            
            EmitIn(\$inv[i]."base:environment", Describe(\$inv[i]) + " deflects a spike with " + Str(\$inv[i]."base:possessive") + " shield.", \$inv[i]);            
        \} else \{            
            \$details = (\{ "back", "right-shoulder", "left-shoulder", "right-ear", "left-ear", "head", "right-arm", "left-arm", "right-side", "left-side", "right-leg", "left-leg", "right-hand", "left-hand" \});            
            \$detail = \$details[random(sizeof(\$details))];            
            
            ::injure(\$who: \$inv[i], \$where: \$detail, \$injury: "injury:spike");            
        \}            
    \}            
\}            
            
\$delay(2, FALSE, "0d2a");            
EmitIn(\$actor."base:environment", "The spikes eventually settle and all is still again.");            
            
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:approach">
         X[M] \$delay(3, TRUE, "acfa");           
\$detail = NRefDetail(\$what);           
           
if(Get(\$this, "trap:" + \$detail)) \{           
    \$trap = Get(\$this, "trap:" + \$detail);           
           
    /* Only do something if the trap hasn't be disarmed */           
    if(!\$trap["disarmed"]) \{           
        /* Check if \$actor has spotted the trap. If so, let them approach safely. */           
        /* Otherwise, trigger the trap and set it as disarmed. */           
        if(Get(\$actor, "trap:" + \$detail + ":spotted")) \{           
            EmitTo(\$actor, "You carefully approach " + Describe(\$what) + " and avoid triggering it in the process.");           
        \} else \{           
            if(FindMerry(\$this, "lib", "trap:" + \$trap["type"])) \{           
                Call(\$this, "trap:" + \$trap["type"]);           
            \}           
           
            \$trap["disarmed"] = 1;           
            Set(\$this, "trap:" + \$detail, \$trap);           
        \}           
    \}           
\}           
           
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:examine-what">
         X[M] \$delay(1, TRUE, "acfa");           
\$detail = NRefDetail(\$what[0]);           
           
if(Get(\$this, "trap:" + \$detail)) \{           
    \$trap = Get(\$this, "trap:" + \$detail);           
           
    \$difficulty = 6;           
    if(\$trap["difficulty"]) \$difficulty = \$trap["difficulty"];           
           
    if(Get(\$actor, "trap:" + \$trap["type"] + ":spotted:roll")) \{           
        \$roll = Get(\$actor, "trap:" + \$trap["type"] + ":spotted:roll");           
    \} else \{           
        \$roll = ironclaw::roll(\$roller: \$actor, \$skills: (\{ "career:spy", "career:thief", "mental:observation" \}), \$bonus: (\{ \}));           
    \}           
           
    if(\$roll \>= \$difficulty) \{                   
        if(\$trap["disarmed"]) \{           
            EmitTo(\$actor, "Upon closer examination, you notice a pressure plate has been placed beneath the soil here. It has been recently disarmed and is safe to pass over.");           
        \} else \{           
            EmitTo(\$actor, "Upon closer examination, you notice a pressure plate has been placed beneath the soil here. It should be disarmed before anyone attempts to go near it.");           
        \}           
           
        if(!Get(\$actor, "trap:" + \$detail + ":spotted")) \{           
            Set(\$actor, "trap:" + \$detail + ":spotted", 1);           
            \$delay(300, FALSE, "7d7d");           
            Set(\$actor, "trap:" + \$detail + ":spotted", nil);           
        \}           
    \}           
\}           
           
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:disarm-dob">
         X[M] \$detail = NRefDetail(\$dob[0]);          
          
if(Get(\$this, "trap:" + \$detail)) \{          
    \$trap = Get(\$this, "trap:" + \$detail);          
    \$difficulty = \$trap["difficulty"];          
          
    if(!Get(\$actor, "trap:" + \$detail + ":spotted")) \{          
        return TRUE;          
    \}          
          
    if(\$trap["disarmed"]) \{          
        EmitTo(\$actor, "That trap has already been disarmed.");          
    \} else \{          
        EmitTo(\$actor, "You carefully uncover a pressure plate beneath the soil and proceed to disarm it. It is now safe to pass over.");          
        EmitIn(\$actor."base:environment", Describe(\$actor) + " carefully uncovers a pressure plate beneath the soil and proceeds to disarm it.", \$actor);          
              
        \$trap["disarmed"] = 1;          
            
        Set(\$this, "trap:" + \$detail, \$trap);          
    \}          
\}          
          
return FALSE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1333789610, "meandmine", "X", 1333789662, "meandmine", "X", 1333789720, "meandmine", "X", 1333789758, "meandmine", "X", 1333790206, "meandmine", "K", 1333790591, "meandmine", "E", 1333791428, "meandmine", "E", 1333791455, "meandmine", "K", 1333792622, "meandmine", "E", 1333792900, "meandmine", "P", 1333792918, "meandmine", "P", 1333792928, "meandmine", "P", 1333792963, "meandmine", "P", 1333793078, "meandmine", "P", 1333793092, "meandmine", "P", 1333793179, "meandmine", "K", 1333793182, "meandmine", "K", 1333793253, "meandmine", "X", 1333822683, "meandmine", "X", 1333822954, "meandmine", "X", 1341788740, "meandmine", "X", 1341789522, "slurpeeslurp", "E", 1373847031, "meandmine", "X", 1373847500, "meandmine", "P", 1373847511, "meandmine", "P" \})
      </Core:Property>
      <Core:Property property="searching:randomobjects">
         0
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="sys:emit:population"/>
      <Core:Property property="trait:smells:lastchecked">
         1400202949
      </Core:Property>
      <Core:Property property="trap:exit-north">
         ([ "difficulty":10, "disarmed":1, "type":"spikes" ])
      </Core:Property>
      <Core:Property property="trap:skeletons">
         ([ "difficulty":6, "disarmed":1, "type":"spikes" ])
      </Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
