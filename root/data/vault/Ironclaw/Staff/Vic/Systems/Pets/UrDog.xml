<object clone="/base/obj/thing" owner="SkotOS">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Ironclaw:Staff:Vic:Systems:Pets:Bodies:UrBody)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="true" tight="false" capacity="1" maxweight="1" verb2="carrying via your mouth" verb3="carries in its mouth"/>
    <Base:Misc gender="neuter" volition="true" weapon="false" default_stance="standing" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="dog"/>
            <Base:SName sname="canine"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="canines"/>
            <Base:PName pname="dogs"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="appearance:eyecolor">
         "blue"
      </Core:Property>
      <Core:Property property="appearance:eyeshape">
         "large"
      </Core:Property>
      <Core:Property property="appearance:furcolor">
         "golden"
      </Core:Property>
      <Core:Property property="appearance:furstyle">
         "fluffly"
      </Core:Property>
      <Core:Property property="appearance:furtexture">
         "soft"
      </Core:Property>
      <Core:Property property="appearance:leglength">
         "average"
      </Core:Property>
      <Core:Property property="appearance:legtype">
         "sturdy"
      </Core:Property>
      <Core:Property property="appearance:size">
         "medium-sized"
      </Core:Property>
      <Core:Property property="appearance:species">
         "husky"
      </Core:Property>
      <Core:Property property="appearance:taillength">
         "long"
      </Core:Property>
      <Core:Property property="appearance:tailtype">
         "fluffly"
      </Core:Property>
      <Core:Property property="export:appearance:furtype">
         "fur"
      </Core:Property>
      <Core:Property property="export:appearance:specietype">
         "dog"
      </Core:Property>
      <Core:Property property="export:trait:gait">
         (\{ "bounds" \})
      </Core:Property>
      <Core:Property property="merry:act:start">
         X[M] int gender; 
gender = random(2)+1; 
\$this."base:gender" = gender; 
Set(\$this, "details:default:adjective:"+\$this."base:genderstring"+":local", 1);
      </Core:Property>
      <Core:Property property="merry:lib:asleep">
         X[M] EmitTo(\$actor, "Made it to the Asleep Lib");
\$env = \$this."base:environment";
\$master = \$this."trait:master";
EmitTo(\$actor, "This is the master: " +Describe(\$master));
\$people = \$env."base:inventory";

for(\$i = 0; sizeof(\$people) \> \$i; \$i++) \{
\$delay(60, TRUE, "fd73");
Social(\$this, "snore", "quietly");
\$delay(50, TRUE, "5284");
Social(\$this, "awaken", "gradually");
Set(\$this, "trait:sleep", nil);
\$delay(10, TRUE, "1490");
Social(\$this, "open", "wakefully", nil, nil, NewNRef( \$this, "eyes" ));
\$delay(2, TRUE, "93c7");
Social (\$this, "raise", "easily", nil, "to",  NewNRef( \$this, "feet" ));
Social(\$this, "stretch", "briefly");

if(\$people[\$i] = \$master)\{
Social(\$this, "bark", "then", nil, "at", \$master);
return TRUE;
\} else \{
Social(\$this, "bark", "generally", nil, "at", \$env);
Set(\$this, "trait:sleep", nil);
return TRUE;
\}
\}
      </Core:Property>
      <Core:Property property="merry:lib:commands">
         X[M] /* If the actor gave a command */
\$loca = \$this."base:environment";
if(\$evoke) \{

  /* Resolve any weird variables that might be used */
  if(\$(iob-2) \&\& !\$iob)
    \$iob = \$(iob-2);

  /* remove the quote marks from the command */
  \$command = lower_case(\$evoke[1..strlen(\$evoke)-2]);
  /* If we have any punctuation at the end of the command, remove it */
  if((\$command[strlen(\$command)-1] \< 97) \|\| (\$command[strlen(\$command)-1] \> 122))
    \$command = \$command[0..strlen(\$command)-2];

  if((\$command == "follow") \|\| (\$command == "heel")) \{
if (\$loca."base:volition") \{
EmitTo(\$actor, Describe (this) + " looks up as you confusedly... as if he can't follow your order from his current location.");
return FALSE;
\}
    EmitTo(\$actor, Describe(this)+" will now follow you.");
    this.follow = \$actor;
    Social(this, "pad", nil, nil, "to", \$actor );
  \} else if(\$command == "stay") \{
    EmitTo(\$actor, Describe(this)+ " will no longer follow you.");
    this.follow = nil;
    Social(this, "whine", "sadly" );
  \} else if(\$command == "sit") \{
  if (\$loca."base:volition") \{
EmitTo(\$actor, Describe (this) + " looks up as you confusedly... as if he can't follow your order from his current location.");
return FALSE; \}
    this."base:stance" = 4;
    EmitIn(\$loca, Describe(this)+" sits down.");
  \}
   else if(\$command == "come") \{
if (\$loca."base:volition") \{
EmitTo(\$actor, Describe (this) + " looks up as you confusedly... as if he can't follow your order from his current location.");
return FALSE; \}


  EmitIn(\$this."base:environment", Describe(\$this)+ " quickly runs to " +Describe(\$actor)+ ".");
  \$this."base:proximity" = \$actor;
  \}
  else if (\$command == "beg")\{
  if(\$iob)\{
  Social(this, "sit", "now", nil, "near", \$iob);
  \$delay(2, TRUE, "56e1");
  Social(this, "stare", "adorably", nil, "at", \$iob);
  \$delay(2, TRUE, "90b4");
  Social(this, "whine", "cutely", nil, "at", \$iob);
  return TRUE;
  \}
  Social(this, "beg", "cutely");
  \}
  else if ((\$command == "lay")\|\|(\$command == "lie"))\{
  if(\$this."base:stance" == 3)\{
  EmitIn(\$this."base:environment", Describe(this)+ " looks up confusedly at " +Describe(\$actor)+ " and simply sprawls out further on the ground.", \$actor);
  EmitTo(\$actor, Describe(this)+ " stares up at you confusedly and simply sprawls out further on the ground.");
return FALSE;
\}
Social(this, "flop", "unceremoniously");
\$delay(2, TRUE, "0d1d");
Social(this, "lie");
\}
else if ((\$command == "bed") \|\| (\$command == "sleep"))\{
    Call(\$this, "sleep");
\}
else if ((\$command == "up")\|\|(\$command == "stand"))\{
if(\$this."base:stance" == 5)\{
  EmitIn(\$this."base:environment", Describe(this)+ " looks up confusedly at " +Describe(\$actor)+".");
  EmitTo(\$actor, Describe(this)+ " is already standing.");
return FALSE;
\}
Social(this, "raise", "easily", nil, "to", NewNRef(\$this, "feet"));
\$delay(2, TRUE, "f4b1");
Social(this, "stand", "effortlessly");
\}
else if (\$command == "jump")\{
if (\$loca."base:volition") \{
EmitTo(\$actor, Describe (this) + " looks up as you confusedly... as if he can't follow your order from his current location.");
return FALSE; \}

  Social(this, "jump", "obediently");
  \}else if (\$command == "return")\{
        Call(\$this, "return");
  \}
   else if((\$command == "talk")\|\|(\$command== "speak")\|\|(\$command == "bark")) \{
    if(\$iob) \{

 if ((\$loca."base:volition") \&\& \$loca."base:environment") \{


EmitIn(\$actor."base:environment", Describe (this) + " barks energetically at " + Describe (\$iob)); return FALSE; \}

      Social(this, "bark", "energetically", nil, "at", \$iob);


\} else \{     if ((\$loca."base:volition") \&\& \$loca."base:environment")\{ EmitIn(\$actor."base:environment", Describe (this) + " bark loudly."); return FALSE; \}
    Social(this, "bark", "loudly" );
\}
  \} else if(\$command == "crouch") \{
if (\$loca."base:volition") \{ EmitTo(\$actor, Describe (this) + " looks up as you confusedly... as if he can't follow your order from his current location."); return FALSE; \}

    this."base:stance" = 1;
    EmitIn(this."base:environment", Describe(this)+" crouches.");
  \} else if(\$command == "leap") \{
if (\$loca."base:volition") \{ EmitTo(\$actor, Describe (this) + " looks up as you confusedly... as if he can't follow your order from his current location."); return FALSE; \}

    if(\$iob) \{
      Social(this, "leap", "suddenly", nil, "at", \$iob);
Social (this, "pounce", "heavily", nil, "on", \$iob);
    \} else \{
      Social(this, "leap");
    \}
  \} else if((\$command == "growl")) \{
    if(\$iob) \{
      Social(this, "growl", "threatenedly", nil, "at", \$iob);
 if ((\$loca."base:volition") \&\& \$loca."base:environment")\{ EmitIn(\$actor."base:environment", Describe (this) + " growls threatenedly at " + Describe (\$iob)); return FALSE; \}


    \} else \{

 if ((\$loca."base:volition") \&\& \$loca."base:environment")\{ EmitIn(\$actor."base:environment", Describe (this) + " growls maliciously."); return FALSE; \}

      Social(this, "growl", "threatenedly");
    \}
  \} else if ((\$command == "fetch")\|\|(\$command == "retrieve"))\{
  Call(\$this, "fetch");
  \} else if (\$command == "give")\{
  Call(\$this, "return");
  \} else if (\$command == "drop")\{
  Call(\$this, "drop");
  \}
\}
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:drop">
         X[M] /* Here the dog will drop its inventory on command */
\$loca = \$this."base:environment";

if(\$this."base:inventory" \&\& sizeof(\$this."base:inventory") \> 0) \{

\$treat = \$this."base:inventory";

for(\$i = 0; sizeof(\$treat) \> \$i; \$i++) \{
\$offer = NRefOb(\$treat[0]);

EmitIn(\$loca, Describe(\$this)+ " whines sadly at " +Describe(\$actor)+ " but complies and drops its " +Describe(\$treat[0])+ " at " +\$actor."base:possessive"+ " feet.");
\$delay(2, TRUE, "3345");
Social(\$this, "drop", nil, nil, nil, \$offer);
\}
\}
      </Core:Property>
      <Core:Property property="merry:lib:fetch">
         X[M] /* If the actor gave a command */
\$loca = \$this."base:environment";
\$treat = \$this."base:inventory";

if(!\$iob)\{
EmitTo(\$actor, Describe(\$this)+ " stares up at you wondering what you want it to actually fetch.");
EmitIn(\$actor."base:environment", Describe(\$this)+ " stares at " +Describe(\$actor)+ " funny, wondering what " +\$actor."base:pronoun"+ " wants " +Describe(\$this)+ " to fetch.", \$actor);
return TRUE;
\}

for(\$i = 0; sizeof(\$treat) \> \$i; \$i++) \{
  \$offer = \$treat[0];

if(\$offer)\{
EmitTo(\$actor, Describe(\$this)+ " glances momentarily at " +Describe(\$iob[0])+ " before holding up and showing you " +\$this."base:possessive"+ " " +Describe(\$offer,nil,nil,STYLE_NONPOSS)+ ".");
       EmitIn(\$loca, Describe(\$this)+ " glances momentarily at " +Describe(\$iob[0])+ " before holding up "+\$this."base:possessive"+ " " +Describe(\$offer,nil,nil,STYLE_NONPOSS)+ " instead, showing it to " +Describe(\$actor)+".", \$actor);
        return FALSE;
        \}
        \}

\$pickedup = NRefOb(\$iob[0]);

if(!\$pickedup."base:volition")\{
\$env = \$loca."base:inventory";

for(\$i = 0; sizeof(\$env) \> \$i; \$i++) \{
    if (\$pickedup == \$env[\$i]) \{
        EmitIn(\$loca, Describe(\$this)+ " rushes towards " +Describe(\$iob[0])+ ".");
        \$delay(2, TRUE, "b03a");
        Act(this, "take", \$what: \$iob);


                if(\$pickedup."base:environment" != \$this)\{
                    Social(this, "peer", "briefly", nil, "at", \$iob[0]);
                    \$delay(2, TRUE, "7dcf");
                    Social(this, "turn", "back", nil, "to", \$actor);
                    \$delay(2, TRUE, "2736");
                    Social(this, "sit", nil, nil, "near", NewNRef(\$actor, "feet"));
                    \$delay(2, TRUE, "6095");
                    EmitTo(\$actor, "OOC - Sorry Fiddo just can't fetch certain items.");
                    return FALSE;

                \}
        \$delay(2, TRUE, "c921");
        Social(\$this, "trot", "back", nil, "to", \$actor);
        \$delay(2, TRUE, "e174");
        EmitIn(\$loca, Describe(\$this)+ " holds up "+Describe(\$pickedup,nil,nil,STYLE_NONPOSS)+ " proudly and shows it to " +Describe(\$actor)+ ".");
        return TRUE;
    \}
\}
\}
else \{
EmitIn(\$loca,  Describe(\$this)+ " glances at " +Describe(\$actor)+ " then toward " +Describe(\$iob[0])+ " and decides trying to fetch an actual living creature isn't the best idea.");
return FALSE;
\}
      </Core:Property>
      <Core:Property property="merry:lib:kick">
         X[M] EmitTo(\$actor, Describe(\$this)+ " quickly moves away from you, glaring up at you and growling unhappily."); 
EmitIn(\$actor."base:environment", Describe(\$this)+ " quickly moves to safety and then turns and glares up at " +Describe(\$actor)+ " effectively telling " +\$actor."base:objective"+ " off in a loud growl.", \$actor);
      </Core:Property>
      <Core:Property property="merry:lib:love">
         X[M] EmitTo(\$actor, Describe(\$this)+ " happily snuggles up against you, barking cheerfully and licking your face affectionately."); 
EmitIn(\$actor."base:environment", Describe(\$this)+ " snuggles up with " +Describe(\$actor)+ ", barking cheerfully as " +Describe(\$this)+ " licks " +Describe(\$actor)+ " face affectionately.", \$actor);
      </Core:Property>
      <Core:Property property="merry:lib:return">
         X[M] /* If the actor gave a command */
\$loca = \$this."base:environment";

if(\$this."base:inventory" \&\& sizeof(\$this."base:inventory") \> 0) \{
  \$treat = \$this."base:inventory";
\} else \{
  /*If no inventory; return FALSE*/
  EmitTo(\$actor, Describe(\$this)+ " whines sadly since " +\$this."base:pronoun"+ " has nothing to give you.");
  EmitIn(\$loca, Describe(\$this)+ " whines sadly at " +Describe(\$actor)+ " since " +\$this."base:pronoun"+ " has nothing to offer.", \$actor);
  return FALSE;
 \}

for(\$i = 0; sizeof(\$treat) \> \$i; \$i++) \{
  \$offer = \$treat[0];

  if(\$iob \&\& sizeof(\$iob) \> 1) \{
    EmitTo(\$actor, "You cant do that.");
    return FALSE;
  \} else if(\$iob) \{
    \$person = NRefOb(\$iob[0]);
  \} else \{
    \$person = \$actor;
  \}

  /*Make sure \$person is an actual Chatter(object with volition)*/
  if (!\$person."base:volition") \{
    EmitIn(\$loca, Describe(\$this)+ " peers oddly at " +Describe(\$person)+ " and continues to hold onto "+Describe(\$offer,nil,nil,STYLE_NONPOSS)+".");
    return FALSE;
  \}

  /* offer that item to \$person */
  EmitIn(\$loca, Describe(\$this)+ " trots merrily over to " +Describe(\$person)+ " carrying " +Describe(\$offer,nil,nil,STYLE_NONPOSS)+ ".");
  \$delay(1, TRUE, "f809");
  Act( this, "offer", \$who: \$person, \$what: (\{ \$offer \}) );
  \$delay(0.3, TRUE, "5531");
\}
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:sleep">
         X[M] \$env = \$this."base:environment";
\$bed = Match(\$env, "dogbed");
EmitTo(\$actor, "This is a: " +Describe(\$bed));
if(!\$bed)\{
EmitTo(\$actor, "There is no dog bed here for " +Describe(\$this)+ " to sleep on.");
return FALSE;
\} else \{
if(\$iob)\{
   if (\$iob[0] == \$bed)\{
   EmitTo(\$actor, "Where do you want " +Describe(this)+ " to sleep at?");
return FALSE;
\} else \{
EmitTo(\$actor, "IOB - Going to Bed");
Social(this, "trot", "obediently", nil, "to", \$iob);
\$delay(3, TRUE, "56bc");
Social(this, "flop", "heavily", nil, "onto", \$iob);
Social(this, "lie", "unceremoniously", nil, "on", \$iob);
\$delay(3, TRUE, "37b5");
Social(this, "yawn", "sleepily");
\$delay(4, TRUE, "ffb5");
Social(this, "settle", "eventually", nil, "on", \$iob);
\$delay(2, TRUE, "f5ab");
Social(this, "sleep", "finally");
Set(\$this, "trait:sleep", 1);
EmitTo(\$actor, "Calling up Asleep Lib now");
Call(\$this, "asleep");
return TRUE;
\}
\}

Social(this, "trot", "obediently", nil, "to", \$bed);
\$delay(3, TRUE, "edcc");
Social(this, "flop", "heavily", nil, "onto", \$bed);
Social(this, "lie", "unceremoniously", nil, "on", \$bed);
\$delay(3, TRUE, "e40d");
Social(this, "yawn", "sleepily");
\$delay(4, TRUE, "c061");
Social(this, "settle", "eventually", nil, "on", \$bed);
\$delay(2, TRUE, "592a");
Social(this, "sleep", "finally");
Set(\$this, "trait:sleep", 1);
Call(\$this, "asleep");
return TRUE;
\}
      </Core:Property>
      <Core:Property property="merry:react-post:bark-iob">
         X[M] Social(\$this, "bark", "back", nil, "at", \$actor);
      </Core:Property>
      <Core:Property property="merry:react-post:beckon-dob">
         X[M] \$loca = \$this."base:environment"; 
 
if (\$actor == Get(\$this, "trait:master") ) \{ 
 
if(\$this."base:proximity" == \$actor)\{ 
 
Social(\$this, "peek", "upwardly", nil, "at", \$actor); 
\$delay(2, TRUE, "97c5"); 
 
Social(\$this, "stand", "obviously", nil, "near", \$actor); 
return FALSE; 
\} else \{ 
string verb, adverb, prep; 
verb = oneof( "run", "trot", "scamper", "dash"); 
adverb = oneof("happily", "grinningly", "smilingly", "obediently", "easily", "quickly", "cheerfully"); 
prep = oneof("to", "toward"); 
 
Social(\$this, verb, adverb, nil, prep, \$actor); 
\$this."base:proximity" = \$actor; 
return TRUE; 
\} 
\} 
EmitIn(\$loca, Describe(\$this)+ " ignores " +Describe(\$actor)+ " call."); 
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-post:bite-at">
         X[M] Social(\$this, "whine", "unappreciatively", nil, "at", \$actor); 
EmitIn(\$actor."base:environment", " "); 
EmitTo(\$actor, Describe(\$this)+ " appears indignant as it watches you try to bite it."); 
EmitIn(\$actor."base:environment", Describe(\$this)+ " appears indignant as it watches " +Describe(\$actor)+ " tries to bite it.");
      </Core:Property>
      <Core:Property property="merry:react-post:bite-dob">
         X[M] \$loca = \$this."base:environment"; 
Social(\$this, "yelp", "unhappily", nil, "at", \$actor); 
Social(\$this, "run", "quickly", nil, "from", \$actor, "to", \$loca);
      </Core:Property>
      <Core:Property property="merry:react-post:chew-dob">
         X[M] \$loca = \$this."base:environment"; 
Social(\$this, "yelp", "unhappily", nil, "at", \$actor); 
EmitIn(\$actor."base:environment", " "); 
Social(\$this, "run", "quickly", nil, "from", \$actor, "to", \$loca);
      </Core:Property>
      <Core:Property property="merry:react-post:chew-iob">
         X[M] \$loca = \$this."base:environment"; 
Social(\$this, "yelp", "unhappily", nil, "at", \$actor); 
EmitIn(\$actor."base:environment", " "); 
Social(\$this, "run", "quickly", nil, "from", \$actor, "to", \$loca);
      </Core:Property>
      <Core:Property property="merry:react-post:cuddle-dob">
         X[M] Call(this, "love");
      </Core:Property>
      <Core:Property property="merry:react-post:feed-dob">
         X[M] string food; 
 
\$food = NRefOb(\$iob[0]); 
\$here = \$this."base:environment"; 
 
if (!\$food.dogfood) \{ 
EmitTo(\$actor, Describe(\$this)+ " looks distastefully at what is offered."); 
EmitIn(\$actor."base:environment", Describe(\$actor) + " attempts to feed a " +Describe(\$food)+ ", but " + \$this."base:pronoun" + " looks distastefully at what is offered.", \$actor); 
 return FALSE; 
\} 
 
food = "dog chow"; 
 
\$food."base:environment" = \$this; 
if (!\$food.counter) \{\$food.counter = 1;\} 
\$food.counter = \$food.counter +1; 
if (\$food.counter == \$food.ending) \{ 
 
 
 
Slay(\$food); 
 \} 
 
 
Social(this, "eat", nil, nil, nil, \$food); 
\$food."base:environment" = \$actor; 
\$this.hungry = "no"; 
 
if (\$food.counter == \$food.ending) \{ 
 EmitTo (\$actor, Describe(\$this)+ " finishes the rest of a "+\$food.foodtype+"."); 
EmitIn(\$actor."base:environment", Describe(\$this)+ " finishes the rest of a " +\$food.foodtype+".", \$actor); 
\} else \{ 
EmitTo (\$actor, Describe(\$this)+ " happily munches on a " +\$food.foodtype+ "."); 
EmitIn(\$actor."base:environment", Describe(\$this)+ " happily munches on a " +\$food.foodtype+".", \$actor); 
\} 
 
 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:feed-iob">
         X[M] string food; 
 
\$food = NRefOb(\$dob[0]); 
\$here = \$this."base:environment"; 
 
if (!\$food.dogfood) \{ 
EmitTo(\$actor, Describe(\$this)+ " looks distastefully at what is offered."); 
EmitIn(\$actor."base:environment", Describe(\$actor) + " attempts to feed a " +Describe(\$food)+ ", but " + \$this."base:pronoun" + " looks distastefully at what is offered.", \$actor); 
 return FALSE; 
\} 
 
food = "dog chow"; 
 
\$food."base:environment" = \$this; 
if (!\$food.counter) \{\$food.counter = 1;\} 
\$food.counter = \$food.counter +1; 
if (\$food.counter == \$food.ending) \{ 
 
 
 
Slay(\$food); 
 \} 
 
 
Social(this, "eat", nil, nil, nil, \$food); 
\$food."base:environment" = \$actor; 
\$this.hungry = "no"; 
 
if (\$food.counter == \$food.ending) \{ 
 EmitTo (\$actor, Describe(\$this)+ " finishes the rest of a "+\$food.foodtype+"."); 
EmitIn(\$actor."base:environment", Describe(\$this)+ " finishes the rest of a " +\$food.foodtype+".", \$actor); 
\} else \{ 
EmitTo (\$actor, Describe(\$this)+ " happily munches on a " +\$food.foodtype+ "."); 
EmitIn(\$actor."base:environment", Describe(\$this)+ " happily munches on a " +\$food.foodtype+".", \$actor); 
\} 
 
 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:gnaw-dob">
         X[M] \$loca = \$this."base:environment"; 
Social(\$this, "yelp", "unhappily", nil, "at", \$actor); 
EmitIn(\$actor."base:environment", " "); 
Social(\$this, "run", "quickly", nil, "from", \$actor, "to", \$loca);
      </Core:Property>
      <Core:Property property="merry:react-post:gnaw-iob">
         X[M] Social(\$this, "yelp", "unhappily", nil, "at", \$actor); 
EmitIn(\$actor."base:environment", " "); 
Social(\$this, "run", "quickly", nil, "from", \$actor, "to", \$loca);
      </Core:Property>
      <Core:Property property="merry:react-post:hug-dob">
         X[M] Call(this, "love");
      </Core:Property>
      <Core:Property property="merry:react-post:kick-dob">
         X[M] Call (this, "kick");
      </Core:Property>
      <Core:Property property="merry:react-post:kick-iob">
         X[M] Call (this, "kick");
      </Core:Property>
      <Core:Property property="merry:react-post:kiss-dob">
         X[M] EmitTo(\$actor, Describe(\$this)+ " barks happily and gazes lovingly up at you."); 
EmitIn(\$actor."base:environment", Describe(\$this)+ " gazes lovingly up at " +Describe(\$actor)+ " and barks happily at " +\$actor."base:objective"+ ".", \$actor);
      </Core:Property>
      <Core:Property property="merry:react-post:lick-dob">
         X[M] EmitTo(\$actor, Describe(\$this)+ " blinks and stares oddly at you for a moment before licking you back."); 
EmitIn(\$actor."base:environment", Describe(\$this)+ " blinks and stares oddly at " +Describe(\$actor)+ " for a moment when " +\$actor."base:pronoun"+ " licks it, before it turns and licks " +\$actor."base:pronoun"+ " back.", \$actor);
      </Core:Property>
      <Core:Property property="merry:react-post:name-dob">
         X[M] if(\$actor != \$this."trait:master") \{ 
  EmitTo(\$actor, "You are not this dogs owner and therefore you may not name it."); 
  return TRUE; 
\} 
 
if(this."trait:name") \{ 
  EmitTo(\$actor, Describe(this)+" already has a name. Sheesh."); 
  return TRUE; 
\} 
 
\$name = capitalize(\$evoke[1..strlen(\$evoke)-2]); 
/* If we have any punctuation at the end of the command, remove it */ 
if(!((\$name[strlen(\$name)-1] \>= 97) \&\& (\$name[strlen(\$name)-1] \<= 122)) \&\& !((\$name[strlen(\$name)-1] \>= 65) \&\& (\$name[strlen(\$name)-1] \<= 90))) 
  \$name = \$name[0..strlen(\$name)-2]; 
/* Only take the first word of the name */ 
sscanf(\$name, "%s %*s", \$name); 
 
/* Tell the actor that this was successful */ 
EmitTo(\$actor, Describe(this)+" will now respond to "+\$name+"."); 
 
/* Set the name */ 
this."trait:name" = \$name; 
/* set the sname */ 
Set(this, "details:default:sname:"+lower_case(\$name), 1); 
 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:nibble-dob">
         X[M] Social(\$this, "whine", "unappreciatively", nil, "at", \$actor); 
EmitIn(\$actor."base:environment", " "); 
EmitTo(\$actor, Describe(\$this)+ " appears indignant as it watches you nibble on it. " +Describe(\$this)+ " thumps you on the head with its tail to get you to stop."); 
EmitIn(\$actor."base:environment", Describe(\$this)+ " appears indignant as it watches " +Describe(\$actor)+ " nibble on it. " +Describe(\$this)+ " thumps " +Describe(\$actor)+ " on the head with its tail to get "+\$actor."base:pronoun"+ " to stop.");
      </Core:Property>
      <Core:Property property="merry:react-post:nibble-iob">
         X[M] Social(\$this, "whine", "unappreciatively", nil, "at", \$actor); 
EmitIn(\$actor."base:environment", " "); 
EmitTo(\$actor, Describe(\$this)+ " appears indignant as it watches you nibble on it. " +Describe(\$this)+ " thumps you on the head with its tail to get you to stop."); 
EmitIn(\$actor."base:environment", Describe(\$this)+ " appears indignant as it watches " +Describe(\$actor)+ " nibble on it. " +Describe(\$this)+ " thumps " +Describe(\$actor)+ " on the head with its tail to get "+\$actor."base:pronoun"+ " to stop.");
      </Core:Property>
      <Core:Property property="merry:react-post:order-dob">
         X[M] if (\$actor == Get(\$this, "trait:master")) 
\{ 
return Call(\$this, "commands"); 
return TRUE; 
\} else \{ 
  Social(\$this, "bark", "protestingly", nil, "at", \$actor); 
\}
      </Core:Property>
      <Core:Property property="merry:react-post:pat-dob">
         X[M] EmitTo(\$actor, Describe(\$this)+ " peeks up at you and pants happily."); 
EmitIn(\$actor."base:environment", Describe(\$this)+ " pants happily at " +Describe(\$actor)+ " as it's being petted.", \$actor);
      </Core:Property>
      <Core:Property property="merry:react-post:pet-dob">
         X[M] EmitTo(\$actor, Describe(\$this)+ " peeks up at you and pants happily."); 
EmitIn(\$actor."base:environment", Describe(\$this)+ " pants happily at " +Describe(\$actor)+ " as it's being petted.", \$actor);
      </Core:Property>
      <Core:Property property="merry:react-post:poke-dob">
         X[M] EmitTo(\$actor, Describe(\$this)+ " barks loudly at you and eyes you mildly, poking you back with its tail."); 
EmitIn(\$actor."base:environment", Describe(\$this)+ " barks loudly as it's poked and peers warily at " +Describe(\$actor)+ ", while poking " +\$actor."base:pronoun"+ " with its tail.", \$actor);
      </Core:Property>
      <Core:Property property="merry:react-post:snuggle-dob">
         X[M] Call(this, "love");
      </Core:Property>
      <Core:Property property="merry:react-post:tickle-dob">
         X[M] Social(this, "bark", "laughingly", nil, "at", \$actor);
      </Core:Property>
      <Core:Property property="merry:react-pre:approach">
         X[M] Act(\$this, "consent", \$what: NRefOb(\$actor), \$type: "allow"); 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:feed-iob">
         X[M] if (!\$dob) \{EmitTo(\$actor, "What do you want to feed your dog?"); return FALSE; \} 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:order-dob">
         X[M] if(!\$evoke \&\& \$actor == Get(\$this, "trait:master")) \{
  /* if the actor is this pets master */
  EmitTo(\$actor, "Your pet will respond to the follow commands: sit, fetch/retrieve, drop, follow/heel, come, jump, stay, *talk(speak/bark), *growl, *beg, *give/bring.");
  EmitTo(\$actor, " ");
  EmitTo(\$actor, "NOTE: Remember the commands with an asterix next to them are special commands. For information about them, see @help pets.");
  return FALSE;
\} else if (\$actor == Get(\$this, "trait:master")) \{

/*Check to see is the pet is asleep or not*/
if(\$this."trait:sleep" == 1)\{
EmitTo(\$actor, Describe(\$this)+ " is sleeping right now, surely you don't want to disturb its nap time do you?");
return FALSE;
\}
  /* Pet is awake and we gave the animal an order */
    return TRUE;
\}

/* if the actor is not this pets master */
EmitTo(\$actor, "You are not "+Describe(\$this)+"'s master, and cannot give orders.");
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react:hit-dob">
         X[M] if(\$this."base:environment" == \$actor)\{     
Call(this, "eating");     
\} else \{     
EmitTo(\$actor, Describe(\$this)+ " quickly scampers away from you.");     
EmitIn(\$this."base:environment", Describe(\$this)+ " quickly scampers away from "+Describe(\$actor)+".", \$actor);     
\}
      </Core:Property>
      <Core:Property property="merry:react:stance-where">
         X[M] if (\$prep != PREP_ON) \{return TRUE; \}      
     
\$delay(1, TRUE, "ba76");      
     
EmitTo(\$actor, Describe(\$this) + " viciously bites into your rump.");     
EmitIn(\$actor."base:environment", Describe (\$this) + " viciously bites " + Describe(\$actor) + " on the rump.", \$actor);
      </Core:Property>
      <Core:Property property="merry:react:take">
         X[M] if (\$actor != Get(\$this, "trait:master")) \{ 
EmitTo(\$actor, Describe(\$this)+ " evades your attempt at picking it up -- this animal doesn't belong to you. Even if it did though it much to large and heavy to pick up."); 
EmitIn(\$actor."base:environment", Describe(\$this)+ " evades " +Describe(\$actor)+ " as " + \$actor."base:pronoun" + " attempts to pick it up.", \$actor); 
return FALSE; 
\} else \{ 
EmitTo(\$actor, "As you attempt to lift " +Describe(\$this)+ " you realize that it is much to large and heavy for you to pick up and all you've manage to do is pull a muscle in your back trying."); 
return FALSE;\}
      </Core:Property>
      <Core:Property property="merry:setprop-post:appearance:specie">
         X[M] Set(\$this, "details:default:sname:"+\$this."appearance:specie"+":local", 1); 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:pet:name">
         "chester"
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1254098357, "necate", "E", 1254099052, "necate", "E", 1254099102, "necate", "E", 1265057142, "necate", "E", 1265057584, "necate", "E" \})
      </Core:Property>
      <Core:Property property="skill:advancedefensive">
         2
      </Core:Property>
      <Core:Property property="skill:attackingdefensive">
         0
      </Core:Property>
      <Core:Property property="skill:cutoffensive">3</Core:Property>
      <Core:Property property="skill:dodgedefensive">
         1
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="skill:feintoffensive">
         0
      </Core:Property>
      <Core:Property property="skill:fumbledefensive">
         0
      </Core:Property>
      <Core:Property property="skill:guarddefensive">
         3
      </Core:Property>
      <Core:Property property="skill:idledefensive">
         0
      </Core:Property>
      <Core:Property property="skill:recoverdefensive">
         2
      </Core:Property>
      <Core:Property property="skill:restdefensive">
         1
      </Core:Property>
      <Core:Property property="skill:retiredefensive">
         2
      </Core:Property>
      <Core:Property property="skill:salutedefensive">
         0
      </Core:Property>
      <Core:Property property="skill:thrustoffensive">
         3
      </Core:Property>
      <Core:Property property="trait:master">
         \<Chatters:IC:mo:morana\>
      </Core:Property>
      <Core:Property property="volition">1</Core:Property>
    </Core:Properties>
    <Notes:Notes>
      <Notes:Category cat="QA" catstate="Open">
        <Notes:Note ix="1175227385" state="Open" user="necate">
           Initial Start Group:
(Small) Beagle, Jack Russell Terrier
(Medium) Bull Dog, Border Collie
(Large) German Shepherd, Boxer
(Bargain) ??????
        </Notes:Note>
      </Notes:Category>
    </Notes:Notes>
  </Base:Thing>
</object>
