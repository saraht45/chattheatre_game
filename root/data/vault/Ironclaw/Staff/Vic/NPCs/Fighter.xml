<object clone="/base/obj/thing" owner="necate">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Ironclaw:NPCs:Enemies:Undead:UrUndead)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="1"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="standing" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="true">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="zombie"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="zombies"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">zombie</Base:Description>
          <Base:Description type="look">
             The flesh of this zombie is literally peeling from its bones, and it's gaze wanders briefly to you. It has obviously been brought to life with dark, unknown magics.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="merry:act:combat_getdamaged">
         X[M] /* script in the skeleton to make it break from combat if it gets hit too much */


/* This script is called if someone hits the character. It gives any damage. */

/* sanity checking */
\$wound_details = nil;

/* what sort of wound? */
if(!(\$attacker."combat:type" \&\& \$attacker."combat:type" == "spar") \&\& FindMerry(\$weapon_ob, "lib", "generate-wound")) \{
  \$wound = Call(\$weapon_ob, "generate-wound");
\} else \{
  /* if they are sparring, do a bruise my default */
  if(\$attacker."combat:type" \&\& \$attacker."combat:type" == "spar") \{
    \$woundtype = (\{ "bruise", "bruises", "bruised" \});
  \} else \{
    /* allow different types of damage for "standard" improvised commands */
    switch(\$imperative)\{
      case "cut":
        \$woundtype = (\{ "cut", "cuts", "cut" \});
        break;
      default:
        \$woundtype = (\{ "cut", "cuts", "cut" \});
    \}
  \}
  switch(\$damage) \{
    case 7:
    case 6:
      \$wound_details = (\{ \$damage, (\{ \$woundtype[0], \$woundtype[1], "serious" \}), 2, (\{ \$woundtype[2], "injured" \}), (\{ (\{ \$woundtype[0], \$woundtype[1], "severe" \}), 2, (\{ \$woundtype[2], "injured" \}), (\{ (\{ \$woundtype[0], \$woundtype[1], "significant" \}), 2, (\{ \$woundtype[2], "injured" \}), (\{ (\{ \$woundtype[0], \$woundtype[1] \}), 2, (\{ \$woundtype[2], "injured" \}), (\{ (\{ \$woundtype[0], \$woundtype[1], "small" \}), 2, (\{ \$woundtype[2], "injured" \}), (\{ (\{ \$woundtype[0], \$woundtype[1], "slight" \}), 2, (\{ \$woundtype[2] \}) \}) \}) \}) \}) \}) \});
      \$wound = "a serious "+\$woundtype[0];
      break;
    case 5:
    case 4:
      \$wound_details = (\{ \$damage, (\{ \$woundtype[0], \$woundtype[1], "severe" \}), 2, (\{ \$woundtype[2], "injured" \}), (\{ (\{ \$woundtype[0], \$woundtype[1], "significant" \}), 2, (\{ \$woundtype[2], "injured" \}), (\{ (\{ \$woundtype[0], \$woundtype[1] \}), 2, (\{ \$woundtype[2], "injured" \}), (\{ (\{ \$woundtype[0], \$woundtype[1], "small" \}), 2, (\{ \$woundtype[2], "injured" \}), (\{ (\{ \$woundtype[0], \$woundtype[1], "slight" \}), 2, (\{ \$woundtype[2] \}) \}) \}) \}) \}) \});
      \$wound = "a severe "+\$woundtype[0];
      break;
    case 3:
      \$wound_details = (\{ \$damage, (\{ \$woundtype[0], \$woundtype[1], "significant" \}), 2, (\{ \$woundtype[2], "injured" \}), (\{ (\{ \$woundtype[0], \$woundtype[1] \}), 2, (\{ \$woundtype[2], "injured" \}), (\{ (\{ \$woundtype[0], \$woundtype[1], "small" \}), 2, (\{ \$woundtype[2], "injured" \}), (\{ (\{ \$woundtype[0], \$woundtype[1], "slight" \}), 2, (\{ \$woundtype[2] \}) \}) \}) \}) \});
      \$wound = "a significant "+\$woundtype[0];
      break;
    case 2:
      \$wound_details = (\{ \$damage, (\{ \$woundtype[0], \$woundtype[1] \}), 2, (\{ \$woundtype[2], "injured" \}), (\{ (\{ \$woundtype[0], \$woundtype[1], "small" \}), 2, (\{ \$woundtype[2], "injured" \}), (\{ (\{ \$woundtype[0], \$woundtype[1], "slight" \}), 2, (\{ \$woundtype[2] \}) \}) \}) \});
      \$wound = "a "+\$woundtype[0];
      break;
    case 1:
      \$wound_details = (\{ \$damage, (\{ \$woundtype[0], \$woundtype[1], "small" \}), 2, (\{ \$woundtype[2], "injured" \}), (\{ (\{ \$woundtype[0], \$woundtype[1], "slight" \}), 2, (\{ \$woundtype[2] \}) \}) \});
      \$wound = "a small "+\$woundtype[0];
      break;
    case 0:
      \$wound_details = (\{ \$damage, (\{ \$woundtype[0], \$woundtype[1], "slight" \}), 2, (\{ \$woundtype[2] \}) \});
      \$wound = "a faint "+\$woundtype[0];
      break;
    default:
      \$wound_details = (\{ \$damage, (\{ \$woundtype[0], \$woundtype[2], "dire" \}), 2, (\{ \$woundtype[2], "injured" \}), (\{ (\{ \$woundtype[0], \$woundtype[1], "serious" \}), 2, (\{ \$woundtype[2], "injured" \}), (\{ (\{ \$woundtype[0], \$woundtype[1], "severe" \}), 2, (\{ \$woundtype[2], "injured" \}), (\{ (\{ \$woundtype[0], \$woundtype[1], "significant" \}), 2, (\{ \$woundtype[2], "injured" \}), (\{ (\{ \$woundtype[0], \$woundtype[1] \}), 2, (\{ \$woundtype[2], "injured" \}), (\{ (\{ \$woundtype[0], \$woundtype[1], "small" \}), 2, (\{ \$woundtype[2], "injured" \}), (\{ (\{ \$woundtype[0], \$woundtype[1], "slight" \}), 2, (\{ \$woundtype[2] \}) \}) \}) \}) \}) \}) \}) \});
      \$wound = "a dire "+\$woundtype[0];
  \}
\}

/* get a description of any damage taken */
\$damagedesc = Call(\$\{Shared:Systems:Combat:ABC:Lib\}, "get_damaged");

/* output the descriptions */
if(\$damagedesc) \{
  EmitTo(\$attacker, \$attackdesc[0]+\$defencedesc[0]+\$damagedesc[0]);
  EmitTo(\$this, \$attackdesc[1]+\$defencedesc[1]+\$damagedesc[1]);
  EmitIn(\$this."base:environment", \$attackdesc[2]+\$defencedesc[2]+\$damagedesc[2], \$attacker, \$this);
\}

if(!\$this."combat:damage") \$this."combat:damage" = 0;

\$this."combat:damage" += \$damage;

if(\$this."combat:toughness") \{
  if(\$this."combat:damage" \> \$this."combat:toughness"+20) \{
    Social(\$this, "crumble");
    \$delay(0.25, TRUE, "ec2b");
    Slay(\$this);
  \} else \{
    Social(\$this, "stagger", "backwardly");
  \}
\} else \{
  if(\$this."combat:damage" \> 7) \{
    Social(\$this, "crumble");
    \$delay(0.25, TRUE, "777b");
    Slay(\$this);
  \} else \{
    Social(\$this, "stagger", "backwardly");
  \}
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:choose_target">
         X[M] /* choose a target to attack */

\$targets = Match(\$this."base:environment", "pc");

/* pick a target 
while(sizeof(Arr(\$targets))) \{
  \$target = \$targets[random(sizeof(\$targets))];
  if(Int(NRefOb(\$target)."combat:damage") \<= Int(NRefOb(\$target)."trait:body") + 5)
    return \$target;
  \$targets -= (\{ \$target \});
\}
return nil;
*/
      </Core:Property>
      <Core:Property property="merry:lib:fight">
         X[M] /* makes the skeleton fight its enemies */

while(\$this."combat:fighting") \{
  if(!\$this."combat:target") \{
    /* pick a new target */
  \$delay(random(60), TRUE, "3aa4");
    \$target = ::choose_target();
    if(!\$target) \{
      Social(\$this, "breakcombat");
      return TRUE;
    \}
    Social(\$this, "fight", nil, nil, nil, \$target);
  \}
/*  Social(\$this, "attack");*/
EmitIn(\$this."base:environment", Describe(\$this)+" bites "+Describe(\$target)+".");
\$dob = Arr(\$target);
Call(\$\{IronClaw:Lib:UrPeople:States:disease\}, "zombiebite");
  Social(\$this, "bite", nil, nil, nil, \$target);
  /* wait until the next attack */
  \$delay(random(60), TRUE, "542e");
\}
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:start_fight">
         X[M] /* start up a fight */

Social(\$this, "state", nil, "I'm starting a fight!");


/* are we in a fight? */
if(\$this."combat:fighting") return TRUE;

/* record when they entered */
/* this is to stop players running through rooms with enemies */
this.lastentered = time();

/* give some time before making a decision */
\$delay(1+random(10), TRUE, "e37b");

/* the decision is to attack anyone! Ha! */

/* pick a target */
\$target = ::choose_target();

if(!\$target) return TRUE;

/*Social(\$this, "state", nil, "My chosen target is: "+dump_value(\$target));*/
/* check again that we aren't already fighting */
if(\$this."combat:fighting") return TRUE;

Social(\$this, "fight", nil, nil, nil, \$target);
\$delay(random(30), TRUE, "261c");
::fight();

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:attack-dob">
         X[M] \$attacker = \$actor;

if(\$attacker."details:default:snames:pc" == 1)\{
\$this."trait:attacker" = \$attacker;
return \$attacker;
\}
return nil;
      </Core:Property>
      <Core:Property property="merry:witness-post:combat_getdamaged%npcfighting">
         X[M] /*Social(\$this, "grin", nil, "I saw you get damaged!");*/
/*Social(\$this, "grin", nil, "body is "+Str(\$actor."trait:body")+" and damage is "+Str(\$actor."combat:damage"));*/
if(Int(\$actor."combat:damage") \> Int(\$actor."trait:body") + 5) \{
  /* choose a new target */
  \$delay(1+random(5), FALSE, "4c86");
  \$target = ::choose_target();
  if(!\$target) \{
    Social(\$this, "breakcombat");
  \} else \{
    Social(\$this, "fight", nil, nil, nil, \$target);
  \}
\}
return TRUE;
      </Core:Property>
      <Core:Property property="merry:witness-post:enter-from%npcfighting">
         X[M] /* spot people entering the room */
/*Social(\$this, "grin", nil, "I saw you arrive!");*/
::start_fight();
return TRUE;
      </Core:Property>
      <Core:Property property="merry:witness-post:teleport%npcfighting">
         X[M] /* spot people entering the room */
/*Social(\$this, "grin", nil, "I see witness-post:teleport");*/
::start_fight();
return TRUE;
      </Core:Property>
      <Core:Property property="merry:witness:enter-into%npcfighting">
         X[M] /* spot people leaving the room */
/*Social(\$this, "grin", nil, "I see you leaving!");*/

/* do we want to block or chase them? */

return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1167368043, "tonyd", "E", 1167368060, "tonyd", "E", 1167368122, "tonyd", "E", 1167368236, "tonyd", "P", 1167368580, "tonyd", "P", 1167368697, "tonyd", "P", 1167368784, "tonyd", "P", 1167369006, "tonyd", "P", 1167370551, "tonyd", "P", 1167370808, "tonyd", "P", 1167370933, "tonyd", "P", 1167371014, "tonyd", "P", 1167371038, "tonyd", "P", 1167371067, "tonyd", "P", 1167371086, "tonyd", "P", 1167371156, "tonyd", "P", 1167371245, "tonyd", "P", 1167371421, "tonyd", "P", 1167371446, "tonyd", "P", 1167372019, "tonyd", "P", 1167372128, "tonyd", "P", 1167372208, "tonyd", "P", 1167372228, "tonyd", "P", 1167372668, "tonyd", "P", 1167372777, "tonyd", "P", 1167372809, "tonyd", "P", 1167373396, "tonyd", "P", 1167373516, "tonyd", "P", 1167373563, "tonyd", "P", 1167373751, "tonyd", "P", 1167373766, "tonyd", "P", 1167373780, "tonyd", "P", 1167373867, "tonyd", "P", 1167373877, "tonyd", "P", 1167373900, "tonyd", "P", 1167373915, "tonyd", "P", 1167373939, "tonyd", "P", 1167373960, "tonyd", "P", 1167374336, "tonyd", "P", 1167374381, "tonyd", "P", 1167374804, "tonyd", "P", 1167374839, "tonyd", "P", 1167374907, "tonyd", "P", 1167375019, "tonyd", "P", 1167375126, "tonyd", "P", 1167375250, "tonyd", "P", 1167375308, "tonyd", "P", 1167375508, "tonyd", "P", 1167375522, "tonyd", "P", 1167375929, "tonyd", "P", 1167375964, "tonyd", "P", 1167376059, "tonyd", "P", 1167376225, "tonyd", "P", 1167376256, "tonyd", "P", 1167376412, "tonyd", "P", 1167376588, "tonyd", "P", 1167376603, "tonyd", "P", 1167378374, "tonyd", "P", 1167378654, "tonyd", "P", 1167378672, "tonyd", "P", 1167378732, "tonyd", "P", 1167378751, "tonyd", "P", 1167384998, "tonyd", "P", 1167385015, "tonyd", "P", 1167385034, "tonyd", "P", 1167385064, "tonyd", "P", 1167757471, "barbra18", "K", 1167787473, "tonyd", "E", 1167822601, "tonyd", "E", 1167822734, "tonyd", "E", 1187421480, "tonyd", "E", 1187422334, "tonyd", "E", 1187422399, "tonyd", "E", 1187422998, "tonyd", "E", 1187423977, "tonyd", "E", 1187424286, "tonyd", "E", 1187425563, "tonyd", "E", 1187425731, "tonyd", "E", 1187426001, "tonyd", "E", 1187426121, "tonyd", "E", 1187426291, "tonyd", "E", 1190002037, "necate", "R", 1190002170, "necate", "E", 1190002320, "necate", "P", 1190002872, "necate", "P", 1190002927, "necate", "P" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
