<object clone="/base/obj/thing" owner="SkotOS">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(IronClaw:Props:Furniture:UrObject)"/>
    <Base:Bulk immobile="false" mass="1.2" density="0.3"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="1" verb2="contain" verb3="contains"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="box"/>
            <Base:SName sname="toy"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="boxes"/>
            <Base:PName pname="toys"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             {? | $(this.details:jack:hidden) | $(this.trait:color) $(this.trait:material) box | $(this.trait:jack:color) $(this.trait:jack:material) jack in a box }
          </Base:Description>
          <Base:Description type="examine">
             {? | $(this.details:jack:hidden) | A $(this.trait:color) $(this.trait:material) box; it has a handle on the side. | A $(this.trait:jack:color) $(this.trait:jack:material) jack in a box; it has a handle on the side. }
          </Base:Description>
          <Base:Description type="look">
             {? | $(this.details:jack:hidden) | A $(this.trait:color) $(this.trait:material) box; it has a handle on the side. | A $(this.trait:jack:color) $(this.trait:jack:material) jack in a box; it has a handle on the side. }
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="handle" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="handle"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="handles"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="box"/>
          <Base:Adjective adjective="toy"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.trait:color) $(this.trait:material) box's handle
          </Base:Description>
          <Base:Description type="examine">
             The handle of a $(this.trait:color) $(this.trait:material) box; you turn this to activate the toy.
          </Base:Description>
          <Base:Description type="look">
             The handle of a $(this.trait:color) $(this.trait:material) box.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="jack" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="jack"/>
            <Base:SName sname="doll"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="jacks"/>
            <Base:PName pname="dolls"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="box"/>
          <Base:Adjective adjective="toy"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.trait:jack:color) $(this.trait:jack:material) jack
          </Base:Description>
          <Base:Description type="examine">
             A $(this.trait:jack:color) $(this.trait:jack:material) jack stands upright within the $(this.trait:color) $(this.trait:material) box, though sags a little to the side. It has one large and one small black button eye with a crooked hat perched atop it's head.
          </Base:Description>
          <Base:Description type="look">
             A $(this.trait:jack:color) $(this.trait:jack:material) jack stands upright within the $(this.trait:color) $(this.trait:material) box, though sags a little to the side.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="lid" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="lid"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="lids"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="box"/>
          <Base:Adjective adjective="toy"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.trait:color) $(this.trait:material) box's lid
          </Base:Description>
          <Base:Description type="examine">
             The lid of a $(this.trait:color) $(this.trait:material) box.
          </Base:Description>
          <Base:Description type="look">
             The lid of a $(this.trait:color) $(this.trait:material) box.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="merry:react-post:turn-dob">
         X[M] /* All the sanity checks were in the pre action so we only have to check for one thing */    
/* if the pre script set this property, move forward otherwise stop */    
         if(!\$this."is:handle") \{    
/* Stop the whole script here, they did turn something and it showed but it was not the handle */    
         return FALSE;    
\}    
/* Lets start building some references for the emits */    
/* box description in the first person (actor view) */    
      \$box1 = Describe(\$this, nil, nil, STYLE_NONPOSS);    
/* box desc in third person (witness view) */    
      \$box2 = Describe(\$this);    
/* handle description, make it plain and boring */    
      \$handle = NewNRef(\$this, "handle");    
      \$handle = Describe(\$handle, nil, nil, STYLE_NONPOSS);    
/* Lets grab the jack detail and describe it plainly */    
      \$jack = NewNRef(\$this, "jack");     
      \$jack = Describe(\$jack, nil, nil, STYLE_NONPOSS);    
/* Lets grab the lid detail and describe it plainly */    
      \$lid = NewNRef(\$this, "lid");     
      \$lid = Describe(\$lid, nil, nil, STYLE_NONPOSS);    
/* make it easy to call the environment */    
      \$env = \$actor."base:environment";    
  
/* Check if the jack is already hidden */    
         if(\$this."details:jack:hidden" != 1) \{    
/* if it is not hidden, send an emit saying so */    
/* Since we aren't sending something different to the actor versus the witnesses, a single EmitIn works here */    
      EmitIn(\$env, "The " +\$jack+ " has already sprung and the " +\$lid+ " is ajar. The " +\$handle+ " produces clicks and clacks uselessly on the side of the " +\$box1+ ".");    
/* reset the property that brought us here */    
      Set( \$this, "is:handle", FALSE );    
/* Stop the script here as they have reached an ending */    
         return FALSE;    
\}    
  
/* all the sanity checks are done so we simply start producing what we want to happen */    
/* Lets build the emits */    
/* First make some emits that show if the jack successfully springs */    
      \$a = "The " +\$handle+ " emits a small musical tune as it turns. It creates a sense of peace and joy before... the " +\$jack+ " springs upward as the " +\$lid+ " suddenly pops open.";    
      \$b = "A " +\$jack+ " shoots out of a " +\$box2+ ".";    
      \$c = "A " +\$jack+ " springs out through the " +\$lid+ " and attempts to scare " +Describe(\$actor)+ "."; 
/* Add as many as you want here */    
/* Pick one for the successful action */    
   \$success = oneof( \$a, \$b, \$c );    
  
/* Now make emits for when the actor is unsuccessful */    
      \$z = "The " +\$handle+ " turns to no avail. How boring.";    
      \$y = "The " +\$handle+ " spins aimlessly, a small tune is produced. The " +\$lid+ " stubbornly remains shut.";    
      \$x = "A musical tune is produced as the " +\$handle+" is turned, but the "+\$lid+" refuses to open.";    
/* Add as many as you want here */    
/* Pick one for the failed action */    
   \$fail = oneof( \$z, \$y, \$x );    
  
/* At this point, we do a random roll to get a number and it also determines the ratio of success versus failure */    
/* random returns a number between 0 and one less than that in the brackets so we add one for our own sanity. */    
/* Now it will return a value between 1 and the number in the brackets. */    
/* If we allow for 1 through 3, and make it successfully only once, its a 33% chance of success. */    
      \$num = random(3)+1;    
         if(\$num != 3) \{    
/* emit the failure */    
/* I didn't bother with EmitTo again as you can build those on your own */    
      EmitIn(\$env, \$fail);    
/* reset the property that brought us here */    
      Set( \$this, "is:handle", FALSE );    
/* Stop the script here as they have reached an ending */    
   return FALSE;    
\}    
  
   else \{    
/* emit the success */    
/* I didn't bother with EmitTo again as you can build those on your own */    
   \$this."details:jack:hidden" = 0;   
      EmitIn(\$env, \$success);    
/* reset the property that brought us here */    
      Set( \$this, "is:handle", FALSE );    
/* Continue the script just for the heck of it and nothing happens anyway since we are done */    
   return TRUE;    
\}    
/* Always give a return value as the last line of a script */    
   return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:push-dob">
         X[M] if(\$dob \&\& (sizeof(\$dob) == 1)) \{                     
         if(NRefDetail(\$dob[0]) == "lid") \{                    
   \$jack = NewNRef(\$this, "jack");        
         if(\$this."details:jack:hidden" == 0) \{                         
   \$this."details:jack:hidden" = 1;                        
      EmitIn(\$this."base:environment", Describe(\$jack)+ " folds itself within the box as " +Describe(\$actor)+ " pushes on the lid.");                   
      EmitTo(\$actor, Describe(\$jack)+ " folds itself within the box as you push on the lid.");                         
   \} else                
         if(\$this."details:jack:hidden" == 1) \{                  
      EmitIn(\$this."base:environment", Describe(\$actor)+ " pushes on the lid to no avail, "+Describe(\$jack)+" has already been hidden.");              
      EmitTo(\$actor, "The lid is already closed, "+Describe(\$jack)+" has not been sprung.");                  
   return FALSE;                  
      \}                   
   \}                    
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:turn-dob">
         X[M] /* Does the box environment have volition (is a chatter) and is that chatter holding the box */      
/* This will allow the script to run if the box is sitting outside a chatters inventory */      
         if(\$this."base:environment"."base:volition" == 1 \&\& \$actor != \$this."base:environment") \{      
/* Send emit telling them to piss off because they are not holding it */      
      EmitTo(\$actor, "Get offa my box!");      
/* Stop the whole script here, they won't even be able to turn the handle */      
   return FALSE;      
\}      
      
/* Do we even have the box as a target - it would take quite an error to see this message */      
         if(!\$dob) \{      
      EmitTo(\$actor, "No target, you should never see this message.");      
/* Stop the whole script here, they won't even be able to turn the handle */      
   return FALSE;      
\}      
     
/* We already checked that we have a dob (target) so we just make sure there is only one */      
         if(sizeof(\$dob) !=1) \{      
/* obviously they are trying to turn multiple things at once */      
/* Stop the whole script here, they won't even be able to turn the handle */      
   return FALSE;      
\}      
     
/* make sure the handle is being turned. Let the action run no matter what but this will determine the post prop script */      
         if(NRefDetail(\$dob[0]) == "handle") \{      
/* Set a property so we can call it in the post prop script */      
      Set( \$this, "is:handle", TRUE );      
/* Always give a return value, TRUE is what we want here so the action continues */      
   return TRUE;      
\}      
     
/* Final line is true, if they get this far, allow the action even if the post prop doesn't fire */      
   return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:start">
         X[M] \$this."trait:jack:color" = oneof( "mauve", "dirty yellow", "white", "sky blue", "vibrant green", "murky black", "ruddy red", "dark grey", "pale pink", "beige" );      
\$this."trait:jack:material" = oneof( "hemp", "canvas", "burlap", "cotton", "linen", "wool", "sackcloth", "barras" );      
return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1144052085, "-", "SYNC", 1221752477, "???", "R", 1251322454, "morwenlorelie", "E", 1251322660, "morwenlorelie", "K", 1251322684, "morwenlorelie", "E", 1289253413, "morwenlorelie", "K", 1289253445, "morwenlorelie", "E", 1289253753, "morwenlorelie", "X", 1289253806, "morwenlorelie", "E", 1289253845, "morwenlorelie", "E", 1289253856, "morwenlorelie", "E", 1289253879, "morwenlorelie", "E", 1289254208, "morwenlorelie", "X", 1289254295, "morwenlorelie", "X", 1289254348, "morwenlorelie", "X", 1289254496, "morwenlorelie", "K", 1289254649, "morwenlorelie", "K", 1289255776, "morwenlorelie", "X", 1289256295, "tunk_bodin", "X", 1289256389, "tunk_bodin", "X", 1289256591, "tunk_bodin", "X", 1289257184, "morwenlorelie", "K", 1289257407, "morwenlorelie", "X", 1289257733, "morwenlorelie", "X", 1289257884, "morwenlorelie", "X", 1289257999, "morwenlorelie", "X", 1289258323, "morwenlorelie", "X", 1289258393, "morwenlorelie", "X", 1289258745, "morwenlorelie", "X", 1289258834, "morwenlorelie", "X", 1289258916, "morwenlorelie", "X", 1289259352, "morwenlorelie", "X", 1289259675, "morwenlorelie", "X", 1289259774, "morwenlorelie", "X", 1289498631, "morwenlorelie", "X", 1289502388, "morwenlorelie", "X", 1289503083, "tunk_bodin", "X", 1289503569, "morwenlorelie", "X", 1289504861, "morwenlorelie", "K", 1289504995, "morwenlorelie", "E", 1289505037, "morwenlorelie", "K", 1289515071, "morwenlorelie", "X", 1289515601, "morwenlorelie", "X", 1289515880, "morwenlorelie", "K", 1289515901, "morwenlorelie", "E", 1306148326, "morwenlorelie", "R" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
