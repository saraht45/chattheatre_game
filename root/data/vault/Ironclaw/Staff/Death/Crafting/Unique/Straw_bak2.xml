<object clone="/base/obj/thing" owner="tunk_bodin">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="0.01" density="0.1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="true" over="false" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="hay"/>
            <Base:SName sname="haystalk"/>
            <Base:SName sname="stalk"/>
            <Base:SName sname="straw"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="stalks"/>
            <Base:PName pname="haystalks"/>
            <Base:PName pname="straws"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="drab"/>
          <Base:Adjective adjective="hay"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.trait:brief)
          </Base:Description>
          <Base:Description type="examine">
             $(this.trait:examine)
          </Base:Description>
          <Base:Description type="look">
             $(this.trait:look)
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:projects">
         (\{ "hat" \})
      </Core:Property>
      <Core:Property property="export:trait:smell">
         "freshly cut hay"
      </Core:Property>
      <Core:Property property="export:trait:taste">
         "like freshly cut hay"
      </Core:Property>
      <Core:Property property="export:trait:trash">1</Core:Property>
      <Core:Property property="merry:act:start">
         X[M] /* add snames */                          
Set(\$this, "details:default:sname:hay", 1);                           
Set(\$this, "details:default:sname:haystalk", 1);                             
Set(\$this, "details:default:sname:stalk", 1);                             
Set(\$this, "details:default:sname:straw", 1);                             
                             
/* add pnames */                             
Set(\$this, "details:default:pname:stalks", 1);                             
Set(\$this, "details:default:pname:haystalks", 1);                             
Set(\$this, "details:default:pname:straws", 1);                             
                             
/* add adjectives */                             
Set(\$this, "details:default:adjective:hay", 1);                             
                             
/* set default color */                             
Set(\$this, "trait:color", "drab");                             
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:weaving">
         X[M] /* grab variables */   
EmitTo(\$actor, "Lib");   
\$color = \$craft."trait:color";   
   
/* if there is no iob, dob is a stalk, and we have an evoke then just start a new project */   
if(!\$iob \&\& \$havecraft \&\& \$wordy) \{   
Set(\$craft, "trait:objecttype", \$wordy);   
Set(\$craft, "trait:state", "piece of ");   
Set(\$craft, "trait:material", "woven straw");  
\$project = Get(\$craft, "trait:objecttype");   
\$brief = "piece of a " +\$color+ " woven straw " +\$project;   
\$look = "A " +\$brief+ ". It is incomplete and requires more effort.";   
Set(\$craft, "trait:brief", \$brief);   
Set(\$craft, "trait:look", \$look);   
Set(\$craft, "trait:examine", \$look);   
   
/* make it last 10 steps */   
Set(\$craft, "weave:step", 1);   
   
/* handle snames */   
Set(\$craft, "details:default:sname:hay", 0);   
Set(\$craft, "details:default:sname:haystalk", 0);   
Set(\$craft, "details:default:sname:stalk", 0);   
Set(\$craft, "details:default:sname:straw", 0);   
Set(\$craft, "details:default:sname:"+\$project, 1);   
   
/* handle pnames */   
Set(\$craft, "details:default:pname:stalks", 0);   
Set(\$craft, "details:default:pname:haystalks", 0);   
Set(\$craft, "details:default:pname:straws", 0);   
Set(\$craft, "details:default:pname:"+\$project+"s", 1);   
   
/* handle adjectives */   
Set(\$craft, "details:default:adjective:hay", 1);   
Set(\$craft, "details:default:adjective:straw", 1);   
Set(\$craft, "details:default:adjective:unfinished", 1);   
Set(\$craft, "details:default:adjective:woven", 1);   
   
EmitTo(\$actor, "You started making " +Describe(\$craft, nil, nil, STYLE_NONPOSS)+".");   
EmitIn(\$actor."base:environment", Describe(\$actor)+ " started making " +Describe(\$craft, nil, nil, STYLE_NONPOSS)+".");   
   
return FALSE;   
\}   
   
/* if we have a dob, no iob, yet the dob is a project rather than a stalk */   
if(!\$iob \&\& \$haveproject) \{   
EmitTo(\$actor, "You need something to weave into your project.");   
return FALSE;   
\}   
   
/* if we got this far, we should have an iob, dob, stalk, and project */   
/* we should have 2 items: craft and craft2 */   
/* we should have already checked to make sure only one is a stalk */   
if(\$craft."trait:objecttype" == "haystalk") \{  
\$additive = \$craft;   
\$project = \$craft2;   
\} else \{   
\$additive = \$craft2;   
\$project = \$craft;   
\}   
   
/* find and set color */   
EmitTo(\$actor, "Here?"); 
\$color1 = Get(Obj(\$craft), "trait:color");   
\$color2 = Get(Obj(\$craft2), "trait:color");   
if(\$color1 == \$color2) \{   
EmitTo(\$actor, "Here?"); 
\$color = \$color1;   
\} else \{   
\$color = \$color1+ " and " +\$color2;   
\}   
/* slay stalk */   
Slay(\$additive);   
/* find and set steps */   
\$currstep = Get(\$project, "weave:step")+1;   
Set(\$project, "weave:step", \$currstep);   
/* find and set state based on step */   
/* cant be one or we wouldn't be here */   
switch(\$currstep) \{   
case 0:   
EmitTo(\$actor, "If you see this, report a 0 case error.");   
break;   
case 1:   
EmitTo(\$actor, "If you see this, report a 1 case error.");   
break;   
case 2:   
Set(\$project, "trait:state", "small portion of");   
break;   
case 3:   
Set(\$project, "trait:state", "portion of");   
break;   
case 4:   
Set(\$project, "trait:state", "lesser half of");   
break;   
case 5:   
Set(\$project, "trait:state", "half of");   
break;   
case 6:   
Set(\$project, "trait:state", "greater half of");   
break;   
case 7:   
Set(\$project, "trait:state", "large portion of");   
break;   
case 8:   
Set(\$project, "trait:state", "majority of");   
break;   
case 9:   
Set(\$project, "trait:state", "mostly complete portion of");   
break;   
case 10:   
Set(\$project, "trait:state", "complete");   
break;   
default:   
EmitTo(\$actor, "If you see this, report a default case error.");   
break;   
\}   
/* update project descs */   
\$objecto = Get(\$project, "trait:objecttype");   
\$matero = Get(\$project, "trait:material");   
\$stateo = Get(\$project, "trait:state");   
\$brief = \$color+ " " +\$matero+ " " +\$objecto;   
if(\$stateo != "complete") \{   
\$brief = \$stateo+ " a " +\$brief;   
\}   
\$look = "A " +\$brief+ ". It appears completely handcrafted by a novice with too much free time.";   
\$examine = \$look;   
Set(\$project, "trait:brief", \$brief);     
Set(\$project, "trait:look", \$look);     
Set(\$project, "trait:examine", \$examine);   
   
Set(\$project, "details:default:adjective:unfinished", 0);   
Set(\$project, "details:default:adjective:handcrafted", 1);   
   
if(\$stateo != "complete") \{   
EmitTo(\$actor, "You continue weaving on your project and it is now " +Describe(\$project, nil, nil, STYLE_NONPOSS)+ ".");   
EmitIn(\$actor."base:environment", Describe(\$actor)+ " continues weaving on a project and it is now " +Describe(\$project, nil, nil, STYLE_NONPOSS)+ ".");   
\} else \{   
EmitTo(\$actor, "You completed " +Describe(\$project, nil, nil, STYLE_NONPOSS)+ "!");   
EmitIn(\$actor."base:environment", Describe(\$actor)+ " completed " +Describe(\$project, nil, nil, STYLE_NONPOSS)+ "!");   
\}   
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:weave-dob">
         X[M] /* debugging */     
EmitTo(\$actor, dump_value( args ));     
     
/* help files */     
\$h1 = "The haystalks may be woven into a hat. \\n";     
\$h2 = "This is an experimental item. No skill or career is currently required. This may change in the future. \\n \\n";     
\$h3 = "STEP 1: type weave haystalk and speak the item you wish to start creating. Currently, only hats are available. \\n";     
\$h4 = "Example: weave my haystalk 'hat. \\n \\n";     
\$h5 = "STEP 2: start weaving in more stalks until the project is complete. \\n";     
\$h6 = "Example: weave my haystalk into my hat. \\n \\n";     
\$h7 = "NOTES: \\n";     
\$h8 = "The system will inform you when the project is complete. \\n";     
\$h9 = "Different color stalks will affect the end result. \\n \\n";     
\$h10 = "A full list of available projects can be seen via weave haystalk 'list. \\n";     
\$help = \$h1+\$h2+\$h3+\$h4+\$h5+\$h6+\$h7+\$h8+\$h9+\$h10;     
     
/* error messages */     
\$multi = "You are attempting to weave too many items at once. See: weave haystalk 'help' for more information.";     
\$noproj = "One of the objects is not part of the weaving project. See: weave haystalk 'help' for more information.";     
\$needstalk = "A haystalk is required to complete this action.";     
\$needproject = "The haystalk can be woven into certain projects only. See: weave haystalk 'help' for more information.";     
\$badproject = "That is not a possible project at this time. For a list of projects - weave [item] 'list'.";     
     
/* error checks */     
if(\$iob \&\& sizeof(\$iob) != 1) \{ EmitTo(\$actor, \$multi); return FALSE; \}     
if(\$dob \&\& sizeof(\$dob) !=1) \{ EmitTo(\$actor, \$multi); return FALSE; \}   
/* FIX LATER  
* if(\$iob) \$meh = Obj(\$iob[0]);    
* if(\$iob \&\& !\$meh."trait:objecttype") \{ EmitTo(\$actor, \$noproj); return FALSE; \}     
*/  
     
/* grab reusable variables */     
if(\$(raw-evoke)) \$wordy = lower_case(\$(raw-evoke));     
\$projects = Get(\$this, "projects");     
\$list = implode(\$projects, ", ");     
     
/* offer help */     
if(\$wordy \&\& \$wordy == "help") \{ EmitTo(\$actor, \$help); return FALSE; \}     
     
/* offer list */     
if(\$wordy \&\& \$wordy == "list") \{ EmitTo(\$actor, "Possible projects include: " +\$list+ "."); return FALSE; \}     
     
/* reset variables, just in case */     
\$statedob = nil;     
\$stateiob = nil;     
\$havecraft = nil;     
\$haveproject = nil;     
     
/* more variables */     
\$typedob = Get(\$this, "trait:objecttype");     
if(\$iob \&\& \$iob[0]."trait:objecttype") \$typeiob = Get(\$iob[0], "trait:objecttype");     
if(\$this."trait:state") \$statedob = \$this."trait:state";     
if(\$iob \&\& \$iob[0]."trait:state") \$stateiob = \$iob[0]."trait:state";     
     
/* determine what we are using */     
if(\$typedob == "haystalk") \$havecraft = 1;     
if(member(\$typedob, \$projects)) \$haveproject = 1;     
if(\$typeiob \&\& \$typeiob == "haystalk") \$havecraft = 1;     
if(\$typeiob \&\& member(\$typeiob, \$projects)) \$haveproject = 1;     
     
/* more error checks */     
if(\$iob \&\& !\$havecraft) \{ EmitTo(\$actor, \$needstalk); return FALSE; \}     
/* FIX LATER  
* if(\$iob \&\& !\$haveproject) \{ EmitTo(\$actor, \$needproject); return FALSE; \}   
*/    
if(\$statedob \&\& \$statedob == "complete") \{ EmitTo(\$actor, Describe(\$this)+ " is already a completed project."); return FALSE; \}     
if(\$stateiob \&\& \$stateiob == "complete") \{ EmitTo(\$actor, Describe(\$iob[0])+ " is already a completed project."); return FALSE; \}     
     
/* if no iob and this is still a stalk, only certain evokes are permitted. If same and no evoke, show them the help. */     
if(!\$iob \&\& \$havecraft) \{     
if(!\$wordy) \{     
EmitTo(\$actor, \$help);     
return FALSE;     
\} else if(!member(\$wordy, \$projects)) \{     
EmitTo(\$actor, \$badproject);     
return FALSE;     
\}     
\}     
\$craft2 = nil;   
if(\$iob) \$craft2 = Obj(\$iob[0]);   
EmitTo(\$actor, "Call");   
/* call lib with all variables to continue */     
return Call(\$this, "weaving", \$wordy: \$wordy, \$actor: \$actor, \$craft: \$this, \$craft2: \$craft2, \$help: \$help, \$projects: \$projects, \$statedob: \$statedob, \$stateiob: \$stateiob, \$typedob: \$typedob, \$typeiob: \$typeiob, \$havecraft: \$havecraft, \$haveproject: \$haveproject);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:color">
         X[M] \$color = \$this."trait:color";                          
\$objecttype = "haystalk";                            
\$brief = \$color+" "+\$objecttype;                            
\$look = "A single " +\$brief+"; used to feed various beasts of burden.";                            
\$examine = \$look+ " It may also be woven into such items as a basket or hat.";                               
Set(\$this, "trait:objecttype", \$objecttype);                            
Set(\$this, "trait:brief", \$brief);                            
Set(\$this, "trait:look", \$look);                            
Set(\$this, "trait:examine", \$examine);                           
                       
/* color adjectives */                       
                       
if(\$this."trait:color" == "drab") \{                       
Set(\$this, "details:default:adjective:green", 0);                       
Set(\$this, "details:default:adjective:yellow", 0);                       
Set(\$this, "details:default:adjective:drab", 1);                       
\}                       
                       
if(\$this."trait:color" == "green") \{                        
Set(\$this, "details:default:adjective:green", 1);                       
Set(\$this, "details:default:adjective:yellow", 0);                       
Set(\$this, "details:default:adjective:drab", 0);                       
\}                       
                       
if(\$this."trait:color" == "yellow") \{                       
Set(\$this, "details:default:adjective:green", 0);                       
Set(\$this, "details:default:adjective:yellow", 1);                       
Set(\$this, "details:default:adjective:drab", 0);                       
\}                       
                       
if(\$this."trait:color" == "yellow and green" \|\| \$this."trait:color" == "green and yellow") \{                       
Set(\$this, "details:default:adjective:green", 1);                       
Set(\$this, "details:default:adjective:yellow", 1);                       
Set(\$this, "details:default:adjective:drab", 0);                       
\}                       
                       
return TRUE;
      </Core:Property>
      <Core:Property property="projects">
         (\{ "hat" \})
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1306226159, "tunk_bodin", "X", 1306226427, "tunk_bodin", "X", 1306254762, "tunk_bodin", "X", 1306254988, "tunk_bodin", "X", 1306255593, "tunk_bodin", "X", 1306255724, "tunk_bodin", "X", 1306261409, "tunk_bodin", "X", 1306261518, "tunk_bodin", "X", 1306261564, "tunk_bodin", "P", 1306261597, "tunk_bodin", "P", 1306261695, "tunk_bodin", "P", 1306261740, "tunk_bodin", "P", 1306261783, "tunk_bodin", "P", 1306261877, "tunk_bodin", "P", 1306261906, "tunk_bodin", "P", 1306261944, "tunk_bodin", "P", 1306261970, "tunk_bodin", "P", 1306262014, "tunk_bodin", "P", 1306262100, "tunk_bodin", "P", 1306262209, "tunk_bodin", "P", 1306262751, "tunk_bodin", "X", 1306262872, "tunk_bodin", "P", 1306262979, "tunk_bodin", "P", 1306263041, "tunk_bodin", "P", 1306265308, "tunk_bodin", "P", 1306265393, "tunk_bodin", "P", 1306266016, "tunk_bodin", "X", 1306266734, "tunk_bodin", "X", 1306268966, "tunk_bodin", "P", 1306270722, "tunk_bodin", "P", 1306271179, "tunk_bodin", "P", 1306272650, "tunk_bodin", "X", 1306273347, "tunk_bodin", "X", 1306273817, "tunk_bodin", "X", 1306445388, "tunk_bodin", "R" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="trait:brief">
         "drab haystalk"
      </Core:Property>
      <Core:Property property="trait:color">"drab"</Core:Property>
      <Core:Property property="trait:examine">
         "A single drab haystalk; used to feed various beasts of burden. It may also be woven into such items as a basket or hat."
      </Core:Property>
      <Core:Property property="trait:look">
         "A single drab haystalk; used to feed various beasts of burden."
      </Core:Property>
      <Core:Property property="trait:objecttype">
         "haystalk"
      </Core:Property>
    </Core:Properties>
    <Notes:Notes>
      <Notes:Category cat="QA" catstate="Open">
        <Notes:Note ix="1306211669" state="Open" user="tunk_bodin">
           Not your standard craftable item but rather an experiment in labor.
        </Notes:Note>
      </Notes:Category>
    </Notes:Notes>
  </Base:Thing>
</object>
