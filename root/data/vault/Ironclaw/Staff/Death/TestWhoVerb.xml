<object clone="/usr/SkotOS/obj/verb" owner="tunk_bodin">
  <Socials:Verb imp="+whotest" evoke="forbidden" audible="false" private="false" secret="true" obscured="false" target-abstracts="false" disabled="false" ooc="false" raw_verb="false">
    <Ur:UrObject/>
    <Socials:SocialObjects>
      <Socials:SocialObject role="dob" direct="false" single="false" raw="true" requirement="forbidden" distance="far">
        <Socials:SocObPreps/>
        <Socials:SocObFilters/>
      </Socials:SocialObject>
    </Socials:SocialObjects>
    <Socials:VerbActions/>
    <Core:Properties>
      <Core:Property property="merry:global:command">
         X[M] return Call(\$this, "general_who");        
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:general_who">
         X[M] string bodystr, bodyname, output, words, *indices, *arr, stridle;      
int i, sz_i, sz, n, rows, idlelen;      
object *bodylist, body;      
mapping whofour, staff, idle, players, hidden, hiddenidle, away;      
      
\{      
  bodylist   = common::wholist();      
  sz_i       = sizeof(bodylist);      
  staff      = ([ ]);      
  idle       = ([ ]);      
  players    = ([ ]);      
  hidden     = ([ ]);      
  hiddenidle = ([ ]);      
  whofour    = ([ ]);      
  away       = ([ ]);      
  words      = (\$(dob:words) ? implode(\$(dob:words), " ") : nil);      
  idlelen    = 0;      
      
if(words == "guild") \{      
EmitTo(\$actor, "okies.");  
  
  for (i = 0; i \< sz_i; i++) \{      
    body     = bodylist[i];      
    bodystr  = Str(body);      
    bodyname = (\$actor."udat:host" == 1 ? (body.disguised == 1 ? Describe(body) + " (" + body."skotos:playercapname" + ")" : Describe(body)) : Describe(body));      
    /* bodyname = strip(UnSAM(body."detail:description:brief", \$this: body)); */      
    if (!body."udat:possessed") \{      
      continue;      
    \} else if (\$actor.guild \&\& body.guild != \$actor.guild) \{      
        continue;      
    \} else if (\$whofour) \{      
      stridle = common::convsecs(\$secs: body."udat:idle", \$short: TRUE);      
      idlelen = ((\$r1 = strlen(stridle)) \> idlelen ? \$r1 : idlelen);      
      whofour[bodyname] = stridle;      
      continue;      
    \} else if (body."theatre:notwhobody" \&\&      
               body."udat:idle" \>= 3600) \{      
      hiddenidle[bodyname] = TRUE;      
      continue;      
    \} else if (body."theatre:notwhobody") \{      
      hidden[bodyname] = TRUE;      
      continue;      
    \}      
      
    if (body."udat:idle" \>= 3600) \{      
      idle[bodyname] = TRUE;      
      continue;      
    \} else if (sizeof(explode(bodyname, " ")) \>= 2 \&\& contains(bodyname, "Story")) \{      
      staff[bodyname] = TRUE;      
      continue;      
    \} else if (body."cdat:away") \{      
      away[bodyname] = TRUE;      
      continue;      
    \} else \{      
      players[bodyname] = TRUE;      
    \}      
  \}      
      
  output  = "";      
      
  if (\$whofour) \{      
    if (map_sizeof(whofour) \> 0) \{      
      sz_i    = map_sizeof(whofour);      
      indices = map_indices(whofour);      
      rows    = Int(ceil(Flt(sz_i) / Flt(3)));      
      arr     = (\{ (\{ "Characters", "Idle", "Characters", "Idle", "Characters", "Idle" \}) \});      
      
      for (i = 0; i \< rows; i++) \{      
        arr += (\{ (\{ ( i \>= sz_i ? "" : indices[i]),      
                     ( i \>= sz_i ? "" : pad_left(whofour[indices[i]], idlelen)),      
                     ((n = i + rows) \>= sz_i ? "" : indices[n]),      
                     ((n = i + rows) \>= sz_i ? "" : pad_left(whofour[indices[n]], idlelen)),      
                     ((n = i + rows + rows) \>= sz_i ? "" : indices[n]),      
                     ((n = i + rows + rows) \>= sz_i ? "" : pad_left(whofour[indices[n]], idlelen)) \}) \});      
      \}      
      EmitTo(\$actor, ascii::table(\$content: arr, \$ignoreseparator: "top bottom left right"));      
      return FALSE;      
    \}      
  \}      
      
  if (\$actor."who:alternate") \{      
    if (map_sizeof(players) \> 0) \{      
      sz_i    = map_sizeof(players);      
      indices = map_indices(players);      
      rows    = Int(ceil(Flt(sz_i) / Flt(4)));      
      arr     = (\{ (\{ "Characters", "Characters", "Characters", "Characters" \}) \});      
      
      for (i = 0; i \< rows; i++) \{      
        arr += (\{ (\{ ( i \>= sz_i ? "" : indices[i]),      
                     ((n = i + rows) \>= sz_i ? "" : indices[n]),      
                     ((n = i + rows + rows) \>= sz_i ? "" : indices[n]),      
                     ((n = i + rows + rows + rows) \>= sz_i ? "" : indices[n]) \}) \});      
      \}      
      EmitTo(\$actor, PRE( "Online[" + Str(sz_i) + "] (" + smalltime(time()) + " EST): \\n" + ascii::table(\$content: arr, \$skipfirst: TRUE)));      
    \}      
  \} else \{      
    if (map_sizeof(players) \> 0) \{      
      sz      = map_sizeof(players);      
      indices = map_indices(players);      
      output += "Online[" + Str(sz) + "] (" + smalltime(time()) + " EST): " + TAG(      
                                            (sz \> 1 ?      
                                             implode(indices[..sz - 2], ", ") + " and " +      
                                             indices[sz - 1] :      
                                             indices[0]) + ".", "who") + "\\n";      
    \}      
  \}      
      
  if (map_sizeof(staff) \> 0) \{      
    sz      = map_sizeof(staff);      
    indices = map_indices(staff);      
    output += "Staff[" + Str(sz) + "]: " + TAG(      
                                          (sz \> 1 ?      
                                           implode(indices[..sz - 2], ", ") + " and " +      
                                           indices[sz - 1] :      
                                           indices[0]) + ".", "who") + "\\n";      
  \}      
      
  if (map_sizeof(idle) \> 0) \{      
    sz      = map_sizeof(idle);      
    indices = map_indices(idle);      
    output += "Idle[" + Str(sz) + "]: " + TAG(      
                                                   (sz \> 1 ?      
                                                    implode(indices[..sz - 2], ", ") + " and " +      
                                                    indices[sz - 1] :      
                                                    indices[0]) + ".", "who") + "\\n";      
  \}      
      
  if (map_sizeof(away) \> 0) \{      
    sz      = map_sizeof(away);      
    indices = map_indices(away);      
    output += "Away[" + Str(sz) + "]: " + TAG(      
                                                   (sz \> 1 ?      
                                                    implode(indices[..sz - 2], ", ") + " and " +      
                                                    indices[sz - 1] :      
                                                    indices[0]) + ".", "who") + "\\n";      
  \}      
      
  if (\$actor."udat:host") \{      
      if (map_sizeof(hidden) \> 0) \{      
       sz      = map_sizeof(hidden);      
       indices = map_indices(hidden);      
       output += "Dark[" + Str(sz) + "]: " + TAG(      
                                                   (sz \> 1 ?      
                                                    implode(indices[..sz - 2], ", ") + " and " +      
                                                    indices[sz - 1] :      
                                                    indices[0]) + ".", "who") + "\\n";      
    \}      
      if (map_sizeof(hiddenidle) \> 0) \{      
        sz      = map_sizeof(hiddenidle);      
        indices = map_indices(hiddenidle);      
        output += "Dark and idle[" + Str(sz) + "]: " + TAG(      
                                                   (sz \> 1 ?      
                                                    implode(indices[..sz - 2], ", ") + " and " +      
                                                    indices[sz - 1] :      
                                                    indices[0]) + ".", "who") + "\\n";      
    \}      
  \}      
      
  if (strlen(output) \< 1) \{      
    output += "Unable to locate anyone online" + (words ? " in your \\'" + words + "\\'." : ".");      
  \}        
  EmitTo(\$actor, output);   
return FALSE;      
\} else \{    
      
  for (i = 0; i \< sz_i; i++) \{      
    body     = bodylist[i];      
    bodystr  = Str(body);      
    bodyname = (\$actor."udat:host" == 1 ? (body.disguised == 1 ? Describe(body) + " (" + body."skotos:playercapname" + ")" : Describe(body)) : Describe(body));      
    /* bodyname = strip(UnSAM(body."detail:description:brief", \$this: body)); */      
    if (!body."udat:possessed") \{      
      continue;      
    \} else if (words \&\& !contains(lower_case(bodyname), words)) \{      
        continue;      
    \} else if (\$whofour) \{      
      stridle = common::convsecs(\$secs: body."udat:idle", \$short: TRUE);      
      idlelen = ((\$r1 = strlen(stridle)) \> idlelen ? \$r1 : idlelen);      
      whofour[bodyname] = stridle;      
      continue;      
    \} else if (body."theatre:notwhobody" \&\&      
               body."udat:idle" \>= 3600) \{      
      hiddenidle[bodyname] = TRUE;      
      continue;      
    \} else if (body."theatre:notwhobody") \{      
      hidden[bodyname] = TRUE;      
      continue;      
    \}      
      
    if (body."udat:idle" \>= 3600) \{      
      idle[bodyname] = TRUE;      
      continue;      
    \} else if (sizeof(explode(bodyname, " ")) \>= 2 \&\& contains(bodyname, "Story")) \{      
      staff[bodyname] = TRUE;      
      continue;      
    \} else if (body."cdat:away") \{      
      away[bodyname] = TRUE;      
      continue;      
    \} else \{      
      players[bodyname] = TRUE;      
    \}      
  \}      
      
  output  = "";      
      
  if (\$whofour) \{      
    if (map_sizeof(whofour) \> 0) \{      
      sz_i    = map_sizeof(whofour);      
      indices = map_indices(whofour);      
      rows    = Int(ceil(Flt(sz_i) / Flt(3)));      
      arr     = (\{ (\{ "Characters", "Idle", "Characters", "Idle", "Characters", "Idle" \}) \});      
      
      for (i = 0; i \< rows; i++) \{      
        arr += (\{ (\{ ( i \>= sz_i ? "" : indices[i]),      
                     ( i \>= sz_i ? "" : pad_left(whofour[indices[i]], idlelen)),      
                     ((n = i + rows) \>= sz_i ? "" : indices[n]),      
                     ((n = i + rows) \>= sz_i ? "" : pad_left(whofour[indices[n]], idlelen)),      
                     ((n = i + rows + rows) \>= sz_i ? "" : indices[n]),      
                     ((n = i + rows + rows) \>= sz_i ? "" : pad_left(whofour[indices[n]], idlelen)) \}) \});      
      \}      
      EmitTo(\$actor, ascii::table(\$content: arr, \$ignoreseparator: "top bottom left right"));      
      return FALSE;      
    \}      
  \}      
      
  if (\$actor."who:alternate") \{      
    if (map_sizeof(players) \> 0) \{      
      sz_i    = map_sizeof(players);      
      indices = map_indices(players);      
      rows    = Int(ceil(Flt(sz_i) / Flt(4)));      
      arr     = (\{ (\{ "Characters", "Characters", "Characters", "Characters" \}) \});      
      
      for (i = 0; i \< rows; i++) \{      
        arr += (\{ (\{ ( i \>= sz_i ? "" : indices[i]),      
                     ((n = i + rows) \>= sz_i ? "" : indices[n]),      
                     ((n = i + rows + rows) \>= sz_i ? "" : indices[n]),      
                     ((n = i + rows + rows + rows) \>= sz_i ? "" : indices[n]) \}) \});      
      \}      
      EmitTo(\$actor, PRE( "Online[" + Str(sz_i) + "] (" + smalltime(time()) + " EST): \\n" + ascii::table(\$content: arr, \$skipfirst: TRUE)));      
    \}      
  \} else \{      
    if (map_sizeof(players) \> 0) \{      
      sz      = map_sizeof(players);      
      indices = map_indices(players);      
      output += "Online[" + Str(sz) + "] (" + smalltime(time()) + " EST): " + TAG(      
                                            (sz \> 1 ?      
                                             implode(indices[..sz - 2], ", ") + " and " +      
                                             indices[sz - 1] :      
                                             indices[0]) + ".", "who") + "\\n";      
    \}      
  \}      
      
  if (map_sizeof(staff) \> 0) \{      
    sz      = map_sizeof(staff);      
    indices = map_indices(staff);      
    output += "Staff[" + Str(sz) + "]: " + TAG(      
                                          (sz \> 1 ?      
                                           implode(indices[..sz - 2], ", ") + " and " +      
                                           indices[sz - 1] :      
                                           indices[0]) + ".", "who") + "\\n";      
  \}      
      
  if (map_sizeof(idle) \> 0) \{      
    sz      = map_sizeof(idle);      
    indices = map_indices(idle);      
    output += "Idle[" + Str(sz) + "]: " + TAG(      
                                                   (sz \> 1 ?      
                                                    implode(indices[..sz - 2], ", ") + " and " +      
                                                    indices[sz - 1] :      
                                                    indices[0]) + ".", "who") + "\\n";      
  \}      
      
  if (map_sizeof(away) \> 0) \{      
    sz      = map_sizeof(away);      
    indices = map_indices(away);      
    output += "Away[" + Str(sz) + "]: " + TAG(      
                                                   (sz \> 1 ?      
                                                    implode(indices[..sz - 2], ", ") + " and " +      
                                                    indices[sz - 1] :      
                                                    indices[0]) + ".", "who") + "\\n";      
  \}      
      
  if (\$actor."udat:host") \{      
      if (map_sizeof(hidden) \> 0) \{      
       sz      = map_sizeof(hidden);      
       indices = map_indices(hidden);      
       output += "Dark[" + Str(sz) + "]: " + TAG(      
                                                   (sz \> 1 ?      
                                                    implode(indices[..sz - 2], ", ") + " and " +      
                                                    indices[sz - 1] :      
                                                    indices[0]) + ".", "who") + "\\n";      
    \}      
      if (map_sizeof(hiddenidle) \> 0) \{      
        sz      = map_sizeof(hiddenidle);      
        indices = map_indices(hiddenidle);      
        output += "Dark and idle[" + Str(sz) + "]: " + TAG(      
                                                   (sz \> 1 ?      
                                                    implode(indices[..sz - 2], ", ") + " and " +      
                                                    indices[sz - 1] :      
                                                    indices[0]) + ".", "who") + "\\n";      
    \}      
  \}      
      
  if (strlen(output) \< 1) \{      
    output += "Unable to locate anyone online" + (words ? " containing \\'" + words + "\\'." : ".");      
  \}      
      
  EmitTo(\$actor, output);      
\}      
      
\}
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1178506201, "tunk_bodin", "X", 1178506281, "tunk_bodin", "X", 1178506323, "tunk_bodin", "X", 1178506357, "tunk_bodin", "X", 1178506580, "tunk_bodin", "X", 1178506662, "tunk_bodin", "X" \})
      </Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Socials:Verb>
</object>
