<object clone="/base/obj/thing" owner="SkotOS">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="tester"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">Tester</Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="button" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="button"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             button of <owner what="$(this)"/>
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="1234:merry:react:shake-dob">
         X[M] if(\$this.charupdating) return FALSE;
\$roo = nil /* defunct */;
\$folder = "Chatters:IC";
EmitTo(\$roo, "Character update started");
\$this.charupdating = 1;
\$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");
for(\$x=0;\$x\<sizeof(\$folders);\$x++) \{
  \$folder = "Chatters:IC:"+\$folders[\$x];
  \$characters = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
  for(\$y=0;\$y\<sizeof(\$characters);\$y++) \{
    \$chatter = Obj("Chatters:IC:"+\$folders[\$x]+":"+\$characters[\$y]);

    \$replaceMap = ([ "hooded cloak":"hooded lacerna cloak", "cloak-hooded":"hooded cloak" ]);
    \$old = map_indices(\$replaceMap);
    \$new = map_values(\$replaceMap);

    if(\$chatter) \{
        if(\$chatter."crafting:patterns") \{
            \$patterns = \$chatter."crafting:patterns";
            \$cats = map_indices(\$patterns);
            for(\$i = 0; \$i \< sizeof(\$cats); \$i++) \{
                for(\$j = 0; \$j \< sizeof(\$old); \$j++) \{
                    if(member(\$old[\$j], \$patterns[\$cats[\$i]])) \{
                        \$patterns[\$cats[\$i]] += (\{ \$new[\$j] \});
                        \$patterns[\$cats[\$i]] -= (\{ \$old[\$j] \});
                    \}
                \}
            \}
            \$chatter."crafting:patterns" = \$patterns;
        \}
    \}




    \$delay(0.02, FALSE, "e991");
  \}
\}

\$this.charupdating = nil;
    /* EmitTo(\$\{Chatters:IC:ro:roo\}, dump_value(\$map)); */
    EmitTo(nil /* defunct */, "Done"); 

return TRUE;

Call(\$\{Ironclaw:Lib:ConsignmentSystem\}, "generate_orders");

return TRUE;

\$roo = nil /* defunct */;

\$folder = "Chatters:IC";
EmitTo(\$roo, "Character update started");
\$this.charupdating = 1;
\$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");
for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{
  \$folder = "Chatters:IC:"+\$folders[\$i];
  \$characters = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
  for(\$j=0;\$j\<sizeof(\$characters);\$j++) \{
    \$chatter = Obj("Chatters:IC:"+\$folders[\$i]+":"+\$characters[\$j]);
    /* CODE GOES HERE */

  if(\$chatter) \{
       if(\$chatter."trait:agility") \{
           \$agility = \$chatter."trait:agility";
           Set(\$chatter, "trait:will", \$agility);
           Set(\$chatter, "trait:agility", nil);
       \}
  \}

    \$delay(0.002, TRUE, "8ea5");
  \}
\}
EmitTo(\$roo, "Character update done");
\$this.charupdating = nil;
return TRUE;

\$delay(1, TRUE, "350f");
if(Call(\$\{Ironclaw:Lib:Characters:RankScripts\}, "ip_check")) \{
    EmitIn(\$actor."base:environment", TAG(Str(\$names[0]) + " and " + Str(\$names[1]) + " have the same ip address.", "imp"));
\} else \{
    EmitIn(\$actor."base:environment", TAG(Str(\$names[0]) + " and " + Str(\$names[1]) + " have different ip addresses.", "imp"));
\}

return TRUE;

\$tradingLists = (\{ \$\{Allegory:NPCs:NIPs:TradingLists:Northeast:Carpenter:LumberBasic\}, \$\{Allegory:NPCs:NIPs:TradingLists:Northeast:Stonemason:Mason\}, \$\{Allegory:NPCs:NIPs:TradingLists:Northeast:Smithy:Blacksmith\}, \$\{Ironclaw:NPCs:Traders:TradingLists:ClothMerchant\}, \$\{Allegory:NPCs:NIPs:TradingLists:Northeast:Tailors:FabricBasic\} \});

\$craftingLists = (\{ \$\{Ironclaw:Lib:Crafting:Wood:Backups:LumberDB\}, \$\{Ironclaw:Lib:Crafting:Stone:Backup:StoneDB\}, \$\{Allegory:Lib:Crafting:Blacksmith:MetalRodDB\}, \$\{Ironclaw:Lib:Crafting:Clothing:Old:TailorDB\}, \$\{Ironclaw:Lib:Crafting:Clothing:Old:SeamstressDB\}, \$\{Ironclaw:Lib:Crafting:Clothing:Old:NeedleworkerDB\} \});

\$cost = 1;
\$value = 10;
\$quantity = 10;

if(!\$iob) return TRUE;
if(!sizeof(\$iob)) return TRUE;

\$item = NRefOb(\$iob[0]);
\$type = \$item."trait:objecttype";

EmitTo(\$actor, dump_value(\$type));

/* Does the item exist on one of the crafting lists? */
\$found = 0;
for(\$i = 0; \$i \< sizeof(\$craftingLists) \&\& !\$found; \$i++) \{
    \$db = copy(\$craftingLists[\$i]."*");
    \$temp = map_indices(\$db);
    for(\$j = 0; \$j \< sizeof(\$temp); \$j++) \{
        if(typeof(\$db[\$temp[\$j]]) == 6) \{
            \$temp2 = \$db[\$temp[\$j]];
            if(\$temp2[\$type]) \{
                \$cost = Int(\$temp2[\$type]["cost"][0]);
                \$found = 1;
            \}
        \}
    \}
\}

if(!\$item."trait:material") \{
    EmitTo(\$actor, "trait:material not defined");
    return FALSE;
\}

\$material = \$item."trait:material";

\$found = 0;
for(\$i = 0; \$i \< sizeof(\$tradingLists) \&\& !\$found; \$i++) \{
    \$list = copy(\$tradingLists[\$i]."*");
    \$temp = map_indices(\$list);
    for(\$j = 0; \$j \< sizeof(\$temp); \$j++) \{
        \$temp2 = \$list[\$temp[\$j]];
        if(typeof(\$temp2) == 6) \{
            if(\$temp2["object"]) \{
                \$ob = \$temp2["object"];
                if(\$ob."trait:material" == \$material) \{
                    \$quantity = Int(\$ob."trait:quantity");
                    \$value = Int(\$ob."nip:item:cost");
                    \$found = 1;
                \}
            \}
        \}
    \}
\}

\$costToMake = (\$value/\$quantity)*\$cost;

EmitTo(\$actor, dump_value(Flt(Flt(\$costToMake)/100.0)));

return FALSE;
      </Core:Property>
      <Core:Property property="abc">
         ([ "Abs":(\{ "appearance:abs" \}), "Adams apple":(\{ "appearance:adams-apple" \}), "Ankle (Left)":(\{ "appearance:left-ankle" \}), "Ankle (Right)":(\{ "appearance:right-ankle" \}), "Ankles":(\{ "appearance:ankles" \}), "Appearance":(\{ "appearance:appearance" \}), "Arm (Left)":(\{ "appearance:left-arm" \}), "Arm (Right)":(\{ "appearance:right-arm" \}), "Arms":(\{ "appearance:arms" \}), "Attention":(\{ "appearance:attention" \}), "Attitude":(\{ "appearance:attitude" \}), "Back":(\{ "appearance:back" \}), "Back (Lower)":(\{ "appearance:lower-back" \}), "Back hand (Left)":(\{ "appearance:left-back-hand" \}), "Back hand (Right)":(\{ "appearance:right-back-hand" \}), "Bicep (Left)":(\{ "appearance:left-bicep" \}), "Bicep (Right)":(\{ "appearance:right-bicep" \}), "Biceps":(\{ "appearance:biceps" \}), "Blood":(\{ "appearance:blood" \}), "Body":(\{ "appearance:body" \}), "Bones":(\{ "appearance:bones" \}), "Breast (Left)":(\{ "appearance:left-breast" \}), "Breast (Right)":(\{ "appearance:right-breast" \}), "Breastbone":(\{ "appearance:breastbone" \}), "Breasts":(\{ "appearance:breasts" \}), "Breath":(\{ "appearance:breath" \}), "Brow":(\{ "appearance:brow" \}), "Calf (Left)":(\{ "appearance:left-calf" \}), "Calf (Right)":(\{ "appearance:right-calf" \}), "Calves":(\{ "appearance:calves" \}), "Cheek (Left)":(\{ "appearance:left-cheek" \}), "Cheek (Right)":(\{ "appearance:right-cheek" \}), "Cheeks":(\{ "appearance:cheeks" \}), "Chest":(\{ "appearance:chest" \}), "Chin":(\{ "appearance:chin" \}), "Cleavage":(\{ "appearance:cleavage" \}), "Collarbone (Left)":(\{ "appearance:left-collarbone" \}), "Collarbone (Right)":(\{ "appearance:right-collarbone" \}), "Collarbones":(\{ "appearance:collarbones" \}), "Composure":(\{ "appearance:composure" \}), "Decolletage":(\{ "appearance:decolletage" \}), "Demeanor":(\{ "appearance:demeanor" \}), "Digits":(\{ "appearance:digits" \}), "Ear (Left)":(\{ "appearance:left-ear" \}), "Ear (Right)":(\{ "appearance:right-ear" \}), "Earlobe (Left)":(\{ "appearance:left-earlobe" \}), "Earlobe (Right)":(\{ "appearance:right-earlobe" \}), "Earlobes":(\{ "appearance:earlobes" \}), "Ears":(\{ "appearance:ears" \}), "Ego":(\{ "appearance:ego" \}), "Elbow (Left)":(\{ "appearance:left-elbow" \}), "Elbow (Right)":(\{ "appearance:right-elbow" \}), "Elbows":(\{ "appearance:elbows" \}), "Emotions":(\{ "appearance:emotions" \}), "Expression":(\{ "appearance:expression" \}), "Eye (Left)":(\{ "appearance:left-eye" \}), "Eye (Right)":(\{ "appearance:right-eye" \}), "Eyebrow (Left)":(\{ "appearance:left-eyebrow" \}), "Eyebrow (Right)":(\{ "appearance:right-eyebrow" \}), "Eyebrows":(\{ "appearance:eyebrows" \}), "Eyelashes":(\{ "appearance:eyelashes" \}), "Eyelids":(\{ "appearance:eyelids" \}), "Eyes":(\{ "appearance:eyes" \}), "Face":(\{ "appearance:face" \}), "Feelings":(\{ "appearance:feelings" \}), "Feet":(\{ "appearance:feet" \}), "Fingernails":(\{ "appearance:fingernails" \}), "Fingers":(\{ "appearance:fingers" \}), "Fingertips":(\{ "appearance:fingertips" \}), "Fist (Left)":(\{ "appearance:left-fist" \}), "Fist (Right)":(\{ "appearance:right-fist" \}), "Fists":(\{ "appearance:fists" \}), "Flesh":(\{ "appearance:flesh" \}), "Foot (Left)":(\{ "appearance:left-foot" \}), "Foot (Right)":(\{ "appearance:right-foot" \}), "Forearm (Left)":(\{ "appearance:left-forearm" \}), "Forearm (Right)":(\{ "appearance:right-forearm" \}), "Forearms":(\{ "appearance:forearms" \}), "Frown":(\{ "appearance:frown" \}), "Fur":(\{ "appearance:fur" \}), "Gaze":(\{ "appearance:gaze" \}), "Grip":(\{ "appearance:grip" \}), "Gut":(\{ "appearance:gut" \}), "Hair":(\{ "appearance:hair" \}), "Hand (Left)":(\{ "appearance:left-hand" \}), "Hand (Right)":(\{ "appearance:right-hand" \}), "Hands":(\{ "appearance:hands" \}), "Head":(\{ "appearance:head" \}), "Heart":(\{ "appearance:heart" \}), "Heel (Left)":(\{ "appearance:left-heel" \}), "Heel (Right)":(\{ "appearance:right-heel" \}), "Heels":(\{ "appearance:heels" \}), "Hip (Left)":(\{ "appearance:left-hip" \}), "Hip (Right)":(\{ "appearance:right-hip" \}), "Hipbone (Left)":(\{ "appearance:left-hipbone" \}), "Hipbone (Right)":(\{ "appearance:right-hipbone" \}), "Hipbones":(\{ "appearance:hipbones" \}), "Hips":(\{ "appearance:hips" \}), "Jaw":(\{ "appearance:jaw" \}), "Joints":(\{ "appearance:joints" \}), "Jugular":(\{ "appearance:jugular" \}), "Knee (Left)":(\{ "appearance:left-knee" \}), "Knee (Right)":(\{ "appearance:right-knee" \}), "Knees":(\{ "appearance:knees" \}), "Knuckles":(\{ "appearance:knuckles" \}), "Knuckles (Left)":(\{ "appearance:left-knuckles" \}), "Knuckles (Right)":(\{ "appearance:right-knuckles" \}), "Lap":(\{ "appearance:lap" \}), "Leg (Left)":(\{ "appearance:left-leg" \}), "Leg (Right)":(\{ "appearance:right-leg" \}), "Legs":(\{ "appearance:legs" \}), "Limbs":(\{ "appearance:limbs" \}), "Lip (Lower)":(\{ "appearance:lip-lower" \}), "Lip (Upper)":(\{ "appearance:lip-upper" \}), "Lips":(\{ "appearance:lips" \}), "Lungs":(\{ "appearance:lungs" \}), "Middle finger (Left)":(\{ "appearance:left-middle-finger" \}), "Mind":(\{ "appearance:mind" \}), "Mouth":(\{ "appearance:mouth" \}), "Muscles":(\{ "appearance:muscles" \}), "Nape":(\{ "appearance:nape" \}), "Navel":(\{ "appearance:navel" \}), "Neck":(\{ "appearance:neck" \}), "Nerves":(\{ "appearance:nerves" \}), "Nose":(\{ "appearance:nose" \}), "Nostril (Left)":(\{ "appearance:left-nostril" \}), "Nostril (Right)":(\{ "appearance:right-nostril" \}), "Nostrils":(\{ "appearance:nostrils" \}), "Palm (Left)":(\{ "appearance:left-palm" \}), "Palm (Right)":(\{ "appearance:right-palm" \}), "Palms":(\{ "appearance:palms" \}), "Pect (Left)":(\{ "appearance:left-pect" \}), "Pect (Right)":(\{ "appearance:right-pect" \}), "Pects":(\{ "appearance:pects" \}), "Personality":(\{ "appearance:personality" \}), "Presence":(\{ "appearance:presence" \}), "Pupil (Left)":(\{ "appearance:left-pupil" \}), "Pupil (Right)":(\{ "appearance:right-pupil" \}), "Pupils":(\{ "appearance:pupils" \}), "Reach":(\{ "appearance:reach" \}), "Ribs":(\{ "appearance:ribs" \}), "Rump":(\{ "appearance:rump" \}), "Scalp":(\{ "appearance:scalp" \}), "Scar":(\{ "appearance:scar" \}), "Second toe (Left)":(\{ "appearance:second-left-toe" \}), "Second toe (Right)":(\{ "appearance:second-right-toe" \}), "Shadow":(\{ "appearance:shadow" \}), "Shin (Left)":(\{ "appearance:left-shin" \}), "Shin (Right)":(\{ "appearance:right-shin" \}), "Shins":(\{ "appearance:shins" \}), "Shoulder (Left)":(\{ "appearance:left-shoulder" \}), "Shoulder (Right)":(\{ "appearance:right-shoulder" \}), "Shoulderblade (Left)":(\{ "appearance:left-shoulderblade" \}), "Shoulderblade (Right)":(\{ "appearance:right-shoulderblade" \}), "Shoulderblades":(\{ "appearance:shoulderblades" \}), "Shoulders":(\{ "appearance:shoulders" \}), "Side (Left)":(\{ "appearance:left-side" \}), "Side (Right)":(\{ "appearance:right-side" \}), "Sides":(\{ "appearance:sides" \}), "Skin":(\{ "appearance:skin" \}), "Smile":(\{ "appearance:smile" \}), "Sole (Left)":(\{ "appearance:left-sole" \}), "Sole (Right)":(\{ "appearance:right-sole" \}), "Soles":(\{ "appearance:soles" \}), "Soul":(\{ "appearance:soul" \}), "Spine":(\{ "appearance:spine" \}), "Stomach":(\{ "appearance:stomach" \}), "Teeth":(\{ "appearance:teeth" \}), "Temper":(\{ "appearance:temper" \}), "Temple (Left)":(\{ "appearance:left-temple" \}), "Temple (Right)":(\{ "appearance:right-temple" \}), "Temples":(\{ "appearance:temples" \}), "Thigh (Left)":(\{ "appearance:left-thigh" \}), "Thigh (Right)":(\{ "appearance:right-thigh" \}), "Thighs":(\{ "appearance:thighs" \}), "Thoughts":(\{ "appearance:thoughts" \}), "Throat":(\{ "appearance:throat" \}), "Thumbs":(\{ "appearance:thumbs" \}), "Toenails":(\{ "appearance:toenails" \}), "Toes":(\{ "appearance:toes" \}), "Tongue":(\{ "appearance:tongue" \}), "Torso":(\{ "appearance:torso" \}), "Touch":(\{ "appearance:touch" \}), "Tricep (Left)":(\{ "appearance:left-tricep" \}), "Tricep (Right)":(\{ "appearance:right-tricep" \}), "Triceps":(\{ "appearance:triceps" \}), "Veins":(\{ "appearance:veins" \}), "Voice":(\{ "appearance:voice" \}), "Waist":(\{ "appearance:waist" \}), "Weight":(\{ "appearance:weight" \}), "Windpipe":(\{ "appearance:windpipe" \}), "Words":(\{ "appearance:words" \}), "Wrist (Left)":(\{ "appearance:left-wrist" \}), "Wrist (Right)":(\{ "appearance:right-wrist" \}), "Wrists":(\{ "appearance:wrists" \}) ])
      </Core:Property>
      <Core:Property property="backupdontuse:merry:lib:get-patterns">
         X[M] if(!\$char) return TRUE;

\$dbs = (\{ \$\{Ironclaw:Lib:Crafting:Clothing:Old:TailorDB\}, \$\{Ironclaw:Lib:Crafting:Clothing:Old:SeamstressDB\}, \$\{Ironclaw:Lib:Crafting:Clothing:Old:NeedleworkerDB\}, \$\{Allegory:Lib:Crafting:Gardening:PlantDB\}, \$\{Ironclaw:Lib:Crafting:Blacksmith:Backup:MetalRodDB\}, \$\{Ironclaw:Lib:Crafting:Blacksmith:Backup:ArmourDB\}, \$\{Ironclaw:Lib:Crafting:Jeweler:Old:BadgeDB\}, \$\{Ironclaw:Lib:Crafting:Blacksmith:Backup:WeaponsDB\}, \$\{Ironclaw:Lib:Crafting:Jeweler:Old:JeweleryDB\}, \$\{Allegory:Lib:Crafting:Jeweler:CrestDB\}, \$\{Ironclaw:Lib:Crafting:Jeweler:Old:PendantDB\}, \$\{Ironclaw:Lib:Crafting:Stone:Backup:StoneDB\}, \$\{Ironclaw:Lib:Crafting:Stone:Backup:StatueDB\}, \$\{Allegory:Lib:Crafting:Jeweler:GemDB\}, \$\{Allegory:Lib:Crafting:Wood:FurnitureDB\}, \$\{Allegory:Lib:Crafting:Wood:LumberDB\}, \$\{Allegory:Lib:Crafting:Wood:RoomModDB\}, \$\{Allegory:Lib:Crafting:Wood:WeaponsDB\} \});

\$dbs += (\{ nil /* defunct */, \$\{Allegory:Lib:Crafting:Clothing:SeamstressHomeDB\} \});

\$careerDB = \$\{Ironclaw:Lib:Teaching:newCareersDB\}; 
\$temp = copy(\$careerDB."*"); 
\$allCareers = map_indices(\$temp) - (\{ "revisions", "blacksmith" \}) + (\{ "painter", "musician", "courtesan", "butterfly", "weaponsmith", "armorsmith", "tailor" \});

\$char."skill:career:weaponsmith" = \$char."old:skill:career:weaponsmith";
\$char."skill:career:armorsmith" = \$char."old:skill:career:armorsmith";

\$data = ([ ]);
for(\$i = 0; \$i \< sizeof(\$dbs); \$i++) \{   
    /* Make a list of all "types" in this database. Types = crafting commands. */
    \$dbProperties = copy(\$dbs[\$i]."*");

    if(structure_propmap(\$dbProperties)["alteration"] \&\& structure_propmap(\$dbProperties)["alteration"]["knowledge"]) \{    
        \$dbtemp = structure_propmap(\$dbProperties)["alteration"]["knowledge"];     
        \$dbTypes = map_indices(\$dbtemp);

        for(\$j = 0; \$j \< sizeof(\$dbTypes); \$j++) \{
            \$dbtemp2 = \$dbtemp[\$dbTypes[\$j]];

            /* Make a list of all careers that use this command */
            \$tempCareers = map_indices(\$dbtemp2);   

            /* Make a list of all careers that use this command */
            \$tempCareers = map_indices(\$dbtemp2);   

            for(\$k = 0; \$k \< sizeof(\$tempCareers); \$k++) \{  
                /* Make sure it's a valid career. This is how we separate the 0 skill required items from the rest. */   
                if(member(\$tempCareers[\$k], \$allCareers)) \{      
                    /* No compile a list of items this career can make using the command. Filter based on career level. */
                    /* If no filter provided, set it to 24 */

                    if(\$tempCareers[\$k] == "seamstress") \{
                        \$levelLimit = Int(Get(\$char, "old:skill:career:seamstress"));                   
                    \} else if(\$tempCareers[\$k] == "tailor") \{
                        \$levelLimit = Int(Get(\$char, "old:skill:career:tailor"));
                    \} else \{
                        \$levelLimit = Int(Get(\$char, "skill:career:" + \$tempCareers[\$k]));
                    \}

                    for(\$l = 1; \$l \<= \$levelLimit; \$l++) \{   
                        if(\$dbtemp2[\$tempcareers[\$k]][Str(\$l)]) \{
                            \$list = map_indices(\$dbtemp2[\$tempcareers[\$k]][Str(\$l)]);

                            if(sizeof(\$list)) \{
                                if(!\$data[\$dbTypes[\$j]]) \{     
                                    \$data[\$dbTypes[\$j]] = (\{ \});     
                                \}

                                \$data[\$dbTypes[\$j]] \|= map_indices(\$dbtemp2[\$tempcareers[\$k]][Str(\$l)]);
                            \}
                        \}
                    \}
                \}
            \}
        \}
    \}
\}

\$char."skill:career:weaponsmith" = nil;
\$char."skill:career:armorsmith" = nil;

\$char."crafting:patterns" = \$data;

return TRUE;
      </Core:Property>
      <Core:Property property="bak:bak:merry:react:shake-dob">
         X[M] \$roo = nil /* defunct */;

if(\$evoke) \{
    \$name = replace_strings(\$evoke, "\\"", "");
    \$char = common::lookup(\$name: \$name);
\}

\$age = Int((time() - \$char."skotos:creation_time")/86400);
\$loggedintime = Int(\$char."cdat:sessiontime"/3600);
\$maxlpgain1 = Int(\$age*4);
\$maxlpgain2 = Int((\$loggedintime/3)*6);

\$temp = copy(\$char."*");
\$skillMap = structure_propmap(\$temp)["skill"];
\$skillc = map_indices(\$skillMap);

\$total = 0;
for(\$i = 0; \$i \< sizeof(\$skillc); \$i++) \{
    \$skills = \$skillMap[\$skillc[\$i]];
    if(typeof(\$skills) == 6) \{
        \$skillNames = map_indices(\$skills);
        for(\$j = 0; \$j \< sizeof(\$skillNames); \$j++) \{
            \$skillStr = "skill:" + \$skillc[\$i] + ":" + \$skillNames[\$j];
            \$total += ::calc(\$s: \$skillStr);
        \}
    \}
\}

\$total += \$char."student:learningpoints"-150;

\$maxlpgain = Int(\$maxlpgain1 + \$maxlpgain2);
\$eff = Str(Flt(Flt(\$total)/Flt(\$maxlpgain))*100.0);

if(\$total \> \$maxlpgain) \{
    EmitTo(\$roo, TAG(Describe(\$char) + " - " + dump_value(\$total) + " LPs spent/" + dump_value(\$maxlpgain)  + " max LPs (" + \$eff + "% efficiency)", "imp"));
\} else \{
    EmitTo(\$roo, Describe(\$char) + " - " + dump_value(\$total) + " LPs spent/" + dump_value(\$maxlpgain) + " max LPs (" + \$eff + "% efficiency)");
\}

return FALSE;


if(\$actor != \$roo) \{
    EmitTo(\$actor, "You can't do that.");
    return FALSE;
\}


if(\$this.charupdating) \{
    EmitTo(\$actor, "Characters are already updating.");
    return FALSE;
\}

\$this."charname:list" = (\{ \});
\$folder = "Chatters:IC";
EmitTo(\$roo, "Character update started");
\$this.charupdating = 1;
\$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");
for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{
  \$folder = "Chatters:IC:"+\$folders[\$i];
  \$characters = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
  for(\$j=0;\$j\<sizeof(\$characters);\$j++) \{
    \$char = Obj("Chatters:IC:"+\$folders[\$i]+":"+\$characters[\$j]);
    /* CODE GOES HERE */

  if(\$char == \$\{Chatters:Backup:IC:xe:xena0\}) \{
   if(\$char."temp:attr1" \&\& \$char."temp:attr2" \&\& \$char."temp:attr3") \{
    \$char."trait:body" = nil;
    \$char."trait:agility" = nil;
    \$char."trait:speed" = nil;
    \$char."trait:mind" = nil;
    
    if(\$char."trait:body") \$char_att = \$char."trait:body";
    if(\$char."trait:agility") \$agility_att = \$char."trait:agility";
    if(\$char."trait:speed") \$speed_att = \$char."trait:speed";
    if(\$char."trait:mind") \$mind_att = \$char."trait:mind";
                                        
    if(\$char."temp:attr1" == "body") \$char_att += 5;
    if(\$char."temp:attr1" == "agility") \$agility_att += 5;
    if(\$char."temp:attr1" == "speed" \|\| \$char."temp:attr1" == "dexterity") \$speed_att += 5;
    if(\$char."temp:attr1" == "mind") \$mind_att += 5;
                                        
    if(\$char."temp:attr2" == "body") \$char_att += 2;
    if(\$char."temp:attr2" == "agility") \$agility_att += 2;
    if(\$char."temp:attr2" == "speed" \|\| \$char."temp:attr2" == "dexterity") \$speed_att += 2;
    if(\$char."temp:attr2" == "mind") \$mind_att += 2;
                                        
    if(\$char."temp:attr3" == "body") \$char_att -= 2;
    if(\$char."temp:attr3" == "agility") \$agility_att -= 2;
    if(\$char."temp:attr3" == "speed" \|\| \$char."temp:attr3" == "dexterity") \$speed_att -= 2;
    if(\$char."temp:attr3" == "mind") \$mind_att -= 2;
                                        
    if(\$char_att \< 1) \$char_att = 1;
    if(\$agility_att \< 1) \$agility_att = 1;
    if(\$speed_att \< 1) \$speed_att = 1;
    if(\$mind_att \< 1) \$mind_att = 1;
                                        
    \$char."trait:body" = \$char_att;
    \$char."trait:agility" = \$agility_att;
    \$char."trait:speed" = \$speed_att;
    \$char."trait:mind" = \$mind_att;  
   \} 
  \}

    \$delay(0.002, TRUE, "8ea5");
  \}
\}
EmitTo(\$roo, "Character update done");
\$this.charupdating = nil;
return TRUE;
      </Core:Property>
      <Core:Property property="bak:merry:react-pre:tap-using">
         X[M] int i;

\$exempt = (\{ \$\{Allegory:Guilds:germany\}, \$\{Allegory:Guilds:france\}, \$\{Allegory:Guilds:scotland\}, \$\{Allegory:Guilds:church\} \});

\$az = nil /* defunct */;
/* get a list of guilds */
EmitTo(\$az, "Getting a list of guilds");
/* get a list of all guilds */
\$folder = "Ironclaw:Guilds";
\$guilds = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
for(i=0; i\<sizeof(\$guilds); i++) \{
  \$guilds[i] = Obj("Ironclaw:Guilds:" + \$guilds[i]);
\}

\$total1 = 0;
\$total2 = 0;

/* run todays trading */
for(\$guild_daily_functions_i=0; \$guild_daily_functions_i\<sizeof(\$guilds); \$guild_daily_functions_i++) \{
  \$guild = \$guilds[\$guild_daily_functions_i];
  if(!\$guild.mothballed \&\& !member(\$guild, \$exempt) \&\& \$guild.leader \&\& (!\$guild.leader."trait:title" \|\| (\$guild.leader."trait:title" \&\& strlen(\$guild.leader."trait:title") \> 4 \&\& \$guild.leader."trait:title"[0..4] != "Story"))) \{

    \$delay(0.0001, TRUE, "7ed2");

    \$kitty = Int(\$guild.kitty);

    \$guildtotal1 = Int(\$kitty/100);
    \$guildtotal2 = Int(\$kitty/200);

    EmitTo(\$az, "Total Contribution for " + dump_value(\$guild) + ": 1% Tax = " + Str(\$guildtotal1) + "; 0.5% Tax = " + Str(\$guildtotal2));

    \$total1 += \$guildtotal1;
    \$total2 += \$guildtotal2;

  \}

\}

EmitTo(\$az, "1% Tax Total: " + Str(\$total1) + "; 0.5% Tax Total: " + Str(\$total2));

EmitTo(\$az, "Guild maintenance done.");
return TRUE;

Call(\$\{Ironclaw:Lib:Combat:Cards:Injuries\}, "test:healing-cycle");

return FALSE;

if(!\$dob) \{
    return TRUE;
\}

if(!sizeof(\$dob)) \{
    return TRUE;
\}

if(sizeof(\$dob) \> 1) \{
    return TRUE;
\}

Call(\$\{Ironclaw:Effects:Poison:BloodPoison\}, "external", \$signal: "cured", \$who: NRefOb(\$dob[0]) );
Call(\$\{Ironclaw:Effects:Poison:BloodPoison\}, "remove", \$who: NRefOb(\$dob[0]) );


return TRUE;
      </Core:Property>
      <Core:Property property="changecats:merry:react:shake-dob">
         X[M] if(\$this.charupdating) return FALSE;
\$roo = nil /* defunct */;
\$folder = "Chatters:IC";
EmitTo(\$roo, "Character update started");
\$this.charupdating = 1;
\$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");
for(\$x=0;\$x\<sizeof(\$folders);\$x++) \{
  \$folder = "Chatters:IC:"+\$folders[\$x];
  \$characters = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
  for(\$y=0;\$y\<sizeof(\$characters);\$y++) \{
    \$chatter = Obj("Chatters:IC:"+\$folders[\$x]+":"+\$characters[\$y]);

\$replaceMap = ([ "neck handkerchief":"tailoring-scarf", "chasuble cape":"tailoring-cape", "gollar cape":"tailoring-cape", "evening cape":"tailoring-cape", "smith apron":"tailoring apron", "eye mask":"tailoring-mask", "sword cape":"tailoring-cape", "angled skirt":"tailoring-skirtknee", "full mask":"tailoring-mask", "acorn hat":"tailoring-cap", "boot hose":"tailoring-hose", "footed pajamas":"tailoring-pajamas", "short bloomers":"tailoring-pants", "tapered sleeves":"tailoring-sleeves", "hanging sleeves":"tailoring-sleeves", "short-sleeved blouse":"tailoring-blouse", "short saberist dress":"tailoring-dress", "heeled shoes":"tailoring-shoes", "train-skirted dress":"tailoring-dress", "cross-laced bodice":"tailoring-bodice", "strapped knee-high sandals":"tailoring-sandals", "ruffled underskirt":"tailoring-skirtfloor", "tiered ruffle skirt":"tailoring-skirtankle", "floor-length gown":"tailoring-gown", "ruffled overskirt":"tailoring-skirtfloor", "slashed-sleeved doublet":"tailoring-doublet" ]);
    \$find = map_indices(\$replaceMap);
    \$new = map_values(\$replaceMap);

    if(\$chatter == nil /* defunct */) \{
        if(\$chatter."crafting:patterns") \{
            \$patterns = \$chatter."crafting:patterns";
            \$cats = map_indices(\$patterns);

            for(\$i = 0; \$i \< sizeof(\$cats); \$i++) \{
                for(\$j = 0; \$j \< sizeof(\$find); \$j++) \{
                    \$temp = lower_case(\$find[\$j]);
                    if(member(\$temp, \$patterns[\$cats[\$i]])) \{
                        \$newcat = \$new[\$j];

                        if(\$patterns[\$newcat]) \{
                            \$patterns[\$newcat] += (\{ \$temp \});
                        \} else \{
                            \$patterns[\$newcat] = (\{ \$temp \});
                        \}
                    \}
                \}
            \}
            \$chatter."crafting:patterns" = \$patterns;
        \}
    \}




    \$delay(0.02, FALSE, "e991");
  \}
\}

\$this.charupdating = nil;
    /* EmitTo(\$\{Chatters:IC:ro:roo\}, dump_value(\$map)); */
    EmitTo(nil /* defunct */, "Done"); 

return TRUE;

Call(\$\{Ironclaw:Lib:ConsignmentSystem\}, "generate_orders");

return TRUE;

\$roo = nil /* defunct */;

\$folder = "Chatters:IC";
EmitTo(\$roo, "Character update started");
\$this.charupdating = 1;
\$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");
for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{
  \$folder = "Chatters:IC:"+\$folders[\$i];
  \$characters = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
  for(\$j=0;\$j\<sizeof(\$characters);\$j++) \{
    \$chatter = Obj("Chatters:IC:"+\$folders[\$i]+":"+\$characters[\$j]);
    /* CODE GOES HERE */

  if(\$chatter) \{
       if(\$chatter."trait:agility") \{
           \$agility = \$chatter."trait:agility";
           Set(\$chatter, "trait:will", \$agility);
           Set(\$chatter, "trait:agility", nil);
       \}
  \}

    \$delay(0.002, TRUE, "8ea5");
  \}
\}
EmitTo(\$roo, "Character update done");
\$this.charupdating = nil;
return TRUE;

\$delay(1, TRUE, "350f");
if(Call(\$\{Ironclaw:Lib:Characters:RankScripts\}, "ip_check")) \{
    EmitIn(\$actor."base:environment", TAG(Str(\$names[0]) + " and " + Str(\$names[1]) + " have the same ip address.", "imp"));
\} else \{
    EmitIn(\$actor."base:environment", TAG(Str(\$names[0]) + " and " + Str(\$names[1]) + " have different ip addresses.", "imp"));
\}

return TRUE;

\$tradingLists = (\{ \$\{Allegory:NPCs:NIPs:TradingLists:Northeast:Carpenter:LumberBasic\}, \$\{Allegory:NPCs:NIPs:TradingLists:Northeast:Stonemason:Mason\}, \$\{Allegory:NPCs:NIPs:TradingLists:Northeast:Smithy:Blacksmith\}, \$\{Ironclaw:NPCs:Traders:TradingLists:ClothMerchant\}, \$\{Allegory:NPCs:NIPs:TradingLists:Northeast:Tailors:FabricBasic\} \});

\$craftingLists = (\{ \$\{Ironclaw:Lib:Crafting:Wood:Backups:LumberDB\}, \$\{Ironclaw:Lib:Crafting:Stone:Backup:StoneDB\}, \$\{Allegory:Lib:Crafting:Blacksmith:MetalRodDB\}, \$\{Ironclaw:Lib:Crafting:Clothing:Old:TailorDB\}, \$\{Ironclaw:Lib:Crafting:Clothing:Old:SeamstressDB\}, \$\{Ironclaw:Lib:Crafting:Clothing:Old:NeedleworkerDB\} \});

\$cost = 1;
\$value = 10;
\$quantity = 10;

if(!\$iob) return TRUE;
if(!sizeof(\$iob)) return TRUE;

\$item = NRefOb(\$iob[0]);
\$type = \$item."trait:objecttype";

EmitTo(\$actor, dump_value(\$type));

/* Does the item exist on one of the crafting lists? */
\$found = 0;
for(\$i = 0; \$i \< sizeof(\$craftingLists) \&\& !\$found; \$i++) \{
    \$db = copy(\$craftingLists[\$i]."*");
    \$temp = map_indices(\$db);
    for(\$j = 0; \$j \< sizeof(\$temp); \$j++) \{
        if(typeof(\$db[\$temp[\$j]]) == 6) \{
            \$temp2 = \$db[\$temp[\$j]];
            if(\$temp2[\$type]) \{
                \$cost = Int(\$temp2[\$type]["cost"][0]);
                \$found = 1;
            \}
        \}
    \}
\}

if(!\$item."trait:material") \{
    EmitTo(\$actor, "trait:material not defined");
    return FALSE;
\}

\$material = \$item."trait:material";

\$found = 0;
for(\$i = 0; \$i \< sizeof(\$tradingLists) \&\& !\$found; \$i++) \{
    \$list = copy(\$tradingLists[\$i]."*");
    \$temp = map_indices(\$list);
    for(\$j = 0; \$j \< sizeof(\$temp); \$j++) \{
        \$temp2 = \$list[\$temp[\$j]];
        if(typeof(\$temp2) == 6) \{
            if(\$temp2["object"]) \{
                \$ob = \$temp2["object"];
                if(\$ob."trait:material" == \$material) \{
                    \$quantity = Int(\$ob."trait:quantity");
                    \$value = Int(\$ob."nip:item:cost");
                    \$found = 1;
                \}
            \}
        \}
    \}
\}

\$costToMake = (\$value/\$quantity)*\$cost;

EmitTo(\$actor, dump_value(Flt(Flt(\$costToMake)/100.0)));

return FALSE;
      </Core:Property>
      <Core:Property property="completed:merry:react:shake-dob">
         X[M] if(\$this.charupdating) return FALSE;
\$roo = nil /* defunct */;
\$folder = "Chatters:IC";
EmitTo(\$roo, "Character update started");
\$this.charupdating = 1;
\$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");
for(\$x=0;\$x\<sizeof(\$folders);\$x++) \{
  \$folder = "Chatters:IC:"+\$folders[\$x];
  \$characters = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
  for(\$y=0;\$y\<sizeof(\$characters);\$y++) \{
    \$chatter = Obj("Chatters:IC:"+\$folders[\$x]+":"+\$characters[\$y]);

    \$lps = 0;
    if(\$chatter) \{
       
if(\$chatter."skill:career:weaponsmith" \&\& \$chatter."skill:career:armorsmith") \{
           if(\$chatter."skill:career:weaponsmith" \> \$chatter."skill:career:armorsmith") \{
               \$blacksmith = \$chatter."skill:career:weaponsmith";
               \$lps = ::getlps(\$career: \$chatter."skill:career:armorsmith");
           \} else \{
               \$blacksmith = \$chatter."skill:career:armorsmith";
               \$lps = ::getlps(\$career: \$chatter."skill:career:weaponsmith");
           \}

           \$blacksmith = ::spendlps(\$career: \$blacksmith);
           \$chatter."skill:career:blacksmith" = \$blacksmith;
           \$chatter."old:skill:career:weaponsmith" = \$chatter."skill:career:weaponsmith";
           \$chatter."skill:career:weaponsmith" = nil;
           \$chatter."old:skill:career:armorsmith" = \$chatter."skill:career:armorsmith";
           \$chatter."skill:career:armorsmith" = nil;
           \$chatter."student:learningpoints" = Int(\$chatter."student:learningpoints") + \$lps;
           \$chatter."crafting:transition:lps" = \$lps;

           EmitTo(\$roo, dump_value(\$chatter) + " - Armorsmith: " + Str(\$chatter."skill:career:armorsmith") + " ; Weaponsmith: " + Str(\$chatter."skill:career:weaponsmith"));
           EmitTo(\$roo, dump_value(\$chatter) + " - New Blacksmith: " + Str(\$blacksmith) + " ; LPs: " + Str(\$lps)); 

           if(\$lps \> 100 \&\& \$blacksmith == 24) \{
               general::opage(\$to: \$chatter, \$from: nil /* defunct */, \$message: "This is to notify you that your character has been affected by a recent change in our crafting system. Weaponsmith and Armorsmith were merged back into a single Blacksmith career. As a result, your levels in Weaponsmith and Armorsmith have been applied to Blacksmith and you have been refunded " + Str(\$lps) + " learning points equivalent to levels lost plus an additional 10%. Since your Blacksmith career is maxed out, and you have remaining learning points, we will apply those to levels in any career that you want. Just assist with your request and we will take care of it. Please be 100% sure with your decision though because there will be no do overs. Thank you!", \$timestamp: TRUE);
           \}

       \}

       if(\$chatter."skill:career:weaponsmith" \&\& !\$chatter."skill:career:armorsmith") \{
           \$chatter."skill:career:blacksmith" = \$chatter."skill:career:weaponsmith";
           \$chatter."old:skill:career:weaponsmith" = \$chatter."skill:career:weaponsmith";
           \$chatter."skill:career:weaponsmith" = nil;
           EmitTo(\$roo, dump_value(\$chatter) + " - Weaponsmith: " + Str(\$chatter."skill:career:weaponsmith") + " ; New Blacksmith: " + Str(\$chatter."skill:career:weaponsmith")); 
       \}

       if(\$chatter."skill:career:armorsmith" \&\& !\$chatter."skill:career:weaponsmith") \{
           \$chatter."skill:career:blacksmith" = \$chatter."skill:career:armorsmith";
           \$chatter."old:skill:career:armorsmith" = \$chatter."skill:career:armorsmith";
           \$chatter."skill:career:armorsmith" = nil; 
           EmitTo(\$roo, dump_value(\$chatter) + " - Armorsmith: " + Str(\$chatter."skill:career:armorsmith") + " ; New Blacksmith: " + Str(\$chatter."skill:career:armorsmith"));
       \}

    \}

    \$delay(0.02, FALSE, "e991");
  \}
\}

\$this.charupdating = nil;
EmitTo(nil /* defunct */, "Done"); 

return TRUE;
      </Core:Property>
      <Core:Property property="craftingtransition:merry:react:shake-dob">
         X[M] if(\$this.charupdating) return FALSE;
\$roo = nil /* defunct */;
\$folder = "Chatters:IC";
EmitTo(\$roo, "Character update started");
\$this.charupdating = 1;
\$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");
for(\$x=0;\$x\<sizeof(\$folders);\$x++) \{
  \$folder = "Chatters:IC:"+\$folders[\$x];
  \$characters = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
  for(\$y=0;\$y\<sizeof(\$characters);\$y++) \{
    \$chatter = Obj("Chatters:IC:"+\$folders[\$x]+":"+\$characters[\$y]);

    \$lps = 0;
    if(\$chatter) \{
       if(\$chatter."skill:career:weaponsmith" \&\& \$chatter."skill:career:armorsmith" \&\& !contains(Str(\$chatter."trait:title"), "Story")) \{
           if(\$chatter."skill:career:weaponsmith" \> \$chatter."skill:career:armorsmith") \{
               \$blacksmith = \$chatter."skill:career:weaponsmith";
               \$lps = ::getlps(\$career: \$chatter."skill:career:armorsmith");
           \} else \{
               \$blacksmith = \$chatter."skill:career:armorsmith";
               \$lps = ::getlps(\$career: \$chatter."skill:career:weaponsmith");
           \}
           \$blacksmith = ::spendlps(\$career: \$blacksmith);
           /* \$chatter."skill:career:blacksmith" = \$blacksmith */
           /* \$chatter."old:skill:career:weaponsmith" = \$chatter."skill:career:weaponsmith"; */
           /* \$chatter."skill:career:weaponsmith" = nil; */
           /* \$chatter."old:skill:career:armorsmith" = \$chatter."skill:career:armorsmith"; */
           /* \$chatter."skill:career:armorsmith" = nil; */

           /* EmitTo(\$roo, dump_value(\$chatter) + " - Armorsmith: " + Str(\$chatter."skill:career:armorsmith") + " ; Weaponsmith: " + Str(\$chatter."skill:career:weaponsmith")); */
           /* EmitTo(\$roo, dump_value(\$chatter) + " - New Blacksmith: " + Str(\$blacksmith) + " ; LPs: " + Str(\$lps)); */
       \}

       if(\$chatter."skill:career:weaponsmith" \&\& !\$chatter."skill:career:armorsmith") \{
           /* \$chatter."skill:career:blacksmith" = \$chatter:skill:career:weaponsmith"; */
           /* \$chatter."old:skill:career:weaponsmith" = \$chatter."skill:career:weaponsmith" */
           /* \$chatter."skill:career:weaponsmith" = nil; */
           /* EmitTo(\$roo, dump_value(\$chatter) + " - Weaponsmith: " + Str(\$chatter."skill:career:weaponsmith") + " ; New Blacksmith: " + Str(\$chatter."skill:career:weaponsmith")); */
       \}

       if(\$chatter."skill:career:armorsmith" \&\& !\$chatter."skill:career:weaponsmith") \{
           /* \$chatter."skill:career:blacksmith" = \$chatter:skill:career:armorsmith"; */
           /* \$chatter."old:skill:career:armorsmith" = \$chatter."skill:career:armorsmith" */
           /* \$chatter."skill:career:armorsmith" = nil; */
           /* EmitTo(\$roo, dump_value(\$chatter) + " - Armorsmith: " + Str(\$chatter."skill:career:armorsmith") + " ; New Blacksmith: " + Str(\$chatter."skill:career:armorsmith")); */
       \}

       if(\$chatter."skill:career:seamstress" \&\& \$chatter."skill:career:tailor" \&\& !contains(Str(\$chatter."trait:title"), "Story")) \{
           if(\$chatter."skill:career:seamstress" \> \$chatter."skill:career:tailor") \{
               \$seamstress = \$chatter."skill:career:seamstress";
               \$lps = ::getlps(\$career: \$chatter."skill:career:tailor");
           \} else \{
               \$seamstress = \$chatter."skill:career:tailor";
               \$lps = ::getlps(\$career: \$chatter."skill:career:seamstress");
           \}
           \$seamstress = ::spendlps(\$career: \$seamstress);
           /* \$chatter."old:skill:career:seamstress" = \$chatter."skill:career:seamstress"; */
           /* \$chatter."skill:career:seamstress" = \$seamstress */
           /* \$chatter."old:skill:career:tailor" = \$chatter."skill:career:tailor"; */
           /* \$chatter."skill:career:tailor" = nil; */

           EmitTo(\$roo, dump_value(\$chatter) + " - Seamstress: " + Str(\$chatter."skill:career:seamstress") + " ; Tailor: " + Str(\$chatter."skill:career:tailor"));
           EmitTo(\$roo, dump_value(\$chatter) + " - New Seamstress: " + Str(\$seamstress) + " ; LPs: " + Str(\$lps));
       \}

       if(\$chatter."skill:career:tailor" \&\& !\$chatter."skill:career:seamstress") \{
           /* \$chatter."skill:career:seamstress" = \$chatter:skill:career:tailor"; */
           /* \$chatter."old:skill:career:tailor" = \$chatter."skill:career:tailor" */
           /* \$chatter."skill:career:tailor" = nil; */
           /* EmitTo(\$roo, dump_value(\$chatter) + " - Tailor: " + Str(\$chatter."skill:career:tailor") + " ; New Seamstress: " + Str(\$chatter."skill:career:tailor")); */
       \}
    \}


    \$delay(0.02, FALSE, "e991");
  \}
\}

\$this.charupdating = nil;
    /* EmitTo(\$\{Chatters:IC:ro:roo\}, dump_value(\$map)); */
    EmitTo(nil /* defunct */, "Done"); 

return TRUE;
      </Core:Property>
      <Core:Property property="createpatternobs:merry:react:shake-dob">
         X[M] \$career = "Jeweler";
\$dbsMap = ([ "Bands":\$\{Allegory:Lib:Crafting:Jeweler:BandsDB\} ]);
\$ur = \$\{Ironclaw:Props:Crafting:Patterns:Jeweler:UrDesign\};

\$dbs = map_values(\$dbsMap);
\$dbsCat = map_indices(\$dbsMap);

\$data = ([ ]);
for(\$i = 0; \$i \< sizeof(\$dbs); \$i++) \{   
    \$category = \$dbsCat[\$i];

    \$dbProperties = copy(\$dbs[\$i]."*");
    \$properties = map_indices(\$dbProperties) - (\{ "revisions" \});

    for(\$j = 0; \$j \< sizeof(\$properties); \$j++) \{
        \$itemsMap = Get(\$dbs[\$i], \$properties[\$j]);
        \$items = map_indices(\$itemsMap);

        for(\$k = 0; \$k \< sizeof(\$items); \$k++) \{
            \$item = \$items[\$k];

            if(Get(\$dbs[\$i], \$properties[\$j])[\$item]["pattern"]) \{
                \$objectName = "Ironclaw:Props:Crafting:Patterns:" + \$career + ":" + \$category + ":" + capitalize(replace_strings(proper(\$item), " ", "", "-", ""));

                EmitTo(\$actor, \$objectName);

                if(!Obj(\$objectName)) \{
                    \$new = Spawn(\$ur);
                    \$new."base:objectname" = \$objectName;
                    \$new."core:objectname" = \$objectName;

                    Set(\$new, "export:pattern:default", (\{ \$dbs[\$i], \$properties[\$j], \$item \}) );

                    \$adjectives = explode(\$item, " ");
                    for(\$l = 0; \$l \< sizeof(\$adjectives); \$l++) \{
                        Set(\$new, "details:default:adjective:" + \$adjectives[\$l], TRUE);
                    \}
                \} else \{
                    \$new = Obj(\$objectName);
                    Slay(\$new);
                \}
            \}
        \}
    \}
\}



return TRUE;
      </Core:Property>
      <Core:Property property="lpcalc:merry:react:shake-dob">
         X[M] int LPS;

LPS = 0;

\$chatter = Obj(replace_strings(\$evoke, "\\"", "", ".", ""));

if(!\$chatter) \{
    EmitTo(\$actor, "No such chatter exists!");
    return FALSE;
\}

\$skillMap = structure_propmap(copy(\$chatter."*"))["skill"];

/* Calculate career LP */
\$careerMap = \$skillMap["career"];
\$careers = map_indices(\$careerMap);
for(\$i = 0; \$i \< sizeof(\$careers); \$i++) \{
    for(\$j = 1; \$j \<= \$careerMap[\$careers[\$i]]; \$j++) \{
        if(\$j \<= 10) \{
            LPS += \$j*11;
        \} else \{
            LPS += 110;
        \} 
    \}
\}

/* Calculate skill LP */
\$skillMap["career"] = nil;
\$skillMap["fatigue"] = nil;
\$skillCats = map_indices(\$skillMap);
for(\$i = 0; \$i \< sizeof(\$skillCats); \$i++) \{
    \$temp = map_indices(\$skillMap[\$skillCats[\$i]]);
    for(\$k = 0; \$k \< sizeof(\$temp); \$k++) \{
        for(\$j = 1; \$j \<= \$skillMap[\$skillCats[\$i]][\$temp[\$k]]; \$j++) \{
            if(\$j \<= 10) \{
                LPS += Int(Flt(\$j)*5.0*1.1);
            \} else \{
                LPS += 55;
            \} 
        \}
    \}
\}


EmitTo(\$actor, dump_value(LPS));

return TRUE;
      </Core:Property>
      <Core:Property property="map:waterrooms">
         ([ "A":([ 3:(\{ "n", "ne", "e", "se", "s" \}), 4:(\{ "w", "nw", "n", "e", "se", "s", "sw" \}) ]), "B":([ 3:(\{ "n", "ne", "e", "se", "s" \}), 4:(\{ "w", "nw", "n", "ne", "e", "se", "s", "sw" \}), 5:(\{ "w", "nw", "n", "ne", "e", "se", "s", "sw" \}), 6:(\{ "w", "nw", "n", "ne", "e", "se", "s", "sw" \}), 7:(\{ "w", "nw", "n", "ne", "e", "se", "s", "sw" \}), 8:(\{ "w", "nw", "n", "ne", "e", "se", "s", "sw" \}), 9:(\{ "w", "nw", "n", "ne", "e", "se", "s", "sw" \}), 10:(\{ "w", "nw", "n", "e", "se", "s", "sw" \}), 15:(\{ "w", "n", "ne", "e", "se", "s", "sw" \}), 16:(\{ "w", "nw", "n", "ne", "s", "sw" \}) ]), "C":([ 3:(\{ "n", "ne", "e", "se", "s" \}), 4:(\{ "w", "nw", "n", "ne", "e", "se", "s", "sw" \}), 5:(\{ "w", "nw", "n", "ne", "e", "se", "s", "sw" \}), 6:(\{ "w", "nw", "n", "ne", "e", "se", "s", "sw" \}), 7:(\{ "w", "nw", "n", "ne", "e", "se", "s", "sw" \}), 8:(\{ "w", "nw", "n", "ne", "e", "se", "s", "sw" \}), 9:(\{ "w", "nw", "n", "ne", "e", "se", "s", "sw" \}), 10:(\{ "w", "nw", "n", "ne", "e", "se", "s", "sw" \}), 11:(\{ "w", "nw", "n", "ne", "e", "se", "s", "sw" \}), 12:(\{ "w", "nw", "n", "ne", "e", "se", "s", "sw" \}), 13:(\{ "w", "nw", "n", "ne", "e", "se", "s", "sw" \}), 14:(\{ "w", "nw", "n", "ne", "e", "se", "s", "sw" \}), 15:(\{ "w", "nw", "n", "ne", "e", "se", "s", "sw" \}), 16:(\{ "w", "nw", "n", "s", "sw" \}) ]), "D":([ 3:(\{ "n", "ne", "e", "se", "s" \}), 4:(\{ "w", "nw", "n", "ne", "e", "se", "s", "sw" \}), 5:(\{ "w", "nw", "n", "ne", "e", "se", "s", "sw" \}), 6:(\{ "w", "nw", "n", "ne", "e", "se", "s", "sw" \}), 7:(\{ "w", "nw", "n", "ne", "e", "se", "s", "sw" \}), 8:(\{ "w", "nw", "n", "ne", "e", "se", "s", "sw" \}), 9:(\{ "w", "nw", "n", "ne", "e", "se", "s", "sw" \}), 10:(\{ "w", "nw", "n", "ne", "e", "se", "s", "sw" \}), 11:(\{ "w", "nw", "n", "ne", "e", "se", "s", "sw" \}), 12:(\{ "w", "nw", "n", "ne", "e", "se", "s", "sw" \}), 13:(\{ "w", "nw", "n", "ne", "e", "se", "s", "sw" \}), 14:(\{ "w", "nw", "n", "ne", "e", "se", "s", "sw" \}), 15:(\{ "w", "nw", "n", "ne", "e", "se", "s", "sw" \}), 16:(\{ "w", "nw", "n", "s", "sw" \}) ]), "E":([ 3:(\{ "n", "ne", "e", "se", "s" \}), 4:(\{ "w", "nw", "n", "ne", "e", "s", "sw" \}), 5:(\{ "w", "nw", "n", "ne", "e", "sw" \}), 6:(\{ "w", "nw", "n", "ne", "e" \}), 7:(\{ "w", "nw", "n", "ne", "e" \}), 8:(\{ "w", "nw", "n", "ne", "e" \}), 9:(\{ "w", "nw", "n", "ne", "e" \}), 10:(\{ "w", "nw", "n", "ne", "e" \}), 11:(\{ "w", "nw", "n", "ne", "e" \}), 12:(\{ "w", "nw", "n", "ne", "e" \}), 13:(\{ "w", "nw", "n", "ne", "e" \}), 14:(\{ "w", "nw", "n", "ne", "e" \}), 15:(\{ "w", "nw", "n", "ne", "e" \}), 16:(\{ "w", "nw", "n", "s", "se" \}) ]), "F":([ 2:(\{ "ne", "e", "se", "s", "sw" \}), 3:(\{ "w", "n", "ne", "e", "s", "sw" \}), 4:(\{ "w", "nw", "n", "ne", "sw" \}), 16:(\{ "nw", "n", "e" \}), 17:(\{ "w", "nw" \}) ]), "G":([ 1:(\{ "ne", "e", "se", "s" \}), 2:(\{ "w", "n", "ne", "e", "s", "sw" \}), 3:(\{ "w", "nw", "n", "ne", "sw" \}) ]), "H":([ 1:(\{ "n", "ne", "e" \}), 2:(\{ "w", "nw", "n", "ne" \}) ]) ])
      </Core:Property>
      <Core:Property property="merry:blabhlah:test">
         X[M] if((\$actor == \$this."trait:ownerone" \|\| \$actor == \$this."trait:ownertwo")) \{         
   if(\$evoke) \{         
         
      /* Identify the command from the actor's evoke. */         
      \$command = \$evoke[1..strlen(\$evoke)-2];         
         
       /* Select appropriate emit based on the command. */         
      if(\$command == "shimmy") \{
         EmitIn(\$this."base:environment", TAG("The colorfully clad dancers shimmy their hips to and fro in time to the clapping of their finger cymbals, the belts around their waists filling the room with a jangling sound.", "social:third"));
      \} else if(\$command == "swirl") \{
         EmitIn(\$this."base:environment", TAG("Lifting their arms skyward, the dancers swirl around and around as a tornado of colorful silken scarves surround their bodies with the rapid spinning.", "social:third"));
      \} else if(\$command == "hipthrust") \{   
         EmitIn(\$this."base:environment", TAG("Turning to the side, the dancers swish their hips forward and backward in unison as their belts jangle in rhythm with the movements.", "social:third"));
      \} else if(\$command == "bellyroll") \{   
         EmitIn(\$this."base:environment", TAG("With fluid, sinuous movements, the dancers roll their bare midriffs with an undulating motion.", "social:third"));
      \} else if(\$command == "silks") \{   
         EmitIn(\$this."base:environment", TAG("Gathering their colorful silken scarves, the dancers pull them around themselves to fully conceal their bodies from view before parting them once more with a swirl.", "social:third"));
      \} else if(\$command == "ululate") \{   
         EmitIn(\$this."base:environment", TAG("One of the dancers lets lose an exotic, ululating song as the dancers twirl around her with a cascading tornado of colored silk.", "social:third"));
      \} else if(\$command == "backbend") \{   
         EmitIn(\$this."base:environment", TAG("The dancers form a circle and sink to their knees, shimmying their shoulders as they all simultaneously dip into a backbend before returning upright.", "social:third"));
      \} else if(\$command == "shouldershimmy") \{   
         EmitIn(\$this."base:environment", TAG("Shimmying their shoulders in time to the clash of their finger cymbals, the dancers all lean forward before standing upright again, their hips winding to and fro.", "social:third"));
      \} else if(\$command == "eights") \{   
         EmitIn(\$this."base:environment", TAG("The dancers swirl their hips back and forth with intricate figure-eight movements.", "social:third"));
      \} else \{
         EmitTo(\$actor, "Valid controls for "+Describe(\$this)+" are: shimmy, swirl, hipthrust, bellyroll, silks, ululate, backbend, shouldershimmy, eights.");
      \}
   \} else \{
      /* If the actor did not give a command, list commands to the controller. */
      EmitTo(\$actor, "Valid controls for "+Describe(\$this)+" are: shimmy, swirl, hipthrust, bellyroll, silks, ululate, backbend, shouldershimmy, eights.");\}
   \} else \{
      EmitTo(\$actor, "You cannot control "+Describe(\$this)+".");         
\}         
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:add_detail">
         X[M] int i;

\$detailName = "details:" + \$item; 
 
\$brief = ParseXML(replace_strings(dump_value(NRefOb(\$detail)."details:default:description:brief"), "X[S]", "", "trait:brief", "trait:" + replace_strings(\$detailName, "details:", "", " ", "-") + ":brief")); 
Set(\$book, \$detailName + ":description:brief:local", \$brief); 
 
\$look = ParseXML(replace_strings(dump_value(NRefOb(\$detail)."details:default:description:look"), "X[S]", "", "trait:brief", "trait:" + replace_strings(\$detailName, "details:", "", " ", "-") + ":brief", "trait:type", "trait:" + replace_strings(\$detailName, "details:", "", " ", "-") + ":type")); 
Set(\$book, \$detailName + ":description:look:local", \$look); 
 
\$examine = ParseXML(replace_strings(dump_value(NRefOb(\$detail)."details:default:description:examine"), "X[S]", "", "trait:brief", "trait:" + replace_strings(\$detailName, "details:", "", " ", "-") + ":brief", "trait:type", "trait:" + replace_strings(\$detailName, "details:", "", " ", "-") + ":type"));; 
Set(\$book, \$detailName + ":description:examine:local", \$examine); 
 
\$snames = NRefOb(\$detail)."details:default:snames"; 
for(i = 0; i \< sizeof(\$snames); i++) \{ 
    Set(\$book, \$detailName + ":sname:" + \$snames[i], TRUE); 
\} 
 
\$pnames = NRefOb(\$detail)."details:default:pnames"; 
for(i = 0; i \< sizeof(\$pnames); i++) \{ 
    Set(\$book, \$detailName + ":pname:" + \$pnames[i], TRUE); 
\} 
 
\$adjectives = NRefOb(\$detail)."details:default:adjectives"; 
for(i = 0; i \< sizeof(\$adjectives); i++) \{ 
    Set(\$book, \$detailName + ":adjective:" + \$adjectives[i], TRUE); 
\} 
Set(\$book, \$detailName + ":adjective:" + \$match, TRUE);

Set(\$book, \$detailName + ":adjective:mask", TRUE);
Set(\$book, \$detailName + ":carpenter", TRUE);

Set(\$book, \$detailName + ":prepositions:close to", TRUE); 
Set(\$book, \$detailName + ":prepositions:against", TRUE); 
Set(\$book, \$detailName + ":prepositions:under", TRUE); 
Set(\$book, \$detailName + ":prepositions:in", TRUE); 
Set(\$book, \$detailName + ":prepositions:near", TRUE); 
Set(\$book, \$detailName + ":prepositions:over", TRUE); 
Set(\$book, \$detailName + ":prepositions:behind", TRUE); 
Set(\$book, \$detailName + ":prepositions:before", TRUE); 
Set(\$book, \$detailName + ":prepositions:beside", TRUE); 
Set(\$book, \$detailName + ":prepositions:on", TRUE); 

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:buildwaterrooms">
         X[M] \$ur = \$\{Ironclaw:World:Triskellian:BayOfAuvrich:UrWaterRoom\};
\$folder = "Ironclaw:World:Triskellian:BayOfAuvrich";
\$mapping = Get(\$\{Ironclaw:Staff:Roo:props:tester\}, "map:waterrooms");
\$rows = map_indices(\$mapping);

for(\$i = 0; \$i \< sizeof(\$rows); \$i++) \{
    \$cols = \$mapping[\$rows[\$i]];
    \$colsi = map_indices(\$cols);
    for(\$j = 0; \$j \< sizeof(\$colsi); \$j++) \{
        \$colString = Str(\$colsi[\$j]);
        if(\$colsi[\$j] \< 10) \$colString = "0" + Str(\$colsi[\$j]);

        \$obn = \$folder + ":" + \$rows[\$i] + ":" + \$colString;

        \$room = Obj(\$obn);

        \$exits = \$cols[\$colsi[\$j]];

        \$detailMap = ([ "w":"west", "nw":"northwest", "n":"north", "ne":"northeast", "e":"east", "se":"southeast", "s":"south", "sw":"southwest" ]);

        for(\$k = 0; \$k \< sizeof(\$exits); \$k++) \{
            \$dir = \$detailMap[\$exits[\$k]];
            \$detail = "exit-" + \$dir;
/*
            Set(\$room, "room:partition:" + \$detail, "in a boat");
            Set(\$room, "details:" + \$detail + ":exit:direction:" + \$dir, TRUE);
            Set(\$room, "details:" + \$detail + ":sname:" + \$dir, TRUE);
            Set(\$room, "details:" + \$detail + ":prepositions:close to", TRUE);              
            Set(\$room, "details:" + \$detail + ":prepositions:against", TRUE);           
            Set(\$room, "details:" + \$detail + ":prepositions:under", TRUE);           
            Set(\$room, "details:" + \$detail + ":prepositions:in", TRUE);           
            Set(\$room, "details:" + \$detail + ":prepositions:near", TRUE);             
            Set(\$room, "details:" + \$detail + ":prepositions:over", TRUE);           
            Set(\$room, "details:" + \$detail + ":prepositions:behind", TRUE);           
            Set(\$room, "details:" + \$detail + ":prepositions:before", TRUE);           
            Set(\$room, "details:" + \$detail + ":prepositions:beside", TRUE);            
            Set(\$room, "details:" + \$detail + ":prepositions:on", TRUE);
*/
            \$row = \$rows[\$i];
            \$col = \$colsi[\$j];
            if(\$dir == "west") \{
               if(\$row == "A") \$dRow = "A";
               if(\$row == "B") \$dRow = "B";
               if(\$row == "C") \$dRow = "C";
               if(\$row == "D") \$dRow = "D";
               if(\$row == "E") \$dRow = "E";
               if(\$row == "F") \$dRow = "F";
               if(\$row == "G") \$dRow = "G";
               if(\$row == "H") \$dRow = "H";
               \$dCol = \$col - 1;
               \$exitDetail = "east";
            \} else if(\$dir == "northwest") \{
               if(\$row == "B") \$dRow = "A";
               if(\$row == "C") \$dRow = "B";
               if(\$row == "D") \$dRow = "C";
               if(\$row == "E") \$dRow = "D";
               if(\$row == "F") \$dRow = "E";
               if(\$row == "G") \$dRow = "F";
               if(\$row == "H") \$dRow = "G";
               \$dCol = \$col - 1;
               \$exitDetail = "southeast";
            \} else if(\$dir == "north") \{
               if(\$row == "B") \$dRow = "A";
               if(\$row == "C") \$dRow = "B";
               if(\$row == "D") \$dRow = "C";
               if(\$row == "E") \$dRow = "D";
               if(\$row == "F") \$dRow = "E";
               if(\$row == "G") \$dRow = "F";
               if(\$row == "H") \$dRow = "G";
               \$dCol = \$col;
               \$exitDetail = "south";
            \} else if(\$dir == "northeast") \{
               if(\$row == "B") \$dRow = "A";
               if(\$row == "C") \$dRow = "B";
               if(\$row == "D") \$dRow = "C";
               if(\$row == "E") \$dRow = "D";
               if(\$row == "F") \$dRow = "E";
               if(\$row == "G") \$dRow = "F";
               if(\$row == "H") \$dRow = "G";
               \$dCol = \$col + 1;
               \$exitDetail = "southwest";
            \} else if(\$dir == "east") \{
               if(\$row == "A") \$dRow = "A";
               if(\$row == "B") \$dRow = "B";
               if(\$row == "C") \$dRow = "C";
               if(\$row == "D") \$dRow = "D";
               if(\$row == "E") \$dRow = "E";
               if(\$row == "F") \$dRow = "F";
               if(\$row == "G") \$dRow = "G";
               if(\$row == "H") \$dRow = "H";
               \$dCol = \$col + 1;
               \$exitDetail = "west";
            \} else if(\$dir == "southeast") \{
               if(\$row == "A") \$dRow = "B";
               if(\$row == "B") \$dRow = "C";
               if(\$row == "C") \$dRow = "D";
               if(\$row == "D") \$dRow = "E";
               if(\$row == "E") \$dRow = "F";
               if(\$row == "F") \$dRow = "G";
               if(\$row == "G") \$dRow = "H";
               \$dCol = \$col + 1;
               \$exitDetail = "northwest";
            \} else if(\$dir == "south") \{
               if(\$row == "A") \$dRow = "B";
               if(\$row == "B") \$dRow = "C";
               if(\$row == "C") \$dRow = "D";
               if(\$row == "D") \$dRow = "E";
               if(\$row == "E") \$dRow = "F";
               if(\$row == "F") \$dRow = "G";
               if(\$row == "G") \$dRow = "H";
               \$dCol = \$col;
               \$exitDetail = "north";
            \} else if(\$dir == "southwest") \{
               if(\$row == "A") \$dRow = "B";
               if(\$row == "B") \$dRow = "C";
               if(\$row == "C") \$dRow = "D";
               if(\$row == "D") \$dRow = "E";
               if(\$row == "E") \$dRow = "F";
               if(\$row == "F") \$dRow = "G";
               if(\$row == "G") \$dRow = "H";
               \$dCol = \$col - 1;
               \$exitDetail = "northeast";
            \}

            \$dCol = Int(\$dCol);
            if(\$dCol \< 10) \$dCol = "0" + Str(\$dCol); else \$dCol = Str(\$dCol);

            \$destOb = \$folder + ":" + Str(\$dRow) + ":" + Str(\$dCol);

            if(Obj(\$destOb)) \{
                \$test = NewNRef(Obj(\$destOb), "exit-" + \$exitDetail);
                Set(\$room, "details:" + \$detail + ":exit:dest", \$test);
            \}
        \}
    \}
\}


return FALSE;
/*
  

details:foo:exit:direction:up */
      </Core:Property>
      <Core:Property property="merry:lib:calc">
         X[M] int i, t;

t = 0;
\$level = Int(Get(\$char, \$s));
\$blah = explode(\$s, ":");
for(i = 1; i \<= \$level; i++) \{
    if(\$blah[1] == "career") \{
        if(i \< 10) t += i*10;
        if(i \>= 10) t += 100;
    \} else if(\$blah[1] == "lang") \{
        if(i \< 10) t += i*3;
        if(i \>= 10) t += 30;
    \} else \{
        if(i \< 10) t += i*5;
        if(i \>= 10) t += 50;
    \}
\}

return t;
      </Core:Property>
      <Core:Property property="merry:lib:finder">
         X[M] object env, owner, prevEnv;     
string woename, where;     
int done;     
  
done= 0;     
env= Get(\$what, "base:environment");     
while (!done) \{     
  if (env == nil) \{     
     if (prevEnv) \{     
        if (typeof(Get(prevEnv, "homeowner")) != T_OBJECT) \{     
          owner = nil;     
        \} else \{     
          owner= Get(prevEnv, "homeowner");     
        \}     
     \} else \{     
        owner= nil;     
     \}     
     if (owner == prevEnv) \{     
        env= owner;     
     \} else \{     
        env= prevEnv;     
     \}     
     done= 1;     
  \} else if (Get(env, "volition")) \{     
     done= 1;     
     break;     
  \} else \{     
    prevEnv= env;     
    env= Get(env, "base:environment");     
  \}     
\}     
     
if (env) \{     
   where= Get(env, "base:objectname");     
\} else \{     
   where= "Not really sure";     
\}     
     
if( !\$retval ) \{ 
     if(Str(\$what."trait:color") == "black") EmitTo(\$actor, dump_value(\$what));
\} else \{     
  return env;     
\}
      </Core:Property>
      <Core:Property property="merry:lib:finder2">
         X[M] object env, owner, prevEnv;            
string woename, where;            
int done;            
            
done= 0;            
env= Get(\$what, "base:environment");            
while (!done) \{            
  if (env == nil) \{            
     if (prevEnv) \{            
        if (typeof(Get(prevEnv, "homeowner")) != T_OBJECT) \{            
          owner = nil;            
        \} else \{            
          owner= Get(prevEnv, "homeowner");            
        \}            
     \} else \{            
        owner= nil;            
     \}            
     if (owner == prevEnv) \{            
        env= owner;            
     \} else \{            
        env= prevEnv;            
     \}            
     done= 1;            
  \} else if (Get(env, "volition")) \{            
     done= 1;            
     break;            
  \} else \{            
    prevEnv= env;            
    env= Get(env, "base:environment");            
  \}            
\}            
            
if (env) \{            
   where= Get(env, "base:objectname");            
\} else \{            
   where= "Not really sure";            
\}            
            
if( !\$retval ) \{            
  if(\$what."trait:color" == "black") \{            
      EmitTo(\$actor, Get(\$what, "base:objectname") + " () is owned by " + where + (owner ? " [" + Describe(owner) + "]" : ""));            
  \}            
            
 \} else \{            
  return env;            
\}
      </Core:Property>
      <Core:Property property="merry:lib:fixetch">
         X[M] \$brief = dump_value(Get(\$ob, "details:default:description:brief"));
\$look = dump_value(Get(\$ob, "details:default:description:look"));
\$examine = dump_value(Get(\$ob, "details:default:description:examine"));

\$brief = replace_strings(\$brief, "\\\{? equal \\\| \\\$(this.trait:etching) \\\| none \\\|\\\|", "\\\{ ? \\\| \\\$(this.trait:etching) \\\| ", "X[S]", "");
\$look = replace_strings(\$look, "\\\{? equal \\\| \\\$(this.trait:etching) \\\| none \\\|\\\|", "\\\{ ? \\\| \\\$(this.trait:etching) \\\| ", "X[S]", "");
\$examine = replace_strings(\$examine, "\\\{? equal \\\| \\\$(this.trait:etching) \\\| none \\\|\\\|", "\\\{ ? \\\| \\\$(this.trait:etching) \\\| ", "X[S]", "");

\$brief = ParseXML(\$brief);
\$look = ParseXML(\$look);
\$examine = ParseXML(\$examine);

Set(\$ob, "details:default:description:brief", \$brief);
Set(\$ob, "details:default:description:look", \$look);
Set(\$ob, "details:default:description:examine", \$examine);

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:get-patterns">
         X[M] if(!\$char) return TRUE;

\$dbs = (\{ \$\{Allegory:Lib:Crafting:Clothing:SeamstressDollsWingsDB\} \});

\$careerDB = \$\{Ironclaw:Lib:Teaching:newCareersDB\}; 
\$temp = copy(\$careerDB."*"); 
\$allCareers = (\{ "seamstress" \});


if(\$chatter."crafting:patterns") \{
    \$data = \$chatter."crafting:patterns";
\} else \{
    return TRUE;
\}

for(\$i = 0; \$i \< sizeof(\$dbs); \$i++) \{   
    /* Make a list of all "types" in this database. Types = crafting commands. */
    \$dbProperties = copy(\$dbs[\$i]."*");

    if(structure_propmap(\$dbProperties)["alteration"] \&\& structure_propmap(\$dbProperties)["alteration"]["knowledge"]) \{    
        \$dbtemp = structure_propmap(\$dbProperties)["alteration"]["knowledge"];     
        \$dbTypes = map_indices(\$dbtemp);

        for(\$j = 0; \$j \< sizeof(\$dbTypes); \$j++) \{
            \$dbtemp2 = \$dbtemp[\$dbTypes[\$j]];

            /* Make a list of all careers that use this command */
            \$tempCareers = map_indices(\$dbtemp2);   

            /* Make a list of all careers that use this command */
            \$tempCareers = map_indices(\$dbtemp2);   

            for(\$k = 0; \$k \< sizeof(\$tempCareers); \$k++) \{  
                /* Make sure it's a valid career. This is how we separate the 0 skill required items from the rest. */   
                if(member(\$tempCareers[\$k], \$allCareers)) \{      
                    /* No compile a list of items this career can make using the command. Filter based on career level. */
                    /* If no filter provided, set it to 24 */


                        \$levelLimit = Int(Get(\$char, "skill:career:" + \$tempCareers[\$k]));
                    

                    for(\$l = 1; \$l \<= \$levelLimit; \$l++) \{   
                        if(\$dbtemp2[\$tempcareers[\$k]][Str(\$l)]) \{
                            \$list = map_indices(\$dbtemp2[\$tempcareers[\$k]][Str(\$l)]);

                            if(sizeof(\$list)) \{
                                if(!\$data[\$dbTypes[\$j]]) \{     
                                    \$data[\$dbTypes[\$j]] = (\{ \});     
                                \}

                                \$data[\$dbTypes[\$j]] \|= map_indices(\$dbtemp2[\$tempcareers[\$k]][Str(\$l)]);
                            \}
                        \}
                    \}
                \}
            \}
        \}
    \}
\}

\$char."crafting:patterns" = \$data;

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:getlps">
         X[M] int i, total;

total = 0;
for(i = 1; i \<= \$career; i++) \{
    if(i \< 10) \{
        total += i*11;
    \} else \{
        total += 110;
    \}
\}

return total;
      </Core:Property>
      <Core:Property property="merry:lib:search">
         X[M] string woename;     
object parent;     
     
Set(\$actor, "search:firstchild", nil);     
Set(\$actor, "search:currentchild", nil);     
     
if (!\$evoke) \{     
   Set(\$actor, "ownersearch", nil);     
   EmitTo(\$actor, "Usage: +owners \\"WoeName");     
   EmitTo(\$actor, "Returns a list of the children of that given woename, and who owns them.  Either the player the object is on (or the player who's room the object is in), or the place in the castle it is.");     
   return FALSE;     
\}     
     
woename= \$evoke[1 .. strlen(\$evoke)-3];     
parent= Obj(woename);     
     
if (!woename \|\| !parent) \{     
   Set(\$actor, "ownersearch", nil);     
   EmitTo(\$actor, "+owners takes the woe name of the object you wish to lookup");     
   return FALSE;     
\}     
     
Set(\$actor, "ownersearch", woename);     
\$woename= woename;     
\$firstChild= Get(parent, "base:firsturchild");     
if (\$firstChild) \{     
  Call(\$\{Ironclaw:Staff:Roo:props:tester\}, "finder", \$what: \$firstChild);     
\} else \{     
   EmitTo(\$actor, "This woename has no children - " + woename);     
   return FALSE;     
\}     
\$currentChild= Get(\$firstChild, "base:nextursibling");     
while (\$currentChild != \$firstChild) \{     
     Call(\$\{Ironclaw:Staff:Roo:props:tester\}, "finder", \$what: \$currentChild);     
     \$currentChild= Get(\$currentChild, "base:nextursibling");     
     \$delay(0.1, FALSE, "d262");     
     if (!\$currentChild \|\| !\$firstChild) \{     
        \$currentChild= \$firstChild;     
     \}     
     if (Get(\$actor, "ownersearch") != \$woename) \{     
        EmitTo(\$actor, "Aborting +owners for " + \$woename);     
        return FALSE;     
     \}     
\}     
     
EmitTo(\$actor, "DONE!");
      </Core:Property>
      <Core:Property property="merry:lib:search2">
         X[M] string woename;      
object parent;      
      
Set(\$actor, "search:firstchild", nil);      
Set(\$actor, "search:currentchild", nil);      
      
if (!\$evoke) \{      
   Set(\$actor, "ownersearch", nil);      
   EmitTo(\$actor, "Usage: +owners \\"WoeName");      
   EmitTo(\$actor, "Returns a list of the children of that given woename, and who owns them.  Either the player the object is on (or the player who's room the object is in), or the place in the castle it is.");      
   return FALSE;      
\}      
      
woename= \$evoke[1 .. strlen(\$evoke)-2];      

EmitTo(\$actor, dump_value(woename));
parent= Obj(woename);      
      
if (!woename \|\| !parent) \{      
   Set(\$actor, "ownersearch", nil);      
   EmitTo(\$actor, "+owners takes the woe name of the object you wish to lookup");      
   return FALSE;      
\}      
      
Set(\$actor, "ownersearch", woename);      
\$woename= woename;      
\$firstChild= Get(parent, "base:firsturchild");      
if (\$firstChild) \{      
  Call(\$\{Ironclaw:Staff:Roo:props:tester\}, "finder2", \$what: \$firstChild);      
\} else \{      
   EmitTo(\$actor, "This woename has no children - " + woename);      
   return FALSE;      
\}      
\$currentChild= Get(\$firstChild, "base:nextursibling");      
while (\$currentChild != \$firstChild) \{      
     Call(\$\{Ironclaw:Staff:Roo:props:tester\}, "finder2", \$what: \$currentChild);      
     \$currentChild= Get(\$currentChild, "base:nextursibling");      
     \$delay(0.1, FALSE, "d262");      
     if (!\$currentChild \|\| !\$firstChild) \{      
        \$currentChild= \$firstChild;      
     \}      
     if (Get(\$actor, "ownersearch") != \$woename) \{      
        EmitTo(\$actor, "Aborting +owners for " + \$woename);      
        return FALSE;      
     \}      
\}      
      
EmitTo(\$actor, "DONE!");
      </Core:Property>
      <Core:Property property="merry:lib:spendlps">
         X[M] int i, lpsneeded;

for(i = \$career + 1; i \<= 24; i++) \{
    if(i \>= 10) \{
        lpsneeded = 100;
    \} else \{
        lpsneeded = i*11;
    \}

    if((\$lps - lpsneeded) \> 0) \{
        \$lps -= lpsneeded;
        \$career++;
    \}
\}

return \$career;
      </Core:Property>
      <Core:Property property="merry:react-post:bop-with">
         X[M] Call(\$\{Allegory:Lib:Time:Lib\}, "hourly");

return TRUE;

\$person = NRefOb(\$dob[0]);

\$patterns = \$actor."crafting:patterns";
\$patterns["carving-wood"] += (\{ "embossing stylus" \});
\$patterns["forging-metal"] += (\{ "embossing stylus" \});

\$person."crafting:patterns" = \$patterns;

return FALSE;


if(!\$dob) return TRUE;
if(!sizeof(\$dob)) return TRUE;
if(sizeof(\$dob) \> 1) return TRUE;

\$char = NRefOb(\$dob[0]);

if(!\$char."base:volition") \{
    \$char = Obj(replace_strings(\$evoke, "\\"", "", ".", ""));
\}

if(!\$char) \{
    EmitTo(\$actor, "Specify a character please.");
    return FALSE;
\}

\$alts = (\{ nil /* defunct */, \$\{Chatters:AE:or:orla\}, \$\{Chatters:AE:he:heather\}, nil /* defunct */, \$\{Chatters:Backup:IC:ai:aiko5\}, nil /* defunct */, \$\{Chatters:AE:le:leliana\}, \$\{Chatters:IC:fa:farah\}, nil /* defunct */ \});

\$inv = NRefOb(\$dob[0])."base:inventory";

\$char."base:clothes-worn" = nil;

EmitTo(\$actor, dump_value(\$char));

for(\$j = 0; \$j\<sizeof(\$alts); \$j++) \{
  for(\$i = 0; \$i\<sizeof(\$inv); \$i++) \{
    if(\$inv[\$i]."misc:lastdropped") \{
        \$lastdropped = explode(\$inv[\$i]."misc:lastdropped", " ")[1];
        \$lastdropped = replace_strings(\$lastdropped, "[" + Str(\$alts[\$j]."skotos:creator") + "]", "");
    \}
    if((\$inv[\$i]."trait:madeby:object" == \$alts[\$j] \&\& \$char != \$alts[\$j])) \{
        \$inv[\$i]."base:environment" = \$\{[IronClaw:Props:Furniture:Container:Crates:Large]#10793\};
        \$inv[\$i]."base:worn-by" = nil;
        \$inv[\$i]."base:clothing:worn" = nil;
        \$inv[\$i]."guide:takenfrom" = \$char;
        EmitTo(nil /* defunct */, "Removing " + dump_value(\$inv[\$i]));
    \} else \{
        if(\$lastdropped == Describe(\$alts[\$j]) \&\& \$char != \$alts[\$j]) \{
            \$inv[\$i]."base:worn-by" = nil;
            \$inv[\$i]."base:clothing:worn" = nil;
            \$inv[\$i]."guide:takenfrom" = nil;
            \$inv[\$i]."guide:takenfrom" = \$char;
            EmitTo(nil /* defunct */, "Removing " + dump_value(\$inv[\$i]));
        \}
    \}
  \}
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:hug-dob">
         X[M] \$ob = \$\{Allegory:Props:Jewelry:Rings:Ring-Stirrup\};

\$brief = dump_value(Get(\$ob, "details:default:description:brief"));
\$look = dump_value(Get(\$ob, "details:default:description:look"));
\$examine = dump_value(Get(\$ob, "details:default:description:examine"));

\$brief = replace_strings(\$brief, "\\\{? equal \\\| \\\$(this.trait:etching) \\\| none \\\|\\\|", "\\\{ ? \\\| \\\$(this.trait:etching) \\\| ", "X[S]", "");
\$look = replace_strings(\$look, "\\\{? equal \\\| \\\$(this.trait:etching) \\\| none \\\|\\\|", "\\\{ ? \\\| \\\$(this.trait:etching) \\\| ", "X[S]", "");
\$examine = replace_strings(\$examine, "\\\{? equal \\\| \\\$(this.trait:etching) \\\| none \\\|\\\|", "\\\{ ? \\\| \\\$(this.trait:etching) \\\| ", "X[S]", "");

\$brief = ParseXML(\$brief);
\$look = ParseXML(\$look);
\$examine = ParseXML(\$examine);

Set(\$ob, "details:default:description:brief", \$brief);
Set(\$ob, "details:default:description:look", \$look);
Set(\$ob, "details:default:description:examine", \$examine);

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:point-dob">
         X[M] if(!\$adverb \|\| !\$evoke) \{
    EmitTo(\$actor, TAG(PRE("point my tester \<direction\> 'woename'"), "imp"));
    return FALSE;
\}

if(!member(\$adverb, (\{ "westwardly", "eastwardly", "northwardly", "southwardly", "northeastwardly", "southeastwardly", "southwestwardly", "northwestwardly" \}))) \{
    EmitTo(\$actor, TAG(PRE("point my tester \<direction\> 'woename'"), "imp"));
    return FALSE;
\}

\$room = replace_strings(\$evoke, "\\"", "", ".", "");

if(!Obj(\$room)) \{
    EmitTo(\$actor, TAG(PRE("point my tester \<direction\> 'woename'"), "imp"));
    return FALSE;
\}

\$env = \$actor."base:environment";
\$room = Obj(\$room);

switch(\$adverb) \{
    case "westwardly":
    \{
        \$dir = "west";
        \$opp = "east";
        break;
    \}

    case "eastwardly":
    \{
        \$dir = "east";
        \$opp = "west";
        break;
    \}

    case "northwardly":
    \{
        \$dir = "north";
        \$opp = "south";
        break;
    \}

    case "southwardly":
    \{
        \$dir = "south";
        \$opp = "north";
        break;
    \}

    case "northeastwardly":
    \{
        \$dir = "northeast";
        \$opp = "southwest";
        break;
    \}

    case "southeastwardly":
    \{
        \$dir = "southeast";
        \$opp = "northwest";
        break;
    \}

    case "southwestwardly":
    \{
        \$dir = "southwest";
        \$opp = "northeast";
        break;
    \}

    case "northwestwardly":
    \{
        \$dir = "northwest";
        \$opp = "southeast";
        break;
    \}

    default:
    \{
        \$dir = "exit";
        \$opp = "exit";
        break;
    \}
\}

/* Reference to exit details */
\$t = NewNRef(\$room, "exit-" + \$opp);
\$t2 = NewNRef(\$env, "exit-" + \$dir);

/* Set the exits */
Set(\$room, "details:exit-" + \$opp + ":exit:dest", \$t2);
Set(\$room, "details:exit-" + \$opp + ":exit:direction:" + \$opp, TRUE);
Set(\$room, "details:exit-" + \$opp + ":prepositions:close to", TRUE);              
Set(\$room, "details:exit-" + \$opp + ":prepositions:against", TRUE);           
Set(\$room, "details:exit-" + \$opp + ":prepositions:under", TRUE);           
Set(\$room, "details:exit-" + \$opp + ":prepositions:in", TRUE);           
Set(\$room, "details:exit-" + \$opp + ":prepositions:near", TRUE);             
Set(\$room, "details:exit-" + \$opp + ":prepositions:over", TRUE);           
Set(\$room, "details:exit-" + \$opp + ":prepositions:behind", TRUE);           
Set(\$room, "details:exit-" + \$opp + ":prepositions:before", TRUE);           
Set(\$room, "details:exit-" + \$opp + ":prepositions:beside", TRUE);            
Set(\$room, "details:exit-" + \$opp + ":prepositions:on", TRUE); 
/* Set(\$room, "room:partition:exit-" + \$opp, "in a boat"); */
Set(\$env, "details:exit-" + \$dir + ":exit:dest", \$t);
Set(\$env, "details:exit-" + \$dir + ":exit:directions:" + \$dir, TRUE);


return TRUE;

if(!\$evoke) \{
    EmitTo(\$actor, TAG(PRE("point my tester \<direction\> '\<alley/outside/inside\> \<name\>'"), "imp"));
    return FALSE;
\}

\$temp = explode(replace_strings(\$evoke, "\\"", "", ".", ""), " ");

if(sizeof(\$temp) != 2) \{
    EmitTo(\$actor, TAG(PRE("point my tester \<direction\> '\<alley/outside/inside\> \<name\>'"), "imp"));
    return FALSE;
\}

if(!member(\$temp[0], (\{ "alley", "outside", "inside" \}))) \{
    EmitTo(\$actor, TAG(PRE("point my tester \<direction\> '\<alley/outside/inside\> \<name\>'"), "imp"));
    return FALSE;
\}

\$type = \$temp[0];

switch(\$type) \{
    case "alley": 
    \{
        \$urobject = nil /* defunct */;
        \$name = "Ironclaw:World:OldTown-New:Alley:";
        break;
    \}

    case "inside":
    \{
        \$urobject = nil /* defunct */;
        \$name = "Ironclaw:World:OldTown-New:Inside:";
        break;
    \}

    case "outside":
    \{
        \$urobject = nil /* defunct */;
        \$name = "Ironclaw:World:OldTown-New:Outside:";
        break;
    \}

    default:
    \{
        \$urobject = nil /* defunct */;
        \$name = "Ironclaw:World:OldTown-New:Outside:";
        break;
    \}
\}

if(!\$adverb) \{
    EmitTo(\$actor, TAG(PRE("point my tester \<direction\> '\<alley/outside/inside\> \<name\>'"), "imp"));
    return FALSE;
\}

if(!member(\$adverb, (\{ "westwardly", "eastwardly", "northwardly", "southwardly", "northeastwardly", "southeastwardly", "southwestwardly", "northwestwardly" \}))) \{
    EmitTo(\$actor, TAG(PRE("point my tester \<direction\> '\<alley/outside/inside\> \<name\>'"), "imp"));
    return FALSE;
\}

\$room = Spawn(\$urobject);
\$room."base:objectname" = \$name + \$temp[1];
\$room."core:objectname" = \$name + \$temp[1];

\$env = \$actor."base:environment";

switch(\$adverb) \{
    case "westwardly":
    \{
        \$dir = "west";
        \$opp = "east";
        break;
    \}

    case "eastwardly":
    \{
        \$dir = "east";
        \$opp = "west";
        break;
    \}

    case "northwardly":
    \{
        \$dir = "north";
        \$opp = "south";
        break;
    \}

    case "southwardly":
    \{
        \$dir = "south";
        \$opp = "north";
        break;
    \}

    case "northeastwardly":
    \{
        \$dir = "northeast";
        \$opp = "southwest";
        break;
    \}

    case "southeastwardly":
    \{
        \$dir = "southeast";
        \$opp = "northwest";
        break;
    \}

    case "southwestwardly":
    \{
        \$dir = "southwest";
        \$opp = "northeast";
        break;
    \}

    case "northwestwardly":
    \{
        \$dir = "northwest";
        \$opp = "southeast";
        break;
    \}

    default:
    \{
        \$dir = "exit";
        \$opp = "exit";
        break;
    \}
\}

Set(\$room, "details:default:description:glance", ParseXML(\$temp[1])); 

/* Set the details in each room */
Set(\$room, "details:exit-" + \$opp + ":sname:" + \$opp, TRUE);
Set(\$room, "details:exit-" + \$opp + ":description:brief", ParseXML(\$opp + " exit"));
Set(\$env, "details:exit-" + \$dir + ":sname:" + \$dir, TRUE);
Set(\$env, "details:exit-" + \$dir+ ":description:brief", ParseXML(\$dir + " exit"));

/* Reference to exit details */
\$t = NewNRef(\$room, "exit-" + \$opp);
\$t2 = NewNRef(\$env, "exit-" + \$dir);

/* Set the exits */
Set(\$room, "details:exit-" + \$opp + ":exit:dest", \$t2);
Set(\$room, "details:exit-" + \$opp + ":exit:direction:" + \$opp, TRUE);
Set(\$env, "details:exit-" + \$dir + ":exit:dest", \$t);
Set(\$env, "details:exit-" + \$dir + ":exit:directions:" + \$dir, TRUE);

Set(\$room, "details:exit-" + \$opp + ":prepositions:close to", TRUE);              
Set(\$room, "details:exit-" + \$opp + ":prepositions:against", TRUE);           
Set(\$room, "details:exit-" + \$opp + ":prepositions:under", TRUE);           
Set(\$room, "details:exit-" + \$opp + ":prepositions:in", TRUE);           
Set(\$room, "details:exit-" + \$opp + ":prepositions:near", TRUE);             
Set(\$room, "details:exit-" + \$opp + ":prepositions:over", TRUE);           
Set(\$room, "details:exit-" + \$opp + ":prepositions:behind", TRUE);           
Set(\$room, "details:exit-" + \$opp + ":prepositions:before", TRUE);           
Set(\$room, "details:exit-" + \$opp + ":prepositions:beside", TRUE);            
Set(\$room, "details:exit-" + \$opp + ":prepositions:on", TRUE); 

Set(\$env, "details:exit-" + \$dir + ":prepositions:close to", TRUE);              
Set(\$env, "details:exit-" + \$dir + ":prepositions:against", TRUE);           
Set(\$env, "details:exit-" + \$dir + ":prepositions:under", TRUE);           
Set(\$env, "details:exit-" + \$dir + ":prepositions:in", TRUE);           
Set(\$env, "details:exit-" + \$dir + ":prepositions:near", TRUE);             
Set(\$env, "details:exit-" + \$dir + ":prepositions:over", TRUE);           
Set(\$env, "details:exit-" + \$dir + ":prepositions:behind", TRUE);           
Set(\$env, "details:exit-" + \$dir + ":prepositions:before", TRUE);           
Set(\$env, "details:exit-" + \$dir + ":prepositions:beside", TRUE);            
Set(\$env, "details:exit-" + \$dir + ":prepositions:on", TRUE);

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:poke-dob">
         X[M] if(\$this."base:environment" != \$actor) \{     
    EmitTo(\$actor, "You need to be holding it.");     
    return TRUE;     
\}

\$thing = Obj(replace_strings(\$evoke, "\\"", "", ".", ""));
    
EmitTo(\$actor, "Searching for: " + Str(\$thing));     
::search();     
     
return TRUE;



\$folder = "Ironclaw:AAs:Adventures:Wilderness:ForestWest";
\$rooms = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
for(\$i=0;\$i\<sizeof(\$rooms); \$i++) \{
    \$room = Obj("Ironclaw:AAs:Adventures:Wilderness:ForestWest:" + \$rooms[\$i]);

    \$details = \$room."base:details:local";

    for(\$j = 0; \$j \< sizeof(\$details); \$j++) \{
        if(Get(\$room, "details:" + \$details[\$j] + ":exit:dest")) \{

            Set(\$room, "details:" + \$details[\$j] + ":description:brief", nil);
            Set(\$room, "details:" + \$details[\$j] + ":description:look", nil);
            Set(\$room, "details:" + \$details[\$j] + ":description:examine", nil);

       
            \$adjectives = Get(\$room, "details:" + \$details[\$j] + ":adjectives");
            for(\$k = 0; \$k \< sizeof(\$adjectives); \$k++) \{
                Set(\$room, "details:" + \$details[\$j] + ":adjective:" + \$adjectives[\$k], FALSE);
            \}

            \$snames = Get(\$room, "details:" + \$details[\$j] + ":snames");
            for(\$k = 0; \$k \< sizeof(\$snames); \$k++) \{
                Set(\$room, "details:" + \$details[\$j] + ":sname:" + \$snames[\$k], FALSE);
            \}

            \$pnames = Get(\$room, "details:" + \$details[\$j] + ":pnames");
            for(\$k = 0; \$k \< sizeof(\$pnames); \$k++) \{
                Set(\$room, "details:" + \$details[\$j] + ":pname:" + \$pnames[\$k], FALSE);
            \}

            Set(\$room, "details:" + \$details[\$j] + ":adjectives", nil);
            Set(\$room, "details:" + \$details[\$j] + ":snames", nil);
            Set(\$room, "details:" + \$details[\$j] + ":pnames", nil);

            \$dir = \$details[\$j][5..];
            \$dir2 = \$dir + "ern";
            \$adjectives = (\{ \$dir, \$dir2 \});
            \$snames = (\{ \$dir \});

            \$dest = NRefOb(Get(\$room, "details:" + \$details[\$j] + ":exit:dest"));
       
            if(\$dest."base:urparent" == nil /* defunct */) \{
                \$snames += (\{ "road" \});
                \$pnames = (\{ "roads" \});
            \} 

            if(\$dest."base:urparent" == \$\{Ironclaw:AAs:Adventures:Wilderness:UrForest\}) \{
                \$snames += (\{ "path" \});
                \$pnames = (\{ "paths" \});
                \$adjectives += (\{ "forest", "wooded" \});
            \} 

            if(\$dest."base:urparent" == \$\{Ironclaw:AAs:Adventures:Wilderness:UrGrasslands\}) \{
                \$snames += (\{ "grassland" \});
                \$pnames = (\{ "grasslands" \});
            \} 

            for(\$k = 0; \$k \< sizeof(\$adjectives); \$k++) \{
                Set(\$room, "details:" + \$details[\$j] + ":adjective:" + \$adjectives[\$k], TRUE);
            \}

            for(\$k = 0; \$k \< sizeof(\$snames); \$k++) \{
                Set(\$room, "details:" + \$details[\$j] + ":sname:" + \$snames[\$k], TRUE);
            \}

            for(\$k = 0; \$k \< sizeof(\$pnames); \$k++) \{
                Set(\$room, "details:" + \$details[\$j] + ":pname:" + \$pnames[\$k], TRUE);
            \}

        \}
    \}
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:prod-dob">
         X[M] if(\$this."base:environment" != \$actor) \{             
    EmitTo(\$actor, "You need to be holding it.");             
    return TRUE;             
\}             
             
\$thing = "\\"Ironclaw:Props:Clothing:Hats:GenericHat\\"";             
EmitTo(\$actor, "Searching for: " + Str(\$thing));             
::search2(\$evoke: \$thing);             
             
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:smooch-dob">
         X[M] \$ob = \$\{Ironclaw:Staff:Roo:JewelryThings\};

Popup(\$actor, \$ob, "index", \$actor: \$actor);

return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-post:stab-using">
         X[M] if(!\$dob) \{
    return TRUE;
\}

if(!sizeof(\$dob)) \{
    return TRUE;
\}

if(sizeof(\$dob) \> 1) \{
    return TRUE;
\}

\$concentration = oneof("weak", "normal", "strong");
 
\$cap = 0;
if(NRefOb(\$dob[0])."effect:bloodpoison:source") \{
    \$cap = Int(NRefOb(\$dob[0])."effect:bloodpoison:concentration:cap");
\}

\$dosage = 0.5;
if(NRefOb(\$dob[0])."effect:bloodpoison:dosage") \{ 
    \$dosage = Int(NRefOb(\$dob[0])."effect:bloodpoison:dosage");
\}

if(\$concentration == "weak") \{
    \$cap += 50;
    \$dosage = Flt(\$dosage) * 2.0;
\} else if(\$concentration == "strong") \{
    \$cap += 150;
    \$dosage = Flt(\$dosage) * 6.0;
\} else \{
    \$cap += 100;
    \$dosage = Flt(\$dosage) * 4.0;
\}

NRefOb(\$dob[0])."effect:bloodpoison:concentration:cap" = \$cap;
if(NRefOb(\$dob[0])."effect:bloodpoison:dosage") \{
    NRefOb(\$dob[0])."effect:bloodpoison:dosage" = Int(\$dosage);
\} else \{
    Call(\$\{Ironclaw:Effects:Poison:BloodPoison\}, "apply", \$who: NRefOb(\$dob[0]), \$severity: 5 + random(5), \$dosage: Int(\$dosage));
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:tap-using">
         X[M] int i, j;

if(!\$evoke) \{
    EmitTo(\$actor, TAG("Not a valid parameter (\{ water, plains, forest, settlement \})", "imp"));
    return FALSE;
\}

\$evoke = replace_strings(\$evoke, ".", "", "\\"", "");

if(\$evoke != "water" \&\& \$evoke != "plains" \&\& \$evoke != "forest" \&\& \$evoke != "settlement") \{
    EmitTo(\$actor, TAG("Not a valid parameter (\{ water, plains, forest, settlement \})", "imp"));
    return FALSE;
\}

Set(\$actor."base:environment", "details:" + NRefDetail(\$dob[0]) + ":block-nippers:" + \$evoke, 1);


return TRUE;



if(NRefOb(\$dob[0])."details:exit-north:detail:block-nippers:road-only") \{
    NRefOb(\$dob[0])."details:exit-north:detail:block-nippers:road-only" = nil;
    NRefOb(\$dob[0])."details:exit-north:block-nippers:road-only" = 1;
\}

if(NRefOb(\$dob[0])."details:exit-northeast:detail:block-nippers:road-only") \{
    NRefOb(\$dob[0])."details:exit-northeast:detail:block-nippers:road-only" = nil;
    NRefOb(\$dob[0])."details:exit-northeast:block-nippers:road-only" = 1;
\}

if(NRefOb(\$dob[0])."details:exit-northwest:detail:block-nippers:road-only") \{
    NRefOb(\$dob[0])."details:exit-northwest:detail:block-nippers:road-only" = nil;
    NRefOb(\$dob[0])."details:exit-northwest:block-nippers:road-only" = 1;
\}

if(NRefOb(\$dob[0])."details:exit-east:detail:block-nippers:road-only") \{
    NRefOb(\$dob[0])."details:exit-east:detail:block-nippers:road-only" = nil;
    NRefOb(\$dob[0])."details:exit-east:block-nippers:road-only" = 1;
\}

if(NRefOb(\$dob[0])."details:exit-west:detail:block-nippers:road-only") \{
    NRefOb(\$dob[0])."details:exit-west:detail:block-nippers:road-only" = nil;
    NRefOb(\$dob[0])."details:exit-west:block-nippers:road-only" = 1;
\}

if(NRefOb(\$dob[0])."details:exit-south:detail:block-nippers:road-only") \{
    NRefOb(\$dob[0])."details:exit-south:detail:block-nippers:road-only" = nil;
    NRefOb(\$dob[0])."details:exit-south:block-nippers:road-only" = 1;
\}

if(NRefOb(\$dob[0])."details:exit-southwest:detail:block-nippers:road-only") \{
    NRefOb(\$dob[0])."details:exit-southwest:detail:block-nippers:road-only" = nil;
    NRefOb(\$dob[0])."details:exit-southwest:block-nippers:road-only" = 1;
\}

if(NRefOb(\$dob[0])."details:exit-southeast:detail:block-nippers:road-only") \{
    NRefOb(\$dob[0])."details:exit-southeast:detail:block-nippers:road-only" = nil;
    NRefOb(\$dob[0])."details:exit-southeast:block-nippers:road-only" = 1;
\}

if(NRefOb(\$dob[0])."details:exit-north:detail:block-nippers:grasslands-only") \{
    NRefOb(\$dob[0])."details:exit-north:detail:block-nippers:grasslands-only" = nil;
    NRefOb(\$dob[0])."details:exit-north:block-nippers:grasslands-only" = 1;
\}

if(NRefOb(\$dob[0])."details:exit-northeast:detail:block-nippers:grasslands-only") \{
    NRefOb(\$dob[0])."details:exit-northeast:detail:block-nippers:grasslands-only" = nil;
    NRefOb(\$dob[0])."details:exit-northeast:block-nippers:grasslands-only" = 1;
\}

if(NRefOb(\$dob[0])."details:exit-northwest:detail:block-nippers:grasslands-only") \{
    NRefOb(\$dob[0])."details:exit-northwest:detail:block-nippers:grasslands-only" = nil;
    NRefOb(\$dob[0])."details:exit-northwest:block-nippers:grasslands-only" = 1;
\}

if(NRefOb(\$dob[0])."details:exit-east:detail:block-nippers:grasslands-only") \{
    NRefOb(\$dob[0])."details:exit-east:detail:block-nippers:grasslands-only" = nil;
    NRefOb(\$dob[0])."details:exit-east:block-nippers:grasslands-only" = 1;
\}

if(NRefOb(\$dob[0])."details:exit-west:detail:block-nippers:grasslands-only") \{
    NRefOb(\$dob[0])."details:exit-west:detail:block-nippers:grasslands-only" = nil;
    NRefOb(\$dob[0])."details:exit-west:block-nippers:grasslands-only" = 1;
\}

if(NRefOb(\$dob[0])."details:exit-south:detail:block-nippers:grasslands-only") \{
    NRefOb(\$dob[0])."details:exit-south:detail:block-nippers:grasslands-only" = nil;
    NRefOb(\$dob[0])."details:exit-south:block-nippers:grasslands-only" = 1;
\}

if(NRefOb(\$dob[0])."details:exit-southwest:detail:block-nippers:grasslands-only") \{
    NRefOb(\$dob[0])."details:exit-southwest:detail:block-nippers:grasslands-only" = nil;
    NRefOb(\$dob[0])."details:exit-southwest:block-nippers:grasslands-only" = 1;
\}

if(NRefOb(\$dob[0])."details:exit-southeast:detail:block-nippers:grasslands-only") \{
    NRefOb(\$dob[0])."details:exit-southeast:detail:block-nippers:grasslands-only" = nil;
    NRefOb(\$dob[0])."details:exit-southeast:block-nippers:grasslands-only" = 1;
\}

if(NRefOb(\$dob[0])."details:exit-north:detail:block-nippers:forest-only") \{
    NRefOb(\$dob[0])."details:exit-north:detail:block-nippers:forest-only" = nil;
    NRefOb(\$dob[0])."details:exit-north:block-nippers:forest-only" = 1;
\}

if(NRefOb(\$dob[0])."details:exit-northeast:detail:block-nippers:forest-only") \{
    NRefOb(\$dob[0])."details:exit-northeast:detail:block-nippers:forest-only" = nil;
    NRefOb(\$dob[0])."details:exit-northeast:block-nippers:forest-only" = 1;
\}

if(NRefOb(\$dob[0])."details:exit-northwest:detail:block-nippers:forest-only") \{
    NRefOb(\$dob[0])."details:exit-northwest:detail:block-nippers:forest-only" = nil;
    NRefOb(\$dob[0])."details:exit-northwest:block-nippers:forest-only" = 1;
\}

if(NRefOb(\$dob[0])."details:exit-east:detail:block-nippers:forest-only") \{
    NRefOb(\$dob[0])."details:exit-east:detail:block-nippers:forest-only" = nil;
    NRefOb(\$dob[0])."details:exit-east:block-nippers:forest-only" = 1;
\}

if(NRefOb(\$dob[0])."details:exit-west:detail:block-nippers:forest-only") \{
    NRefOb(\$dob[0])."details:exit-west:detail:block-nippers:forest-only" = nil;
    NRefOb(\$dob[0])."details:exit-west:block-nippers:forest-only" = 1;
\}

if(NRefOb(\$dob[0])."details:exit-south:detail:block-nippers:forest-only") \{
    NRefOb(\$dob[0])."details:exit-south:detail:block-nippers:forest-only" = nil;
    NRefOb(\$dob[0])."details:exit-south:block-nippers:forest-only" = 1;
\}

if(NRefOb(\$dob[0])."details:exit-southwest:detail:block-nippers:forest-only") \{
    NRefOb(\$dob[0])."details:exit-southwest:detail:block-nippers:forest-only" = nil;
    NRefOb(\$dob[0])."details:exit-southwest:block-nippers:forest-only" = 1;
\}

if(NRefOb(\$dob[0])."details:exit-southeast:detail:block-nippers:forest-only") \{
    NRefOb(\$dob[0])."details:exit-southeast:detail:block-nippers:forest-only" = nil;
    NRefOb(\$dob[0])."details:exit-southeast:block-nippers:forest-only" = 1;
\}

return TRUE;

\$az = nil /* defunct */;
\$item = NRefOb(\$dob[0]);

\$ur = \$item."base:urparent";
while(\$ur) \{
    EmitTo(\$az, dump_value(\$ur."details:default:description:examine"));
    \$ur = \$ur."base:urparent";
\}

return FALSE;

/* get a list of all plants */
\$folder = "Ironclaw:Props:Flora-New:Plants:Trees:Harvestable";
\$flowers = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
EmitTo(\$az, dump_value(\$flowers));
for(i=0; i \< sizeof(\$flowers); i++) \{
    \$plant = Obj(\$folder + ":" + \$flowers[i]);

    if(\$plant."export:harvestable:properties") \{
        \$props = \$plant."export:harvestable:properties";
        for(\$x = 0; \$x \< sizeof(\$props); \$x++) \{
            if(\$props[\$x][0] == "trait:color") \{
                \$plant."export:trait:color:variations" = \$props[\$x] - (\{ "trait:color" \});
                \$plant."export:trait:color" = \$props[\$x][1];
            \}
        \}

        \$plant."export:harvestable:properties" = nil;
    \}

    \$plant."export:plants:mature-plant:pnames" = nil;
    \$plant."export:plants:mature-plant:snames" = nil;
    
    if(\$plant."export:trait:flower:quantity") \$plant."export:trait:flower:quantity" = 10;
    \$plant."export:trait:flower:quantity:max" = \$plant."export:trait:flower:quantity";

    if(\$plant."export:trait:stalk:quantity") \$plant."export:trait:stalk:quantity" = 10;
    \$plant."export:trait:stalk:quantity:max" = \$plant."export:trait:stalk:quantity";

    if(\$plant."export:trait:reed:quantity") \$plant."export:trait:reed:quantity" = 10;
    \$plant."export:trait:reed:quantity:max" = \$plant."export:trait:reed:quantity";

    if(\$plant."export:trait:fruit:quantity") \$plant."export:trait:fruit:quantity" = 10;
    \$plant."export:trait:fruit:quantity:max" = \$plant."export:trait:fruit:quantity";

    if(\$plant."export:trait:root:quantity") \$plant."export:trait:root:quantity" = 10;
    \$plant."export:trait:root:quantity:max" = \$plant."export:trait:root:quantity";

    if(\$plant."export:trait:seed:quantity") \$plant."export:trait:seed:quantity" = 10;
    \$plant."export:trait:seed:quantity:max" = \$plant."export:trait:seed:quantity";

    if(\$plant."export:trait:bark:quantity") \$plant."export:trait:bark:quantity" = 10;
    \$plant."export:trait:bark:quantity:max" = \$plant."export:trait:bark:quantity";

    if(\$plant."export:trait:leaf:quantity") \$plant."export:trait:leaf:quantity" = 10;
    \$plant."export:trait:leaf:quantity:max" = \$plant."export:trait:leaf:quantity";

    \$parts = (\{ "flower", "stalk", "stigma", "reed", "fruit", "root", "seed", "bark", "leaf" \});
  for(\$l = 0; \$l \< sizeof(\$parts); \$l++) \{
    if(Get(\$plant, "export:plant:part:" + \$parts[\$l])) \{
        \$part = Get(\$plant, "export:plant:part:" + \$parts[\$l]);

        if(\$plant."export:trait:smell") \$part."export:trait:smell" = \$plant."export:trait:smell";
        if(\$plant."export:trait:taste") \$part."export:trait:taste" = \$plant."export:trait:taste";

        if(\$plant."export:trait:color") \$part."export:trait:color" = \$plant."export:trait:color";
        \$part."export:trait:type" = \$plant."export:trait:type";
    \}
  \}

    if(!\$part) EmitTo(\$actor, dump_value(\$plant) + " has no harvestable part");
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:annoy-dob">
         X[M] /* Run daily functions for guilds */
int i;

\$az = nil /* defunct */;
/* get a list of guilds */
EmitTo(\$az, "Getting a list of guilds");
/* get a list of all guilds */
\$folder = "Ironclaw:Guilds";
\$guilds = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
for(i=0;i\<sizeof(\$guilds);i++) \{
  \$guilds[i] = Obj("Ironclaw:Guilds:"+\$guilds[i]);
\}

/* run todays trading */
for(\$guild_daily_functions_i=0;\$guild_daily_functions_i\<sizeof(\$guilds);\$guild_daily_functions_i++) \{
  if(\$guilds[\$guild_daily_functions_i].mothballed) continue;

  \$delay(0.0001, TRUE, "7ed2");
  EmitTo(\$az, "guild: "+dump_value(\$guilds[\$guild_daily_functions_i]));

  /* Is this guild inactive? */
  \$members = Arr(\$guilds[\$guild_daily_functions_i].members);
  \$inactive = TRUE;
  for(\$i=0;\$i\<sizeof(\$members)\&\&\$inactive;\$i++) \{
    if(\$members[\$i] \&\& !\$members[\$i].mothballed) \{
      \$inactive = nil;
    \}
  \}
  /* No active members. We should mothball this guild */
  if(\$inactive) \{
    /* \$guilds[\$guild_daily_functions_i].mothballed = TRUE; */
    EmitTo(\$az, "Mothballing " + dump_value(\$guild));
    continue;
  \}

/*  Call(\$\{Ironclaw:Lib:Guilds:Guild\}, "run_bluebooked_jobs", \$guild: \$guilds[\$guild_daily_functions_i]);
  Call(\$\{Ironclaw:Lib:Guilds:Guild\}, "run_trading", \$guild: \$guilds[\$guild_daily_functions_i]);
  ::run_bluebooked_payments(\$guild: \$guilds[\$guild_daily_functions_i]); */
\}

/* check that their leader is still active */

/* resolve any votes, and assign new leaders */

EmitTo(\$az, "Guild maintenance done.");
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:jab-using">
         X[M] Call(NRefOb(\$dob[0]), "wake_up");

\$delay(1, TRUE, "1278");

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:kiss-dob">
         X[M] \$roo = \$\{Chatters:AE:ro:roo\};

\$folder = "Allegory:Guilds:";
EmitTo(\$roo, "Character update started");
\$this.charupdating = 1;
\$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{
    \$guild = Obj(\$folder+\$folders[\$i]);
    /* CODE GOES HERE */

    EmitTo(\$actor, dump_value(\$guild));

    if(\$guild.donations) \{
        \$guild."zbackup:donations" = \$guild.donations;
        \$donations = copy(\$guild.donations);

        for(\$x = 0; \$x \< sizeof(\$donations); \$x++) \{
            \$stamp = \$donations[\$x][2];
 
            if(\$stamp \<= 1572566400) \{
                \$donations[\$x] = nil;
            \} 
        \}
        \$donations -= (\{ nil \});
        \$guild.donations = \$donations;
    \}

    if(\$guild.transfers) \{
        \$guild."zbackup:transfers" = \$guild.transfers;
        \$transfers = copy(\$guild.transfers);

        for(\$x = 0; \$x \< sizeof(\$transfers); \$x++) \{
            \$stamp = \$transfers[\$x][3];

            if(\$stamp \<= 1572566400) \{
                \$transfers[\$x] = nil;
            \}
        \}
        \$transfers -= (\{ nil \});
        \$guild.transfers = \$transfers;
    \}

    if(\$guild.token_transfers) \{
        \$guild."zbackup:token_transfers" = \$guild.token_transfers;
        \$guild.token_transfers = nil;
    \}

    if(\$guild."costs:teaching") \{
        \$guild."zbackup:costs:teaching" = \$guild."costs:teaching";
        \$guild."costs:teaching" = nil;
    \}

    \$delay(0.002, TRUE, "8ea5");
\}

EmitTo(\$roo, "Character update done");
\$this.charupdating = nil;

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:lick-dob">
         X[M] Call(\$actor, "go_to_sleep");

\$delay(1, TRUE, "1278");

EmitIn(\$actor."base:environment", TAG(Describe(\$actor) + " slumps to the ground.", "social:third"));

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:nuzzle-dob">
         X[M] \$roo = \$\{Chatters:AE:ro:roo\};

\$folder = "Allegory:Guilds:Trades:";
EmitTo(\$roo, "Character update started");
\$this.charupdating = 1;
\$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{
    \$guild = Obj(\$folder+\$folders[\$i]);
    /* CODE GOES HERE */

    EmitTo(\$actor, dump_value(\$guild));

    if(\$guild."trading:notes") \{
        \$guild."zbackup:trading:notes" = \$guild."trading:notes";
        \$trades = copy(\$guild."trading:notes");

        for(\$x = 0; \$x \< sizeof(\$trades); \$x++) \{
            if(contains(\$trades[\$x], "florin")) \{
                \$trades[\$x] = (\{ \$trades[\$x], 1584144000 \});
            \} else \{
                \$trades[\$x] = nil;
            \}
        \}

        \$trades -= (\{ nil \});
        \$guild."trading:notes" = \$trades;
    \}

    \$delay(0.002, TRUE, "8ea5");
\}

EmitTo(\$roo, "Character update done");
\$this.charupdating = nil;

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:pester-dob">
         X[M] /* Run daily functions for guilds */
int i, j, k;

\$az = nil /* defunct */;
/* get a list of guilds */
EmitTo(\$az, "Getting a list of guilds");
/* get a list of all guilds */
\$folder = "Ironclaw:Guilds";
\$guilds = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
for(i=0;i\<sizeof(\$guilds);i++) \{
  \$guilds[i] = Obj("Ironclaw:Guilds:"+\$guilds[i]);
\}

for(\$i = 0; \$i \< sizeof(\$guilds); \$i++) \{
    if(\$guilds[\$i].transfers) \$transfers = \$guilds[\$i].transfers; else \$transfers = (\{ \});
    for(j = 0; j \< sizeof(\$transfers); j++) \{
        \$transfer = \$transfers[j];

        if(sizeof(\$transfer) \< 5 \|\| (sizeof(\$transfer) == 5 \&\& \$transfer[4] == "sending")) \{
            \$sender = \$transfer[0];
            \$guild = \$transfer[2]; 
            \$what = \$transfer[1] + " denarii";
            \$when = ctime(\$transfer[3]);

            if(\$guild) \{
              \$members = \$guild.members;
              for(k = 0; k \< sizeof(\$members); k++) \{
                if(\$sender) \$accountsending = \$sender."skotos:creator"; else \$accountsending = "UNKNOWN ACCOUNT";
                if(\$members[k]) \$accountreceiving = \$members[k]."skotos:creator"; else \$accountreceiving = "UNKNOWN ACCOUNT 2";

                if(\$accountsending == \$accountreceiving \&\& \$sender != \$members[k]) \{
                    EmitTo(\$az, Str(\$sender) + "/" + Str(\$guilds[\$i]) + " sent " + Str(\$what) + " to " + Str(\$members[k]) + "/" + Str(\$guild) + " on " + Str(\$when) + ".");
                \}
              \} 
            \}
        \}
    \}

    if(\$guilds[\$i].token_transfers) \$transfers = \$guilds[\$i].token_transfers; else \$transfers = (\{ \});
    for(j = 0; j \< sizeof(\$transfers); j++) \{
        \$transfer = \$transfers[j];

        if(sizeof(\$transfer) \< 6 \|\| (sizeof(\$transfer) == 6 \&\& \$transfer[5] == "sending")) \{
            \$sender = \$transfer[0];
            \$guild = \$transfer[3];
            \$what = \$transfer[1] + " " + \$transfer[2];
            \$when = ctime(\$transfer[4]);

            if(\$guild) \{
              \$members = \$guild.members;
              for(k = 0; k \< sizeof(\$members); k++) \{
                if(\$sender) \$accountsending = \$sender."skotos:creator"; else \$accountsending = "UNKNOWN ACCOUNT";
                if(\$members[k]) \$accountreceiving = \$members[k]."skotos:creator"; else \$accountreceiving = "UNKNOWN ACCOUNT 2";

                if(\$accountsending == \$accountreceiving \&\& \$sender != \$members[k]) \{
                    EmitTo(\$az, Str(\$sender) + "/" + Str(\$guilds[\$i]) + " sent " + Str(\$what) + " to " + Str(\$members[k]) + "/" + Str(\$guild) + " on " + Str(\$when) + ".");
                \}
              \}
            \}
        \}
    \}

    \$delay(0.1, FALSE, "87f8");

\}

EmitTo(\$az, "Guild maintenance done.");
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:shake-dob">
         X[M] if(!\$evoke) return TRUE; 
 
\$searchstr = replace_strings(\$evoke, "\\"", "", ".", ""); 
 
\$roo = \$actor; 
 
EmitTo(\$roo, "Searching trading lists for " + dump_value(\$searchstr)); 
\$this.charupdating = 1; 
 
\$folder = "Allegory:NPCs:NIPs:TradingLists"; 
\$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders"); 
 
for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{ 
  \$folder = "Allegory:NPCs:NIPs:TradingLists:"+\$folders[\$i]; 
  \$folders2 = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders"); 
 
  for(\$j=0; \$j\<sizeof(\$folders2);\$j++) \{ 
      \$folder = "Allegory:NPCs:NIPs:TradingLists:"+\$folders[\$i]+":"+\$folders2[\$j]; 
      \$objects = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects"); 
 
      for(\$k=0;\$k\<sizeof(\$objects);\$k++) \{ 
        \$object = Obj("Allegory:NPCs:NIPs:TradingLists:"+\$folders[\$i]+":"+\$folders2[\$j]+":"+\$objects[\$k]); 
        /* CODE GOES HERE */ 
 
        \$temp = Str(dump_value(\$object."*")); 
 
        if(contains(\$temp, \$searchstr)) EmitTo(\$actor, dump_value(\$object)); 
 
        \$delay(0.002, TRUE, "f607"); 
      \} 
  \} 
\} 
EmitTo(\$roo, "Done!"); 
\$this.charupdating = nil; 
return TRUE;
return TRUE;

\$db = \$\{Data:DB:assist:AssistDB0\};
\$general = \$\{Data:DB:assist:AssistGeneralDB\};

\$queues = \$general."array:queues";

/* for(\$i = 0; \$i \< sizeof(\$queues); \$i++) \{
    Set(\$general, "array:open:" + \$queues[\$i], (\{ \}) );
\}*/

Set(\$general, "mapping:assists:open", ([ ]));

\$openMap = ([ ]);

\$data = structure_propmap(copy(\$db."*"))["assist"];
\$assists = map_indices(\$data);

for(\$i = 0; \$i \< sizeof(\$assists); \$i++) \{
    EmitTo(\$actor, dump_value(\$assists[\$i]));
    \$temp = Get(\$db, "assist:" + \$assists[\$i]);
    \$q = \$temp["Queue"];
    \$openMap[Str(\$assists[\$i])] = \$q;
/*    \$tq = Get(\$general, "array:open:" + \$q);
    \$tq += (\{ Int(\$assists[\$i]) \});
    Set(\$general, "array:open:" + \$q, \$tq); */
\}

Set(\$general, "mapping:assists:open", \$openMap);

EmitTo(\$actor, "Done");

return TRUE;

\$db = \$\{Data:DB:assist:AssistDB0\};

\$x = 0;

for(\$j = 0; \$j \< 47; \$j++) \{
    \$db = Obj("Data:DB:assist:AssistDB" + Str(\$j));
    if(\$db) \{
        EmitTo(\$actor, TAG("DB is " + Str(\$db), "imp"));

        \$data = structure_propmap(copy(\$db."*"))["assist"];
        \$assists = map_indices(\$data);

        for(\$i = 0; \$i \< sizeof(\$assists); \$i++) \{
            \$temp = Get(\$db, "assist:" + \$assists[\$i]);
 
            if(\$temp["TimeClosed"] \&\& \$temp["TimeClosed"] != "") \{
                Set(\$db, "assist:" + \$assists[\$i], nil);
            \} else \{
                Set(\$newDB, "assist:" + Str(\$x), \$temp);
                \$x++;
            \}

            \$delay(0.001, FALSE, "ae2b");
        \}
        EmitTo(\$actor, TAG("Purge onn " + Str(\$db) + " is complete", "imp"));
    \}
\}

EmitTo(\$actor, TAG("ASSIST PURGE COMPLETE!", "imp"));

\$data = structure_propmap(copy(\$newDB."*"))["assist"];
\$assists = map_indices(\$data);

EmitTo(\$actor, dump_value(\$assists));

return TRUE;

if(!\$evoke) return TRUE; 
 
\$searchstr = replace_strings(\$evoke, "\\"", "", ".", ""); 
 
\$roo = \$actor; 
 
EmitTo(\$roo, "Searching trading lists for " + dump_value(\$searchstr)); 
\$this.charupdating = 1; 
 
\$folder = "Allegory:NPCs:NIPs:TradingLists"; 
\$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders"); 
 
for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{ 
  \$folder = "Allegory:NPCs:NIPs:TradingLists:"+\$folders[\$i]; 
  \$folders2 = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders"); 
 
  for(\$j=0; \$j\<sizeof(\$folders2);\$j++) \{ 
      \$folder = "Allegory:NPCs:NIPs:TradingLists:"+\$folders[\$i]+":"+\$folders2[\$j]; 
      \$objects = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects"); 
 
      for(\$k=0;\$k\<sizeof(\$objects);\$k++) \{ 
        \$object = Obj("Allegory:NPCs:NIPs:TradingLists:"+\$folders[\$i]+":"+\$folders2[\$j]+":"+\$objects[\$k]); 
        /* CODE GOES HERE */ 
 
        \$temp = Str(dump_value(\$object."*")); 
 
        if(contains(\$temp, \$searchstr)) EmitTo(\$actor, dump_value(\$object)); 
 
        \$delay(0.002, TRUE, "af14");
      \} 
  \} 
\} 
EmitTo(\$roo, "Done!"); 
\$this.charupdating = nil; 
return TRUE;


return TRUE;

\$this.charupdating = 1;

if(!\$evoke) return FALSE;

\$roo = \$\{Chatters:AE:ro:roo\};
EmitTo(\$roo, "Character update started");

\$evoke = replace_strings(\$evoke, "\\"", "");
\$woe = \$evoke;

\$folder = \$woe;

\$characters = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
for(\$j=0;\$j\<sizeof(\$characters);\$j++) \{
    \$char = Obj(\$folder + ":" + \$characters[\$j]);
    /* CODE GOES HERE */

    if(contains(Str(\$char."export:trait:examine"), " It can be sliced into smaller portions")) \{
        \$char."export:trait:examine" = replace_strings(Str(\$char."trait:examine"), " It can be sliced into smaller portions", "");
        \$char."export:trait:look" = \$char."export:trait:examine";
    \}

    if(contains(Str(\$char."export:trait:examine"), ".")) \{
        \$char."export:trait:examine" = replace_strings(Str(\$char."export:trait:examine"), ".", "");
        \$char."export:trait:look" = \$char."export:trait:examine";
    \}

    if(contains(Str(\$char."export:trait:cooked:examine"), " It can be sliced into smaller portions")) \{
        \$char."export:trait:cooked:examine" = replace_strings(Str(\$char."trait:cooked:examine"), " It can be sliced into smaller portions", "");
        \$char."export:trait:cooked:look" = \$char."export:trait:cooked:examine";
    \}

    if(contains(Str(\$char."export:trait:cooked:examine"), ".")) \{
        \$char."export:trait:cooked:examine" = replace_strings(Str(\$char."export:trait:cooked:examine"), ".", "");
        \$char."export:trait:cooked:look" = \$char."export:trait:cooked:examine";
    \}

    EmitTo(\$actor, dump_value(\$char."export:trait:examine"));

    EmitTo(\$actor, dump_value(\$char."export:trait:cooked:examine"));

    if(contains(Str(\$char."export:trait:taste"), ".")) \{
        \$char."export:trait:taste" = replace_strings(Str(\$char."export:trait:taste"), ".", "");
    \}

    if(contains(Str(\$char."export:trait:cooked:taste"), ".")) \{
        \$char."export:trait:cooked:taste" = replace_strings(Str(\$char."export:trait:cooked:taste"), ".", "");
    \}

    EmitTo(\$actor, dump_value(\$char."export:trait:taste"));
    EmitTo(\$actor, dump_value(\$char."export:trait:cooked:taste"));

    if(contains(Str(\$char."export:trait:smell"), ".")) \{
        \$char."export:trait:smell" = replace_strings(Str(\$char."export:trait:smell"), ".", "");
    \}

    if(contains(Str(\$char."export:trait:cooked:smell"), ".")) \{
        \$char."export:trait:cooked:smell" = replace_strings(Str(\$char."export:trait:cooked:smell"), ".", "");
    \}

    EmitTo(\$actor, dump_value(\$char."export:trait:smell"));
    EmitTo(\$actor, dump_value(\$char."export:trait:cooked:smell"));



/*
    if(\$char."export:trait:slice") \{
        \$char."export:trait:sliceable" = \$char."export:trait:slice";
        \$char."export:trait:slice" = nil;
    \}

    if(\$char."export:trait:slice:quantity") \{
        \$char."export:trait:quantity" = \$char."export:trait:slice:quantity";
        \$char."export:trait:slice:quantity" = nil;
    \}
*/

    \$char."skill:fatigue" = nil;
    \$char.revisions = nil;

    \$delay(0.002, TRUE, "488b");
\}
EmitTo(\$roo, "Character update done");
\$this.charupdating = nil;

return TRUE;

\$folder = "Allegory:Props:Food";
EmitTo(\$roo, "Character update started");
\$this.charupdating = 1;
\$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");
for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{
  \$folder = "Allegory:Setting:Outlands:"+\$folders[\$i];
  \$characters = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
  for(\$j=0;\$j\<sizeof(\$characters);\$j++) \{
    \$char = Obj("Allegory:Setting:Outlands:"+\$folders[\$i]+":"+\$characters[\$j]);
    /* CODE GOES HERE */

    \$properties = copy(\$char."*");
    \$propertiesi = map_indices(\$properties);
    for(\$k = 0; \$k \< sizeof(\$propertiesi); \$k++) \{

        if(contains(\$propertiesi[\$k], "block-nippers")) \{
            EmitTo(\$roo, dump_value(\$char) + " " + dump_value(\$propertiesi[\$k]));
            Set(\$char, \$propertiesi[\$k], nil);
        \}
    \}

    \$delay(0.002, TRUE, "b63e");
  \}
\}
EmitTo(\$roo, "Character update done");
\$this.charupdating = nil;
return TRUE;








\$evoke = replace_strings(\$evoke, "\\"", "", ".", "");

\$folder = explode(\$evoke, " ")[0];
\$chance = Int(explode(\$evoke, " ")[1]);

EmitTo(\$actor, Str(\$folder));
\$objects = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");

for(\$i=0;\$i\<sizeof(\$objects);\$i++) \{
    \$ob = Obj(\$folder + ":" + \$objects[\$i]);

    Set(\$ob, "export:consumable:effects", (\{ ([ "chance":\$chance, "name":"diarrhea", "severity":2, "source":1, "type":"poison" ]), ([ "chance":\$chance, "name":"nausea", "severity":2, "source":1, "type":"poison" ]) \}));
\}

return TRUE;


\$roo = \$\{Chatters:AE:ro:roo\};

\$folder = "Chatters:AE";
EmitTo(\$roo, "Character update started");
\$this.charupdating = 1;
\$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");
for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{
  \$folder = "Chatters:AE:"+\$folders[\$i];
  \$characters = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
  for(\$j=0;\$j\<sizeof(\$characters);\$j++) \{
    \$char = Obj("Chatters:AE:"+\$folders[\$i]+":"+\$characters[\$j]);
    /* CODE GOES HERE */

    if(\$char."virtualhome:rinaldi:member") \{
EmitTo(\$actor, "MEMBER: " + dump_value(\$char));
        \$char."virtualhome:italy:gentrybedroom" = \$char."virtualhome:rinaldi:member";
        \$char."virtualhome:rinaldi:member" = nil;
    \}

    if(\$char."virtualhome:rinaldi:noblebed") \{
EmitTo(\$actor, "NOBLE: " + dump_value(\$char));
        \$char."virtualhome:italy:noblebedroom" = \$char."virtualhome:rinaldi:noblebed";
        \$char."virtualhome:rinaldi:noblebed" = nil;
    \}

    if(\$char."virtualhome:rinaldi:noblesitting") \{
EmitTo(\$actor, "NOBLE: " + dump_value(\$char));
        \$char."virtualhome:italy:noblesitting" = \$char."virtualhome:rinaldi:noblesitting";
        \$char."virtualhome:rinaldi:noblesitting" = nil;
    \}

    \$delay(0.002, TRUE, "2d6d");
  \}
\}
EmitTo(\$roo, "Character update done");
\$this.charupdating = nil;
return TRUE;


return TRUE;

if(!\$evoke) return TRUE;

\$searchstr = replace_strings(\$evoke, "\\"", "", ".", "");

\$roo = \$\{Chatters:AE:ro:roo\};

EmitTo(\$roo, "Character update started");
\$this.charupdating = 1;

\$folder = "Allegory:NPCs:NIPs:TradingLists";
\$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");

for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{
  \$folder = "Allegory:NPCs:NIPs:TradingLists:"+\$folders[\$i];
  \$folders2 = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");

  for(\$j=0; \$j\<sizeof(\$folders2);\$j++) \{
      \$folder = "Allegory:NPCs:NIPs:TradingLists:"+\$folders[\$i]+":"+\$folders2[\$j];
      \$objects = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");

      for(\$k=0;\$k\<sizeof(\$objects);\$k++) \{
        \$object = Obj("Allegory:NPCs:NIPs:TradingLists:"+\$folders[\$i]+":"+\$folders2[\$j]+":"+\$objects[\$k]);
        /* CODE GOES HERE */

        \$temp = Str(dump_value(\$object."*"));

        if(contains(\$temp, \$searchstr)) EmitTo(\$actor, dump_value(\$object));

        \$delay(0.002, TRUE, "8ea5");
      \}
  \}
\}
EmitTo(\$roo, "Character update done");
\$this.charupdating = nil;
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:snuggle-dob">
         X[M] \$roo = \$\{Chatters:AE:ro:roo\};

\$folder = "Chatters:AE";
EmitTo(\$roo, "Character update started");
\$this.charupdating = 1;
\$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");
for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{
  \$folder = "Chatters:AE:"+\$folders[\$i];
  \$characters = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
  for(\$j=0;\$j\<sizeof(\$characters);\$j++) \{
    \$char = Obj("Chatters:AE:"+\$folders[\$i]+":"+\$characters[\$j]);
    /* CODE GOES HERE */
    if(\$char."loyalty:group" == "underworld") \{
        \$char."loyalty:guild" = \$\{Allegory:Guilds:underworld\};
    \}
    \$delay(0.002, TRUE, "8ea5");
  \}
\}
EmitTo(\$roo, "Character update done");
\$this.charupdating = nil;

return TRUE;

\$db = \$\{Ironclaw:Data:Plants:PlantDB\};
\$newdb = \$\{Allegory:Lib:Crafting:Gardening:PlantDB\};

\$temp = copy(\$db."*");
\$plantMap = structure_propmap(\$temp);
\$plantMap["/*to do*/"] = nil;
\$plantMap["revisions"] = nil;
\$plants = map_indices(\$plantMap);

for(\$i = 0; \$i \< sizeof(\$plants); \$i++) \{
    \$plant = Get(\$db, \$plants[\$i]);

    if(\$plant["flower"]) \$material = \$plants[\$i] + "-" + "flower";
    if(\$plant["seed"]) \$material = \$plants[\$i] + "-" + "seed";
    if(\$plant["leaf"]) \$material = \$plants[\$i] + "-" + "leaf";
    if(\$plant["fruit"]) \$material = \$plants[\$i] + "-" + "fruit";
    if(\$plant["stalk"]) \$material = \$plants[\$i] + "-" + "stalk";
    if(\$plant["nettle"]) \$material = \$plants[\$i] + "-" + "nettle";
    if(\$plant["vegetable"]) \$material = \$plants[\$i] + "-" + "vegetable";
    if(\$plant["resin"]) \$material = \$plants[\$i] + "-" + "resin";
    if(\$plant["root"]) \$material = \$plants[\$i] + "-" + "root";
    if(\$plant["bark"]) \$material = \$plants[\$i] + "-" + "bark";

    if(\$plant["level"]) \$level = Str(\$plant["level"]); else \$level = "1";

    \$entry = ([ ]);

    \$entry += ([ "paste":([ "brief":"some paste", "newobject":\$\{Ironclaw:Props:Herbalism:Pastes:UrPaste\} ]) ]);

    if(\$plant["tea"]) \{
        \$teabag = map_values(\$plant["tea"]);
        \$entry += ([ "teabag":([ "brief":"a teabag", "newobject":\$teabag[0] ]) ]);
    \}

    Set(\$newdb, "alteration:knowledge:altering-" + \$material + ":gardener:" + \$level, \$entry);
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:tap-dob">
         X[M] \$opp = ([ "west":"east", "northwest":"southeast", "north":"south", "northeast":"southwest", "east":"west", "southeast":"northwest", "south":"north", "southwest":"northeast" ]);

\$env = \$actor."base:environment";
\$details = \$env."base:details:local";

for(\$i = 0; \$i \< sizeof(\$details); \$i++) \{
    \$dir = replace_strings(\$details[\$i], "exit-", "");
    \$exit = Get(\$env, "details:" + \$details[\$i] + ":exit:dest");

    if(\$exit) \{
        \$exitRoom = NRefOb(\$exit);
        \$exitDetail = replace_strings(NRefDetail(\$exit), "exit-", "");

        if(\$details[\$i] == "exit-" + \$exitDetail) \{
            \$newExit = NewNRef(\$exitRoom, "exit-" + \$opp[\$dir]);
            EmitTo(\$actor, "Fixing " + \$details[\$i]);
            Set(\$env, "details:" + \$details[\$i] + ":exit:dest", \$newExit);
        \}
    \}
\}

return TRUE;
      </Core:Property>
      <Core:Property property="plants:merry:react:shake-dob">
         X[M] \$roo = nil /* defunct */;

\$folder = "Chatters:IC";
EmitTo(\$roo, "Character update started");
\$this.charupdating = 1;
\$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");
for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{
  \$folder = "Chatters:IC:"+\$folders[\$i];
  \$characters = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
  for(\$j=0;\$j\<sizeof(\$characters);\$j++) \{
    \$char = Obj("Chatters:IC:"+\$folders[\$i]+":"+\$characters[\$j]);
    /* CODE GOES HERE */

    if(\$char."favor:giving") EmitTo(\$roo, dump_value(\$char."favor:giving"));

    \$delay(0.002, TRUE, "8ea5");
  \}
\}
EmitTo(\$roo, "Character update done");
\$this.charupdating = nil;
return TRUE;

\$db = \$\{Ironclaw:Data:Plants:PlantDB\};
\$newdb = \$\{Allegory:Lib:Crafting:Gardening:PlantDB\};

\$temp = copy(\$db."*");
\$plantMap = structure_propmap(\$temp);
\$plantMap["/*to do*/"] = nil;
\$plantMap["revisions"] = nil;
\$plants = map_indices(\$plantMap);

for(\$i = 0; \$i \< sizeof(\$plants); \$i++) \{
    \$plant = Get(\$db, \$plants[\$i]);

    if(\$plant["flower"]) \$material = \$plants[\$i] + "-" + "flower";
    if(\$plant["seed"]) \$material = \$plants[\$i] + "-" + "seed";
    if(\$plant["leaf"]) \$material = \$plants[\$i] + "-" + "leaf";
    if(\$plant["fruit"]) \$material = \$plants[\$i] + "-" + "fruit";
    if(\$plant["stalk"]) \$material = \$plants[\$i] + "-" + "stalk";
    if(\$plant["nettle"]) \$material = \$plants[\$i] + "-" + "nettle";
    if(\$plant["vegetable"]) \$material = \$plants[\$i] + "-" + "vegetable";
    if(\$plant["resin"]) \$material = \$plants[\$i] + "-" + "resin";
    if(\$plant["root"]) \$material = \$plants[\$i] + "-" + "root";
    if(\$plant["bark"]) \$material = \$plants[\$i] + "-" + "bark";

    if(\$plant["level"]) \$level = Str(\$plant["level"]); else \$level = "1";

    \$entry = ([ ]);

    \$entry += ([ "paste":([ "brief":"some paste", "newobject":\$\{Ironclaw:Props:Herbalism:Pastes:UrPaste\} ]) ]);

    if(\$plant["tea"]) \{
        \$teabag = map_values(\$plant["tea"]);
        \$entry += ([ "teabag":([ "brief":"a teabag", "newobject":\$teabag[0] ]) ]);
    \}

    Set(\$newdb, "alteration:knowledge:altering-" + \$material + ":gardener:" + \$level, \$entry);
\}

return TRUE;
      </Core:Property>
      <Core:Property property="promotion:merry:react:shake-dob">
         X[M] return FALSE;

if(\$this.charupdating) return FALSE;
\$folder = "Chatters:IC";
EmitTo(\$roo, "Character update started");
\$this.charupdating = 1;
\$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");
\$map = ([ ]);
for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{
  \$folder = "Chatters:IC:"+\$folders[\$i];
  \$characters = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
  for(\$j=0;\$j\<sizeof(\$characters);\$j++) \{
    \$chatter = Obj("Chatters:IC:"+\$folders[\$i]+":"+\$characters[\$j]);
EmitTo(nil /* defunct */, dump_value(\$chatter));

    \$db = \$\{Ironclaw:Lib:Favor:Ranks\};

    \$char = \$chatter;
    \$ranks = prefixed_map(\$char."*", "rank:status:");
    \$ranks_indices = map_indices(\$ranks);

    for(\$z = 0; \$z \< sizeof(\$ranks_indices); \$z++) \{
        \$t1 = \$ranks_indices[\$z];
        \$t2 = replace_strings(\$t1, "rank:status:", "", "_mil", "");

        \$t3 = \$ranks[\$t1];

        if(\$t3 \< 10) \$t4 = "Rank 0" + Str(\$t3);
        if(\$t3 \>= 10) \$t4 = "Rank " + Str(\$t3);

        \$t5 = Get(\$db, \$t2);
        \$t5[\$t4] += (\{ \$char \});
EmitTo(\$actor, dump_value(\$t5));
    \}

\$delay(0.01, FALSE, "e991");
  \}
\}

\$this.charupdating = nil;

    EmitTo(nil /* defunct */, "Done"); 

return TRUE;

Call(\$\{Ironclaw:Lib:ConsignmentSystem\}, "generate_orders");

return TRUE;

\$roo = nil /* defunct */;

\$folder = "Chatters:IC";
EmitTo(\$roo, "Character update started");
\$this.charupdating = 1;
\$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");
for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{
  \$folder = "Chatters:IC:"+\$folders[\$i];
  \$characters = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
  for(\$j=0;\$j\<sizeof(\$characters);\$j++) \{
    \$chatter = Obj("Chatters:IC:"+\$folders[\$i]+":"+\$characters[\$j]);
    /* CODE GOES HERE */

  if(\$chatter) \{
    if(\$chatter.patron) \{
        \$char1 = \$chatter;
        \$char2 = \$chatter.patron;
        if(Call(\$\{Ironclaw:Lib:Characters:RankScripts\}, "ip_check", \$char1: \$chatter, \$char2: \$chatter.patron)) \{
            EmitTo(nil /* defunct */, "IP MATCH: " + Str(\$char1) + " is patroned by " + Str(\$char2));
            \$chatter.patron = nil;
        \}
    \}

    if(\$chatter."favor:giving") \{
        if(map_sizeof(\$chatter."favor:giving")) \{
            \$favors = map_indices(\$chatter."favor:giving");

            for(\$x = 0; \$x \< sizeof(\$favors); \$x++) \{
            \$char1 = \$chatter;
            \$char2 = Obj(\$favors[\$x]);
                if(Call(\$\{Ironclaw:Lib:Characters:RankScripts\}, "ip_check", \$char1: \$chatter, \$char2: Obj(\$favors[\$x]))) \{
                    EmitTo(nil /* defunct */, "IP MATCH: " + Str(\$char1) + " is favoring " + Str(\$char2));
                    \$chatter."favor:giving"[Str(\$char2)] = nil;
                \}
            \}
        \}
    \}
  \}

    \$delay(0.002, TRUE, "8ea5");
  \}
\}
EmitTo(\$roo, "Character update done");
\$this.charupdating = nil;
return TRUE;

\$delay(1, TRUE, "350f");
if(Call(\$\{Ironclaw:Lib:Characters:RankScripts\}, "ip_check")) \{
    EmitIn(\$actor."base:environment", TAG(Str(\$names[0]) + " and " + Str(\$names[1]) + " have the same ip address.", "imp"));
\} else \{
    EmitIn(\$actor."base:environment", TAG(Str(\$names[0]) + " and " + Str(\$names[1]) + " have different ip addresses.", "imp"));
\}

return TRUE;

\$tradingLists = (\{ \$\{Allegory:NPCs:NIPs:TradingLists:Northeast:Carpenter:LumberBasic\}, \$\{Allegory:NPCs:NIPs:TradingLists:Northeast:Stonemason:Mason\}, \$\{Allegory:NPCs:NIPs:TradingLists:Northeast:Smithy:Blacksmith\}, \$\{Ironclaw:NPCs:Traders:TradingLists:ClothMerchant\}, \$\{Allegory:NPCs:NIPs:TradingLists:Northeast:Tailors:FabricBasic\} \});

\$craftingLists = (\{ \$\{Ironclaw:Lib:Crafting:Wood:Backups:LumberDB\}, \$\{Ironclaw:Lib:Crafting:Stone:Backup:StoneDB\}, \$\{Allegory:Lib:Crafting:Blacksmith:MetalRodDB\}, \$\{Ironclaw:Lib:Crafting:Clothing:Old:TailorDB\}, \$\{Ironclaw:Lib:Crafting:Clothing:Old:SeamstressDB\}, \$\{Ironclaw:Lib:Crafting:Clothing:Old:NeedleworkerDB\} \});

\$cost = 1;
\$value = 10;
\$quantity = 10;

if(!\$iob) return TRUE;
if(!sizeof(\$iob)) return TRUE;

\$item = NRefOb(\$iob[0]);
\$type = \$item."trait:objecttype";

EmitTo(\$actor, dump_value(\$type));

/* Does the item exist on one of the crafting lists? */
\$found = 0;
for(\$i = 0; \$i \< sizeof(\$craftingLists) \&\& !\$found; \$i++) \{
    \$db = copy(\$craftingLists[\$i]."*");
    \$temp = map_indices(\$db);
    for(\$j = 0; \$j \< sizeof(\$temp); \$j++) \{
        if(typeof(\$db[\$temp[\$j]]) == 6) \{
            \$temp2 = \$db[\$temp[\$j]];
            if(\$temp2[\$type]) \{
                \$cost = Int(\$temp2[\$type]["cost"][0]);
                \$found = 1;
            \}
        \}
    \}
\}

if(!\$item."trait:material") \{
    EmitTo(\$actor, "trait:material not defined");
    return FALSE;
\}

\$material = \$item."trait:material";

\$found = 0;
for(\$i = 0; \$i \< sizeof(\$tradingLists) \&\& !\$found; \$i++) \{
    \$list = copy(\$tradingLists[\$i]."*");
    \$temp = map_indices(\$list);
    for(\$j = 0; \$j \< sizeof(\$temp); \$j++) \{
        \$temp2 = \$list[\$temp[\$j]];
        if(typeof(\$temp2) == 6) \{
            if(\$temp2["object"]) \{
                \$ob = \$temp2["object"];
                if(\$ob."trait:material" == \$material) \{
                    \$quantity = Int(\$ob."trait:quantity");
                    \$value = Int(\$ob."nip:item:cost");
                    \$found = 1;
                \}
            \}
        \}
    \}
\}

\$costToMake = (\$value/\$quantity)*\$cost;

EmitTo(\$actor, dump_value(Flt(Flt(\$costToMake)/100.0)));

return FALSE;
      </Core:Property>
      <Core:Property property="purge:merry:react:shake-dob">
         X[M] \$roo = \$\{Chatters:AE:ro:roo\};

\$folder = "Chatters:IC";
EmitTo(\$roo, "Character update started");
\$this.charupdating = 1;
\$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");
for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{
  \$folder = "Chatters:IC:"+\$folders[\$i];
  \$characters = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
  for(\$j=0;\$j\<sizeof(\$characters);\$j++) \{
    \$char = Obj("Chatters:IC:"+\$folders[\$i]+":"+\$characters[\$j]);
    /* CODE GOES HERE */

    if(\$char."cdat:lastlogin") \{
        \$lastlogin = \$char."cdat:lastlogin";
        \$days = time() - \$lastlogin;
        \$session = Int(\$char."cdat:sessiontime")/(60*60);
        if(\$days \> (60*60*24*365*6)) \{
            if(\$char."skotos:creator" != "npcs" \&\& \$char."skotos:creator" != "tonyd" \&\& \$char."skotos:creator" != "balkaar" \&\& \$char."skotos:creator" != "tunk_bodin" \&\& \$char."skotos:creator" != "jominey" \&\& \$char."skotos:creator" != "ezralee") \{
                \$propsMap = copy(\$char."*");
                \$props = map_indices(\$propsMap);
                for(\$x = 0; \$x \< sizeof(\$props); \$x++) \{
                    if(contains(\$props[\$x], "virtualhome") \&\& \$props[\$x] != "virtualhome:home") \{
                        \$temp = \$propsMap[\$props[\$x]];
                        if(typeof(\$temp) == 4) \{
                            EmitTo(\$roo, "Slaying " + dump_value(\$temp));
                            Slay(\$temp); 
                        \}
                    \}
                \}
                EmitTo(\$roo, "Slaying " + dump_value(\$char));
                Slay(\$char); 
            \}
        \}
    \} 

    
    \$delay(0.002, TRUE, "8ea5");
  \}
\}
EmitTo(\$roo, "Character update done");
\$this.charupdating = nil;
return TRUE;
      </Core:Property>
      <Core:Property property="replacecategory:merry:react:shake-dob">
         X[M] if(\$this.charupdating) return FALSE;
\$roo = nil /* defunct */;
\$folder = "Chatters:IC";
EmitTo(\$roo, "Character update started");
\$this.charupdating = 1;
\$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");
for(\$x=0;\$x\<sizeof(\$folders);\$x++) \{
  \$folder = "Chatters:IC:"+\$folders[\$x];
  \$characters = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
  for(\$y=0;\$y\<sizeof(\$characters);\$y++) \{
    \$chatter = Obj("Chatters:IC:"+\$folders[\$x]+":"+\$characters[\$y]);

\$replaceMap = ([ "face bandana":"tailoring-cloth" ]);
    \$find = map_indices(\$replaceMap);
    \$new = map_values(\$replaceMap);

    if(\$chatter) \{
        if(\$chatter."crafting:patterns") \{
            \$patterns = \$chatter."crafting:patterns";
            \$cats = map_indices(\$patterns);

            for(\$i = 0; \$i \< sizeof(\$cats); \$i++) \{
                for(\$j = 0; \$j \< sizeof(\$find); \$j++) \{
                    \$temp = lower_case(\$find[\$j]);
                    if(member(\$temp, \$patterns[\$cats[\$i]])) \{
                        \$newcat = \$new[\$j];

                        if(\$patterns[\$newcat]) \{
                            \$patterns[\$newcat] += (\{ \$temp \});
                        \} else \{
                            \$patterns[\$newcat] = (\{ \$temp \});
                        \}
                    \}
                \}
            \}
            \$chatter."crafting:patterns" = \$patterns;
        \}
    \}




    \$delay(0.02, FALSE, "e991");
  \}
\}

\$this.charupdating = nil;
    /* EmitTo(\$\{Chatters:IC:ro:roo\}, dump_value(\$map)); */
    EmitTo(nil /* defunct */, "Done"); 

return TRUE;

Call(\$\{Ironclaw:Lib:ConsignmentSystem\}, "generate_orders");

return TRUE;

\$roo = nil /* defunct */;

\$folder = "Chatters:IC";
EmitTo(\$roo, "Character update started");
\$this.charupdating = 1;
\$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");
for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{
  \$folder = "Chatters:IC:"+\$folders[\$i];
  \$characters = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
  for(\$j=0;\$j\<sizeof(\$characters);\$j++) \{
    \$chatter = Obj("Chatters:IC:"+\$folders[\$i]+":"+\$characters[\$j]);
    /* CODE GOES HERE */

  if(\$chatter) \{
       if(\$chatter."trait:agility") \{
           \$agility = \$chatter."trait:agility";
           Set(\$chatter, "trait:will", \$agility);
           Set(\$chatter, "trait:agility", nil);
       \}
  \}

    \$delay(0.002, TRUE, "8ea5");
  \}
\}
EmitTo(\$roo, "Character update done");
\$this.charupdating = nil;
return TRUE;

\$delay(1, TRUE, "350f");
if(Call(\$\{Ironclaw:Lib:Characters:RankScripts\}, "ip_check")) \{
    EmitIn(\$actor."base:environment", TAG(Str(\$names[0]) + " and " + Str(\$names[1]) + " have the same ip address.", "imp"));
\} else \{
    EmitIn(\$actor."base:environment", TAG(Str(\$names[0]) + " and " + Str(\$names[1]) + " have different ip addresses.", "imp"));
\}

return TRUE;

\$tradingLists = (\{ \$\{Allegory:NPCs:NIPs:TradingLists:Northeast:Carpenter:LumberBasic\}, \$\{Allegory:NPCs:NIPs:TradingLists:Northeast:Stonemason:Mason\}, \$\{Allegory:NPCs:NIPs:TradingLists:Northeast:Smithy:Blacksmith\}, \$\{Ironclaw:NPCs:Traders:TradingLists:ClothMerchant\}, \$\{Allegory:NPCs:NIPs:TradingLists:Northeast:Tailors:FabricBasic\} \});

\$craftingLists = (\{ \$\{Ironclaw:Lib:Crafting:Wood:Backups:LumberDB\}, \$\{Ironclaw:Lib:Crafting:Stone:Backup:StoneDB\}, \$\{Allegory:Lib:Crafting:Blacksmith:MetalRodDB\}, \$\{Ironclaw:Lib:Crafting:Clothing:Old:TailorDB\}, \$\{Ironclaw:Lib:Crafting:Clothing:Old:SeamstressDB\}, \$\{Ironclaw:Lib:Crafting:Clothing:Old:NeedleworkerDB\} \});

\$cost = 1;
\$value = 10;
\$quantity = 10;

if(!\$iob) return TRUE;
if(!sizeof(\$iob)) return TRUE;

\$item = NRefOb(\$iob[0]);
\$type = \$item."trait:objecttype";

EmitTo(\$actor, dump_value(\$type));

/* Does the item exist on one of the crafting lists? */
\$found = 0;
for(\$i = 0; \$i \< sizeof(\$craftingLists) \&\& !\$found; \$i++) \{
    \$db = copy(\$craftingLists[\$i]."*");
    \$temp = map_indices(\$db);
    for(\$j = 0; \$j \< sizeof(\$temp); \$j++) \{
        if(typeof(\$db[\$temp[\$j]]) == 6) \{
            \$temp2 = \$db[\$temp[\$j]];
            if(\$temp2[\$type]) \{
                \$cost = Int(\$temp2[\$type]["cost"][0]);
                \$found = 1;
            \}
        \}
    \}
\}

if(!\$item."trait:material") \{
    EmitTo(\$actor, "trait:material not defined");
    return FALSE;
\}

\$material = \$item."trait:material";

\$found = 0;
for(\$i = 0; \$i \< sizeof(\$tradingLists) \&\& !\$found; \$i++) \{
    \$list = copy(\$tradingLists[\$i]."*");
    \$temp = map_indices(\$list);
    for(\$j = 0; \$j \< sizeof(\$temp); \$j++) \{
        \$temp2 = \$list[\$temp[\$j]];
        if(typeof(\$temp2) == 6) \{
            if(\$temp2["object"]) \{
                \$ob = \$temp2["object"];
                if(\$ob."trait:material" == \$material) \{
                    \$quantity = Int(\$ob."trait:quantity");
                    \$value = Int(\$ob."nip:item:cost");
                    \$found = 1;
                \}
            \}
        \}
    \}
\}

\$costToMake = (\$value/\$quantity)*\$cost;

EmitTo(\$actor, dump_value(Flt(Flt(\$costToMake)/100.0)));

return FALSE;
      </Core:Property>
      <Core:Property property="replacepatternname:merry:react:shake-dob">
         X[M] if(\$this.charupdating) return FALSE;
\$roo = nil /* defunct */;
\$folder = "Chatters:IC";
EmitTo(\$roo, "Character update started");
\$this.charupdating = 1;
\$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");
for(\$x=0;\$x\<sizeof(\$folders);\$x++) \{
  \$folder = "Chatters:IC:"+\$folders[\$x];
  \$characters = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
  for(\$y=0;\$y\<sizeof(\$characters);\$y++) \{
    \$chatter = Obj("Chatters:IC:"+\$folders[\$x]+":"+\$characters[\$y]);

    \$replaceMap = ([ "footed-pajamas":"footed pajamas", "bloomers-short":"short bloomers", "angled":"angled skirt", "short-sleeved":"short-sleeved dress", "sleeves-tapered":"tapered sleeves", "sleeves-hanging":"hanging sleeves", "slashed sleeved doublet":"slashed-sleeved doublet", "overskirt-ruffled":"ruffled overskirt", "jester":"jester hat", "gypsy skirt":"tiered ruffle skirt", "underskirt-ruffled":"ruffled underskirt", "strapped sandals":"strapped knee-high sandals", "ruffled":"ruffled skirt", "top-hat":"top hat", "back-laced pendant gown":"pendant-sleeved gown", "hand-fan":"fan", "cross-lace bodice":"cross-laced bodice", "tapestry":"tapestry pouch", "train skirt dress":"train-skirted dress", "short saberist":"short soberest dress", "girdle":"girdle belt", "dagged-coat":"dagged coat", "short-blouse":"short-sleeved blouse", "ranger":"ranger dress", "breast-bags":"breast bags", "sleeveless":"sleeveless gown", "neckerchief":"neck handkerchief", "back-cloak":"back cloak", "bandana-face":"face bandana", "cape-chasuble":"chasuble cape", "collar":"collar cape", "hooded lacerna":"lacerna cloak", "beltpouch":"belt pouch", "braided":"braided belt", "cape-evening":"evening cape", "cloak-hooded":"hooded cloak", "smithapron":"smith apron", "eye-mask":"eye mask", "pocket":"pocket belt", "cape-sword":"sword cape", "full-mask":"full mask", "acorn":"acorn hat", "boot-hose":"boot hose", "sideless-surcoat":"sideless surcoat", "wrap-around":"wrap-around dress", "swatch":"swatch shirt" ]);
    \$old = map_indices(\$replaceMap);
    \$new = map_values(\$replaceMap);

    if(\$chatter == nil /* defunct */) \{
        if(\$chatter."crafting:patterns") \{
            \$patterns = \$chatter."crafting:patterns";
            \$cats = map_indices(\$patterns);
            for(\$i = 0; \$i \< sizeof(\$cats); \$i++) \{
                for(\$j = 0; \$j \< sizeof(\$old); \$j++) \{
                    if(member(\$old[\$j], \$patterns[\$cats[\$i]])) \{
                        \$patterns[\$cats[\$i]] += (\{ \$new[\$j] \});
                        \$patterns[\$cats[\$i]] -= (\{ \$old[\$j] \});
                    \}
                \}
            \}
            \$chatter."crafting:patterns" = \$patterns;
        \}
    \}




    \$delay(0.02, FALSE, "e991");
  \}
\}

\$this.charupdating = nil;
    /* EmitTo(\$\{Chatters:IC:ro:roo\}, dump_value(\$map)); */
    EmitTo(nil /* defunct */, "Done"); 

return TRUE;

Call(\$\{Ironclaw:Lib:ConsignmentSystem\}, "generate_orders");

return TRUE;

\$roo = nil /* defunct */;

\$folder = "Chatters:IC";
EmitTo(\$roo, "Character update started");
\$this.charupdating = 1;
\$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");
for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{
  \$folder = "Chatters:IC:"+\$folders[\$i];
  \$characters = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
  for(\$j=0;\$j\<sizeof(\$characters);\$j++) \{
    \$chatter = Obj("Chatters:IC:"+\$folders[\$i]+":"+\$characters[\$j]);
    /* CODE GOES HERE */

  if(\$chatter) \{
       if(\$chatter."trait:agility") \{
           \$agility = \$chatter."trait:agility";
           Set(\$chatter, "trait:will", \$agility);
           Set(\$chatter, "trait:agility", nil);
       \}
  \}

    \$delay(0.002, TRUE, "8ea5");
  \}
\}
EmitTo(\$roo, "Character update done");
\$this.charupdating = nil;
return TRUE;

\$delay(1, TRUE, "350f");
if(Call(\$\{Ironclaw:Lib:Characters:RankScripts\}, "ip_check")) \{
    EmitIn(\$actor."base:environment", TAG(Str(\$names[0]) + " and " + Str(\$names[1]) + " have the same ip address.", "imp"));
\} else \{
    EmitIn(\$actor."base:environment", TAG(Str(\$names[0]) + " and " + Str(\$names[1]) + " have different ip addresses.", "imp"));
\}

return TRUE;

\$tradingLists = (\{ \$\{Allegory:NPCs:NIPs:TradingLists:Northeast:Carpenter:LumberBasic\}, \$\{Allegory:NPCs:NIPs:TradingLists:Northeast:Stonemason:Mason\}, \$\{Allegory:NPCs:NIPs:TradingLists:Northeast:Smithy:Blacksmith\}, \$\{Ironclaw:NPCs:Traders:TradingLists:ClothMerchant\}, \$\{Allegory:NPCs:NIPs:TradingLists:Northeast:Tailors:FabricBasic\} \});

\$craftingLists = (\{ \$\{Ironclaw:Lib:Crafting:Wood:Backups:LumberDB\}, \$\{Ironclaw:Lib:Crafting:Stone:Backup:StoneDB\}, \$\{Allegory:Lib:Crafting:Blacksmith:MetalRodDB\}, \$\{Ironclaw:Lib:Crafting:Clothing:Old:TailorDB\}, \$\{Ironclaw:Lib:Crafting:Clothing:Old:SeamstressDB\}, \$\{Ironclaw:Lib:Crafting:Clothing:Old:NeedleworkerDB\} \});

\$cost = 1;
\$value = 10;
\$quantity = 10;

if(!\$iob) return TRUE;
if(!sizeof(\$iob)) return TRUE;

\$item = NRefOb(\$iob[0]);
\$type = \$item."trait:objecttype";

EmitTo(\$actor, dump_value(\$type));

/* Does the item exist on one of the crafting lists? */
\$found = 0;
for(\$i = 0; \$i \< sizeof(\$craftingLists) \&\& !\$found; \$i++) \{
    \$db = copy(\$craftingLists[\$i]."*");
    \$temp = map_indices(\$db);
    for(\$j = 0; \$j \< sizeof(\$temp); \$j++) \{
        if(typeof(\$db[\$temp[\$j]]) == 6) \{
            \$temp2 = \$db[\$temp[\$j]];
            if(\$temp2[\$type]) \{
                \$cost = Int(\$temp2[\$type]["cost"][0]);
                \$found = 1;
            \}
        \}
    \}
\}

if(!\$item."trait:material") \{
    EmitTo(\$actor, "trait:material not defined");
    return FALSE;
\}

\$material = \$item."trait:material";

\$found = 0;
for(\$i = 0; \$i \< sizeof(\$tradingLists) \&\& !\$found; \$i++) \{
    \$list = copy(\$tradingLists[\$i]."*");
    \$temp = map_indices(\$list);
    for(\$j = 0; \$j \< sizeof(\$temp); \$j++) \{
        \$temp2 = \$list[\$temp[\$j]];
        if(typeof(\$temp2) == 6) \{
            if(\$temp2["object"]) \{
                \$ob = \$temp2["object"];
                if(\$ob."trait:material" == \$material) \{
                    \$quantity = Int(\$ob."trait:quantity");
                    \$value = Int(\$ob."nip:item:cost");
                    \$found = 1;
                \}
            \}
        \}
    \}
\}

\$costToMake = (\$value/\$quantity)*\$cost;

EmitTo(\$actor, dump_value(Flt(Flt(\$costToMake)/100.0)));

return FALSE;
      </Core:Property>
      <Core:Property property="replacepatterns:merry:react:shake-dob">
         X[M] if(\$this.charupdating) return FALSE;
\$roo = nil /* defunct */;
\$folder = "Chatters:IC";
EmitTo(\$roo, "Character update started");
\$this.charupdating = 1;
\$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");
for(\$x=0;\$x\<sizeof(\$folders);\$x++) \{
  \$folder = "Chatters:IC:"+\$folders[\$x];
  \$characters = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
  for(\$y=0;\$y\<sizeof(\$characters);\$y++) \{
    \$chatter = Obj("Chatters:IC:"+\$folders[\$x]+":"+\$characters[\$y]);

    \$replaceMap = ([ "tailoring-belts":"tailoring-belt", "tailoring-cushions":"tailoring-cushion", "tailoring-dresses":"tailoring-dress", "tailoring-flowers":"tailoring-flower", "tailoring-gowns":"tailoring-gown","tailoring-hats":"tailoring-hat", "tailoring-jackets":"tailoring-jacket", "tailoring-pouches":"tailoring-pouch", "tailoring-scarfs":"tailoring-scarf", "tailoring-shirts":"tailoring-shirt", "tailoring-skirts":"tailoring-skirt" ]);
    \$old = map_indices(\$replaceMap);
    \$new = map_values(\$replaceMap);

    if(\$chatter) \{
        if(\$chatter."crafting:patterns") \{
            \$patterns = \$chatter."crafting:patterns";
            for(\$i = 0; \$i \< sizeof(\$old); \$i++) \{
                if(\$patterns[\$old[\$i]]) \{
                    \$patterns[\$new[\$i]] = \$patterns[\$old[\$i]];
                    \$patterns[\$old[\$i]] = nil;
                \}
            \}
            \$chatter."crafting:patterns" = \$patterns;
        \}
    \}




    \$delay(0.02, FALSE, "e991");
  \}
\}

\$this.charupdating = nil;
    /* EmitTo(\$\{Chatters:IC:ro:roo\}, dump_value(\$map)); */
    EmitTo(nil /* defunct */, "Done"); 

return TRUE;

Call(\$\{Ironclaw:Lib:ConsignmentSystem\}, "generate_orders");

return TRUE;

\$roo = nil /* defunct */;

\$folder = "Chatters:IC";
EmitTo(\$roo, "Character update started");
\$this.charupdating = 1;
\$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");
for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{
  \$folder = "Chatters:IC:"+\$folders[\$i];
  \$characters = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
  for(\$j=0;\$j\<sizeof(\$characters);\$j++) \{
    \$chatter = Obj("Chatters:IC:"+\$folders[\$i]+":"+\$characters[\$j]);
    /* CODE GOES HERE */

  if(\$chatter) \{
       if(\$chatter."trait:agility") \{
           \$agility = \$chatter."trait:agility";
           Set(\$chatter, "trait:will", \$agility);
           Set(\$chatter, "trait:agility", nil);
       \}
  \}

    \$delay(0.002, TRUE, "8ea5");
  \}
\}
EmitTo(\$roo, "Character update done");
\$this.charupdating = nil;
return TRUE;

\$delay(1, TRUE, "350f");
if(Call(\$\{Ironclaw:Lib:Characters:RankScripts\}, "ip_check")) \{
    EmitIn(\$actor."base:environment", TAG(Str(\$names[0]) + " and " + Str(\$names[1]) + " have the same ip address.", "imp"));
\} else \{
    EmitIn(\$actor."base:environment", TAG(Str(\$names[0]) + " and " + Str(\$names[1]) + " have different ip addresses.", "imp"));
\}

return TRUE;

\$tradingLists = (\{ \$\{Allegory:NPCs:NIPs:TradingLists:Northeast:Carpenter:LumberBasic\}, \$\{Allegory:NPCs:NIPs:TradingLists:Northeast:Stonemason:Mason\}, \$\{Allegory:NPCs:NIPs:TradingLists:Northeast:Smithy:Blacksmith\}, \$\{Ironclaw:NPCs:Traders:TradingLists:ClothMerchant\}, \$\{Allegory:NPCs:NIPs:TradingLists:Northeast:Tailors:FabricBasic\} \});

\$craftingLists = (\{ \$\{Ironclaw:Lib:Crafting:Wood:Backups:LumberDB\}, \$\{Ironclaw:Lib:Crafting:Stone:Backup:StoneDB\}, \$\{Allegory:Lib:Crafting:Blacksmith:MetalRodDB\}, \$\{Ironclaw:Lib:Crafting:Clothing:Old:TailorDB\}, \$\{Ironclaw:Lib:Crafting:Clothing:Old:SeamstressDB\}, \$\{Ironclaw:Lib:Crafting:Clothing:Old:NeedleworkerDB\} \});

\$cost = 1;
\$value = 10;
\$quantity = 10;

if(!\$iob) return TRUE;
if(!sizeof(\$iob)) return TRUE;

\$item = NRefOb(\$iob[0]);
\$type = \$item."trait:objecttype";

EmitTo(\$actor, dump_value(\$type));

/* Does the item exist on one of the crafting lists? */
\$found = 0;
for(\$i = 0; \$i \< sizeof(\$craftingLists) \&\& !\$found; \$i++) \{
    \$db = copy(\$craftingLists[\$i]."*");
    \$temp = map_indices(\$db);
    for(\$j = 0; \$j \< sizeof(\$temp); \$j++) \{
        if(typeof(\$db[\$temp[\$j]]) == 6) \{
            \$temp2 = \$db[\$temp[\$j]];
            if(\$temp2[\$type]) \{
                \$cost = Int(\$temp2[\$type]["cost"][0]);
                \$found = 1;
            \}
        \}
    \}
\}

if(!\$item."trait:material") \{
    EmitTo(\$actor, "trait:material not defined");
    return FALSE;
\}

\$material = \$item."trait:material";

\$found = 0;
for(\$i = 0; \$i \< sizeof(\$tradingLists) \&\& !\$found; \$i++) \{
    \$list = copy(\$tradingLists[\$i]."*");
    \$temp = map_indices(\$list);
    for(\$j = 0; \$j \< sizeof(\$temp); \$j++) \{
        \$temp2 = \$list[\$temp[\$j]];
        if(typeof(\$temp2) == 6) \{
            if(\$temp2["object"]) \{
                \$ob = \$temp2["object"];
                if(\$ob."trait:material" == \$material) \{
                    \$quantity = Int(\$ob."trait:quantity");
                    \$value = Int(\$ob."nip:item:cost");
                    \$found = 1;
                \}
            \}
        \}
    \}
\}

\$costToMake = (\$value/\$quantity)*\$cost;

EmitTo(\$actor, dump_value(Flt(Flt(\$costToMake)/100.0)));

return FALSE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1510098555, "jominey", "E", 1510098586, "jominey", "E", 1510098687, "jominey", "E", 1510098721, "jominey", "E", 1510099128, "jominey", "E", 1510099270, "jominey", "E", 1510099282, "jominey", "E", 1510099448, "jominey", "E", 1510099464, "jominey", "E", 1510099696, "jominey", "E", 1510099761, "jominey", "E", 1510099905, "jominey", "E", 1510100026, "jominey", "E", 1510101635, "jominey", "E", 1510101703, "jominey", "E", 1510101722, "jominey", "E", 1510101739, "jominey", "E", 1510101772, "jominey", "E", 1510101911, "jominey", "E", 1510101960, "jominey", "E", 1510106549, "jominey", "E", 1510106682, "jominey", "E", 1510107008, "jominey", "E", 1510107318, "jominey", "E", 1510107406, "jominey", "E", 1510176719, "jominey", "E", 1510766507, "jominey", "E", 1510769610, "jominey", "E", 1510769619, "jominey", "E", 1511833376, "jominey", "E", 1511833403, "jominey", "E", 1511833423, "jominey", "E", 1511880684, "jominey", "E", 1511880707, "jominey", "E", 1511880771, "jominey", "E", 1511881053, "jominey", "E", 1515719872, "jominey", "E", 1520803184, "jominey", "E", 1520803207, "jominey", "E", 1520803366, "jominey", "E", 1520803390, "jominey", "E", 1520803461, "jominey", "E", 1520803534, "jominey", "E", 1522193345, "jominey", "E", 1522193370, "jominey", "E", 1522194203, "jominey", "E", 1522194219, "jominey", "E", 1523406995, "jominey", "E", 1523407057, "jominey", "E", 1525009127, "jominey", "E", 1525009208, "jominey", "E", 1525010423, "jominey", "E", 1525010497, "jominey", "E", 1525010646, "jominey", "E", 1525010797, "jominey", "E", 1525010943, "jominey", "E", 1525010999, "jominey", "E", 1525011066, "jominey", "E", 1525011097, "jominey", "E", 1525011219, "jominey", "E", 1525011532, "jominey", "E", 1525011579, "jominey", "E", 1525011990, "jominey", "E", 1525012027, "jominey", "E", 1525012073, "jominey", "E", 1525012084, "jominey", "E", 1525014647, "jominey", "E", 1525014699, "jominey", "E", 1525014985, "jominey", "E", 1525018892, "jominey", "E", 1525019302, "jominey", "E", 1525019807, "jominey", "E", 1525019825, "jominey", "E", 1525019936, "jominey", "E", 1525019993, "jominey", "E", 1525020040, "jominey", "E", 1525020066, "jominey", "E", 1525020182, "jominey", "E", 1525020377, "jominey", "E", 1525021228, "jominey", "E", 1525021274, "jominey", "E", 1525021290, "jominey", "E", 1525021790, "jominey", "E", 1525309007, "jominey", "E", 1525309031, "jominey", "E", 1525309044, "jominey", "E", 1525811433, "jominey", "E", 1525811602, "jominey", "E", 1525811787, "jominey", "E", 1525812483, "jominey", "E", 1533490079, "jominey", "E", 1533490137, "jominey", "E", 1533490224, "jominey", "E", 1533490344, "jominey", "E", 1533490432, "jominey", "E", 1533490468, "jominey", "E", 1533490706, "jominey", "E", 1533490856, "jominey", "E", 1533490903, "jominey", "E", 1533491258, "jominey", "E", 1533491658, "jominey", "E", 1533491693, "jominey", "E", 1533491766, "jominey", "E", 1533492038, "jominey", "E", 1533492751, "jominey", "E", 1533492762, "jominey", "E", 1533492896, "jominey", "E", 1533493170, "jominey", "E", 1533494140, "jominey", "E", 1533518442, "jominey", "E", 1533518486, "jominey", "E", 1533518681, "jominey", "E", 1533519063, "jominey", "E", 1533519137, "jominey", "E", 1533519292, "jominey", "E", 1533519457, "jominey", "E", 1533519597, "jominey", "E", 1533519709, "jominey", "E", 1533603327, "jominey", "E", 1533603349, "jominey", "E", 1536010484, "jominey", "E", 1536010507, "jominey", "E", 1536010658, "jominey", "E", 1536010708, "jominey", "E", 1536010727, "jominey", "E", 1538700012, "jominey", "E", 1538700033, "jominey", "E", 1539037934, "jominey", "E", 1539037956, "jominey", "E", 1539038042, "jominey", "E", 1539038063, "jominey", "E", 1539038903, "jominey", "E", 1539038914, "jominey", "E", 1539224819, "jominey", "E", 1539224835, "jominey", "E", 1539657847, "jominey", "E", 1539657926, "jominey", "E", 1539908047, "jominey", "E", 1539908083, "jominey", "E", 1539908094, "jominey", "E", 1540514006, "jominey", "E", 1540514023, "jominey", "E", 1548601114, "jominey", "E", 1548601140, "jominey", "E", 1549764719, "jominey", "E", 1549764732, "jominey", "E", 1549815161, "jominey", "E", 1549815211, "jominey", "E", 1550106725, "jominey", "E", 1550106741, "jominey", "E", 1550106885, "jominey", "E", 1550107260, "jominey", "E", 1550107272, "jominey", "E", 1550197873, "jominey", "E", 1550197949, "jominey", "E", 1560355824, "jominey", "E", 1560367621, "jominey", "E", 1560367718, "jominey", "E", 1560367897, "jominey", "E", 1560368006, "jominey", "E", 1560368046, "jominey", "E", 1560380935, "jominey", "E", 1561090306, "jominey", "K", 1561418133, "jominey", "E", 1561418231, "jominey", "E", 1561418408, "jominey", "E", 1561418439, "jominey", "E", 1561418705, "jominey", "E", 1561418824, "jominey", "E", 1561418947, "jominey", "E", 1561419073, "jominey", "E", 1561419218, "jominey", "E", 1561419279, "jominey", "E", 1561419600, "jominey", "E", 1561419684, "jominey", "E", 1561419787, "jominey", "E", 1561420425, "jominey", "E", 1561420529, "jominey", "E", 1561420668, "jominey", "E", 1561420925, "jominey", "E", 1561420966, "jominey", "E", 1561421120, "jominey", "E", 1561421186, "jominey", "E", 1561421270, "jominey", "E", 1561421457, "jominey", "E", 1561421596, "jominey", "E", 1561421729, "jominey", "E", 1561421755, "jominey", "E", 1561421891, "jominey", "E", 1561421974, "jominey", "E", 1561421995, "jominey", "E", 1561422097, "jominey", "E", 1561422124, "jominey", "E", 1561422197, "jominey", "E", 1561422291, "jominey", "E", 1561422359, "jominey", "E", 1561422424, "jominey", "E", 1561422553, "jominey", "E", 1561422827, "jominey", "E", 1561422948, "jominey", "E", 1561423176, "jominey", "E", 1561423239, "jominey", "E", 1561423258, "jominey", "E", 1561423307, "jominey", "E", 1561423583, "jominey", "E", 1561423665, "jominey", "E", 1561423745, "jominey", "E", 1561423864, "jominey", "E", 1561425087, "jominey", "E", 1561425182, "jominey", "E", 1561425573, "jominey", "E", 1561425652, "jominey", "E", 1561425747, "jominey", "E", 1561425862, "jominey", "E", 1561426677, "jominey", "E", 1561426696, "jominey", "E", 1561426783, "jominey", "E", 1561510347, "jominey", "E", 1561510670, "jominey", "E", 1561510699, "jominey", "E", 1561511471, "jominey", "E", 1561512606, "jominey", "E", 1561513122, "jominey", "E", 1561513249, "jominey", "E", 1561514372, "jominey", "E", 1561514654, "jominey", "E", 1561682886, "jominey", "E", 1561683144, "jominey", "E", 1561683175, "jominey", "E", 1561683221, "jominey", "E", 1561683255, "jominey", "E", 1561685918, "jominey", "E", 1561819095, "jominey", "E", 1561843848, "jominey", "E", 1561843918, "jominey", "E", 1561846089, "jominey", "E", 1561846199, "jominey", "E", 1561846934, "jominey", "E", 1561846974, "jominey", "E", 1561846989, "jominey", "E", 1561847040, "jominey", "E", 1561847212, "jominey", "E", 1561847345, "jominey", "E", 1561847381, "jominey", "E", 1561847616, "jominey", "E", 1561847870, "jominey", "E", 1561848215, "jominey", "E", 1561848725, "jominey", "E", 1561848890, "jominey", "E", 1561849275, "jominey", "E", 1561849319, "jominey", "E", 1561849749, "jominey", "E", 1561852707, "jominey", "E", 1561852734, "jominey", "E", 1561852846, "jominey", "E", 1561852890, "jominey", "E", 1561853354, "jominey", "E", 1561853514, "jominey", "E", 1561853727, "jominey", "E", 1561853768, "jominey", "E", 1561853962, "jominey", "E", 1561854320, "jominey", "E", 1561854376, "jominey", "E", 1561854394, "jominey", "E", 1561854613, "jominey", "E", 1561854825, "jominey", "E", 1561856487, "jominey", "E", 1561858461, "jominey", "E", 1561858514, "jominey", "E", 1561858588, "jominey", "E", 1561858625, "jominey", "E", 1561858759, "jominey", "E", 1561858787, "jominey", "E", 1561858812, "jominey", "E", 1561859111, "jominey", "E", 1561859132, "jominey", "E", 1561859372, "jominey", "E", 1561859613, "jominey", "E", 1561859655, "jominey", "E", 1561859862, "jominey", "E", 1561859981, "jominey", "E", 1561865153, "jominey", "E", 1561870642, "jominey", "E", 1561871919, "jominey", "E", 1561871995, "jominey", "E", 1561872048, "jominey", "E", 1561872117, "jominey", "E", 1561949957, "jominey", "E", 1561950150, "jominey", "E", 1561950189, "jominey", "E", 1561950266, "jominey", "E", 1561950300, "jominey", "E", 1561950329, "jominey", "E", 1561950404, "jominey", "E", 1561950967, "jominey", "E", 1561951039, "jominey", "E", 1561951114, "jominey", "E", 1561951246, "jominey", "E", 1561951320, "jominey", "E", 1561951362, "jominey", "E", 1561951422, "jominey", "E", 1561951470, "jominey", "E", 1561951517, "jominey", "E", 1561951603, "jominey", "E", 1561951750, "jominey", "E", 1561951850, "jominey", "E", 1561951884, "jominey", "E", 1561951910, "jominey", "E", 1561951942, "jominey", "E", 1561951971, "jominey", "E", 1561952040, "jominey", "E", 1561952092, "jominey", "E", 1561952175, "jominey", "E", 1561952336, "jominey", "E", 1562013358, "jominey", "E", 1562013404, "jominey", "E", 1562013593, "jominey", "E", 1562014889, "jominey", "E", 1562015092, "jominey", "E", 1562015234, "jominey", "E", 1562015342, "jominey", "E", 1562015390, "jominey", "E", 1562015527, "jominey", "E", 1562100119, "jominey", "E", 1562100138, "jominey", "E", 1562100241, "jominey", "E", 1562100699, "jominey", "E", 1562115250, "jominey", "E", 1562115345, "jominey", "E", 1562115446, "jominey", "E", 1562115503, "jominey", "E", 1562115559, "jominey", "E", 1562115617, "jominey", "E", 1562115683, "jominey", "E", 1562115715, "jominey", "E", 1562115730, "jominey", "E", 1562193629, "jominey", "E", 1562195325, "jominey", "E", 1562195758, "jominey", "E", 1562195779, "jominey", "E", 1562196151, "jominey", "E", 1562196426, "jominey", "E", 1562196588, "jominey", "E", 1562198684, "jominey", "E", 1562198842, "jominey", "E", 1562199155, "jominey", "E", 1562199609, "jominey", "E", 1562199815, "jominey", "E", 1562202493, "jominey", "E", 1562202602, "jominey", "E", 1562203147, "jominey", "E", 1562203341, "jominey", "E", 1562203466, "jominey", "E", 1562203479, "jominey", "E", 1562204231, "jominey", "E", 1562204465, "jominey", "E", 1562204519, "jominey", "E", 1562204853, "jominey", "E", 1562204962, "jominey", "E", 1562205068, "jominey", "E", 1562205137, "jominey", "E", 1562205271, "jominey", "E", 1562205295, "jominey", "E", 1562205549, "jominey", "E", 1562205676, "jominey", "E", 1562205793, "jominey", "E", 1562205948, "jominey", "E", 1562205957, "jominey", "E", 1562206181, "jominey", "E", 1562206793, "jominey", "E", 1562206974, "jominey", "E", 1562207013, "jominey", "E", 1562211351, "jominey", "E", 1562211428, "jominey", "E", 1562211567, "jominey", "E", 1562211618, "jominey", "E", 1562211742, "jominey", "E", 1562211890, "jominey", "E", 1562212029, "jominey", "E", 1562212064, "jominey", "E", 1562212199, "jominey", "E", 1562212266, "jominey", "E", 1562212372, "jominey", "E", 1562258532, "jominey", "E", 1562259653, "jominey", "E", 1562259707, "jominey", "E", 1562260712, "jominey", "E", 1562260745, "jominey", "E", 1562263257, "jominey", "E", 1562269924, "jominey", "E", 1562270588, "jominey", "E", 1562270659, "jominey", "E", 1562293881, "jominey", "E", 1562294868, "jominey", "E", 1562295294, "jominey", "E", 1562295532, "jominey", "E", 1562295593, "jominey", "E", 1562296015, "jominey", "E", 1562296287, "jominey", "E", 1562296390, "jominey", "E", 1562296951, "jominey", "E", 1562297006, "jominey", "E", 1562297181, "jominey", "E", 1562297358, "jominey", "E", 1562297606, "jominey", "E", 1562297846, "jominey", "E", 1562298285, "jominey", "E", 1562298367, "jominey", "E", 1562298426, "jominey", "E", 1562298487, "jominey", "E", 1562298574, "jominey", "E", 1562298643, "jominey", "E", 1562298734, "jominey", "E", 1562298893, "jominey", "E", 1562298932, "jominey", "E", 1562299083, "jominey", "E", 1562299286, "jominey", "E", 1562299351, "jominey", "E", 1562299410, "jominey", "E", 1562299458, "jominey", "E", 1562299494, "jominey", "E", 1562299532, "jominey", "E", 1562299566, "jominey", "E", 1562299586, "jominey", "E", 1562299627, "jominey", "E", 1562299698, "jominey", "E", 1562299737, "jominey", "E", 1562299765, "jominey", "E", 1562300346, "jominey", "E", 1562300659, "jominey", "E", 1562300717, "jominey", "E", 1562360475, "jominey", "E", 1562360486, "jominey", "E", 1562360513, "jominey", "E", 1562360568, "jominey", "E", 1562514640, "jominey", "E", 1562514722, "jominey", "E", 1562783523, "jominey", "E", 1562783563, "jominey", "E", 1562783666, "jominey", "E", 1562784799, "jominey", "E", 1562784843, "jominey", "E", 1562785392, "jominey", "E", 1562798999, "jominey", "E", 1562799047, "jominey", "E", 1562799178, "jominey", "E", 1562799188, "jominey", "E", 1562799293, "jominey", "E", 1562799366, "jominey", "E", 1563549709, "jominey", "E", 1563990403, "jominey", "E", 1564000178, "jominey", "E", 1564000582, "jominey", "E", 1564000602, "jominey", "E", 1564000680, "jominey", "E", 1564000741, "jominey", "E", 1564000810, "jominey", "E", 1564000846, "jominey", "E", 1564000898, "jominey", "E", 1564001008, "jominey", "E", 1564001184, "jominey", "E", 1564001229, "jominey", "E", 1565191127, "jominey", "E", 1565217284, "jominey", "E", 1565217355, "jominey", "E", 1565217417, "jominey", "E", 1565217457, "jominey", "E", 1565217502, "jominey", "E", 1565217682, "jominey", "E", 1565217714, "jominey", "E", 1565218099, "jominey", "E", 1565218395, "jominey", "E", 1565218758, "jominey", "E", 1565218827, "jominey", "E", 1565219089, "jominey", "E", 1565219475, "jominey", "E", 1565219521, "jominey", "E", 1565220566, "jominey", "E", 1565220631, "jominey", "E", 1565220825, "jominey", "E", 1565237878, "jominey", "E", 1566076759, "jominey", "E", 1566076910, "jominey", "E", 1566076957, "jominey", "E", 1566077000, "jominey", "E", 1566077948, "jominey", "E", 1566077970, "jominey", "E", 1566077999, "jominey", "E", 1566078036, "jominey", "E", 1566078108, "jominey", "E", 1566078132, "jominey", "E", 1566078227, "jominey", "E", 1566078260, "jominey", "E", 1566078296, "jominey", "E", 1566078385, "jominey", "E", 1566078429, "jominey", "E", 1566078545, "jominey", "E", 1566267914, "jominey", "E", 1566268013, "jominey", "E", 1566268061, "jominey", "E", 1566268110, "jominey", "E", 1566268496, "jominey", "E", 1566268551, "jominey", "E", 1566268720, "jominey", "E", 1566268831, "jominey", "E", 1566271415, "jominey", "E", 1566271689, "jominey", "E", 1566271886, "jominey", "E", 1566272018, "jominey", "E", 1566272143, "jominey", "E", 1566272179, "jominey", "E", 1566272203, "jominey", "E", 1566272233, "jominey", "E", 1566272272, "jominey", "E", 1566570069, "jominey", "E", 1571326585, "jominey", "E", 1571326943, "jominey", "E", 1571327116, "jominey", "E", 1571327200, "jominey", "E", 1571327500, "jominey", "E", 1571327542, "jominey", "E", 1571327649, "jominey", "E", 1571328178, "jominey", "E", 1571328347, "jominey", "E", 1571328469, "jominey", "E", 1571328567, "jominey", "E", 1571328769, "jominey", "E", 1571328886, "jominey", "E", 1571329070, "jominey", "E", 1571329256, "jominey", "E", 1571329304, "jominey", "E", 1571330026, "jominey", "E", 1571330205, "jominey", "E", 1571330266, "jominey", "E", 1571330538, "jominey", "E", 1571331354, "jominey", "E", 1571331523, "jominey", "E", 1571332186, "jominey", "E", 1571332538, "jominey", "E", 1571332618, "jominey", "E", 1571332667, "jominey", "E", 1571332779, "jominey", "E", 1571333508, "jominey", "E", 1571333789, "jominey", "E", 1571333819, "jominey", "E", 1571333894, "jominey", "E", 1571334012, "jominey", "E", 1571334227, "jominey", "E", 1571334773, "jominey", "E", 1571336622, "jominey", "E", 1571336843, "jominey", "E", 1571337006, "jominey", "E", 1571337042, "jominey", "E", 1571337577, "jominey", "E", 1571337703, "jominey", "E", 1571337919, "jominey", "E", 1571339399, "jominey", "E", 1571341380, "jominey", "E", 1571350047, "jominey", "E", 1571350086, "jominey", "E", 1571350277, "jominey", "E", 1571369178, "jominey", "E", 1571369247, "jominey", "E", 1571369294, "jominey", "E", 1571369491, "jominey", "E", 1571369805, "jominey", "E", 1571369847, "jominey", "E", 1571370160, "jominey", "E", 1571371522, "jominey", "E", 1571371957, "jominey", "E", 1571372131, "jominey", "E", 1571372174, "jominey", "E", 1571528822, "jominey", "E", 1571528855, "jominey", "E", 1571528895, "jominey", "E", 1571529667, "jominey", "E", 1571530725, "jominey", "E", 1571531661, "jominey", "E", 1571881840, "jominey", "E", 1571882101, "jominey", "E", 1571882565, "jominey", "E", 1571882584, "jominey", "E", 1571883140, "jominey", "E", 1571886869, "jominey", "E", 1571886911, "jominey", "E", 1571887170, "jominey", "E", 1572057903, "jominey", "E", 1572058404, "jominey", "E", 1572058727, "jominey", "E", 1572397012, "jominey", "E", 1572397126, "jominey", "E", 1572397253, "jominey", "E", 1572397385, "jominey", "E", 1572397425, "jominey", "E", 1572397481, "jominey", "E", 1572405588, "jominey", "E", 1572405714, "jominey", "E", 1572407049, "jominey", "E", 1572745174, "jominey", "E", 1572745329, "jominey", "E", 1572750509, "jominey", "E", 1572750551, "jominey", "E", 1572750844, "jominey", "E", 1572750901, "jominey", "E", 1572751191, "jominey", "E", 1572833630, "jominey", "E", 1572976433, "jominey", "E", 1573273706, "jominey", "E", 1573273759, "jominey", "E", 1573516660, "jominey", "E", 1573516890, "jominey", "E", 1573583021, "jominey", "E", 1573583044, "jominey", "E", 1573583218, "jominey", "E", 1574354446, "jominey", "E", 1574354514, "jominey", "E", 1574354555, "jominey", "E", 1574354621, "jominey", "E", 1574354685, "jominey", "E", 1574354713, "jominey", "E", 1574354816, "jominey", "E", 1574354877, "jominey", "E", 1574354987, "jominey", "E", 1574355195, "jominey", "E", 1574355272, "jominey", "E", 1574375020, "jominey", "E", 1574375055, "jominey", "E", 1574375111, "jominey", "E", 1574375137, "jominey", "E", 1574375338, "jominey", "E", 1574375450, "jominey", "E", 1574442445, "jominey", "E", 1574454769, "jominey", "E", 1574454828, "jominey", "E", 1574789702, "jominey", "E", 1574789727, "jominey", "E", 1574789770, "jominey", "E", 1574789824, "jominey", "E", 1574789896, "jominey", "E", 1574789921, "jominey", "E", 1575417497, "jominey", "E", 1575419082, "jominey", "E", 1575419218, "jominey", "E", 1576531695, "jominey", "E", 1576531715, "jominey", "E", 1576531763, "jominey", "E", 1576531795, "jominey", "E", 1576531808, "jominey", "E", 1576531847, "jominey", "E", 1576531901, "jominey", "E", 1576532051, "jominey", "E", 1576532084, "jominey", "E", 1576603857, "jominey", "E", 1576603942, "jominey", "E", 1576603977, "jominey", "E", 1576604104, "jominey", "E", 1576818032, "jominey", "E", 1577050650, "jominey", "E", 1577051391, "jominey", "E", 1578319681, "jominey", "E", 1579112166, "jominey", "E", 1579315265, "jominey", "E", 1579315290, "jominey", "E", 1579483725, "jominey", "E", 1579713123, "jominey", "E", 1579713176, "jominey", "E", 1579718445, "jominey", "E", 1579905487, "jominey", "E", 1579905545, "jominey", "E", 1583162451, "jominey", "E", 1583162539, "jominey", "E", 1583163018, "jominey", "E", 1585236148, "jominey", "E", 1585236233, "jominey", "E", 1585236357, "jominey", "E", 1585237791, "jominey", "E", 1585238209, "jominey", "E", 1585238346, "jominey", "E", 1585238444, "jominey", "E", 1585238664, "jominey", "E", 1585238737, "jominey", "E", 1585238782, "jominey", "E", 1585238845, "jominey", "E", 1585238882, "jominey", "E", 1585239034, "jominey", "E", 1585239136, "jominey", "E", 1585239289, "jominey", "E", 1585246278, "jominey", "E", 1585246298, "jominey", "E", 1585257601, "jominey", "E", 1585361308, "jominey", "E", 1585361354, "jominey", "E", 1586358333, "jominey", "E", 1586359331, "jominey", "E", 1586359376, "jominey", "E", 1586707943, "jominey", "E", 1586707993, "jominey", "E", 1586708059, "jominey", "E", 1586708269, "jominey", "E", 1586708397, "jominey", "E", 1586708429, "jominey", "E", 1586708469, "jominey", "E", 1587649869, "jominey", "E", 1587649908, "jominey", "E", 1587650265, "jominey", "E", 1587652978, "jominey", "E", 1587659839, "jominey", "E", 1587659886, "jominey", "E", 1587659909, "jominey", "E", 1587659948, "jominey", "E", 1587682149, "jominey", "E", 1587682285, "jominey", "E", 1588173485, "jominey", "E", 1588173971, "jominey", "E", 1588263102, "jominey", "E", 1588263190, "jominey", "E", 1588263231, "jominey", "E", 1588263395, "jominey", "E", 1588263399, "jominey", "E", 1588263413, "jominey", "E", 1588263503, "jominey", "E", 1588263557, "jominey", "E", 1588263612, "jominey", "E", 1588263642, "jominey", "E", 1588263737, "jominey", "E", 1588263755, "jominey", "E", 1588263813, "jominey", "E", 1588263857, "jominey", "E", 1588264510, "jominey", "E", 1588264842, "jominey", "E", 1588264864, "jominey", "E", 1588264949, "jominey", "E", 1588468704, "jominey", "E", 1589923647, "jominey", "E", 1589923666, "jominey", "E", 1589923760, "jominey", "E", 1591234759, "jominey", "E", 1591234957, "jominey", "E", 1591235140, "jominey", "E", 1592540013, "jominey", "E", 1593443175, "jominey", "E", 1593443351, "jominey", "E", 1593443571, "jominey", "E", 1593443582, "jominey", "E", 1593453314, "jominey", "E", 1593453351, "jominey", "E", 1593453387, "jominey", "E", 1593453420, "jominey", "E", 1593453466, "jominey", "E", 1593453496, "jominey", "E", 1593453520, "jominey", "E", 1593453571, "jominey", "E", 1593653867, "jominey", "E", 1593790911, "jominey", "E", 1593901810, "jominey", "E", 1593901851, "jominey", "E", 1593901877, "jominey", "E", 1593901907, "jominey", "E", 1593902116, "jominey", "E", 1594691647, "jominey", "E", 1594691665, "jominey", "E", 1594789160, "jominey", "E", 1594789176, "jominey", "E", 1594844319, "jominey", "E", 1594844392, "jominey", "E", 1595461017, "jominey", "E", 1595461083, "jominey", "E", 1595461106, "jominey", "E", 1595461148, "jominey", "E", 1595461737, "jominey", "E", 1595462277, "jominey", "E", 1595462328, "jominey", "E", 1595462399, "jominey", "E", 1595462890, "jominey", "E", 1595463016, "jominey", "E", 1595463075, "jominey", "E", 1595463154, "jominey", "E", 1597075893, "jominey", "E", 1597095392, "jominey", "E", 1597095406, "jominey", "E", 1597095432, "jominey", "E", 1597095465, "jominey", "E", 1597095496, "jominey", "E", 1597095635, "jominey", "E", 1597095664, "jominey", "E", 1597095684, "jominey", "E", 1597095842, "jominey", "E", 1597095874, "jominey", "E", 1597095908, "jominey", "E", 1597096342, "jominey", "E", 1597096448, "jominey", "E", 1597100852, "jominey", "E", 1597101169, "jominey", "E", 1597101291, "jominey", "E", 1597101327, "jominey", "E", 1597101484, "jominey", "E", 1597102128, "jominey", "E", 1597102454, "jominey", "E", 1597102540, "jominey", "E", 1597102622, "jominey", "E", 1598133883, "jominey", "E", 1598208302, "jominey", "E", 1598482682, "jominey", "E", 1598482728, "jominey", "E", 1598482737, "jominey", "E", 1599661932, "jominey", "E", 1599828560, "jominey", "E", 1601837197, "jominey", "E", 1601837457, "jominey", "E", 1603053889, "jominey", "E", 1603053937, "jominey", "E" \})
      </Core:Property>
      <Core:Property property="roomconversion:merry:react:shake-dob">
         X[M] \$roo = \$\{Chatters:AE:ro:roo\};

\$folder = "Chatters:IC";
EmitTo(\$roo, "Character update started");
\$this.charupdating = 1;
\$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");
for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{
  \$folder = "Chatters:IC:"+\$folders[\$i];
  \$characters = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
  for(\$j=0;\$j\<sizeof(\$characters);\$j++) \{
    \$char = Obj("Chatters:IC:"+\$folders[\$i]+":"+\$characters[\$j]);
    /* CODE GOES HERE */

    if(\$char."virtualhome:avoirdupois:member") \{
        \$char."virtualhome:avoirdupois:member" = nil;
    \}

    if(\$char."virtualhome:avoirdupois:noble") \{
        \$char."virtualhome:avoirdupois:noble" = nil;
    \}

    if(\$char."virtualhome:avoirdupois:noblebed") \{
        \$char."virtualhome:avoirdupois:noblebed" = nil;
    \}

    \$delay(0.002, TRUE, "8ea5");
  \}
\}
EmitTo(\$roo, "Character update done");
\$this.charupdating = nil;
return TRUE;
      </Core:Property>
      <Core:Property property="rooms:merry:react:shake-dob">
         X[M] Set(\$\{Chatters:AE:hi:hilarion\}, "crafting:patterns", Get(\$\{Chatters:AE:ro:roo\}, "crafting:patterns"));

return TRUE;
\$roo = \$\{Chatters:AE:ro:roo\};

\$folder = "Chatters:IC";
EmitTo(\$roo, "Character update started");
\$this.charupdating = 1;
\$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");
for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{
  \$folder = "Chatters:IC:"+\$folders[\$i];
  \$characters = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
  for(\$j=0;\$j\<sizeof(\$characters);\$j++) \{
    \$char = Obj("Chatters:IC:"+\$folders[\$i]+":"+\$characters[\$j]);
    /* CODE GOES HERE */

    if(\$char."virtualhome:bisclavret:noblesitting:cost") \{
        \$char."virtualhome:bisclavret:noblesitting:cost" = nil;
    \}
    if(\$char."virtualhome:bisclavret:member:cost") \{
        \$char."virtualhome:bisclavret:member:cost" = nil;
    \}

    if(\$char."virtualhome:bisclavret:member") \{
        \$char."virtualhome:scotland:member" = \$char."virtualhome:bisclavret:member";
    \}

    if(\$char."virtualhome:bisclavret:noblesitting") \{
        \$char."virtualhome:scotland:noble" = \$char."virtualhome:bisclavret:noblesitting";
    \}

    if(\$char."virtualhome:bisclavret:noblebed") \{
        \$char."virtualhome:scotland:noblebed" = \$char."virtualhome:bisclavret:noblebed";
    \}

    if(\$char."virtualhome:bisclavret:member") \{
        \$char."virtualhome:bisclavret:member" = nil;
    \}

    if(\$char."virtualhome:bisclavret:noblesitting") \{
        \$char."virtualhome:bisclavret:noblesitting" = nil;
    \}

    if(\$char."virtualhome:bisclavret:noblebed") \{
        \$char."virtualhome:bisclavret:noblebed" = nil;
    \}
    \$delay(0.002, TRUE, "8ea5");
  \}
\}
EmitTo(\$roo, "Character update done");
\$this.charupdating = nil;
return TRUE;
      </Core:Property>
      <Core:Property property="roomstoslay">
         (\{ \<[Allegory:Setting:Rinascita:Buildings:Southeast:Bank:Virtual:Vault]#3745\>, \<[Allegory:Setting:Rinascita:Buildings:Southeast:Bank:Virtual:Vault]#3964\>, \<[Allegory:Setting:Rinascita:Buildings:Southeast:Bank:Virtual:Vault]#7812\>, \<[Allegory:Setting:Rinascita:Buildings:Southeast:Bank:Virtual:Vault]#20255\>, \<[Allegory:Setting:Rinascita:Buildings:Southeast:Bank:Virtual:Vault]#56512\>, \<[Allegory:Setting:Rinascita:Buildings:Southeast:Bank:Virtual:Vault]#71987\>, \<[Allegory:Setting:Rinascita:Buildings:Southeast:Bank:Virtual:Vault]#78558\>, \<[Allegory:Setting:Rinascita:Buildings:Southeast:Bank:Virtual:Vault]#85030\>, \<[Allegory:Setting:Rinascita:Buildings:Southeast:Bank:Virtual:Vault]#86938\>, \<[Allegory:Setting:Rinascita:Buildings:Southeast:Bank:Virtual:Vault]#88452\>, \<[Allegory:Setting:Rinascita:Buildings:Southeast:Bank:Virtual:Vault]#95176\>, \<[Allegory:Setting:Rinascita:Buildings:Southeast:Bank:Virtual:Vault]#95230\>, \<[Allegory:Setting:Rinascita:Buildings:Southeast:Bank:Virtual:Vault]#96105\>, \<[Allegory:Setting:Rinascita:Buildings:Southeast:Bank:Virtual:Vault]#96957\>, \<[Allegory:Setting:Rinascita:Buildings:Southeast:Bank:Virtual:Vault]#97093\>, \<[Allegory:Setting:Rinascita:Buildings:Southeast:Bank:Virtual:Vault]#101215\>, \<[Allegory:Setting:Rinascita:Buildings:Southeast:Bank:Virtual:Vault]#116562\>, \<[Allegory:Setting:Rinascita:Buildings:Southeast:Bank:Virtual:Vault]#127907\>, \<[Allegory:Setting:Rinascita:Buildings:Southeast:Bank:Virtual:Vault]#129134\>, \<[Allegory:Setting:Rinascita:Buildings:Southeast:Bank:Virtual:Vault]#129907\>, \<[Allegory:Setting:Rinascita:Buildings:Southeast:Bank:Virtual:Vault]#131577\>, \<[Allegory:Setting:Rinascita:Buildings:Southeast:Bank:Virtual:Vault]#159858\>, \<[Allegory:Setting:Rinascita:Buildings:Southeast:Bank:Virtual:Vault]#160767\>, \<[Allegory:Setting:Rinascita:Buildings:Southeast:Bank:Virtual:Vault]#180452\>, \<[Allegory:Setting:Rinascita:Buildings:Southeast:Bank:Virtual:Vault]#228690\>, \<[Allegory:Setting:Rinascita:Buildings:Southeast:Bank:Virtual:Vault]#230023\>, \<[Allegory:Setting:Rinascita:Buildings:Southeast:Bank:Virtual:Vault]#251458\>, \<[Allegory:Setting:Rinascita:Buildings:Southeast:Bank:Virtual:Vault]#262086\>, \<[Allegory:Setting:Rinascita:Buildings:Southeast:Bank:Virtual:Vault]#273995\>, \<[Allegory:Setting:Rinascita:Buildings:Southeast:GermanEstate:SecondFloor:Virtual:MemberRoom]#147892\>, \<[Allegory:Setting:Rinascita:Buildings:Southeast:GermanEstate:SecondFloor:Virtual:NobleSitting]#92342\>, \<[Allegory:Setting:Rinascita:Buildings:Southeast:GermanEstate:SecondFloor:Virtual:NobleSitting]#94717\>, \<[Allegory:Setting:Rinascita:Buildings:Southeast:GermanEstate:SecondFloor:Virtual:NobleBed]#4330\> \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="updatecraftingdbs:merry:react:shake-dob">
         X[M] if(\$this.charupdating) return FALSE;
\$roo = nil /* defunct */;
\$folder = "Chatters:IC";
EmitTo(\$roo, "Character update started");
\$this.charupdating = 1;
\$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");
for(\$x=0;\$x\<sizeof(\$folders);\$x++) \{
  \$folder = "Chatters:IC:"+\$folders[\$x];
  \$characters = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
  for(\$y=0;\$y\<sizeof(\$characters);\$y++) \{
    \$chatter = Obj("Chatters:IC:"+\$folders[\$x]+":"+\$characters[\$y]);

    if(\$chatter) \{
        if((time() - Int(\$chatter."cdat:lastlogin")) \<= (60*60*24*365*2)) \{
            EmitTo(\$roo, "Updating: " + Str(\$chatter));
            Call(\$this, "get-patterns", \$char: \$chatter);
        \}
    \}

    \$delay(0.02, FALSE, "e991");
  \}
\}

\$this.charupdating = nil;
    /* EmitTo(\$\{Chatters:IC:ro:roo\}, dump_value(\$map)); */
    EmitTo(nil /* defunct */, "Done"); 

return TRUE;

Call(\$\{Ironclaw:Lib:ConsignmentSystem\}, "generate_orders");

return TRUE;

\$roo = nil /* defunct */;

\$folder = "Chatters:IC";
EmitTo(\$roo, "Character update started");
\$this.charupdating = 1;
\$folders = Call(\$\{/usr/System/sys/idd\}, "idd:get-folders");
for(\$i=0;\$i\<sizeof(\$folders);\$i++) \{
  \$folder = "Chatters:IC:"+\$folders[\$i];
  \$characters = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects");
  for(\$j=0;\$j\<sizeof(\$characters);\$j++) \{
    \$chatter = Obj("Chatters:IC:"+\$folders[\$i]+":"+\$characters[\$j]);
    /* CODE GOES HERE */

  if(\$chatter) \{
       if(\$chatter."trait:agility") \{
           \$agility = \$chatter."trait:agility";
           Set(\$chatter, "trait:will", \$agility);
           Set(\$chatter, "trait:agility", nil);
       \}
  \}

    \$delay(0.002, TRUE, "8ea5");
  \}
\}
EmitTo(\$roo, "Character update done");
\$this.charupdating = nil;
return TRUE;

\$delay(1, TRUE, "350f");
if(Call(\$\{Ironclaw:Lib:Characters:RankScripts\}, "ip_check")) \{
    EmitIn(\$actor."base:environment", TAG(Str(\$names[0]) + " and " + Str(\$names[1]) + " have the same ip address.", "imp"));
\} else \{
    EmitIn(\$actor."base:environment", TAG(Str(\$names[0]) + " and " + Str(\$names[1]) + " have different ip addresses.", "imp"));
\}

return TRUE;

\$tradingLists = (\{ \$\{Allegory:NPCs:NIPs:TradingLists:Northeast:Carpenter:LumberBasic\}, \$\{Allegory:NPCs:NIPs:TradingLists:Northeast:Stonemason:Mason\}, \$\{Allegory:NPCs:NIPs:TradingLists:Northeast:Smithy:Blacksmith\}, \$\{Ironclaw:NPCs:Traders:TradingLists:ClothMerchant\}, \$\{Allegory:NPCs:NIPs:TradingLists:Northeast:Tailors:FabricBasic\} \});

\$craftingLists = (\{ \$\{Ironclaw:Lib:Crafting:Wood:Backups:LumberDB\}, \$\{Ironclaw:Lib:Crafting:Stone:Backup:StoneDB\}, \$\{Allegory:Lib:Crafting:Blacksmith:MetalRodDB\}, \$\{Ironclaw:Lib:Crafting:Clothing:Old:TailorDB\}, \$\{Ironclaw:Lib:Crafting:Clothing:Old:SeamstressDB\}, \$\{Ironclaw:Lib:Crafting:Clothing:Old:NeedleworkerDB\} \});

\$cost = 1;
\$value = 10;
\$quantity = 10;

if(!\$iob) return TRUE;
if(!sizeof(\$iob)) return TRUE;

\$item = NRefOb(\$iob[0]);
\$type = \$item."trait:objecttype";

EmitTo(\$actor, dump_value(\$type));

/* Does the item exist on one of the crafting lists? */
\$found = 0;
for(\$i = 0; \$i \< sizeof(\$craftingLists) \&\& !\$found; \$i++) \{
    \$db = copy(\$craftingLists[\$i]."*");
    \$temp = map_indices(\$db);
    for(\$j = 0; \$j \< sizeof(\$temp); \$j++) \{
        if(typeof(\$db[\$temp[\$j]]) == 6) \{
            \$temp2 = \$db[\$temp[\$j]];
            if(\$temp2[\$type]) \{
                \$cost = Int(\$temp2[\$type]["cost"][0]);
                \$found = 1;
            \}
        \}
    \}
\}

if(!\$item."trait:material") \{
    EmitTo(\$actor, "trait:material not defined");
    return FALSE;
\}

\$material = \$item."trait:material";

\$found = 0;
for(\$i = 0; \$i \< sizeof(\$tradingLists) \&\& !\$found; \$i++) \{
    \$list = copy(\$tradingLists[\$i]."*");
    \$temp = map_indices(\$list);
    for(\$j = 0; \$j \< sizeof(\$temp); \$j++) \{
        \$temp2 = \$list[\$temp[\$j]];
        if(typeof(\$temp2) == 6) \{
            if(\$temp2["object"]) \{
                \$ob = \$temp2["object"];
                if(\$ob."trait:material" == \$material) \{
                    \$quantity = Int(\$ob."trait:quantity");
                    \$value = Int(\$ob."nip:item:cost");
                    \$found = 1;
                \}
            \}
        \}
    \}
\}

\$costToMake = (\$value/\$quantity)*\$cost;

EmitTo(\$actor, dump_value(Flt(Flt(\$costToMake)/100.0)));

return FALSE;
      </Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
