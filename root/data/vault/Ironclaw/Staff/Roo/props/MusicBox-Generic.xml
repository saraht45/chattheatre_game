<object clone="/base/obj/thing" owner="jominey">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0.3" maxweight="2" verb2="contain" verb3="contains"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="sitting" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="false" under="false" on="false" inside="true" near="true" over="true" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="box"/>
            <Base:SName sname="musicbox"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="musicboxes"/>
            <Base:PName pname="boxes"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="battered"/>
          <Base:Adjective adjective="heavy"/>
          <Base:Adjective adjective="maple"/>
          <Base:Adjective adjective="music"/>
          <Base:Adjective adjective="small"/>
          <Base:Adjective adjective="wooden"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             music box
          </Base:Description>
          <Base:Description type="examine">
             A music box for which to play music.
          </Base:Description>
          <Base:Description type="look">
             A music box.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="true" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" keycode="musicbox:key" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="hole" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="keyhole"/>
            <Base:SName sname="hole"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="keyholes"/>
            <Base:PName pname="holes"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="battered"/>
          <Base:Adjective adjective="box"/>
          <Base:Adjective adjective="key"/>
          <Base:Adjective adjective="maple"/>
          <Base:Adjective adjective="music"/>
          <Base:Adjective adjective="small"/>
          <Base:Adjective adjective="wooden"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             music box's small keyhole
          </Base:Description>
          <Base:Description type="look">
             A small keyhole has been cut into the front panel of this battered wooden music box. It has been outlined with a thin strip of brass. $[if($this."trait:haskey") { "It holds a heart-shaped key."; } else { "A key has yet to be inserted."; }]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="key" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="key"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="keys"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="brass"/>
          <Base:Adjective adjective="heart"/>
          <Base:Adjective adjective="heart-shaped"/>
          <Base:Adjective adjective="inserted"/>
          <Base:Adjective adjective="shaped"/>
          <Base:Adjective adjective="small"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             small brass key inserted into the front panel of a music box
          </Base:Description>
          <Base:Description type="examine">
             The heart-shaped handle of a small brass key protrudes from the front panel of a battered wooden music box. [OOC: To tune the music box to play music you must <acmd tag="command" cmd="turn my musicbox' key">turn the key on the box</acmd>. ]
          </Base:Description>
          <Base:Description type="look">
             The heart-shaped handle of a small brass key protrudes from the front panel of a battered wooden music box.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="lid" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="lid"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="lids"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="battered"/>
          <Base:Adjective adjective="box"/>
          <Base:Adjective adjective="deep"/>
          <Base:Adjective adjective="hinged"/>
          <Base:Adjective adjective="maple"/>
          <Base:Adjective adjective="music"/>
          <Base:Adjective adjective="small"/>
          <Base:Adjective adjective="wooden"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             music box's hinged lid
          </Base:Description>
          <Base:Description type="examine">A lid.</Base:Description>
          <Base:Description type="look">A lid.</Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents>
      <Base:ContentGroup group="music key">
        <Base:ContentItem ix="key" item="OBJ(Ironclaw:Staff:Roo:props:MusicBoxKey)" wear="false"/>
      </Base:ContentGroup>
    </Base:InitialContents>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="merry:act:start">
         X[M] \$this."details:key:hidden" = TRUE;
\$this."details:default:exit:locked" = TRUE;
\$this."details:default:exit:closed" = TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:music">
         X[M] \$env = \$this."base:environment";

if(\$env."udat:possessed" \&\& \$env."base:environment") \{
    \$env = \$env."base:environment";
\}

\$id = \$this."trait:musicid";

\$delay(2, FALSE, "37d3");

\$emits = (\{ "A long, aching melody fills the room in muted, haunting tones.", "A creepified version of the waltz flows thickly from within the music box.", "A brazen beat jauntily skips through the room with a recorded voice singing about refined lycanthropes.", "A delicate tune reeking of romance cuts through the air beckoning you to dance.", "A fast tempo fills the background, encouraging you to get up and get jigging.", "A sweet melody filters through the area boasting moments of harmonic romance and quiet, reflective pauses. It plays on-and-on as a lengthy filler betwixt the other selections." \});

for(\$i = 0; \$i \< sizeof(\$emits); \$i++) \{
    if(\$this."details:default:exit:closed") \{
        \$this."trait:isplaying" = nil;
        return FALSE;
    \} else if(\$id != \$this."trait:musicid") \{
        return FALSE;
    \} else \{
        EmitIn(\$env, \$emits[\$i]);
        \$delay(90, FALSE, "a05f");
    \}
\}

\$this."trait:isplaying" = nil;
      </Core:Property>
      <Core:Property property="merry:react-post:close-what">
         X[M] if(\$this."trait:isplaying") \{
  \$this."trait:isplaying" = nil;
\}

if(!\$this."trait:haskey") \{
  \$this."details:default:exit:locked" = TRUE;
\}
      </Core:Property>
      <Core:Property property="merry:react-post:open-what">
         X[M] if(NRefDetail(\$target) != "default") \{
    return TRUE;
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:insert-iob">
         X[M] \$box = \$this;
\$env = \$actor."base:environment";

if(!\$dob) \{ 
    EmitTo(\$actor, "What did you want to insert into the music box?");
    return FALSE;
\}

if(!sizeof(\$dob)) \{ 
    EmitTo(\$actor, "What did you want to insert into the music box?");
    return FALSE;
\}


\$key = NRefOb(\$dob[0])."trait:key";

if(\$this."trait:haskey" == 1) \{
  EmitTo(\$actor, "The small wooden music box already possesses a key.");
  return FALSE;
\}

if(\$key == "musicbox:jominey") \{
  EmitTo(\$actor, "You insert " + Describe(NRefOb(\$dob[0]), nil, \$actor) + " into " + Describe(\$this, nil, \$actor) + ".");
  EmitIn(\$actor."base:environment", Describe(\$actor) + " inserts " + Describe(NRefOb(\$dob[0]), \$actor) + " into " + Describe(\$this, \$actor) + ".", \$actor);
  \$this."details:default:exit:locked" = FALSE;
  \$this."details:key:hidden" = FALSE;
  \$this."trait:haskey" = 1;
  Slay(NRefOb(\$dob[0]));
  return FALSE;
\} else \{
  EmitTo(\$actor, "You can not insert " +Describe(\$key)+ " into the small key hole of this music box.");
  return FALSE;
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:retrieve-what">
         X[M] \$env = \$actor."base:environment";
\$key = NRefDetail(\$target);

if(\$key == "key")\{
  \$this."details:key:hidden" = TRUE;
  \$this."trait:haskey" = nil;
  \$new = \$\{Ironclaw:Staff:Roo:props:MusicBoxKey\};
  \$newkey = Spawn(\$new);
  \$newkey."base:environment" = \$actor;
  if(\$this."details:default:exit:closed" == TRUE) \{
    \$this."details:default:exit:locked" = TRUE;
  \}
  return TRUE;
\} else \{
  EmitTo(\$actor, "The music box does not possess a key.");
  return FALSE;
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:turn-dob">
         X[M] \$key = NRefDetail(\$target);
\$haskey = \$this."trait:haskey";
\$env = \$actor."base:environment";

if(!\$haskey)\{
  EmitTo(\$actor, "You have to insert the music box key before you can wind it up to play music.");
  return FALSE;
\}

if(\$key == "key")\{
  if(!\$this."trait:isplaying") \{
      \$this."trait:isplaying" = 1;
      \$this."trait:musicid" = time();
      if(\$this."details:default:exit:closed" == TRUE) \{
        EmitTo(\$actor, "You encounter some resistance as you attempt to turn the key. Perhaps you should open the music box first.");
        return FALSE;
      \} else \{
        Call(\$this, "music");
        return TRUE;
      \}
  \} else \{
      EmitTo(\$actor, "The music box is already playing.");
      return FALSE;
  \}
\} else \{
  EmitTo(\$actor, "You need to turn the key in order to tune the music box.");
  return FALSE;
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:unlock-what">
         X[M] \$box = \$this;
\$env = \$actor."base:environment";

if(!\$using) \{ 
    EmitTo(\$actor, "What did you want to unlock the music box with?");
    return FALSE;
\}

if(!sizeof(\$using)) \{ 
    EmitTo(\$actor, "What did you want to unlock the music box with?");
    return FALSE;
\}
\$key = NRefOb(\$using[0])."trait:key";

if(\$this."trait:haskey" == 1) \{
  EmitTo(\$actor, "The small wooden music box already possesses a key.");
  return FALSE;
\}

if(\$key == "musicbox:jominey") \{
  EmitTo(\$actor, "You insert " + Describe(NRefOb(\$using[0]), nil, \$actor) + " into " + Describe(\$this, nil, \$actor) + ".");
  EmitIn(\$actor."base:environment", Describe(\$actor) + " inserts " + Describe(NRefOb(\$using[0]), \$actor) + " into " + Describe(\$this, \$actor) + ".", \$actor);
  \$this."details:default:exit:locked" = FALSE;
  \$this."details:key:hidden" = FALSE;
  \$this."trait:haskey" = 1;
  Slay(NRefOb(\$using[0]));
  return FALSE;
\} else \{
  EmitTo(\$actor, "You can not insert " +Describe(\$key)+ " into the small key hole of this music box.");
  return FALSE;
\}
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1265927479, "jominey", "E", 1265927582, "jominey", "E", 1265927865, "jominey", "E", 1265927945, "jominey", "E", 1265927988, "jominey", "E", 1265928087, "jominey", "E", 1265928196, "jominey", "E", 1265928222, "jominey", "E", 1265928381, "jominey", "E", 1265928399, "jominey", "E", 1265928455, "jominey", "E", 1265928491, "jominey", "E", 1265928532, "jominey", "E", 1265928617, "jominey", "E", 1265928645, "jominey", "E", 1265928720, "jominey", "E", 1265928858, "jominey", "E", 1265929055, "jominey", "E", 1265929113, "jominey", "E", 1265929127, "jominey", "E", 1265929159, "jominey", "E", 1265929178, "jominey", "E", 1265929191, "jominey", "E", 1265929267, "jominey", "E", 1265929395, "jominey", "E", 1265929456, "jominey", "E", 1265929491, "jominey", "E", 1265929515, "jominey", "E", 1265929610, "jominey", "E", 1265929705, "jominey", "K", 1265929768, "jominey", "E", 1265929922, "jominey", "E", 1265930195, "jominey", "E", 1265930218, "jominey", "E", 1265930272, "jominey", "E", 1265930408, "jominey", "E", 1265930458, "jominey", "E", 1265930989, "jominey", "E", 1265938646, "jominey", "K", 1265994565, "jominey", "K", 1266047179, "jominey", "K", 1266209202, "jominey", "E", 1266209279, "jominey", "E", 1266210339, "jominey", "E", 1266218928, "jominey", "E", 1266254475, "jominey", "K", 1266259758, "jominey", "K", 1266259764, "jominey", "E", 1266259798, "jominey", "K", 1266259828, "jominey", "K", 1266262756, "jominey", "K", 1266263822, "jominey", "K", 1266264290, "jominey", "K", 1266264661, "jominey", "K", 1266264766, "jominey", "E", 1266264807, "jominey", "E", 1266264961, "jominey", "E", 1266264994, "jominey", "E", 1266265058, "jominey", "E", 1266265088, "jominey", "E", 1266265284, "jominey", "E", 1266265364, "jominey", "E", 1266265459, "jominey", "E", 1266265484, "jominey", "E", 1266265655, "jominey", "E", 1266265698, "jominey", "E", 1266265724, "jominey", "E", 1266265771, "jominey", "E", 1266265793, "jominey", "E", 1266265922, "jominey", "E", 1266266104, "jominey", "E", 1266266212, "jominey", "E", 1266266250, "jominey", "E", 1266266272, "jominey", "E", 1266266325, "jominey", "E", 1266266348, "jominey", "E", 1266266445, "jominey", "E", 1266266481, "jominey", "E", 1266266595, "jominey", "E", 1266266610, "jominey", "E", 1266266641, "jominey", "E", 1266266744, "jominey", "E", 1266266804, "jominey", "E", 1266266840, "jominey", "E", 1266266972, "jominey", "E", 1266267005, "jominey", "E", 1266267290, "jominey", "E", 1266267323, "jominey", "E", 1266267492, "jominey", "E", 1266267509, "jominey", "E", 1266267701, "jominey", "E", 1268605293, "jominey", "E", 1271452832, "slurpeeslurp", "E", 1414560016, "jominey", "E", 1414560018, "jominey", "E", 1414560038, "jominey", "E", 1414560114, "jominey", "E", 1414560146, "jominey", "E", 1414560296, "jominey", "E", 1414560391, "jominey", "K", 1414560630, "jominey", "E", 1414588741, "slurpeeslurp", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="trait:smells:lastchecked">
         1214014483
      </Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
