<object clone="/base/obj/thing" owner="rastalabor">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="0.11" density="0.11"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="tester"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">Tester</Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="merry:lib:finder">
         X[M] object env, owner, prevEnv;                        
string woename, where;                        
int done;                        
                        
done= 0;                        
env= Get(\$what, "base:environment");                        
while (!done) \{                        
  if (env == nil) \{                        
     if (prevEnv) \{                        
        if (typeof(Get(prevEnv, "homeowner")) != T_OBJECT) \{                        
          owner = nil;                        
        \} else \{                        
          owner= Get(prevEnv, "homeowner");                        
        \}                        
     \} else \{                        
        owner= nil;                        
     \}                        
     if (owner == prevEnv) \{                        
        env= owner;                        
     \} else \{                        
        env= prevEnv;                        
     \}                        
     done= 1;                        
  \} else if (Get(env, "volition")) \{                        
     done= 1;                        
     break;                        
  \} else \{                        
    prevEnv= env;                        
    env= Get(env, "base:environment");                        
  \}                        
\}                        
                        
if (env) \{                        
   where= Get(env, "base:objectname");                        
\} else \{                        
   where= "Not really sure";                        
\}                        
                        
if( !\$retval ) \{                        
  if(\$what."alteration:add:default:lock") \{                        
     \$what."export:alteration:add:default:lock" = ([ "adj-prop":(\{ "trait:material", "trait:size", "trait:color", "trait:brief" \}), "names":(\{ (\{ "sname", "lock" \}), (\{ "pname", "locks" \}) \}), "properties":(\{ (\{ "trait:material", "trait:lock:material" \}), (\{ "trait:size", "trait:lock:size" \}), (\{ "trait:color", "trait:lock:color" \}), (\{ "trait:brief", "trait:lock:brief" \}), (\{ "trait:examine", "trait:lock:examine" \}), (\{ "trait:quality", "trait:lock:quality" \}), (\{ "trait:lockpicking", "trait:lockpicking" \}), (\{ "details:default:exit:keycode", "details:default:exit:keycode" \}), (\{ "base:urparent", "trait:lock:parent" \}), (\{ "lock:default:lockpick:history", "lock:default:lockpick:history" \}), (\{ "trait:madeby", "trait:lock:madeby" \}), (\{ "trait:madeby:account", "trait:lock:madeby:account" \}), (\{ "trait:madeby:object", "trait:lock:madeby:object" \}) \}), "stopvalue":(\{ "trait:lock:brief", nil, "This piece of furniture already holds a lock." \}) ]);                   
  \}                   
\} else \{                        
  return env;                        
\}
      </Core:Property>
      <Core:Property property="merry:lib:finder2">
         X[M] object env, owner, prevEnv;                                      
string woename, where;                                      
int done;                                      
                                      
done= 0;                                      
env= Get(\$what, "base:environment");                                      
while (!done) \{                                      
  if (env == nil) \{                                      
     if (prevEnv) \{                                      
        if (typeof(Get(prevEnv, "homeowner")) != T_OBJECT) \{                                      
          owner = nil;                                      
        \} else \{                                      
          owner= Get(prevEnv, "homeowner");                                      
        \}                                      
     \} else \{                                      
        owner= nil;                                      
     \}                                      
     if (owner == prevEnv) \{                                      
        env= owner;                                      
     \} else \{                                      
        env= prevEnv;                                      
     \}                                      
     done= 1;                                      
  \} else if (Get(env, "volition")) \{                                      
     done= 1;                                      
     break;                                      
  \} else \{                                      
    prevEnv= env;                                      
    env= Get(env, "base:environment");                                      
  \}                                      
\}                                      
                                      
if (env) \{                                      
   where= Get(env, "base:objectname");                                      
\} else \{                                      
   where= "Not really sure";                                      
\}                                      
                                      
if( !\$retval ) \{                              
  if(\$what."trait:material" == "meteoric iron" ) \{                              
      EmitTo(\$actor, Get(\$what, "base:objectname") + " Pewter Flask is owned by " + where + (owner ? " [" + Describe(owner) + "]" : ""));                              
  \}                                      
                                      
 \} else \{                                      
  return env;                                      
\}
      </Core:Property>
      <Core:Property property="merry:lib:search">
         X[M] string woename;                          
object parent;                          
                          
Set(\$actor, "search:firstchild", nil);                          
Set(\$actor, "search:currentchild", nil);                          
                          
if (!\$evoke) \{                          
   Set(\$actor, "ownersearch", nil);                          
   EmitTo(\$actor, "Usage: +owners \\"WoeName");                          
   EmitTo(\$actor, "Returns a list of the children of that given woename, and who owns them.  Either the player the object is on (or the player who's room the object is in), or the place in the castle it is.");                          
   return FALSE;                          
\}                          
                          
woename= \$evoke[1 .. strlen(\$evoke)-3];                          
parent= Obj(woename);                          
                          
if (!woename \|\| !parent) \{                          
   Set(\$actor, "ownersearch", nil);                          
   EmitTo(\$actor, "+owners takes the woe name of the object you wish to lookup");                          
   return FALSE;                          
\}                          
                          
Set(\$actor, "ownersearch", woename);                          
\$woename= woename;                          
\$firstChild= Get(parent, "base:firsturchild");                          
if (\$firstChild) \{                          
  Call(\$\{Ironclaw:Staff:Spot:Tester\}, "finder2", \$what: \$firstChild);                          
\} else \{                          
   EmitTo(\$actor, "This woename has no children - " + woename);                          
   return FALSE;                          
\}                          
\$currentChild= Get(\$firstChild, "base:nextursibling");                          
while (\$currentChild != \$firstChild) \{                          
     Call(\$\{Ironclaw:Staff:Spot:Tester\}, "finder2", \$what: \$currentChild);                          
     \$currentChild= Get(\$currentChild, "base:nextursibling");                          
     \$delay(0.1, FALSE, "d262");                          
     if (!\$currentChild \|\| !\$firstChild) \{                          
        \$currentChild= \$firstChild;                          
     \}                          
     if (Get(\$actor, "ownersearch") != \$woename) \{                          
        EmitTo(\$actor, "Aborting +owners for " + \$woename);                          
        return FALSE;                          
     \}                          
\}                          
                          
EmitTo(\$actor, "DONE!");
      </Core:Property>
      <Core:Property property="merry:lib:search2">
         X[M] string woename;                         
object parent;                         
                         
Set(\$actor, "search:firstchild", nil);                         
Set(\$actor, "search:currentchild", nil);                         
                         
if (!\$evoke) \{                         
   Set(\$actor, "ownersearch", nil);                         
   EmitTo(\$actor, "Usage: +owners \\"WoeName");                         
   EmitTo(\$actor, "Returns a list of the children of that given woename, and who owns them.  Either the player the object is on (or the player who's room the object is in), or the place in the castle it is.");                         
   return FALSE;                         
\}                         
                         
woename= \$evoke[1 .. strlen(\$evoke)-3];                         
parent= Obj(woename);                         
                         
if (!woename \|\| !parent) \{                         
   Set(\$actor, "ownersearch", nil);                         
   EmitTo(\$actor, "+owners takes the woe name of the object you wish to lookup");                         
   return FALSE;                         
\}                         
                         
Set(\$actor, "ownersearch", woename);                         
\$woename= woename;                         
\$firstChild= Get(parent, "base:firsturchild");                         
if (\$firstChild) \{                         
  Call(\$\{Ironclaw:Staff:Roo:props:tester\}, "finder2", \$what: \$firstChild);                         
\} else \{                         
   EmitTo(\$actor, "This woename has no children - " + woename);                         
   return FALSE;                         
\}                         
\$currentChild= Get(\$firstChild, "base:nextursibling");                         
while (\$currentChild != \$firstChild) \{                         
     Call(\$\{Ironclaw:Staff:Roo:props:tester\}, "finder2", \$what: \$currentChild);                         
     \$currentChild= Get(\$currentChild, "base:nextursibling");                         
     \$delay(0.1, FALSE, "d262");                         
     if (!\$currentChild \|\| !\$firstChild) \{                         
        \$currentChild= \$firstChild;                         
     \}                         
     if (Get(\$actor, "ownersearch") != \$woename) \{                         
        EmitTo(\$actor, "Aborting +owners for " + \$woename);                         
        return FALSE;                         
     \}                         
\}                         
                         
EmitTo(\$actor, "DONE!");
      </Core:Property>
      <Core:Property property="merry:react-post:bop-with">
         X[M] if(!\$dob) return TRUE;                   
if(!sizeof(\$dob)) return TRUE;                   
if(sizeof(\$dob) \> 1) return TRUE;                   
                   
\$char = NRefOb(\$dob[0]);                   
                   
if(!Get(\$char, "skotos:charname")) return TRUE;                   
                   
EmitTo(\$actor, "Updating description for " + Describe(\$char) + "...");                   
Call(\$\{Allegory:Lib:UrPeople:Description\}, "updatedesc", \$body: \$char);                   
EmitTo(\$actor, "Done!");
      </Core:Property>
      <Core:Property property="merry:react-post:lick-dob">
         X[M] /* Setting one property */  
/*  
\$this."saved:id" = ironclaw::set_prop(\$obj: \$actor, \$prop: "appearance:build", \$value: "fat", \$timer: 20);  
EmitIn(\$actor."base:environment", Describe(\$actor)+"'s build is now: " +\$actor."appearance:build");  
*/  
  
/* Setting multiple property */  
\$changes = ([ "appearance:build":"fat", "appearance:height":"extremely", "appearance:noseshape":"bulbous" ]);  
\$this."saved:id" = ironclaw::set_prop(\$obj: \$actor, \$propmapping: \$changes, \$timer: 120);  
EmitIn(\$actor."base:environment", Describe(\$actor)+"'s build is now: " +\$actor."appearance:build");  
  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:nuzzle-dob">
         X[M] /* unset a single property */  
/*  
ironclaw::unset_prop(\$obj: \$actor, \$prop: "appearance:build", \$id: \$this."saved:id");  
EmitIn(\$actor."base:environment", Describe(\$actor)+"'s build is now: " +\$actor."appearance:build");  
*/  
  
/* unset a multiple properties */  
ironclaw::unset_prop(\$obj: \$actor, \$proplist: \$this."saved:id");  
EmitIn(\$actor."base:environment", Describe(\$actor)+"'s build is now: " +\$actor."appearance:build");  
  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:poke-dob">
         X[M] if(\$this."base:environment" != \$actor) \{                          
    EmitTo(\$actor, "You need to be holding it.");                          
    return TRUE;                          
\}                          
                          
\$thing = "\\"Ironclaw:Props:Weapons:Guns:Light:Pistol.\\"";                          
EmitTo(\$actor, "Searching for: " + Str(\$thing));                          
::search(\$evoke: \$thing);                          
                          
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:snap-dob">
         X[M] if(NRefDetail(\$dob[0]) == "fingers") \{      
  
EmitTo(\$actor, "You concentrate on the plain copper celtic ring on your finger and dense, grey fog starts to roll in the room");                
EmitIn(\$actor."base:environment", Describe(\$actor)+" concentrates on "+\$actor."base:possessive"+" plain copper celtic ring and dense, grey fog starts to roll into the room.", \$actor); \}       
  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:stab-using">
         X[M] if(!\$dob) \{                   
    return TRUE;                   
\}                   
                   
if(!sizeof(\$dob)) \{                   
    return TRUE;                   
\}                   
                   
if(sizeof(\$dob) \> 1) \{                   
    return TRUE;                   
\}                   
                   
\$concentration = oneof("weak", "normal", "strong");                   
                    
\$cap = 0;                   
if(NRefOb(\$dob[0])."effect:bloodpoison:source") \{                   
    \$cap = Int(NRefOb(\$dob[0])."effect:bloodpoison:concentration:cap");                   
\}                   
                   
\$dosage = 0.5;                   
if(NRefOb(\$dob[0])."effect:bloodpoison:dosage") \{                    
    \$dosage = Int(NRefOb(\$dob[0])."effect:bloodpoison:dosage");                   
\}                   
                   
if(\$concentration == "weak") \{                   
    \$cap += 50;                   
    \$dosage = Flt(\$dosage) * 2.0;                   
\} else if(\$concentration == "strong") \{                   
    \$cap += 150;                   
    \$dosage = Flt(\$dosage) * 6.0;                   
\} else \{                   
    \$cap += 100;                   
    \$dosage = Flt(\$dosage) * 4.0;                   
\}                   
                   
NRefOb(\$dob[0])."effect:bloodpoison:concentration:cap" = \$cap;                   
if(NRefOb(\$dob[0])."effect:bloodpoison:dosage") \{                   
    NRefOb(\$dob[0])."effect:bloodpoison:dosage" = Int(\$dosage);                   
\} else \{                   
    Call(\$\{Ironclaw:Effects:Poison:BloodPoison\}, "apply", \$who: NRefOb(\$dob[0]), \$severity: 5 + random(5), \$dosage: Int(\$dosage));                   
\}                   
                   
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:tap-using">
         X[M] \$inventory = \$\{Chatters:Backup:IC:ch:chinco0\}."base:inventory";                   
                   
\$total = 0;                   
for(\$i = 0; \$i \< sizeof(\$inventory); \$i++) \{                   
    \$total += Int(\$inventory[\$i]."armor:rating");                   
    if(\$inventory[\$i]."armor:rating") \{                   
        EmitTo(\$actor, Describe(\$inventory[\$i]) + " : " + dump_value(\$inventory[\$i]."armor:rating"));                   
    \}                   
\}                   
                   
EmitTo(\$actor, "Total from armor: " + dump_value(\$total));                   
EmitTo(\$actor, "Total: " + dump_value(\$\{Chatters:Backup:IC:ch:chinco0\}."combat:armor:rating"));                   
return FALSE;                   
                   
if(!\$dob) \{                   
    return TRUE;                   
\}                   
                   
if(!sizeof(\$dob)) \{                   
    return TRUE;                   
\}                   
                   
if(sizeof(\$dob) \> 1) \{                   
    return TRUE;                   
\}                   
                   
Call(\$\{Ironclaw:Effects:Poison:BloodPoison\}, "external", \$signal: "cured", \$who: NRefOb(\$dob[0]) );                   
Call(\$\{Ironclaw:Effects:Poison:BloodPoison\}, "remove", \$who: NRefOb(\$dob[0]) );                   
                   
                   
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:annoy-dob">
         X[M] \$fisharray = (\{ "Ironclaw:Props:Plot:Tsunami:Crab", "Ironclaw:Props:Plot:Tsunami:Scallop", "Ironclaw:Props:Plot:Tsunami:Seahorse", "Ironclaw:Props:Plot:Tsunami:Starfish" \});   
\$r = random(sizeof(\$fisharray));    
\$obj = Obj(\$fisharray[\$r]);   
\$fish = Spawn(\$obj);   
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:fondle-dob">
         X[M] Call (\$\{Ironclaw:Lib:Characters:DailyFunctions\}, "run_daily_functions"); 
 
return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1328983931, "rastalabor", "X", 1329051282, "rastalabor", "E", 1329062844, "rastalabor", "E", 1329087985, "rastalabor", "X", 1329088108, "rastalabor", "X", 1329666755, "rastalabor", "E", 1334949408, "rastalabor", "X", 1339346492, "rastalabor", "X", 1342669126, "rastalabor", "X", 1342669168, "rastalabor", "X" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="trait:fisharray">
         (\{ \<Ironclaw:Props:Plot:Tsunami:Crab\>, \<Ironclaw:Props:Plot:Tsunami:Scallop\>, \<Ironclaw:Props:Plot:Tsunami:Seahorse\>, \<Ironclaw:Props:Plot:Tsunami:Starfish\> \})
      </Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
