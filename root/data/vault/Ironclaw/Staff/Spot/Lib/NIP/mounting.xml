<object clone="/obj/properties" owner="rastalabor">
  <Core:PropertyContainer>
    <Ur:UrObject/>
    <Core:PCProperties>
      <Core:Property property="init:merry">
         (\{ "react:jump-dob" \})
      </Core:Property>
      <Core:Property property="init:properties">
         ([ "nip:trait:mounting:rider-gait":"slithers", "nip:trait:mounting:rider-inherits":([ "act-post:enter":"nip:trait:mounting:riderlib", "act:approach":"nip:trait:mounting:riderlib", "act:leave":"nip:trait:mounting:riderlib", "act:lower":"nip:trait:mounting:riderlib", "act:stance":"nip:trait:mounting:riderlib" ]) ])
      </Core:Property>
      <Core:Property property="merry:lib:init">
         X[M] /* 
 
  D=This script is executed once, when an NPC loads the 'mounting' library. 
 
*/ 
 
this."nip:trait:mounting:riderlib" = ::find_nip_object(\$what: "mountrider", \$options: nil);
      </Core:Property>
      <Core:Property property="merry:pre-react:mount-dob">
         X[M] if(\$actor.isbusy)\{                              
  EmitTo(\$actor, "You are in the middle of something. Please wait for your current action to complete before attempting something new.");                              
  return FALSE;                              
\}                              
                              
if(\$actor.lastmount \&\& (\$actor.lastmount+60 \> time()))\{                              
  EmitTo(\$actor, "Best to take a moment before trying to get back on.");                              
  return FALSE;                              
\}                              
                                    
\$target = NRefOb(\$dob[0]);                                
\$detail = NRefDetail(\$dob[0]);             
 
/* Check if the actor has a rope  */            
\$inv = \$actor."base:inventory";                              
for( \$i = 0; \$i \< sizeof( \$inv ); \$i++ )\{                              
  if( \$inv[\$i]."trait:rope" == "1" ) \$foundrope = \$inv[\$i];                              
  break;                              
\}                             
                              
/* If we didn't find a rope, give error message, and return false */                            
if( !\$foundrope )\{                              
  EmitTo( \$actor, "You don't even want to consider getting on " + Describe( \$target ) + " without a rope." );                              
  return FALSE;                              
\}                            
                              
/* Okay, we've got the tools and a target. Begin the action. */                              
\$actor.isbusy = 1;                              
\$actor.workenv = \$actor."base:environment";                              
                              
EmitTo(\$actor, "You begin circling "+Describe(\$target)+" looking for the right opportunity.");                              
EmitIn(\$actor."base:environment", Describe(\$actor)+" starts circling, looking for the right opportunity to jump onto "+Describe(\$target)+".", \$actor);                              
                              
\$result = Call(\$\{IronClaw:Lib:UrPeople:System\}, "roll", \$dicearray: (\{ \$actor."trait:agility", \$actor."skill:combat:riding", \$actor."career:combat:riding" \}));                              
                              
/* delay based on how good their roll was */                              
\$delay(900-(\$result*3), FALSE, "1660");                              
                              
\$result = Call(\$\{IronClaw:Lib:UrPeople:System\}, "roll", \$dicearray: (\{ \$actor."trait:agility", \$actor."skill:combat:riding", \$actor."career:riding" \}));                              
                              
                              
if(\$actor."base:environment" != \$actor.workenv)                              
\{                              
  EmitTo(\$actor, "Your attempt to mount the beast failed due to moving.");                              
  \$actor.isbusy = nil;                              
  \$actor.workenv = nil;                              
  return TRUE;                              
\} else \{                              
  /* We need to roll at least a 23 to earn something */                              
  if(\$result \< 8)                              
  \{                                
    EmitTo(\$actor, "Your attempt to mount the " + Describe(\$target)+ " ends with it on top of you instead, oh the claws, oh the pain, make it stop.");                              
    EmitIn(\$actor."base:environment", Describe(\$actor)+" attempts to jump on the " +Describe(\$target)+ "but it is too wild and " +Describe(\$actor)+ "ends up underneath torn by the long claws.", \$actor);   
    \$actor.lastmount = time();                              
\$actor.isbusy = nil;                              
\$actor.workenv = nil;     
    return FALSE;  
  \}   
  else if(\$result \< 15)  
  \{                                
    EmitTo(\$actor, "You almost jump on " + Describe(\$target)+ " when it snaps at you and you decide it may be too dangerous.");                              
    EmitIn(\$actor."base:environment", Describe(\$actor)+" almost jumps on " +Describe(\$target)+ "but it snaps at " +Describe(\$actor)+ " and they decide otherwise.", \$actor);   
    \$actor.lastmount = time();                              
    \$actor.isbusy = nil;                              
    \$actor.workenv = nil;     
    return FALSE;  
  \}  
    else if(\$result \< 23)  
  \{                                
    EmitTo(\$actor, "You leap onto " + Describe(\$target)+ " and stay on for a moment before it bucks and tosses you free.");                              
    EmitIn(\$actor."base:environment", Describe(\$actor)+" jumps on " +Describe(\$target)+ " and rides it for a moment, before tossed free as it bucks.", \$actor);   
    \$actor.lastmount = time();                              
    \$actor.isbusy = nil;                              
    \$actor.workenv = nil;     
    return FALSE;  
  \}  
  else   
  \{                                
    EmitTo(\$actor, "You leap onto " + Describe(\$target)+ " using the rope to control its head and bend it to your will despite it's struggles.");                              
    EmitIn(\$actor."base:environment", Describe(\$actor)+" leaps onto " +Describe(\$target)+ " using rope and skill to keep their seat despite its struggles.", \$actor);  
    \$actor.lastmount = time();                              
    \$actor.isbusy = nil;                              
    \$actor.workenv = nil;     
    return TRUE;  
  \}  
\}
      </Core:Property>
      <Core:Property property="merry:react:jump-dob">
         X[M] /*

   D=This script deals with mounting an NPC.

*/

if( this."npc:mounted" ) \{ /* Someone is mounting the NPC already... */
  EmitTo( \$actor, "You can't mount "+Describe(this)+" as "+this."base:pronoun"+" is already being mounted." );
  return FALSE;
\}

/* Let's also check if the actor is mounting something currently */
if( \$actor."npc:mounting" ) /* Actor is already mounting something. */
  if( \$actor."npc:mounting" == this ) \{ /* Actor is mounting this NPC already! */
    EmitTo( \$actor, "You are already mounting "+Describe( this )+"!" );
    return FALSE;
  \} else \{ /* Actor is mounting something else. */
    EmitTo( \$actor, "You are already mounting "+Describe( \$actor."npc:mounting" )+"!" );
    return FALSE;
  \}

/* If we get here, the NPC isn't mounted. Let's print some pretty message describing what happens, */

EmitIn( this."base:environment", Describe( \$actor )+" mounts "+Describe( this )+".", \$actor );
EmitTo( \$actor, "You mount "+Describe( this )+"." );

/* ... and put the rider ON the NPC */

\$actor."base:proximity" = this;
\$actor."base:stance" = STANCE_SIT;
\$actor."base:preposition" = PREP_ON;

/*
 * Add adjective "mounted" to the NPC, and remove adjective "unmounted".
 */
Set( this, "details:"+NRefDetail(this)+":adjective:mounted", TRUE );
Set( this, "details:"+NRefDetail(this)+":adjective:unmounted", FALSE );

/* We inherit, as specified in the inherits mapping */
\$inherits = this."nip:trait:mounting:rider-inherits";
\$scripts = map_indices( \$inherits );
for( \$i = 0; \$i \< sizeof( \$scripts ); \$i++ )
  Set( \$actor, "merry:inherit:"+\$scripts[\$i], Get( this, \$inherits[\$scripts[\$i]] ));

/* And we set the 'npc:mounted' property in the NPC to 1 to signal that we're mounted. */
this."npc:mounted" = 1;

/* Let's replace the base:gait in the actor for when we move through rooms. */
\$actor."base:oldgait" = \$actor."base:gait"; /* store old value, just in case */
\$actor."base:gait" = this."nip:trait:mounting:rider-gait"; /* and set our own */

/* And finally, let's set a "npc:mounting" property in the actor (the rider, not the horse) to the horse object reference (this) */
\$actor."npc:mounting" = this;
this."nip:trait:movement:frequency" = 0;
      </Core:Property>
      <Core:Property property="merry:react:mount-dob">
         X[M] /* 
 
   D=This script deals with mounting an NPC. 
 
*/ 
 
if( this."npc:mounted" ) \{ /* Someone is mounting the NPC already... */ 
  EmitTo( \$actor, "You can't mount "+Describe(this)+" as "+this."base:pronoun"+" is already being mounted." ); 
  return FALSE; 
\} 
 
/* Let's also check if the actor is mounting something currently */ 
if( \$actor."npc:mounting" ) /* Actor is already mounting something. */ 
  if( \$actor."npc:mounting" == this ) \{ /* Actor is mounting this NPC already! */ 
    EmitTo( \$actor, "You are already mounting "+Describe( this )+"!" ); 
    return FALSE; 
  \} else \{ /* Actor is mounting something else. */ 
    EmitTo( \$actor, "You are already mounting "+Describe( \$actor."npc:mounting" )+"!" ); 
    return FALSE; 
  \} 
 
/* If we get here, the NPC isn't mounted. Let's print some pretty message describing what happens, */ 
 
EmitIn( this."base:environment", Describe( \$actor )+" mounts "+Describe( this )+".", \$actor ); 
EmitTo( \$actor, "You mount "+Describe( this )+"." ); 
 
/* ... and put the rider ON the NPC */ 
 
\$actor."base:proximity" = this; 
\$actor."base:stance" = STANCE_SIT; 
\$actor."base:preposition" = PREP_ON; 
 
/* 
 * Add adjective "mounted" to the NPC, and remove adjective "unmounted". 
 */ 
Set( this, "details:"+NRefDetail(this)+":adjective:mounted", TRUE ); 
Set( this, "details:"+NRefDetail(this)+":adjective:unmounted", FALSE ); 
 
/* We inherit, as specified in the inherits mapping */ 
\$inherits = this."nip:trait:mounting:rider-inherits"; 
\$scripts = map_indices( \$inherits ); 
for( \$i = 0; \$i \< sizeof( \$scripts ); \$i++ ) 
  Set( \$actor, "merry:inherit:"+\$scripts[\$i], Get( this, \$inherits[\$scripts[\$i]] )); 
 
/* And we set the 'npc:mounted' property in the NPC to 1 to signal that we're mounted. */ 
this."npc:mounted" = 1; 
 
/* Let's replace the base:gait in the actor for when we move through rooms. */ 
\$actor."base:oldgait" = \$actor."base:gait"; /* store old value, just in case */ 
\$actor."base:gait" = this."nip:trait:mounting:rider-gait"; /* and set our own */ 
 
/* And finally, let's set a "npc:mounting" property in the actor (the rider, not the horse) to the horse object reference (this) */ 
\$actor."npc:mounting" = this; 
this."nip:trait:movement:frequency" = 0;
      </Core:Property>
      <Core:Property property="property:map">
         ([ "nip:trait:mounting:rider-gait":3, "nip:trait:mounting:rider-inherits":6 ])
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1156149664, "idrocket", "E", 1156149695, "idrocket", "E", 1156149746, "idrocket", "E", 1156151940, "idrocket", "E", 1156151984, "idrocket", "E", 1156151995, "idrocket", "E", 1156152240, "idrocket", "E", 1156152245, "idrocket", "E", 1156152258, "idrocket", "E", 1318103088, "rastalabor", "X", 1318103274, "rastalabor", "X", 1318104967, "rastalabor", "X", 1318105109, "rastalabor", "X", 1318105165, "rastalabor", "X" \})
      </Core:Property>
    </Core:PCProperties>
    <Notes:Notes/>
  </Core:PropertyContainer>
</object>
