<object clone="/base/obj/thing" owner="slurpeeslurp">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Ironclaw:Lib:Combat:Cards:NPCs:UrGuard)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="1"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="fox"/>
            <Base:SName sname="calico"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="foxs"/>
            <Base:PName pname="calicos"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="hot and curvy"/>
          <Base:Adjective adjective="tall"/>
        </Base:Adjectives>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="facialhair" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="facialhair"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="hair" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="tousled"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="feral"/>
          <Base:Adjective adjective="flaming ginger"/>
          <Base:Adjective adjective="tousled"/>
          <Base:Adjective adjective="waist-length"/>
        </Base:Adjectives>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="appearance:build">
         "hot and curvy"
      </Core:Property>
      <Core:Property property="appearance:chest">
         "voluptuous"
      </Core:Property>
      <Core:Property property="appearance:eyecolor">
         "glittering green"
      </Core:Property>
      <Core:Property property="appearance:eyeshape">
         "pale"
      </Core:Property>
      <Core:Property property="appearance:haircolor">
         "flaming ginger"
      </Core:Property>
      <Core:Property property="appearance:hairlength">
         "waist-length"
      </Core:Property>
      <Core:Property property="appearance:hairstyle">
         "tousled"
      </Core:Property>
      <Core:Property property="appearance:hairstyle_examinedescription">
         " Hair which hangs loose and appears to be in disarray."
      </Core:Property>
      <Core:Property property="appearance:hairstyle_examinestring">
         " which is tousled"
      </Core:Property>
      <Core:Property property="appearance:hairstyle_lookdescription">
         " Hair which hangs loose and appears to be in disarray."
      </Core:Property>
      <Core:Property property="appearance:hairstyle_string">
         " which is tousled"
      </Core:Property>
      <Core:Property property="appearance:hairtype">
         "feral"
      </Core:Property>
      <Core:Property property="appearance:height">
         "tall"
      </Core:Property>
      <Core:Property property="base:initialcontents">
         (\{ nil \})
      </Core:Property>
      <Core:Property property="combat:actions">250</Core:Property>
      <Core:Property property="combat:actions:current">
         250
      </Core:Property>
      <Core:Property property="combat:actions:queue"/>
      <Core:Property property="export:trait:examine">
         "This guard is a tall hot and curvy fox with waist-length feral flaming ginger hair which is tousled. It has pale glittering green eyes."
      </Core:Property>
      <Core:Property property="export:trait:look">
         "This guard is a tall hot and curvy fox with waist-length feral flaming ginger hair which is tousled."
      </Core:Property>
      <Core:Property property="guarding:access:allowed:individuals">
         ([ "jahren":"Sheriff Joshua", "lia":"Sheriff Joshua", "nyx":"Sheriff Joshua" ])
      </Core:Property>
      <Core:Property property="guarding:access:denied:individuals">
         ([ "anna":"Sheriff Joshua", "brutos":"Sheriff Joshua", "hush":"Sheriff Joshua", "madalina":"Sheriff Joshua", "meepers":"Sheriff Joshua", "meerclar":"Sheriff Joshua", "tsubasa":"Sheriff Joshua" ])
      </Core:Property>
      <Core:Property property="guarding:access:listkeepers">
         "(\{ \<Chatters:IC:jo:joshua\>, \<Chatters:IC:li:lia\>, \<Chatters:IC:ja:jahren\>, \<Chatters:IC:ny:nyx\> \})"
      </Core:Property>
      <Core:Property property="merry:react-post:evoke-dob%guarding">
         X[M] /* are we able to give instructions */
if(!member(\$actor, Arr(\$this."guarding:access:listkeepers"))) return TRUE;

/* allow questions and instructions about blocking the exit */
\$input = \$evoke;
\$input = \$input[1..strlen(\$input)-3];
\$input = explode(\$input," ");

if(sizeof(\$input) \> 1) \{
  \$character = lower_case(\$input[1]);
\} else \{
  \$character = nil;
\}

switch(\$input[0]) \{
  case "allow":
    if(\$character) \{
      \$this."guarding:access:allowed:individuals"[\$character] = Describe(\$actor);
      \$this."guarding:access:denied:individuals"[\$character] = nil;
      EmitTo(\$actor, Describe(\$this)+" tells you that they will allow "+\$character+" to pass.");
    \} else \{
      EmitTo(\$actor, "Format: allow NAME");
    \}
    break;
  case "remove":
    if(\$character) \{
      \$this."guarding:access:allowed:individuals"[\$character] = nil;
      \$this."guarding:access:denied:individuals"[\$character] = nil;
      EmitTo(\$actor, Describe(\$this)+" tells you that they will not treat "+\$character+" any differently to other people.");
    \} else \{
      EmitTo(\$actor, "Format: remove NAME");
    \}
    break;
  case "block":
  case "deny":
  case "bar":
    if(\$character) \{
      \$this."guarding:access:denied:individuals"[\$character] = Describe(\$actor);
      \$this."guarding:access:allowed:individuals"[\$character] = nil;
      EmitTo(\$actor, Describe(\$this)+" tells you that they will not allow "+\$character+" to pass.");
    \} else \{
      EmitTo(\$actor, "Format: block NAME");
    \}
    break;
  case "ask":
    if(\$this."guarding:access:allowed:individuals"[\$character]) \{
      EmitTo(\$actor, Describe(\$this)+" tells you that "+\$character+" is allowed through by order of "+\$this."guarding:access:allowed:individuals"[\$character]+".");
    \} else if (\$this."guarding:access:denied:individuals"[\$character]) \{
      EmitTo(\$actor, Describe(\$this)+" tells you that "+\$character+" is barred through by order of "+\$this."guarding:access:denied:individuals"[\$character]+".");
    \} else \{
      EmitTo(\$actor, Describe(\$this)+" tells you that there are no special orders about "+\$character+".");
    \}
    break;
  case "list":
    EmitTo(\$actor, Describe(\$this)+" lists who is allowed through:");
    if(sizeof(map_indices(\$this."guarding:access:allowed:individuals"))) \{
      EmitTo(\$actor, implode(map_indices(\$this."guarding:access:allowed:individuals"), " "));
    \} else \{
      EmitTo(\$actor, "No specific individuals.");
    \}
    if(sizeof(\$this."guarding:access:allowed:guilds")) \{
      \$tmp = (\{ \});
      for(\$i=0;\$i\<sizeof(\$this."guarding:access:allowed:guilds");\$i++) \{
        \$tmp += (\{ \$this."guarding:access:allowed:guilds"[\$i].shortname \});
      \}
      EmitTo(\$actor, "Guilds of "+implode(\$tmp, " "));
    \} else \{
      EmitTo(\$actor, "No specific guilds.");
    \}

    EmitTo(\$actor, Describe(\$this)+" lists who is banned from passing:");
    if(sizeof(map_indices(\$this."guarding:access:denied:individuals"))) \{
      EmitTo(\$actor, implode(map_indices(\$this."guarding:access:denied:individuals"), " "));
    \} else \{
      EmitTo(\$actor, "No specific individuals.");
    \}
    if(sizeof(\$this."guarding:access:denied:guilds")) \{
      \$tmp = (\{ \});
      for(\$i=0;\$i\<sizeof(\$this."guarding:access:denied:guilds");\$i++) \{
        \$tmp += (\{ \$this."guarding:access:denied:guilds"[\$i].shortname \});
      \}
      EmitTo(\$actor, "Guilds of "+implode(\$tmp, " "));
    \} else \{
      EmitTo(\$actor, "No specific guilds.");
    \}
    break;
  default:
    EmitTo(\$actor, "[OOC: Valid instructions for the guard are: \\"allow\\", \\"block\\", \\"remove\\", \\"ask\\" and \\"list\\" - all followed by the name of the character you are asking about. Except list, of course. That just lists them.]");
    break;
\}


return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:evoke-iob%guarding">
         X[M] /* are we able to give instructions */
if(!member(\$actor, Arr(\$this."guarding:access:listkeepers"))) return TRUE;

/* allow questions and instructions about blocking the exit */
\$input = \$evoke;
\$input = \$input[1..strlen(\$input)-3];
\$input = explode(\$input," ");

if(sizeof(\$input) \> 1) \{
  \$character = lower_case(\$input[1]);
\} else \{
  \$character = nil;
\}

switch(\$input[0]) \{
  case "allow":
    if(\$character) \{
      \$this."guarding:access:allowed:individuals"[\$character] = Describe(\$actor);
      \$this."guarding:access:denied:individuals"[\$character] = nil;
      EmitTo(\$actor, Describe(\$this)+" tells you that they will allow "+\$character+" to pass.");
    \} else \{
      EmitTo(\$actor, "Format: allow NAME");
    \}
    break;
  case "remove":
    if(\$character) \{
      \$this."guarding:access:allowed:individuals"[\$character] = nil;
      \$this."guarding:access:denied:individuals"[\$character] = nil;
      EmitTo(\$actor, Describe(\$this)+" tells you that they will not treat "+\$character+" any differently to other people.");
    \} else \{
      EmitTo(\$actor, "Format: remove NAME");
    \}
    break;
  case "block":
  case "deny":
  case "bar":
    if(\$character) \{
      \$this."guarding:access:denied:individuals"[\$character] = Describe(\$actor);
      \$this."guarding:access:allowed:individuals"[\$character] = nil;
      EmitTo(\$actor, Describe(\$this)+" tells you that they will not allow "+\$character+" to pass.");
    \} else \{
      EmitTo(\$actor, "Format: block NAME");
    \}
    break;
  case "ask":
    if(\$this."guarding:access:allowed:individuals"[\$character]) \{
      EmitTo(\$actor, Describe(\$this)+" tells you that "+\$character+" is allowed through by order of "+\$this."guarding:access:allowed:individuals"[\$character]+".");
    \} else if (\$this."guarding:access:denied:individuals"[\$character]) \{
      EmitTo(\$actor, Describe(\$this)+" tells you that "+\$character+" is barred through by order of "+\$this."guarding:access:denied:individuals"[\$character]+".");
    \} else \{
      EmitTo(\$actor, Describe(\$this)+" tells you that there are no special orders about "+\$character+".");
    \}
    break;
  case "list":
    EmitTo(\$actor, Describe(\$this)+" lists who is allowed through:");
    if(sizeof(map_indices(\$this."guarding:access:allowed:individuals"))) \{
      EmitTo(\$actor, implode(map_indices(\$this."guarding:access:allowed:individuals"), " "));
    \} else \{
      EmitTo(\$actor, "No specific individuals.");
    \}
    if(sizeof(\$this."guarding:access:allowed:guilds")) \{
      \$tmp = (\{ \});
      for(\$i=0;\$i\<sizeof(\$this."guarding:access:allowed:guilds");\$i++) \{
        \$tmp += (\{ \$this."guarding:access:allowed:guilds"[\$i].shortname \});
      \}
      EmitTo(\$actor, "Guilds of "+implode(\$tmp, " "));
    \} else \{
      EmitTo(\$actor, "No specific guilds.");
    \}

    EmitTo(\$actor, Describe(\$this)+" lists who is banned from passing:");
    if(sizeof(map_indices(\$this."guarding:access:denied:individuals"))) \{
      EmitTo(\$actor, implode(map_indices(\$this."guarding:access:denied:individuals"), " "));
    \} else \{
      EmitTo(\$actor, "No specific individuals.");
    \}
    if(sizeof(\$this."guarding:access:denied:guilds")) \{
      \$tmp = (\{ \});
      for(\$i=0;\$i\<sizeof(\$this."guarding:access:denied:guilds");\$i++) \{
        \$tmp += (\{ \$this."guarding:access:denied:guilds"[\$i].shortname \});
      \}
      EmitTo(\$actor, "Guilds of "+implode(\$tmp, " "));
    \} else \{
      EmitTo(\$actor, "No specific guilds.");
    \}
    break;
  default:
    EmitTo(\$actor, "[OOC: Valid instructions for the guard are: \\"allow\\", \\"block\\", \\"remove\\", \\"ask\\" and \\"list\\" - all followed by the name of the character you are asking about. Except list, of course. That just lists them.]");
    break;
\}


return TRUE;
      </Core:Property>
      <Core:Property property="merry:witness:enter-into">
         X[M] if(!\$this."base:proximity" \|\| NRefDetail(\$target) != NRefDetail(\$this."base:proximity"))
  return TRUE;

/* are we blocking all, or allowing all? */
if(\$this."guarding:access:blockall" \&\& !this."guarding:access:denied:individuals"[\$actor."skotos:charname"]) \{
  /* is the actor a member of the right guild? */
  if(\$actor.guild \&\& member(\$actor.guild, Arr(\$this."guarding:access:allowed:guilds")))
    return TRUE;

  if( this."guarding:access:allowed:individuals"[\$actor."skotos:charname"] )
    return TRUE;
\} else \{
  /* is the actor allowed through? */
  if( this."guarding:access:allowed:individuals"[\$actor."skotos:charname"] )
    return TRUE;

  /* is the actor a member of the right guild? */
  if(!(\$actor.guild \&\& member(\$actor.guild, Arr(\$this."guarding:access:denied:guilds"))
  \|\|
  this."guarding:access:denied:individuals"[\$actor."skotos:charname"] ))
    return TRUE;
\}

/* are they following someone through? */
/*if(\$actor.follow \&\& NRefOb(\$dest) == \$actor.follow."base:environment")
  return TRUE;*/

EmitTo(\$actor, "A guard steps in front you." );
EmitIn(\$actor."base:environment", "An guard steps in front of "+Describe(\$actor)+".", \$actor );
\$delay(1, FALSE, "a173");
EmitIn(\$actor."base:environment", "An guard grunts, \\"I'm sorry but you're not allowed to go any further.\\"" );
      </Core:Property>
      <Core:Property property="misc:lastdropped">
         "1250326509 StoryBuilder Nyx[slurpeeslurp]"
      </Core:Property>
      <Core:Property property="npc:resource-control:live_time">
         1250326539
      </Core:Property>
      <Core:Property property="npc:status:spawndate">
         1250327764
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1250325248, "slurpeeslurp", "S", 1250325255, "slurpeeslurp", "S", 1250325256, "slurpeeslurp", "S", 1250325270, "slurpeeslurp", "S", 1250325280, "slurpeeslurp", "S", 1250325287, "slurpeeslurp", "S", 1250325291, "slurpeeslurp", "S", 1250325303, "slurpeeslurp", "S", 1250325315, "slurpeeslurp", "S", 1250325315, "slurpeeslurp", "S", 1250325340, "slurpeeslurp", "S", 1250325357, "slurpeeslurp", "S", 1250325379, "slurpeeslurp", "S", 1250325391, "slurpeeslurp", "S", 1250325447, "slurpeeslurp", "S", 1250325447, "slurpeeslurp", "S", 1250325570, "slurpeeslurp", "S", 1250325800, "slurpeeslurp", "E", 1250325851, "slurpeeslurp", "E", 1250326045, "slurpeeslurp", "E", 1250326134, "slurpeeslurp", "E", 1250326231, "slurpeeslurp", "E", 1250326299, "slurpeeslurp", "E", 1250326368, "slurpeeslurp", "E", 1250326408, "slurpeeslurp", "E", 1250326438, "slurpeeslurp", "E", 1250326594, "slurpeeslurp", "E", 1250326629, "slurpeeslurp", "E", 1250326828, "slurpeeslurp", "E", 1250326930, "slurpeeslurp", "E", 1250327050, "slurpeeslurp", "E", 1250327158, "slurpeeslurp", "E", 1250327185, "slurpeeslurp", "E", 1250327524, "slurpeeslurp", "E", 1250327668, "slurpeeslurp", "E", 1250327757, "slurpeeslurp", "E", 1250327918, "slurpeeslurp", "E", 1250327952, "slurpeeslurp", "E", 1250328022, "slurpeeslurp", "E", 1250328367, "slurpeeslurp", "E", 1309490225, "rorschakovacs", "R" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="spawn:creator">
         (\{ "slurpeeslurp", 1250324877 \})
      </Core:Property>
      <Core:Property property="trait:animal">"fox"</Core:Property>
      <Core:Property property="trait:examine">
         "This guard is a tall hot and curvy fox with waist-length feral flaming ginger hair which is tousled. It has pale glittering green eyes."
      </Core:Property>
      <Core:Property property="trait:height">"buff"</Core:Property>
      <Core:Property property="trait:look">
         "This guard is a tall hot and curvy fox with waist-length feral flaming ginger hair which is tousled."
      </Core:Property>
      <Core:Property property="trait:smells">
         ([ "nature":(\{ 1, 1250325470 \}) ])
      </Core:Property>
      <Core:Property property="trait:smells:lastchecked">
         1250325416
      </Core:Property>
      <Core:Property property="trait:title">"none"</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
