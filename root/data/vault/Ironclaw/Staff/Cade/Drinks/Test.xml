<object clone="/base/obj/thing" owner="haystack">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Allegory:Props:Crafting:UrCrafting)"/>
    <Base:Bulk immobile="false" mass="0.3" density="1.1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="sitting" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="true"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="false" under="false" on="true" inside="false" near="true" over="true" behind="false" before="false" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="cup"/>
            <Base:SName sname="mug"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="cups"/>
            <Base:PName pname="mugs"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             {? equal | $(this.trait:liquid) | empty | empty | }$(this.trait:color) $(this.trait:material) $(this.trait:container){? equal | $(this.trait:liquid) | empty || of $(this.trait:liquid) }
          </Base:Description>
          <Base:Description type="examine">
             The $(this.trait:color) $(this.trait:material) $(this.trait:container) is $[if($this."trait:quantity" == 0) { return "quite"; } else if($this."trait:quantity" <= 0) { return "quite";} else if($this."trait:quantity" >= 1 && $this."trait:quantity" <= 5) { return "nearly emptied of"; } else if($this."trait:quantity" >= 4 && $this."trait:quantity" <= 9) { return "less than half filled with"; } else if($this."trait:quantity" >= 8 && $this."trait:quantity" <= 13) { return "about half filled with"; } else if($this."trait:quantity" >= 12 && $this."trait:quantity" <= 17) { return "nearly filled with" +$(this.trait:flavor); } else { return "filled to the brim with"; }] $(this.trait:liquid).
          </Base:Description>
          <Base:Description type="look">
             The {? equal | $(this.trait:liquid) | empty | empty | }$(this.trait:color) $(this.trait:material) $(this.trait:container){? equal | $(this.trait:liquid) | empty || of $(this.trait:flavor) $(this.trait:liquid)}.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="liquid" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="nectar"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="nectars"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             the $(this.trait:liquid)
          </Base:Description>
          <Base:Description type="look">
             The $(this.trait:liquid) in the $(this.trait:material) $(this.trait:container) looks inviting.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="10"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:emote:drink">
         "It is cool and refreshing"
      </Core:Property>
      <Core:Property property="export:emote:gulp">
         "It races down your throat refreshingly"
      </Core:Property>
      <Core:Property property="export:emote:guzzle">
         "It pours down your gullet with a crisp, cool taste"
      </Core:Property>
      <Core:Property property="export:emote:quaff">
         "It spills (mostly) into your accepting mouth"
      </Core:Property>
      <Core:Property property="export:emote:savor">
         "It is cool and refreshing on the palette"
      </Core:Property>
      <Core:Property property="export:emote:sip">
         "It is cool"
      </Core:Property>
      <Core:Property property="export:emote:slurp">
         "It is thirst-quenching"
      </Core:Property>
      <Core:Property property="export:emote:swill">
         "It slides down your throat like ice"
      </Core:Property>
      <Core:Property property="export:emote:taste">
         "It is cool and refreshing"
      </Core:Property>
      <Core:Property property="export:nip:item:cost">
         0
      </Core:Property>
      <Core:Property property="export:trait:container">
         "mug"
      </Core:Property>
      <Core:Property property="export:trait:liquid">
         "nectar"
      </Core:Property>
      <Core:Property property="export:trait:objecttype">
         "urdrink"
      </Core:Property>
      <Core:Property property="export:trait:quantity">
         20
      </Core:Property>
      <Core:Property property="export:trait:trash">1</Core:Property>
      <Core:Property property="merry:react-pre:drink">
         X[M] if(\$this."trait:quantity" == 1 \|\| \$this."trait:quantity" \>= 1) \{
EmitTo(\$actor, "You drink " +\$this."trait:liquid"+ " from "+Describe(\$this, nil, \$actor)+". " +\$this."emote:drink"+ ".");
EmitIn(\$actor."base:environment", Describe(\$actor)+ " drinks " +\$this."trait:liquid"+ " from "+Describe(\$this, \$actor)+".", \$actor);
if(\$this."trait:quantity" == 1) \{
\$this."trait:quantity" -= 1;
\} else \{
\$this."trait:quantity" -= 2;
\}
if(\$this."trait:quantity" == 0) \{
\$this."trait:liquid" = "empty";
Set(\$this, "details:liquid:hidden", TRUE);
return FALSE;
\}
return FALSE;
\} else \{
EmitTo(\$actor, Describe(\$this, nil, \$actor)+" is empty.");
return FALSE;
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:empty-dob">
         X[M] if(\$this."trait:quantity" == 1 \|\| \$this."trait:quantity" \>= 1) \{
EmitTo(\$actor, "You empty the " +\$this."trait:liquid"+ " from "+Describe(\$this, nil, \$actor)+".");
EmitIn(\$actor."base:environment", Describe(\$actor)+ " empties the " +\$this."trait:liquid"+ " from "+Describe(\$this, \$actor)+".", \$actor);
\$this."trait:quantity" = 0;
\$this."trait:liquid" = "empty";
Set(\$this, "details:liquid:hidden", TRUE);
return FALSE;
\} else \{
EmitTo(\$actor, Describe(\$this, nil, \$actor)+" is empty.");
return FALSE;
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:gulp-iob">
         X[M] if(\$this."trait:quantity" == 1 \|\| \$this."trait:quantity" \>= 1) \{
EmitTo(\$actor, "You gulp " +\$this."trait:liquid"+ " from "+Describe(\$this, nil, \$actor)+". " +\$this."emote:gulp"+ ".");
EmitIn(\$actor."base:environment", Describe(\$actor)+ " gulps " +\$this."trait:liquid"+ " from "+Describe(\$this, \$actor)+".", \$actor);
if(\$this."trait:quantity" == 1) \{
\$this."trait:quantity" -= 1;
\} else if(\$this."trait:quantity" == 2) \{
\$this."trait:quantity" -= 2;
\} else if(\$this."trait:quantity" == 3) \{
\$this."trait:quantity" -= 3;
\} else \{
\$this."trait:quantity" -= 4;
\}
if(\$this."trait:quantity" == 0) \{
\$this."trait:liquid" = "empty";
Set(\$this, "details:liquid:hidden", TRUE);
return FALSE;
\}
return FALSE;
\} else \{
EmitTo(\$actor, Describe(\$this, nil, \$actor)+" is empty.");
return FALSE;
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:guzzle-iob">
         X[M] if(\$this."trait:quantity" == 1 \|\| \$this."trait:quantity" \>= 1) \{
EmitTo(\$actor, "You guzzle " +\$this."trait:liquid"+ " from "+Describe(\$this, nil, \$actor)+". " +\$this."emote:guzzle"+ ".");
EmitIn(\$actor."base:environment", Describe(\$actor)+ " guzzles " +\$this."trait:liquid"+ " from "+Describe(\$this, \$actor)+".", \$actor);
\$this."trait:quantity" = 0;
\$this."trait:liquid" = "empty";
Set(\$this, "details:liquid:hidden", TRUE);
return FALSE;
\} else \{
EmitTo(\$actor, Describe(\$this, nil, \$actor)+" is empty.");
return FALSE;
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:quaff-iob">
         X[M] if(\$this."trait:quantity" == 1 \|\| \$this."trait:quantity" \>= 1) \{
EmitTo(\$actor, "You quaff " +\$this."trait:liquid"+ " from "+Describe(\$this, nil, \$actor)+". " +\$this."emote:quaff"+ ".");
EmitIn(\$actor."base:environment", Describe(\$actor)+ " quaffs " +\$this."trait:liquid"+ " from "+Describe(\$this, \$actor)+".", \$actor);
if(\$this."trait:quantity" == 1) \{
\$this."trait:quantity" -= 1;
\} else if(\$this."trait:quantity" == 2) \{
\$this."trait:quantity" -= 2;
\} else if(\$this."trait:quantity" == 3) \{
\$this."trait:quantity" -= 3;
\} else \{
\$this."trait:quantity" -= 4;
\}
if(\$this."trait:quantity" == 0) \{
\$this."trait:liquid" = "empty";
Set(\$this, "details:liquid:hidden", TRUE);
return FALSE;
\}
return FALSE;
\} else \{
EmitTo(\$actor, Describe(\$this, nil, \$actor)+" is empty.");
return FALSE;
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:savor-dob">
         X[M] if(\$this."trait:quantity" == 1 \|\| \$this."trait:quantity" \>= 1) \{
EmitTo(\$actor, "You savor the " +\$this."trait:liquid"+ " from "+Describe(\$this, nil, \$actor)+".");
EmitIn(\$actor."base:environment", Describe(\$actor)+ " savors the " +\$this."trait:liquid"+ " from "+Describe(\$this, \$actor)+".", \$actor);
\$this."trait:quantity" -= 1;
if(\$this."trait:quantity" == 0) \{
\$this."trait:liquid" = "empty";
Set(\$this, "details:liquid:hidden", TRUE);
return FALSE;
\}
return FALSE;
\} else \{
EmitTo(\$actor, Describe(\$this, nil, \$actor)+" is empty.");
return FALSE;
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:savour-dob">
         X[M] if(\$this."trait:quantity" == 1 \|\| \$this."trait:quantity" \>= 1) \{
EmitTo(\$actor, "You savor the " +\$this."trait:liquid"+ " from "+Describe(\$this, nil, \$actor)+". " +\$this."emote:savor"+ ".");
EmitIn(\$actor."base:environment", Describe(\$actor)+ " savors the " +\$this."trait:liquid"+ " from "+Describe(\$this, \$actor)+".", \$actor);
\$this."trait:quantity" -= 1;
if(\$this."trait:quantity" == 0) \{
\$this."trait:liquid" = "empty";
Set(\$this, "details:liquid:hidden", TRUE);
return FALSE;
\}
return FALSE;
\} else \{
EmitTo(\$actor, Describe(\$this, nil, \$actor)+" is empty.");
return FALSE;
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:sip-iob">
         X[M] if(\$this."trait:quantity" == 1 \|\| \$this."trait:quantity" \>= 1) \{
  EmitTo(\$actor, "You sip " +\$this."trait:liquid"+ " from "+Describe(\$this, nil, \$actor)+". " +\$this."emote:sip"+ ".");
  EmitIn(\$actor."base:environment", Describe(\$actor)+ " sips " +\$this."trait:liquid"+ " from "+Describe(\$this, \$actor)+".", \$actor);
  \$this."trait:quantity" -= 1;
  if(\$this."trait:quantity" == 0) \{
    \$this."trait:liquid" = "empty";
    Set(\$this, "details:liquid:hidden", TRUE);
    return FALSE;
  \}
  return FALSE;
\} else \{
  EmitTo(\$actor, capitalize(Describe(\$this, nil, \$actor))+" is empty.");
  return FALSE;
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:slurp-iob">
         X[M] if(\$this."trait:quantity" == 1 \|\| \$this."trait:quantity" \>= 1) \{
EmitTo(\$actor, "You slurp " +\$this."trait:liquid"+ " from "+Describe(\$this, nil, \$actor)+".");
EmitIn(\$actor."base:environment", Describe(\$actor)+ " slurps " +\$this."trait:liquid"+ " from "+Describe(\$this, \$actor)+".", \$actor);
if(\$this."trait:quantity" == 1) \{
\$this."trait:quantity" -= 1;
\} else \{
\$this."trait:quantity" -= 2;
\}
if(\$this."trait:quantity" == 0) \{
\$this."trait:liquid" = "empty";
Set(\$this, "details:liquid:hidden", TRUE);
return FALSE;
\}
return FALSE;
\} else \{
EmitTo(\$actor, Describe(\$this, nil, \$actor)+" is empty.");
return FALSE;
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:swill-iob">
         X[M] if(\$this."trait:quantity" == 1 \|\| \$this."trait:quantity" \>= 1) \{
EmitTo(\$actor, "You swill " +\$this."trait:liquid"+ " from "+Describe(\$this, nil, \$actor)+".");
EmitIn(\$actor."base:environment", Describe(\$actor)+ " swills " +\$this."trait:liquid"+ " from "+Describe(\$this, \$actor)+".", \$actor);
if(\$this."trait:quantity" == 1) \{
\$this."trait:quantity" -= 1;
\} else if(\$this."trait:quantity" == 2) \{
\$this."trait:quantity" -= 2;
\} else if(\$this."trait:quantity" == 3) \{
\$this."trait:quantity" -= 3;
\} else \{
\$this."trait:quantity" -= 4;
\}
if(\$this."trait:quantity" == 0) \{
\$this."trait:liquid" = "empty";
Set(\$this, "details:liquid:hidden", TRUE);
return FALSE;
\}
return FALSE;
\} else \{
EmitTo(\$actor, Describe(\$this, nil, \$actor)+" is empty.");
return FALSE;
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:taste-dob">
         X[M] return TRUE;
if(\$this."trait:quantity" == 1 \|\| \$this."trait:quantity" \>= 1) \{
EmitTo(\$actor, "You taste the " +\$this."trait:liquid"+ " from "+Describe(\$this, nil, \$actor)+".");
EmitIn(\$actor."base:environment", Describe(\$actor)+ " tastes the " +\$this."trait:liquid"+ " from "+Describe(\$this, \$actor)+".", \$actor);
\$this."trait:quantity" -= 1;
if(\$this."trait:quantity" == 0) \{
\$this."trait:liquid" = "empty";
Set(\$this, "details:liquid:hidden", TRUE);
return FALSE;
\}
return FALSE;
\} else \{
EmitTo(\$actor, capitalize(Describe(\$this, nil, \$actor))+" is empty.");
return FALSE;
\}
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:container">
         X[M] Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);                                   
Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replacesname", \$object: this);                                   
Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replacepname", \$object: this);
return TRUE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:liquid">
         X[M] Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);                                   
Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replacesname", \$object: this);                                   
return TRUE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:material">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1138739804, "tunk_bodin", "X", 1138740643, "tunk_bodin", "X", 1138740901, "tunk_bodin", "X", 1138741707, "tunk_bodin", "X", 1138741968, "tunk_bodin", "X", 1138741996, "tunk_bodin", "X", 1138742085, "tunk_bodin", "X", 1138742303, "tunk_bodin", "X", 1138742339, "tunk_bodin", "X", 1138742428, "tunk_bodin", "E", 1138742480, "tunk_bodin", "X", 1138742580, "tunk_bodin", "X", 1138742625, "tunk_bodin", "X", 1138743235, "tunk_bodin", "X", 1138743486, "tunk_bodin", "X", 1138743530, "tunk_bodin", "X", 1138743614, "tunk_bodin", "X", 1138743669, "tunk_bodin", "X", 1138743708, "tunk_bodin", "X", 1138743775, "tunk_bodin", "X", 1138821399, "tunk_bodin", "X", 1138823218, "tunk_bodin", "X", 1138823261, "tunk_bodin", "X", 1138823464, "tunk_bodin", "X", 1138825156, "tunk_bodin", "X", 1138826522, "tunk_bodin", "X", 1138826602, "tunk_bodin", "X", 1138826626, "tunk_bodin", "X", 1138826683, "tunk_bodin", "X", 1138826760, "tunk_bodin", "X", 1138827100, "tunk_bodin", "X", 1140036482, "tunk_bodin", "E", 1142791587, "tunk_bodin", "X", 1143777305, "tunk_bodin", "X", 1143777594, "tunk_bodin", "X", 1143777725, "tunk_bodin", "X", 1143777945, "tunk_bodin", "X", 1143778111, "tunk_bodin", "X", 1145254982, "sinistrelle", "E", 1145256049, "sinistrelle", "E", 1152145631, "tunk_bodin", "X", 1152145755, "tunk_bodin", "E", 1156042897, "tunk_bodin", "X", 1156043560, "tunk_bodin", "X", 1156043731, "tunk_bodin", "X", 1156043795, "tunk_bodin", "X", 1156044399, "tunk_bodin", "X", 1156044444, "tunk_bodin", "X", 1156044478, "tunk_bodin", "X", 1156044564, "tunk_bodin", "X", 1157398314, "tunk_bodin", "X", 1168928851, "tunk_bodin", "X", 1177464131, "tunk_bodin", "R", 1177464456, "tunk_bodin", "R", 1184492625, "tonyd", "E", 1184495449, "tonyd", "E", 1184495857, "tonyd", "P", 1184495930, "tonyd", "P", 1184495944, "tonyd", "P", 1184495984, "tonyd", "P", 1184495999, "tonyd", "P", 1184496097, "tonyd", "P", 1184496152, "tonyd", "P", 1184496257, "tonyd", "P", 1184498475, "tonyd", "P", 1184498528, "tonyd", "P", 1184498635, "tonyd", "P", 1184498683, "tonyd", "P", 1184498721, "tonyd", "P", 1184498757, "tonyd", "P", 1184498861, "tonyd", "P", 1184498927, "tonyd", "P", 1184499188, "tonyd", "P", 1184499232, "tonyd", "P", 1184499296, "tonyd", "P", 1184499394, "tonyd", "P", 1184499514, "tonyd", "E", 1184499539, "tonyd", "P", 1184499610, "tonyd", "P", 1184501014, "tonyd", "E", 1184501040, "tonyd", "E", 1188357330, "haystack", "R", 1188357541, "haystack", "E", 1188357753, "haystack", "E", 1188361434, "haystack", "E", 1188361599, "haystack", "E", 1309490646, "rorschakovacs", "R" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes>
      <Notes:Category cat="QA" catstate="Open">
        <Notes:Note ix="1152145639" state="Open" user="tunk_bodin">
           Very basic UrDrink. Allows for altering the liquid, container and emits as well as the taste. End result is an empty container. It does use the ICO crafting system to set certain snames, pnames and adjectives but that portion of the script is easily replaced with a generic one.
        </Notes:Note>
      </Notes:Category>
    </Notes:Notes>
  </Base:Thing>
</object>
