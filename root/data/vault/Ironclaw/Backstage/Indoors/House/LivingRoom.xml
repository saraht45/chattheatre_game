<object clone="/base/obj/thing" owner="tunk_bodin">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Ironclaw:Backstage:Indoors:UrInside)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="1"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="true" abstract="false" hidden="false" luminosity="5" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="room"/>
            <Base:SName sname="livingroom"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="rooms"/>
            <Base:PName pname="livingrooms"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="living"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the living room
          </Base:Description>
          <Base:Description type="examine">
             The living room is furnished with two couches, a coffee table, two plants, a television, and a corner shelf unit. There is a light switch on the north wall which controls the chandelier overhead. An intercom has been placed on the south wall for communication throughout the house. A small trashcan is nestled away in order to maintain a clean workspace. A door heads <acmd tag="command" cmd="north">north</acmd> to the kitchen for those who are full staff, and a door heads <acmd tag="command" cmd="south">south</acmd> to the foyer where VPs and @builders may play. Doors to the <acmd tag="command" cmd="east">east</acmd> and <acmd tag="command" cmd="west">west</acmd> lead to office space for non-lead staff.
          </Base:Description>
          <Base:Description type="glance">
             The living room.
          </Base:Description>
          <Base:Description type="look">
             The living room is furnished with two couches, a coffee table, two plants, a television, and a corner shelf unit. There is a light switch on the north wall which controls the chandelier overhead. An intercom has been placed on the south wall for communication throughout the house. A small trashcan is nestled away in order to maintain a clean workspace. A door heads <acmd tag="command" cmd="north">north</acmd> to the kitchen for those who are full staff, and a door heads <acmd tag="command" cmd="south">south</acmd> to the foyer where VPs and @builders may play. Doors to the <acmd tag="command" cmd="east">east</acmd> and <acmd tag="command" cmd="west">west</acmd> lead to office space for non-lead staff.
          </Base:Description>
          <Base:Description type="mapurl">
             http://www.skotos.net/IronclawGame/images/maps/backstage/staff_livingroom.jpg
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="exit-east" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="false" under="false" on="false" inside="false" near="true" over="false" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="door"/>
            <Base:SName sname="exit"/>
            <Base:SName sname="east"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="doors"/>
            <Base:PName pname="exits"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="east"/>
          <Base:Adjective adjective="eastern"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the eastern door
          </Base:Description>
          <Base:Description type="examine">
             The door to the <acmd tag="command" cmd="east">east</acmd> was created from a single piece of cedar and leads to a hallway for non-lead staff offices.
          </Base:Description>
          <Base:Description type="look">
             The door to the <acmd tag="command" cmd="east">east</acmd> was created from a single piece of cedar and leads to a hallway for non-lead staff offices.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit dest="NREF(Ironclaw:Backstage:Indoors:House:Hall-SE|exit-west)" door="true" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false">
          <Base:Direction dir="east"/>
        </Base:Exit>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="exit-north" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="false" under="false" on="false" inside="false" near="true" over="false" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="door"/>
            <Base:SName sname="exit"/>
            <Base:SName sname="north"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="doors"/>
            <Base:PName pname="exits"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="north"/>
          <Base:Adjective adjective="northern"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the northern door
          </Base:Description>
          <Base:Description type="examine">
             The door to the <acmd tag="command" cmd="north">north</acmd> leading to the kitchen.
          </Base:Description>
          <Base:Description type="look">
             <view-full/>
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit dest="NREF(Ironclaw:Backstage:Indoors:House:Kitchen|exit-south)" door="true" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false">
          <Base:Direction dir="north"/>
        </Base:Exit>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="exit-south" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="false" under="false" on="false" inside="false" near="true" over="false" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="door"/>
            <Base:SName sname="exit"/>
            <Base:SName sname="south"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="doors"/>
            <Base:PName pname="exits"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="south"/>
          <Base:Adjective adjective="southern"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the southern door
          </Base:Description>
          <Base:Description type="examine">
             The door to the <acmd tag="command" cmd="south">south</acmd> leading to the foyer.
          </Base:Description>
          <Base:Description type="look">
             The door to the <acmd tag="command" cmd="south">south</acmd> leading to the foyer.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit dest="NREF(Ironclaw:Backstage:Indoors:House:Foyer|exit-north)" door="true" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false">
          <Base:Direction dir="south"/>
        </Base:Exit>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="exit-west" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="false" under="false" on="false" inside="false" near="true" over="false" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="door"/>
            <Base:SName sname="exit"/>
            <Base:SName sname="west"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="doors"/>
            <Base:PName pname="exits"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="west"/>
          <Base:Adjective adjective="western"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the western door
          </Base:Description>
          <Base:Description type="examine">
             The door to the <acmd tag="command" cmd="west">west</acmd> was created from a single piece of cedar and leads to a hallway for non-lead staff offices.
          </Base:Description>
          <Base:Description type="look">
             The door to the <acmd tag="command" cmd="west">west</acmd> was created from a single piece of cedar and leads to a hallway for non-lead staff offices.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit dest="NREF(Ironclaw:Backstage:Indoors:House:Hall-SW|exit-east)" door="true" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false">
          <Base:Direction dir="west"/>
        </Base:Exit>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="NEW" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             NEW detail
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="box-pile" prime="false" def="true" abstract="false" hidden="true" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="false" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="boxes"/>
            <Base:SName sname="pile"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="piles"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="box"/>
          <Base:Adjective adjective="earthenware"/>
          <Base:Adjective adjective="of"/>
          <Base:Adjective adjective="pile"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             a pile of earthenware boxes
          </Base:Description>
          <Base:Description type="examine">
             A large pile of earthenware boxes are stacked up high. You may be able to <acmd tag="command" cmd="rummage through pile">rummage</acmd> through them and find something with your name on it.
          </Base:Description>
          <Base:Description type="look">
             A large pile of earthenware boxes are stacked up high. You may be able to <acmd tag="command" cmd="rummage through pile">rummage</acmd> through them and find something with your name on it.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="chandelier" prime="false" def="true" abstract="false" hidden="false" luminosity="5" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="true" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="chandelier"/>
            <Base:SName sname="light"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="chandeliers"/>
            <Base:PName pname="lights"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="bell"/>
          <Base:Adjective adjective="cast"/>
          <Base:Adjective adjective="curved"/>
          <Base:Adjective adjective="dual"/>
          <Base:Adjective adjective="glass"/>
          <Base:Adjective adjective="inverted"/>
          <Base:Adjective adjective="iron"/>
          <Base:Adjective adjective="shaded"/>
          <Base:Adjective adjective="tier"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the cast iron chandelier
          </Base:Description>
          <Base:Description type="examine">
             The cast iron chandelier is dual tier with inverted bell shades. Both tiers reach outward in an upward curve; six arms on each holding up the acid etched glass shades. The shades bear a floral design and mimic a budding flower encasing a small, thin light bulb. A switch on the wall controls the light. {? greaterthan | $(this.details:chandelier:luminosity) | 1.0 | The light is on. [You may 'turn off' via the switch on the wall.] | The light is off. [You may 'turn on' via the switch on the wall.] }
          </Base:Description>
          <Base:Description type="look">
             The cast iron chandelier is dual tier with inverted bell shades. Both tiers reach outward in an upward curve; six arms on each holding up the acid etched glass shades. The shades bear a floral design and mimic a budding flower encasing a small, thin light bulb. A switch on the wall controls the light. {? greaterthan | $(this.details:chandelier:luminosity) | 1.0 | The light is on. [You may 'turn off' via the switch on the wall.] | The light is off. [You may 'turn on' via the switch on the wall.] }
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="coffee_table" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="false" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="table"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="tables"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="coffee"/>
          <Base:Adjective adjective="long"/>
          <Base:Adjective adjective="low"/>
          <Base:Adjective adjective="maple"/>
          <Base:Adjective adjective="wood"/>
          <Base:Adjective adjective="wooden"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             long coffee table
          </Base:Description>
          <Base:Description type="examine">
             A long coffee table extends across the area rug. It is a low, maple table; unstained and natural in design.
          </Base:Description>
          <Base:Description type="look">
             A long coffee table extends across the area rug. It is a low, maple table; unstained and natural in design.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="couch_1" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="false" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="couch"/>
            <Base:SName sname="sofa"/>
            <Base:SName sname="furniture"/>
            <Base:SName sname="furnishing"/>
            <Base:SName sname="upholstery"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="black"/>
          <Base:Adjective adjective="brown"/>
          <Base:Adjective adjective="button-tufted"/>
          <Base:Adjective adjective="dark"/>
          <Base:Adjective adjective="large"/>
          <Base:Adjective adjective="leather"/>
          <Base:Adjective adjective="maple"/>
          <Base:Adjective adjective="padded"/>
          <Base:Adjective adjective="roll-back"/>
          <Base:Adjective adjective="solid"/>
          <Base:Adjective adjective="walnut"/>
          <Base:Adjective adjective="wood"/>
          <Base:Adjective adjective="wooden"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             black leather couch
          </Base:Description>
          <Base:Description type="examine">
             The black couch has a large roll-back top, a waterfall of button-tufted leather which cascades downwards to a deeply padded seat and then continues in a single graceful curve until it almost hits the floor. The solid maple wood frame is given a handsome walnut finish. The striated-turned legs lend a touch of elegance. The supple, high grade leather is black with dark brown highlights due to its age. It is definitely an antique that has weathered beautifully over the years. A traditional nailhead trim provides the perfect finishing touch to this magnificent leather couch.
          </Base:Description>
          <Base:Description type="look">
             The black couch has a large roll-back top, a waterfall of button-tufted leather which cascades downwards to a deeply padded seat and then continues in a single graceful curve until it almost hits the floor.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="couch_2" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="false" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="couch"/>
            <Base:SName sname="sofa"/>
            <Base:SName sname="furniture"/>
            <Base:SName sname="furnishing"/>
            <Base:SName sname="upholstery"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="black"/>
          <Base:Adjective adjective="brown"/>
          <Base:Adjective adjective="button-tufted"/>
          <Base:Adjective adjective="dark"/>
          <Base:Adjective adjective="large"/>
          <Base:Adjective adjective="leather"/>
          <Base:Adjective adjective="maple"/>
          <Base:Adjective adjective="padded"/>
          <Base:Adjective adjective="roll-back"/>
          <Base:Adjective adjective="solid"/>
          <Base:Adjective adjective="walnut"/>
          <Base:Adjective adjective="wood"/>
          <Base:Adjective adjective="wooden"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             black leather couch
          </Base:Description>
          <Base:Description type="examine">
             The black couch has a large roll-back top, a waterfall of button-tufted leather which cascades downwards to a deeply padded seat and then continues in a single graceful curve until it almost hits the floor. The solid maple wood frame is given a handsome walnut finish. The striated-turned legs lend a touch of elegance. The supple, high grade leather is black with dark brown highlights due to its age. It is definitely an antique that has weathered beautifully over the years. A traditional nailhead trim provides the perfect finishing touch to this magnificent leather couch.
          </Base:Description>
          <Base:Description type="look">
             The black couch has a large roll-back top, a waterfall of button-tufted leather which cascades downwards to a deeply padded seat and then continues in a single graceful curve until it almost hits the floor.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="couch_all" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="true">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="false" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="couches"/>
            <Base:SName sname="sofas"/>
            <Base:SName sname="furnitures"/>
            <Base:SName sname="furnishings"/>
            <Base:SName sname="upholsteries"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="black"/>
          <Base:Adjective adjective="brown"/>
          <Base:Adjective adjective="button-tufted"/>
          <Base:Adjective adjective="dark"/>
          <Base:Adjective adjective="large"/>
          <Base:Adjective adjective="leather"/>
          <Base:Adjective adjective="maple"/>
          <Base:Adjective adjective="padded"/>
          <Base:Adjective adjective="roll-back"/>
          <Base:Adjective adjective="solid"/>
          <Base:Adjective adjective="walnut"/>
          <Base:Adjective adjective="wood"/>
          <Base:Adjective adjective="wooden"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the black leather couches
          </Base:Description>
          <Base:Description type="examine">
             The black couches have large roll-back tops, a waterfall of button-tufted leather which cascades downwards to a deeply padded seat and then continues in a single graceful curve until it almost hits the floor. The solid maple wood frames are given a handsome walnut finish. The striated-turned legs lend a touch of elegance. The supple, high grade leather is black with dark brown highlights due to its age. They are definitely antiques that have weathered beautifully over the years. A traditional nailhead trim provides the perfect finishing touch to these magnificent leather couches.
          </Base:Description>
          <Base:Description type="look">
             The black couches have a large roll-back top, a waterfall of button-tufted leather which cascades downwards to a deeply padded seat and then continues in a single graceful curve until it almost hits the floor.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="intercom" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="false" inside="false" near="true" over="false" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="intercom"/>
            <Base:SName sname="speaker"/>
            <Base:SName sname="button"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="brushed"/>
          <Base:Adjective adjective="intercom"/>
          <Base:Adjective adjective="metal"/>
          <Base:Adjective adjective="simple"/>
          <Base:Adjective adjective="south"/>
          <Base:Adjective adjective="southern"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the intercom
          </Base:Description>
          <Base:Description type="examine">
             The intercom is planted on the south wall, just west of the door. It is a simple brushed metal design bearing a speaker and a single button upon its face. It allows one to converse with those within the house. [Push Button and Evoke. i.e. push button 'Hello, can I get some help?]
          </Base:Description>
          <Base:Description type="look">
             The intercom is planted on the south wall, just west of the door. It is a simple brushed metal design bearing a speaker and a single button upon its face. It allows one to converse with those within the house. [Push Button and Evoke. i.e. push button 'Hello, can I get some help?]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="lightswitch" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="false" inside="false" near="true" over="false" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="switch"/>
            <Base:SName sname="toggle"/>
            <Base:SName sname="lightswitch"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="brushed"/>
          <Base:Adjective adjective="light"/>
          <Base:Adjective adjective="metal"/>
          <Base:Adjective adjective="north"/>
          <Base:Adjective adjective="northern"/>
          <Base:Adjective adjective="simple"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the light switch
          </Base:Description>
          <Base:Description type="examine">
             The lightswitch is planted on the north wall, just west of the door. It is a brushed metal design bearing a simple toggle switch to control the chandelier. {? greaterthan | $(this.details:chandelier:luminosity) | 1.0 | The light switch is turned on. [You may 'turn off' the switch.] | The light switch is turned off. [You may 'turn on' the switch.] }
          </Base:Description>
          <Base:Description type="look">
             The lightswitch is planted on the north wall, just west of the door. It is a brushed metal design bearing a simple toggle switch to control the chandelier. {? greaterthan | $(this.details:chandelier:luminosity) | 1.0 | The light switch is turned on. [You may 'turn off' the switch.] | The light switch is turned off. [You may 'turn on' the switch.] }
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="new" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             NEW detail
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="plant_1" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="false" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="plant"/>
            <Base:SName sname="shrub"/>
            <Base:SName sname="juniper"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="plants"/>
            <Base:PName pname="shrubs"/>
            <Base:PName pname="junipers"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="juniper"/>
          <Base:Adjective adjective="low-spreading"/>
          <Base:Adjective adjective="needle-like"/>
          <Base:Adjective adjective="ornamental"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             ornamental juniper shrub
          </Base:Description>
          <Base:Description type="examine">
             A low-spreading, ornamental shrub with needle-like, green leaves in whorls of three.
          </Base:Description>
          <Base:Description type="look">
             A low-spreading juniper shrub.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="plant_2" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="false" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="plant"/>
            <Base:SName sname="shrub"/>
            <Base:SName sname="juniper"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="plants"/>
            <Base:PName pname="shrubs"/>
            <Base:PName pname="junipers"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="juniper"/>
          <Base:Adjective adjective="low-spreading"/>
          <Base:Adjective adjective="needle-like"/>
          <Base:Adjective adjective="ornamental"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             ornamental juniper shrub
          </Base:Description>
          <Base:Description type="examine">
             A low-spreading, ornamental shrub with needle-like, green leaves in whorls of three.
          </Base:Description>
          <Base:Description type="look">
             A low-spreading juniper shrub.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="rug" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="false" near="true" over="true" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="rug"/>
            <Base:SName sname="carpet"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="rugs"/>
            <Base:PName pname="carpets"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="area"/>
          <Base:Adjective adjective="cotton"/>
          <Base:Adjective adjective="cream"/>
          <Base:Adjective adjective="lavendar"/>
          <Base:Adjective adjective="woven"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the lavendar and cream area rug
          </Base:Description>
          <Base:Description type="examine">
             A cotton woven area rug crosses the floor at a diagonal; northeast to southwest. The hatchwork pattern is lavendar on cream with tassel-style ends.
          </Base:Description>
          <Base:Description type="look">
             A cotton woven area rug crosses the floor at a diagonal; northeast to southwest. The hatchwork pattern is lavendar on cream with tassel-style ends.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="shelf_1" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="shelf"/>
            <Base:SName sname="tier"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="corner"/>
          <Base:Adjective adjective="curved"/>
          <Base:Adjective adjective="first"/>
          <Base:Adjective adjective="top"/>
          <Base:Adjective adjective="unit"/>
          <Base:Adjective adjective="wood"/>
          <Base:Adjective adjective="wooden"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the top shelf of a curved corner unit
          </Base:Description>
          <Base:Description type="examine">
             This is the uppermost tier (shelf) of a curved corner unit. It is slightly shorter in length and depth than the other two shelves. It holds two trophies called WOE and TAS.
          </Base:Description>
          <Base:Description type="look">
             This is the uppermost tier (shelf) of a curved corner unit. It is slightly shorter in length and depth than the other two shelves. It holds two trophies called WOE and TAS.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="shelf_2" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="shelf"/>
            <Base:SName sname="tier"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="corner"/>
          <Base:Adjective adjective="curved"/>
          <Base:Adjective adjective="middle"/>
          <Base:Adjective adjective="second"/>
          <Base:Adjective adjective="unit"/>
          <Base:Adjective adjective="wood"/>
          <Base:Adjective adjective="wooden"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the middle shelf of a curved corner unit
          </Base:Description>
          <Base:Description type="examine">
             This is the middle tier (shelf) of a curved corner unit. It is slightly shorter in length and depth than the shelf below and slightly larger than the one above. It holds three trophies called Parser, Playerbase, and Wholist.
          </Base:Description>
          <Base:Description type="look">
             This is the middle tier (shelf) of a curved corner unit. It is slightly shorter in length and depth than the shelf below and slightly larger than the one above. It holds three trophies called Parser, Playerbase, and Wholist.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="shelf_3" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="shelf"/>
            <Base:SName sname="tier"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="bottom"/>
          <Base:Adjective adjective="corner"/>
          <Base:Adjective adjective="curved"/>
          <Base:Adjective adjective="third"/>
          <Base:Adjective adjective="unit"/>
          <Base:Adjective adjective="wood"/>
          <Base:Adjective adjective="wooden"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the bottom shelf of a curved corner unit
          </Base:Description>
          <Base:Description type="examine">
             This is the bottom tier (shelf) of a curved corner unit. It is slightly longer in length and depth than the other two shelves. It holds two trophies called Forum and @Vote.
          </Base:Description>
          <Base:Description type="look">
             This is the bottom tier (shelf) of a curved corner unit. It is slightly longer in length and depth than the other two shelves. It holds two trophies called Forum and @Vote.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="shelf_all" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="false" inside="false" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="shelves"/>
            <Base:SName sname="tiers"/>
            <Base:SName sname="unit"/>
            <Base:SName sname="units"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="corner"/>
          <Base:Adjective adjective="curved"/>
          <Base:Adjective adjective="shelved"/>
          <Base:Adjective adjective="unit"/>
          <Base:Adjective adjective="wood"/>
          <Base:Adjective adjective="wooden"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the bottom shelf of a curved corner unit
          </Base:Description>
          <Base:Description type="examine">
             A wooden corner unit consisting of three curved shelves, each slightly shorter from the bottom up. The shelves hold trophies of several different types.
          </Base:Description>
          <Base:Description type="look">
             A wooden corner unit consisting of three curved shelves, each slightly shorter from the bottom up. The shelves hold trophies of several different types.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="trophy_TAS" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="false" inside="false" near="true" over="true" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="trophy"/>
            <Base:SName sname="tas"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="clay"/>
          <Base:Adjective adjective="modeling"/>
          <Base:Adjective adjective="tas"/>
          <Base:Adjective adjective="train"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             TAS
          </Base:Description>
          <Base:Description type="examine">
             This trophy is built from modeling clay and somewhat resembles a train with a puff of smoke billowing upward. Within the smoke, the letters "TAS" were etched.
          </Base:Description>
          <Base:Description type="look">
             This trophy is built from modeling clay and somewhat resembles a train with a puff of smoke billowing upward. Within the smoke, the letters "TAS" were etched.
          </Base:Description>
          <Base:Description type="writing">
             "TAS"
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="trophy_WOE" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="false" inside="false" near="true" over="true" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="trophy"/>
            <Base:SName sname="woe"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="block"/>
          <Base:Adjective adjective="small"/>
          <Base:Adjective adjective="tree"/>
          <Base:Adjective adjective="woe"/>
          <Base:Adjective adjective="wood"/>
          <Base:Adjective adjective="wooden"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             WOE
          </Base:Description>
          <Base:Description type="examine">
             This trophy is shaped like a small tree rising from a wooden block and bearing a plaque in its arms. The plaque is written in a blocky script and says "WOE".
          </Base:Description>
          <Base:Description type="look">
             This trophy is shaped like a small tree rising from a wooden block and bearing a plaque in its arms. The plaque is written in a blocky script and says "WOE".
          </Base:Description>
          <Base:Description type="writing">
             "WOE"
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="trophy_all" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="true">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="trophies"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             several trophies standing on wooden shelves
          </Base:Description>
          <Base:Description type="examine">
             Several trophies stand on a set of wooden shelves in the northeast corner.
          </Base:Description>
          <Base:Description type="look">
             Several trophies stand on a set of wooden shelves in the northeast corner.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="trophy_forum" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="false" inside="false" near="true" over="true" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="trophy"/>
            <Base:SName sname="forum"/>
            <Base:SName sname="forums"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="forum"/>
          <Base:Adjective adjective="forums"/>
          <Base:Adjective adjective="papyrus"/>
          <Base:Adjective adjective="scroll"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the Forums
          </Base:Description>
          <Base:Description type="examine">
             This trophy looks like a papyrus scroll curled and hardened. <sbr/> $[Popup($actor, this, "html:forumboard");] Written upon it, in a cursive script is: "The notices are represented by an In Character forum at http://forum.skotos.net/forumdisplay.php?s=\&forumid=94"
          </Base:Description>
          <Base:Description type="look">
             This trophy looks like a papyrus scroll curled and hardened. <sbr/> $[Popup($actor, this, "html:forumboard");] Written upon it, in a cursive script is: The notices are represented by an In Character forum at http://forum.skotos.net/forumdisplay.php?s=\&forumid=94
          </Base:Description>
          <Base:Description type="writing">
             "The notices are represented by an In Character forum at http://forum.skotos.net/forumdisplay.php?s=\&forumid=94"
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="trophy_parser" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="false" inside="false" near="true" over="true" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="trophy"/>
            <Base:SName sname="parser"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="board"/>
          <Base:Adjective adjective="dry"/>
          <Base:Adjective adjective="erase"/>
          <Base:Adjective adjective="parser"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the Parser
          </Base:Description>
          <Base:Description type="examine">
             This trophy is not a real trophy at all but rather an enchanted dry erase board. With measurements of only a few inches square, there is barely room to write any lengthy messages and those which are written often get garbled. Along the top of the frame there is the stenciled word "Parser".
          </Base:Description>
          <Base:Description type="look">
             This trophy is not a real trophy at all but rather an enchanted dry erase board. With measurements of only a few inches square, there is barely room to write any lengthy messages and those which are written often get garbled. Along the top of the frame there is the stenciled word "Parser".
          </Base:Description>
          <Base:Description type="writing">
             "Parser"
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="trophy_playerbase" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="false" inside="false" near="true" over="true" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="trophy"/>
            <Base:SName sname="playerbase"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="brass"/>
          <Base:Adjective adjective="mob"/>
          <Base:Adjective adjective="playerbase"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the Playerbase
          </Base:Description>
          <Base:Description type="examine">
             This trophy is a brass depiction showing a mob of anthropomorphic citizens holding several picket signs. Each sign bears a single letter yet together they spell "Playerbase".
          </Base:Description>
          <Base:Description type="look">
             This trophy is a brass depiction showing a mob of anthropomorphic citizens holding several picket signs. Each sign bears a single letter yet together they spell "Playerbase".
          </Base:Description>
          <Base:Description type="writing">
             "Playerbase"
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="trophy_tas" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="trophy"/>
            <Base:SName sname="tas"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="clay"/>
          <Base:Adjective adjective="modeling"/>
          <Base:Adjective adjective="tas"/>
          <Base:Adjective adjective="train"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">TAS</Base:Description>
          <Base:Description type="examine">
             This trophy is built from modeling clay and somewhat resembles a train with a puff of smoke billowing upward. Within the smoke, the letters "TAS" were etched.
          </Base:Description>
          <Base:Description type="look">
             This trophy is built from modeling clay and somewhat resembles a train with a puff of smoke billowing upward. Within the smoke, the letters "TAS" were etched.
          </Base:Description>
          <Base:Description type="writing">"TAS"</Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="trophy_vote" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="false" inside="false" near="true" over="true" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="trophy"/>
            <Base:SName sname="vote"/>
            <Base:SName sname="@vote"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="@"/>
          <Base:Adjective adjective="@vote"/>
          <Base:Adjective adjective="gold"/>
          <Base:Adjective adjective="pure"/>
          <Base:Adjective adjective="thick"/>
          <Base:Adjective adjective="vote"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the @Vote
          </Base:Description>
          <Base:Description type="examine">
             This trophy is a thick, pure gold "@" symbol representing the vote of the players.
          </Base:Description>
          <Base:Description type="look">
             This trophy is a thick, pure gold "@" symbol representing the vote of the players.
          </Base:Description>
          <Base:Description type="writing">"@"</Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="trophy_who" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="false" inside="false" near="true" over="true" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="trophy"/>
            <Base:SName sname="who"/>
            <Base:SName sname="wholist"/>
            <Base:SName sname="list"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="fuzzy"/>
          <Base:Adjective adjective="lint"/>
          <Base:Adjective adjective="list"/>
          <Base:Adjective adjective="who"/>
          <Base:Adjective adjective="wholist"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the Who List
          </Base:Description>
          <Base:Description type="examine">
             This trophy is a fuzzy piece of lint that interferes with your brain patterns and injects you with the preceding data. <br/> $[Call($this, "general_who"); return FALSE]
          </Base:Description>
          <Base:Description type="look">
             This trophy is a fuzzy piece of lint that interferes with your brain patterns and injects you with the preceding data. <br/> $[Call($this, "general_who"); return FALSE]
          </Base:Description>
          <Base:Description type="writing">
             "The WHO List"
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="trophy_woe" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="trophy"/>
            <Base:SName sname="woe"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="block"/>
          <Base:Adjective adjective="small"/>
          <Base:Adjective adjective="tree"/>
          <Base:Adjective adjective="woe"/>
          <Base:Adjective adjective="wood"/>
          <Base:Adjective adjective="wooden"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">WOE</Base:Description>
          <Base:Description type="examine">
             This trophy is shaped like a small tree rising from a wooden block and bearing a plaque in its arms. The plaque is written in a blocky script and says "WOE".
          </Base:Description>
          <Base:Description type="look">
             This trophy is shaped like a small tree rising from a wooden block and bearing a plaque in its arms. The plaque is written in a blocky script and says "WOE".
          </Base:Description>
          <Base:Description type="writing">"WOE"</Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="whiteboard" prime="false" def="false" abstract="false" hidden="false" luminosity="100" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="false" near="true" over="true" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="board"/>
            <Base:SName sname="whiteboard"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="boards"/>
            <Base:PName pname="whiteboards"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="large"/>
          <Base:Adjective adjective="white"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             large whiteboard
          </Base:Description>
          <Base:Description type="look">
             A large whiteboard. Written upon it is:<br/> Projects: <br/><br/> Welcoming centre: <br/>- IC Meepers and others are working on a welcoming centre that will aid newly arrived in the city. I think it's still waiting for some IC stuff before it can progress, but will need to be built eventually, as well as some NPCs with quests etc to be made for it with time. <br/><br/>Graveyard<br/>- 3 partially dug graves inside the graveyard in east Newtown. For now this will be considered the consecrated area. In the northeastern corner is a small section for unconsecrated. Graves can be built to RP with then will be covered and RPed as if they are there. Gravestone can be added as well. Partially dug graves will be fully dug once proper RP and further information from Virendra has been received. - Artemis <br/><br/> Tree in Commons<br/> - Replacement tree is now currently in Althea's possession. - Artemis can build the detail of the tree and help unhide it when it's ready. <br/><br/> Criminal rental place<br/> - There's a magical floating book in the room that works as a concierge. Haven't added a guard yet, but we can release without it (worst case, "good guys" get a room and then we add the guard and they can't get to the room. Suckers, that's what they get for moving into a criminal den.)<br/><br/>Docktown boarding house<br/> - Needs to be made more shabby, the rooms made cheaper and then converted to the new renting system - Nyx said she'd make it shabby. -- Working on it. <br/><br/> Arena<br/> Work for NPCs for the Arena with varying levels. - Artemis smaller baby project. <br/><br/>Sewers<br/> - needs an overhaul and then AA areas leading off from them for people to explore and do stuff in, ideally with NPCs who'll attack lawful people and aid criminals. - Artemis has this as her baby project<br/><br/>Roo's AA<br/> - should just be waiting on the NPCs to be done. <br/><br/> Starting careers<br/>All agree that players should be able to purchase starting skills and careers for storypoints. Propose that we charge proportional to the number of learning points it would have cost. Suggested price of around 500 storypoints for a max career level. Only available for new characters.<br/><br/>Promotions<br/>- Az is working on new code based on loyalty/groups so we can start promotions again<br/><br/>Auction Blacklists<br/>- Roo will update the code so the house blacklisting will be reset with each new vote in the house. That way the new leader will have to actually consider if it should be continued or not and RP can go around why or why not.<br/><br/>Clover's promotion<br/>- Not so much a project, but a thing we need to get around to, now that he's working towards it IC again. TAS #32043 - I get the feeling he'll again try to get out of owing alliance to anyone, though does understand he'll need a sponsor from the Church (of which there are no PC apart from his alt). But I'm not sure he understands precisely what it means. Also, should we let him know of the new alliance/rank system and offer him to become Guild Council rank instead (but not have a minor house as he wants), and can he have a minor house being under the Church?<br/><br/>
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="auto-trait:integration:81107">
         \<[Allegory:Props:Furniture:Outdoor:TrashReceptacle]#81107\>
      </Core:Property>
      <Core:Property property="auto-trait:integration:98737">
         \<[IronClaw:Rooms:Staff:Vic:Props:TV]#98737\>
      </Core:Property>
      <Core:Property property="html:forumboard">
         X[S] \<head\>
\<meta http-equiv="refresh" content="0;URL=http://forum.skotos.net/forumdisplay.php?s=\&forumid=94"/\>
\</head\>
\<a href="http://forum.skotos.net/forumdisplay.php?s=\&forumid=94"\>Click here to read the messages on this board\</a\>
      </Core:Property>
      <Core:Property property="islightable">
         (\{ "lightswitch" \})
      </Core:Property>
      <Core:Property property="merry:lib:general_who">
         X[M] string bodystr, bodyname, output, words, *indices, *arr, stridle;                   
int i, sz_i, sz, n, rows, idlelen;                   
object *bodylist, body;                   
mapping whofour, staff, idle, players, hidden, hiddenidle, away;                   
                   
\{                   
  bodylist   = common::wholist();                   
  sz_i       = sizeof(bodylist);                   
  staff      = ([ ]);                   
  idle       = ([ ]);                   
  players    = ([ ]);                   
  hidden     = ([ ]);                   
  hiddenidle = ([ ]);                   
  whofour    = ([ ]);                   
  away       = ([ ]);                   
  words      = (\$(dob:words) ? implode(\$(dob:words), " ") : nil);                   
  idlelen    = 0;                   
                   
if(words == "guild") \{                   
EmitTo(\$actor, "okies.");               
               
  for (i = 0; i \< sz_i; i++) \{                   
    body     = bodylist[i];                   
    bodystr  = Str(body);                   
    bodyname = (\$actor."udat:host" == 1 ? (body.disguised == 1 ? Describe(body) + " (" + body."skotos:playercapname" + ")" : Describe(body)) : Describe(body));                   
    /* bodyname = strip(UnSAM(body."detail:description:brief", \$this: body)); */                   
    if (!body."udat:possessed") \{                   
      continue;                   
    \} else if (\$actor.guild \&\& body.guild != \$actor.guild) \{                   
        continue;                   
    \} else if (\$whofour) \{                   
      stridle = common::convsecs(\$secs: body."udat:idle", \$short: TRUE);                   
      idlelen = ((\$r1 = strlen(stridle)) \> idlelen ? \$r1 : idlelen);                   
      whofour[bodyname] = stridle;                   
      continue;                   
    \} else if (body."theatre:notwhobody" \&\&                   
               body."udat:idle" \>= 3600) \{                   
      hiddenidle[bodyname] = TRUE;                   
      continue;                   
    \} else if (body."theatre:notwhobody") \{                   
      hidden[bodyname] = TRUE;                   
      continue;                   
    \}                   
                   
    if (body."udat:idle" \>= 3600) \{                   
      idle[bodyname] = TRUE;                   
      continue;                   
    \} else if (sizeof(explode(bodyname, " ")) \>= 2 \&\& contains(bodyname, "Story")) \{                   
      staff[bodyname] = TRUE;                   
      continue;                   
    \} else if (body."cdat:away") \{                   
      away[bodyname] = TRUE;                   
      continue;                   
    \} else \{                   
      players[bodyname] = TRUE;                   
    \}                   
  \}                   
                   
  output  = "";                   
                   
  if (\$whofour) \{                   
    if (map_sizeof(whofour) \> 0) \{                   
      sz_i    = map_sizeof(whofour);                   
      indices = map_indices(whofour);                   
      rows    = Int(ceil(Flt(sz_i) / Flt(3)));                   
      arr     = (\{ (\{ "Characters", "Idle", "Characters", "Idle", "Characters", "Idle" \}) \});                   
                   
      for (i = 0; i \< rows; i++) \{                   
        arr += (\{ (\{ ( i \>= sz_i ? "" : indices[i]),                   
                     ( i \>= sz_i ? "" : pad_left(whofour[indices[i]], idlelen)),                   
                     ((n = i + rows) \>= sz_i ? "" : indices[n]),                   
                     ((n = i + rows) \>= sz_i ? "" : pad_left(whofour[indices[n]], idlelen)),                   
                     ((n = i + rows + rows) \>= sz_i ? "" : indices[n]),                   
                     ((n = i + rows + rows) \>= sz_i ? "" : pad_left(whofour[indices[n]], idlelen)) \}) \});                   
      \}                   
      EmitTo(\$actor, ascii::table(\$content: arr, \$ignoreseparator: "top bottom left right"));                   
      return FALSE;                   
    \}                   
  \}                   
                   
  if (\$actor."who:alternate") \{                   
    if (map_sizeof(players) \> 0) \{                   
      sz_i    = map_sizeof(players);                   
      indices = map_indices(players);                   
      rows    = Int(ceil(Flt(sz_i) / Flt(4)));                   
      arr     = (\{ (\{ "Characters", "Characters", "Characters", "Characters" \}) \});                   
                   
      for (i = 0; i \< rows; i++) \{                   
        arr += (\{ (\{ ( i \>= sz_i ? "" : indices[i]),                   
                     ((n = i + rows) \>= sz_i ? "" : indices[n]),                   
                     ((n = i + rows + rows) \>= sz_i ? "" : indices[n]),                   
                     ((n = i + rows + rows + rows) \>= sz_i ? "" : indices[n]) \}) \});                   
      \}                   
      EmitTo(\$actor, PRE( "Online[" + Str(sz_i) + "] (" + smalltime(time()) + " EST): \\n" + ascii::table(\$content: arr, \$skipfirst: TRUE)));                   
    \}                   
  \} else \{                   
    if (map_sizeof(players) \> 0) \{                   
      sz      = map_sizeof(players);                   
      indices = map_indices(players);                   
      output += "Online[" + Str(sz) + "] (" + smalltime(time()) + " EST): " + TAG(                   
                                            (sz \> 1 ?                   
                                             implode(indices[..sz - 2], ", ") + " and " +                   
                                             indices[sz - 1] :                   
                                             indices[0]) + ".", "who") + "\\n";                   
    \}                   
  \}                   
                   
  if (map_sizeof(staff) \> 0) \{                   
    sz      = map_sizeof(staff);                   
    indices = map_indices(staff);                   
    output += "Staff[" + Str(sz) + "]: " + TAG(                   
                                          (sz \> 1 ?                   
                                           implode(indices[..sz - 2], ", ") + " and " +                   
                                           indices[sz - 1] :                   
                                           indices[0]) + ".", "who") + "\\n";                   
  \}                   
                   
  if (map_sizeof(idle) \> 0) \{                   
    sz      = map_sizeof(idle);                   
    indices = map_indices(idle);                   
    output += "Idle[" + Str(sz) + "]: " + TAG(                   
                                                   (sz \> 1 ?                   
                                                    implode(indices[..sz - 2], ", ") + " and " +                   
                                                    indices[sz - 1] :                   
                                                    indices[0]) + ".", "who") + "\\n";                   
  \}                   
                   
  if (map_sizeof(away) \> 0) \{                   
    sz      = map_sizeof(away);                   
    indices = map_indices(away);                   
    output += "Away[" + Str(sz) + "]: " + TAG(                   
                                                   (sz \> 1 ?                   
                                                    implode(indices[..sz - 2], ", ") + " and " +                   
                                                    indices[sz - 1] :                   
                                                    indices[0]) + ".", "who") + "\\n";                   
  \}                   
                   
  if (\$actor."udat:host") \{                   
      if (map_sizeof(hidden) \> 0) \{                   
       sz      = map_sizeof(hidden);                   
       indices = map_indices(hidden);                   
       output += "Dark[" + Str(sz) + "]: " + TAG(                   
                                                   (sz \> 1 ?                   
                                                    implode(indices[..sz - 2], ", ") + " and " +                   
                                                    indices[sz - 1] :                   
                                                    indices[0]) + ".", "who") + "\\n";                   
    \}                   
      if (map_sizeof(hiddenidle) \> 0) \{                   
        sz      = map_sizeof(hiddenidle);                   
        indices = map_indices(hiddenidle);                   
        output += "Dark and idle[" + Str(sz) + "]: " + TAG(                   
                                                   (sz \> 1 ?                   
                                                    implode(indices[..sz - 2], ", ") + " and " +                   
                                                    indices[sz - 1] :                   
                                                    indices[0]) + ".", "who") + "\\n";                   
    \}                   
  \}                   
                   
  if (strlen(output) \< 1) \{                   
    output += "Unable to locate anyone online" + (words ? " in your \\'" + words + "\\'." : ".");                   
  \}                     
  EmitTo(\$actor, output);                
return FALSE;                   
\} else \{                 
                   
  for (i = 0; i \< sz_i; i++) \{                   
    body     = bodylist[i];                   
    bodystr  = Str(body);                   
    bodyname = (\$actor."udat:host" == 1 ? (body.disguised == 1 ? Describe(body) + " (" + body."skotos:playercapname" + ")" : Describe(body)) : Describe(body));                   
    /* bodyname = strip(UnSAM(body."detail:description:brief", \$this: body)); */                   
    if (!body."udat:possessed") \{                   
      continue;                   
    \} else if (words \&\& !contains(lower_case(bodyname), words)) \{                   
        continue;                   
    \} else if (\$whofour) \{                   
      stridle = common::convsecs(\$secs: body."udat:idle", \$short: TRUE);                   
      idlelen = ((\$r1 = strlen(stridle)) \> idlelen ? \$r1 : idlelen);                   
      whofour[bodyname] = stridle;                   
      continue;                   
    \} else if (body."theatre:notwhobody" \&\&                   
               body."udat:idle" \>= 3600) \{                   
      hiddenidle[bodyname] = TRUE;                   
      continue;                   
    \} else if (body."theatre:notwhobody") \{                   
      hidden[bodyname] = TRUE;                   
      continue;                   
    \}                   
                   
    if (body."udat:idle" \>= 3600) \{                   
      idle[bodyname] = TRUE;                   
      continue;                   
    \} else if (sizeof(explode(bodyname, " ")) \>= 2 \&\& contains(bodyname, "Story")) \{                   
      staff[bodyname] = TRUE;                   
      continue;                   
    \} else if (body."cdat:away") \{                   
      away[bodyname] = TRUE;                   
      continue;                   
    \} else \{                   
      players[bodyname] = TRUE;                   
    \}                   
  \}                   
                   
  output  = "";                   
                   
  if (\$whofour) \{                   
    if (map_sizeof(whofour) \> 0) \{                   
      sz_i    = map_sizeof(whofour);                   
      indices = map_indices(whofour);                   
      rows    = Int(ceil(Flt(sz_i) / Flt(3)));                   
      arr     = (\{ (\{ "Characters", "Idle", "Characters", "Idle", "Characters", "Idle" \}) \});                   
                   
      for (i = 0; i \< rows; i++) \{                   
        arr += (\{ (\{ ( i \>= sz_i ? "" : indices[i]),                   
                     ( i \>= sz_i ? "" : pad_left(whofour[indices[i]], idlelen)),                   
                     ((n = i + rows) \>= sz_i ? "" : indices[n]),                   
                     ((n = i + rows) \>= sz_i ? "" : pad_left(whofour[indices[n]], idlelen)),                   
                     ((n = i + rows + rows) \>= sz_i ? "" : indices[n]),                   
                     ((n = i + rows + rows) \>= sz_i ? "" : pad_left(whofour[indices[n]], idlelen)) \}) \});                   
      \}                   
      EmitTo(\$actor, ascii::table(\$content: arr, \$ignoreseparator: "top bottom left right"));                   
      return FALSE;                   
    \}                   
  \}                   
                   
  if (\$actor."who:alternate") \{                   
    if (map_sizeof(players) \> 0) \{                   
      sz_i    = map_sizeof(players);                   
      indices = map_indices(players);                   
      rows    = Int(ceil(Flt(sz_i) / Flt(4)));                   
      arr     = (\{ (\{ "Characters", "Characters", "Characters", "Characters" \}) \});                   
                   
      for (i = 0; i \< rows; i++) \{                   
        arr += (\{ (\{ ( i \>= sz_i ? "" : indices[i]),                   
                     ((n = i + rows) \>= sz_i ? "" : indices[n]),                   
                     ((n = i + rows + rows) \>= sz_i ? "" : indices[n]),                   
                     ((n = i + rows + rows + rows) \>= sz_i ? "" : indices[n]) \}) \});                   
      \}                   
      EmitTo(\$actor, PRE( "Online[" + Str(sz_i) + "] (" + smalltime(time()) + " EST): \\n" + ascii::table(\$content: arr, \$skipfirst: TRUE)));                   
    \}                   
  \} else \{                   
    if (map_sizeof(players) \> 0) \{                   
      sz      = map_sizeof(players);                   
      indices = map_indices(players);                   
      output += "Online[" + Str(sz) + "] (" + smalltime(time()) + " EST): " + TAG(                   
                                            (sz \> 1 ?                   
                                             implode(indices[..sz - 2], ", ") + " and " +                   
                                             indices[sz - 1] :                   
                                             indices[0]) + ".", "who") + "\\n";                   
    \}                   
  \}                   
                   
  if (map_sizeof(staff) \> 0) \{                   
    sz      = map_sizeof(staff);                   
    indices = map_indices(staff);                   
    output += "Staff[" + Str(sz) + "]: " + TAG(                   
                                          (sz \> 1 ?                   
                                           implode(indices[..sz - 2], ", ") + " and " +                   
                                           indices[sz - 1] :                   
                                           indices[0]) + ".", "who") + "\\n";                   
  \}                   
                   
  if (map_sizeof(idle) \> 0) \{                   
    sz      = map_sizeof(idle);                   
    indices = map_indices(idle);                   
    output += "Idle[" + Str(sz) + "]: " + TAG(                   
                                                   (sz \> 1 ?                   
                                                    implode(indices[..sz - 2], ", ") + " and " +                   
                                                    indices[sz - 1] :                   
                                                    indices[0]) + ".", "who") + "\\n";                   
  \}                   
                   
  if (map_sizeof(away) \> 0) \{                   
    sz      = map_sizeof(away);                   
    indices = map_indices(away);                   
    output += "Away[" + Str(sz) + "]: " + TAG(                   
                                                   (sz \> 1 ?                   
                                                    implode(indices[..sz - 2], ", ") + " and " +                   
                                                    indices[sz - 1] :                   
                                                    indices[0]) + ".", "who") + "\\n";                   
  \}                   
                   
  if (\$actor."udat:host") \{                   
      if (map_sizeof(hidden) \> 0) \{                   
       sz      = map_sizeof(hidden);                   
       indices = map_indices(hidden);                   
       output += "Dark[" + Str(sz) + "]: " + TAG(                   
                                                   (sz \> 1 ?                   
                                                    implode(indices[..sz - 2], ", ") + " and " +                   
                                                    indices[sz - 1] :                   
                                                    indices[0]) + ".", "who") + "\\n";                   
    \}                   
      if (map_sizeof(hiddenidle) \> 0) \{                   
        sz      = map_sizeof(hiddenidle);                   
        indices = map_indices(hiddenidle);                   
        output += "Dark and idle[" + Str(sz) + "]: " + TAG(                   
                                                   (sz \> 1 ?                   
                                                    implode(indices[..sz - 2], ", ") + " and " +                   
                                                    indices[sz - 1] :                   
                                                    indices[0]) + ".", "who") + "\\n";                   
    \}                   
  \}                   
                   
  if (strlen(output) \< 1) \{                   
    output += "Unable to locate anyone online" + (words ? " containing \\'" + words + "\\'." : ".");                   
  \}                   
                   
  EmitTo(\$actor, output);                   
\}                   
                   
\}
      </Core:Property>
      <Core:Property property="merry:react-post:push-dob">
         X[M] if(sizeof(\$dob) == 1 \&\& NRefDetail(\$dob[0]) == "intercom") \{                                            
Call(\$\{Ironclaw:Lib:Builders:Lib\}, "intercom_system", \$actor: \$actor, \$loc: \$this, \$evoke: \$evoke, \$sys: "backstage" );                              
   \}                                                           
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:rummage-iob">
         X[M] if(sizeof(\$iob) == 1 \&\& NRefDetail(\$iob[0]) == "box-pile") \{       
\$prep = \$(iob:preposition);     
if(\$prep == "through") \{     
/* \$arg = dump_value( args );    */       
/* EmitTo(\$actor, \$arg);    */    
   
if(\$actor."holiday:christmas:presents" \&\& \$actor."holiday:christmas:presents" \>= 3) \{   
EmitTo(\$actor, "There are no more boxes with your name on it.");   
EmitIn(\$actor."base:environment", Describe(\$actor)+ " is unable to find any more boxes with " +\$actor."base:possessive"+ " name on it.", \$actor);   
\} else \{   
\$box = Spawn(\$\{Ironclaw:Holidays:Christmas:Props:GiftBox\});     
EmitTo(\$actor, "You found " +Describe(\$box)+ " with your name on it!");     
EmitIn(\$actor."base:environment", Describe(\$actor)+ " found " +Describe(\$box)+ " with " +\$actor."base:possessive"+ " name on it!", \$actor);     
\$box."base:environment" = \$actor;      
   
if(!\$actor."holiday:christmas:presents") \{   
\$count = 1;   
\} else \{   
\$count = Get(\$actor, "holiday:christmas:presents");   
\$count += 1;   
\}   
\$id = ironclaw::set_prop(\$obj: \$actor, \$prop: "holiday:christmas:presents", \$value: \$count, \$timer: 7776000);    
return TRUE;   
\}   
return TRUE;           
\}     
return TRUE;     
\}           
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:turn-dob">
         X[M] if(sizeof(\$dob) == 1) \{                                 
   if(member(NRefDetail(\$dob[0]), Arr(\$this.islightable))) \{                 
\$light = NewNRef(\$this, "chandelier");                                 
      Call(\$\{Ironclaw:Lib:Builders:Lib\}, "turnoffdetail", \$actor: \$actor, \$det: \$light, \$id: NRefDetail(\$light), \$loc: \$this );                               
   \}                                
return TRUE;                            
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:turn-iob">
         X[M] if(sizeof(\$iob) == 1) \{                                 
   if(member(NRefDetail(\$iob[0]), Arr(\$this.islightable))) \{                  
\$light = NewNRef(\$this, "chandelier");                                
      Call(\$\{Ironclaw:Lib:Builders:Lib\}, "turnondetail", \$actor: \$actor, \$det: \$light, \$id: NRefDetail(\$light), \$loc: \$this );                               
   \}                            
return TRUE;                                
\}
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1293147465, "tunk_bodin", "X", 1293147666, "tunk_bodin", "X", 1293440894, "tunk_bodin", "X", 1293442121, "tunk_bodin", "X", 1293442142, "tunk_bodin", "X", 1293442823, "tunk_bodin", "X", 1293499050, "tunk_bodin", "X", 1293504330, "tunk_bodin", "X", 1307467709, "tunk_bodin", "X", 1307482223, "tunk_bodin", "X", 1367735923, "pp74", "K", 1367735984, "pp74", "K", 1367736017, "pp74", "K", 1367752853, "pp74", "K", 1416773354, "pp74", "E", 1416773478, "pp74", "E", 1416773618, "pp74", "K", 1416774312, "pp74", "X", 1416775015, "pp74", "K", 1416775111, "pp74", "K", 1416775202, "pp74", "K", 1416775213, "pp74", "K", 1416775235, "pp74", "K", 1416775365, "pp74", "K", 1416775525, "pp74", "X", 1416775765, "pp74", "K", 1416898551, "tonyd", "E", 1416953178, "pp74", "K", 1416953287, "pp74", "K", 1416953764, "pp74", "K", 1417350543, "slurpeeslurp", "E", 1417351595, "pp74", "K", 1417554902, "dmwtst", "K", 1417555158, "dmwtst", "K", 1417555401, "dmwtst", "K", 1417558028, "dmwtst", "K" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="sys:emit:population">
         (\{ nil \})
      </Core:Property>
      <Core:Property property="trait:smells:lastchecked">
         1499357378
      </Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
