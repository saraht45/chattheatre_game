<object clone="/base/obj/thing" owner="tunk_bodin">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Ironclaw:World:Triskellian:BayOfAuvrich:UrExitCodes)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="1"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="true" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="false" inside="true" near="true" over="false" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="here"/>
            <Base:SName sname="street"/>
            <Base:SName sname="road"/>
            <Base:SName sname="path"/>
            <Base:SName sname="lane"/>
            <Base:SName sname="way"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="streets"/>
            <Base:PName pname="roads"/>
            <Base:PName pname="paths"/>
            <Base:PName pname="lanes"/>
            <Base:PName pname="ways"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="board"/>
          <Base:Adjective adjective="boardwalk"/>
          <Base:Adjective adjective="dock"/>
          <Base:Adjective adjective="ipe"/>
          <Base:Adjective adjective="walk"/>
          <Base:Adjective adjective="wood"/>
          <Base:Adjective adjective="wooden"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             Dock Street
          </Base:Description>
          <Base:Description type="examine">
             A wooden boardwalk known as Dock Street.<dawn> Morning has broken and the first rays of sunshine can be seen shimmering down.</dawn><morning> The sun has risen and the hustle and bustle of the city is audible.</morning><midday><summer>The midday sun is high in the sky and waves of heat can be seen shimmering off the wooden planking.</summer><winter>The midday sun barely warms the planks beneath your soles.</winter></midday><afternoon><summer> The bright blue skies of the afternoon bathe every corner of the boardwalk in sunlight.</summer><winter> The skies attempt to light the boardwalk with their crisp, cold brilliance.</winter></afternoon><dusk> The sun has set and the boardwalk is shadowed in the failing light.</dusk><evening> Evening has fallen and the boardwalk is dimmed. There is a <summer>slight</summer><winter>deep</winter> chill in the air.</evening><midnight> Midnight has enveloped the silent boardwalk.</midnight><aftermidnight> A slight lightening of the sky bathes the boardwalk in an eerie light as dawn approaches.</aftermidnight>
          </Base:Description>
          <Base:Description type="glance">
             Dock Street.
          </Base:Description>
          <Base:Description type="look">
             A wooden boardwalk known as Dock Street.<dawn> Morning has broken and the first rays of sunshine can be seen shimmering down.</dawn><morning> The sun has risen and the hustle and bustle of the city is audible.</morning><midday><summer>The midday sun is high in the sky and waves of heat can be seen shimmering off the wooden planking.</summer><winter>The midday sun barely warms the planks beneath your soles.</winter></midday><afternoon><summer> The bright blue skies of the afternoon bathe every corner of the boardwalk in sunlight.</summer><winter> The skies attempt to light the boardwalk with their crisp, cold brilliance.</winter></afternoon><dusk> The sun has set and the boardwalk is shadowed in the failing light.</dusk><evening> Evening has fallen and the boardwalk is dimmed. There is a <summer>slight</summer><winter>deep</winter> chill in the air.</evening><midnight> Midnight has enveloped the silent boardwalk.</midnight><aftermidnight> A slight lightening of the sky bathes the boardwalk in an eerie light as dawn approaches.</aftermidnight>
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="bay" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="false" under="true" on="true" inside="true" near="true" over="false" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="bay"/>
            <Base:SName sname="water"/>
            <Base:SName sname="ocean"/>
            <Base:SName sname="sea"/>
            <Base:SName sname="wave"/>
            <Base:SName sname="shore"/>
            <Base:SName sname="coast"/>
            <Base:SName sname="auvrich"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="bays"/>
            <Base:PName pname="waters"/>
            <Base:PName pname="oceans"/>
            <Base:PName pname="seas"/>
            <Base:PName pname="waves"/>
            <Base:PName pname="shores"/>
            <Base:PName pname="coasts"/>
            <Base:PName pname="auvrichs"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="auvrich"/>
          <Base:Adjective adjective="bay"/>
          <Base:Adjective adjective="blue"/>
          <Base:Adjective adjective="blue-green"/>
          <Base:Adjective adjective="coast"/>
          <Base:Adjective adjective="cool"/>
          <Base:Adjective adjective="graceless"/>
          <Base:Adjective adjective="green"/>
          <Base:Adjective adjective="inviting"/>
          <Base:Adjective adjective="ocean"/>
          <Base:Adjective adjective="of"/>
          <Base:Adjective adjective="refreshing"/>
          <Base:Adjective adjective="sea"/>
          <Base:Adjective adjective="shore"/>
          <Base:Adjective adjective="water"/>
          <Base:Adjective adjective="wave"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the Bay of Auvrich
          </Base:Description>
          <Base:Description type="examine">
             The Bay of Auvrich. {The blue-green waves crash gracelessly against the shore.|The deep blue water seems inviting.|The colors of the sky reflect on the water's surface.|The grand expanse of water seems endless.|The cool, refreshing water extends to the horizon.}
          </Base:Description>
          <Base:Description type="look">
             The Bay of Auvrich.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="boardwalk" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="true" inside="false" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="boardwalk"/>
            <Base:SName sname="walk"/>
            <Base:SName sname="floor"/>
            <Base:SName sname="ground"/>
            <Base:SName sname="board"/>
            <Base:SName sname="plank"/>
            <Base:SName sname="planking"/>
            <Base:SName sname="ipe"/>
            <Base:SName sname="wood"/>
            <Base:SName sname="decking"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="boardwalks"/>
            <Base:PName pname="walks"/>
            <Base:PName pname="floors"/>
            <Base:PName pname="grounds"/>
            <Base:PName pname="boards"/>
            <Base:PName pname="planks"/>
            <Base:PName pname="woods"/>
            <Base:PName pname="ipes"/>
            <Base:PName pname="deckings"/>
            <Base:PName pname="plankings"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="board"/>
          <Base:Adjective adjective="boardwalk"/>
          <Base:Adjective adjective="dock"/>
          <Base:Adjective adjective="fitted"/>
          <Base:Adjective adjective="ipe"/>
          <Base:Adjective adjective="ipe-wood"/>
          <Base:Adjective adjective="nicked"/>
          <Base:Adjective adjective="strong"/>
          <Base:Adjective adjective="walk"/>
          <Base:Adjective adjective="wood"/>
          <Base:Adjective adjective="wooden"/>
          <Base:Adjective adjective="worn"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the boardwalk
          </Base:Description>
          <Base:Description type="examine">
             A series of nicked wooden planks, fitted closely together, comprises this boardwalk. The ipe-wood decking, though worn from years of use, appears to be strong and free of decay and infestation. From this point, it appears to span the southern stretch of Docktown.
          </Base:Description>
          <Base:Description type="look">
             Worn planks of ipe wood comprise the length of this boardwalk.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="churning bay" prime="false" def="true" abstract="false" hidden="true" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="false" under="true" on="true" inside="true" near="true" over="false" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="bay"/>
            <Base:SName sname="water"/>
            <Base:SName sname="ocean"/>
            <Base:SName sname="sea"/>
            <Base:SName sname="wave"/>
            <Base:SName sname="shore"/>
            <Base:SName sname="coast"/>
            <Base:SName sname="debris"/>
            <Base:SName sname="auvrich"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="bays"/>
            <Base:PName pname="waters"/>
            <Base:PName pname="oceans"/>
            <Base:PName pname="seas"/>
            <Base:PName pname="waves"/>
            <Base:PName pname="shores"/>
            <Base:PName pname="coasts"/>
            <Base:PName pname="auvrichs"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="auvrich"/>
          <Base:Adjective adjective="bay"/>
          <Base:Adjective adjective="black"/>
          <Base:Adjective adjective="blackened"/>
          <Base:Adjective adjective="clouded"/>
          <Base:Adjective adjective="coast"/>
          <Base:Adjective adjective="crashing"/>
          <Base:Adjective adjective="foam"/>
          <Base:Adjective adjective="ominous"/>
          <Base:Adjective adjective="sea"/>
          <Base:Adjective adjective="shore"/>
          <Base:Adjective adjective="water"/>
          <Base:Adjective adjective="wave"/>
          <Base:Adjective adjective="white"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the churning Bay of Auvrich
          </Base:Description>
          <Base:Description type="examine">
             The churning Bay of Auvrich looks agitated. {The water has turned an ominous color of black and has white foam forming on it's crashing waves.| Quickly moving debris skips along the shoreline at an alarming rate.| The clouded black water gives you the impression something is amiss.}
          </Base:Description>
          <Base:Description type="look">
             The churning Bay of Auvrich.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="horizon" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="horizon"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             the horizon
          </Base:Description>
          <Base:Description type="examine">
             The gently curving horizon.
          </Base:Description>
          <Base:Description type="look">
             The gently curving horizon.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="muddy bay" prime="false" def="true" abstract="false" hidden="true" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="false" under="false" on="true" inside="false" near="true" over="true" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="bay"/>
            <Base:SName sname="water"/>
            <Base:SName sname="ocean"/>
            <Base:SName sname="sea"/>
            <Base:SName sname="mud"/>
            <Base:SName sname="shore"/>
            <Base:SName sname="coast"/>
            <Base:SName sname="auvrich"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="bays"/>
            <Base:PName pname="waters"/>
            <Base:PName pname="oceans"/>
            <Base:PName pname="seas"/>
            <Base:PName pname="shores"/>
            <Base:PName pname="coasts"/>
            <Base:PName pname="auvrichs"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="auvrich"/>
          <Base:Adjective adjective="bay"/>
          <Base:Adjective adjective="blackened"/>
          <Base:Adjective adjective="coast"/>
          <Base:Adjective adjective="dead"/>
          <Base:Adjective adjective="dirt"/>
          <Base:Adjective adjective="endless"/>
          <Base:Adjective adjective="filth"/>
          <Base:Adjective adjective="fish"/>
          <Base:Adjective adjective="rancid"/>
          <Base:Adjective adjective="sea"/>
          <Base:Adjective adjective="shore"/>
          <Base:Adjective adjective="shoreline"/>
          <Base:Adjective adjective="slim"/>
          <Base:Adjective adjective="sludge"/>
          <Base:Adjective adjective="waterless"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the muddy Bay of Auvrich
          </Base:Description>
          <Base:Description type="examine">
             The waterless Bay of Auvrich is extremely muddy. {The blackened mud looks more like slimy sludge then mud.|You see no sign of where the water has gone.|If you wish to play in filth perhaps you might like the endless amount of mud seen where the water used to be.|The smell of the mud  makes you think of dead fish and rancid dirt.}
          </Base:Description>
          <Base:Description type="look">
             The muddy Bay of Auvrich.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="tsunami" prime="false" def="false" abstract="false" hidden="true" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="true" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="darkness"/>
            <Base:SName sname="water"/>
            <Base:SName sname="line"/>
            <Base:SName sname="wave"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="waves"/>
            <Base:PName pname="waters"/>
            <Base:PName pname="lines"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="distant"/>
          <Base:Adjective adjective="ominous"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             distant darkness
          </Base:Description>
          <Base:Description type="examine">
             If you look out over the bay you can't help but notice {an ominous wall of dark water looming in the distance.|the immense crest of a large wave is seen.|an impressive expansive wall of water is rolling towards town.| a great tremendous mass of dark water is getting bigger and bigger as the day wears on.}
          </Base:Description>
          <Base:Description type="look">
             Looking far out to sea you see a wall of dark water looming over the horizon.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="10"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="emit:hot:day">
         "\{You feel the heat rise up from the hard dry \{ground\|earth\}.\| The \{hot\|burning\|sweltering\} sun beats down on your back.\| The \{heat\|warmth\} of the sun brings out the worst \{smells\|scents\|odors\} of \{the city\|docktown\}.\}"
      </Core:Property>
      <Core:Property property="export:backup:fishing:bay:fisharray">
         (\{ \<Allegory:Props:Animals:Fish:OddCatches:Seaweed\>, \<Allegory:Props:Animals:Fish:OddCatches:BrokenShell\>, \<Allegory:Props:Animals:Fish:OddCatches:Driftwood\>, \<Allegory:Props:Animals:Fish:OddCatches:EmptyContainer\>, \<Allegory:Props:Animals:Fish:OddCatches:FishingLine\>, \<Allegory:Props:Animals:Fish:OddCatches:SoggyScroll\>, \<Allegory:Props:Animals:Fish:OddCatches:Boots\>, \<Allegory:Props:Animals:Fish:OddCatches:RustyBucket\>, \<Allegory:Props:Animals:Fish:Saltwater:Bonefish\>, \<Allegory:Props:Animals:Fish:Saltwater:Weakfish\>, \<Allegory:Props:Animals:Fish:Saltwater:Gag\>, \<Allegory:Props:Animals:Fish:Saltwater:Scamp\>, \<Allegory:Props:Animals:Fish:Saltwater:SilverPerch\>, \<Allegory:Props:Animals:Fish:Saltwater:Bluefish\>, \<Allegory:Props:Animals:Fish:Saltwater:BlackDrum\>, \<Allegory:Props:Animals:Fish:Saltwater:BlackGrouper\>, \<Allegory:Props:Animals:Fish:Saltwater:Croaker\>, \<Allegory:Props:Animals:Fish:Saltwater:RedDrum\>, \<Allegory:Props:Animals:Fish:Saltwater:SandSeatrout\>, \<Allegory:Props:Animals:Fish:Saltwater:YellowfinGrouper\>, \<Allegory:Props:Animals:Fish:Saltwater:Spearfish\>, \<Allegory:Props:Animals:Fish:Saltwater:Jewfish\>, \<Allegory:Props:Animals:Fish:Saltwater:LefteyeFlounder\>, \<Allegory:Props:Animals:Fish:Saltwater:RedGrouper\>, \<Allegory:Props:Animals:Fish:Saltwater:Cobia\>, \<Allegory:Props:Animals:Fish:Saltwater:SilverSeatrout\>, \<Allegory:Props:Animals:Fish:Saltwater:BlueMarlin\> \})
      </Core:Property>
      <Core:Property property="export:fishing:bay:fisharray">
         (\{ \<Allegory:Props:Animals:Fish:OddCatches:Seaweed\>, \<Allegory:Props:Animals:Fish:OddCatches:BrokenShell\>, \<Allegory:Props:Animals:Fish:OddCatches:Driftwood\>, \<Allegory:Props:Animals:Fish:OddCatches:EmptyContainer\>, \<Allegory:Props:Animals:Fish:OddCatches:FishingLine\>, \<Allegory:Props:Animals:Fish:OddCatches:SoggyScroll\>, \<Allegory:Props:Animals:Fish:OddCatches:Boots\>, \<Allegory:Props:Animals:Fish:OddCatches:RustyBucket\>, \<Allegory:Props:Animals:Fish:Saltwater:Bonefish\>, \<Allegory:Props:Animals:Fish:Saltwater:Bonefish\>, \<Allegory:Props:Animals:Fish:Saltwater:Bonefish\>, \<Allegory:Props:Animals:Fish:Saltwater:Weakfish\>, \<Allegory:Props:Animals:Fish:Saltwater:Weakfish\>, \<Allegory:Props:Animals:Fish:Saltwater:Weakfish\>, \<Allegory:Props:Animals:Fish:Saltwater:Gag\>, \<Allegory:Props:Animals:Fish:Saltwater:Gag\>, \<Allegory:Props:Animals:Fish:Saltwater:Gag\>, \<Allegory:Props:Animals:Fish:Saltwater:Scamp\>, \<Allegory:Props:Animals:Fish:Saltwater:Scamp\>, \<Allegory:Props:Animals:Fish:Saltwater:Scamp\>, \<Allegory:Props:Animals:Fish:Saltwater:SilverPerch\>, \<Allegory:Props:Animals:Fish:Saltwater:SilverPerch\>, \<Allegory:Props:Animals:Fish:Saltwater:SilverPerch\>, \<Allegory:Props:Animals:Fish:Saltwater:Bluefish\>, \<Allegory:Props:Animals:Fish:Saltwater:Bluefish\>, \<Allegory:Props:Animals:Fish:Saltwater:Bluefish\>, \<Allegory:Props:Animals:Fish:Saltwater:BlackDrum\>, \<Allegory:Props:Animals:Fish:Saltwater:BlackDrum\>, \<Allegory:Props:Animals:Fish:Saltwater:BlackDrum\>, \<Allegory:Props:Animals:Fish:Saltwater:BlackGrouper\>, \<Allegory:Props:Animals:Fish:Saltwater:BlackGrouper\>, \<Allegory:Props:Animals:Fish:Saltwater:BlackGrouper\>, \<Allegory:Props:Animals:Fish:Saltwater:Croaker\>, \<Allegory:Props:Animals:Fish:Saltwater:Croaker\>, \<Allegory:Props:Animals:Fish:Saltwater:Croaker\>, \<Allegory:Props:Animals:Fish:Saltwater:RedDrum\>, \<Allegory:Props:Animals:Fish:Saltwater:RedDrum\>, \<Allegory:Props:Animals:Fish:Saltwater:RedDrum\>, \<Allegory:Props:Animals:Fish:Saltwater:SandSeatrout\>, \<Allegory:Props:Animals:Fish:Saltwater:SandSeatrout\>, \<Allegory:Props:Animals:Fish:Saltwater:SandSeatrout\>, \<Allegory:Props:Animals:Fish:Saltwater:YellowfinGrouper\>, \<Allegory:Props:Animals:Fish:Saltwater:YellowfinGrouper\>, \<Allegory:Props:Animals:Fish:Saltwater:YellowfinGrouper\>, \<Allegory:Props:Animals:Fish:Saltwater:Spearfish\>, \<Allegory:Props:Animals:Fish:Saltwater:Spearfish\>, \<Allegory:Props:Animals:Fish:Saltwater:Spearfish\>, \<Allegory:Props:Animals:Fish:Saltwater:Jewfish\>, \<Allegory:Props:Animals:Fish:Saltwater:Jewfish\>, \<Allegory:Props:Animals:Fish:Saltwater:Jewfish\>, \<Allegory:Props:Animals:Fish:Saltwater:LefteyeFlounder\>, \<Allegory:Props:Animals:Fish:Saltwater:LefteyeFlounder\>, \<Allegory:Props:Animals:Fish:Saltwater:LefteyeFlounder\>, \<Allegory:Props:Animals:Fish:Saltwater:RedGrouper\>, \<Allegory:Props:Animals:Fish:Saltwater:RedGrouper\>, \<Allegory:Props:Animals:Fish:Saltwater:RedGrouper\>, \<Allegory:Props:Animals:Fish:Saltwater:Cobia\>, \<Allegory:Props:Animals:Fish:Saltwater:Cobia\>, \<Allegory:Props:Animals:Fish:Saltwater:Cobia\>, \<Allegory:Props:Animals:Fish:Saltwater:SilverSeatrout\>, \<Allegory:Props:Animals:Fish:Saltwater:SilverSeatrout\>, \<Allegory:Props:Animals:Fish:Saltwater:SilverSeatrout\>, \<Allegory:Props:Animals:Fish:Saltwater:BlueMarlin\>, \<Allegory:Props:Animals:Fish:Saltwater:BlueMarlin\>, \<Allegory:Props:Animals:Fish:Saltwater:BlueMarlin\> \})
      </Core:Property>
      <Core:Property property="export:fishing:stock">
         10
      </Core:Property>
      <Core:Property property="export:float:script">
         X[M] return Call(\$\{IronClaw:Lib:Common\}, "float_on_water");
      </Core:Property>
      <Core:Property property="export:place:script">
         X[M] return Call(\$\{IronClaw:Lib:Common\}, "place_in_water");
      </Core:Property>
      <Core:Property property="export:swimming:waterdetails">
         (\{ "bay" \})
      </Core:Property>
      <Core:Property property="export:trait:smell">
         "fish with a salty tang"
      </Core:Property>
      <Core:Property property="float:script">
         X[M] return Call(\$\{IronClaw:Lib:Common\}, "float_on_water");
      </Core:Property>
      <Core:Property property="merry:react-post:enter-from">
         X[M] \$actor."merry:act-post:stance" = \$this."float:script";      
\$actor."merry:act-post:approach" = \$this."float:script";      
\$actor."merry:act-post:leave" = \$this."float:script";      
\$actor."merry:act-post:place" = \$this."place:script";      
\$actor."merry:act-post:zthrow" = \$this."place:script";      
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:fill-iob">
         X[M] /* D=Refill first appropriate container in actor's inventory from this vessel. */  
constant THE = STYLE_DEFINITE \| STYLE_NONPOSS;  
object liquid, container, refiller, holder;  
int    potential;  
if (!sizeof(this."base:inventory")) \{  
    EmitTo(\$actor, Describe(this, nil, nil, THE) + " can not provide you any water now.");  
    return FALSE;  
\}  
container = shared_drink::find_container_for(\$what: this."base:inventory"[0]."core:ur:parent", \$where: \$actor, \$tight: 1);  
if (!container) \{  
    EmitTo(\$actor, "You are not holding a vessel of any kind which could be filled with " + Describe(this."base:inventory"[0]) + ".");  
    return FALSE;  
\}  
holder = this."base:holder";  
if (holder \&\& holder."base:volition" \&\& holder != \$actor) \{  
    if (\$actor."base:proximity" != holder \&\& holder."base:proximity" != \$actor) \{  
        EmitTo(\$actor, "You must approach " + Describe(holder) + " in order to do that.");  
        return FALSE;  
    \}  
\}  
if (shared_drink::liquid_transfer(\$from: this, \$into: container)) \{  
    /* Transfer was successful. */  
    EmitTo(\$actor, "You collect " + Describe(this, nil, nil, THE) + "'s contents into " + Describe(container, nil, \$actor) + "." + (\$emptied ? " " + capitalize(Describe(this, nil, nil, THE)) + " can not provide any water now." : ""));  
    EmitIn(\$actor."base:environment", Describe(\$actor) + " collects some of " + Describe(this, nil, nil, THE) + "'s contents into " + Describe(container, \$actor) + "." + (\$emptied ? " " + capitalize(Describe(this, nil, nil, THE)) + " can not provide any water now." : ""), \$actor);  
\}
      </Core:Property>
      <Core:Property property="merry:react-post:refill-iob">
         X[M] /* D=Refill first appropriate container in actor's inventory from this vessel. */  
constant THE = STYLE_DEFINITE \| STYLE_NONPOSS;  
object liquid, container, refiller, holder;  
int    potential;  
if (!sizeof(this."base:inventory")) \{  
    EmitTo(\$actor, Describe(this, nil, nil, THE) + " can not provide you any water now.");  
    return FALSE;  
\}  
container = shared_drink::find_container_for(\$what: this."base:inventory"[0]."core:ur:parent", \$where: \$actor, \$tight: 1);  
if (!container) \{  
    EmitTo(\$actor, "You are not holding a vessel of any kind which could be filled with " + Describe(this."base:inventory"[0]) + ".");  
    return FALSE;  
\}  
holder = this."base:holder";  
if (holder \&\& holder."base:volition" \&\& holder != \$actor) \{  
    if (\$actor."base:proximity" != holder \&\& holder."base:proximity" != \$actor) \{  
        EmitTo(\$actor, "You must approach " + Describe(holder) + " in order to do that.");  
        return FALSE;  
    \}  
\}  
if (shared_drink::liquid_transfer(\$from: this, \$into: container)) \{  
    /* Transfer was successful. */  
    EmitTo(\$actor, "You collect " + Describe(this, nil, nil, THE) + "'s contents into " + Describe(container, nil, \$actor) + "." + (\$emptied ? " " + capitalize(Describe(this, nil, nil, THE)) + " can not provide any water now." : ""));  
    EmitIn(\$actor."base:environment", Describe(\$actor) + " collects some of " + Describe(this, nil, nil, THE) + "'s contents into " + Describe(container, \$actor) + "." + (\$emptied ? " " + capitalize(Describe(this, nil, nil, THE)) + " can not provide any water now." : ""), \$actor);  
\}
      </Core:Property>
      <Core:Property property="merry:react-post:tap-iob">
         X[M] /* D=Refill first appropriate container in actor's inventory from this vessel. */  
constant THE = STYLE_DEFINITE \| STYLE_NONPOSS;  
object liquid, container, refiller, holder;  
int    potential;  
if (!sizeof(this."base:inventory")) \{  
    EmitTo(\$actor, Describe(this, nil, nil, THE) + " can not provide you any water now.");  
    return FALSE;  
\}  
container = shared_drink::find_container_for(\$what: this."base:inventory"[0]."core:ur:parent", \$where: \$actor, \$tight: 1);  
if (!container) \{  
    EmitTo(\$actor, "You are not holding a vessel of any kind which could be filled with " + Describe(this."base:inventory"[0]) + ".");  
    return FALSE;  
\}  
holder = this."base:holder";  
if (holder \&\& holder."base:volition" \&\& holder != \$actor) \{  
    if (\$actor."base:proximity" != holder \&\& holder."base:proximity" != \$actor) \{  
        EmitTo(\$actor, "You must approach " + Describe(holder) + " in order to do that.");  
        return FALSE;  
    \}  
\}  
if (shared_drink::liquid_transfer(\$from: this, \$into: container)) \{  
    /* Transfer was successful. */  
    EmitTo(\$actor, "You collect " + Describe(this, nil, nil, THE) + "'s contents into " + Describe(container, nil, \$actor) + "." + (\$emptied ? " " + capitalize(Describe(this, nil, nil, THE)) + " can not provide any water now." : ""));  
    EmitIn(\$actor."base:environment", Describe(\$actor) + " collects some of " + Describe(this, nil, nil, THE) + "'s contents into " + Describe(container, \$actor) + "." + (\$emptied ? " " + capitalize(Describe(this, nil, nil, THE)) + " can not provide any water now." : ""), \$actor);  
\}
      </Core:Property>
      <Core:Property property="merry:react:enter-into">
         X[M] /* remove the scripts when the actor leaves the water area */      
\$actor."merry:act-post:stance" = nil;      
\$actor."merry:act-post:approach" = nil;      
\$actor."merry:act-post:leave" = nil;      
\$actor."merry:act-post:place" = nil;      
\$actor."merry:act-post:zthrow" = nil;      
      
/* and, just in case anyone still has these scripts */      
\$actor."merry:act-pre:place" = nil;      
\$actor."merry:act-pre:zthrow" = nil;      
return TRUE;
      </Core:Property>
      <Core:Property property="place:script">
         X[M] return Call(\$\{IronClaw:Lib:Common\}, "place_in_water");
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1510432525, "jominey", "E", 1510432534, "jominey", "E", 1519182821, "ezralee", "R" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="sys:emit:clist"/>
      <Core:Property property="trait:smell">
         "fish with a salty tang"
      </Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
