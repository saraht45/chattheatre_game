<object clone="/base/obj/thing" owner="tunk_bodin">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(IronClaw:Props:Lighting:Bases:UrCraftingLightBase)"/>
    <Base:Bulk immobile="false" mass="0.5" density="8"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0.6" maxweight="1.1" verb2="hold" verb3="holds"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="hanging" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="false" under="false" on="true" inside="true" near="true" over="false" behind="false" before="false" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="sconce"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="sconces"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="candle"/>
          <Base:Adjective adjective="iron"/>
          <Base:Adjective adjective="metal"/>
          <Base:Adjective adjective="torch"/>
        </Base:Adjectives>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="cloth" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="cloth"/>
            <Base:SName sname="rag"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="clothes"/>
            <Base:PName pname="rags"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="oiled"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             oiled cloth
          </Base:Description>
          <Base:Description type="look">
             A dirty piece of oiled rag wrapped around a wooden stick.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="light" prime="false" def="false" abstract="false" hidden="false" luminosity="20" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="light"/>
            <Base:SName sname="flame"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="flames"/>
            <Base:PName pname="lights"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="light"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             light from a torch
          </Base:Description>
          <Base:Description type="examine">
             The torch light casts out a warm golden hue.
          </Base:Description>
          <Base:Description type="look">
             A yellowish light from a torch.
          </Base:Description>
          <Base:Description type="pbrief">lights</Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="torch" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="torch"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="torches"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="wooden"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             {? not | $(this.details:light:hidden) |lit } wooden torch
          </Base:Description>
          <Base:Description type="look">
             {? not | $(this.details:light:hidden) | A crude looking piece of wooden stick with an oiled cloth wrapped on its top. Flickering flames coming from its burning cloth slightly illuminate the area.  To put out the torch, you can <acmd tag="command" cmd="extinguish my torch">extinguish</acmd> it.| A crude looking piece of wooden stick with an oiled cloth wrapped on its top. You can <acmd tag="command" cmd="light my torch">light</acmd> the torch to apply flame to it.}
          </Base:Description>
          <Base:Description type="pbrief">
             {? not | $(this.details:light:hidden) |lit }torches
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="5"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:lightsource:details">
         (\{ "cloth", "torch" \})
      </Core:Property>
      <Core:Property property="export:lightsource:holds">
         "torch"
      </Core:Property>
      <Core:Property property="export:trait:brief">
         "sconce"
      </Core:Property>
      <Core:Property property="export:trait:examine">
         "\{? not \| \$(this.details:torch:hidden) \| It holds a torch. \{? not \| \$(this.details:light:hidden) \| Flickering flames slightly illuminate the area. To put out the torch, you can \<acmd tag=\\"command\\" cmd=\\"extinguish torch\\"\>extinguish\</acmd\> it.\| It is unlit. You can \<acmd tag=\\"command\\" cmd=\\"light torch\\"\>light\</acmd\> the torch to apply flame to it.\} You may also \<acmd tag=\\"command\\" cmd=\\"empty sconce\\"\>empty\</acmd\> the sconce to retrieve the torch. \| It is empty.\}"
      </Core:Property>
      <Core:Property property="export:trait:material">
         "iron"
      </Core:Property>
      <Core:Property property="export:trait:objecttype">
         "sconce"
      </Core:Property>
      <Core:Property property="merry:act:start">
         X[M] /* Hide torch details. */
Set(\$this, "details:cloth:hidden", TRUE);       
Set(\$this, "details:torch:hidden", TRUE);        
Set(\$this, "details:light:hidden", TRUE);

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:hang-dob">
         X[M] /* Hang the torch from a room detail. */

if(\$iob \&\& (sizeof(\$iob) == 1)) \{                      
    if(NRefOb(\$iob[0])."base:volition") \{                      
        return TRUE;         
    \}             
                      
    /* Put the sconce in the environment if it's not already there. */
    if(NRefOb(\$iob[0])."base:environment") \{                      
        \$this."base:environment" = NRefOb(\$iob[0])."base:environment";                      
    \} else \{                      
        \$this."base:environment" = NRefOb(\$iob[0]);                      
    \} 

    /* Set proximity to targetted detal and stance to 'hanging' */                     
    \$this."base:proximity" = \$iob[0];                      
    \$this."base:stance" = 6;                      
    \$this."base:preposition" = 8;                      
\}
                      
return TRUE;
      </Core:Property>
      <Core:Property property="old:merry:react-pre:empty-dob">
         X[M] /* Retrieve the torch from the sconce. */

if(\$dob \&\& sizeof(\$dob) == 1) \{        
    if(\$this."details:torch:hidden") \{
        /* No torch to retrieve. */
        EmitTo(\$actor, Describe(\$this) + " is already empty.");    
        return FALSE;    
    \} else \{
        /* Retrieve info about the torch that was stored in the sconce. If none exists, use generic torch object. */
        if(Obj(\$this."torch:object")) \{
            \$torch = Obj(\$this."torch:object");
        \} else \{
            \$torch = \$\{IronClaw:Props:Lighting:Source:Misc:Handtorch\};
        \}

        \$newtorch = Spawn(\$torch);
        \$newtorch."base:environment" = \$actor;

        \$delay(0.5, FALSE, "4477");
        if(!\$this."details:light:hidden") \{
            \$newtorch."details:light:hidden" = FALSE;
        \}

        /* Emit the action. */
        EmitTo(\$actor, "You take " + Describe(\$newtorch) + " from " + Describe(\$this) + ".");              
        EmitIn(\$actor."base:environment", Describe(\$actor)+ " takes " +Describe(\$newtorch)+ " from " + Describe(\$this) + ".", \$actor);          
      
        /* Hide torch details. */
        Set(\$this, "details:cloth:hidden", TRUE);       
        Set(\$this, "details:torch:hidden", TRUE);        
        Set(\$this, "details:light:hidden", TRUE);       

        return FALSE;              
    \}
\}
           
return TRUE;
      </Core:Property>
      <Core:Property property="old:merry:react-pre:place-where">
         X[M] /* Only one torch can go in the sconce. */
if(!\$what) \{
    EmitTo(\$actor, "What did you want to put in " + Describe(\$this) + ".");
    return FALSE;
\}

if(!sizeof(\$what)) \{
    EmitTo(\$actor, "What did you want to put in " + Describe(\$this) + ".");
    return FALSE;
\}

if(sizeof(\$what) \> 1) \{
    EmitTo(\$actor, "You can only place on thing at a time in " + Describe(\$this) + ".");
    return FALSE;
\}

\$torch = NRefOb(\$what[0]);

if(!\$torch."trait:objecttype" \&\& \$torch."trait:objecttype" != "torch") \{
    EmitTo(\$actor, "You can only place torches in " + Describe(\$this) + ".");
    return FALSE;
\}

if(!\$this."details:torch:hidden") \{
   EmitTo(\$actor, Describe(\$this) + " already holds a torch.");
   return FALSE;
\}

/* Emit the action. */
EmitTo(\$actor, "You place " + Describe(\$torch, nil, \$actor) + " in " + Describe(\$this, nil, nil, STYLE_NONPOSS)+ ".");
EmitIn(\$actor."base:environment", Describe(\$actor) + " places " + Describe(\$torch, \$actor) + " in " + Describe(\$this, nil, nil, STYLE_NONPOSS) + ".", \$actor);

/* Unhide torch details. */
Set(\$this, "details:cloth:hidden", FALSE);       
Set(\$this, "details:torch:hidden", FALSE); 

/* Unhide light detail if torch is lit. */
if(!\$torch."details:light:hidden") \{
  Set(\$this, "details:light:hidden", FALSE);
\}

/* Store torch info in sconce. To be used for retrieval purposes later. */
\$this."torch:object" = \$torch."base:urparent";

/* Slay the torch */
if(!\$torch."no:slay") \{
    Slay(\$torch);
\}

return FALSE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1288567812, "jominey", "E", 1288567818, "jominey", "E", 1288567826, "jominey", "E", 1288567839, "jominey", "E", 1288567844, "jominey", "E", 1288567991, "jominey", "E", 1288568002, "jominey", "E", 1288568005, "jominey", "E", 1288568008, "jominey", "E", 1288568071, "jominey", "E", 1288568675, "jominey", "E", 1288568848, "jominey", "E", 1288569610, "jominey", "E", 1288569740, "jominey", "E", 1288569861, "jominey", "E", 1288569958, "jominey", "E", 1288569977, "jominey", "E", 1288570040, "jominey", "E", 1288570083, "jominey", "E", 1288570097, "jominey", "E", 1288570102, "jominey", "E", 1288570106, "jominey", "E", 1288570109, "jominey", "E", 1288570186, "jominey", "E", 1288570309, "jominey", "E", 1288570372, "jominey", "E", 1288570432, "jominey", "E", 1288570495, "jominey", "E", 1288570764, "jominey", "K", 1288570805, "jominey", "K", 1288570914, "jominey", "K", 1288571010, "jominey", "E", 1288571035, "jominey", "E", 1288571056, "jominey", "E", 1288571182, "jominey", "E", 1288571201, "jominey", "E", 1288571209, "jominey", "E", 1288571246, "jominey", "E", 1288571772, "jominey", "E", 1288666320, "jominey", "E", 1288666386, "jominey", "E", 1288666418, "jominey", "E", 1288666459, "jominey", "E", 1288666478, "jominey", "E", 1288666492, "jominey", "E", 1288666501, "jominey", "E", 1288666518, "jominey", "E", 1288666526, "jominey", "E", 1312307494, "morwenlorelie", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="trait:light:lightable">
         "1"
      </Core:Property>
      <Core:Property property="trait:smells:lastchecked">
         1187898159
      </Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
