<object clone="/base/obj/thing" owner="SkotOS">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Allegory:Props:Crafting:UrCrafting)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details/>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:heatsource">1</Core:Property>
      <Core:Property property="merry:act:start">
         X[M] /* Hide light detail upon spawn. */ 
\$this."details:light:hidden" = TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:emit">
         X[M] object env; 
 
/* Make sure the timer is stopped and cleared. */ 
if(\$this."handles:emitter") \{ 
    Stop(\$this."handles:emitter"); 
    \$this."handles:emitter" = nil; 
\} 
 
/* Check if fuel is required to keep flame going. */ 
if(\$this."lightsource:fuel") \{ 
    /* Burn some of the fuel away. */ 
    \$this."lightsource:fuel:quantity" = Int(\$this."lightsource:fuel:quantity") - 1; 
 
    if(Int(\$this."lightsource:fuel:quantity") \<= 0) \{ 
        /* No more fuel. Extinguish flame. */ 
        ::extinguish(\$nofuel: 1); 
     
        return TRUE; 
    \} 
\} 
 
env = \$this."base:environment"; 
 
if(\$this."lightsource:emits") \{ 
    /* If held by someone, emit to chatter's environment, otherwise emit to light source's environment. */ 
    if(env."udat:possessed") \{ 
        /* Emit to holder. */ 
        EmitTo(env, capitalize(strip(replace_strings(UnSAM(\$this."lightsource:emits"), "THIS", Describe(\$this, nil, env), "HERE", Describe(env."base:environment"))))); 
 
        /* Emit to environment. */ 
        EmitIn(env."base:environment", capitalize(strip(replace_strings(UnSAM(\$this."lightsource:emits"), "THIS", Describe(\$this), "HERE", Describe(env."base:environment")))), env); 
    \} else \{ 
        /* Emit to environment. */ 
        EmitIn(env, capitalize(strip(replace_strings(UnSAM(\$this."lightsource:emits"), "THIS", Describe(\$this), "HERE", Describe(env))))); 
    \} 
\} 
 
\$this."handles:emitter" = In("emit", random(30) + 90); 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:extinguish">
         X[M] object env; 
 
/* Make sure timers are stopped and cleared. */ 
if(\$this."handles:extinguish") \{ 
    Stop(\$this."handles:extinguish"); 
    \$this."handles:extinguish" = nil; 
\} 
 
if(\$this."handles:emitter") \{ 
    Stop(\$this."handles:emitter"); 
    \$this."handles:emitter" = nil; 
\} 
 
env = \$this."base:environment"; 
 
/* If held by someone, emit to chatter's environment, otherwise emit to light source's environment. */ 
if(env."udat:possessed") \{ 
    if(\$nofuel) \{ 
        /* Different emit for when lightsource runs out of fuel. */ 
        EmitTo(env, Describe(\$this, nil, env) + " dies down as the last of the " + Str(\$this."lightsource:fuel") + " burns away."); 
        EmitIn(env."base:environment", Describe(\$this) + " dies down as the last of the " + Str(\$this."lightsource:fuel") + " burns away.", env); 
    \} else \{ 
        EmitTo(env, Describe(\$this, nil, env) + " goes out."); 
        EmitIn(env."base:environment", Describe(\$this) + " goes out.", env); 
    \} 
\} else \{ 
    if(\$nofuel) \{ 
        /* Different emit for when lightsource runs out of fuel. */ 
        EmitIn(env, Describe(\$this) + " dies down as the last of the " + Str(\$this."lightsource:fuel") + " burns away."); 
    \} else \{ 
        EmitIn(env, Describe(\$this) + " goes out."); 
    \} 
\} 
 
/* Hide the light detail. */ 
\$this."details:light:hidden" = TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:light">
         X[M] object env; 
 
/* Check if fuel is required to light it. */ 
if(\$this."lightsource:fuel") \{ 
    /* Fuel required. Is there enough to light it? */ 
    if(Int(\$this."lightsource:fuel:quantity") \<= 0) \{ 
        EmitTo(\$actor, "The flame flickers, and dies. " + capitalize(Describe(\$this, nil, \$actor)) + " has run out of fuel. You will need to add more " + Str(\$this."lightsource:fuel") + " before lighting it."); 
        return FALSE; 
    \} 
\} 
 
/* If an emitter, set to auto extinguish in 30 minutes. Periodic emits will occur about every 1.5 minutes. */ 
if(\$this."lightsource:emitter") \{ 
    \$this."handles:extinguish" = In("extinguish", 30*60); 
    \$this."handles:emitter" = In("emit", random(3) + 1); 
\} 
 
env = \$this."base:environment"; 
 
/* If held by someone, emit to chatter's environment, otherwise emit to light source's environment. */ 
if(env."udat:possessed") \{ 
    EmitTo(env, Describe(\$this, nil, env) + " lights."); 
    EmitIn(env."base:environment", Describe(\$this) + " lights.", env); 
\} else \{ 
    EmitIn(env, Describe(\$this) + " lights."); 
\} 
 
/* Show the light detail. */ 
\$this."details:light:hidden" = FALSE; 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:extinguish-dob">
         X[M] ::extinguish(); 
 
\$delay(0.5, TRUE, "9e32"); 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:light-dob">
         X[M] if(\$this."trait:light:lightable") \{ 
    ::light(); 
\} 
 
\$delay(0.5, TRUE, "35c4"); 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:pour-iob">
         X[M] /* Adding fuel to the lightsource. */ 
 
if(!\$dob) return TRUE; 
 
\$empty = (\{ \}); 
for(\$i=0;\$i\<sizeof(\$dob);\$i++) \{ 
 
    \$fuel = NRefOb(\$dob[\$i]); 
 
    if(\$this."lightsource:fuel" \&\& \$fuel."trait:objecttype" == \$this."lightsource:fuel") \{ 
        /* it's fuel that they're adding. can we refill it? */ 
        if(Int(\$this."lightsource:fuel:quantity") \< 50) \{ 
            /* add fuel to the lightsource */ 
            if((Int(\$this."lightsource:fuel:quantity") + Int(\$fuel."trait:quantity")) \<= 50) \{ 
                /* partially fill the light source */ 
                /* use all the oil */ 
                \$this."lightsource:fuel:quantity" += Int(\$fuel."trait:quantity"); 
                \$empty += (\{ \$fuel \}); 
            \} else \{ 
                /* totally fill the lightsource */ 
                \$fuel."trait:quantity" = \$fuel."trait:quantity" - (50 - Int(\$this."lightsource:fuel:quantity")); 
                \$this."lightsource:fuel:quantity" = 50; 
            \} 
        \} 
    \} 
\} 
 
for(\$i=0;\$i\<sizeof(\$empty);\$i++) \{ 
    Slay(\$empty[\$i]); 
\} 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:snuff-dob">
         X[M] ::extinguish(); 
 
\$delay(0.5, TRUE, "9e32"); 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:extinguish-dob">
         X[M] /* Make sure light source is lit. */ 
if(\$this."details:light:hidden") \{ 
    EmitTo(\$actor, Describe(\$this, nil, \$actor) + " is not lit."); 
    return FALSE; 
\} 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:light-dob">
         X[M] /* Make sure light source is not already lit. */ 
if(!\$this."details:light:hidden") \{ 
    EmitTo(\$actor, Describe(\$this, nil, \$actor) + " is already lit."); 
    return FALSE; 
\} 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:timer:emit">
         X[M] ::emit();
      </Core:Property>
      <Core:Property property="merry:timer:extinguish">
         X[M] ::extinguish();
      </Core:Property>
      <Core:Property property="new property name">
         "New Property Value"
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1144052085, "-", "SYNC", 1221752477, "???", "R", 1288312924, "jominey", "E", 1288312964, "jominey", "E", 1288313081, "jominey", "E", 1288313141, "jominey", "E", 1288313152, "jominey", "E", 1288313495, "jominey", "E", 1288313649, "jominey", "E", 1288313798, "jominey", "E", 1288314210, "jominey", "E", 1288314230, "jominey", "E", 1288314286, "jominey", "E", 1288314310, "jominey", "E", 1288314360, "jominey", "E", 1288314377, "jominey", "E", 1288314428, "jominey", "E", 1288314441, "jominey", "E", 1288314486, "jominey", "E", 1288314495, "jominey", "E", 1288314505, "jominey", "E", 1288314513, "jominey", "E", 1288314585, "jominey", "E", 1288314641, "jominey", "E", 1288314703, "jominey", "E", 1288314732, "jominey", "E", 1288314774, "jominey", "E", 1288314834, "jominey", "E", 1288314916, "jominey", "E", 1288314934, "jominey", "E", 1288315025, "jominey", "E", 1288315030, "jominey", "E", 1288315046, "jominey", "E", 1288315411, "jominey", "E", 1288315785, "jominey", "E", 1288315796, "jominey", "E", 1288315826, "jominey", "E", 1288315849, "jominey", "E", 1288315969, "jominey", "E", 1288559495, "jominey", "E", 1288559784, "jominey", "E", 1288560324, "jominey", "E", 1288560358, "jominey", "E", 1288560761, "jominey", "E", 1288560835, "jominey", "E", 1288561297, "jominey", "E", 1288562311, "jominey", "E", 1288562708, "jominey", "E", 1288563048, "jominey", "E", 1288563287, "jominey", "E", 1288563314, "jominey", "E", 1288563802, "jominey", "E", 1288563994, "jominey", "E", 1288564068, "jominey", "E", 1288564205, "jominey", "E", 1288575213, "jominey", "E", 1288575297, "jominey", "E", 1288575370, "jominey", "E", 1288742080, "jominey", "E", 1288742206, "jominey", "E", 1288743771, "jominey", "E", 1288743792, "jominey", "E", 1288745858, "jominey", "E", 1288745933, "jominey", "E", 1288746533, "jominey", "E", 1293489247, "jominey", "E", 1293489258, "jominey", "E", 1293489406, "jominey", "E", 1293489442, "jominey", "E", 1293489500, "jominey", "E", 1338380233, "meandmine", "X", 1421622818, "rorschakovacs", "E", 1421622847, "rorschakovacs", "E", 1435202956, "jominey", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
