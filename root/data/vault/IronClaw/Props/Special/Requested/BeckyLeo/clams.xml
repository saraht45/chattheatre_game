<object clone="/base/obj/thing" owner="sinistrelle">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="0.5" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="true"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="shell"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="shells"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="clam"/>
          <Base:Adjective adjective="large"/>
          <Base:Adjective adjective="white"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             large white clam shell
          </Base:Description>
          <Base:Description type="examine">
             A $(this.trait:material) $(this.trait:container) is $[if($this."trait:quantity" == 0) { return "quite"; } else if($this."trait:quantity" <= 0) { return "quite";} else if($this."trait:quantity" == 1) { return "nearly empty of steamed"; } else if($this."trait:quantity" == 2) { return "less than half with steamed"; } else if($this."trait:quantity" == 3) { return "about half filled with steamed"; } else if($this."trait:quantity" == 4) { return "nearly filled with steamed"; } else { return "completely filled with steamed"; }] $(this.trait:food).  It is rather large and of a pristine white color.
          </Base:Description>
          <Base:Description type="look">
             The clam shell is rather large and of a pristine white color.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="food" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="food"/>
            <Base:SName sname="clam"/>
            <Base:SName sname="meat"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="foods"/>
            <Base:PName pname="clams"/>
            <Base:PName pname="meats"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="clam"/>
          <Base:Adjective adjective="steamed"/>
          <Base:Adjective adjective="white"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the steamed $(this.trait:color) $(this.trait:food)
          </Base:Description>
          <Base:Description type="look">
             The $[if($this."trait:quantity" == 1) { return "almost completely eaten "; } else if($this."trait:quantity" == 2) { return "mostly eaten "; } else if($this."trait:quantity" == 3) { return "half-eaten "; } else if($this."trait:quantity" ==4) { return "slightly eaten "; }]steamed $(this.trait:food) in the $(this.trait:material) $(this.trait:container) looks tasty.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties>
      <Base:InitialProperty property="export:trait:color">
         "clam"
      </Base:InitialProperty>
      <Base:InitialProperty property="export:trait:food">
         "meat"
      </Base:InitialProperty>
    </Base:InitialProperties>
    <Core:Properties>
      <Core:Property property="export:emote:bite">
         "It is fresh and tasty, with a slight tang of lemon"
      </Core:Property>
      <Core:Property property="export:emote:chew">
         "It is fresh and tasty, with a slight tang of lemon"
      </Core:Property>
      <Core:Property property="export:emote:eat">
         "It is fresh and tasty, with a slight tang of lemon"
      </Core:Property>
      <Core:Property property="export:emote:gobble">
         "It is fresh and tasty, with a slight tang of lemon"
      </Core:Property>
      <Core:Property property="export:emote:gulp">
         "It is fresh and tasty, with a slight tang of lemon"
      </Core:Property>
      <Core:Property property="export:emote:lick">
         "It is fresh and tasty, with a slight tang of lemon"
      </Core:Property>
      <Core:Property property="export:emote:nibble">
         "It is fresh and tasty, with a slight tang of lemon"
      </Core:Property>
      <Core:Property property="export:emote:savor">
         "It is fresh and tasty, with a slight tang of lemon"
      </Core:Property>
      <Core:Property property="export:emote:savour">
         "It is fresh and tasty, with a slight tang of lemon"
      </Core:Property>
      <Core:Property property="export:emote:taste">
         "It is fresh and tasty, with a slight tang of lemon"
      </Core:Property>
      <Core:Property property="export:nip:item:cost">
         0
      </Core:Property>
      <Core:Property property="export:trait:color">
         "clam"
      </Core:Property>
      <Core:Property property="export:trait:container">
         "shell"
      </Core:Property>
      <Core:Property property="export:trait:food">
         "meat"
      </Core:Property>
      <Core:Property property="export:trait:material">
         "clam"
      </Core:Property>
      <Core:Property property="export:trait:objecttype">
         "urfood"
      </Core:Property>
      <Core:Property property="export:trait:quantity">
         5
      </Core:Property>
      <Core:Property property="export:trait:smell">
         "fresh fishiness and a slight lemony tang"
      </Core:Property>
      <Core:Property property="merry:react-pre:bite-dob">
         X[M] if(\$this."trait:quantity" == 1 \|\| \$this."trait:quantity" \>= 1) \{                                          
EmitTo(\$actor, "You take a bite of your " +\$this."trait:color"+ " " +\$this."trait:food"+ " from your " +\$this."trait:material"+ " " +\$this."trait:container"+ ".");                                          
EmitIn(\$actor."base:environment", Describe(\$actor)+ " takes a bite of " +\$this."trait:color"+ " " +\$this."trait:food"+ " from " +\$actor."base:possessive"+ " " +\$this."trait:material"+ " " +\$this."trait:container"+ ".", \$actor);                                          
if(\$this."trait:quantity" == 1) \{                    
\$this."trait:quantity" -= 1;                    
\} else \{                    
\$this."trait:quantity" -= 2;                    
\}                                          
if(\$this."trait:quantity" == 0) \{                                         
\$this."trait:food" = "empty";                                        
Set(\$this, "details:food:hidden", TRUE);                                       
return FALSE;                                         
\}                                         
return FALSE;                                          
\} else \{                                      
EmitTo(\$actor, "Your " +\$this."trait:material"+ " " +\$this."trait:container"+ " is empty.");                                     
return FALSE;                                          
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:chew-dob">
         X[M] if(\$this."trait:quantity" == 1 \|\| \$this."trait:quantity" \>= 1) \{                                          
EmitTo(\$actor, "You take a bite of your " +\$this."trait:color"+ " " +\$this."trait:food"+ " from your " +\$this."trait:material"+ " " +\$this."trait:container"+ " and chew thoroughly.");                                          
EmitIn(\$actor."base:environment", Describe(\$actor)+ " takes a bite of " +\$this."trait:color"+ " " +\$this."trait:food"+ " from " +\$actor."base:possessive"+ " " +\$this."trait:material"+ " " +\$this."trait:container"+ " and chews thoroughly.", \$actor);                                          
if(\$this."trait:quantity" == 1) \{                    
\$this."trait:quantity" -= 1;                    
\} else \{                    
\$this."trait:quantity" -= 2;                    
\}                                          
if(\$this."trait:quantity" == 0) \{                                         
\$this."trait:food" = "empty";                                        
Set(\$this, "details:food:hidden", TRUE);                                       
return FALSE;                                         
\}                                         
return FALSE;                                          
\} else \{                                      
EmitTo(\$actor, "Your " +\$this."trait:material"+ " " +\$this."trait:container"+ " is empty.");                                     
return FALSE;                                          
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:eat">
         X[M] if(\$this."trait:quantity" == 1 \|\| \$this."trait:quantity" \>= 1) \{                                          
EmitTo(\$actor, "You take a bite of your " +\$this."trait:color"+ " " +\$this."trait:food"+ " from your " +\$this."trait:material"+ " " +\$this."trait:container"+ ".");                                          
EmitIn(\$actor."base:environment", Describe(\$actor)+ " takes a bite of " +\$this."trait:color"+ " " +\$this."trait:food"+ " from " +\$actor."base:possessive"+ " " +\$this."trait:material"+ " " +\$this."trait:container"+ ".", \$actor);                                          
if(\$this."trait:quantity" == 1) \{                    
\$this."trait:quantity" -= 1;                    
\} else \{                    
\$this."trait:quantity" -= 2;                    
\}                                          
if(\$this."trait:quantity" == 0) \{                                         
\$this."trait:food" = "empty";                                        
Set(\$this, "details:food:hidden", TRUE);                                       
return FALSE;                                         
\}                                         
return FALSE;                                          
\} else \{                                      
EmitTo(\$actor, "Your " +\$this."trait:material"+ " " +\$this."trait:container"+ " is empty.");                                     
return FALSE;                                          
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:gobble-dob">
         X[M] if(\$this."trait:quantity" == 1 \|\| \$this."trait:quantity" \>= 1) \{                                          
EmitTo(\$actor, "You gobble up your " +\$this."trait:color"+ " " +\$this."trait:food"+ " from your " +\$this."trait:material"+ " " +\$this."trait:container"+ " entirely.");                                          
EmitIn(\$actor."base:environment", Describe(\$actor)+ " gobbles all of the " +\$this."trait:color"+ " " +\$this."trait:food"+ " from " +\$actor."base:possessive"+ " " +\$this."trait:material"+ " " +\$this."trait:container"+ " entirely.", \$actor);                                                 
\$this."trait:quantity" = 0;                                   
\$this."trait:food" = "empty";  
\$this."trait:color" = "empty";                                        
Set(\$this, "details:food:hidden", TRUE);                                   
return FALSE;                                          
\} else \{                                      
EmitTo(\$actor, "Your " +\$this."trait:material"+ " " +\$this."trait:container"+ " is empty.");                                     
return FALSE;                                          
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:gulp-iob">
         X[M] if(\$this."trait:quantity" == 1 \|\| \$this."trait:quantity" \>= 1) \{                                          
EmitTo(\$actor, "You gulp some " +\$this."trait:color"+ " " +\$this."trait:food"+ " from your " +\$this."trait:material"+ " " +\$this."trait:container"+ " greedily. " +\$this."emote:gulp"+ ".");                                          
EmitIn(\$actor."base:environment", Describe(\$actor)+ " gulps some " +\$this."trait:color"+ " " +\$this."trait:food"+ " from " +\$actor."base:possessive"+ " " +\$this."trait:material"+ " " +\$this."trait:container"+ " greedily.", \$actor);                                          
if(\$this."trait:quantity" == 1) \{                    
\$this."trait:quantity" -= 1;                  
\} else if(\$this."trait:quantity" == 2) \{                  
\$this."trait:quantity" -= 2;                  
\} else if(\$this."trait:quantity" == 3) \{                  
\$this."trait:quantity" -= 3;                  
\} else \{                    
\$this."trait:quantity" -= 4;                    
\}                                          
if(\$this."trait:quantity" == 0) \{                                         
\$this."trait:food" = "empty";                                        
Set(\$this, "details:food:hidden", TRUE);                                       
return FALSE;                                         
\}                                         
return FALSE;                                          
\} else \{                                      
EmitTo(\$actor, "Your " +\$this."trait:material"+ " " +\$this."trait:container"+ " is empty.");                                     
return FALSE;                                          
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:lick-dob">
         X[M] if(\$this."trait:quantity" == 1 \|\| \$this."trait:quantity" \>= 1) \{                                          
EmitTo(\$actor, "You take a lick of the " +\$this."trait:color"+ " " +\$this."trait:food"+ " on your " +\$this."trait:material"+ " " +\$this."trait:container"+ ". " +\$this."emote:taste"+ ".");                                          
EmitIn(\$actor."base:environment", Describe(\$actor)+ " takes a lick of the " +\$this."trait:color"+ " " +\$this."trait:food"+ " on " +\$actor."base:possessive"+ " " +\$this."trait:material"+ " " +\$this."trait:container"+ ".", \$actor);                                          
\$this."trait:quantity" -= 0;                                          
if(\$this."trait:quantity" == 0) \{                                         
\$this."trait:food" = "empty";                                        
Set(\$this, "details:food:hidden", TRUE);                                       
return FALSE;                                         
\}                                         
return FALSE;                                          
\} else \{                                      
EmitTo(\$actor, "Your " +\$this."trait:material"+ " " +\$this."trait:container"+ " is empty.");                                     
return FALSE;                                          
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:nibble-dob">
         X[M] if(\$this."trait:quantity" == 1 \|\| \$this."trait:quantity" \>= 1) \{                                          
EmitTo(\$actor, "You nibble the " +\$this."trait:color"+ " " +\$this."trait:food"+ " on your " +\$this."trait:material"+ " " +\$this."trait:container"+ ". " +\$this."emote:taste"+ ".");                                          
EmitIn(\$actor."base:environment", Describe(\$actor)+ " nibbles the " +\$this."trait:color"+ " " +\$this."trait:food"+ " on " +\$actor."base:possessive"+ " " +\$this."trait:material"+ " " +\$this."trait:container"+ ".", \$actor);                                          
\$this."trait:quantity" -= 1;                                          
if(\$this."trait:quantity" == 0) \{                                         
\$this."trait:food" = "empty";                                        
Set(\$this, "details:food:hidden", TRUE);                                       
return FALSE;                                         
\}                                         
return FALSE;                                          
\} else \{                                      
EmitTo(\$actor, "Your " +\$this."trait:material"+ " " +\$this."trait:container"+ " is empty.");                                     
return FALSE;                                          
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:savor-dob">
         X[M] if(\$this."trait:quantity" == 1 \|\| \$this."trait:quantity" \>= 1) \{                                          
EmitTo(\$actor, "You savor the " +\$this."trait:color"+ " " +\$this."trait:food"+ " on your " +\$this."trait:material"+ " " +\$this."trait:container"+ ". " +\$this."emote:taste"+ ".");                                          
EmitIn(\$actor."base:environment", Describe(\$actor)+ " savors the " +\$this."trait:color"+ " " +\$this."trait:food"+ " on " +\$actor."base:possessive"+ " " +\$this."trait:material"+ " " +\$this."trait:container"+ ".", \$actor);                                          
\$this."trait:quantity" -= 1;                                          
if(\$this."trait:quantity" == 0) \{                                         
\$this."trait:food" = "empty";                                        
Set(\$this, "details:food:hidden", TRUE);                                       
return FALSE;                                         
\}                                         
return FALSE;                                          
\} else \{                                      
EmitTo(\$actor, "Your " +\$this."trait:material"+ " " +\$this."trait:container"+ " is empty.");                                     
return FALSE;                                          
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:savour-dob">
         X[M] if(\$this."trait:quantity" == 1 \|\| \$this."trait:quantity" \>= 1) \{                                          
EmitTo(\$actor, "You savour the " +\$this."trait:color"+ " " +\$this."trait:food"+ " on your " +\$this."trait:material"+ " " +\$this."trait:container"+ ". " +\$this."emote:taste"+ ".");                                          
EmitIn(\$actor."base:environment", Describe(\$actor)+ " savours the " +\$this."trait:color"+ " " +\$this."trait:food"+ " on " +\$actor."base:possessive"+ " " +\$this."trait:material"+ " " +\$this."trait:container"+ ".", \$actor);                                          
\$this."trait:quantity" -= 1;                                          
if(\$this."trait:quantity" == 0) \{                                         
\$this."trait:food" = "empty";                                        
Set(\$this, "details:food:hidden", TRUE);                                       
return FALSE;                                         
\}                                         
return FALSE;                                          
\} else \{                                      
EmitTo(\$actor, "Your " +\$this."trait:material"+ " " +\$this."trait:container"+ " is empty.");                                     
return FALSE;                                          
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:taste-dob">
         X[M] if(\$this."trait:quantity" == 1 \|\| \$this."trait:quantity" \>= 1) \{                                          
EmitTo(\$actor, "You taste the " +\$this."trait:color"+ " " +\$this."trait:food"+ " on your " +\$this."trait:material"+ " " +\$this."trait:container"+ ". " +\$this."emote:taste"+ ".");                                          
EmitIn(\$actor."base:environment", Describe(\$actor)+ " tastes the " +\$this."trait:color"+ " " +\$this."trait:food"+ " on " +\$actor."base:possessive"+ " " +\$this."trait:material"+ " " +\$this."trait:container"+ ".", \$actor);                                          
\$this."trait:quantity" -= 1;                                          
if(\$this."trait:quantity" == 0) \{                                         
\$this."trait:food" = "empty";                                        
Set(\$this, "details:food:hidden", TRUE);                                       
return FALSE;                                         
\}                                         
return FALSE;                                          
\} else \{                                      
EmitTo(\$actor, "Your " +\$this."trait:material"+ " " +\$this."trait:container"+ " is empty.");                                     
return FALSE;                                          
\}
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:color">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this, \$detail: "food");
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:container">
         X[M] Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);                                           
Call(\$\{Allegory:Props:Crafting:UrCrafting\}, "replacesname", \$object: this);                                           
return TRUE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:food">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replacenames", \$object: this, \$detail: "food");
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:material">
         X[M] return Call(\$\{Allegory:Props:Crafting:UrCrafting\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="new property name">
         "New Property Value"
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1144903234, "sinistrelle", "X", 1144904210, "sinistrelle", "X", 1144904411, "sinistrelle", "E", 1144904507, "sinistrelle", "X", 1144904602, "sinistrelle", "E", 1144904662, "sinistrelle", "X", 1144904732, "sinistrelle", "X", 1144904827, "sinistrelle", "X", 1144904841, "sinistrelle", "E", 1144904913, "sinistrelle", "X", 1144904939, "sinistrelle", "X", 1144905163, "sinistrelle", "X", 1144905233, "sinistrelle", "X", 1144905417, "sinistrelle", "E", 1144905452, "sinistrelle", "X", 1144905772, "sinistrelle", "X", 1144906386, "sinistrelle", "E", 1144906458, "sinistrelle", "E", 1144906503, "sinistrelle", "E", 1144906689, "sinistrelle", "E", 1144907732, "sinistrelle", "X", 1144908101, "sinistrelle", "E", 1144908248, "sinistrelle", "X", 1144908713, "sinistrelle", "X", 1144986665, "sinistrelle", "E", 1144987705, "sinistrelle", "X", 1144987758, "sinistrelle", "E", 1144988151, "sinistrelle", "X", 1144988203, "sinistrelle", "E", 1144988347, "sinistrelle", "X", 1144988387, "sinistrelle", "E", 1144988834, "sinistrelle", "X", 1144989037, "sinistrelle", "X", 1144989943, "sinistrelle", "E", 1144989957, "sinistrelle", "E", 1144989981, "sinistrelle", "X", 1144991453, "sinistrelle", "E", 1144991852, "sinistrelle", "X", 1144992687, "sinistrelle", "X", 1144993471, "sinistrelle", "E", 1144993616, "sinistrelle", "X", 1144993790, "sinistrelle", "X", 1145132318, "sinistrelle", "X", 1145132427, "sinistrelle", "E", 1145132444, "sinistrelle", "X", 1145157870, "sinistrelle", "E", 1145158037, "sinistrelle", "E", 1145252388, "sinistrelle", "E", 1148788860, "sinistrelle", "E", 1148789413, "sinistrelle", "E", 1148789498, "sinistrelle", "E", 1148789523, "sinistrelle", "E", 1148789791, "sinistrelle", "X", 1148790019, "sinistrelle", "E", 1148790074, "sinistrelle", "X", 1148790121, "sinistrelle", "E", 1148790247, "sinistrelle", "E", 1148790331, "sinistrelle", "E", 1148790386, "sinistrelle", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="trait:color">"clam"</Core:Property>
      <Core:Property property="trait:food">"meat"</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
