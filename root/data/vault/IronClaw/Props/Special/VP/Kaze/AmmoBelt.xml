<object clone="/base/obj/thing" owner="SkotOS">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="belt"/>
            <Base:SName sname="clothing"/>
            <Base:SName sname="garment"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="belts"/>
            <Base:PName pname="clothings"/>
            <Base:PName pname="garments"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="white"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             white belt with slots
          </Base:Description>
          <Base:Description type="examine">
             A white belt with several different slots, buckled at the back. They are all the same size and seem to be able to hold a special size of vial.
          </Base:Description>
          <Base:Description type="look">
             A white belt with several different slots, buckled at the back.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="buckle" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="buckle"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="buckles"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="belt"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             strong silver buckle
          </Base:Description>
          <Base:Description type="examine">
             A strong silver buckle, placed on the back of the belt.
          </Base:Description>
          <Base:Description type="look">
             A strong silver buckle, placed on the back of the belt.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="slots" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="slot"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="slots"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="belt"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             several slots on the outside of the white belt
          </Base:Description>
          <Base:Description type="examine">
             Several slots, distinctly shaped to hold a special type of item.
          </Base:Description>
          <Base:Description type="look">
             Several slots, distinctly shaped to hold a special type of item.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:Covered value="waist"/>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="merry:react-pre:grasp-dob">
         X[M] /* Defines the spawn */       
\$roll = random(18) +1;       
switch(\$roll) \{      
  case 1:      
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:Black"));      
    break;      
  case 2:      
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:Blue"));       
    break;      
  case 3:      
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:Crystal"));      
    break;      
  case 4:      
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:Cyan"));       
    break;      
  case 5:      
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:DarkBrown"));      
    break;      
  case 6:      
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:DarkSalmon"));       
    break;      
  case 7:      
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:DarkViolet"));      
    break;      
  case 8:      
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:Fuchsia"));       
    break;      
  case 9:      
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:Gold"));      
    break;      
  case 10:      
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:Green"));       
    break;      
  case 11:      
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:IceBlue"));      
    break;      
  case 12:      
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:Indigo"));       
    break;      
  case 13:      
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:LightSteel"));      
    break;      
  case 14:      
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:Lime"));       
    break;      
  case 15:      
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:Orange"));      
    break;      
  case 16:      
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:Silver"));       
    break;      
  case 17:      
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:White"));      
    break;   
  case 18:  
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:TearRainbow"));  
    break;     
  default:      
EmitTo(\$actor, "The randomness has left the expected value. This should not occur. Please @bug and explain what happened.");      
\}  
if(\$actor != \$this."base:environment") return TRUE;                                      

/* This emits to the actor */       
EmitTo( \$actor, "You grasp at " +Describe(\$this, nil, \$actor)+ ". Using your feelings, you grab " +Describe(\$spawn)+ ". You pull it out, holding it between finger and thumb easily." );       
       
/* This emits to the environment */                                              
EmitIn( \$actor."base:environment", Describe(\$actor)+ " grabs " +Describe(\$spawn)+ " from " +Describe(\$this, nil, nil, STYLE_NONPOSS)+".", \$actor );     
/* This tells the script where the spawn will be going */                      
\$spawn."base:environment" = \$actor;      
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:hit-dob">
         X[M] /* Defines the spawn */      

\$roll = random(18) +1;      
switch(\$roll) \{     
  case 1:     
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:Black"));     
    break;     
  case 2:     
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:Blue"));      
    break;     
  case 3:     
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:Crystal"));     
    break;     
  case 4:     
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:Cyan"));      
    break;     
  case 5:     
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:DarkBrown"));     
    break;     
  case 6:     
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:DarkSalmon"));      
    break;     
  case 7:     
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:DarkViolet"));     
    break;     
  case 8:     
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:Fuchsia"));      
    break;     
  case 9:     
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:Gold"));     
    break;     
  case 10:     
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:Green"));      
    break;     
  case 11:     
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:IceBlue"));     
    break;     
  case 12:     
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:Indigo"));      
    break;     
  case 13:     
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:LightSteel"));     
    break;     
  case 14:     
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:Lime"));      
    break;     
  case 15:     
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:Orange"));     
    break;     
  case 16:     
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:Silver"));      
    break;     
  case 17:     
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:White"));     
    break;  
  case 18: 
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:TearRainbow")); 
    break;    
  default:     
EmitTo(\$actor, "The randomness has left the expected value. This should not occur. Please @bug and explain what happened.");     
\}    
if(\$actor != \$this."base:environment") return TRUE;                                   
/* This emits to the actor */ 
     
EmitTo( \$actor, "You hit " +Describe(\$this, nil, \$actor)+ ". Sharply, " +Describe(\$spawn)+ " shoots out, lingering briefly in the air before you catch it, holding it between finger and thumb." );      
      
/* This emits to the environment */
                                             
EmitIn( \$actor."base:environment", Describe(\$actor)+ " hits " +Describe(NewNRef(\$spawn, "default"))+ " from " +Describe(\$this, nil, nil, STYLE_NONPOSS)+ ". It lingers in the air before " +\$actor."base:pronoun" + " catch it between finger and thumb.", \$actor );

/* This tells the script where the spawn will be going */                     
\$spawn."base:environment" = \$actor;     
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:tap-dob">
         X[M] /* Defines the spawn */       
\$roll = random(18) +1;       
switch(\$roll) \{      
  case 1:      
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:Black"));      
    break;      
  case 2:      
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:Blue"));       
    break;      
  case 3:      
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:Crystal"));      
    break;      
  case 4:      
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:Cyan"));       
    break;      
  case 5:      
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:DarkBrown"));      
    break;      
  case 6:      
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:DarkSalmon"));       
    break;      
  case 7:      
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:DarkViolet"));      
    break;      
  case 8:      
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:Fuchsia"));       
    break;      
  case 9:      
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:Gold"));      
    break;      
  case 10:      
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:Green"));       
    break;      
  case 11:      
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:IceBlue"));      
    break;      
  case 12:      
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:Indigo"));       
    break;      
  case 13:      
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:LightSteel"));      
    break;      
  case 14:      
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:Lime"));       
    break;      
  case 15:      
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:Orange"));      
    break;      
  case 16:      
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:Silver"));       
    break;      
  case 17:      
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:White"));      
    break;   
  case 18:  
    \$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:Ammo:TearRainbow"));  
    break;     
  default:      
EmitTo(\$actor, "The randomness has left the expected value. This should not occur. Please @bug and explain what happened.");      
\}  
if(\$actor != \$this."base:environment") return TRUE;                                      
/* This emits to the actor */       
EmitTo( \$actor, "You tap " +Describe(\$this, nil, \$actor)+ ". Following your feelings, you grab at " +Describe(\$spawn)+ ". You pull it out, holding it between finger and thumb." );       
       
/* This emits to the environment */                                              
EmitIn( \$actor."base:environment", Describe(\$actor)+ " pulls " +Describe(\$spawn)+ " from " +Describe(\$this, nil, nil, STYLE_NONPOSS)+".", \$actor );     
/* This tells the script where the spawn will be going */                      
\$spawn."base:environment" = \$actor;      
return FALSE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1144052085, "-", "SYNC", 1147852926, "barbra18", "E", 1147852937, "barbra18", "X", 1147853515, "barbra18", "K", 1147853549, "barbra18", "E", 1147865957, "barbra18", "E", 1147879315, "tunk_bodin", "X", 1147879611, "tunk_bodin", "X", 1147880209, "tunk_bodin", "X", 1147880260, "tunk_bodin", "X", 1147880281, "tunk_bodin", "X", 1147901703, "barbra18", "X", 1147944875, "barbra18", "X", 1172841837, "barbra18", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
