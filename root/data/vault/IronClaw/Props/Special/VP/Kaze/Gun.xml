<object clone="/base/obj/thing" owner="barbra18">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Allegory:Props:Weapons:Guns:Light:Pistol)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="true" default_stance="lying" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="false" inside="false" near="true" over="false" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="pistol"/>
            <Base:SName sname="gun"/>
            <Base:SName sname="weapon"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="pistols"/>
            <Base:PName pname="guns"/>
            <Base:PName pname="weapons"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="ranged"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.trait:material) pistol
          </Base:Description>
          <Base:Description type="examine">
             The customized {? equal | $(this.trait:material) | none || $(this.trait:material) } pistol,{? equal | $(this.appearance:filigree) | none || decorated with $(this.appearance:filigree) filigree, } is a weapon involving wound springs and gunpowder which will fire a bullet with tremendous impetus. {? equal | $(this.appearance:engraving) | none || <br/>It has an engraving, which reads: "$(this.appearance:engraving)".}
          </Base:Description>
          <Base:Description type="look">
             The {? equal | $(this.trait:material) | none || $(this.trait:material) } pistol, a weapon involving wound springs and gunpowder which can fire a bullet with great force. This particular pistol has been heavily customized.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="true" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="switch" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="switch"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="gun"/>
          <Base:Adjective adjective="pale"/>
          <Base:Adjective adjective="silver"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             pale silver switch
          </Base:Description>
          <Base:Description type="examine">
             A pale silver switch. It doesn't appear to be anything other than decoration.
          </Base:Description>
          <Base:Description type="look">
             A pale silver switch. It doesn't appear to be anything other than decoration.
          </Base:Description>
          <Base:Description type="pnames">
             switches
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="trigger" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="trigger"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="triggers"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="gun"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             small trigger
          </Base:Description>
          <Base:Description type="examine">
             A small trigger beneath the main barrel of the gun. It seems to be connected to the mechanism to make it fire.
          </Base:Description>
          <Base:Description type="look">
             A small trigger beneath the main barrel of the gun. It seems to be connected to the mechanism to make it fire.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:appearance:engraving">
         "Some say 'For Love or Money' but I just want the money!"
      </Core:Property>
      <Core:Property property="export:appearance:filigree">
         "gold skull"
      </Core:Property>
      <Core:Property property="merry:lib:switch">
         X[M] /* Check to see if its the actual person using it */       
if(\$this."base:environment" != \$actor) \{ return TRUE; \};    
    
    
/* Spawn Kaze's gun and destroy the casing */      
      
\$gun = Spawn(\$\{IronClaw:Props:Special:VP:Kaze:GunCase\});      
EmitTo(\$actor, "You flick "+Describe(NewNRef(\$this, "switch"), nil, \$actor)+". In a matter of moments, it somehow changes from "+Describe(\$this, nil, \$actor, STYLE_NONPOSS)+" to "+Describe(\$gun, nil, nil, STYLE_NONPOSS)+".");      
EmitIn(\$actor."base:environment", Describe(\$actor)+" flicks "+Describe(NewNRef(\$this, "switch"), \$actor)+". In a matter of moments, it somehow changes from "+Describe(\$this, \$actor, nil, STYLE_NONPOSS)+" to "+Describe(\$gun, nil, nil, STYLE_NONPOSS)+".", \$actor);      
\$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:GunCase"));     
      
/* Spawn the gun */    
    
\$spawn = Spawn(Obj("IronClaw:Props:Special:VP:Kaze:GunCase"));                                  
\$spawn."base:environment" = \$this."base:environment";                                  
\$spawn."base:proximity" = \$this."base:proximity";    
      
/* slay the casing */      
      
Slay(\$this);      
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:trigger">
         X[M] /* Check to see if its the actual person using it */       
if(\$this."base:environment" != \$actor) \{ return TRUE; \};        
       
/* Check to see if the gun is open */       
if(\$this."details:default:exit:closed" == 0) \{ EmitTo (\$actor, " You cannot fire the gun. It is open.");         
return FALSE; \}       
       
/* Check to see if gun is loaded */       
       
/* If everything is good, this shows. */       
EmitTo (\$actor, "You press the trigger of " +Describe(\$this, nil, \$actor)+ ". It makes a loud bang as the slug is released from the chamber." );        
EmitIn (\$actor."base:environment", Describe(\$actor)+ " presses the trigger of " +Describe(\$this, \$actor)+ ". It makes a loud bang as a slug is released from the chamber.", \$actor);        
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-post:aim-dob">
         X[M] EmitTo(\$actor, "Wow, I look scary now, "+Describe(\$target)+" is going down, man!");       
if(\$iob \&\& (sizeof(\$iob) == 1) \&\& (NRefOb(\$iob[0])."base:volition" == 1 )) \{       
\$target = NRefOb(\$iob[0]);       
EmitTo(\$target, +Describe(\$actor)+ " is aiming "+Describe(\$this)+ " at me!");       
EmitIn(\$actor."base:environment", Describe(\$actor)+ " is aiming " +Describe(\$this)+ " at " +Describe(\$target)+".");     
return TRUE;       
\} else \{       
return TRUE;       
\}
      </Core:Property>
      <Core:Property property="merry:react-post:load-dob">
         X[M] /* code to load the gun */       
       
/* check we are holding the gun */       
if(\$actor != \$this."base:environment") return TRUE;       
       
/* does the gun already have ammo? */       
if(\$this.loadedammo) \{       
  EmitTo(\$actor, Describe(\$this, nil, \$actor)+" is already loaded with a "+\$this.loadedammo+" slug. Eject that before loading another.");       
  return FALSE;       
\}       
       
/* did they load the gun WITH something? */       
       
if(!\$using) \{       
  /* they didn't load it with anything */       
    /* either return true (which is what we're doing) so they can RP loading OR */       
    /* have it search their body to see if they have any ammo, and use that */       
  return TRUE;       
\}       
       
/* check they are only loading one thing at a time */       
if(sizeof(\$dob) \> 1)       
  return TRUE;       
       
/* check they are only loading one item */       
if(sizeof(\$using) \> 1)       
  return TRUE;       
       
/* check to see if the gun is closed */       
if(\$this."details:default:exit:closed" == 1) \{ EmitTo (\$actor, " You are unable to load the gun. It is closed.");          
return FALSE; \}         
       
/* they said to load it WITH something. Check that what they're loading is ammo */       
/* check that the trait:type is kazegunammo */       
if(!NRefOb(\$using[0])."trait:type" \|\| NRefOb(\$using[0])."trait:type" != "kazegunammo") \{       
  /* wrong ammo type. return true, for social roleplay */       
  return TRUE;       
\}       
       
EmitTo(\$actor, "There is a click, as the ammo slots into place.");       
EmitIn(\$actor."base:environment", "There is a click, as "+Describe(\$actor)+"'s ammo slots into place.", \$actor);       
       
/* set the ammo type in the gun */       
\$this.loadedammo = NRefOb(\$using[0])."trait:color";       
  
/* slay the ammo */       
Slay(NRefOb(\$using[0]));       
       
/* now we're done! */       
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:load-iob">
         X[M] /* code to load the gun */          
          
/* check we are holding the gun */          
if(\$actor != \$this."base:environment") return TRUE;          
          
/* does the gun already have ammo? */          
if(\$this.loadedammo) \{          
  EmitTo(\$actor, Describe(\$this, nil, \$actor)+" is already loaded with a "+\$this.loadedammo+" slug. Eject that before loading another.");          
  return FALSE;          
\}          
          
/* did they load the gun WITH something? */          
          
if(!\$dob) \{          
  /* they didn't load it with anything */          
    /* either return true (which is what we're doing) so they can RP loading OR */          
    /* have it search their body to see if they have any ammo, and use that */          
  return TRUE;          
\}          
          
/* check they are only loading one thing at a time */          
if(sizeof(\$dob) \> 1)          
  return TRUE;          
          
/* check they are only loading one item */          
if(sizeof(\$iob) \> 1)          
  return TRUE;          
          
/* they said to load it WITH something. Check that what they're loading is ammo */          
/* check that the trait:type is kazegunammo */          
if(!NRefOb(\$dob[0])."trait:type" \|\| NRefOb(\$dob[0])."trait:type" != "kazegunammo") \{          
  /* wrong ammo type. return true, for social roleplay */          
  return TRUE;          
\}          
          
EmitTo(\$actor, "There is a click, as the ammo slots into place.");          
EmitIn(\$actor."base:environment", "There is a click, as "+Describe(\$actor)+"'s ammo slots into place.", \$actor);          
          
/* set the ammo type in the gun */          
\$this.loadedammo = NRefOb(\$dob[0])."trait:color";          
    
if(NRefOb(\$dob[0])."trait:quality") \{      
  \$this."firearm:loaded" = NRefOb(\$dob[0])."trait:quality";      
\} else \{      
  \$this."firearm:loaded" = 4;      
\}      
\$this."firearm:loadtime" = time();      
     
/* slay the ammo */          
Slay(NRefOb(\$dob[0]));          
          
/* now we're done! */          
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:unwield%cstat">
         X[M] /*             
This function sets the statistics when a weapon is unwielded             
*/              
            
/* remove action bonus/penalty to the player */            
Set(\$actor, "combat:actions", Get(\$actor, "combat:actions") - Get(this, "weapon:speed"));              
             
if(Get(\$actor, "combat:actions") \< Get(\$actor, "combat:actions:current")) \{             
    Set(\$actor, "combat:actions:current", Get(\$actor, "combat:actions"));             
\}             
            
            
/* set weapon statistics */            
Set(\$actor, "combat:weapon", nil);            
             
/*start actions regenerating in the victim*/             
Call(\$\{IronClaw:Lib:Combat:Lib-old\}, "regenerate_actions", \$victim: \$actor);             
             
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:wield%cstat">
         X[M] /*                
This function sets the statistics when a weapon is wielded             
*/              
            
/* give action bonus/penalty to the player */              
Set(\$actor, "combat:actions", Get(\$actor, "combat:actions") + Get(this, "weapon:speed"));              
             
if(Get(\$actor, "combat:actions") \< Get(\$actor, "combat:actions:current")) \{             
    Set(\$actor, "combat:actions:current", Get(\$actor, "combat:actions"));             
\}             
             
/* set weapon statistics */              
Set(\$actor, "combat:weapon", \$this);            
            
/*start actions regenerating in the victim*/             
Call(\$\{IronClaw:Lib:Combat:Lib-old\}, "regenerate_actions", \$victim: \$actor);             
             
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:close-what">
         X[M] if(\$this."base:environment" != \$actor) \{ return TRUE; \}         
if(\$this."details:default:exit:closed" == 1) \{ EmitTo (\$actor, " It is already closed, idiot!");          
return FALSE; \}         
else \{ EmitTo (\$actor, "You snap " +Describe(\$this, nil, \$actor)+ " shut. It makes a loud click as the chamber clicks back into place.");          
EmitIn (\$actor."base:environment", Describe(\$actor)+ " snaps " +Describe(\$this, \$actor)+ " shut. It makes a loud click.", \$actor);         
\$this."details:default:exit:closed:silently" = 1; \}         
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:flick-dob">
         X[M] Call (this, "switch");      
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:open-what">
         X[M] if(\$this."base:environment" != \$actor) \{ return TRUE; \}         
if(\$this."details:default:exit:closed" == 0) \{ EmitTo (\$actor, " It is already open, idiot!");          
return FALSE; \}         
else \{ EmitTo (\$actor, "You open " +Describe(\$this, nil, \$actor)+ ". It makes a subtle click as the side falls slightly to reveal a single chamber. " );          
EmitIn (\$actor."base:environment", Describe(\$actor)+ " opens " +Describe(\$this, \$actor)+ ". It makes a subtle click.", \$actor);          
\$this."details:default:exit:closed:silently" = 0; \}         
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:shoot-dob">
         X[M] /* shoot the pistol */       
       
/* check we are holding the pistol */       
if(\$actor != \$this."base:environment") return TRUE;       
       
if(!\$this.loadedammo) \{       
  /* no ammo! */       
  EmitTo(\$actor, "There is a click, as "+Describe(\$this, nil, \$actor)+" fails to fire.");       
  EmitIn(\$actor."base:environment", Describe(\$actor)+" pulls the trigger on "+Describe(\$this, \$actor)+", but it fails to fire.", \$actor);       
  return FALSE;       
\}       
       
/* clear the chamber */       
\$ammo = \$this.loadedammo;       
\$this.loadedammo = nil;       
       
/* put in code for special ammo below */       
switch(\$ammo) \{       
  case "tear rainbow":       
    EmitTo(\$actor, "A rainbow shoots from the gun");    
EmitIn(\$actor."base:environment", Describe(\$actor)+" pulls the trigger on "+Describe(\$this, \$actor)+", and a rainbow shoots at the target.", \$actor);        
    break;       
  case "ice blue":       
    EmitTo(\$actor, "Freezing ice shoots from the gun");    
EmitIn(\$actor."base:environment", Describe(\$actor)+" pulls the trigger on "+Describe(\$this, \$actor)+", and a bolt of freezing ice shoots at the target.", \$actor);           
    break;       
  default:       
    /* don't recognize this color bullet. */       
    /* just shoot normally */       
    break;       
\}       
       
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:press-dob">
         X[M] Call (this, "trigger");
      </Core:Property>
      <Core:Property property="misc:lastdropped">
         "1147849700 Kaze[barbra18]"
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1107209474, "zwoc", "E", 1131654842, "roccon", "E", 1131654906, "roccon", "E", 1131654959, "roccon", "E", 1131654983, "roccon", "E", 1131654997, "roccon", "E", 1131655094, "roccon", "E", 1131655216, "roccon", "E", 1131655269, "roccon", "E", 1137996381, "tonyd", "E", 1137996686, "tonyd", "E", 1137997000, "tonyd", "E", 1137997104, "tonyd", "E", 1137997156, "tonyd", "E", 1137997329, "tonyd", "E", 1137997384, "tonyd", "E", 1137997440, "tonyd", "E", 1137997481, "tonyd", "E", 1137997533, "tonyd", "E", 1138837504, "tonyd", "E", 1138837626, "tonyd", "P", 1138837663, "tonyd", "P", 1138837703, "tonyd", "P", 1138837776, "tonyd", "P", 1138837822, "tonyd", "P", 1138837852, "tonyd", "P", 1138838190, "tonyd", "P", 1138838367, "tonyd", "P", 1138838565, "tonyd", "P", 1138838694, "tonyd", "P", 1138838749, "tonyd", "P", 1138838768, "tonyd", "P", 1138838787, "tonyd", "P", 1138838811, "tonyd", "P", 1138839739, "tonyd", "P", 1138839845, "tonyd", "P", 1138839984, "tonyd", "P", 1138840061, "tonyd", "P", 1138840089, "tonyd", "P", 1138840247, "tonyd", "P", 1138840404, "tonyd", "P", 1146590807, "barbra18", "K", 1146598763, "tunk_bodin", "X", 1146598917, "tunk_bodin", "X", 1146598947, "tunk_bodin", "S", 1146599018, "tunk_bodin", "S", 1146599097, "tunk_bodin", "S", 1146599105, "tunk_bodin", "X", 1146599172, "tunk_bodin", "X", 1146599279, "tunk_bodin", "X", 1146599868, "tunk_bodin", "X", 1146600006, "tunk_bodin", "X", 1146600279, "tunk_bodin", "X", 1146600672, "tunk_bodin", "X", 1146600727, "tunk_bodin", "X", 1147953459, "barbra18", "E", 1147953471, "barbra18", "E", 1147953513, "barbra18", "E", 1147953531, "barbra18", "E", 1147954094, "barbra18", "E", 1147954367, "barbra18", "E", 1147954413, "barbra18", "E", 1147954548, "barbra18", "X", 1147954709, "barbra18", "E", 1147954734, "barbra18", "E", 1147954817, "barbra18", "E", 1147954993, "barbra18", "E", 1147955076, "barbra18", "E", 1147955145, "barbra18", "E", 1147955182, "barbra18", "E", 1147955198, "barbra18", "E", 1147960174, "barbra18", "E", 1147963340, "barbra18", "X", 1147965889, "barbra18", "E", 1147967970, "barbra18", "E", 1148018418, "barbra18", "K", 1148020745, "barbra18", "X", 1148021185, "barbra18", "X", 1148027189, "tonyd", "E", 1148027430, "tonyd", "P", 1148027472, "tonyd", "P", 1148027486, "tonyd", "P", 1148027502, "tonyd", "P", 1148027651, "tonyd", "P", 1148029109, "tonyd", "P", 1148029637, "tonyd", "P", 1148029949, "tonyd", "P", 1148030575, "tonyd", "P", 1148030636, "tonyd", "P", 1148030701, "tonyd", "P", 1148031730, "tonyd", "P", 1148031773, "tonyd", "P", 1148031981, "tonyd", "P", 1148034533, "barbra18", "X", 1148039446, "tonyd", "P", 1148267733, "barbra18", "K", 1148268035, "barbra18", "X", 1148268219, "barbra18", "X", 1148307016, "barbra18", "E", 1148346783, "barbra18", "E", 1167572211, "barbra18", "X", 1167572240, "barbra18", "E", 1167574335, "barbra18", "E", 1172841690, "barbra18", "E", 1173059274, "barbra18", "E", 1209528010, "rastalabor", "X", 1210880660, "rastalabor", "X", 1210881319, "rastalabor", "X", 1210881330, "rastalabor", "E", 1210881518, "rastalabor", "X", 1210881835, "rastalabor", "X", 1210882244, "rastalabor", "X", 1210882364, "rastalabor", "X" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="trait:material">
         "blue steel"
      </Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
