<object clone="/base/obj/thing" owner="slurpeeslurp">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Allegory:Props:Crafting:UrCrafting)"/>
    <Base:Bulk immobile="false" mass="0.3" density="1.1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="pot"/>
            <Base:SName sname="treatment"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="pots"/>
            <Base:PName pname="treatments"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="clay"/>
          <Base:Adjective adjective="dry"/>
          <Base:Adjective adjective="natural"/>
          <Base:Adjective adjective="softening"/>
          <Base:Adjective adjective="wrinkled"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             small pot of $(this.trait:color) $(this.trait:material)
          </Base:Description>
          <Base:Description type="examine">
             A small pot of $(this.trait:color) $(this.trait:material) designed to be used as a facial treatment. Made from all natural ingredients, it is designed to act as a softening agent and lend relief to dry or wrinkled parts of the body.<br/> There seems to be enough clay for another $(this.trait:quantity) applications.
          </Base:Description>
          <Base:Description type="look">
             A small pot of $(this.trait:color) $(this.trait:material) designed to be used as a facial treatment.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="10"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:trait:brief">
         "facial treatment"
      </Core:Property>
      <Core:Property property="export:trait:container">
         "pot"
      </Core:Property>
      <Core:Property property="export:trait:material"/>
      <Core:Property property="export:trait:objecttype">
         "lotion"
      </Core:Property>
      <Core:Property property="export:trait:quantity">
         5
      </Core:Property>
      <Core:Property property="export:trait:smell">
         "mellow earthiness"
      </Core:Property>
      <Core:Property property="merry:react-pre:apply-dob">
         X[M] \$victim = \$iob;
if(\$victim \&\& (sizeof(\$victim) == 1)) \{
EmitIn( \$actor."base:environment", Describe(\$actor)+" liberally slathers "+Describe(this)+" on " +Describe(\$victim, \$actor)+ ".", \$actor );
EmitTo( \$actor, "You liberally slather "+Describe(this)+" on " +Describe(\$victim, nil, \$actor)+ "." );
/*\$actor."trait:smell" = \$this."trait:smell";
\$actor."trait:taste" = "of " +\$this."trait:smell";*/

  if(!NRefOb(\$victim[0])."trait:smells") NRefOb(\$victim[0])."trait:smells" = ([ ]);
  NRefOb(\$victim[0])."trait:smells"[\$this."trait:smell"] = (\{ 30, time() \});

  \$this."trait:quantity" -= 1;
  if(\$this."trait:quantity" == 0) \{
    \$delay(0.1, FALSE, "4cbf");
    EmitTo(\$actor, Describe(\$this, nil, \$actor)+" has run out.");
    Slay(\$this);
  \}
  return FALSE;
\} else if(\$iob \&\& (sizeof(\$iob) \>= 1)) \{
  EmitTo( \$actor, "You may only rub " +Describe(this)+" on one thing at a time." );
  return FALSE;
\} else \{
  EmitTo( \$actor, "What do you intend to rub " +Describe(this)+" on?" );
  return FALSE;
\}
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:massage-using">
         X[M] \$victim = \$dob;
if(\$victim \&\& (sizeof(\$victim) == 1)) \{
EmitIn( \$actor."base:environment", Describe(\$actor)+" massages "+Describe(\$victim, \$actor)+" with " +Describe(this)+ ".", \$actor );
EmitTo( \$actor, "You massage "+Describe(\$victim, nil, \$actor)+" with " +Describe(this)+ "." );
/*\$actor."trait:smell" = \$this."trait:smell";
\$actor."trait:taste" = "of " +\$this."trait:smell";*/

  if(!NRefOb(\$victim[0])."trait:smells") NRefOb(\$victim[0])."trait:smells" = ([ ]);
  NRefOb(\$victim[0])."trait:smells"[\$this."trait:smell"] = (\{ 30, time() \});

  \$this."trait:quantity" -= 1;
  if(\$this."trait:quantity" == 0) \{
    \$delay(0.1, FALSE, "656d");
    EmitTo(\$actor, Describe(\$this, nil, \$actor)+" has run out.");
    Slay(\$this);
  \}
  return FALSE;
\} else if(\$iob \&\& (sizeof(\$iob) \>= 1)) \{
  EmitTo( \$actor, "You may only massage " +Describe(this)+" on one thing at a time." );
  return FALSE;
\} else \{
  EmitTo( \$actor, "Whom do you intend to massage " +Describe(this)+" onto?" );
  return FALSE;
\}
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:rub-dob">
         X[M] if(!this."trait:quantity" \|\| this."trait:quantity" \< -1) \{
    EmitTo(\$actor, "There is no clay left in "+Describe(this, nil, \$actor)+".");
    return FALSE;
  \}
  this."trait:quantity" = this."trait:quantity" - 1;
  EmitTo(\$actor, "You liberally slather some of the facial treatment on "+Describe(\$iob[0], nil, \$actor)+".");
  EmitIn(\$actor."base:environment", Describe(\$actor)+" liberally slathers some of the clay facial treatment on "+Describe(\$iob[0], \$actor)+".", \$actor);

return FALSE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:container">
         X[M] Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this); 
Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replacesname", \$object: this); 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:material">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:quantity">
         X[M] if(\$this."trait:quantity" == 0 \|\| 0 \>= \$this."trait:quantity") \{         
if(\$this."no:slay" == 1) \{         
return FALSE;         
\} else \{  
EmitTo(\$this."base:environment", "You have tragically scraped the last of the product from " +Describe(\$this, nil, \$actor, STYLE_NONPOSS)+ ".");    
Slay(\$this);         
return TRUE;  
\}         
\}
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1149008096, "tunk_bodin", "X", 1149008209, "tunk_bodin", "X", 1149008346, "tunk_bodin", "X", 1150560190, "tunk_bodin", "X", 1150560253, "tunk_bodin", "X", 1150560267, "tunk_bodin", "X", 1223147480, "slurpeeslurp", "E", 1223147510, "slurpeeslurp", "E", 1223147545, "slurpeeslurp", "K", 1223147577, "slurpeeslurp", "K", 1223147577, "slurpeeslurp", "K", 1223147652, "slurpeeslurp", "E", 1223147737, "slurpeeslurp", "E", 1223148363, "slurpeeslurp", "E", 1223148470, "slurpeeslurp", "E", 1223148591, "slurpeeslurp", "E", 1223148665, "slurpeeslurp", "E", 1223148727, "slurpeeslurp", "E", 1223149057, "slurpeeslurp", "E", 1223149084, "slurpeeslurp", "E", 1223149103, "slurpeeslurp", "E", 1223149269, "slurpeeslurp", "E", 1223152474, "haystack", "E", 1223152823, "haystack", "E", 1223157966, "haystack", "E", 1223157975, "haystack", "E", 1223158547, "haystack", "E", 1223158598, "haystack", "E", 1223366192, "haystack", "E", 1223371071, "haystack", "E", 1223371250, "haystack", "E", 1223379338, "slurpeeslurp", "E", 1223379478, "slurpeeslurp", "E", 1223379517, "slurpeeslurp", "E", 1223379535, "slurpeeslurp", "E", 1223379596, "slurpeeslurp", "K", 1223379658, "slurpeeslurp", "E", 1223379721, "slurpeeslurp", "E", 1227010119, "slurpeeslurp", "E", 1227010276, "slurpeeslurp", "E", 1227010322, "slurpeeslurp", "E", 1227010474, "slurpeeslurp", "E", 1227010497, "slurpeeslurp", "E", 1227010517, "slurpeeslurp", "R", 1227010675, "slurpeeslurp", "E", 1227010717, "slurpeeslurp", "E", 1227010807, "slurpeeslurp", "E", 1260699989, "slurpeeslurp", "E", 1312218244, "slurpeeslurp", "E", 1404678556, "slurpeeslurp", "K", 1404678565, "slurpeeslurp", "E", 1404678684, "slurpeeslurp", "E", 1404678860, "slurpeeslurp", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="trait:quantity">5</Core:Property>
      <Core:Property property="trait:smell">
         "mellow earthiness"
      </Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
