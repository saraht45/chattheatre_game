<object clone="/base/obj/thing" owner="slurpeeslurp">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(IronClaw:Props:Furniture:UrObjectContainer)"/>
    <Base:Bulk immobile="false" mass="1" density="0.9"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="lying" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="bank"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="banks"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="clay"/>
          <Base:Adjective adjective="portable"/>
        </Base:Adjectives>
        <Base:Descriptions/>
        <Base:Exit door="true" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="lid" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="lid"/>
            <Base:SName sname="cover"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="lids"/>
            <Base:PName pname="covers"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="slotted"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the slotted lid of the $(this.trait:color) $(this.trait:material) $(this.trait:brief)
          </Base:Description>
          <Base:Description type="look">
             The lid of the $(this.trait:color) $(this.trait:material) $(this.trait:brief). It is slotted to easily deposit coins, but can be opened and re-closed for withdrawals as well.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="strap" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="strap"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="straps"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="detachable"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             detachable strap
          </Base:Description>
          <Base:Description type="examine">
             A simple detachable strap allows the bank to be worn upon the body instead of being stored away if the owner desires.
          </Base:Description>
          <Base:Description type="look">
             A simple detachable strap allows the bank to be worn upon the body instead of being stored away if the owner desires.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:Covered value="right-shoulder"/>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:alteration:add:default:lock">
         ([ "adj-prop":(\{ "trait:material", "trait:size", "trait:color", "trait:brief" \}), "names":(\{ (\{ "sname", "lock" \}), (\{ "pname", "locks" \}) \}), "properties":(\{ (\{ "trait:material", "trait:lock:material" \}), (\{ "trait:size", "trait:lock:size" \}), (\{ "trait:color", "trait:lock:color" \}), (\{ "trait:brief", "trait:lock:brief" \}), (\{ "trait:examine", "trait:lock:examine" \}), (\{ "trait:quality", "trait:lock:quality" \}), (\{ "trait:lockpicking", "trait:lockpicking" \}), (\{ "details:default:exit:keycode", "details:default:exit:keycode" \}), (\{ "base:urparent", "trait:lock:parent" \}), (\{ "trait:madeby", "trait:lock:madeby" \}), (\{ "trait:madeby:account", "trait:lock:madeby:account" \}), (\{ "trait:madeby:object", "trait:lock:madeby:object" \}) \}), "stopvalue":(\{ "trait:lock:brief", nil, "This piece of furniture already holds a lock." \}) ])
      </Core:Property>
      <Core:Property property="export:cash:amount_to_fill">
         0
      </Core:Property>
      <Core:Property property="export:cash:balance">
         0
      </Core:Property>
      <Core:Property property="export:cash:max">0</Core:Property>
      <Core:Property property="export:is:engravable">
         1
      </Core:Property>
      <Core:Property property="export:trait:brief">
         "portable bank"
      </Core:Property>
      <Core:Property property="export:trait:examine">
         "This is a rectangular box with a slotted lid made to hold coins. It can be worn upon the shoulder via the detachable strap or kept safely in a store room."
      </Core:Property>
      <Core:Property property="export:trait:objecttype">
         "moneypouch"
      </Core:Property>
      <Core:Property property="export:writable">"1"</Core:Property>
      <Core:Property property="merry:react:deposit-where">
         X[M] if(NRefOb(\$what[0])."cash:value") \{     
  EmitTo(\$actor, "You have made a deposit into " + Describe(\$this, nil, \$actor) + ".");     
  EmitIn(\$actor."base:environment", Describe(\$actor)+ " makes a deposit into " + Describe(\$this, \$actor) + ".", \$actor);   
return FALSE;     
\}     
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:withdraw-dob">
         X[M] /* You can only take from your own pouches */
\$owner = ironclaw::find_owner(\$object: this);
if(\$owner != \$actor) return TRUE;

/* Check we are only trying to take from one thing */
if(sizeof(\$dob) != 1)\{
  EmitTo(\$actor, "You may only take money from one thing at a time.");
  return FALSE;
\}

/* If no evoke */
if(!\$evoke) \{
EmitTo(\$actor, "The correct syntax is: withdraw from [this] '[amount]. i.e. withdraw from my money pouch '12.");
return FALSE;
\}
\$target = NRefOb(\$dob[0]);

/* Check that the object is a money purse */
if(\$this."trait:objecttype" != "moneypouch")\{
  EmitTo(\$actor, "You may only get money from purses, money pouches, and money banks.");
  return FALSE;
\}

/* How much do we get? */
\$amount = Int(\$evoke[1..strlen(\$evoke)-2])*100;

if(\$amount \< 0) \{
  EmitTo(\$actor, "You cannot withdraw a negative amount from your money pouch.");
  return FALSE;
\}

if(\$amount \> 10000) \{
  EmitTo(\$actor, TAG("[Withdrawing too many coins is bad for the game. Please keep them in the money pouch unless you specifically need to hand them over to another character. Even then, hand over a few, and have the other character deposit the coins first. Thank you.]", "imp"));
  return TRUE;
\}

/*
EmitTo(\$actor, "Amount is "+Str(\$amount));
EmitTo(\$actor, "The pouch holds "+Str(\$actor."trait:money"));
*/

if(\$amount \> Int(\$actor."trait:money"))
  \$amount = Int(\$actor."trait:money");

/*EmitTo(\$actor, "Amount is now "+Str(\$amount));*/

/* Take the money */

/* take money from the pouch */
\$actor."trait:money" = Int(\$actor."trait:money") - \$amount;

/* Spawn the coins */
while(\$amount \&\& (\$amount \> 0))
\{
  if(\$amount \>= 2400) \{
    \$coin = Spawn(\$\{Allegory:Props:Finance:Cash:Lira\});
    \$amount -= 2400;
  \} else if(\$amount \>= 100) \{
    \$coin = Spawn(\$\{Allegory:Props:Finance:Cash:Florin\});
    \$amount -= 100;
  \} else if(\$amount \>= 10) \{
    \$coin = Spawn(\$\{Ironclaw:Props:Finance:Cash:10\});
    \$amount -= 10;
  \} else if(\$amount \>= 1) \{
    \$coin = Spawn(\$\{Ironclaw:Props:Finance:Cash:1\});
    \$amount -= 1;
  \}
  \$coin."owner:original" = \$actor;
  \$coin."base:environment" = \$actor;
\}
EmitTo(\$actor, "You make a withdrawal from " + Describe(\$this, nil, \$actor) + ".");
EmitIn(\$actor."base:environment", Describe(\$actor)+ " makes a withdrawal from " + Describe(\$this, \$actor) + ".", \$actor);
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react:withdraw-iob">
         X[M] /* You can only take from your own pouches */
\$owner = ironclaw::find_owner(\$object: this);
if(\$owner != \$actor) return TRUE;

/* Check we are only trying to take from one thing */
if(sizeof(\$iob) != 1)\{
  EmitTo(\$actor, "You may only take money from one thing at a time.");
  return FALSE;
\}

\$target = NRefOb(\$iob[0]);

/* Check that the object is a money purse */
if(\$this."trait:objecttype" != "moneypouch")\{
  EmitTo(\$actor, "You may only get money from purses, money pouches, or money banks.");
  return FALSE;
\}

/* If no evoke */
if(!\$evoke) \{
EmitTo(\$actor, "The correct syntax is: withdraw from [this] '[amount]. i.e. withdraw from my money pouch '12.");
return FALSE;
\}

/* How much do we get? */
\$amount = Int(\$evoke[1..strlen(\$evoke)-2])*100;

/*
EmitTo(\$actor, "Amount is "+Str(\$amount));
EmitTo(\$actor, "The pouch holds "+Str(\$this."cash:balance"));
*/

if(\$amount \< 0) \{
  EmitTo(\$actor, "You cannot withdraw a negative amount from your money pouch.");
  return FALSE;
\}

if(\$amount \> Int(\$actor."trait:money"))
  \$amount = Int(\$actor."trait:money");

/*EmitTo(\$actor, "Amount is now "+Str(\$amount));*/

/* Take the money */

/* take money from the pouch */
\$actor."trait:money" = Int(\$actor."trait:money") - \$amount;

/* Spawn the coins */
while(\$amount \&\& (\$amount \> 0))
\{
  if(\$amount \>= 2400) \{
    \$coin = Spawn(\$\{Allegory:Props:Finance:Cash:Lira\});
    \$amount -= 2400;
  \} else if(\$amount \>= 100) \{
    \$coin = Spawn(\$\{Allegory:Props:Finance:Cash:Florin\});
    \$amount -= 100;
  \} else if(\$amount \>= 10) \{
    \$coin = Spawn(\$\{Ironclaw:Props:Finance:Cash:10\});
    \$amount -= 10;
  \} else if(\$amount \>= 1) \{
    \$coin = Spawn(\$\{Ironclaw:Props:Finance:Cash:1\});
    \$amount -= 1;
  \}
  \$coin."owner:original" = \$actor;
  \$coin."base:environment" = \$actor;
\}
      EmitTo(\$actor, "You make a withdrawal from " + Describe(\$this, nil, \$actor) + ".");
EmitIn(\$actor."base:environment", Describe(\$actor)+ " makes a withdrawal from " + Describe(\$this, \$actor) + ".", \$actor);
return FALSE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1404692076, "jominey", "E", 1404692180, "jominey", "E", 1404692223, "jominey", "E", 1404692253, "jominey", "E", 1404692274, "jominey", "E", 1404692296, "jominey", "E", 1404692301, "jominey", "E", 1404692307, "jominey", "E", 1404692318, "jominey", "E", 1404698197, "jominey", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="trait:velvet:color">
         "green"
      </Core:Property>
      <Core:Property property="writable">"true"</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
