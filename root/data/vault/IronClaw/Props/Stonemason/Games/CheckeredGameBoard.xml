<object clone="/base/obj/thing" owner="slurpeeslurp">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(IronClaw:Props:Stonemason:UrStonemasonContainer)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0.2" maxweight="0.2"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="board"/>
            <Base:SName sname="grid"/>
            <Base:SName sname="game"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="boards"/>
            <Base:PName pname="grids"/>
            <Base:PName pname="games"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="checkered"/>
          <Base:Adjective adjective="eight-by-eight"/>
          <Base:Adjective adjective="game"/>
          <Base:Adjective adjective="square"/>
        </Base:Adjectives>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:trait:brief">
         X[S] board
      </Core:Property>
      <Core:Property property="export:trait:examine">
         "The checkered board consists of a square, eight-by-eight grid (64 squares) arranged in two alternating light and dark colors. The colors are typically black and white."
      </Core:Property>
      <Core:Property property="export:trait:objecttype">
         "game"
      </Core:Property>
      <Core:Property property="export:trait:type">
         "game"
      </Core:Property>
      <Core:Property property="merry:lib:play_no">
         X[M] \$type = \$par["type"];
\$playerone = \$this.playerone;
\$playertwo = \$this.playertwo;

EmitTo(\$playerone, TAG(Describe(\$playertwo) + " declines your invitation to play " + \$type + ".", "social:first"));
EmitTo(\$playertwo, TAG("You decline the invitation to play " + \$type + " with " + Describe(\$playerone) + ".", "social:first"));

\$this.busy = nil;
\$this.playerone = nil;
\$this.playertwo = nil;

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:play_yes">
         X[M] \$type = \$par["type"];
\$playerone = \$this.playerone;
\$playertwo = \$this.playertwo;

EmitTo(\$playerone, TAG("You begin to play " + \$type + " with " + Describe(\$playertwo) + ".", "social:first"));
EmitTo(\$playertwo, TAG("You begin to play " + \$type + " with " + Describe(\$playerone) + ".", "social:first"));
EmitIn(\$playerone."base:environment", TAG(Describe(\$playerone) + " begins to play " + \$type + " with " + Describe(\$playertwo) + ".", "social:third"), \$playerone, \$playertwo);

\$delay(10, FALSE, "9176");

\$p1 = 0;
\$p2 = 0;
for(\$i = 0; \$i \< 10; \$i++) \{
    \$roll1 = ironclaw::roll(\$roller: \$playerone, \$skills: (\{ \}), \$bonus: (\{ "trait:intelligence" \}));
    \$roll2 = ironclaw::roll(\$roller: \$playertwo, \$skills: (\{ \}), \$bonus: (\{ "trait:intelligence" \}));

    if(\$roll1 == \$roll2) \{
        EmitIn(\$playerone."base:environment", TAG(Describe(\$playerone) + " and " + Describe(\$playertwo) + " exchange a series of clever moves.", "social:third"), \$playerone, \$playertwo);
        EmitTo(\$playerone, TAG("You exchange a series of clever moves with " + Describe(\$playertwo) + ".", "social:first"));
        EmitTo(\$playertwo, TAG("You exchange a series of clever moves with " + Describe(\$playerone) + ".", "social:first"));
    \}

    if(\$roll1 \> \$roll2) \{
        EmitIn(\$playerone."base:environment", TAG(Describe(\$playerone) + " captures a game piece.", "social:third"), \$playerone, \$playertwo);
        EmitTo(\$playerone, TAG("You capture a game piece.", "social:first"));
        EmitTo(\$playertwo, TAG(Describe(\$playerone) + " captures one of your game pieces.", "social:first"));
        \$p1++;
    \}

    if(\$roll2 \> \$roll1) \{
        EmitIn(\$playertwo."base:environment", TAG(Describe(\$playertwo) + " captures a game piece.", "social:third"), \$playerone, \$playertwo);
        EmitTo(\$playertwo, TAG("You capture a game piece.", "social:first"));
        EmitTo(\$playerone, TAG(Describe(\$playertwo) + " captures one of your game pieces.", "social:first"));
        \$p2++;
    \}

    \$delay(30, FALSE, "8bef");
\}

if(\$p1 == \$p2) \{
    EmitTo(\$playerone, TAG("Your " + \$type + " game with " + Describe(\$playertwo) + " ends in a stalemate.", "social:first"));
    EmitTo(\$playertwo, TAG("Your " + \$type + " game with " + Describe(\$playerone) + " ends in a stalemate.", "social:first"));
    EmitIn(\$playerone."base:environment", TAG("Unable to make any further moves, " + Describe(\$playerone) + " and " + Describe(\$playertwo) + " declare a stalemate.", "social:third"), \$playerone, \$playertwo);
\} else if(\$p1 \> \$p2) \{
    EmitTo(\$playerone, TAG("After a series of savvy moves, you are declared the winner of " + \$type + ".", "social:first"));
    EmitTo(\$playertwo, TAG("You fail to defend your pieces and are declared the loser of " + \$type + ".", "social:first"));
    EmitIn(\$playerone."base:environment", TAG("After a series of savvy moves, " + Describe(\$playerone) + " defeats " + Describe(\$playertwo) + " at " + \$type + ".", "social:third"), \$playerone, \$playertwo);
\} else if(\$p2 \> \$p1) \{
    EmitTo(\$playerone, TAG("You fail to defend your pieces and are declared the loser of " + \$type + ".", "social:first"));
    EmitTo(\$playertwo, TAG("After a series of savvy moves, you are declared the winner of " + \$type + ".", "social:first"));
    EmitIn(\$playertwo."base:environment", TAG("After a series of savvy moves, " + Describe(\$playertwo) + " defeats " + Describe(\$playerone) + " at " + \$type + ".", "social:third"), \$playerone, \$playertwo);
\}

\$this.busy = nil;
\$this.playerone = nil;
\$this.playertwo = nil;

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:place-where">
         X[M] \$inventory = \$this."base:inventory";

\$type = "game";

Set(\$this, "details:default:adjective:chess", FALSE);
Set(\$this, "details:default:adjective:checkers", FALSE);

for(\$i = 0; \$i \< sizeof(\$inventory); \$i++) \{
    if(\$inventory[\$i]."trait:type" == "chess") \{
        \$type = "chess";
    \} else \{
        \$type = "checkers";
    \}
\}

Set(\$this, "details:default:adjective:" + \$type, TRUE);

Set(\$this, "trait:type", \$type);

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:take-from">
         X[M] \$inventory = \$this."base:inventory";

\$type = "game";

Set(\$this, "details:default:adjective:chess", FALSE);
Set(\$this, "details:default:adjective:checkers", FALSE);

for(\$i = 0; \$i \< sizeof(\$inventory); \$i++) \{
    if(\$inventory[\$i]."trait:type" == "chess") \{
        \$type = "chess";
    \} else \{
        \$type = "checkers";
    \}
\}

Set(\$this, "details:default:adjective:" + \$type, TRUE);

Set(\$this, "trait:type", \$type);

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:place-where">
         X[M] \$pieces = (\{ \});

for(\$i = 0; \$i \< sizeof(\$what) \&\& sizeof(\$pieces) \< 2; \$i++) \{
    
    if(sizeof(\$this."base:inventory")) \{
        if(NRefOb(\$what[\$i])."trait:type" == \$this."base:inventory"[0]."trait:type") \{
            \$pieces \|= (\{ \$what[\$i] \});
        \}
    \} else \{
        if(NRefOb(\$what[\$i])."trait:objecttype" == "game pieces") \{
            \$pieces \|= (\{ \$what[\$i] \});
        \}
    \}
\}

if(!sizeof(\$pieces)) \{
    EmitTo(\$actor, "You can only put game pieces in " + Describe(\$this) + ".");
    return FALSE;
\}

\$what = \$pieces;

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:play-dob">
         X[M] if(sizeof(\$this."base:inventory") \< 2) \{
    EmitTo(\$actor, "You will need to put game pieces in the board before you can play.");
    return FALSE;
\}

\$type = \$this."base:inventory"[0]."trait:type";

if(!\$using) \{
    EmitTo(\$actor, "Syntax: play board with \<person\>");
    return FALSE;
\}

if(!sizeof(\$using)) \{
    EmitTo(\$actor, "Syntax: play board with \<person\>");
    return FALSE;
\}

if(sizeof(\$using) \> 1) \{
    EmitTo(\$actor, "You can only play with one person at a time.");
    return FALSE;
\}

if(!NRefOb(\$using[0])."udat:possessed") \{
    EmitTo(\$actor, "You cannot play " + \$type + " with " + Describe(\$using) + ".");
    return FALSE;
\}

if(\$this.busy) \{
    \$playerone = \$this.playerone;
    \$playertwo = \$this.playertwo;

    if(\$playerone \&\& typeof(\$playerone) == 4 \&\& \$playerone.environment == \$actor."base:environment" \&\&
       \$playertwo \&\& typeof(\$playertwo) == 4 \&\& \$playertwo.environment == \$actor."base:environment") \{
    
        EmitTo(\$actor, "A game is already in progress.");
        return FALSE;
    \} else \{
        \$this.busy = nil;
    \}
\}

/* Ask opponent to play */
\$this.busy = 1;
\$this.playerone = \$actor;
\$this.playertwo = NRefOb(\$using[0]);

interaction::question(\$actor: NRefOb(\$using[0]), \$question: "Do you want to play " + \$type + " with " + Describe(\$this.playerone) + "?", \$env: "TRUE", \$expires: 60, \$yes_ob: this, \$yes_fun: "play_yes", \$no_ob: this, \$no_fun: "play_no", \$expire_ob: this, \$expire_fun: "play_no", \$par: ([ "type": \$type ]));

return FALSE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1539540275, "jominey", "E", 1539540692, "jominey", "E", 1539540726, "jominey", "E", 1539540930, "jominey", "E", 1539541191, "jominey", "E", 1539541278, "jominey", "E", 1539544264, "jominey", "E", 1539544298, "jominey", "E", 1539544390, "jominey", "E", 1539544548, "jominey", "E", 1539544640, "jominey", "K", 1539544698, "jominey", "E", 1539544713, "jominey", "E", 1539544765, "jominey", "E", 1539544783, "jominey", "E", 1539544822, "jominey", "E", 1539544841, "jominey", "E", 1539545056, "jominey", "E", 1539545235, "jominey", "E", 1539545245, "jominey", "E", 1539545300, "jominey", "E", 1539545326, "jominey", "E", 1539545393, "jominey", "E", 1539545446, "jominey", "E", 1539545652, "jominey", "E", 1539545735, "jominey", "E", 1539545743, "jominey", "E", 1539545799, "jominey", "E", 1539545812, "jominey", "E", 1539545864, "jominey", "E", 1539545874, "jominey", "E", 1539545888, "jominey", "E", 1539546024, "jominey", "E", 1539546110, "jominey", "E", 1539546362, "jominey", "E", 1539546412, "jominey", "E", 1539546427, "jominey", "E", 1539546436, "jominey", "E", 1539546443, "jominey", "E", 1539546626, "jominey", "E", 1539546657, "jominey", "E", 1539546658, "jominey", "E", 1539546681, "jominey", "E", 1539546707, "jominey", "E", 1539546720, "jominey", "E", 1539547247, "jominey", "E", 1539547512, "jominey", "E", 1539547554, "jominey", "E", 1539550181, "jominey", "E", 1539550806, "jominey", "E", 1539550904, "jominey", "E", 1539551076, "jominey", "E", 1539551138, "jominey", "E", 1539551276, "jominey", "E", 1539551417, "jominey", "E", 1539551679, "jominey", "E", 1539827873, "jominey", "R", 1539832999, "jominey", "E", 1540771117, "jominey", "E", 1573515702, "jominey", "E", 1599423874, "ezralee", "K" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
