<object clone="/base/obj/thing" owner="lidiab">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="1" density="5"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="lying" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="true"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="handcuff"/>
            <Base:SName sname="cuff"/>
            <Base:SName sname="manacle"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="manacles"/>
            <Base:PName pname="handcuffs"/>
            <Base:PName pname="cuffs"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="bladed"/>
          <Base:Adjective adjective="serrated"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.trait:material) pair of serrated manacles
          </Base:Description>
          <Base:Description type="examine">
             An $(this.trait:material) pair of manacles. There appears to be a small, discrete keyhole at the base of each thick cuff, near a thick connecting chain. Instead of just being manacles, these are lined on the inside with sharp, serrated blades that prevent the wearer from moving hands or arms too swiftly for fear of cutting their wrists.
          </Base:Description>
          <Base:Description type="look">
             An $(this.trait:material) pair of serrated manacles.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="blades" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="blade"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="blades"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="serrated"/>
          <Base:Adjective adjective="sharp"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the serrated blades of the manacles
          </Base:Description>
          <Base:Description type="examine">
             Sharp serrated blades line the inside of these $(this.trait:material) manacles, preventing the wearer from making any swift movements with their arms or hands for fear of cutting their wrists.
          </Base:Description>
          <Base:Description type="look">
             The serrated blades lining the inside of these manacles.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="chain" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="true" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="chain"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="chains"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="sturdy"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the connecting chain of the $(this.trait:material) manacles
          </Base:Description>
          <Base:Description type="examine">
             A short yet sturdy chain, connecting the pair of manacles together.
          </Base:Description>
          <Base:Description type="look">
             A short yet sturdy chain, connecting the pair of manacles together.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="keyhole" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="true" near="true" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="keyhole"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="keyholes"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="simple"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             simple keyhole
          </Base:Description>
          <Base:Description type="examine">
             A simple, yet well placed keyhole in the manacles.
          </Base:Description>
          <Base:Description type="look">
             A simple, yet well placed keyhole in the manacles.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:Covered value="right-wrist"/>
      <Base:Covered value="left-wrist"/>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:lock:difficulty">
         4
      </Core:Property>
      <Core:Property property="export:trait:material">
         "iron"
      </Core:Property>
      <Core:Property property="export:weapon:woundtype">
         (\{ "cut", "cuts", "cut" \})
      </Core:Property>
      <Core:Property property="merry:lib:combat_no_attack">
         X[M] if(\$actor."combat:fighting") \{
    EmitTo(\$actor, TAG("Your sudden movements cause the blades of the serrated manacles to dig into your skin, causing excruciating, debilitating pain. You can barely move your arms, let alone fight someone.", "social:first"));
    \$woundtype = (\{ "cut", "cuts", "cut" \});
    \$damage = 4;
    \$wound_details = ([ "adj":\$woundtype[2], "type":\$woundtype[0..1], "damage":\$damage, "level":\$damage + 4, "complications":nil, "injury":TRUE ]);
    \$wound = injuries::add_wound(\$wound: \$wound_details, \$target: NewNRef(\$actor, "wrists"), \$weapon: \$this);
\}

return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:handcuff_allowed">
         X[M] /* Attach the handcuffs to the victim */
\$actor = \$par["actor"];
\$victim = \$par["victim"];

/* Check the handcuffer and handcuffee are still in the same room */
if(\$actor."base:environment" == \$victim."base:environment") \{
  /* first move the handcuffs into the victims inventory */
  \$this."base:environment" = \$victim;
  /* then make them be worn */
  \$this."base:worn-by" = \$victim;
  /* mark the handcuffs as locked */
  \$this."trait:locked" = 1;

  /* Output a message */
  EmitTo(\$actor, "You handcuff "+Describe(NewNRef(\$victim, "default"), \$actor, \$actor)+".");
  /* Don't emit a second emote if we're handcuffing ourselves */
  if(!NRefsEqual(NewNRef(\$actor, "default"), NewNRef(\$victim, "default")))
    EmitTo(\$victim, Describe(\$actor)+" handcuffs you.");
  EmitIn(\$actor."base:environment", Describe(\$actor)+" handcuffs "+Describe(NewNRef(\$victim, "default"))+".", \$actor, \$victim);
  \$victim."merry:inherit:lib:combat_no_attack" = \$\{IronClaw:Props:Restraining:Bindings:HandcuffsSerrated\};
  \$victim."combat:restrained" = 1;
\} else \{
  EmitTo(\$actor, "You are no longer in the same room as "+Describe(NewNRef(\$victim, "default"))+".");
  EmitTo(\$victim, "You are no longer in the same room as "+Describe(\$actor)+".");
\}


/* Suppress the usual "attach" emote */
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:handcuff_denied">
         X[M] \$actor = \$par["actor"];
\$victim = \$par["victim"];
EmitTo(\$actor, Describe(NewNRef(\$victim, "default"))+" refuses to be handcuffed.");
EmitTo(\$victim, "You refuse "+Describe(NewNRef(\$actor, "default"))+" consent to handcuff you.");
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:handcuff_expire">
         X[M] \$actor = \$par["actor"];
\$victim = \$par["victim"];
if(\$this."base:environment" == \$actor) \{
  EmitTo(\$actor, "Consent to bind "+Describe(NewNRef(\$victim, "default"))+" has expired.");
  EmitTo(\$victim, Describe(NewNRef(\$actor, "default"))+" has asked to bind you, but time has expired.");
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:pick-what">
         X[M] /* Trying to pick the lock on the handcuffs */

/* Check if the handcuffs are locked */
if(!\$this."trait:locked") \{
  EmitTo(\$actor, Describe(\$this)+" is not locked.");
  return FALSE;
\}

/* Check if we have some lockpicks */
if(!sizeof(Match(\$actor, "key", \$actor, "handcuff"))) \{
  EmitTo(\$actor, "You do not have any lockpicking tools.");
  return FALSE;
\}

/* check we aren't trying to unlock our own handcuffs */
if(\$actor == \$this."base:environment") \{
  EmitTo(\$actor, "You cannot pick your own handcuffs. You'll need to find someone else to do it.");
\}

if(\$this."trait:jammed") \{
  EmitTo(\$actor, Describe(\$this)+" appears to be jammed. There's nothing more you can do.");
  return FALSE;
\}

/* make the lockpicking roll */
\$result = Call(\$\{IronClaw:Lib:UrPeople:System\}, "roll", \$dicearray: (\{ \$actor."trait:dexterity", \$actor."skill:thief:lock-picking", \$actor."career:thief:lock-picking" \}));

if(\$result \> \$this."lock:difficulty") \{
  EmitTo(\$actor, "You hear a click as you unlock "+Describe(\$this)+".");
  EmitTo(\$this."base:environment", "You hear a click as "+Describe(\$actor)+" unlocks "+Describe(\$this, nil, \$this."base:environment")+".");
  EmitIn(\$actor."base:environment", "You hear a click as "+Describe(\$actor)+" unlocks "+Describe(\$this)+".");

  \$this."trait:locked" = nil;
\} else if(\$result \< 4) \{
  EmitTo(\$actor, "You hear a click as the locking mechanism twists sickeningly.");
  EmitTo(\$this."base:environment", "You hear a click as the locking mechanism in "+Describe(\$this, nil, \$this."base:environment")+" twists sickeningly.");
  \$this."trait:jammed" = 1;
\} else \{
  EmitTo(\$actor, "You don't manage to unlock "+Describe(\$this)+".");
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:unlock-what">
         X[M] /* send an emit about removing the handcuffs */

/* Check if the handcuffs are locked */
if(!\$this."trait:locked") \{
  EmitTo(\$actor, Describe(\$this)+" is not locked.");
  return FALSE;
\}

/* Check if we have the key to the handcuffs */
if(!sizeof(Match(\$actor, "key", \$actor, "handcuff"))) \{
  EmitTo(\$actor, "You do not have a handcuff key.");
  return FALSE;
\}

if(\$actor != \$this."base:environment") \{
  /* If someone else is removing your handcuffs */
  if(\$this."trait:jammed") \{
    EmitTo(\$actor, "For a moment the key does not turn, as if the lock is jammed. Then, with a click, you unlock and remove "+Describe(\$this)+".");
  \} else \{
    EmitTo(\$actor, "With a click, you unlock and remove "+Describe(\$this)+".");
  \}
  EmitTo(\$this."base:environment", "With a click, "+Describe(\$actor)+" unlocks and removes "+Describe(\$this, nil, \$this."base:environment")+".");
  EmitIn(\$actor."base:environment", "With a click, "+Describe(\$actor)+" unlocks and removes "+Describe(\$this)+".", \$actor, \$this."base:environment");
\} else \{
  /* If you are removing your own handcuffs */
  EmitTo(\$actor, "With a click, you unlock and remove "+Describe(\$this, nil, \$actor)+".");
  EmitIn(\$actor."base:environment", "With a click, "+Describe(\$actor)+" unlocks and removes "+Describe(\$this, \$actor)+".", \$actor);
\}

\$this."base:environment"."merry:inherit:lib:combat_no_attack" = nil;
\$this."base:environment"."combat:restrained" = nil;

/* unlock and remove the handcuffs */
\$this."trait:locked" = nil;
\$this."trait:jammed" = nil;
\$this."base:worn-by" = nil;
\$this."base:environment" = \$actor;
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:unwear">
         X[M] /* if the handcuffs are locked */
if(\$this."trait:locked") \{
  EmitTo(\$actor, "You cannot remove these handcuffs, they are locked.");
  return FALSE;
\}

\$this."base:environment"."merry:inherit:lib:combat_no_attack" = nil;
\$this."base:environment"."combat:restrained" = nil;
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:attach-dob">
         X[M] /* The X[M] tells us that we're writing a merry script */
/* We are handcuffing someone */

/* Check if we have something to attach the handcuffs TO */
if(!\$iob)
  return TRUE;

/* Check that we are only attaching the handcuff to one object */
if(sizeof(\$iob) \> 1) \{
  EmitTo(\$actor, "You can only attach "+Describe(\$this)+" to one thing at a time.");
  return FALSE;
\}

\$victim = NRefOb(\$iob[0]);

/* Check if the target is a person */
if(!\$victim."base:volition") return TRUE;

/* check that the handcuffs aren't locked */
if(\$this."trait:locked") \{
  EmitTo(\$actor, Describe(\$this)+" is already locked.");
  return FALSE;
\}

/* make the handcuffs be worn by the victim */

/* Check if we need consent */
/* check if combat:damage is larger than trait:body */
/* Also check if we're handcuffing ourselves (and hence don't need consent) */
\$endur = Int(\$victim."career:combat:endurance") + Int(\$victim."skill:combat:endurance");
\$hp = \$victim."trait:body" + \$endur + 3;
if((\$victim."combat:damage" \> \$hp) \|\| (\$victim."combat:fatigue" \<= \$hp) \|\| NRefsEqual(NewNRef(\$actor, "default"), NewNRef(\$victim, "default"))) \{
  Call(\$this, "handcuff_allowed", \$par: ([ "victim": \$victim, "room": \$room, "actor": \$actor]));
\} else \{
  EmitTo(\$actor, "Asking "+Describe(\$iob[0])+" for consent, as "+\$victim."base:pronoun"+" is still able to resist.");
  interaction::question(\$actor: \$victim, \$question: Describe(\$actor)+" is attempting to handcuff you. Will you allow this?", \$expires: 80, \$env: "TRUE", \$yes_ob: \$this, \$no_ob: \$this, \$expire_ob: \$this, \$yes_fun: "handcuff_allowed", \$no_fun: "handcuff_denied", \$expire_fun: "handcuff_expire", \$par: ([ "victim": \$victim, "room": \$room, "actor": \$actor]));
\}

/* we're done here. squash the normal emote for attach */
return FALSE;


/* first move the handcuffs into the victims inventory */
\$this."base:environment" = \$victim;
/* then make them be worn */
\$this."base:worn-by" = \$victim;

/* Output a message */
EmitTo(\$actor, "You handcuff "+Describe(\$iob[0])+".");
EmitTo(\$victim, Describe(\$actor)+" handcuffs you.");
EmitIn(\$actor."base:environment", Describe(\$actor)+" handcuffs "+Describe(\$iob[0])+".");
  \$victim."merry:inherit:lib:combat_no_attack" = \$\{IronClaw:Props:Restraining:Bindings:HandcuffsSerrated\};
  \$victim."combat:restrained" = 1;
/* Suppress the usual "attach" emote */
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react:pick-what">
         X[M] /* Trying to pick the lock on the handcuffs */

/* Check if the handcuffs are locked */
if(!\$this."trait:locked") \{
  EmitTo(\$actor, Describe(\$this)+" is not locked.");
  return FALSE;
\}

/* Check if we have some lockpicks */
if(!sizeof(Match(\$actor, "lockpick"))) \{
  EmitTo(\$actor, "You do not have any lockpicking tools.");
  return FALSE;
\}

/* check we aren't trying to unlock our own handcuffs */
if(\$actor == \$this."base:environment") \{
  EmitTo(\$actor, "You cannot pick your own handcuffs. You'll need to find someone else to do it.");
\}

if(\$this."trait:jammed") \{
  EmitTo(\$actor, Describe(\$this)+" appears to be jammed. There's nothing more you can do.");
  return FALSE;
\}

/* make the lockpicking roll */
\$result = Call(\$\{IronClaw:Lib:UrPeople:System\}, "roll", \$dicearray: (\{ \$actor."trait:dexterity", \$actor."skill:thief:lock-picking", \$actor."career:thief:lock-picking" \}));

if(\$result \> \$this."lock:difficulty") \{
  EmitTo(\$actor, "You hear a click as you unlock "+Describe(\$this)+".");
  EmitTo(\$this."base:environment", "You hear a click as "+Describe(\$actor)+" picks open "+Describe(\$this, nil, \$this."base:environment")+".");
  EmitIn(\$actor."base:environment", "You hear a click as "+Describe(\$actor)+" picks open "+Describe(\$this)+".");

  \$this."trait:locked" = nil;
\} else if(\$result \< 4) \{
  EmitTo(\$actor, "You hear a click as the locking mechanism twists sickeningly.");
  EmitTo(\$this."base:environment", "You hear a click as "+Describe(\$actor)+" attempts to pick "+Describe(\$this, nil, \$this."base:environment")+" and the locking mechanism twists sickeningly.");
  EmitIn(\$actor."base:environment", Describe(\$actor)+" fiddles with the lock on "+Describe(\$this)+".");

  \$this."trait:jammed" = 1;
\} else \{
  EmitTo(\$actor, "You hear fiddle with the lock on "+Describe(\$this)+".");
  EmitTo(\$this."base:environment", Describe(\$actor)+" fiddles with the lock on "+Describe(\$this, nil, \$this."base:environment")+".");
  EmitIn(\$actor."base:environment", Describe(\$actor)+" fiddles with the lock on "+Describe(\$this)+".");

\}

return FALSE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:material">
         X[M] return Call(\$\{Allegory:Props:Crafting:UrCrafting\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1107209474, "zwoc", "E", 1140223418, "barbra18", "K", 1140225633, "barbra18", "E", 1140225703, "barbra18", "E", 1140225764, "barbra18", "X", 1140226560, "barbra18", "K", 1140226997, "barbra18", "K", 1140227032, "barbra18", "E", 1140227430, "tunk_bodin", "X", 1140227731, "barbra18", "K", 1140227987, "barbra18", "X", 1140228021, "barbra18", "E", 1140228122, "barbra18", "E", 1140228377, "barbra18", "X", 1140228560, "barbra18", "E", 1140248632, "barbra18", "K", 1140248912, "barbra18", "P", 1140248991, "barbra18", "P", 1140249079, "barbra18", "K", 1140249204, "barbra18", "P", 1140249316, "barbra18", "P", 1140250388, "barbra18", "P", 1140250421, "barbra18", "P", 1140250897, "barbra18", "P", 1140250921, "barbra18", "P", 1140250937, "barbra18", "P", 1140251154, "tonyd", "P", 1140251233, "tonyd", "P", 1140251247, "tonyd", "P", 1140251762, "tonyd", "P", 1140251820, "tonyd", "P", 1140252307, "barbra18", "E", 1140252355, "barbra18", "E", 1140252376, "barbra18", "E", 1140252591, "tonyd", "E", 1140252866, "barbra18", "E", 1140254452, "tonyd", "P", 1140254674, "tonyd", "P", 1140254765, "tonyd", "P", 1140254789, "tonyd", "P", 1140254849, "tonyd", "P", 1140254902, "tonyd", "P", 1140254953, "tonyd", "P", 1140255293, "barbra18", "P", 1140255321, "barbra18", "P", 1140255346, "barbra18", "P", 1140255617, "barbra18", "P", 1140256547, "barbra18", "P", 1140256636, "barbra18", "P", 1140256657, "tonyd", "P", 1140256693, "tonyd", "P", 1140256723, "barbra18", "P", 1140256734, "tonyd", "P", 1140256928, "tonyd", "P", 1140257031, "tonyd", "P", 1140257107, "tonyd", "P", 1140257147, "tonyd", "P", 1140257518, "tonyd", "P", 1140257650, "tonyd", "P", 1140257688, "tonyd", "P", 1140257992, "tonyd", "P", 1140258136, "tonyd", "P", 1140258172, "tonyd", "P", 1140258229, "tonyd", "P", 1140258385, "tonyd", "P", 1140258514, "tonyd", "P", 1140258681, "tonyd", "P", 1140258754, "tonyd", "P", 1140258926, "tonyd", "P", 1140258959, "tonyd", "P", 1140259374, "tonyd", "P", 1140259637, "tonyd", "P", 1140259720, "tonyd", "P", 1140259897, "tonyd", "P", 1140259912, "tonyd", "P", 1140259985, "tonyd", "P", 1140260047, "tonyd", "P", 1140260066, "tonyd", "P", 1140260269, "tonyd", "P", 1140260687, "tonyd", "P", 1140260808, "tonyd", "P", 1140260857, "tonyd", "P", 1140260980, "tonyd", "P", 1140261042, "tonyd", "P", 1140261100, "tonyd", "P", 1140261170, "tonyd", "P", 1140261206, "tonyd", "P", 1140261332, "tonyd", "P", 1140261357, "tonyd", "P", 1140261400, "tonyd", "P", 1140261533, "tonyd", "P", 1140261888, "tonyd", "P", 1140261916, "tonyd", "P", 1140262050, "tonyd", "P", 1140262309, "tonyd", "P", 1140262447, "tonyd", "P", 1140263310, "tonyd", "P", 1140263535, "tonyd", "P", 1140264933, "tonyd", "P", 1140265380, "tonyd", "P", 1140265440, "tonyd", "P", 1140266125, "tonyd", "P", 1140266507, "tonyd", "P", 1140266565, "tonyd", "P", 1140266587, "tonyd", "P", 1140266796, "tonyd", "P", 1140268076, "tonyd", "P", 1140269722, "tonyd", "E", 1140282421, "barbra18", "K", 1142474842, "barbra18", "K", 1231203479, "jominey", "E", 1323583931, "morwenlorelie", "E", 1323583939, "morwenlorelie", "E", 1347556417, "lidiab", "K", 1347556458, "lidiab", "K", 1347556506, "lidiab", "E", 1347556532, "lidiab", "K", 1348616684, "lidiab", "E", 1358218138, "jominey", "E", 1358218408, "jominey", "E", 1358218460, "jominey", "E", 1358218532, "jominey", "E", 1358218700, "jominey", "E", 1358218737, "jominey", "E", 1358218785, "jominey", "E", 1358218831, "jominey", "E", 1358219099, "jominey", "E", 1358219252, "jominey", "E", 1358219379, "jominey", "E", 1358219864, "jominey", "E", 1358220370, "jominey", "E", 1358220423, "jominey", "E", 1358220451, "jominey", "E", 1358220556, "jominey", "E", 1358220638, "jominey", "E", 1358220757, "jominey", "E", 1358220817, "jominey", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
