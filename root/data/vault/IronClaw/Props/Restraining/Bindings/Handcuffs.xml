<object clone="/base/obj/thing" owner="SkotOS">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="1" density="5"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="lying" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="true"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="handcuff"/>
            <Base:SName sname="cuff"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="handcuffs"/>
            <Base:PName pname="cuffs"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="hand"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.trait:material) pair of handcuffs
          </Base:Description>
          <Base:Description type="examine">
             A $(this.trait:material) pair of handcuffs. There appears to be a small, discrete keyhole in the base of the handcuffs, near a small connecting chain. Cuffs such as these are attached to peoples wrists, to restrict their arm movements.
          </Base:Description>
          <Base:Description type="look">
             A $(this.trait:material) pair of handcuffs. There appears to be a small, discrete keyhole in the base of the handcuffs, near a small connecting chain.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="chain" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="true" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="chain"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="chains"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="sturdy"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the connecting chain of the $(this.trait:material) handcuffs
          </Base:Description>
          <Base:Description type="examine">
             A small yet sturdy chain, connecting the pair of handcuffs together.
          </Base:Description>
          <Base:Description type="look">
             A small yet sturdy chain, connecting the pair of handcuffs together.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="keyhole" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="true" near="true" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="keyhole"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="keyholes"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="simple"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             simple keyhole
          </Base:Description>
          <Base:Description type="examine">
             A simple, yet well placed keyhole in the handcuffs.
          </Base:Description>
          <Base:Description type="look">
             A simple, yet well placed keyhole in the handcuffs.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:Covered value="wrist-left"/>
      <Base:Covered value="wrist-right"/>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:lock:difficulty">
         10
      </Core:Property>
      <Core:Property property="export:trait:material">
         "iron"
      </Core:Property>
      <Core:Property property="merry:lib:handcuff_allowed">
         X[M] /* Attach the handcuffs to the victim */
\$actor = \$par["actor"];
\$victim = \$par["victim"];

/* Check the handcuffer and handcuffee are still in the same room */
if(\$actor."base:environment" == \$victim."base:environment") \{
  /* first move the handcuffs into the victims inventory */
  \$this."base:environment" = \$victim;
  /* then make them be worn */
  \$this."base:worn-by" = \$victim;
  /* mark the handcuffs as locked */
  \$this."trait:locked" = 1;

  /* Set combat penalties */
  \$victim."combat:penalty:attack" = Int(\$victim."combat:penalty:attack") + 15;
  \$victim."combat:penalty:parry" = Int(\$victim."combat:penalty:parry") + 10;

  /* Output a message */
  EmitTo(\$actor, "You handcuff "+Describe(NewNRef(\$victim, "default"), \$actor, \$actor)+".");
  /* Don't emit a second emote if we're handcuffing ourselves */
  if(!NRefsEqual(NewNRef(\$actor, "default"), NewNRef(\$victim, "default")))
    EmitTo(\$victim, Describe(\$actor)+" handcuffs you.");
  EmitIn(\$actor."base:environment", Describe(\$actor)+" handcuffs "+Describe(NewNRef(\$victim, "default"))+".", \$actor, \$victim);
\} else \{
  EmitTo(\$actor, "You are no longer in the same room as "+Describe(NewNRef(\$victim, "default"))+".");
  EmitTo(\$victim, "You are no longer in the same room as "+Describe(\$actor)+".");
\}


/* Suppress the usual "attach" emote */
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:handcuff_denied">
         X[M] \$actor = \$par["actor"];
\$victim = \$par["victim"];
EmitTo(\$actor, Describe(NewNRef(\$victim, "default"))+" refuses to be handcuffed.");
EmitTo(\$victim, "You refuse "+Describe(NewNRef(\$actor, "default"))+" consent to handcuff you.");
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:handcuff_expire">
         X[M] \$actor = \$par["actor"];
\$victim = \$par["victim"];
if(\$this."base:environment" == \$actor) \{
  EmitTo(\$actor, "Consent to bind "+Describe(NewNRef(\$victim, "default"))+" has expired.");
  EmitTo(\$victim, Describe(NewNRef(\$actor, "default"))+" has asked to bind you, but time has expired.");
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:pick-what">
         X[M] /* Trying to pick the lock on the handcuffs */

/* Check if the handcuffs are locked */
if(!\$this."trait:locked") \{
  EmitTo(\$actor, Describe(\$this)+" is not locked.");
  return FALSE;
\}

/* Check if we have some lockpicks */
if(!sizeof(Match(\$actor, "key", \$actor, "handcuff"))) \{
  EmitTo(\$actor, "You do not have any lockpicking tools.");
  return FALSE;
\}

/* check we aren't trying to unlock our own handcuffs 
if(\$actor == \$this."base:environment") \{
  EmitTo(\$actor, "You cannot pick your own handcuffs. You'll need to find someone else to do it.");
\}
*/

if(\$this."trait:jammed") \{
  EmitTo(\$actor, Describe(\$this)+" appears to be jammed. There's nothing more you can do.");
  return FALSE;
\}

/* make the lockpicking roll */
\$result = Call(\$\{IronClaw:Lib:UrPeople:System\}, "roll", \$dicearray: (\{ \$actor."trait:mind", \$actor."skill:thief:lock-picking", \$actor."career:thief:lock-picking" \}));

if(\$result \> \$this."lock:difficulty") \{
  EmitTo(\$actor, "You hear a click as you unlock "+Describe(\$target)+".");
  EmitTo(\$this."base:environment", "You hear a click as "+Describe(\$actor)+" unlocks "+Describe(\$this, nil, \$this."base:environment")+".");
  EmitIn(\$actor."base:environment", "You hear a click as "+Describe(\$actor)+" unlocks "+Describe(\$this)+".");

  \$this."trait:locked" = nil;
\} else if(\$result \< 4) \{
  EmitTo(\$actor, "You hear a click as the locking mechanism twists sickeningly.");
  EmitTo(\$this."base:environment", "You hear a click as the locking mechanism in "+Describe(\$this, nil, \$this."base:environment")+" twists sickeningly.");
  \$this."trait:jammed" = 1;
\} else \{
  EmitTo(\$actor, "You don't manage to unlock "+Describe(\$this)+".");
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:unlock-what">
         X[M] /* send an emit about removing the handcuffs */

/* Check if the handcuffs are locked */
if(!\$this."trait:locked") \{
  EmitTo(\$actor, Describe(\$this)+" is not locked.");
  return FALSE;
\}

/* Check if we have the key to the handcuffs */
if(!sizeof(Match(\$actor, "key", \$actor, "handcuff"))) \{
  EmitTo(\$actor, "You do not have a handcuff key.");
  return FALSE;
\}

if(\$actor != \$this."base:environment") \{
  /* If someone else is removing your handcuffs */
  if(\$this."trait:jammed") \{
    EmitTo(\$actor, "For a moment the key does not turn, as if the lock is jammed. Then, with a click, you unlock and remove "+Describe(\$this)+".");
  \} else \{
    EmitTo(\$actor, "With a click, you unlock and remove "+Describe(\$this)+".");
  \}
  EmitTo(\$this."base:environment", "With a click, "+Describe(\$actor)+" unlocks and removes "+Describe(\$this, nil, \$this."base:environment")+".");
  EmitIn(\$actor."base:environment", "With a click, "+Describe(\$actor)+" unlocks and removes "+Describe(\$this)+".", \$actor, \$this."base:environment");
\} else \{
  /* If you are removing your own handcuffs */
  EmitTo(\$actor, "With a click, you unlock and remove "+Describe(\$this, nil, \$actor)+".");
  EmitIn(\$actor."base:environment", "With a click, "+Describe(\$actor)+" unlocks and removes "+Describe(\$this, \$actor)+".", \$actor);
\}

\$victim = this."base:worn-by";
\$parrypenalty = Int(\$victim."combat:penalty:parry") - 10;
\$attackpenalty = Int(\$victim."combat:penalty:attack") - 15;

if(\$parrypenalty \<= 0) \{
    \$victim."combat:penalty:parry" = nil;
\} else \{
    \$victim."combat:penalty:parry" = \$parrypenalty;
\}

if(\$attackpenalty \<= 0) \{
    \$victim."combat:penalty:attack" = nil;
\} else \{
    \$victim."combat:penalty:attack" = \$attackpenalty;
\}

/* unlock and remove the handcuffs */
\$this."trait:locked" = nil;
\$this."trait:jammed" = nil;
\$this."base:worn-by" = nil;
\$this."base:environment" = \$actor;
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:unwear">
         X[M] /* if the handcuffs are locked */
if(\$this."trait:locked") \{
  EmitTo(\$actor, "You cannot remove these handcuffs, they are locked.");
  return FALSE;
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:attach-dob">
         X[M] /* The X[M] tells us that we're writing a merry script */
/* We are handcuffing someone */

/* Check if we have something to attach the handcuffs TO */
if(!\$iob)
  return TRUE;

/* Check that we are only attaching the handcuff to one object */
if(sizeof(\$iob) \> 1) \{
  EmitTo(\$actor, "You can only attach "+Describe(\$this)+" to one thing at a time.");
  return FALSE;
\}

\$victim = NRefOb(\$iob[0]);

/* Check if the target is a person */
if(!\$victim."base:volition") return TRUE;

/* check that the handcuffs aren't locked */
if(\$this."trait:locked") \{
  EmitTo(\$actor, Describe(\$this)+" is already locked.");
  return FALSE;
\}

/* make the handcuffs be worn by the victim */

/* Check if we need consent */
/* check if combat:damage is larger than trait:body */
/* Also check if we're handcuffing ourselves (and hence don't need consent) */
\$endur = Int(\$victim."trait:resilience"); 
\$hp = \$victim."trait:strength" + \$endur + 3;

if(Int(\$victim."status:health") \< 50 \|\| NRefsEqual(NewNRef(\$actor, "default"), NewNRef(\$victim, "default"))) \{
  Call(\$this, "handcuff_allowed", \$par: ([ "victim": \$victim, "room": \$room, "actor": \$actor]));
\} else \{
  EmitTo(\$actor, "Asking "+Describe(\$iob[0])+" for consent, as "+\$victim."base:pronoun"+" is still able to resist.");
  interaction::question(\$actor: \$victim, \$question: Describe(\$actor)+" is attempting to handcuff you. Will you allow this?", \$expires: 80, \$env: "TRUE", \$yes_ob: \$this, \$no_ob: \$this, \$expire_ob: \$this, \$yes_fun: "handcuff_allowed", \$no_fun: "handcuff_denied", \$expire_fun: "handcuff_expire", \$par: ([ "victim": \$victim, "room": \$room, "actor": \$actor]));
\}

/* we're done here. squash the normal emote for attach */
return FALSE;


/* first move the handcuffs into the victims inventory */
\$this."base:environment" = \$victim;
/* then make them be worn */
\$this."base:worn-by" = \$victim;

/* Output a message */
EmitTo(\$actor, "You handcuff "+Describe(\$iob[0])+".");
EmitTo(\$victim, Describe(\$actor)+" handcuffs you.");
EmitIn(\$actor."base:environment", Describe(\$actor)+" handcuffs "+Describe(\$iob[0])+".");

/* Suppress the usual "attach" emote */
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react:pick-what">
         X[M] /* Trying to pick the lock on the handcuffs */

/* Check if the handcuffs are locked */
if(!\$this."trait:locked") \{
  EmitTo(\$actor, Describe(\$this)+" is not locked.");
  return FALSE;
\}

/* Check if we have some lockpicks */
if(!sizeof(Match(\$actor, "lockpick"))) \{
  EmitTo(\$actor, "You do not have any lockpicking tools.");
  return FALSE;
\}

/* check we aren't trying to unlock our own handcuffs */
if(\$actor == \$this."base:environment") \{
  EmitTo(\$actor, "You cannot pick your own handcuffs. You'll need to find someone else to do it.");
\}

if(\$this."trait:jammed") \{
  EmitTo(\$actor, Describe(\$this)+" appears to be jammed. There's nothing more you can do.");
  return FALSE;
\}

/* make the lockpicking roll */
\$result = Call(\$\{IronClaw:Lib:UrPeople:System\}, "roll", \$dicearray: (\{ \$actor."trait:mind", \$actor."skill:thief:lock-picking", \$actor."career:thief:lock-picking" \}));

if(\$result \> \$this."lock:difficulty") \{
  EmitTo(\$actor, "You hear a click as you unlock "+Describe(\$this)+".");
  EmitIn(\$this."base:environment", "You hear a click as "+Describe(\$actor)+" picks open "+Describe(\$this, nil, \$this."base:environment")+".", \$this);
  EmitIn(\$actor."base:environment", "You hear a click as "+Describe(\$actor)+" picks open "+Describe(\$this)+".", \$actor);

  \$this."trait:locked" = nil;

  \$victim = this."base:worn-by";
  \$parrypenalty = Int(\$victim."combat:penalty:parry") - 10;
  \$attackpenalty = Int(\$victim."combat:penalty:attack") - 15;

  if(\$parrypenalty \<= 0) \{
    \$victim."combat:penalty:parry" = nil;
  \} else \{
    \$victim."combat:penalty:parry" = \$parrypenalty;
  \}

  if(\$attackpenalty \<= 0) \{
    \$victim."combat:penalty:attack" = nil;
  \} else \{
    \$victim."combat:penalty:attack" = \$attackpenalty;
  \}
\} else if(\$result \< 4) \{
  EmitTo(\$actor, "You hear a click as the locking mechanism twists sickeningly.");
  EmitIn(\$actor."base:environment", "You hear a click as "+Describe(\$actor)+" attempts to pick "+Describe(\$this, nil, \$this."base:environment")+" and the locking mechanism twists sickeningly.", \$this);

  \$this."trait:jammed" = 1;
\} else \{
  EmitTo(\$actor, "You fiddle with the lock on "+Describe(\$this)+".");
  EmitIn(\$this."base:environment", Describe(\$actor)+" fiddles with the lock on "+Describe(\$this, nil, \$this."base:environment")+".", \$this);
  EmitIn(\$actor."base:environment", Describe(\$actor)+" fiddles with the lock on "+Describe(\$this)+".", \$actor);

\}

return FALSE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:material">
         X[M] return Call(\$\{Allegory:Props:Crafting:UrCrafting\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1107209474, "zwoc", "E", 1140223418, "barbra18", "K", 1140225633, "barbra18", "E", 1140225703, "barbra18", "E", 1140225764, "barbra18", "X", 1140226560, "barbra18", "K", 1140226997, "barbra18", "K", 1140227032, "barbra18", "E", 1140227430, "tunk_bodin", "X", 1140227731, "barbra18", "K", 1140227987, "barbra18", "X", 1140228021, "barbra18", "E", 1140228122, "barbra18", "E", 1140228377, "barbra18", "X", 1140228560, "barbra18", "E", 1140248632, "barbra18", "K", 1140248912, "barbra18", "P", 1140248991, "barbra18", "P", 1140249079, "barbra18", "K", 1140249204, "barbra18", "P", 1140249316, "barbra18", "P", 1140250388, "barbra18", "P", 1140250421, "barbra18", "P", 1140250897, "barbra18", "P", 1140250921, "barbra18", "P", 1140250937, "barbra18", "P", 1140251154, "tonyd", "P", 1140251233, "tonyd", "P", 1140251247, "tonyd", "P", 1140251762, "tonyd", "P", 1140251820, "tonyd", "P", 1140252307, "barbra18", "E", 1140252355, "barbra18", "E", 1140252376, "barbra18", "E", 1140252591, "tonyd", "E", 1140252866, "barbra18", "E", 1140254452, "tonyd", "P", 1140254674, "tonyd", "P", 1140254765, "tonyd", "P", 1140254789, "tonyd", "P", 1140254849, "tonyd", "P", 1140254902, "tonyd", "P", 1140254953, "tonyd", "P", 1140255293, "barbra18", "P", 1140255321, "barbra18", "P", 1140255346, "barbra18", "P", 1140255617, "barbra18", "P", 1140256547, "barbra18", "P", 1140256636, "barbra18", "P", 1140256657, "tonyd", "P", 1140256693, "tonyd", "P", 1140256723, "barbra18", "P", 1140256734, "tonyd", "P", 1140256928, "tonyd", "P", 1140257031, "tonyd", "P", 1140257107, "tonyd", "P", 1140257147, "tonyd", "P", 1140257518, "tonyd", "P", 1140257650, "tonyd", "P", 1140257688, "tonyd", "P", 1140257992, "tonyd", "P", 1140258136, "tonyd", "P", 1140258172, "tonyd", "P", 1140258229, "tonyd", "P", 1140258385, "tonyd", "P", 1140258514, "tonyd", "P", 1140258681, "tonyd", "P", 1140258754, "tonyd", "P", 1140258926, "tonyd", "P", 1140258959, "tonyd", "P", 1140259374, "tonyd", "P", 1140259637, "tonyd", "P", 1140259720, "tonyd", "P", 1140259897, "tonyd", "P", 1140259912, "tonyd", "P", 1140259985, "tonyd", "P", 1140260047, "tonyd", "P", 1140260066, "tonyd", "P", 1140260269, "tonyd", "P", 1140260687, "tonyd", "P", 1140260808, "tonyd", "P", 1140260857, "tonyd", "P", 1140260980, "tonyd", "P", 1140261042, "tonyd", "P", 1140261100, "tonyd", "P", 1140261170, "tonyd", "P", 1140261206, "tonyd", "P", 1140261332, "tonyd", "P", 1140261357, "tonyd", "P", 1140261400, "tonyd", "P", 1140261533, "tonyd", "P", 1140261888, "tonyd", "P", 1140261916, "tonyd", "P", 1140262050, "tonyd", "P", 1140262309, "tonyd", "P", 1140262447, "tonyd", "P", 1140263310, "tonyd", "P", 1140263535, "tonyd", "P", 1140264933, "tonyd", "P", 1140265380, "tonyd", "P", 1140265440, "tonyd", "P", 1140266125, "tonyd", "P", 1140266507, "tonyd", "P", 1140266565, "tonyd", "P", 1140266587, "tonyd", "P", 1140266796, "tonyd", "P", 1140268076, "tonyd", "P", 1140269722, "tonyd", "E", 1142474705, "barbra18", "K", 1186187073, "random1377", "X", 1205556122, "necate", "E", 1205556201, "necate", "E", 1205556262, "necate", "E", 1206610872, "balkaar", "E", 1206610979, "balkaar", "E", 1216733869, "rorschakovacs", "E", 1231082450, "balkaar", "E", 1231082615, "balkaar", "E", 1231202745, "jominey", "E", 1231202832, "jominey", "E", 1231203124, "jominey", "E", 1231203411, "jominey", "E", 1245365504, "jominey", "E", 1245365714, "jominey", "E", 1245366709, "jominey", "E", 1245367065, "jominey", "E", 1245367565, "jominey", "E", 1245367643, "jominey", "E", 1245368112, "jominey", "E", 1245368139, "jominey", "E", 1245368234, "jominey", "E", 1245368342, "jominey", "E", 1245368345, "jominey", "E", 1245368472, "jominey", "E", 1245368512, "jominey", "E", 1263399666, "jominey", "E", 1323583920, "morwenlorelie", "E", 1443294353, "rorschakovacs", "X", 1576444020, "jominey", "P", 1576444028, "jominey", "P", 1695959447, "annemairi", "E", 1695959534, "annemairi", "E", 1701717203, "annemairi", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
