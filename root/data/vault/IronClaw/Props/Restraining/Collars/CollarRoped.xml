<object clone="/base/obj/thing" owner="barbra18">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Allegory:Props:Clothing:UrClothing)"/>
    <Base:Bulk immobile="false" mass="0.0001" density="0.0001"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="lying" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="false" inside="true" near="true" over="false" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="collar"/>
            <Base:SName sname="toy"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="toys"/>
            <Base:PName pname="collars"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="brass"/>
          <Base:Adjective adjective="large"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             large $(this.trait:material) collar with a rope
          </Base:Description>
          <Base:Description type="examine">
             A large $(this.trait:material) collar. There is an obvious keyhole placed at the side and a loop at the bottom, that would be in front of the person.
          </Base:Description>
          <Base:Description type="look">
             A large $(this.trait:material) collar.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="true" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="keyhole" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="true" near="true" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="keyhole"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="keyholes"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="simple"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             simple keyhole
          </Base:Description>
          <Base:Description type="examine">
             A simple, yet well placed keyhole in the handcuffs.
          </Base:Description>
          <Base:Description type="look">
             A simple, yet well placed keyhole in the handcuffs.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="loop" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="true" near="true" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="loop"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="loops"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             loop at the bottom of the collar
          </Base:Description>
          <Base:Description type="examine">
             A large loop at the bottom of the collar, attached, a large piece of rope.
          </Base:Description>
          <Base:Description type="look">
             A large loop at the bottom of the collar, attached, a large piece of rope.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="rope" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="rope"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="ropes"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             large piece of rope connected to the collar
          </Base:Description>
          <Base:Description type="examine">
             A large piece of rope connected to the loop in the collar.
          </Base:Description>
          <Base:Description type="look">
             A large piece of rope connected to the loop in the collar.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:Covered value="neck"/>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:lock:difficulty">
         6
      </Core:Property>
      <Core:Property property="export:trait:material">
         "brass"
      </Core:Property>
      <Core:Property property="merry:lib:collar_allowed">
         X[M] /* Attach the handcuffs to the victim */
\$actor = \$par["actor"];
\$victim = \$par["victim"];

/* Check the handcuffer and handcuffee are still in the same room */
if(\$actor."base:environment" == \$victim."base:environment") \{
  /* first move the handcuffs into the victims inventory */
  \$this."base:environment" = \$victim;
  /* then make them be worn */
  \$this."base:worn-by" = \$victim;
  /* mark the handcuffs as locked */
  \$this."trait:locked" = 1;

  /* Output a message */
  EmitTo(\$actor, "You collar "+Describe(NewNRef(\$victim, "default"), \$actor, \$actor)+".");
  /* Don't emit a second emote if we're handcuffing ourselves */
  if(!NRefsEqual(NewNRef(\$actor, "default"), NewNRef(\$victim, "default")))
    EmitTo(\$victim, Describe(\$actor)+" collars you.");
  EmitIn(\$actor."base:environment", Describe(\$actor)+" collars "+Describe(NewNRef(\$victim, "default"))+".", \$actor, \$victim);
\} else \{
  EmitTo(\$actor, "You are no longer in the same room as "+Describe(NewNRef(\$victim, "default"))+".");
  EmitTo(\$victim, "You are no longer in the same room as "+Describe(\$actor)+".");
\}


/* Suppress the usual "attach" emote */
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:collar_denied">
         X[M] \$actor = \$par["actor"];
\$victim = \$par["victim"];
EmitTo(\$actor, Describe(NewNRef(\$victim, "default"))+" refuses to be collared.");
EmitTo(\$victim, "You refuse "+Describe(NewNRef(\$actor, "default"))+" consent to collar you.");
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:collar_expire">
         X[M] \$actor = \$par["actor"];
\$victim = \$par["victim"];
if(\$this."base:environment" == \$actor) \{
  EmitTo(\$actor, "Consent to collar "+Describe(NewNRef(\$victim, "default"))+" has expired.");
  EmitTo(\$victim, Describe(NewNRef(\$actor, "default"))+" has asked to collar you, but time has expired.");
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:pick-what">
         X[M] /* Trying to pick the lock on the handcuffs */

/* Check if the handcuffs are locked */
if(!\$this."trait:locked") \{
  EmitTo(\$actor, Describe(\$this)+" is not locked.");
  return FALSE;
\}

/* Check if we have some lockpicks */
if(!sizeof(Match(\$actor, "key", \$actor, "handcuff"))) \{
  EmitTo(\$actor, "You do not have any lockpicking tools.");
  return FALSE;
\}

/* check we aren't trying to unlock our own handcuffs */
if(\$actor == \$this."base:environment") \{
  EmitTo(\$actor, "You cannot pick your own collar. You'll need to find someone else to do it.");
\}

if(\$this."trait:jammed") \{
  EmitTo(\$actor, Describe(\$this)+" appears to be jammed. There's nothing more you can do.");
  return FALSE;
\}

/* make the lockpicking roll */
\$result = Call(\$\{IronClaw:Lib:UrPeople:System\}, "roll", \$dicearray: (\{ \$actor."trait:dexterity", \$actor."skill:thief:lock-picking", \$actor."career:thief:lock-picking" \}));

if(\$result \> \$this."lock:difficulty") \{
  EmitTo(\$actor, "You hear a click as you unlock "+Describe(\$this)+".");
  EmitTo(\$this."base:environment", "You hear a click as "+Describe(\$actor)+" unlocks "+Describe(\$this, nil, \$this."base:environment")+".");
  EmitIn(\$actor."base:environment", "You hear a click as "+Describe(\$actor)+" unlocks "+Describe(\$this)+".");

  \$this."trait:locked" = nil;
\} else if(\$result \< 6) \{
  EmitTo(\$actor, "You hear a click as the locking mechanism twists sickeningly.");
  EmitTo(\$this."base:environment", "You hear a click as the locking mechanism in "+Describe(\$this, nil, \$this."base:environment")+" twists sickeningly.");
  \$this."trait:jammed" = 1;
\} else \{
  EmitTo(\$actor, "You don't manage to unlock "+Describe(\$this)+".");
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:unlock-what">
         X[M] /* send an emit about removing the handcuffs */

/* Check if the handcuffs are locked */
if(!\$this."trait:locked") \{
  EmitTo(\$actor, Describe(\$this)+" is not locked.");
  return FALSE;
\}

/* Check if we have the key to the handcuffs */
if(!sizeof(Match(\$actor, "key", \$actor, "collar"))) \{
  EmitTo(\$actor, "You do not have a collar key.");
  return FALSE;
\}

if(\$actor != \$this."base:environment") \{
  /* If someone else is removing your handcuffs */
  if(\$this."trait:jammed") \{
    EmitTo(\$actor, "For a moment the key does not turn, as if the lock is jammed. Then, with a click, you unlock and remove "+Describe(\$this)+".");
  \} else \{
    EmitTo(\$actor, "With a click, you unlock and remove "+Describe(\$this)+".");
  \}
  EmitTo(\$this."base:environment", "With a click, "+Describe(\$actor)+" unlocks and removes "+Describe(\$this, nil, \$this."base:environment")+".");
  EmitIn(\$actor."base:environment", "With a click, "+Describe(\$actor)+" unlocks and removes "+Describe(\$this)+".", \$actor, \$this."base:environment");
\} else \{
  /* If you are removing your own handcuffs */
  EmitTo(\$actor, "With a click, you unlock and remove "+Describe(\$this, nil, \$actor)+".");
  EmitIn(\$actor."base:environment", "With a click, "+Describe(\$actor)+" unlocks and removes "+Describe(\$this, \$actor)+".", \$actor);
\}

/* unlock and remove the handcuffs */
\$this."trait:locked" = nil;
\$this."trait:jammed" = nil;
\$this."base:worn-by" = nil;
\$this."base:environment" = \$actor;
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:unwear">
         X[M] /* if the handcuffs are locked */
if(\$this."trait:locked") \{
  EmitTo(\$actor, "You cannot remove this collar, it is locked.");
  return FALSE;
\}
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:attach-dob">
         X[M] /* The X[M] tells us that we're writing a merry script */
/* We are handcuffing someone */

/* Check if we have something to attach the handcuffs TO */
if(!\$iob)
  return TRUE;

/* Check that we are only attaching the handcuff to one object */
if(sizeof(\$iob) \> 1) \{
  EmitTo(\$actor, "You can only attach "+Describe(\$this)+" to one thing at a time.");
  return FALSE;
\}

\$victim = NRefOb(\$iob[0]);

/* Check if the target is a person */
if(!\$victim."base:volition") return TRUE;

/* check that the handcuffs aren't locked */
if(\$this."trait:locked") \{
  EmitTo(\$actor, Describe(\$this)+" is already locked.");
  return FALSE;
\}

/* make the handcuffs be worn by the victim */

/* Check if we need consent */
/* check if combat:damage is larger than trait:body */
/* Also check if we're handcuffing ourselves (and hence don't need consent) */
if((\$victim."combat:damage" \<= \$victim."trait:body") \&\& !NRefsEqual(NewNRef(\$actor, "default"), NewNRef(\$victim, "default"))) \{
  EmitTo(\$actor, "Asking "+Describe(\$iob[0])+" for consent, as "+\$victim."base:pronoun"+" is still able to resist.");
  interaction::question(\$actor: \$victim, \$question: Describe(\$actor)+" is attempting to collar you. Will you allow this?", \$expires: 80, \$env: "TRUE", \$yes_ob: \$this, \$no_ob: \$this, \$expire_ob: \$this, \$yes_fun: "collar_allowed", \$no_fun: "collar_denied", \$expire_fun: "collar_expire", \$par: ([ "victim": \$victim, "room": \$room, "actor": \$actor]));
\} else \{
  Call(\$this, "collar_allowed", \$par: ([ "victim": \$victim, "room": \$room, "actor": \$actor]));
\}

/* we're done here. squash the normal emote for attach */
return FALSE;


/* first move the handcuffs into the victims inventory */
\$this."base:environment" = \$victim;
/* then make them be worn */
\$this."base:worn-by" = \$victim;

/* Output a message */
EmitTo(\$actor, "You collar "+Describe(\$iob[0])+".");
EmitTo(\$victim, Describe(\$actor)+" collars you.");
EmitIn(\$actor."base:environment", Describe(\$actor)+" collars "+Describe(\$iob[0])+".");

/* Suppress the usual "attach" emote */
return FALSE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:material">
         X[M] return Call(\$\{Allegory:Props:Crafting:UrCrafting\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1107209474, "zwoc", "E", 1140227213, "barbra18", "E", 1140227515, "barbra18", "K", 1140227571, "barbra18", "E", 1140227801, "barbra18", "K", 1140228081, "barbra18", "X", 1140228156, "barbra18", "E", 1140228364, "barbra18", "X", 1140228525, "barbra18", "E", 1140243260, "barbra18", "K", 1140278285, "barbra18", "P", 1140278445, "barbra18", "P", 1140278508, "barbra18", "P", 1140278681, "barbra18", "P", 1140278710, "barbra18", "P", 1140278988, "barbra18", "P", 1140279041, "barbra18", "P", 1140279071, "barbra18", "P", 1140279086, "barbra18", "P", 1140280667, "barbra18", "K", 1140280774, "barbra18", "K", 1142475216, "barbra18", "K", 1173665226, "tonyd", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
