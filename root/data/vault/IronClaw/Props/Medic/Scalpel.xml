<object clone="/base/obj/thing" owner="SkotOS">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Allegory:Props:Weapons:URs:UrKnife)"/>
    <Base:Bulk immobile="false" mass="0.1" density="8"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="true" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="true" inside="true" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="scalpel"/>
            <Base:SName sname="knife"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="scalpels"/>
            <Base:PName pname="knives"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="edged"/>
          <Base:Adjective adjective="sharp"/>
          <Base:Adjective adjective="sharp-edged"/>
        </Base:Adjectives>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="blade" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="blade"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="blades"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="scalpel"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             sharp blade of the $(this.trait:color) $(this.trait:material) $(this.trait:brief)
          </Base:Description>
          <Base:Description type="look">
             A small, sharp blade on top of the $(this.trait:color) $(this.trait:material) $(this.trait:brief).
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="handle" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="handle"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="handles"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="scalpel"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the handle of the $(this.trait:color) $(this.trait:material) $(this.trait:brief)
          </Base:Description>
          <Base:Description type="look">
             A handle of the $(this.trait:color) $(this.trait:material) $(this.trait:brief). It is about eight inches long.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:Covered value="right-hand"/>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:trait:belttype">
         "tool"
      </Core:Property>
      <Core:Property property="export:trait:brief">
         "scalpel"
      </Core:Property>
      <Core:Property property="export:trait:examine">
         "It is a small but extremely sharp knife used for surgery, anatomical dissection, and various arts and crafts. Scalpels may be disposable or re-usable."
      </Core:Property>
      <Core:Property property="export:trait:objecttype">
         "scalpel"
      </Core:Property>
      <Core:Property property="export:trait:tooltype">
         "tool"
      </Core:Property>
      <Core:Property property="export:weapon:skill">
         "dagger"
      </Core:Property>
      <Core:Property property="export:weapon:speed">
         10
      </Core:Property>
      <Core:Property property="export:weapon:targets">
         (\{ "chest", "torso", "right-cheek", "left-cheek", "right-shoulder", "left-shoulder", "right-shoulder", "left-shoulder", "right-forearm", "left-forearm", "left-forearm", "right-hand", "left-hand", "left-hand" \})
      </Core:Property>
      <Core:Property property="export:weapon:targets:glancing">
         (\{ "right-cheek", "left-cheek", "right-shoulder", "left-shoulder", "right-shoulder", "left-shoulder", "right-forearm", "left-forearm", "left-forearm", "right-hand", "left-hand", "left-hand", "right-wrist", "left-wrist", "right-palm", "left-palm" \})
      </Core:Property>
      <Core:Property property="merry:lib:bleed_start">
         X[M] \$actor = \$this; 
 
\$actor."handles:bleeding:emits" = In("emitter%incision", 20); 
\$actor."handles:bleeding:timer" = In("bleeding%incision", 120); 
\$actor.isbleeding = TRUE; 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:bleed_stop">
         X[M] \$actor = \$this; 
 
if(\$bodypart) \{ 
    \$newdetail = NewNRef(\$actor, \$actor."incision:details"[0]); 
    EmitTo(\$actor, "The bleeding from " + Describe(\$newdetail, nil, \$actor) + " comes to a gradual stop."); 
    EmitIn(\$actor."base:environment", "The bleeding from " + Describe(\$newdetail) + " comes to a gradual stop.", \$actor); 
    \$actor."incision:details" -= (\{ \$bodypart \}); 
 
    if(!sizeof(\$actor."incision:details")) \{ 
        \$actor."incision:details" = nil; 
    \} 
\} else if(\$actor."incision:details" \&\& sizeof(\$actor."incision:details")) \{ 
    \$newdetail = NewNRef(\$actor, \$actor."incision:details"[0]); 
    EmitTo(\$actor, "The bleeding from " + Describe(\$newdetail, nil, \$actor) + " comes to a gradual stop."); 
    EmitIn(\$actor."base:environment", "The bleeding from " + Describe(\$newdetail) + " comes to a gradual stop.", \$actor); 
    \$actor."incision:details"[0] = nil; 
    \$actor."incision:details" -= (\{ nil \}); 
 
    if(!sizeof(\$actor."incision:details")) \{ 
        \$actor."incision:details" = nil; 
    \} 
\} else \{ 
    \$actor."incision:details" = nil; 
\} 
 
if(\$actor."handles:bleeding:emits") \{ 
    Stop(\$actor."handles:bleeding:emits"); 
    \$actor."handles:bleeding:emits" = nil; 
\} 
 
if(\$actor."handles:bleeding:timer") \{ 
    Stop(\$actor."handles:bleeding:timer"); 
    \$actor."handles:bleeding:timer" = nil; 
\} 
 
if(!\$actor."incision:details") \{ 
    Set(\$actor, "details:blood:description:brief", nil); 
    Set(\$actor, "details:blood:description:look", nil); 
    Set(\$actor, "details:blood:description:examine", nil); 
    Set(\$actor, "details:blood:sname:blood", FALSE); 
    Set(\$actor, "details:blood:pname:bloods", FALSE); 
    Set(\$actor, "details:blood", FALSE); 
 
    \$actor."merry:inherit:lib:bleed_start" = nil; 
    \$actor."merry:inherit:lib:bleed_stop" = nil; 
    \$actor."merry:inherit:timer:bleeding%incision" = nil; 
    \$actor."merry:inherit:timer:emitter%incision" = nil; 
    \$actor.isbleeding = FALSE; 
\} else \{ 
    \$actor."handles:bleeding:emits" = In("emitter%incision", 20); 
    \$actor."handles:bleeding:timer" = In("bleeding%incision", 120); 
\} 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:getdetails">
         X[M] \$incisions = (\{ \}); 
if(\$who."incision:details") \{ 
    \$incisions = \$who."incision:details"; 
\} else \{ 
    \$rstr = "nowhere"; 
\} 
 
\$rstr = ""; 
for(\$i = 0; \$i \< sizeof(\$incisions); \$i++) \{ 
    \$temp = NewNRef(\$who, \$incisions[\$i]); 
    \$rstr += replace_strings(Describe(\$temp, nil, nil, STYLE_NONPOSS), "a ", "", "an ", ""); 
    if(\$i \< (sizeof(\$incisions) - 2)) \{ 
        \$rstr += ", "; 
    \} else if(\$i \< (sizeof(\$incisions) - 1)) \{ 
        if(sizeof(\$incisions) == 2) \{ 
            \$rstr += " and "; 
        \} else \{ 
            \$rstr += ", and "; 
        \} 
    \} 
\} 
 
return \$rstr;
      </Core:Property>
      <Core:Property property="merry:react-post:cut-using">
         X[M] \$detail = NRefDetail(\$dob[0]); 
\$who = NRefOb(\$dob[0]); 
 
if(\$who."effect:spideritch:source") \{ 
    \$who."blood:color" = "yellowish-red"; 
\} else \{ 
    \$who."blood:color" = "deep-red"; 
\} 
 
EmitTo(\$actor, capitalize(\$who."blood:color") + " blood trickles upon the mark of your scalpel."); 
EmitIn(\$actor."base:environment", capitalize(\$who."blood:color") + " blood trickles upon the mark of " + Describe(\$this) + ".", \$actor); 
 
/* Add this detail to the end of the list */ 
\$incisions = (\{ \}); 
if(Get(\$who, "incision:details")) \{ 
    \$incisions = Get(\$who, "incision:details"); 
\} 
\$incisions -= (\{ \$detail \}); 
\$incisions += (\{ \$detail \}); 
\$who."incision:details" = \$incisions; 
 
\$woundtype = (\{ "cut", "cuts", "cut" \}); 
/* \$wound_details = ([ "adj":\$woundtype[2], "type":\$woundtype[0..1], "damage":1, "level":5, "complications":\$complications, "injury":TRUE ]);  
\$wound = injuries::add_wound(\$wound: \$wound_details, \$target: \$dob[0]);  */
 
Set(\$who, "details:blood:description:brief", ParseXML(UnSAM("\$(this.blood:color) blood"))); 
Set(\$who, "details:blood:description:look", ParseXML(UnSAM("A line of trickling, \$(this.blood:color) blood."))); 
Set(\$who, "details:blood:description:examine", ParseXML(UnSAM("\$(this.blood:color) blood trickles from \$(this.base:possessive) \$[return Call(\$\{IronClaw:Props:Medic:Scalpel\}, \\"getdetails\\", \$who: \$this);]."))); 
Set(\$who, "details:blood:sname:blood", TRUE); 
Set(\$who, "details:blood:pname:bloods", TRUE); 
Set(\$who, "details:blood:hidden", FALSE); 
 
/* If already bleeding, restart the emits */ 
if(\$who.isbleeding) \{ 
    if(\$who."handles:bleeding:emits") \{ 
        Stop(\$who."handles:bleeding:emits"); 
        \$who."handles:bleeding:emits" = nil; 
    \} 
 
    if(\$who."handles:bleeding:timer") \{ 
        Stop(\$who."handles:bleeding:timer"); 
        \$who."handles:bleeding:timer" = nil; 
    \} 
\} 
 
/* Set up inherits */ 
\$who."merry:inherit:lib:bleed_start" = \$\{IronClaw:Props:Medic:Scalpel\}; 
\$who."merry:inherit:lib:bleed_stop" = \$\{IronClaw:Props:Medic:Scalpel\}; 
\$who."merry:inherit:timer:bleeding%incision" = \$\{IronClaw:Props:Medic:Scalpel\}; 
\$who."merry:inherit:timer:emitter%incision" = \$\{IronClaw:Props:Medic:Scalpel\}; 
 
Call(\$who, "bleed_start"); 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:cut-using">
         X[M] int skill; 
 
if(Int(\$actor."skill:academic:healing") \> Int(\$actor."skill:academic:healing") \|\| Int(\$actor."skill:academic:healing") \> Int(\$actor."skill:academic:healing")) \{ 
    skill = Int(\$actor."skill:academic:healing"); 

    if(Int(\$actor."skill:academic:healing") \> Int(\$actor."skill:academic:healing")) \{
        skill = Int(\$actor."skill:academic:healing");
    \}
\} else \{ 
    skill = Int(\$actor."skill:academic:healing"); 
\} 
 
if(skill \<= 0) \{ 
    EmitTo(\$actor, "You don't know how to do that."); 
    return FALSE; 
\} 
 
if(!\$dob) \{ 
    EmitTo(\$actor, "You must specify someone to cut."); 
    return FALSE; 
\} 
 
if(!sizeof(\$dob)) \{ 
    EmitTo(\$actor, "You must specify someone to cut."); 
    return FALSE; 
\}  
 
if(sizeof(\$dob) \> 1) \{ 
    EmitTo(\$actor, "You can only cut one thing at a time."); 
    return FALSE; 
\} 
 
if(NRefDetail(\$dob[0]) == "default") \{ 
    EmitTo(\$actor, "You must specify a body part to make your incision."); 
    return FALSE; 
\} 
 
if(!Get(NRefOb(\$dob[0]), "udat:possessed")) \{ 
    EmitTo(\$actor, "You cannot make an incision on " + Describe(NRefOb(\$dob[0])) + "."); 
    return FALSE; 
\} 
 
if(NRefOb(\$dob[0]) == \$actor) \{ 
    EmitTo(\$actor, "You cannot do that to yourself."); 
    return FALSE; 
\} 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:timer:bleeding%incision">
         X[M] \$actor = \$this; 
 
::bleed_stop(\$actor: \$actor); 
 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:timer:emitter%incision">
         X[M] \$actor = \$this; 
 
if(\$actor."handles:bleeding:emits") \{ 
    Stop(\$actor."handles:bleeding:emits"); 
    \$actor."handles:bleeding:emits" = nil; 
\} 
 
\$details = \$actor."incision:details"; 
\$sz = sizeof(\$details); 
\$detail = NewNRef(\$actor, \$details[random(\$sz)]); 
 
EmitTo(\$actor, capitalize(\$actor."blood:color") + " blood trickles from " + Describe(\$detail, nil, \$actor) + "."); 
EmitIn(\$actor."base:environment", capitalize(\$actor."blood:color") + " blood trickles from " + Describe(\$detail) + ".", \$actor); 
 
\$actor."handles:bleeding:emits" = In("emitter%incision", 60); 
 
return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1144052085, "-", "SYNC", 1150269639, "barbra18", "K", 1150269674, "barbra18", "E", 1150560734, "tunk_bodin", "X", 1150560791, "tunk_bodin", "X", 1150560826, "tunk_bodin", "X", 1150560841, "tunk_bodin", "E", 1150560940, "tunk_bodin", "X", 1150561346, "tunk_bodin", "X", 1150561553, "tunk_bodin", "X", 1167654409, "tonyd", "E", 1201552088, "jsfox", "X", 1212916781, "balkaar", "E", 1218236857, "rorschakovacs", "K", 1242847175, "morwenlorelie", "E", 1242847243, "morwenlorelie", "K", 1242847283, "morwenlorelie", "E", 1242847320, "morwenlorelie", "E", 1242847389, "morwenlorelie", "X", 1242847409, "morwenlorelie", "X", 1250625911, "jominey", "E", 1250626644, "jominey", "E", 1250627131, "jominey", "E", 1250627211, "jominey", "E", 1250627279, "jominey", "E", 1250627374, "jominey", "E", 1250627404, "jominey", "E", 1250627412, "jominey", "E", 1250627420, "jominey", "E", 1250627450, "jominey", "E", 1250627930, "jominey", "E", 1250628162, "jominey", "E", 1250628276, "jominey", "E", 1250628310, "jominey", "E", 1250628531, "jominey", "E", 1250628782, "jominey", "E", 1250630128, "jominey", "E", 1250630196, "jominey", "E", 1250630247, "jominey", "E", 1250630463, "jominey", "E", 1250631028, "jominey", "E", 1250635572, "jominey", "E", 1250635900, "jominey", "E", 1250635989, "jominey", "E", 1250636008, "jominey", "E", 1250636023, "jominey", "E", 1250636132, "jominey", "E", 1250636162, "jominey", "E", 1250636244, "jominey", "E", 1250636305, "jominey", "E", 1250636614, "jominey", "E", 1250636788, "jominey", "E", 1250636845, "jominey", "E", 1250636962, "jominey", "E", 1250637095, "jominey", "E", 1250637162, "jominey", "E", 1250637477, "jominey", "E", 1250637779, "jominey", "E", 1250638312, "jominey", "E", 1250638496, "jominey", "E", 1250638665, "jominey", "E", 1250638767, "jominey", "E", 1250638994, "jominey", "E", 1250639002, "jominey", "E", 1250639038, "jominey", "E", 1250639137, "jominey", "E", 1250639217, "jominey", "E", 1250639267, "jominey", "E", 1250639288, "jominey", "E", 1250639457, "jominey", "E", 1250639511, "jominey", "E", 1250639595, "jominey", "E", 1250639659, "jominey", "E", 1250639731, "jominey", "E", 1250639791, "jominey", "E", 1250643463, "jominey", "E", 1250643740, "jominey", "E", 1250643864, "jominey", "E", 1250644393, "jominey", "E", 1318553030, "morwenlorelie", "X", 1532398506, "jominey", "E", 1532398895, "jominey", "E", 1532399168, "jominey", "E", 1701393613, "ezralee", "E", 1701393849, "ezralee", "E", 1701394201, "ezralee", "E", 1701394206, "ezralee", "E", 1701394213, "ezralee", "E", 1701394309, "ezralee", "E", 1701394391, "ezralee", "E", 1701394393, "ezralee", "E", 1701394396, "ezralee", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
