<object clone="/base/obj/thing" owner="necate">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Allegory:Props:Crafting:UrCrafting)"/>
    <Base:Bulk immobile="false" mass="1" density="2.5"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="false" under="false" on="false" inside="false" near="true" over="false" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="kettle"/>
            <Base:SName sname="tea"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="kettles"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="metal"/>
          <Base:Adjective adjective="tea"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.trait:color) {? | $(this.trait:gem:material) | bejeweled |} {? | $(this.trait:engraving) | engraved } $(this.trait:material) tea kettle
          </Base:Description>
          <Base:Description type="examine">
             This is a tea kettle, crafted from thinned {? | $(this.trait:material) | $(this.trait:color) $(this.trait:material) | metal}.{? | $(this.details:gempieces:snames) | Remarkable $(this.trait:gem:color) $(this.trait:gem:material)s are set in the metal.} {? | $(this.trait:engraving) | $(this.trait:engraving). } {? not | $(this.trait:flavor) | | Some $(this.trait:flavor) tea is currently brewing. } <makers-mark/><sbr/><quality-full/>
          </Base:Description>
          <Base:Description type="look">
             This is a tea kettle, crafted from thinned {? | $(this.trait:material) | $(this.trait:color) $(this.trait:material)| metal}.{? | $(this.details:gempieces:snames) | Remarkable $(this.trait:gem:color) $(this.trait:gem:material)s are set in the metal.} {? | $(this.trait:engraving) | $(this.trait:engraving). } {? not | $(this.trait:flavor) | | Some $(this.trait:flavor) tea is currently brewing. }
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="gempieces" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             the {? equal | $(this.trait:gem:color) | none | gaudy | $(this.trait:gem:color) }{? equal | $(this.trait:gem:material) | none | gaudy | $(this.trait:gem:material)s } adorning the $(this.details:default:descriptions:brief)
          </Base:Description>
          <Base:Description type="look">
             A fine assortment of {? equal | $(this.trait:gem:color) | none | gaudy | $(this.trait:gem:color) } {? equal | $(this.trait:gem:material) | none | gaudy | $(this.trait:gem:material)s } adorning this $(this.details:default:descriptions:brief).
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:alteration:add:default:gempieces">
         ([ "adj-prop":(\{ "trait:color", "trait:material" \}), "names":(\{ (\{ "sname", "gem" \}), (\{ "pname", "gems" \}) \}), "properties":(\{ (\{ "trait:color", "trait:gem:color" \}), (\{ "trait:material", "trait:gem:material" \}), (\{ "trait:gem:type", "trait:gem:type" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:trait:objecttype">
         "tea kettle"
      </Core:Property>
      <Core:Property property="merry:react-pre:add-iob">
         X[M] /* this allows us to add a teabag to the kettle, and have the flavor carry across */  
  
/* check if we were given a tea bag */  
if(\$dob \&\& sizeof(\$dob) == 1) \{  
  /* we have one object being added. check if it's a teabag */  
  \$teabag = NRefOb(\$dob[0]);  
\} else \{  
  /* either they didn't add any objects, or they added more than one */  
  return TRUE;  
\}  
  
/* check if the object is, indeed, a tea bag */  
if(!\$teabag."trait:objecttype" \|\| \$teabag."trait:objecttype" != "teabag")  
  return TRUE;  
  
/* we have a teabag. */  
  
/* should we transfer the flavor? */  
/* does the kettle already have flavor? */  
if(\$this."trait:flavor") \{  
  EmitTo(\$actor, Describe(\$this, nil, \$actor)+ " already holds " +\$this."trait:flavor"+ " tea. You will need to empty it before attempting a new flavor.");  
  return FALSE;  
\}  
  
/* the tea didn't already have flavor, so transfer it */  
\$this."trait:flavor" = \$teabag."trait:flavor"; 
\$this."trait:taste" = \$teabag."trait:taste";  
\$this."trait:smell" = \$teabag."trait:smell"; 
\$this."emote:swill" = \$teabag."emote:swill"; 
\$this."emote:drink" = "It tastes " + \$teabag."trait:taste"; 
\$this."emote:quaff" = "It tastes " + \$teabag."trait:taste"; 
\$this."emote:savor" = "It tastes " + \$teabag."trait:taste"; 
\$this."emote:savour" = "It tastes " + \$teabag."trait:taste"; 
\$this."emote:gulp" = "It tastes " + \$teabag."trait:taste"; 
\$this."emote:slurp" = "It tastes " + \$teabag."trait:taste"; 
\$this."emote:swill" = "It tastes " + \$teabag."trait:taste"; 
\$this."emote:taste" = "It tastes " + \$teabag."trait:taste"; 
\$this."emote:sip" = "It tastes " + \$teabag."trait:taste"; 

if(\$teabag."consumable:effects") \{
    \$this."consumable:effects" = \$teabag."consumable:effects";
\}
  
EmitTo(\$actor, "You add " + Describe(\$teabag, nil, \$actor) + " to " + Describe(\$this, nil, \$actor) + ".");  
EmitIn(\$actor."base:environment", Describe(\$actor) + " adds " + Describe(\$teabag, \$actor) + " to " + Describe(\$this, \$actor) + ".", \$actor);  
Slay(\$teabag);  
return FALSE;  
  
/* Here is the previous code --------------------------------------------------------------------------*/  
  
/* EmitTo(\$actor, dump_value(args));   */  
  
if(\$iob \&\& sizeof(\$iob) == 1) \{  
    \$tea_ob = NRefOb(\$iob[0]);  
    EmitTo(\$actor, "Blah-First Check");  
  
   if(\$tea_ob."trait:objecttype" == "teabag") \{  
        EmitTo(\$actor, "Blah-Second Check: Objecttype");  
  
            if(\$this."trait:flavor") \{  
  
                EmitTo(\$actor, Describe(\$this, nil, \$actor)+ " already holds " +\$this."trait:flavor"+ " tea. You will need to empty it before attempting a new flavor.");  
                EmitTo(\$actor, "Blah3-3.1 Check: Already Brewing Tea");  
                return FALSE;  
  
  
\}            else if(!\$this."trait:flavor") \{  
                \$flavor = Get(\$tea_ob, "trait:flavor");  
                \$this."trait:flavor" = \$flavor;  
                EmitTo(\$actor, "Blah-3.2: Add Tea Flavor to Kettle");  
\}  
\}  
\}  
EmitTo(\$actor, "Blah-End");
      </Core:Property>
      <Core:Property property="merry:react-pre:empty-dob">
         X[M] if(\$this."trait:flavor" == nil)\{  
EmitTo(\$actor, "The kettle is already empty, why don't you brew some tea.");  
return FALSE;  
\}  
EmitTo(\$actor, "You pour the excess of the remaining tea in the kettle into a metal bucket under the counter.");  
EmitIn(\$actor."base:environment", Describe(\$actor)+ " empties the remaining tea from the kettle into a large metal bucket under the counter.", \$actor);  

\$this."consumable:effects" = nil;

\$this."trait:flavor" = nil;  
\$this."trait:taste" = nil;  
\$this."trait:smell" = nil;
      </Core:Property>
      <Core:Property property="merry:react-pre:pour-dob">
         X[M] if(\$this."trait:flavor" == nil)\{  
EmitTo(\$actor, "There is no tea brewing at the moment, maybe you should pick a flavor of tea and brew a pot.");  
return FALSE;  
\}  
  
EmitTo(\$actor, "After retrieving a clean tea cup, you pour yourself a steaming hot cup of "+\$this."trait:flavor"+ " tea. Mmmm...");  
  
EmitIn(\$actor."base:environment", Describe(\$actor)+ " retrieves a clean tea cup and then pours " +\$actor."base:objective"+ "self a cup of steaming hot "+\$this."trait:flavor"+" tea.", \$actor);  
  
\$drink = \$\{Ironclaw:Props:Consumables:UrDrink\}; 
\$tea = Spawn(\$drink);  
\$tea."trait:flavor" = \$this."trait:flavor";  
\$tea."trait:smell" = \$this."trait:smell";  
\$tea."trait:liquid" = \$this."trait:flavor" + " tea";  
\$tea."trait:container" = "cup";  
\$tea."trait:quantity" = 50; 
\$tea."emote:drink" = \$this."emote:drink"; 
\$tea."emote:quaff" = \$this."emote:quaff"; 
\$tea."emote:savor" = \$this."emote:savor";  
\$tea."emote:savour" = \$this."emote:savor";  
\$tea."emote:gulp" = \$this."emote:gulp"; 
\$tea."emote:slurp" = \$this."emote:slurp"; 
\$tea."emote:swill" = \$this."emote:swill"; 
\$tea."emote:taste" = \$this."trait:taste";  
\$tea."emote:sip" = \$this."emote:sip";  
\$tea."consumable:effects" = \$this."consumable:effects";
/* 
\$tea."trait:flavor" = \$this."trait:flavor";  
\$tea."trait:smell" = \$this."trait:smell";  
\$tea."trait:liquid" = "tea";  
\$tea."trait:container" = "cup";  
\$tea."trait:quantity" = 4;  
\$tea."emote:drink" = "It is hot and delicious";  
\$tea."emote:quaff" = "This hot liquid, while tasty, burns your throat";  
\$tea."emote:savor" = "The sweetness of the tea lingers pleasantly";  
\$tea."emote:savour" = "The sweetness of the tea lingers pleasantly";  
\$tea."emote:gulp" = "The hot liquid of the tea slightly burns your throat";  
\$tea."emote:slurp" = "It is delicious";  
\$tea."emote:swill" = "It slowly slides down your throat, warming you as it goes";  
\$tea."emote:taste" = "The full flavor of the tea spreads over your tastebuds";  
\$tea."emote:sip" = "Hot flavorful tea eclipes your tongue"; */ 
 
\$tea."base:environment" = \$actor;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1597622648, "jominey", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
