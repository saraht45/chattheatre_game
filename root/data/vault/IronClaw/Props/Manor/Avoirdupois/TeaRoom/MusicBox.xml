<object clone="/base/obj/thing" owner="slurpeeslurp">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0.3" maxweight="2" verb2="contain" verb3="contains"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="sitting" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="false" under="false" on="false" inside="true" near="true" over="true" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="box"/>
            <Base:SName sname="musicbox"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="musicboxes"/>
            <Base:PName pname="boxes"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="heavy"/>
          <Base:Adjective adjective="large"/>
          <Base:Adjective adjective="music"/>
          <Base:Adjective adjective="walnut"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             large dark walnut music box
          </Base:Description>
          <Base:Description type="look">
             This is a large dark walnut music box. The flat surface of the top and sides of the box have thin slivers of winding and twisting spirals carved into it. The box itself is surprisingly heavy, mostly due to the small gears and mechanisms held within the hollow center. On the front side panel of the box is what appears to be a small steel key hole.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="true" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" keycode="musicbox:key" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="hole" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="keyhole"/>
            <Base:SName sname="hole"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="keyholes"/>
            <Base:PName pname="holes"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="key"/>
          <Base:Adjective adjective="small"/>
          <Base:Adjective adjective="steel"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             steel key hole
          </Base:Description>
          <Base:Description type="look">
             A small key hole has been cut into the front panel of this large dark walnut music box. It is outlined in thin strips of criss-crossed steel.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="key" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="inserted"/>
          <Base:Adjective adjective="small"/>
          <Base:Adjective adjective="steel"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             small steel key inserted into the front panel of a music box
          </Base:Description>
          <Base:Description type="examine">
             The twisted steel handle of the small steel key. The handle is sticking out of the front panel of a dark walnut music box. OOC: To tune the music box to play music you must either <acmd tag="command" cmd="turn my musicbox' key">turn the key on the box</acmd> or <acmd tag="command" cmd="tune my musicbox with my musicbox' key"> tune the box with the key.</acmd>
          </Base:Description>
          <Base:Description type="look">
             The twisted steel handle of a small steel key. The handle is sticking out of the front panel of a dark walnut music box.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents>
      <Base:ContentGroup group="music key">
        <Base:ContentItem ix="key" item="OBJ(IronClaw:Props:Manor:Avoirdupois:TeaRoom:MusicBoxKey)" wear="false"/>
      </Base:ContentGroup>
    </Base:InitialContents>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:html:popup_music">
         X[S] \$[Describe(this)] plays some music.\<br/\>
Close this window to stop the music.\<br/\>
\\\<!--\\\<dis-embed src="http://www.odeo.com/flash/audio_player_standard_gray.swf" quality="high" width="300" height="52" allowScriptAccess="always" wmode="transparent" type="application/x-shockwave-flash" flashvars="auto_play=true\\\&valid;_sample_rate=true\\\&external;_url=http://www.free-scores.com/MP3/debussy-claude-clair-lune-16017.mp3" pluginspage="http://www.macromedia.com/go/getflashplayer"/\\\>
\<embed src="http://www.geocities.com/SunsetStrip/Alley/8740/swanlake.mid" hidden="false" border="0" width="310" height="45" autostart="true" autoplay="true" loop="false" volume="75%"/\>
      </Core:Property>
      <Core:Property property="merry:lib:music">
         X[M] if(\$this."trait:playing") \{
    EmitTo(\$actor, Describe(\$this) + " is already playing music.");
    return FALSE;
\}

\$this."trait:playing" = 1;

EmitIn(\$env, "A haunting, triple harmony fills the surrounding area with sedate, almost somberly slow notes. The music box continues to play it's mournful dirge for several minutes before coming, very slowly, to a gradual halt.");
/* Two minute delay */
\$delay(120, FALSE, "ccb2");

EmitIn(\$env, "The end of the song is near as is apparent by the gradual slowing of notes. A few faintly metallic 'tings' are played before the music comes to a complete stop, only to pick up again with a spritely, clipped tune.");
/* Two minute delay */
\$delay(120, FALSE, "8f08");


EmitIn(\$env, "The music box fills the surrounding area with a jaunty tune played in a double round. The notes of two different verses of the same song pleasantly merge together to form a spirited ditty.");
/* Two minute delay */
\$delay(120, FALSE, "2449");


\$this."trait:playing" = nil;

return TRUE;



/* IGNORE THIS!!!! */
/* EmitIn(\$env, Describe(\$actor)+ " slowly winds the key of "+\$actor."base:possessive"+" small wooden music box several times before releasing it.");
\$delay(2, TRUE, "204f");
EmitIn(\$env, "A soft melody emits from the inside of "+Describe(\$this)+", and carries quietly throughout the surrounding area.");
\$listeners = Arr(\$actor);
for(\$i=0;\$i\<sizeof(\$actor."base:environment"."base:inventory");\$i++) \{
 Popup(\$actor."base:environment"."base:inventory"[\$i], this, "popup_music");
\}
*/
      </Core:Property>
      <Core:Property property="merry:react-pre:insert-iob">
         X[M] \$box = \$this;
\$env = \$actor."base:environment";
\$key = NRefOb(\$dob[0])."trait:key";

if(\$this."trait:haskey" == 1)\{
EmitTo(\$actor, "The small wooden music box already possesses a music key.");
return FALSE;
\}

if(\$key == "music")\{
\$this."details:key:snames:key" = 1;
\$this."details:key:pnames:keys" = 1;
\$this."trait:haskey" = 1;
Slay(NRefOb(\$dob[0]));
return TRUE;
\} else \{
EmitTo(\$actor, "You can not insert " +Describe(\$key)+ " into the small key hole of this music box.");
return FALSE;
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:retrieve-what">
         X[M] \$env = \$actor."base:environment";
\$key = NRefDetail(\$target);

if(\$key == "key")\{
\$this."details:key:snames:key" = nil;
\$this."details:key:pnames:keys" = nil;
\$this."trait:haskey" = nil;
\$new = \$\{Ironclaw:Staff:Vic:Props:Music:Key\};
\$newkey = Spawn(\$new);
\$newkey."base:environment" = \$actor;
return TRUE;
\} else \{
EmitTo(\$actor, "The music box does not possess a key.");
return FALSE;
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:tune-dob">
         X[M] \$key = NRefDetail(\$target);

\$haskey = \$this."trait:haskey";
\$env = \$actor."base:environment";

if(!\$haskey)\{
EmitTo(\$actor, "You have to insert the music box key before you and wind it up to play music.");
return FALSE;
\}

if((\$key == "key") \|\| (\$key == "default"))\{
Call(\$this, "music");
return FALSE;
\} else \{
EmitTo(\$actor, "You need to turn the key in order to tune the music box.");
return FALSE;
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:tune-using">
         X[M] \$key = NRefDetail(\$target);

\$haskey = \$this."trait:haskey";
\$env = \$actor."base:environment";

if(!\$haskey)\{
EmitTo(\$actor, "You have to insert the music box key before you and wind it up to play music.");
return FALSE;
\}

if(\$key == "key")\{
Call(\$this, "music");
return FALSE;
\} else \{
EmitTo(\$actor, "You need to turn the key in order to tune the music box.");
return FALSE;
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:turn-dob">
         X[M] \$key = NRefDetail(\$target);

\$haskey = \$this."trait:haskey";
\$env = \$actor."base:environment";

if(!\$haskey)\{
EmitTo(\$actor, "You have to insert the music box key before you and wind it up to play music.");
return FALSE;
\}

if(\$key == "key")\{
Call(\$this, "music");
return FALSE;
\} else \{
EmitTo(\$actor, "You need to turn the key in order to tune the music box.");
return FALSE;
\}
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1214022211, "necate", "E", 1214022302, "necate", "P", 1214022465, "necate", "P", 1214022515, "necate", "P", 1214022522, "necate", "P", 1214022541, "necate", "P", 1214022641, "necate", "E", 1214022720, "necate", "E", 1214022835, "necate", "P", 1214022874, "necate", "E", 1214023117, "necate", "P", 1214023135, "necate", "P", 1214023154, "necate", "P", 1214023179, "necate", "P", 1214023326, "necate", "P", 1214023342, "necate", "P", 1214023414, "necate", "P", 1214023471, "necate", "P", 1214023483, "necate", "P", 1214023940, "necate", "P", 1214023955, "necate", "P", 1214023972, "necate", "P", 1214025089, "necate", "K", 1214025176, "necate", "K", 1214025290, "necate", "K", 1214086941, "necate", "K", 1214086992, "necate", "P", 1214087005, "necate", "P", 1214087306, "necate", "P", 1214087338, "necate", "P", 1214087350, "necate", "E", 1214087357, "necate", "E", 1214087396, "necate", "K", 1227411893, "necate", "E", 1227412396, "necate", "E", 1227412487, "necate", "E", 1234266137, "slurpeeslurp", "E", 1234266202, "slurpeeslurp", "E", 1234266286, "slurpeeslurp", "E", 1234266538, "slurpeeslurp", "E", 1234886473, "slurpeeslurp", "R", 1237848655, "morwenlorelie", "R", 1244706706, "tonyd", "P", 1244706759, "tonyd", "P", 1244706802, "tonyd", "P", 1244706973, "tonyd", "P", 1244707034, "tonyd", "P", 1244707324, "tonyd", "P", 1244708479, "tonyd", "P", 1244711618, "tonyd", "P", 1244711666, "tonyd", "P", 1244711708, "tonyd", "P", 1244719544, "tonyd", "P", 1343024159, "jominey", "E", 1343024271, "jominey", "E", 1343076396, "lidiab", "E", 1344643179, "lidiab", "K" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="trait:smells:lastchecked">
         1214014483
      </Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
