<object clone="/base/obj/thing" owner="tonyd">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Generic:NPC:UrMaleNPC)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="100" verb2="are carrying" verb3="is carrying"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="true">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="partner"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="partners"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="sparring"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             sparring partner
          </Base:Description>
          <Base:Description type="examine">
             A sparring partner, awaiting your pleasure.
          </Base:Description>
          <Base:Description type="look">
             A sparring partner.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="10"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties>
      <Base:InitialProperty property="bilbo:auto:ask">
         "run"
      </Base:InitialProperty>
      <Base:InitialProperty property="bilbo:auto:ask-about">
         "run"
      </Base:InitialProperty>
      <Base:InitialProperty property="bilbo:auto:ask-about:0010">
         "emit.actor \$brief(other) asked about \\"\$request\\" of \$brief(this). :: exit false"
      </Base:InitialProperty>
      <Base:InitialProperty property="bilbo:auto:ask-for">
         "run"
      </Base:InitialProperty>
      <Base:InitialProperty property="bilbo:auto:ask-for:0010">
         "emit.actor \$brief(other) asked for \\"\$request\\" of \$brief(this). :: exit false"
      </Base:InitialProperty>
      <Base:InitialProperty property="bilbo:auto:ask:0010">
         "emit.actor \$brief(other) said nothing to \$brief(this). :: exit false"
      </Base:InitialProperty>
      <Base:InitialProperty property="bilbo:auto:say">
         "run"
      </Base:InitialProperty>
      <Base:InitialProperty property="bilbo:auto:say:0010">
         "emit.actor \$brief(other) said nothing to \$brief(this). :: exit false"
      </Base:InitialProperty>
      <Base:InitialProperty property="bilbo:react:ask">
         "run"
      </Base:InitialProperty>
      <Base:InitialProperty property="bilbo:react:ask:0010">
         "emit.actor \$brief(other) asked \\"\$evokefull\\" of \$brief(this). :: exit false"
      </Base:InitialProperty>
      <Base:InitialProperty property="bilbo:react:say">
         "run"
      </Base:InitialProperty>
      <Base:InitialProperty property="bilbo:react:say:0010">
         "if \$evoke0 = 0 then emit.actor \$brief(other) said nothing to \$brief(this). else emit.actor \$brief(other) said \\"\$evokefull\\" to \$brief(this)."
      </Base:InitialProperty>
      <Base:InitialProperty property="bilbo:react:say:0020">
         "exit false"
      </Base:InitialProperty>
      <Base:InitialProperty property="bilbo:react:talk">
         "run"
      </Base:InitialProperty>
      <Base:InitialProperty property="bilbo:react:talk:0010">
         "if \$evoke0 = 0 then emit.actor \$brief(other) said nothing to \$brief(this). else emit.actor \$brief(other) said \\"\$evokefull\\" to \$brief(this)."
      </Base:InitialProperty>
      <Base:InitialProperty property="bilbo:react:talk:0020">
         "exit false"
      </Base:InitialProperty>
    </Base:InitialProperties>
    <Core:Properties>
      <Core:Property property="merry:lib:describe-attack">
         X[M] /* 
Describes the outcome of an attack
*/
/*variables*/
string punch_desc;
string punch_r_desc;
string block_desc;
string block_r_desc;
string punch_adj;
string block_adj;

/*set up variables*/
punch_desc = "";
punch_r_desc = "";
block_desc = "";
block_r_desc = "";

/*pick some adjectives to describe the attack*/
/*an adjective for the punch*/
switch(\$attacker_attack) \{
    case 1: punch_adj = "hardly "; break;
    case 2: punch_adj = "marginally "; break;
    case 3: punch_adj = "barely "; break;
    case 4: punch_adj = ""; break;
    case 5: punch_adj = "forcefully "; break;
    case 6: punch_adj = "nastilly "; break;
    case 7: punch_adj = "savagely "; break;
    case 8: punch_adj = "viciously "; break;
    case 9: punch_adj = "brutally "; break;
    case 10: punch_adj = "powerfully "; break;
    case 11: punch_adj = "cruelly "; break;
    default: punch_adj = "";
\}

/*an adjective for the block*/
switch((\$defender_block - \$attacker_attack)) \{
    case 0: block_adj = "almost "; break;
    case 1: block_adj = "barely "; break;
    case 2: block_adj = "just "; break;
    case 3: block_adj = ""; break;
    case 4: block_adj = "successfully "; break;
    case 5: block_adj = "easily "; break;
    case 6: block_adj = "trivially "; break;
    default: block_adj = "trivially ";
\}


if (\$attacker_attack \> 0) \{
/*If the attacker landed a punch*/ 
    punch_desc = "You " + punch_adj + "punch " + Describe(\$target); 
    punch_r_desc = Describe ( \$actor ) + " " + punch_adj + "punches " + Describe( \$target );
\} else \{ 
/*the attacker never landed a punch*/
    punch_desc = "You throw a punch at " + Describe(\$target) + ", but miss miserably.";
    punch_r_desc = Describe( \$actor ) + " throws a punch at " + Describe( \$target ) + ", but misses miserably.";
\} 

/*create the block message*/
if (\$attacker_attack != 0)
/*if we actually had to block*/
\{
    if ((\$attacker_attack - \$defender_block) \< 0)
    \{
        block_desc = ", who manages to " + block_adj + "block your attack.";
        block_r_desc = ", who manages to " + block_adj + "block " + Describe( \$actor ) + "'s attack.";
    \} else \{
        block_desc = ".";
        block_r_desc = ".";
    \}
\}

/*display the message*/
if (\$evoke) \{
    EmitTo( \$actor, punch_desc + block_desc + " " + \$evoke); 
    EmitIn( \$room, punch_r_desc + block_r_desc + " " + \$evoke, \$actor ); 
\} else \{
    EmitTo( \$actor, punch_desc + block_desc); 
    EmitIn( \$room, punch_r_desc + block_r_desc, \$actor ); 
\}
return 0;
      </Core:Property>
      <Core:Property property="merry:lib:get_punched">
         X[M] /* 
Starts a fight
*/ 
/*Variables*/ 
\$room = \$actor."base:environment"; 
\$dice1 = 0; \$dice2 = 0; \$dice3 = 0; \$dice4 = 0; \$dice5 = 0; 
 
\$attacker_attack = 0; 
\$defender_block = 0; 
 
/* 
the player punches the guard 
*/ 
Call(this, "reset-roll"); 
Call(this, "make-roll", \$dice1: Get(\$actor, "trait:dexterity"), \$dice2: Get(\$actor, "skill:brawling")); 
\$attacker_attack = Get(this, "dice:roll"); 
 
/* if the player hit */ 
if (\$attacker_attack \> 0) \{ 
    /* the defender will try to block */ 
    Call(this, "reset-roll"); 
    Call(this, "make-roll", \$dice1: Get(this, "trait:speed"), \$dice2: Get(this, "skill:block")); 
    \$defender_block = Get(this, "dice:roll"); 
\} 

Call(this, "describe-attack");
      </Core:Property>
      <Core:Property property="merry:lib:make-roll">
         X[M] /* 
This function will make a dice roll. Depending on the values of \$dice1 to \$dice5 passed, it will roll and record the highest dice roll into dice:roll 
*/ 
/*variables for this function*/ 
int i; 
int *dice; 
int thisRoll; 
int currentHighest; 
 
/*set the dice array to be the values passed*/ 
dice = (\{\$dice1,\$dice2,\$dice3,\$dice4,\$dice5\}); 
currentHighest = Get(this, "dice:roll"); 

/*roll each dice, and record the highest value*/ 
for (i = 0; i \< 5; i ++) \{ 
    thisRoll = random(dice[i]); 
    if (thisRoll \> currentHighest) 
    \{ 
        currentHighest = thisRoll; 
    \} 
\} 
Set(this, "dice:roll", currentHighest);
      </Core:Property>
      <Core:Property property="merry:lib:punch_attacker">
         X[M] /* 
punches an attacker back
*/ 
/*not implemented yet*/
      </Core:Property>
      <Core:Property property="merry:lib:reset-roll">
         X[M] /* 
This function resets the value of dice:roll to be zero 
*/ 
Set(this, "dice:roll", 0);
      </Core:Property>
      <Core:Property property="merry:react-pre:kick-dob">
         X[M] \$room = \$actor."base:environment";         
\$newflower = Spawn(\$\{S7-Generic:drink:glass-martini\});         
\$delay(0.0, FALSE, "2338");   
EmitTo( \$actor, "You kick the " + Describe(\$target) + " and retrive a Martini. Yummy!");   
EmitIn( \$room, Describe ( \$actor ) + " retrieves " + Describe( \$newflower ) + " after kicking " + Describe( \$target ) + ". Looks Yummy!", \$actor );         
\$newflower."base:environment" = \$actor;
      </Core:Property>
      <Core:Property property="merry:react-pre:punch-dob">
         X[M] /* 
Starts a fight 
*/ 
    \$mood = 10; 
    Call(this, "get_punched");
      </Core:Property>
      <Core:Property property="merry:react-pre:touch-dob">
         X[M] /* 
This function will set the guards character abilities 
*/ 
Set(this, "trait:strength", 10); 
Set(this, "trait:dexterity", 6); 
Set(this, "trait:speed", 12); 
Set(this, "skill:brawling", 8); 
Set(this, "skill:block", 8); 
 
/*and for this example, set our values as well*/ 
Set(\$actor, "trait:strength", 6); 
Set(\$actor, "trait:dexterity", 12); 
Set(\$actor, "trait:speed", 7); 
Set(\$actor, "skill:brawling", 1); 
Set(\$actor, "skill:block", 8); 
 
return 1;
      </Core:Property>
      <Core:Property property="new property name">
         "New Property Value"
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1055559538, "tonyd", "E", 1055559670, "tonyd", "E", 1055563409, "tonyd", "E", 1055564527, "tonyd", "E", 1055564577, "tonyd", "E", 1055564675, "tonyd", "E", 1055565227, "tonyd", "E", 1055565451, "tonyd", "E", 1055567524, "tonyd", "E", 1055646344, "tonyd", "E", 1055647696, "tonyd", "E", 1055647813, "tonyd", "E", 1055648075, "tonyd", "E", 1055648460, "tonyd", "E", 1055649292, "tonyd", "E", 1055651454, "tonyd", "E", 1055656388, "tonyd", "E", 1055656847, "tonyd", "X", 1055665395, "tonyd", "E", 1055727921, "tonyd", "E", 1055740553, "tonyd", "E", 1055742163, "tonyd", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes>
      <Notes:Category cat="QA" catstate="Open">
        <Notes:Note ix="966637404" state="Open" user="tony">
           a sparring partner test object for Ironclaw combat
        </Notes:Note>
      </Notes:Category>
    </Notes:Notes>
  </Base:Thing>
</object>
