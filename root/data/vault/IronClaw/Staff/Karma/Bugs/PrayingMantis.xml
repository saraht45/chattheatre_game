<object clone="/base/obj/thing" owner="SkotOS">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Shared:Systems:ItemBuilder:DefaultObject)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="1"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="mantis"/>
            <Base:SName sname="bug"/>
            <Base:SName sname="pet"/>
            <Base:SName sname="insect"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="pets"/>
            <Base:PName pname="mantises"/>
            <Base:PName pname="manids"/>
            <Base:PName pname="bugs"/>
            <Base:PName pname="insects"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="giant"/>
          <Base:Adjective adjective="green"/>
          <Base:Adjective adjective="large"/>
          <Base:Adjective adjective="praying"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             green praying mantis
          </Base:Description>
          <Base:Description type="examine">
             This giant praying mantis has six legs -two spiked grasping forelegs, and four back legs attached to the back part it's body. It has four wings, and large powerful jaws.
          </Base:Description>
          <Base:Description type="look">
             This is a whopping green praying mantis with two spiked forelegs, four back legs, four wings, a very flexible jaw and large compound eyes.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="body" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="body"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="bodies"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="green"/>
          <Base:Adjective adjective="large"/>
          <Base:Adjective adjective="long"/>
          <Base:Adjective adjective="remarkable"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             mantis' body
          </Base:Description>
          <Base:Description type="examine">
             A mantis' remarkable eight inch long body, it has two pairs of concealed wings, two forelegs attached in the front, and four on the bottom part of the body.
          </Base:Description>
          <Base:Description type="look">
             The mantis has a long green body, 8 inches in length.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="eyes" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             mantis' large eyes
          </Base:Description>
          <Base:Description type="look">
             The mantis has two huge compound eyes
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="forelegs" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="foreleg"/>
            <Base:SName sname="leg"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="forelegs"/>
            <Base:PName pname="legs"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="flexible"/>
          <Base:Adjective adjective="grasping"/>
          <Base:Adjective adjective="spiked"/>
          <Base:Adjective adjective="spiny"/>
          <Base:Adjective adjective="strong"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             mantis' forelegs
          </Base:Description>
          <Base:Description type="examine">
             Two grasping, spiked forelegs. They are perfect for grasping prey, and keeping them held securely. They have a few segments making them very flexible, while the remainder of the body remains more or less immobile.
          </Base:Description>
          <Base:Description type="look">
             The mantis' two strong forelegs, covered in spines, they are made up of a few segments and points of articulation making them extremely flexible.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="hindlegs" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="hindleg"/>
            <Base:SName sname="leg"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="hindlegs"/>
            <Base:PName pname="legs"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             mantis' four hindlegs
          </Base:Description>
          <Base:Description type="examine">
             Four back legs, less flexible than the two forelegs.
          </Base:Description>
          <Base:Description type="look">
             The mantis has four back legs, attached to the lower half of the body.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="jaws" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="jaw"/>
            <Base:SName sname="mandible"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="jaws"/>
            <Base:PName pname="mandibles"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="flexible"/>
          <Base:Adjective adjective="large"/>
          <Base:Adjective adjective="powerful"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             mantis' jaws
          </Base:Description>
          <Base:Description type="examine">
             The mantis has large powerful jaws, made of many parts. It has to parts on each side of the head. and serves to hold food in place during chewing.
          </Base:Description>
          <Base:Description type="look">
             A mantis' large flexible jaws, made of many parts.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="wings" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="wing"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="wings"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="concealed"/>
          <Base:Adjective adjective="leathery"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             mantis' wings
          </Base:Description>
          <Base:Description type="examine">
             Four concealed leathery wings, the mantis can flutter them out in case of threat to appear larger.
          </Base:Description>
          <Base:Description type="look">
             Four concealed wings.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="approval:approver">
         "catobelpas"
      </Core:Property>
      <Core:Property property="approval:time">
         1265647391
      </Core:Property>
      <Core:Property property="approval:unapproved">
         1
      </Core:Property>
      <Core:Property property="export:trait:help">
         "Once you name the praying mantis, it will consider you its master. It will respond to pat, pet, poke, frown, kiss, smile, and tickle commands."
      </Core:Property>
      <Core:Property property="merry:react-post:name-dob">
         X[M] if(this."trait:name") \{  
  EmitTo(\$actor, Describe(this)+" already has a name. Sheesh.");  
  return TRUE;  
\}  

if(this."base:environment" != \$actor) \{
    EmitTo(\$actor, "You can only name pets that you are holding.");
    return TRUE;
\}                         

\$name = capitalize(\$evoke[1..strlen(\$evoke)-2]);  
/* If we have any punctuation at the end of the command, remove it */  
if(!((\$name[strlen(\$name)-1] \>= 97) \&\& (\$name[strlen(\$name)-1] \<= 122)) \&\& !((\$name[strlen(\$name)-1] \>= 65) \&\& (\$name[strlen(\$name)-1] \<= 90)))  
  \$name = \$name[0..strlen(\$name)-2];  
/* Only take the first word of the name */  
sscanf(\$name, "%s %*s", \$name);  
  
/* Tell the actor that this was successful */  
EmitTo(\$actor, Describe(this)+" will now respond to "+\$name+" and will consider you its master.");  
  
/* Set the name */  
this."trait:name" = \$name;  
/* set the sname */  
Set(this, "details:default:sname:"+lower_case(\$name), 1);  

this."trait:master" = \$actor;                  
  
  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:pet-dob">
         X[M] if (\$actor == Get(this, "trait:master"))                             
\{                             
Social(this, "dance", nil, nil, "at", \$actor);                             
\}                             
else                             
\{                             
  EmitTo(\$actor, Describe(this) + " spreads it's forearms and seems a little bigger. It then appears to sway and dance, either it's trying to scare you or entertain you.");                             
  EmitIn(\$actor."base:environment", Describe(this) + " spreads it's forearms and seems a little bit bigger It then appears to sway and dance, either it's trying to be scary or just entertaining.", \$actor);                             
\}                             
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:poke-dob">
         X[M] Social(this, "pinch", nil, nil, nil, \$actor);                             
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:drop-what">
         X[M] /* describe the gator falling down */                             
if(NewNRef( \$actor, "right-hand" ))                             
\{                             
  EmitTo(\$actor, Describe(this) + " falls out of your right hand and onto the ground gracelessly.");                             
  EmitIn(\$actor."base:environment", Describe(this) + " falls off " + Describe(\$actor) + "'s hand and lands on the ground gracelessly.", \$actor);                             
  this."base:environment" = \$actor."base:environment";                             
  this."base:proximity" = \$actor;                             
\}                             
else                             
\{                             
  EmitTo(\$actor, Describe(this) + " falls onto the ground.");                             
  EmitIn(\$actor."base:environment", Describe(this) + " falls off " + Describe(\$actor) + "and lands on the ground.", \$actor);                             
this."base:environment" = \$actor."base:environment";                             
this."base:proximity" = \$actor;                             
\}                             
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:take">
         X[M] /* if the actor trying to take the toad is the toads master */                             
if (\$actor == Get(this, "trait:master"))                             
\{                             
 EmitTo(\$actor, Describe(this) + " spreads it's forearms and seems a little bigger. It then appears to sway and dance, either it's trying to scare you or entertain you.");                             
  EmitIn(\$actor."base:environment", Describe(this) + " spreads it's forearms and seems a little bit bigger It then appears to sway and dance, either it's trying to be scary or just entertaining.", \$actor);           
/*set the toad to be next to the actor */                             
  this."base:proximity" = \$actor;                             
/*if the actor has an right arm, make the frog sits onto the hand . Otherwise just sit onto the actor */                             
if(NewNRef( \$actor, "right-hand" ))                             
\{                             
  \$actors_hand= NewNRef( \$actor, "right-hand" );                             
  Social(this, "sit", nil, nil, "on", \$actors_hand);                             
\} else \{                             
  Social(this, "sit", nil, nil, "on", \$actor);                             
\}                             
/* wait one second, so that we can see the "sitting onto arm" action, before we take the toad */                             
  \$delay(1.0, nil, "4a11");                             
/* set the toad to be in the actors inventory */                             
  this."base:environment" = \$actor;                             
  return FALSE;                             
\} else \{                             
/* the actor trying to take the toad isn't the master*/                             
/* set the actor to be next to the toad */                             
  EmitTo(\$actor, "You try to take " + Describe(this) + " and fails miserably.");                             
  EmitIn(\$actor."base:environment", Describe(\$actor) + " tries to take " + Describe(this) + " and fails miserably.");                             
/*set the actor to be next to the toad */                             
  \$actor."base:proximity" = this;                             
  Social(this, "bite", nil, nil, nil, \$actor);                             
  return FALSE;                             
\}
      </Core:Property>
      <Core:Property property="merry:react:frown-iob">
         X[M] \$delay(2, TRUE, "4dd3");              
/* if the actor frowning at the toad is the toads master */                             
if (\$actor == Get(this, "trait:master"))                             
\{              
EmitIn(\$actor."base:environment", Describe(\$this) + " tolerates your frown with cold indifference, or maybe it seems that way due to the lack of an expression.");              
\} else \{              
EmitTo(\$actor, Describe(\$this)+ " tolerates criticism with cold indifference, or maybe it just hides it's emotions like a vulcan.");              
EmitIn(\$actor."base:environment", Describe(\$this)+ " tolerates " +Describe(\$actor)+ " frown and criticism with cold indifference, or maybe it just hides it's emotions like a vulcan.", \$actor);              
\}              
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:kiss-dob">
         X[M] \$delay(2, TRUE, "030f");                   
EmitIn( \$actor."base:environment", "The praying mantis is not amused and pinches you in return for your overbearing affection.");          
Social(this, "pinch", nil, nil, nil, \$actor);
      </Core:Property>
      <Core:Property property="merry:react:smile-iob">
         X[M] \$delay(2, TRUE, "87f8");              
/* if the actor smiling at the toad is the toads master */                             
if (\$actor == Get(this, "trait:master"))                             
\{              
EmitTo(\$actor, Describe(\$this)+ " stares at you with its beady eyes. It's unsure if you are getting ready to eat it or if you want it to pick something from you teeth, either way remaining motionless is the logical thing to do.");              
EmitIn(\$actor."base:environment", Describe(\$this) + " stares at " +Describe(\$actor) + " with it's beady eyes. It's unsure if you are getting ready to eat it or if you want it to pick something from you teeth, either way remaining motionless is the logical thing to do..", \$actor);              
\} else \{              
EmitTo(\$actor, Describe(\$this)+ " stares at you with it's beady eyes. It's unsure if you are getting ready to eat it or if you want it to pick something from you teeth, either way remaining motionless is the logical thing to do.");              
EmitIn(\$actor."base:environment", Describe(\$this)+ " stares at" +Describe(\$actor)+ " with it's beady eyes. It's unsure if you are getting ready to eat it or if you want it to pick something from you teeth, either way remaining motionless is the logical thing to do.", \$actor);              
\}              
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:tickle-dob">
         X[M] \$delay(2, TRUE, "d3d2");              
/* if the actor tickling the toad is the toads master */                             
if (\$actor == Get(this, "trait:master"))                             
\{              
EmitTo(\$actor, Describe(\$this)+ " humors you with a grin but quickly changes it's mind and snaps it's claws at you in warning.");              
EmitIn(\$actor."base:environment", Describe(\$this) + " humors " +Describe(\$actor)+ "  but quickly changes it's mind and snaps it's claws in warning", \$actor);              
\} else \{              
EmitTo(\$actor, Describe(\$this)+ " does not appreciate how you are touching it and tries to pinch you.");              
EmitIn(\$actor."base:environment", Describe(\$this)+ " does not appreciate how " +Describe(\$actor)+ " is touching it and tries to pinch " +Describe(\$actor) + ".", \$actor);              
Social(this, "pinch", nil, nil, nil, \$actor);           
\}              
return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1374988623, "meandmine", "X", 1375234071, "jominey", "E", 1382240843, "jominey", "E", 1384238004, "slurpeeslurp", "E", 1384888497, "meandmine", "X", 1525207540, "jominey", "E", 1525207876, "jominey", "E", 1525208223, "jominey", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
