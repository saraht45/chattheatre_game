<object clone="/base/obj/thing" owner="SkotOS">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Shared:Systems:ItemBuilder:DefaultObject)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="1"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="scorpion"/>
            <Base:SName sname="bug"/>
            <Base:SName sname="arachnid"/>
            <Base:SName sname="arthropod"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="scorpions"/>
            <Base:PName pname="bugs"/>
            <Base:PName pname="arachnids"/>
            <Base:PName pname="arthropods"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="black"/>
          <Base:Adjective adjective="yellow"/>
          <Base:Adjective adjective="yellow and black"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             yellow and black scorpion
          </Base:Description>
          <Base:Description type="examine">
             A black scorpion with a yellow underbelly and legs. It has a long armored body curled up at the end into a segmented tail with a large sinister stinger at the end. It has four pairs of legs to walk, and two extremely large pincers in the front.
          </Base:Description>
          <Base:Description type="look">
             A black and yellow scorpion, with a head, two claws, a tail with stinger, and four pairs of walking legs.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="eyes" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="eye"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="eyes"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             eight eyes
          </Base:Description>
          <Base:Description type="look">
             Two large eyes in the front, with three pairs along the corners of the head.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="head" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="head"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="heads"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="sinister"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">head</Base:Description>
          <Base:Description type="examine">
             The scorpion's head holds ten sinister looking eyes, two larger eyes on the top of the head, and the rest on the front corners of the head. It's chelicerae, or mouth-parts, are very sharp, and used to pull small amounts of food off the prey item for digestion.
          </Base:Description>
          <Base:Description type="look">
             The scorpion's head, with two eyes on top, and three pairs of eyes along the front corners of the head. Below are twitching mouth parts.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="legs" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="true">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="legs"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">legs</Base:Description>
          <Base:Description type="look">
             Two pairs of legs attach on both sides of the body, with two intimidating movable claws fixed in front.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="mouth" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="mouth"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="mouths"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             mouth-parts
          </Base:Description>
          <Base:Description type="look">
             A scorpion's mouth-parts.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="pincers" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="true">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="pincer"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="pincers"/>
            <Base:PName pname="claws"/>
            <Base:PName pname="claw"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="dangerous"/>
          <Base:Adjective adjective="large"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">pincers</Base:Description>
          <Base:Description type="examine">
             Two massive, smooth pincers in front of the scorpion's head. They're larger than half the body of the scorpion.
          </Base:Description>
          <Base:Description type="look">
             The scorpion's two large pincers in the front of it.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="stinger" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="stinger"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="stingers"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="impressive"/>
          <Base:Adjective adjective="sharp"/>
          <Base:Adjective adjective="venom-injecting"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">stinger</Base:Description>
          <Base:Description type="look">
             A long segmented tail curves over the top of the scorpion's body, ending in a venom-injecting barb.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="tail" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="tail"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="tails"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">tail</Base:Description>
          <Base:Description type="look">
             A six-segmented tail looms over the scorpion's body, ending in an impressive venom-injecting stinger.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="approval:approver">
         "catobelpas"
      </Core:Property>
      <Core:Property property="approval:description">
         "A scorpion :P"
      </Core:Property>
      <Core:Property property="approval:time">
         1265647377
      </Core:Property>
      <Core:Property property="approval:unapproved">
         1
      </Core:Property>
      <Core:Property property="export:trait:help">
         "Once you name the scorpion, it will consider you its master. It will respond to pat, pet, poke, frown, kiss, smile, and tickle commands."
      </Core:Property>
      <Core:Property property="export:trait:tip">
         "Once you name the scorpion, it will consider you its master. It will respond to pat, pet, poke, frown, kiss, smile, and tickle commands."
      </Core:Property>
      <Core:Property property="merry:react-post:name-dob">
         X[M] if(this."trait:name") \{  
  EmitTo(\$actor, Describe(this)+" already has a name. Sheesh.");  
  return TRUE;  
\}  

if(this."base:environment" != \$actor) \{
    EmitTo(\$actor, "You can only name pets that you are holding.");
    return TRUE;
\}                         

\$name = capitalize(\$evoke[1..strlen(\$evoke)-2]);  
/* If we have any punctuation at the end of the command, remove it */  
if(!((\$name[strlen(\$name)-1] \>= 97) \&\& (\$name[strlen(\$name)-1] \<= 122)) \&\& !((\$name[strlen(\$name)-1] \>= 65) \&\& (\$name[strlen(\$name)-1] \<= 90)))  
  \$name = \$name[0..strlen(\$name)-2];  
/* Only take the first word of the name */  
sscanf(\$name, "%s %*s", \$name);  
  
/* Tell the actor that this was successful */  
EmitTo(\$actor, Describe(this)+" will now respond to "+\$name+" and will consider you its master.");  
  
/* Set the name */  
this."trait:name" = \$name;  
/* set the sname */  
Set(this, "details:default:sname:"+lower_case(\$name), 1);  

this."trait:master" = \$actor;                  
  
  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:pat-dob">
         X[M] if (\$actor == Get(this, "trait:master"))                          
\{                          
Social(this, "skeeters", nil, nil, "to", \$actor);                                     
\}                          
else                          
\{                    
if(!\$this."trait:master") \{               
\$delay(1.0, TRUE, "93f9");                          
EmitTo(\$actor, "You now own " + Describe(this)+ ".");                          
this."trait:master" = \$actor;               
return FALSE;               
\}               
                     
EmitTo(\$actor, Describe(this) + " snaps it's claws at you a few times.");             
  EmitIn(\$actor."base:environment", Describe(this) + " snaps it's claws a few times.", \$actor);                         
return TRUE;                          
\}
      </Core:Property>
      <Core:Property property="merry:react-post:pet-dob">
         X[M] if (\$actor == Get(this, "trait:master"))                          
\{                          
Social(this, "grin", nil, nil, "at", \$actor);                          
\}                          
else                          
\{                          
  EmitTo(\$actor, Describe(this) + " tilts its head at you.");                          
  EmitIn(\$actor."base:environment", Describe(this) + " tilts its head at " + Describe(\$actor) + ".", \$actor);                          
\}                          
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:poke-dob">
         X[M] Social(this, "pinch", nil, nil, nil, \$actor);                          
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:drop-what">
         X[M] /* describe the gator falling down */                          
if(NewNRef( \$actor, "right-hand" ))                          
\{                          
  EmitTo(\$actor, Describe(this) + " falls out of your right hand and onto the ground gracelessly.");                          
  EmitIn(\$actor."base:environment", Describe(this) + " falls off " + Describe(\$actor) + "'s hand and lands on the ground gracelessly.", \$actor);                          
  this."base:environment" = \$actor."base:environment";                          
  this."base:proximity" = \$actor;                          
\}                          
else                          
\{                          
  EmitTo(\$actor, Describe(this) + " falls onto the ground.");                          
  EmitIn(\$actor."base:environment", Describe(this) + " falls off " + Describe(\$actor) + "and lands on the ground.", \$actor);                          
this."base:environment" = \$actor."base:environment";                          
this."base:proximity" = \$actor;                          
\}                          
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:take">
         X[M] /* if the actor trying to take the toad is the toads master */                          
if (\$actor == Get(this, "trait:master"))                          
\{                          
EmitIn(\$actor."base:environment", Describe(\$this) + " squirms a bit before it settles in " + Describe(\$actor) + " right hand. It is finally used to being picked up.");    
/*set the toad to be next to the actor */                          
  this."base:proximity" = \$actor;                          
/*if the actor has an right arm, make the frog sits onto the hand . Otherwise just sit onto the actor */                          
if(NewNRef( \$actor, "right-hand" ))                          
\{                          
  \$actors_hand= NewNRef( \$actor, "right-hand" );                          
  Social(this, "sit", nil, nil, "on", \$actors_hand);                          
\} else \{                          
  Social(this, "sit", nil, nil, "on", \$actor);                          
\}                          
/* wait one second, so that we can see the "sitting onto arm" action, before we take the toad */                          
  \$delay(1.0, nil, "4a11");                          
/* set the toad to be in the actors inventory */                          
  this."base:environment" = \$actor;                          
  return FALSE;                          
\} else \{                          
/* the actor trying to take the toad isn't the master*/                          
/* set the actor to be next to the toad */                          
  EmitTo(\$actor, "You try to take " + Describe(this) + " and fails miserably.");                          
  EmitIn(\$actor."base:environment", Describe(\$actor) + " tries to take " + Describe(this) + " and fails miserably.");                          
/*set the actor to be next to the toad */                          
  \$actor."base:proximity" = this;                          
  Social(this, "bite", nil, nil, nil, \$actor);                          
  return FALSE;                          
\}
      </Core:Property>
      <Core:Property property="merry:react:frown-iob">
         X[M] \$delay(2, TRUE, "4dd3");           
/* if the actor frowning at the toad is the toads master */                          
if (\$actor == Get(this, "trait:master"))                          
\{           
EmitIn(\$actor."base:environment", Describe(\$this) + " immediately questions why it has to put up with you and is probably plotting an escape from it's current situation.");           
\} else \{           
EmitTo(\$actor, Describe(\$this)+ " could not give a fish's butt what you think of it.");           
EmitIn(\$actor."base:environment", Describe(\$this)+ " could not give a fish's butt what " +Describe(\$actor)+ " thinks of it.", \$actor);           
\}           
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:kiss-dob">
         X[M] \$delay(2, TRUE, "030f");                
EmitIn( \$actor."base:environment", "The scorpion is not amused and stings you in return for your overbearing affection.");       
Social(this, "sting", nil, nil, nil, \$actor);
      </Core:Property>
      <Core:Property property="merry:react:smile-iob">
         X[M] \$delay(2, TRUE, "87f8");           
/* if the actor smiling at the toad is the toads master */                          
if (\$actor == Get(this, "trait:master"))                          
\{           
EmitTo(\$actor, Describe(\$this)+ " smiles menacingly in your direction.");           
EmitIn(\$actor."base:environment", Describe(\$this) + " smiles menacingly at " +Describe(\$actor) + ".", \$actor);           
\} else \{           
EmitTo(\$actor, Describe(\$this)+ " ignores you completely.");           
EmitIn(\$actor."base:environment", Describe(\$this)+ " ignores " +Describe(\$actor)+ " completely.", \$actor);           
\}           
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:tickle-dob">
         X[M] \$delay(2, TRUE, "d3d2");           
/* if the actor tickling the toad is the toads master */                          
if (\$actor == Get(this, "trait:master"))                          
\{           
EmitTo(\$actor, Describe(\$this)+ " humors you with a grin but has no idea what is going on or how to react.");           
EmitIn(\$actor."base:environment", Describe(\$this) + " humors " +Describe(\$actor)+ " with a grin but has no idea what is going on or how to react.", \$actor);           
\} else \{           
EmitTo(\$actor, Describe(\$this)+ " does not appreciate how you are touching it and tries to sting you.");           
EmitIn(\$actor."base:environment", Describe(\$this)+ " does not appreciate how " +Describe(\$actor)+ " is touching it and tries to sting " +Describe(\$actor) + ".", \$actor);           
Social(this, "sting", nil, nil, nil, \$actor);        
\}           
return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1374988643, "meandmine", "X", 1525207969, "jominey", "E", 1525208109, "jominey", "E", 1525208137, "jominey", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
