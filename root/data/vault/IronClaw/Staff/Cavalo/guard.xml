<object clone="/base/obj/thing" owner="mqqwa">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Ironclaw:Lib:Combat:Cards:NPCs:UrGuard)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="1"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="badger"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="badgers"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="portly"/>
          <Base:Adjective adjective="tiny"/>
        </Base:Adjectives>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="facialhair" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="facialhair"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="fur" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="brown"/>
          <Base:Adjective adjective="scraggly"/>
          <Base:Adjective adjective="short"/>
        </Base:Adjectives>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="hair" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="ponytail"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="ash brown"/>
          <Base:Adjective adjective="ponytail"/>
          <Base:Adjective adjective="snarled"/>
          <Base:Adjective adjective="trimmed"/>
        </Base:Adjectives>
        <Base:Descriptions/>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="appearance:build">
         "portly"
      </Core:Property>
      <Core:Property property="appearance:clawapp">
         "flat"
      </Core:Property>
      <Core:Property property="appearance:clawlength">
         "long"
      </Core:Property>
      <Core:Property property="appearance:earshape">
         "dainty"
      </Core:Property>
      <Core:Property property="appearance:eyecolor">
         "burnt sienna"
      </Core:Property>
      <Core:Property property="appearance:eyeshape">
         "ordinary"
      </Core:Property>
      <Core:Property property="appearance:feet">
         "gnarled"
      </Core:Property>
      <Core:Property property="appearance:furcolor">
         "brown"
      </Core:Property>
      <Core:Property property="appearance:furlength">
         "short"
      </Core:Property>
      <Core:Property property="appearance:furtexture">
         "scraggly"
      </Core:Property>
      <Core:Property property="appearance:haircolor">
         "ash brown"
      </Core:Property>
      <Core:Property property="appearance:hairlength">
         "trimmed"
      </Core:Property>
      <Core:Property property="appearance:hairstyle">
         "ponytail"
      </Core:Property>
      <Core:Property property="appearance:hairtype">
         "snarled"
      </Core:Property>
      <Core:Property property="appearance:hands">
         "rough"
      </Core:Property>
      <Core:Property property="appearance:height">
         "tiny"
      </Core:Property>
      <Core:Property property="appearance:lipshape">
         "sensual"
      </Core:Property>
      <Core:Property property="appearance:mouthshape">
         "wide"
      </Core:Property>
      <Core:Property property="appearance:muzzleshape">
         "tiny"
      </Core:Property>
      <Core:Property property="appearance:noseshape">
         "snub"
      </Core:Property>
      <Core:Property property="appearance:taillength">
         "short"
      </Core:Property>
      <Core:Property property="appearance:tailtexture">
         "smooth"
      </Core:Property>
      <Core:Property property="base:combat:weapon">
         \<[Allegory:Props:Weapons:Pole:Medium:Spear]#60875\>
      </Core:Property>
      <Core:Property property="base:initialcontents">
         (\{ \<[IronClaw:Props:Clothing:InProgress:GuardUniform]#58029\> \})
      </Core:Property>
      <Core:Property property="combat:actions">275</Core:Property>
      <Core:Property property="combat:actions:current">
         275
      </Core:Property>
      <Core:Property property="combat:damage">0</Core:Property>
      <Core:Property property="combat:injuries">
         ([  ])
      </Core:Property>
      <Core:Property property="combat:weapon">
         \<[Allegory:Props:Weapons:Pole:Medium:Spear]#60875\>
      </Core:Property>
      <Core:Property property="export:trait:examine">
         "This guard is a tiny portly badger, with short, scraggly brown fur, and trimmed snarled ash brown hair. Burnt sienna eyes are set above a snub nose and a wide mouth, complete with sensual lips. Long flat nails, on rough hands, and gnarled feet are also visible. You also note her dainty  ears."
      </Core:Property>
      <Core:Property property="export:trait:look">
         "This guard is a tiny portly badger, with short, scraggly brown fur, and trimmed snarled ash brown hair."
      </Core:Property>
      <Core:Property property="guarding:access:allowed:guilds">
         (\{ \<Allegory:Guilds:italy\>, \<Allegory:Guilds:scotland\>, \<Allegory:Guilds:germany\>, \<Allegory:Guilds:france\>, \<Allegory:Guilds:cityguard\>, \<Allegory:Guilds:church\>, nil \})
      </Core:Property>
      <Core:Property property="guarding:access:allowed:individuals">
         ([ "caitriona":"Baroness Kenina", "cullan":"Baroness Kenina", "dazrene":"Brumble", "gina":"Viscountess Alayna", "lucius":"Viscountess Alayna", "twyrch":"Baroness Kenina" ])
      </Core:Property>
      <Core:Property property="guarding:access:blockall">
         1
      </Core:Property>
      <Core:Property property="guarding:access:denied:individuals">
         ([ "diego":"Joshua", "meepers":"Baroness Kenina", "shad":"Joshua", "vulpes":"Leah" ])
      </Core:Property>
      <Core:Property property="guarding:access:listkeepers">
         (\{ \<Chatters:AE:az:azrael\>, \<Chatters:IC:jo:joshua\>, \<Chatters:IC:me:mercutio\>, nil, nil, \<Chatters:IC:fa:faye\>, \<Chatters:IC:le:leah\>, \<Chatters:IC:br:brumble\>, \<Chatters:IC:ca:cavalo\>, \<Chatters:IC:qu:quo\> \})
      </Core:Property>
      <Core:Property property="merry:react-post:evoke-dob%guarding">
         X[M] /* are we able to give instructions */  
if(!member(\$actor, Arr(\$this."guarding:access:listkeepers"))) return TRUE;  
  
/* allow questions and instructions about blocking the exit */  
\$input = \$evoke;  
\$input = \$input[1..strlen(\$input)-3];  
\$input = explode(\$input," ");  
  
if(sizeof(\$input) \> 1) \{  
  \$character = lower_case(\$input[1]);  
\} else \{  
  \$character = nil;  
\}  
  
switch(\$input[0]) \{  
  case "allow":  
    if(\$character) \{  
      \$this."guarding:access:allowed:individuals"[\$character] = Describe(\$actor);  
      \$this."guarding:access:denied:individuals"[\$character] = nil;  
      EmitTo(\$actor, Describe(\$this)+" tells you that they will allow "+\$character+" to pass.");  
    \} else \{  
      EmitTo(\$actor, "Format: allow NAME");  
    \}  
    break;  
  case "remove":  
    if(\$character) \{  
      \$this."guarding:access:allowed:individuals"[\$character] = nil;  
      \$this."guarding:access:denied:individuals"[\$character] = nil;  
      EmitTo(\$actor, Describe(\$this)+" tells you that they will not treat "+\$character+" any differently to other people.");  
    \} else \{  
      EmitTo(\$actor, "Format: remove NAME");  
    \}  
    break;  
  case "block":  
  case "deny":  
  case "bar":  
    if(\$character) \{  
      \$this."guarding:access:denied:individuals"[\$character] = Describe(\$actor);  
      \$this."guarding:access:allowed:individuals"[\$character] = nil;  
      EmitTo(\$actor, Describe(\$this)+" tells you that they will not allow "+\$character+" to pass.");  
    \} else \{  
      EmitTo(\$actor, "Format: block NAME");  
    \}  
    break;  
  case "ask":  
    if(\$this."guarding:access:allowed:individuals"[\$character]) \{  
      EmitTo(\$actor, Describe(\$this)+" tells you that "+\$character+" is allowed through by order of "+\$this."guarding:access:allowed:individuals"[\$character]+".");  
    \} else if (\$this."guarding:access:denied:individuals"[\$character]) \{  
      EmitTo(\$actor, Describe(\$this)+" tells you that "+\$character+" is barred through by order of "+\$this."guarding:access:denied:individuals"[\$character]+".");  
    \} else \{  
      EmitTo(\$actor, Describe(\$this)+" tells you that there are no special orders about "+\$character+".");  
    \}  
    break;  
  case "list":  
    EmitTo(\$actor, Describe(\$this)+" lists who is allowed through:");  
    if(sizeof(map_indices(\$this."guarding:access:allowed:individuals"))) \{  
      EmitTo(\$actor, implode(map_indices(\$this."guarding:access:allowed:individuals"), " "));  
    \} else \{  
      EmitTo(\$actor, "No specific individuals.");  
    \}  
    if(sizeof(\$this."guarding:access:allowed:guilds")) \{  
      \$tmp = (\{ \});  
      for(\$i=0;\$i\<sizeof(\$this."guarding:access:allowed:guilds");\$i++) \{  
        \$tmp += (\{ \$this."guarding:access:allowed:guilds"[\$i].shortname \});  
      \}  
      EmitTo(\$actor, "Guilds of "+implode(\$tmp, " "));  
    \} else \{  
      EmitTo(\$actor, "No specific guilds.");  
    \}  
  
    EmitTo(\$actor, Describe(\$this)+" lists who is banned from passing:");  
    if(sizeof(map_indices(\$this."guarding:access:denied:individuals"))) \{  
      EmitTo(\$actor, implode(map_indices(\$this."guarding:access:denied:individuals"), " "));  
    \} else \{  
      EmitTo(\$actor, "No specific individuals.");  
    \}  
    if(sizeof(\$this."guarding:access:denied:guilds")) \{  
      \$tmp = (\{ \});  
      for(\$i=0;\$i\<sizeof(\$this."guarding:access:denied:guilds");\$i++) \{  
        \$tmp += (\{ \$this."guarding:access:denied:guilds"[\$i].shortname \});  
      \}  
      EmitTo(\$actor, "Guilds of "+implode(\$tmp, " "));  
    \} else \{  
      EmitTo(\$actor, "No specific guilds.");  
    \}  
    break;  
  default:  
    EmitTo(\$actor, "[OOC: Valid instructions for the guard are: \\"allow\\", \\"block\\", \\"remove\\", \\"ask\\" and \\"list\\" - all followed by the name of the character you are asking about. Except list, of course. That just lists them.]");  
    break;  
\}  
  
  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:evoke-iob%guarding">
         X[M] /* are we able to give instructions */  
if(!member(\$actor, Arr(\$this."guarding:access:listkeepers"))) return TRUE;  
  
/* allow questions and instructions about blocking the exit */  
\$input = \$evoke;  
\$input = \$input[1..strlen(\$input)-3];  
\$input = explode(\$input," ");  
  
if(sizeof(\$input) \> 1) \{  
  \$character = lower_case(\$input[1]);  
\} else \{  
  \$character = nil;  
\}  
  
switch(\$input[0]) \{  
  case "allow":  
    if(\$character) \{  
      \$this."guarding:access:allowed:individuals"[\$character] = Describe(\$actor);  
      \$this."guarding:access:denied:individuals"[\$character] = nil;  
      EmitTo(\$actor, Describe(\$this)+" tells you that they will allow "+\$character+" to pass.");  
    \} else \{  
      EmitTo(\$actor, "Format: allow NAME");  
    \}  
    break;  
  case "remove":  
    if(\$character) \{  
      \$this."guarding:access:allowed:individuals"[\$character] = nil;  
      \$this."guarding:access:denied:individuals"[\$character] = nil;  
      EmitTo(\$actor, Describe(\$this)+" tells you that they will not treat "+\$character+" any differently to other people.");  
    \} else \{  
      EmitTo(\$actor, "Format: remove NAME");  
    \}  
    break;  
  case "block":  
  case "deny":  
  case "bar":  
    if(\$character) \{  
      \$this."guarding:access:denied:individuals"[\$character] = Describe(\$actor);  
      \$this."guarding:access:allowed:individuals"[\$character] = nil;  
      EmitTo(\$actor, Describe(\$this)+" tells you that they will not allow "+\$character+" to pass.");  
    \} else \{  
      EmitTo(\$actor, "Format: block NAME");  
    \}  
    break;  
  case "ask":  
    if(\$this."guarding:access:allowed:individuals"[\$character]) \{  
      EmitTo(\$actor, Describe(\$this)+" tells you that "+\$character+" is allowed through by order of "+\$this."guarding:access:allowed:individuals"[\$character]+".");  
    \} else if (\$this."guarding:access:denied:individuals"[\$character]) \{  
      EmitTo(\$actor, Describe(\$this)+" tells you that "+\$character+" is barred through by order of "+\$this."guarding:access:denied:individuals"[\$character]+".");  
    \} else \{  
      EmitTo(\$actor, Describe(\$this)+" tells you that there are no special orders about "+\$character+".");  
    \}  
    break;  
  case "list":  
    EmitTo(\$actor, Describe(\$this)+" lists who is allowed through:");  
    if(sizeof(map_indices(\$this."guarding:access:allowed:individuals"))) \{  
      EmitTo(\$actor, implode(map_indices(\$this."guarding:access:allowed:individuals"), " "));  
    \} else \{  
      EmitTo(\$actor, "No specific individuals.");  
    \}  
    if(sizeof(\$this."guarding:access:allowed:guilds")) \{  
      \$tmp = (\{ \});  
      for(\$i=0;\$i\<sizeof(\$this."guarding:access:allowed:guilds");\$i++) \{  
        \$tmp += (\{ \$this."guarding:access:allowed:guilds"[\$i].shortname \});  
      \}  
      EmitTo(\$actor, "Guilds of "+implode(\$tmp, " "));  
    \} else \{  
      EmitTo(\$actor, "No specific guilds.");  
    \}  
  
    EmitTo(\$actor, Describe(\$this)+" lists who is banned from passing:");  
    if(sizeof(map_indices(\$this."guarding:access:denied:individuals"))) \{  
      EmitTo(\$actor, implode(map_indices(\$this."guarding:access:denied:individuals"), " "));  
    \} else \{  
      EmitTo(\$actor, "No specific individuals.");  
    \}  
    if(sizeof(\$this."guarding:access:denied:guilds")) \{  
      \$tmp = (\{ \});  
      for(\$i=0;\$i\<sizeof(\$this."guarding:access:denied:guilds");\$i++) \{  
        \$tmp += (\{ \$this."guarding:access:denied:guilds"[\$i].shortname \});  
      \}  
      EmitTo(\$actor, "Guilds of "+implode(\$tmp, " "));  
    \} else \{  
      EmitTo(\$actor, "No specific guilds.");  
    \}  
    break;  
  default:  
    EmitTo(\$actor, "[OOC: Valid instructions for the guard are: \\"allow\\", \\"block\\", \\"remove\\", \\"ask\\" and \\"list\\" - all followed by the name of the character you are asking about. Except list, of course. That just lists them.]");  
    break;  
\}  
  
  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:witness:enter-into">
         X[M] if(!\$this."base:proximity" \|\| NRefDetail(\$target) != NRefDetail(\$this."base:proximity"))  
  return TRUE;  
  
/* are we blocking all, or allowing all? */  
if(\$this."guarding:access:blockall" \&\& !this."guarding:access:denied:individuals"[\$actor."skotos:charname"]) \{  
  /* is the actor a member of the right guild? */  
  if(\$actor.guild \&\& member(\$actor.guild, Arr(\$this."guarding:access:allowed:guilds")))  
    return TRUE;  
  
  if( this."guarding:access:allowed:individuals"[\$actor."skotos:charname"] )  
    return TRUE;  
\} else \{  
  /* is the actor allowed through? */  
  if( this."guarding:access:allowed:individuals"[\$actor."skotos:charname"] )  
    return TRUE;  
  
  /* is the actor a member of the right guild? */  
  if(!(\$actor.guild \&\& member(\$actor.guild, Arr(\$this."guarding:access:denied:guilds"))  
  \|\|  
  this."guarding:access:denied:individuals"[\$actor."skotos:charname"] ))  
    return TRUE;  
\}  
  
/* are they following someone through? */  
if(\$actor.follow \&\& NRefOb(\$dest) == \$actor.follow."base:environment")  
  return TRUE;  
  
EmitTo(\$actor, "A guard steps in front you." );  
EmitIn(\$actor."base:environment", "An guard steps in front of "+Describe(\$actor)+".", \$actor );  
\$delay(1, FALSE, "a173");  
EmitIn(\$actor."base:environment", "An guard grunts, \\"I'm sorry but you're not allowed to go any further.\\"" );
      </Core:Property>
      <Core:Property property="misc:lastdropped">
         "1176548993 StoryCoder Cavalo[mqqwa]"
      </Core:Property>
      <Core:Property property="npc:resource-control:live_time">
         1177239417
      </Core:Property>
      <Core:Property property="npc:status:spawndate">
         1176548990
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1176550406, "mqqwa", "E", 1176550709, "mqqwa", "E", 1176550791, "mqqwa", "E", 1176550912, "mqqwa", "P", 1176550924, "mqqwa", "P", 1176550966, "mqqwa", "P", 1176551088, "mqqwa", "P", 1176551128, "mqqwa", "P", 1176551138, "mqqwa", "P", 1176551199, "mqqwa", "P", 1176551294, "mqqwa", "P", 1176551341, "mqqwa", "P", 1176551360, "tonyd", "P", 1176551800, "mqqwa", "P", 1176551867, "mqqwa", "P", 1176552003, "tonyd", "P", 1176552391, "tonyd", "P", 1176552457, "tonyd", "P", 1176552520, "tonyd", "P", 1176552538, "tonyd", "P", 1176553396, "mqqwa", "E", 1176553518, "mqqwa", "E", 1176553552, "mqqwa", "P", 1176553601, "mqqwa", "P", 1176553792, "tonyd", "P", 1176553930, "mqqwa", "P", 1176554000, "tonyd", "P", 1176554265, "mqqwa", "P", 1176554548, "mqqwa", "E", 1176554575, "mqqwa", "P", 1176554692, "tonyd", "P", 1176554899, "tonyd", "P", 1176554936, "tonyd", "P", 1176555051, "tonyd", "P", 1176555156, "tonyd", "P", 1176555171, "tonyd", "P", 1176555239, "tonyd", "P", 1176555356, "tonyd", "P", 1176556157, "mqqwa", "P", 1176556360, "mqqwa", "P", 1176556624, "mqqwa", "P", 1176556981, "mqqwa", "P", 1176557048, "mqqwa", "P", 1176557063, "mqqwa", "P", 1176557124, "mqqwa", "P", 1176557153, "mqqwa", "P", 1176557238, "mqqwa", "P", 1176557302, "mqqwa", "P", 1176557492, "mqqwa", "P", 1176557600, "mqqwa", "P", 1176557732, "tonyd", "P", 1176557792, "tonyd", "S", 1176557885, "tonyd", "P", 1176557929, "tonyd", "P", 1176558059, "tonyd", "P", 1176558076, "tonyd", "P", 1176558214, "tonyd", "P", 1176558284, "tonyd", "P", 1176558376, "tonyd", "P", 1176558448, "tonyd", "P", 1176558467, "tonyd", "P", 1176558537, "tonyd", "P", 1176558674, "tonyd", "P", 1176558966, "tonyd", "P", 1176558972, "tonyd", "P", 1176559031, "tonyd", "P", 1176573812, "tonyd", "P", 1176573903, "tonyd", "P", 1176573919, "tonyd", "P", 1176577870, "tonyd", "P", 1176579512, "tonyd", "P", 1176582995, "tonyd", "P", 1176596587, "mqqwa", "P", 1176633143, "tonyd", "P", 1176633294, "tonyd", "P", 1176633534, "tonyd", "P", 1176633584, "tonyd", "P", 1176633607, "tonyd", "P", 1176633703, "tonyd", "P", 1176634021, "tonyd", "P", 1176634341, "tonyd", "P", 1176634411, "tonyd", "P", 1176634431, "tonyd", "P", 1176634466, "tonyd", "P", 1176634530, "tonyd", "P", 1176634538, "tonyd", "P", 1176634588, "tonyd", "P", 1176634626, "tonyd", "P", 1176634671, "tonyd", "P", 1176634702, "tonyd", "P", 1176634725, "tonyd", "P", 1176634750, "tonyd", "P", 1176635053, "tonyd", "P", 1176635106, "tonyd", "P", 1176819274, "tonyd", "E", 1177189626, "mqqwa", "P", 1177240534, "barbra18", "X", 1177240576, "barbra18", "X", 1177240590, "mqqwa", "P" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="spawn:creator">
         (\{ "mqqwa", 1176548990 \})
      </Core:Property>
      <Core:Property property="student:learningpoints">
         31
      </Core:Property>
      <Core:Property property="student:todayspoints">
         1
      </Core:Property>
      <Core:Property property="trait:animal">
         "badger"
      </Core:Property>
      <Core:Property property="trait:animaltype">
         "rodent"
      </Core:Property>
      <Core:Property property="trait:examine">
         "This guard is a tiny portly badger, with short, scraggly brown fur, and trimmed snarled ash brown hair. Burnt sienna eyes are set above a snub nose and a wide mouth, complete with sensual lips. Long flat nails, on rough hands, and gnarled feet are also visible. You also note her dainty  ears."
      </Core:Property>
      <Core:Property property="trait:look">
         "This guard is a tiny portly badger, with short, scraggly brown fur, and trimmed snarled ash brown hair."
      </Core:Property>
      <Core:Property property="trait:smells">
         ([ "cat":(\{ 1, 1176581492 \}), "spearmint":(\{ 1, 1176581492 \}) ])
      </Core:Property>
      <Core:Property property="trait:smells:lastchecked">
         1176558287
      </Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
