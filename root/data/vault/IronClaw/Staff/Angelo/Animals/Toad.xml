<object clone="/base/obj/thing" owner="tunk_bodin">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="0.05" density="10"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0" verb2="contain" verb3="contains"/>
    <Base:Misc gender="female" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="false" under="false" on="true" inside="false" near="true" over="false" behind="false" before="false" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="toad"/>
            <Base:SName sname="amphibian"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="toads"/>
            <Base:PName pname="amphibians"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="green"/>
          <Base:Adjective adjective="slimy"/>
          <Base:Adjective adjective="warty"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             green toad
          </Base:Description>
          <Base:Description type="examine">
             Here is a green toad covered in warts and slime. His tongue frequently darts into sight.
          </Base:Description>
          <Base:Description type="glance">
             A slimy green toad with warts.
          </Base:Description>
          <Base:Description type="look">
             Here is a slimy green toad with multiple warts.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="head" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="head"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="heads"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="green"/>
          <Base:Adjective adjective="toad"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             green toad's head
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="tongue" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="tongue"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="tongues"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="green"/>
          <Base:Adjective adjective="long"/>
          <Base:Adjective adjective="slimy"/>
          <Base:Adjective adjective="toads"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             green toads long slimy tongue
          </Base:Description>
          <Base:Description type="taste">
             This toad's tongue tastes like raspberry cheesecake. Yummy!
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="merry:react-post:pat-dob">
         X[M] if (\$actor == Get(this, "trait:master"))                  
\{                  
Social(this, "hop", nil, nil, "to", \$actor);                             
\}                  
else                  
\{            
if(!\$this."trait:master") \{       
\$delay(1.0, TRUE, "93f9");                  
EmitTo(\$actor, "You now own " + Describe(this)+ ".");                  
this."trait:master" = \$actor;       
return FALSE;       
\}       
             
EmitTo(\$actor, Describe(this) + " darts its long, slimy tongue out a few times.");     
  EmitIn(\$actor."base:environment", Describe(this) + " darts its long, slimy tongue out a few times.", \$actor);                 
return TRUE;                  
\}
      </Core:Property>
      <Core:Property property="merry:react-post:pet-dob">
         X[M] if (\$actor == Get(this, "trait:master"))                  
\{                  
Social(this, "grin", nil, nil, "at", \$actor);                  
\}                  
else                  
\{                  
  EmitTo(\$actor, Describe(this) + " tilts its head at you.");                  
  EmitIn(\$actor."base:environment", Describe(this) + " tilts its head at " + Describe(\$actor) + ".", \$actor);                  
\}                  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:poke-dob">
         X[M] Social(this, "lick", nil, nil, nil, \$actor);                  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:drop-what">
         X[M] /* describe the toad hopping down */                  
if(NewNRef( \$actor, "right-arm" ))                  
\{                  
  EmitTo(\$actor, Describe(this) + " hops off your right arm and onto the ground.");                  
  EmitIn(\$actor."base:environment", Describe(this) + " hops off " + Describe(\$actor) + "'s right arm and lands on the ground.", \$actor);                  
  this."base:environment" = \$actor."base:environment";                  
  this."base:proximity" = \$actor;                  
\}                  
else                  
\{                  
  EmitTo(\$actor, Describe(this) + " hops onto the ground.");                  
  EmitIn(\$actor."base:environment", Describe(this) + " hops off " + Describe(\$actor) + "and lands on the ground.", \$actor);                  
this."base:environment" = \$actor."base:environment";                  
this."base:proximity" = \$actor;                  
\}                  
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:take">
         X[M] /* if the actor trying to take the toad is the toads master */                  
if (\$actor == Get(this, "trait:master"))                  
\{                  
/*set the toad to be next to the actor */                  
  this."base:proximity" = \$actor;                  
/*if the actor has an right arm, make the toad hop onto the arm. Otherwise just hop onto the actor */                  
if(NewNRef( \$actor, "right-arm" ))                  
\{                  
  \$actors_arm = NewNRef( \$actor, "right-arm" );                  
  Social(this, "hop", nil, nil, "onto", \$actors_arm);                  
\} else \{                  
  Social(this, "hop", nil, nil, "onto", \$actor);                  
\}                  
/* wait one second, so that we can see the "hopping onto arm" action, before we take the toad */                  
  \$delay(1.0, nil, "4a11");                  
/* set the toad to be in the actors inventory */                  
  this."base:environment" = \$actor;                  
  return FALSE;                  
\} else \{                  
/* the actor trying to take the toad isn't the master*/                  
/* set the actor to be next to the toad */                  
  EmitTo(\$actor, "You try to take " + Describe(this) + " and fails miserably.");                  
  EmitIn(\$actor."base:environment", Describe(\$actor) + " tries to take " + Describe(this) + " and fails miserably.");                  
/*set the actor to be next to the toad */                  
  \$actor."base:proximity" = this;                  
  Social(this, "lick", nil, nil, nil, \$actor);                  
  return FALSE;                  
\}
      </Core:Property>
      <Core:Property property="merry:react:bow-iob">
         X[M] \$delay(2, TRUE, "cd70");   
/* if the actor bowing at the toad is the toads master */                  
if (\$actor == Get(this, "trait:master"))                  
\{   
EmitTo(\$actor, Describe(\$this)+ " puffs up importantly while giving you a knowing look.");   
EmitIn(\$actor."base:environment", Describe(\$this) + " puffs up importantly while giving " +Describe(\$actor) + " a knowing look.", \$actor);   
\} else \{   
EmitTo(\$actor, Describe(\$this)+ " grants you a pompous sneer; a glimmer of a golden crown almost appeared over its head.");   
EmitIn(\$actor."base:environment", Describe(\$this)+ " grants " +Describe(\$actor)+ " a pompous sneer; a glimmer of a golden crown almost appeared over its head.", \$actor);   
\}   
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:frown-iob">
         X[M] \$delay(2, TRUE, "4dd3");   
/* if the actor frowning at the toad is the toads master */                  
if (\$actor == Get(this, "trait:master"))                  
\{   
EmitIn(\$actor."base:environment", Describe(\$this) + " immediately regrets all of its sins while its tiny mind grapples with the lack of confessionals for amphibians.");   
\} else \{   
EmitTo(\$actor, Describe(\$this)+ " could give a fish's butt what you think of it.");   
EmitIn(\$actor."base:environment", Describe(\$this)+ " could give a fish's butt what " +Describe(\$actor)+ " thinks of it.", \$actor);   
\}   
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:kiss-dob">
         X[M] \$delay(2, TRUE, "030f");        
EmitIn( \$actor."base:environment", "The toad tries to become a handsome prince, its head and body bubble and grow before settling back into a toad." );
      </Core:Property>
      <Core:Property property="merry:react:smile-iob">
         X[M] \$delay(2, TRUE, "87f8");   
/* if the actor smiling at the toad is the toads master */                  
if (\$actor == Get(this, "trait:master"))                  
\{   
EmitTo(\$actor, Describe(\$this)+ " smiles toothlessly in your direction.");   
EmitIn(\$actor."base:environment", Describe(\$this) + " smiles toothlessly at " +Describe(\$actor) + ".", \$actor);   
\} else \{   
EmitTo(\$actor, Describe(\$this)+ " ignores you completely.");   
EmitIn(\$actor."base:environment", Describe(\$this)+ " ignores " +Describe(\$actor)+ " completely.", \$actor);   
\}   
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:tickle-dob">
         X[M] \$delay(2, TRUE, "d3d2");   
/* if the actor tickling the toad is the toads master */                  
if (\$actor == Get(this, "trait:master"))                  
\{   
EmitTo(\$actor, Describe(\$this)+ " humors you with a grin but has no idea what is going on or how to react.");   
EmitIn(\$actor."base:environment", Describe(\$this) + " humors " +Describe(\$actor)+ " with a grin but has no idea what is going on or how to react.", \$actor);   
\} else \{   
EmitTo(\$actor, Describe(\$this)+ " does not appreciate how you are touching it.");   
EmitIn(\$actor."base:environment", Describe(\$this)+ " does not appreciate how " +Describe(\$actor)+ " is touching it.", \$actor);   
\}   
return TRUE;
      </Core:Property>
      <Core:Property property="misc:lastdropped">
         "1096529217 Manny[tunk_bodin]"
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1287330111, "tunk_bodin", "X", 1287330235, "tunk_bodin", "X", 1287330400, "tunk_bodin", "X" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
