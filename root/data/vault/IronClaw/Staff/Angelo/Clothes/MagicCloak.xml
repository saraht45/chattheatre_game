<object clone="/base/obj/thing" owner="tunk_bodin">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Allegory:Props:Clothing:UrClothing)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="1"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="cloak"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="cloaks"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="hooded"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             hooded $(this.trait:color) $(this.trait:material) cloak
          </Base:Description>
          <Base:Description type="examine">
             A hooded $(this.trait:color) $(this.trait:material) cloak. It hangs loosely from neck to ankles. {? equal | $(this.hood:stance) | raised |. The hood is raised and covering the wearer's head.| The hood hangs freely against the upper back.}
          </Base:Description>
          <Base:Description type="look">
             A hooded $(this.trait:color) $(this.trait:material) cloak. It hangs loosely from neck to ankles. {? equal | $(this.hood:stance) | raised |. The hood is raised and covering the wearer's head.| The hood hangs freely against the upper back.}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:Covered value="shoulders"/>
      <Base:Covered value="decolletage"/>
      <Base:Covered value="head-back"/>
      <Base:Covered value="neck"/>
      <Base:Covered value="arm-upper-right"/>
      <Base:Covered value="arm-upper-left"/>
      <Base:Covered value="head-top"/>
      <Base:Covered value="head-fore"/>
      <Base:Covered value="back"/>
      <Base:Covered value="earlobe-right"/>
      <Base:Covered value="throat"/>
      <Base:Covered value="earlobe-left"/>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:hood:stance">
         "lowered"
      </Core:Property>
      <Core:Property property="hood:stance">
         "lowered"
      </Core:Property>
      <Core:Property property="merry:react-post:unwear">
         X[M] Set(\$actor, "details:default:sname:" + \$actor."skotos:charname", 1);             
Set(\$actor, "details:default:sname:" + \$actor."trait:animal", 1);                                 
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:wear">
         X[M] \$aliasn = \$actor."alias:name";                            
\$aliasr = \$actor."alias:race";            
Set(\$actor, "skotos:currentlang", nil);               
Set(\$actor, "trait:lastname", nil);  
Set(\$actor, "trait:speech-pattern", nil);                              
Set(\$actor, "appearance:body", nil);                                  
Set(\$actor, "appearance:browshape", nil);                                  
Set(\$actor, "appearance:build", nil);                                  
Set(\$actor, "appearance:butt", nil);   
Set(\$actor, "base:gait", nil);                                  
Set(\$actor, "appearance:cheekshape", nil);                                  
Set(\$actor, "appearance:clawapp", nil);                                  
Set(\$actor, "appearance:clawlength", oneof( "short", "long", "jagged", "manicured", "stubby" ));                                  
Set(\$actor, "appearance:clawtype", nil);                                  
Set(\$actor, "appearance:earshape", oneof( "short", "long", "tapered", "pointed" ));                                  
Set(\$actor, "appearance:eyebrowshape", nil);                                  
Set(\$actor, "skotos:playercapname", \$aliasn);                                  
Set(\$actor, "trait:animal", \$aliasr);                                  
Set(\$actor, "trait:animaltype", \$aliasr);                                  
Set(\$actor, "trait:superbrief", \$aliasn);                                
Set(\$actor, "trait:title", nil);                                  
Set(\$actor, "appearance:hairlength", oneof( "short", "long", "medium", "waist-length" ));                               
Set(\$actor, "appearance:haircolor", oneof( "brown", "red", "black", "white", "blonde", "grey", "gray", "auburn" ));                               
Set(\$actor, "appearance:haircoloradj", nil);                               
Set(\$actor, "appearance:hairtype", nil);                               
Set(\$actor, "appearance:eyes", nil);                               
Set(\$actor, "appearance:eyeshape", oneof( "ordinary", "almond-shaped", "baggy", "bloodshot" ));                               
Set(\$actor, "appearance:eyecolor", oneof( "brown", "green", "yellow", "blue" ));                               
Set(\$actor, "appearance:noseshape", nil);                                
Set(\$actor, "appearance:mouthshape", nil);                                
Set(\$actor, "appearance:lipshape", nil);                               
Set(\$actor, "appearance:facialhair", nil);                                 
Set(\$actor, "appearance:faciallength", nil);                                  
Set(\$actor, "appearance:height", oneof( "short", "tall", "towering", "tiny", "stocky" ));                                  
Set(\$actor, "appearance:furtexture", oneof( "smooth", "rough", "shaggy", "curly" ));                               
Set(\$actor, "appearance:furcolor", oneof( "brown", "red", "black", "white", "blonde", "grey", "gray", "auburn" ));                               
Set(\$actor, "appearance:furlength", oneof( "short", "long", "medium" ));     
Set(\$actor, "trait:smell", oneof( "almond", "aloe", "cucumber", "geranium", "ginger", "honey", "honeysuckle", "lavender", "lemon", "lilac", "lime", "oatmeal", "patchouli", "red poppy", "rose", "sandalwood", "bergamot", "carrotseed", "cedarwood", "chamomile", "cinnamon", "clary sage", "clove", "blue gum eucalyptus", "lemon eucalyptus", "grapefruit", "lavender", "lemongrass", "peppermint", "rosemary", "rosewood", "spearmint", "sweet orange", "tangerine" ));    
Set(\$actor, "trait:taste", oneof( "of almond", "of aloe", "of cucumber", "of geranium", "of ginger", "of honey", "of honeysuckle", "of lavender", "of lemon", "of lilac", "of lime", "of oatmeal", "of patchouli", "of red poppy", "of rose", "of sandalwood", "of bergamot", "of carrotseed", "of cedarwood", "of chamomile", "of cinnamon", "of clary sage", "of clove", "of blue gum eucalyptus", "of lemon eucalyptus", "of grapefruit", "of lavender", "of lemongrass", "of peppermint", "of rosemary", "of rosewood", "of spearmint", "of sweet orange", "of tangerine" ));                                 
Set(\$actor, "appearance:feet", nil);                                
Set(\$actor, "appearance:feettype:p", nil);                               
Set(\$actor, "appearance:feettype:s", nil);                             
   Set(\$actor, "details:default:sname:" + \$aliasn, 1);                          
   Set(\$actor, "details:default:pname:" + \$aliasn+ "s", 1);                          
   Set(\$actor, "details:default:sname:" + \$aliasr, 1);                          
   Set(\$actor, "details:default:pname:" + \$aliasr+ "s", 1);                                  
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-pre:unwear">
         X[M] \{                                  
  \$traits = (\{ "appearance:body", "appearance:browshape", "appearance:build", "appearance:butt", "appearance:cheekshape", "appearance:clawapp", "appearance:clawlength", "appearance:clawtype", "appearance:earshape", "appearance:eyebrowshape", "skotos:playercapname", "trait:animal", "trait:animaltype", "trait:superbrief", "appearance:hairlength", "appearance:haircolor", "appearance:haircoloradj", "appearance:hairtype", "appearance:earshape", "appearance:eyes", "appearance:eyeshape", "appearance:eyecolor", "appearance:nose", "appearance:noseshape", "appearance:mouthshape", "appearance:mouth", "appearance:lipshape", "appearance:facialhair", "appearance:faciallength", "appearance:height", "appearance:furtexture", "appearance:furcolor", "appearance:furtype", "appearance:furlength", "appearance:feet", "appearance:feettype:p", "appearance:feettype:s", "trait:title", "trait:lastname", "trait:smell", "trait:taste", "base:gait", "trait:speech-pattern", "skotos:currentlang" \});                                  
                                  
  \$sz_i = sizeof(\$traits);                                  
                                  
  for (\$i = 0; \$i \< \$sz_i; \$i++)                                  
  \{                                  
    if (!Get(\$actor, "hidden:" + \$traits[\$i])) continue; /* Doesn't have the property. Continue to the next */                                  
                                  
    Set(\$actor, \$traits[\$i], Get(\$actor, "hidden:" + \$traits[\$i]));                                  
                                  
  \}                         
\$aliasn = \$actor."alias:name";                            
\$aliasr = \$actor."alias:race";                          
   Set(\$actor, "details:default:sname:" + \$aliasn, nil);                          
   Set(\$actor, "details:default:pname:" + \$aliasn+ "s", nil);                          
   Set(\$actor, "details:default:sname:" + \$aliasr, nil);                          
   Set(\$actor, "details:default:pname:" + \$aliasr+ "s", nil);                       
  return TRUE;                                  
\}
      </Core:Property>
      <Core:Property property="merry:react-pre:wear">
         X[M] if(!\$actor."alias:name") \{                           
EmitTo(\$actor, "You must set an Alias name using the @alias-n command. Syntax: @alias-n Fred.");                           
return FALSE;                           
\}                           
if(!\$actor."alias:race") \{                           
EmitTo(\$actor, "You must set an Alias race using the @alias-r command. Syntax: @alias-r dog.");                           
return FALSE;                           
\}                           
                           
\{                                  
  \$traits = (\{ "appearance:body", "appearance:browshape", "appearance:build", "appearance:butt", "appearance:cheekshape", "appearance:clawapp", "appearance:clawlength", "appearance:clawtype", "appearance:earshape", "appearance:eyebrowshape", "skotos:playercapname", "trait:animal", "trait:animaltype", "trait:superbrief", "appearance:hairlength", "appearance:haircolor", "appearance:haircoloradj", "appearance:hairtype", "appearance:eyes", "appearance:eyeshape", "appearance:eyecolor", "appearance:noseshape", "appearance:mouthshape", "appearance:lipshape", "appearance:facialhair", "appearance:faciallength", "appearance:height", "appearance:furtexture", "appearance:furcolor", "appearance:furlength", "appearance:feet", "appearance:feettype:p", "appearance:feettype:s", "trait:title", "trait:lastname", "trait:smell", "trait:taste", "base:gait", "trait:speech-pattern", "skotos:currentlang" \});                                  
                                  
  \$sz_i = sizeof(\$traits);                                  
                                  
  for (\$i = 0; \$i \< \$sz_i; \$i++)                                  
  \{                                  
    if (!Get(\$actor, \$traits[\$i])) continue; /* Doesn't have the property. Continue to the next */                                  
                                  
    Set(\$actor, "hidden:" + \$traits[\$i], Get(\$actor, \$traits[\$i]));                                  
                                  
  \}                      
   Set(\$actor, "details:default:sname:" + \$actor."trait:superbrief", nil);             
   Set(\$actor, "details:default:sname:" + \$actor."trait:animal", nil);                            
  return TRUE;                              
\}
      </Core:Property>
      <Core:Property property="merry:react:lower-dob">
         X[M] if(\$this."hood:stance" == "raised") \{               
this."hood:stance" = "lowered";               
EmitTo(\$actor, "You lower your hood.");               
EmitIn(\$actor."base:environment", Describe(\$actor)+ " lowers " +\$actor."base:possessive"+ " hood to reveal " +\$actor."base:objective"+ " hair.", \$actor);               
return FALSE;               
\} else \{          
   EmitTo(\$actor, "Your hood is already lowered.");          
return FALSE;          
\}           
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:raise-dob">
         X[M] if(\$this."hood:stance" == "lowered") \{               
this."hood:stance" = "raised";               
EmitTo(\$actor, "You raise your hood.");               
EmitIn(\$actor."base:environment", Describe(\$actor)+ " raises " +\$actor."base:possessive"+ " hood.", \$actor);               
return FALSE;               
\} else \{          
   EmitTo(\$actor, "Your hood is already raised.");          
return FALSE;          
\}           
return TRUE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:color">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:material">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1102359611, "tunk_bodin", "X", 1102359640, "tunk_bodin", "X", 1102359851, "tunk_bodin", "X", 1146615299, "tunk_bodin", "X", 1146615524, "tunk_bodin", "X", 1146615579, "tunk_bodin", "X", 1146615700, "tunk_bodin", "X", 1146615945, "tunk_bodin", "X", 1146616013, "tunk_bodin", "X", 1146617777, "tunk_bodin", "X", 1146700353, "tunk_bodin", "X", 1146702286, "tunk_bodin", "X", 1146702429, "tunk_bodin", "X", 1146702776, "tunk_bodin", "X", 1146703644, "tunk_bodin", "X", 1287791915, "tunk_bodin", "X" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
