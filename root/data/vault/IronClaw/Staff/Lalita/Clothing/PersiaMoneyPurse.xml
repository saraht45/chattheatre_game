<object clone="/base/obj/thing" owner="lunamoon">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Allegory:Props:Crafting:UrCraftingContainer)"/>
    <Base:Bulk immobile="false" mass="0.5" density="1"/>
    <Base:Container flexible="true" transparent-container="false" public-container="false" tight="false" capacity="0.25" maxweight="25" verb2="contain" verb3="contains"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="lying" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="true" under="false" on="false" inside="true" near="true" over="false" behind="false" before="false" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="purse"/>
            <Base:SName sname="moneypurse"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="purses"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="leather"/>
          <Base:Adjective adjective="money"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             {? equal | $(this.trait:color) | none || $(this.trait:color) }
{? equal | $(this.trait:material) | none || $(this.trait:material) } purse
          </Base:Description>
          <Base:Description type="examine">
             A bag of {? equal | $(this.trait:color) | none || $(this.trait:color) }
{? equal | $(this.trait:material) | none | material | $(this.trait:material) }
made into a purse.<sbr/>
A container that is wrapped around the waist with a string.
{? | $(this.details:default:exit:closed) | | {? equal | $(actor) | $(this.base:environment) |
This pouch contains $[if($this."cash:balance" == 100){ return "one denar."; } else if((!$this."cash:balance") || ($this."cash:balance" == 0)){ return "no money."; } else { $result = $this."cash:balance" / 100; /*if($this."cash:balance"%100 != 0) { $result = $result+"."+$this."cash:balance"%100/10; if($this."cash:balance"%10 != 0) { $result = $result+$this."cash:balance"%10; } }*/ return $result+" denarii."; }]}
}
          </Base:Description>
          <Base:Description type="look">
             A bag of {? equal | $(this.trait:color) | none || $(this.trait:color) }
{? equal | $(this.trait:material) | none | material | $(this.trait:material) }
made into a purse.
{? | $(this.details:default:exit:closed) | | {? equal | $(actor) | $(this.base:environment) |
This pouch contains $[if($this."cash:balance" == 100){ return "one denar."; } else if((!$this."cash:balance") || ($this."cash:balance" == 0)){ return "no money."; } else { $result = $this."cash:balance" / 100; /*if($this."cash:balance"%100 != 0) { $result = $result+"."+$this."cash:balance"%100/10; if($this."cash:balance"%10 != 0) { $result = $result+$this."cash:balance"%10; } }*/ return $result+" denarii."; }]}
}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="true" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="10"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:Covered value="waist"/>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:alteration:add:default:dye">
         ([ "noslay":"true", "properties":(\{ (\{ "trait:color", "trait:color" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:cash:amount_to_fill">
         1000
      </Core:Property>
      <Core:Property property="export:cash:balance">
         0
      </Core:Property>
      <Core:Property property="export:cash:max">
         15000
      </Core:Property>
      <Core:Property property="export:nip:item:cost">
         0
      </Core:Property>
      <Core:Property property="export:trait:brief">
         "pouch"
      </Core:Property>
      <Core:Property property="export:trait:material">
         "cotton"
      </Core:Property>
      <Core:Property property="export:trait:objecttype">
         "moneypouch"
      </Core:Property>
      <Core:Property property="merry:react-post:shake-dob">
         X[M] if(\$this."cash:balance" \> 0 ) \{           
  EmitTo(\$actor, "You shake your purse and it jingles with coins.");            
  EmitIn(\$actor."base:environment", Describe(\$actor) + " shakes " + \$actor."base:possessive" + " purse and it jingles with coins.", \$actor); \}           
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:deposit-where">
         X[M] if(NRefOb(\$what[0])."cash:value") \{   
EmitTo(\$actor, "You have made a deposit into your purse.");   
EmitIn(\$actor."base:environment", Describe(\$actor)+ " makes a deposit into " +\$actor."base:possessive"+ " purse.", \$actor); 
return FALSE;   
\}   
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:set-what">
         X[M] if(\$this."base:environment" != \$actor) return TRUE;

if(!\$where)
\{
  if(!\$evoke \|\| !sscanf(\$evoke[1..strlen(\$evoke)-2], "%*d"))
  \{
    EmitTo(\$actor, "Format: Set my pouch \\"20");
  \} else \{
    \$this."cash:amount_to_fill" = Int(\$evoke[1..strlen(\$evoke)-2])*100;
    if(\$this."cash:amount_to_fill" == 0) \{
      \$amount = "nothing";
    \} else if(\$this."cash:amount_to_fill" == 100) \{
      \$amount = "one denar";
    \} else \{
      \$amount = desc_cardinal(\$this."cash:amount_to_fill"/100)+" denarii";
    \}
    EmitTo(\$actor, "You set your purse to carry "+\$amount+" when you leave your rooms or the bank.");
  \}
  return FALSE;
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:withdraw-dob">
         X[M] if(\$this."base:environment" != \$actor) return TRUE;             
             
/* Check we are only trying to take from one thing */             
if(sizeof(\$dob) != 1)\{             
  EmitTo(\$actor, "You may only take money from one thing at a time.");             
  return FALSE;             
\}             
           
/* If no evoke */    
if(!\$evoke) \{    
EmitTo(\$actor, "The correct syntax is: withdraw from [this] '[amount]. i.e. withdraw from my money pouch '12.");    
return FALSE;    
\}     
\$target = NRefOb(\$dob[0]);             
             
/* Check that the object is a money purse */             
if(\$this."trait:objecttype" != "moneypouch")\{             
  EmitTo(\$actor, "You may only get money from purses and money pouches.");             
  return FALSE;             
\}             
             
/* How much do we get? */             
\$amount = Int(\$evoke[1..strlen(\$evoke)-2])*100;             
             
/*             
EmitTo(\$actor, "Amount is "+Str(\$amount));             
EmitTo(\$actor, "The pouch holds "+Str(\$this."cash:balance"));             
*/             
             
if(\$amount \> \$this."cash:balance")             
  \$amount = \$this."cash:balance";             
             
/*EmitTo(\$actor, "Amount is now "+Str(\$amount));*/             
             
/* Take the money */             
             
/* take money from the pouch */             
\$this."cash:balance" -= \$amount;             
             
/* Spawn the coins */             
while(\$amount \&\& (\$amount \> 0))             
\{             
  if(\$amount \>= 2400) \{             
    \$coin = Spawn(\$\{Ironclaw:Props:Finance:Cash:Aureal-broken\});             
    \$amount -= 2400;             
  \} else if(\$amount \>= 100) \{             
    \$coin = Spawn(\$\{Allegory:Props:Finance:Cash:Florin\});             
    \$amount -= 100;             
  \} else if(\$amount \< 100) \{             
    \$coin = Spawn(\$\{Allegory:Props:Finance:Cash:Florin\});             
    \$amount -= 100;             
  \}             
  \$coin."base:environment" = \$actor;             
\}             
      EmitTo(\$actor, "You make a withdrawal from your purse.");     
EmitIn(\$actor."base:environment", Describe(\$actor)+ " makes a withdrawal from " +\$actor."base:possessive"+ " purse.", \$actor);     
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react:withdraw-iob">
         X[M] if(\$this."base:environment" != \$actor) return TRUE;             
             
/* Check we are only trying to take from one thing */             
if(sizeof(\$iob) != 1)\{             
  EmitTo(\$actor, "You may only take money from one thing at a time.");             
  return FALSE;             
\}             
             
\$target = NRefOb(\$iob[0]);             
             
/* Check that the object is a money purse */             
if(\$this."trait:objecttype" != "moneypouch")\{             
  EmitTo(\$actor, "You may only get money from purses and money pouches.");             
  return FALSE;             
\}       
         
/* If no evoke */     
if(!\$evoke) \{    
EmitTo(\$actor, "The correct syntax is: withdraw from [this] '[amount]. i.e. withdraw from my money pouch '12.");    
return FALSE;    
\}     
             
/* How much do we get? */             
\$amount = Int(\$evoke[1..strlen(\$evoke)-2])*100;             
             
/*             
EmitTo(\$actor, "Amount is "+Str(\$amount));             
EmitTo(\$actor, "The pouch holds "+Str(\$this."cash:balance"));             
*/             
             
if(\$amount \> \$this."cash:balance")             
  \$amount = \$this."cash:balance";             
             
/*EmitTo(\$actor, "Amount is now "+Str(\$amount));*/             
             
/* Take the money */             
             
/* take money from the pouch */             
\$this."cash:balance" -= \$amount;             
             
/* Spawn the coins */             
while(\$amount \&\& (\$amount \> 0))             
\{             
  if(\$amount \>= 2400) \{             
    \$coin = Spawn(\$\{Ironclaw:Props:Finance:Cash:Aureal-broken\});             
    \$amount -= 2400;             
  \} else if(\$amount \>= 100) \{             
    \$coin = Spawn(\$\{Allegory:Props:Finance:Cash:Florin\});             
    \$amount -= 100;             
  \} else if(\$amount \< 100) \{             
    \$coin = Spawn(\$\{Allegory:Props:Finance:Cash:Florin\});             
    \$amount -= 100;             
  \}             
  \$coin."base:environment" = \$actor;             
\}             
      EmitTo(\$actor, "You make a withdrawal from your purse.");     
EmitIn(\$actor."base:environment", Describe(\$actor)+ " makes a withdrawal from " +\$actor."base:possessive"+ " purse.", \$actor);     
return FALSE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:color">
         X[M] return Call(\$\{Allegory:Props:Crafting:UrCrafting\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:material">
         X[M] return Call(\$\{Allegory:Props:Crafting:UrCrafting\}, "replaceadj", \$object: this);
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1122083803, "tonyd", "E", 1122083884, "tonyd", "E", 1127023090, "tonyd", "E", 1127023129, "tonyd", "E", 1127023157, "tonyd", "E", 1127024212, "tonyd", "E", 1127024467, "tonyd", "P", 1131232388, "tunk_bodin", "X", 1131232456, "tunk_bodin", "X", 1131234455, "tunk_bodin", "E", 1131234503, "tunk_bodin", "X", 1131234559, "tunk_bodin", "X", 1131234697, "tunk_bodin", "E", 1131234824, "tunk_bodin", "X", 1131235141, "tunk_bodin", "X", 1131235159, "tunk_bodin", "X", 1131235258, "tunk_bodin", "X", 1131235497, "tunk_bodin", "X", 1131301399, "tunk_bodin", "X", 1131301474, "tunk_bodin", "X", 1131760617, "roccon", "E", 1131765452, "tunk_bodin", "X", 1131765553, "tunk_bodin", "X", 1131765792, "tunk_bodin", "X", 1131766102, "tunk_bodin", "X", 1131766218, "tunk_bodin", "X", 1131766468, "tunk_bodin", "X", 1131766934, "tunk_bodin", "X", 1131767136, "tunk_bodin", "X", 1131770863, "tonyd", "P", 1132962454, "tunk_bodin", "X", 1132966557, "tunk_bodin", "X", 1132966688, "tunk_bodin", "X", 1133397596, "tunk_bodin", "X", 1133397713, "tunk_bodin", "X", 1133397750, "tunk_bodin", "X", 1133397889, "tunk_bodin", "X", 1136268141, "tunk_bodin", "X", 1136268295, "tunk_bodin", "X", 1136415220, "tunk_bodin", "X", 1136415351, "tonyd", "E", 1136437723, "tonyd", "E", 1136538533, "sinistrelle", "E", 1136538859, "sinistrelle", "E", 1136575624, "tunk_bodin", "E", 1136576123, "tunk_bodin", "X", 1136576180, "tunk_bodin", "X", 1136576281, "tunk_bodin", "X", 1136576331, "tunk_bodin", "X", 1136609237, "tunk_bodin", "X", 1136610130, "tunk_bodin", "X", 1136675863, "tonyd", "P", 1136675890, "tonyd", "P", 1136935793, "tunk_bodin", "X", 1137224224, "tunk_bodin", "X", 1137713255, "lunamoon", "E", 1141586174, "lunamoon", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
