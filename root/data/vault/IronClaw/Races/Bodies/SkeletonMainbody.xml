<object clone="/base/obj/thing" owner="roccon">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(IronClaw:Races:Bodies:SkeletonRightside)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="true" transparent-container="false" public-container="false" tight="false" capacity="100" maxweight="100" verb2="are carrying" verb3="is carrying"/>
    <Base:Misc gender="neuter" volition="true" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="true"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="person"/>
            <Base:SName sname="being"/>
            <Base:SName sname="mammal"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="people"/>
            <Base:PName pname="mammals"/>
            <Base:PName pname="persons"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             {? equal | $(this.trait:title) | none ||$(this.trait:title) }$(this.trait:superbrief){? | $(this.death:dead) | (Deceased)}
          </Base:Description>
          <Base:Description type="examine">
             {? | $(this.trait:override:examine) | $(this.trait:override:examine) | $(this.trait:examine) } $[if($this."combat:injuries" && (sizeof(map_indices($this."combat:injuries")) > 0)) return Describe($this)+" appears to be injured.";]
          </Base:Description>
          <Base:Description type="look">
             {? | $(this.trait:override:look) | $(this.trait:override:look) | $(this.trait:look) } $[if($this."combat:injuries" && (sizeof(map_indices($this."combat:injuries")) > 0)) return Describe($this)+" appears to be injured.";]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="ankles" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="ankles"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:ankles:adjectives) $(this.appearance:ankles) ankles
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:ankles) pair of ankles. {? | $(this.combat:injury:ankles) |They have $(this.combat:injury:ankles).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="armpits" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="armpits"/>
            <Base:SName sname="pits"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:armpits:adjectives) armpits
          </Base:Description>
          <Base:Description type="look">
             A pair of armpits. {? | $(this.combat:injury:armpits) |They have $(this.combat:injury:armpits).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="arms" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="arms"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="bone"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:arms:adjectives) $(this.appearance:arms) bone arms
          </Base:Description>
          <Base:Description type="look">
             A pair of $(this.appearance:arms) bone arms.  {? | $(this.combat:injury:arms) |They have $(this.combat:injury:arms).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="attention" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="attention"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="attentions"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.appearance:attention) attention
          </Base:Description>
          <Base:Description type="look">
             That is not a real thing.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="back" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="back"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="backs"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="lower"/>
          <Base:Adjective adjective="rib"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:back:adjectives)  $(this.appearance:back) back of ribs
          </Base:Description>
          <Base:Description type="look">
             A back of ribs. {? | $(this.combat:injury:back) |It has $(this.combat:injury:back).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="body" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="body"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="bodies"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="skeleton"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:body:adjectives) $(this.appearance:body) body made of bones
          </Base:Description>
          <Base:Description type="look">
             The body made of bones, either considered as the complete skeleton, or the skeleton without their limbs. {? | $(this.combat:injury:body) |It has $(this.combat:injury:body).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="breastbone" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="breastbone"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="breastbones"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:breastbone:adjectives)  $(this.appearance:breastbone) breastbone
          </Base:Description>
          <Base:Description type="look">
             A breastbone. {? | $(this.combat:injury:breastbone) |It has $(this.combat:injury:breastbone).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="brow" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="brow"/>
            <Base:SName sname="forehead"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="brows"/>
            <Base:PName pname="foreheads"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:forehead:adjectives) {? equal | $(this.appearance:browshape) | ordinary || $(this.appearance:browshape) } forehead
          </Base:Description>
          <Base:Description type="look">
             A forehead on the skull. {? | $(this.combat:injury:forehead) |It has $(this.combat:injury:brow).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="collarbone" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="collarbone"/>
            <Base:SName sname="clavicle"/>
            <Base:SName sname="bone"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="bones"/>
            <Base:PName pname="clavicles"/>
            <Base:PName pname="collarbones"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="collar"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:chest:adjectives) $(this.appearance:collarbone) collarbone
          </Base:Description>
          <Base:Description type="look">
             The bone across the upper front of the skeleton, connecting the breastbone to the shoulderblades. {? | $(this.combat:injury:collarbone) |It has $(this.combat:injury:collarbone).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="digits" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="pname: digits"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="left"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:digits:adjectives)  $(this.appearance:digits)ten bone digits
          </Base:Description>
          <Base:Description type="look">
             A set of ten bone digits not counting the toes. {? | $(this.combat:injury:digits) |They have $(this.combat:injury:digits).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="ego" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="ego"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="egos"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:ego:adjectives)  $(this.appearance:ego) ego
          </Base:Description>
          <Base:Description type="look">
             You cannot look at this. {? | $(this.combat:injury:ego) |It has $(this.combat:injury:ego).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="elbows" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="elbows"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:elbows:adjectives)  $(this.appearance:elbows) elbows
          </Base:Description>
          <Base:Description type="look">
             A pair of elbows. {? | $(this.combat:injury:elbows) |They have $(this.combat:injury:elbows).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="eyes" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="eyes"/>
            <Base:SName sname="holes"/>
            <Base:SName sname="eyeholes"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="eye"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:eyes:adjectives)  $(this.appearance:eyes)          {? equal | $(this.appearance:eyeshape) | ordinary ||$(this.appearance:eyeshape) }eye holes
          </Base:Description>
          <Base:Description type="look">
             A pair of {? equal | $(this.appearance:eyeshape) | ordinary ||$(this.appearance:eyeshape) }eye holes. {? | $(this.combat:injury:eyes) |It has $(this.combat:injury:eyes).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="face" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="face"/>
            <Base:SName sname="feature"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="faces"/>
            <Base:PName pname="features"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="bony"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:face:adjectives) bony face
          </Base:Description>
          <Base:Description type="look">
             A bony face consisting of a nose hole over a set of teeth. The face holds $(this.appearance:eyeshape) eyeholes. {? | $(this.combat:injury:face) |It has $(this.combat:injury:face).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="feet" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="feet"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="bone"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:feet:adjectives)  $(this.appearance:feet) $(this.appearance:feettype:p) made of bones
          </Base:Description>
          <Base:Description type="look">
             A pair of $(this.appearance:feet) $(this.appearance:feettype:p) made of bones. {? | $(this.combat:injury:feet) |They have $(this.combat:injury:feet).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="fingers" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="fingers"/>
            <Base:SName sname="digits"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:fingers:adjectives)  $(this.appearance:fingers) fingers made of bones
          </Base:Description>
          <Base:Description type="look">
             Ten fingers made of bones. {? | $(this.combat:injury:fingers) |They have $(this.combat:injury:fingers).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="fists" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="fists"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="left"/>
          <Base:Adjective adjective="right"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:fists:adjectives)  $(this.appearance:fists) fists made of bones
          </Base:Description>
          <Base:Description type="look">
             A pair of fists made of bones. {? | $(this.combat:injury:fists) |They have $(this.combat:injury:fists).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="forearms" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="forearms"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:forearms:adjectives)  $(this.appearance:forearms) bone forearms
          </Base:Description>
          <Base:Description type="look">
             A pair of bone forearms. {? | $(this.combat:injury:forearms) |They have $(this.combat:injury:forearms).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="hands" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="hands"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:hands:adjectives)         {? equal | $(this.appearance:hands) | ordinary ||$(this.appearance:hands) }bone hands
          </Base:Description>
          <Base:Description type="look">
             {? equal | $(this.appearance:hands) | ordinary |A pair of bone hands.|A pair of $(this.appearance:hands) bone hands.} {? | $(this.combat:injury:hands) |They have $(this.combat:injury:hands).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="head" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="head"/>
            <Base:SName sname="skull"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="heads"/>
            <Base:PName pname="skulls"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:head:adjectives) $(this.appearance:head) skull
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:head) skull. {? | $(this.combat:injury:head) |It has $(this.combat:injury:head).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="heels" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="heels"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:heels:adjectives)  $(this.appearance:heels) bone heels
          </Base:Description>
          <Base:Description type="look">
             A pair of bone heels. {? | $(this.combat:injury:heels) |They have $(this.combat:injury:heels).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="hipbones" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="hipbones"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:hipbones:adjectives)  $(this.appearance:hipbones) hipbones
          </Base:Description>
          <Base:Description type="look">
             A hipbone. {? | $(this.combat:injury:hipbones) |They have $(this.combat:injury:hipbones).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="jaw" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="jaw"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="jaws"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:jaw:adjectives)  $(this.appearance:jaw)  {? equal | $(this.appearance:jawshape) | ordinary ||$(this.appearance:jawshape)} jaw
          </Base:Description>
          <Base:Description type="look">
             {? equal | $(this.appearance:jawshape) | ordinary |A jaw.|A $(this.appearance:jawshape) jaw.} {? | $(this.combat:injury:jaw) |It has $(this.combat:injury:jaw).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="knees" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="knees"/>
            <Base:SName sname="kneecaps"/>
            <Base:SName sname="caps"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="knee"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:knees:adjectives)  $(this.appearance:knees) kneecaps
          </Base:Description>
          <Base:Description type="look">
             A pair of kneecaps. {? | $(this.combat:injury:knees) |They have $(this.combat:injury:knees).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="lap" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="true" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="lap"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="laps"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:lap:adjectives)  $(this.appearance:lap) bony lap
          </Base:Description>
          <Base:Description type="look">
             A bony lap. {? | $(this.combat:injury:lap) |It has $(this.combat:injury:lap).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="legs" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="legs"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:legs:adjectives)  $(this.appearance:legs) legs made of bones
          </Base:Description>
          <Base:Description type="look">
             A pair of $(this.appearance:legs) legs made of bones. {? | $(this.combat:injury:legs) |They have $(this.combat:injury:legs).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="mind" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="mind"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="minds"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:mind:adjectives)  $(this.appearance:mind) mind
          </Base:Description>
          <Base:Description type="look">
             You cannot look at this. {? | $(this.combat:injury:mind) |It has $(this.combat:injury:mind).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="mouth" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="mouth"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="mouths"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:mouth:adjectives)  $(this.appearance:mouth)           {? equal | $(this.appearance:mouthshape) | ordinary ||$(this.appearance:mouthshape) }mouth
          </Base:Description>
          <Base:Description type="look">
             {? equal | $(this.appearance:mouthshape) | ordinary |A mouth.|A $(this.appearance:mouthshape) mouth.} {? | $(this.combat:injury:mouth) |It has $(this.combat:injury:mouth).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="neck" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="neck"/>
            <Base:SName sname="bone"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="necks"/>
            <Base:PName pname="bones"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="neck"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:neck:adjectives) $(this.appearance:neck) neckbone
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:neck) neckbone. {? | $(this.combat:injury:neck) |It has $(this.combat:injury:neck).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="nose" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="nose"/>
            <Base:SName sname="hole"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="noses"/>
            <Base:PName pname="holes"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="nose"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:nose:adjectives)  $(this.appearance:nose) nose hole
          </Base:Description>
          <Base:Description type="look">
             A nose hole. {? | $(this.combat:injury:nose) |It has $(this.combat:injury:nose).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="palms" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="palms"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:palms:adjectives) $(this.appearance:palms) bone palms
          </Base:Description>
          <Base:Description type="look">
             A pair of $(this.appearance:palm) bone palms. {? | $(this.combat:injury:palms) |They have $(this.combat:injury:palms).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="pinkies" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="pinkies"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="little"/>
          <Base:Adjective adjective="pinky"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             bone pinkies
          </Base:Description>
          <Base:Description type="look">
             The little fingers of the hands.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="shins" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="shins"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:shins:adjectives)  $(this.appearance:shins)shins
          </Base:Description>
          <Base:Description type="look">
             A pair of shins. {? | $(this.combat:injury:shins) |They have $(this.combat:injury:shins).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="shoulderblades" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="shoulderblades"/>
            <Base:SName sname="scapulas"/>
            <Base:SName sname="bones"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:shoulderblades:adjectives)  $(this.appearance:shoulderblades)           shoulderblades
          </Base:Description>
          <Base:Description type="look">
             The triangular bones across the upper back of the body, connected to the collarbone. {? | $(this.combat:injury:shoulderblades) |They have $(this.combat:injury:shoulderblades).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="sides" prime="false" def="false" abstract="true" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="sides"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:sides:adjectives)  $(this.appearance:sides) sides
          </Base:Description>
          <Base:Description type="look">
             The sides, between the ribs and the waist. {? | $(this.combat:injury:sides) |They have $(this.combat:injury:sides).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="spine" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="spine"/>
            <Base:SName sname="chord"/>
            <Base:SName sname="vertebra"/>
            <Base:SName sname="bone"/>
            <Base:SName sname="backbone"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="backbones"/>
            <Base:PName pname="bones"/>
            <Base:PName pname="chords"/>
            <Base:PName pname="spines"/>
            <Base:PName pname="vertebrae"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="back"/>
          <Base:Adjective adjective="spinal"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:spine:adjectives)  $(this.appearance:spine) backbone
          </Base:Description>
          <Base:Description type="look">
             A backbone. {? | $(this.combat:injury:spine) |It has $(this.combat:injury:spine).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="tattoo" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             tattoo of $(this.appearance:symbol)
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:symbolcolor) tattoo of $(this.appearance:symbol).
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="teeth" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="tooth"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="teeth"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.appearance:teeth) teeth
          </Base:Description>
          <Base:Description type="look">
             A set of $(this.appearance:teeth) teeth, always visible.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="temples" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="temples"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:temples:adjectives)  $(this.appearance:temples) temples
          </Base:Description>
          <Base:Description type="look">
             A pair of temples, on either side of the forehead. {? | $(this.combat:injury:temples) |They have $(this.combat:injury:temples).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="thumbs" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="thumbs"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:thumbs:adjectives)  $(this.appearance:thumbs) bone thumbs
          </Base:Description>
          <Base:Description type="look">
             A pair of bone thumbs. {? | $(this.combat:injury:thumbs) |They have $(this.combat:injury:thumbs).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="toes" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="toes"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:toes:adjectives)  $(this.appearance:toes) bone toes
          </Base:Description>
          <Base:Description type="look">
             A set of bone toes. {? | $(this.combat:injury:toes) |They have $(this.combat:injury:toes).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="voice" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="voice"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="voices"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.appearance:voice) voice
          </Base:Description>
          <Base:Description type="look">
             That is not a real thing.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="words" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames>
            <Base:PName pname="words"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">words</Base:Description>
          <Base:Description type="look">
             That is not a real thing.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="wrists" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="wrists"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.combat:injury:wrists:adjectives)  $(this.appearance:wrists) wrists
          </Base:Description>
          <Base:Description type="look">
             A $(this.appearance:wrists) pair of wrists. {? | $(this.combat:injury:wrists) |They have $(this.combat:injury:wrists).}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="disabled:merry:setprop-post:appearance:hairstyle">
         X[M] return Call(\$\{Allegory:Lib:UrPeople:Description\}, "updatehairdesc", \$action: "hairstyle", \$body: \$this);
      </Core:Property>
      <Core:Property property="export:alteration:add:hair:hairdye">
         ([ "properties":(\{ (\{ "trait:color", "appearance:haircolor" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:alteration:add:hair:hairgrowth">
         ([  ])
      </Core:Property>
      <Core:Property property="export:alteration:add:head:hairgrowth">
         ([  ])
      </Core:Property>
      <Core:Property property="export:alteration:add:tattoo:ink">
         ([ "noslay":"true", "properties":(\{ (\{ "trait:color", "appearance:symbolcolor" \}) \}), "stopvalue":(\{ "appearance:symbolcolor", "sketched", "This tattoo has already been inked." \}) ])
      </Core:Property>
      <Core:Property property="export:alteration:create:default:tattoo">
         ([ "description":(\{ "You tattoo MODIFICATION onto ORIGINAL_OBJECT", "tattoos MODIFICATION onto ORIGINAL_OBJECT" \}), "fixed":"true", "input-list":(\{ (\{ \<IronClaw:Lib:UrPeople:Tattoos\>, "alteration:knowledge:tattoos" \}) \}), "input-list-actor":(\{ "alteration:knowledge:tattoos" \}), "modification":"a tattoo", "noskillroll":"true", "properties":(\{ (\{ "appearance:symbol" \}) \}), "requiredtools":(\{ "a needle and ink", (\{ "needle" \}), (\{ "ink" \}) \}), "stopvalue":(\{ "appearance:symbol", "nothing", "Your victim already has a tattoo." \}) ])
      </Core:Property>
      <Core:Property property="export:alteration:create:hair:alter">
         ([ "description":(\{ "You style ORIGINAL_OBJECT", "styles ORIGINAL_OBJECT" \}), "fixed":"true", "input-list":(\{ (\{ \<Allegory:Lib:UrPeople:Hairstyles\>, "alteration:knowledge:hairstyles" \}), (\{ \<Allegory:Lib:UrPeople:Hairstyles\>, "alteration:knowledge:hairlength" \}), (\{ \<Allegory:Lib:UrPeople:Hairstyles\>, "alteration:knowledge:hairtype" \}) \}), "input-list-actor":(\{ "alteration:knowledge:hairstyles", "alteration:knowledge:hairlength", "alteration:knowledge:hairtype" \}), "noskillroll":"true", "requiredtools":(\{ "a pair of scissors and a comb", (\{ "scissors" \}), (\{ "comb" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:alteration:create:hair:cut">
         ([ "description":(\{ "You cut ORIGINAL_OBJECT", "cuts ORIGINAL_OBJECT" \}), "fixed":"true", "input-list":(\{ (\{ \<Allegory:Lib:UrPeople:Hairstyles\>, "alteration:knowledge:hairlength" \}) \}), "input-list-actor":(\{ "alteration:knowledge:hairlength" \}), "noskillroll":"true", "requiredtools":(\{ "a pair of scissors and a comb", (\{ "scissors" \}), (\{ "comb" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:alteration:create:hair:style">
         ([ "description":(\{ "You style ORIGINAL_OBJECT", "styles ORIGINAL_OBJECT" \}), "fixed":"true", "input-list":(\{ (\{ \<Allegory:Lib:UrPeople:Hairstyles\>, "alteration:knowledge:hairstyles" \}) \}), "input-list-actor":(\{ "alteration:knowledge:hairstyles" \}), "noskillroll":"true", "requiredtools":(\{ "a pair of scissors and a comb", (\{ "scissors" \}), (\{ "comb" \}) \}) ])
      </Core:Property>
      <Core:Property property="export:appearance:build">
         "average"
      </Core:Property>
      <Core:Property property="export:appearance:clawtype">
         "nails"
      </Core:Property>
      <Core:Property property="export:appearance:facialhair">
         "none"
      </Core:Property>
      <Core:Property property="export:appearance:faciallength">
         "ordinary"
      </Core:Property>
      <Core:Property property="export:appearance:feettype">
         "feet"
      </Core:Property>
      <Core:Property property="export:appearance:feettype:p">
         "feet"
      </Core:Property>
      <Core:Property property="export:appearance:feettype:s">
         "foot"
      </Core:Property>
      <Core:Property property="export:appearance:furtype">
         "fur"
      </Core:Property>
      <Core:Property property="export:appearance:hashair">
         "yes"
      </Core:Property>
      <Core:Property property="export:appearance:height">
         "average"
      </Core:Property>
      <Core:Property property="export:appearance:symbol">
         "nothing"
      </Core:Property>
      <Core:Property property="export:appearance:symbolcolor">
         "sketched"
      </Core:Property>
      <Core:Property property="export:base:infravision">
         1
      </Core:Property>
      <Core:Property property="export:student:learningpoints">
         30
      </Core:Property>
      <Core:Property property="export:trait:agility">
         3
      </Core:Property>
      <Core:Property property="export:trait:animal">
         "unknown"
      </Core:Property>
      <Core:Property property="export:trait:animaltype">
         "unknown"
      </Core:Property>
      <Core:Property property="export:trait:body">3</Core:Property>
      <Core:Property property="export:trait:brief">
         "someone"
      </Core:Property>
      <Core:Property property="export:trait:butt">
         "rump"
      </Core:Property>
      <Core:Property property="export:trait:chance">
         5
      </Core:Property>
      <Core:Property property="export:trait:dex">3</Core:Property>
      <Core:Property property="export:trait:examine">
         "You examine someone."
      </Core:Property>
      <Core:Property property="export:trait:income">
         0
      </Core:Property>
      <Core:Property property="export:trait:incomecosts">
         0
      </Core:Property>
      <Core:Property property="export:trait:look">
         "You look at someone."
      </Core:Property>
      <Core:Property property="export:trait:mind">3</Core:Property>
      <Core:Property property="export:trait:money">0</Core:Property>
      <Core:Property property="export:trait:nominative">
         "he"
      </Core:Property>
      <Core:Property property="export:trait:objective">
         "her"
      </Core:Property>
      <Core:Property property="export:trait:possessive">
         "her"
      </Core:Property>
      <Core:Property property="export:trait:pouchmoney">
         0
      </Core:Property>
      <Core:Property property="export:trait:sex">
         "woman"
      </Core:Property>
      <Core:Property property="merry:act-post:linkdie%income">
         X[M] mapping map;
string *array;
int i;

/* Set the money based on income */
/*EmitTo(\$\{Chatters:IC:Az:Azrael\}, "Setting income for "+Describe(\$this)+".");*/
if(\$this."trait:income")
\{
/* Check if the player gets more money */
  /* Check if the player has waited a day before getting money */
  if(!\$this."trait:income_time" \|\| (\$this."trait:income_time" \< time()))
  \{

    /* Count the players money */

\$amount = 0;

/* check what the player has on them */

\$objects = (\{ \$actor \});

/* and what is in the players rooms */
map = Get(\$actor, "*");
map = prefixed_map(map, "virtualhome:");
if(sizeof(map_indices(map)) != 0)
\{
  for(i = 0; i \< sizeof(map_values(map)); i++)
  \{
    if(typeof(map_values(map)[i]) == 4)
      \$objects \|= map_values(map)[i]."base:inventory";
  \}
\}

for(i = 0; i \< sizeof(\$objects); i++)
\{
  if(!\$objects[i]."base:volition" \|\| (\$objects[i]==\$this)) \{
    if(\$objects[i]."cash:balance") \{
      \$amount += \$objects[i]."cash:balance";
    \} else if(\$objects[i]."cash:value") \{
      \$amount += \$objects[i]."cash:value";
    \}
    \$objects += \$objects[i]."base:inventory";
  \}
\}

\$this."trait:pouchmoney" = \$amount;

    /* Check if this player already has more money than his income */
    \$money = \$this."trait:money" + \$this."trait:pouchmoney" + Int(\$this."trait:incomecosts");
    /* grant money increase */
    if(\$money \< Int(\$this."trait:income"))
    \{
      \$this."trait:money" = Int(\$this."trait:income") - \$this."trait:pouchmoney" - Int(\$this."trait:incomecosts");
      \$this."trait:income_time" = time()+(60*60*16);
    \}
  \}
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:act-post:login%fixes">
         X[M] mapping map;
string *array;
int i;

/* fixing temporary hack now we don't need it for scabbard descriptions */
\$actor."base:infravision" = nil;

/* reduce learning points */
if(\$actor."student:learningpoints" \> 100)
  \$actor."student:learningpoints" = 100;

/* Fix the eyebrows */
/*
if(\$actor."appearance:browshape" \&\& !\$actor."appearance:eyebrowshape") \{
  \$actor."appearance:eyebrowshape" = \$actor."appearance:browshape";
  \$actor."appearance:browshape" = nil;
\}
*/

/* Set player cap name */
if(!\$actor."skotos:playercapname")
  \$actor."skotos:playercapname" = capitalize(\$actor."skotos:charname");

/* temporarily just set it (for people broken from masks) */
\$actor."skotos:playercapname" = capitalize(\$actor."skotos:charname");

/* Remove redundant properties */
\$actor."alteration:knowledge:tailoring-cloth-remote" = nil;
\$actor."alteration:knowledge:tailoring-roll-remote" = nil;
\$actor."alteration:knowledge:forging-metal" = nil;
\$actor."alteration:knowledge:forging-metal-remote" = nil;
\$actor."skill:alteration:metalwork" = nil;

if(\$actor."career:combat:mace") \{
  if(!\$actor."career:combat:club" \|\| (Int(\$actor."career:combat:club") \< Int(\$actor."career:combat:mace"))) \{
    \$actor."career:combat:club" = Int(\$actor."career:combat:mace");
  \}
  \$actor."career:combat:mace" = nil;
\}
if(\$actor."skill:combat:mace") \{
  if(!\$actor."skill:combat:club" \|\| (Int(\$actor."skill:combat:club") \< Int(\$actor."skill:combat:mace"))) \{
    \$actor."skill:combat:club" = Int(\$actor."skill:combat:mace");
  \}
  \$actor."skill:combat:mace" = nil;
\}
if(\$actor."skill:career:woodcarver") \{
  if(!\$actor."skill:career:carpenter" \|\| (Int(\$actor."skill:career:carpenter") \< Int(\$actor."skill:career:woodcarver"))) \{
    \$actor."skill:career:carpenter" = Int(\$actor."skill:career:woodcarver");
  \}
  \$actor."skill:career:woodcarver" = nil;
\}



/* Set the actors skills again, in case careers have changed */
/* Get a mapping of all the actors skills */
map = Get(\$actor, "*");
map = prefixed_map(map, "skill:career:");

array = map_indices(map);
for(i=0;i\<sizeof(array);i++)\{
  Set(\$actor, array[i], Get(\$actor, array[i]));
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:act-post:login%income">
         X[M] mapping map;
string *array;
int i;

/* if the player has been logged out for more than a day, they get their income */
/* otherwise, they get their income when logging out */
if(\$this."cdat:lastlogout" \&\& time() \< (\$this."cdat:lastlogout"+(60*60*24))) return TRUE;

/* Set the money based on income */
if(\$this."trait:income") \{
/* Check if the player gets more money */
  /* Check if the player has waited a day before getting money */
  if(!\$this."trait:income_time" \|\| (\$this."trait:income_time" \< time()))
  \{

    /* Count the players money */
\$amount = 0;

/* check what the player has on them */
\$objects = (\{ \$actor \});

/* and what is in the players rooms */
map = Get(\$actor, "*");
map = prefixed_map(map, "virtualhome:");
if(sizeof(map_indices(map)) != 0)
\{
  for(i = 0; i \< sizeof(map_values(map)); i++)
  \{
    if(typeof(map_values(map)[i]) == 4)
      \$objects \|= map_values(map)[i]."base:inventory";
  \}
\}

for(i = 0; i \< sizeof(\$objects); i++)
\{
  if(!\$objects[i]."base:volition" \|\| (\$objects[i]==\$this)) \{
    if(\$objects[i]."cash:balance") \{
      \$amount += \$objects[i]."cash:balance";
    \} else if(\$objects[i]."cash:value") \{
      \$amount += \$objects[i]."cash:value";
    \}
    \$objects += \$objects[i]."base:inventory";
  \}
\}

\$this."trait:pouchmoney" = \$amount;

    /* Check if this player already has more money than his income */
    \$money = \$this."trait:money" + \$this."trait:pouchmoney" + Int(\$this."trait:incomecosts");
    /* grant money increase */
    if(\$money \< Int(\$this."trait:income"))
    \{
      \$this."trait:money" = Int(\$this."trait:income") - \$this."trait:pouchmoney" - Int(\$this."trait:incomecosts");
      \$this."trait:income_time" = time()+(60*60*16);
    \}
  \}
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:act-post:login%studypoints">
         X[M] if(\$this."student:learningpoints:regen")
  return TRUE;

\$this."student:learningpoints:regen" = 1;

while(\$this."student:learningpoints" \< 100) \{
  \$delay(24*60*60, TRUE, "ff1b");
  \$this."student:learningpoints" += 1;
  if(\$this."student:learningpoints" \< 100)
    \$this."student:learningpoints" += 1;
\}

\$this."student:learningpoints:regen" = nil;

return TRUE;
      </Core:Property>
      <Core:Property property="merry:act-post:login%studypoints-non-idle">
         X[M] if(\$this."student:learningpoints:online:regen")
  return TRUE;

\$this."student:learningpoints:online:regen" = 1;

if(!\$this."student:learningpoints:online:todayspoints")
  \$this."student:learningpoints:online:todayspoints" = 0;

/* set up to check how many points we've been given since midnight */
\$daystart = Int(time()/24/60/60)*24*60*60+4*60*60;
if(\$this."student:learningpoints:online:lastlesson") \{
  if(\$this."student:learningpoints:online:lastlesson" \< \$daystart) \{
    \$this."student:learningpoints:online:lastlesson" = \$daystart;
    \$this."student:learningpoints:online:todayspoints" = 0;
  \}
\} else \{
  \$this."student:learningpoints:online:lastlesson" = \$daystart;
  \$this."student:learningpoints:online:todayspoints" = 0;
\}

/* wait for player to log in */
\$delay(15, TRUE, "4c98");

\$counter = 0;
while(\$this."student:learningpoints" \< 100 \&\& \$this."base:environment")
\{
  \$delay(15*60, TRUE, "47fc");
  if(\$this."udat:idle" \&\& \$this."udat:idle" \< 60*15)
    \$counter++;
  if(\$counter \> 1) \{
    if(\$this."student:learningpoints:online:todayspoints" \< 7) \{
      if(\$this."student:learningpoints" \< 100) \{
        \$this."student:learningpoints" += 1;
        \$this."student:learningpoints:online:todayspoints"++;
      \}
    \}
    \$counter = 0;
  \}
\}

\$this."student:learningpoints:online:regen" = nil;

return TRUE;
      </Core:Property>
      <Core:Property property="merry:act-post:quit%income">
         X[M] mapping map;
string *array;
int i;

/* Set the money based on income */
/*EmitTo(\$\{Chatters:IC:Az:Azrael\}, "Setting income for "+Describe(\$this)+".");*/
if(\$this."trait:income")
\{
/* Check if the player gets more money */
  /* Check if the player has waited a day before getting money */
  if(!\$this."trait:income_time" \|\| (\$this."trait:income_time" \< time()))
  \{

    /* Count the players money */

\$amount = 0;

/* check what the player has on them */

\$objects = (\{ \$actor \});

/* and what is in the players rooms */
map = Get(\$actor, "*");
map = prefixed_map(map, "virtualhome:");
if(sizeof(map_indices(map)) != 0)
\{
  for(i = 0; i \< sizeof(map_values(map)); i++)
  \{
    if(typeof(map_values(map)[i]) == 4)
      \$objects \|= map_values(map)[i]."base:inventory";
  \}
\}

for(i = 0; i \< sizeof(\$objects); i++)
\{
  if(!\$objects[i]."base:volition" \|\| (\$objects[i]==\$this)) \{
    if(\$objects[i]."cash:balance") \{
      \$amount += \$objects[i]."cash:balance";
    \} else if(\$objects[i]."cash:value") \{
      \$amount += \$objects[i]."cash:value";
    \}
    \$objects += \$objects[i]."base:inventory";
  \}
\}

\$this."trait:pouchmoney" = \$amount;

    /* Check if this player already has more money than his income */
    \$money = \$this."trait:money" + \$this."trait:pouchmoney" + Int(\$this."trait:incomecosts");
    /* grant money increase */
    if(\$money \< Int(\$this."trait:income"))
    \{
      \$this."trait:money" = Int(\$this."trait:income") - \$this."trait:pouchmoney" - Int(\$this."trait:incomecosts");
      \$this."trait:income_time" = time()+(60*60*16);
    \}
  \}
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:act-pre:evoke">
         X[M] return TRUE;            
EmitTo(\$actor, "Check evoke");            
if(!\$actor."SkotOS:CurrentLang" \|\| (\$actor."SkotOS:CurrentLang" == "0")) return TRUE;            
            
EmitTo(\$actor, "Act evoke");            
return TRUE;            
            
\$(evoke-actor) = \$evoke;            
            
           
\$(evoke-target) = INLANG("western", 8, \$evoke);            
\$(evoke-witness) = INLANG("western", 8, \$evoke);            
\$(verb-extra:pe) = "(in something)";            
            
return TRUE;
      </Core:Property>
      <Core:Property property="merry:act:say">
         X[M] string *speech_pattern;  
mixed social_args;  
int i, ix;  
  
speech_pattern = Arr(this."trait:speech-pattern");  
if (!sizeof(speech_pattern))  
    return TRUE;  
  
/* Produce the social_args. */  
ix          = sizeof(\$roles);  
social_args = (\{ \});  
for (i = 0; i \< ix; i++)  
    social_args += (\{ GetVar(\$roles[i] + ":preposition"), GetVar(\$roles[i]) \});  
  
Social(this, speech_pattern[random(sizeof(speech_pattern))], \$adverb, \$(raw-evoke), social_args...);
      </Core:Property>
      <Core:Property property="merry:act:start">
         X[M] if(this."skotos:playercapname")\{           
 this."trait:superbrief" = this."skotos:playercapname";           
\}           
           
return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:add-iob">
         X[M] return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "add", \$addition: \$dob, \$target: \$iob);
      </Core:Property>
      <Core:Property property="merry:react-pre:add-iob">
         X[M] if(!\$dob) return TRUE;             
return Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "valid-check", \$addition: \$dob, \$object: \$iob);
      </Core:Property>
      <Core:Property property="merry:setprop-post:appearance:haircolor">
         X[M] return Call(\$\{Allegory:Lib:UrPeople:Description\}, "updatehairdesc", \$action: "haircolor", \$body: \$this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:appearance:hairlength">
         X[M] return Call(\$\{Allegory:Lib:UrPeople:Description\}, "updatehairdesc", \$action: "hairlength", \$body: \$this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:appearance:hairtype">
         X[M] return Call(\$\{Allegory:Lib:UrPeople:Description\}, "updatehairdesc", \$action: "hairtype", \$body: \$this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:appearance:hashair">
         X[M] return Call(\$\{Allegory:Lib:UrPeople:Description\}, "updatehairdesc", \$action: "hashair", \$body: \$this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:skill:career">
         X[M] return Call(\$\{Ironclaw:Lib:Teaching:TeachingLib\}, "updatecareer", \$body: \$this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:skotos:charname">
         X[M] \$this."trait:superbrief" = capitalize(\$this."skotos:charname");
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:animal">
         X[M] Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replacenames", \$object: \$this);
return TRUE;
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:superbrief">
         X[M] return Call(\$\{Allegory:Lib:UrPeople:Description\}, "updatedesc", \$body: \$this);
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:title">
         X[M] Call(\$\{Ironclaw:Lib:Crafting:Lib\}, "replaceadj", \$object: \$this);
Call(\$\{Allegory:Lib:UrPeople:Description\}, "updatedesc", \$body: \$this);
return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1117266189, "arikon", "X", 1117335089, "tonyd", "E", 1117336147, "tonyd", "X", 1117336375, "tonyd", "E", 1117336461, "tonyd", "E", 1117852757, "tonyd", "E", 1117855682, "tonyd", "E", 1118045729, "tonyd", "E", 1120445135, "tonyd", "E", 1123469097, "tonyd", "E", 1123473954, "tonyd", "E", 1123474466, "tonyd", "E", 1123474551, "tonyd", "E", 1123474586, "tonyd", "E", 1123670924, "tonyd", "E", 1123671793, "tonyd", "E", 1123858050, "tonyd", "E", 1123995877, "arikon", "K", 1124165133, "arikon", "E", 1124165236, "arikon", "E", 1124495557, "tonyd", "X", 1124496300, "tonyd", "E", 1124496356, "tonyd", "E", 1124496414, "tonyd", "E", 1124500577, "tonyd", "E", 1124501078, "tonyd", "E", 1124502632, "tonyd", "E", 1124502887, "tonyd", "E", 1124503408, "lunamoon", "E", 1124503500, "lunamoon", "E", 1124503532, "lunamoon", "E", 1124505233, "arikon", "E", 1124505258, "arikon", "E", 1124505324, "arikon", "E", 1124507065, "arikon", "E", 1124507342, "arikon", "E", 1124507418, "arikon", "E", 1124508244, "tonyd", "E", 1124508980, "tonyd", "E", 1124510435, "tonyd", "E", 1124521375, "tonyd", "E", 1124521824, "tonyd", "E", 1124521928, "tonyd", "E", 1124522471, "tonyd", "E", 1124522682, "tonyd", "E", 1124523360, "tonyd", "E", 1124523578, "tonyd", "E", 1124524954, "tonyd", "E", 1124525234, "tonyd", "E", 1124526085, "tonyd", "E", 1124527594, "tonyd", "E", 1124586591, "tonyd", "E", 1124770244, "lunamoon", "E", 1124770379, "lunamoon", "E", 1124860281, "arikon", "E", 1125120737, "tonyd", "E", 1125120798, "tonyd", "E", 1125127249, "tonyd", "E", 1125127425, "tonyd", "E", 1126064482, "tonyd", "E", 1126152588, "lunamoon", "E", 1126153140, "lunamoon", "E", 1126153305, "lunamoon", "E", 1126153576, "lunamoon", "E", 1126505065, "tonyd", "E", 1126506022, "tonyd", "P", 1126506075, "tonyd", "P", 1126506095, "tonyd", "P", 1126506129, "tonyd", "P", 1126506142, "tonyd", "P", 1126506258, "tonyd", "P", 1126506288, "tonyd", "P", 1126506319, "tonyd", "P", 1126506488, "tonyd", "P", 1126506517, "tonyd", "P", 1126506901, "tonyd", "P", 1126506979, "tonyd", "P", 1126507018, "tonyd", "P", 1126507040, "tonyd", "P", 1126507279, "tonyd", "P", 1126507573, "tonyd", "P", 1126507917, "tonyd", "P", 1126507989, "tonyd", "P", 1126508795, "tonyd", "P", 1126509957, "tonyd", "P", 1126510375, "tonyd", "P", 1126927532, "tonyd", "P", 1126927551, "tonyd", "P", 1126929563, "tonyd", "E", 1127008773, "tonyd", "P", 1127009178, "tonyd", "P", 1127026357, "tonyd", "X", 1127027746, "tonyd", "P", 1127028181, "tonyd", "P", 1127030098, "tonyd", "P", 1127367221, "lunamoon", "E", 1127367269, "lunamoon", "E", 1127367292, "lunamoon", "E", 1127367350, "lunamoon", "E", 1127367377, "lunamoon", "E", 1127367507, "lunamoon", "E", 1127367542, "lunamoon", "E", 1127367572, "lunamoon", "E", 1127367613, "lunamoon", "E", 1127367666, "lunamoon", "E", 1127367702, "lunamoon", "E", 1127368432, "lunamoon", "E", 1127368471, "lunamoon", "E", 1127368551, "lunamoon", "E", 1127448237, "tonyd", "P", 1127448843, "tonyd", "P", 1127448863, "tonyd", "P", 1127448892, "tonyd", "P", 1127449116, "tonyd", "P", 1127449723, "tonyd", "P", 1127449773, "tonyd", "P", 1127450024, "tonyd", "P", 1127450715, "tonyd", "P", 1127450736, "tonyd", "P", 1127450763, "tonyd", "P", 1127450877, "tonyd", "P", 1127450996, "tonyd", "P", 1127451021, "tonyd", "P", 1127451043, "tonyd", "P", 1127451081, "tonyd", "P", 1127451153, "tonyd", "P", 1127451252, "tonyd", "P", 1127451358, "lunamoon", "E", 1127451380, "lunamoon", "E", 1127452250, "tonyd", "P", 1127452277, "tonyd", "P", 1127452676, "tonyd", "E", 1127452756, "tonyd", "E", 1127452793, "tonyd", "P", 1127713278, "lunamoon", "E", 1127885434, "tonyd", "E", 1127886713, "tonyd", "E", 1127886995, "tonyd", "E", 1127892352, "tonyd", "E", 1127903926, "tonyd", "E", 1127903964, "tonyd", "E", 1128470526, "tunk_bodin", "X", 1128470634, "tunk_bodin", "X", 1128471184, "tunk_bodin", "X", 1128471452, "tunk_bodin", "X", 1130694224, "tunk_bodin", "X", 1130694626, "tunk_bodin", "X", 1130694949, "tunk_bodin", "X", 1130695169, "tunk_bodin", "X", 1130695240, "tunk_bodin", "X", 1130723334, "tunk_bodin", "X", 1130723464, "tunk_bodin", "X", 1130723587, "tunk_bodin", "X", 1130723744, "tunk_bodin", "X", 1130892056, "tunk_bodin", "X", 1130907068, "tonyd", "E", 1130907107, "tonyd", "E", 1131071997, "tunk_bodin", "X", 1131171689, "tonyd", "E", 1131171761, "tonyd", "E", 1132975844, "lunamoon", "E", 1132975945, "lunamoon", "E", 1133400855, "tonyd", "E", 1133401380, "tonyd", "E", 1135576893, "tonyd", "E", 1135577059, "tonyd", "E", 1135902216, "tonyd", "X", 1135902548, "tonyd", "X", 1136005151, "tonyd", "P", 1136005314, "tonyd", "P", 1136005979, "tonyd", "P", 1136006301, "tonyd", "P", 1136007002, "tonyd", "E", 1136165142, "tonyd", "E", 1136165258, "tonyd", "E", 1136165881, "tonyd", "E", 1136245670, "tonyd", "E", 1136245780, "tonyd", "E", 1136245856, "tonyd", "E", 1136245964, "tonyd", "E", 1136267805, "tonyd", "P", 1136290579, "tonyd", "E", 1136291869, "tonyd", "P", 1136555918, "tonyd", "P", 1136556014, "tonyd", "P", 1136557906, "tonyd", "P", 1136580311, "roccon", "E", 1136582217, "roccon", "E", 1136582263, "roccon", "E", 1136582296, "roccon", "E", 1136582322, "roccon", "E", 1136596475, "tonyd", "P", 1136597042, "tonyd", "P", 1136597093, "tonyd", "P", 1136597148, "tonyd", "P", 1136597494, "tonyd", "P", 1136597638, "tonyd", "P", 1136598075, "tonyd", "P", 1136598355, "tonyd", "P", 1136598458, "tonyd", "P", 1136599668, "tonyd", "P", 1136605233, "tonyd", "P", 1136605326, "tonyd", "P", 1136605436, "tonyd", "P", 1136611404, "tonyd", "E", 1136616823, "sinistrelle", "X", 1136761409, "tonyd", "E", 1136764374, "tonyd", "P", 1136764452, "tonyd", "P", 1136845416, "tunk_bodin", "X", 1136873323, "tonyd", "E", 1136873371, "tonyd", "E", 1136875089, "tonyd", "P", 1137129245, "roccon", "E", 1137216317, "lunamoon", "E", 1137216350, "lunamoon", "E", 1137388641, "roccon", "E", 1137545477, "lunamoon", "E", 1137850969, "lunamoon", "E", 1137851012, "lunamoon", "E", 1137851097, "lunamoon", "E", 1137851142, "lunamoon", "E", 1137851235, "lunamoon", "E", 1137851297, "lunamoon", "E", 1137851336, "lunamoon", "E", 1137851360, "lunamoon", "E", 1137851395, "lunamoon", "E", 1137851447, "lunamoon", "E", 1138440958, "tonyd", "E", 1138441026, "tonyd", "E", 1138441347, "tonyd", "E", 1138443164, "tonyd", "E", 1138445213, "sinistrelle", "E", 1138445577, "sinistrelle", "E", 1138445709, "sinistrelle", "E", 1138445894, "sinistrelle", "E", 1138445930, "sinistrelle", "E", 1138445981, "sinistrelle", "E", 1138446084, "sinistrelle", "E", 1138446207, "tonyd", "E", 1138446215, "sinistrelle", "E", 1138446260, "tonyd", "E", 1138446291, "tonyd", "E", 1138446296, "sinistrelle", "E", 1138446490, "sinistrelle", "E", 1138446549, "sinistrelle", "E", 1138446931, "sinistrelle", "E", 1138447019, "sinistrelle", "E", 1138447144, "sinistrelle", "E", 1138447219, "sinistrelle", "E", 1138447340, "sinistrelle", "E", 1138447720, "sinistrelle", "E", 1138447797, "sinistrelle", "E", 1138447996, "sinistrelle", "E", 1138448114, "sinistrelle", "E", 1138448182, "sinistrelle", "E", 1138448251, "sinistrelle", "E", 1138448306, "sinistrelle", "E", 1138448508, "sinistrelle", "E", 1138448592, "sinistrelle", "E", 1138448652, "sinistrelle", "E", 1138448731, "sinistrelle", "E", 1138448816, "sinistrelle", "E", 1138448903, "sinistrelle", "E", 1138449036, "sinistrelle", "E", 1138449143, "sinistrelle", "E", 1138449296, "sinistrelle", "E", 1138449467, "sinistrelle", "E", 1138449796, "sinistrelle", "E", 1138450075, "sinistrelle", "E", 1138450868, "sinistrelle", "E", 1138451031, "sinistrelle", "E", 1138451177, "sinistrelle", "E", 1138451365, "sinistrelle", "E", 1138451857, "sinistrelle", "E", 1138451972, "sinistrelle", "E", 1138452201, "sinistrelle", "E", 1138452304, "sinistrelle", "E", 1138452454, "tonyd", "E", 1138452735, "sinistrelle", "E", 1138452976, "sinistrelle", "E", 1138453078, "sinistrelle", "E", 1138453254, "sinistrelle", "E", 1138453506, "sinistrelle", "E", 1138453660, "sinistrelle", "E", 1138454042, "sinistrelle", "E", 1138454168, "sinistrelle", "E", 1138454371, "sinistrelle", "E", 1138454473, "sinistrelle", "E", 1138454535, "sinistrelle", "E", 1138454598, "sinistrelle", "E", 1138454670, "sinistrelle", "E", 1138454758, "sinistrelle", "E", 1138454849, "sinistrelle", "E", 1138454949, "sinistrelle", "E", 1138455032, "sinistrelle", "E", 1138455082, "tonyd", "E", 1138455302, "sinistrelle", "E", 1138455363, "sinistrelle", "E", 1138455578, "sinistrelle", "E", 1138455643, "sinistrelle", "E", 1138455704, "sinistrelle", "E", 1138455753, "sinistrelle", "E", 1138455825, "sinistrelle", "E", 1138455906, "sinistrelle", "E", 1138455957, "sinistrelle", "E", 1138456026, "sinistrelle", "E", 1138456086, "sinistrelle", "E", 1138456178, "sinistrelle", "E", 1138456273, "sinistrelle", "E", 1138456344, "sinistrelle", "E", 1138456436, "sinistrelle", "E", 1138456500, "sinistrelle", "E", 1138456594, "sinistrelle", "E", 1138456668, "sinistrelle", "E", 1138456847, "sinistrelle", "E", 1138456912, "sinistrelle", "E", 1138456976, "sinistrelle", "E", 1138457040, "sinistrelle", "E", 1138457096, "sinistrelle", "E", 1138457261, "sinistrelle", "E", 1138457297, "sinistrelle", "E", 1138457349, "sinistrelle", "E", 1138457482, "sinistrelle", "E", 1138457544, "sinistrelle", "E", 1138457553, "sinistrelle", "E", 1138457749, "sinistrelle", "E", 1138457880, "sinistrelle", "E", 1138457968, "sinistrelle", "E", 1138515138, "lunamoon", "E", 1138515203, "lunamoon", "E", 1138515708, "lunamoon", "K", 1138760372, "tunk_bodin", "X", 1138760643, "tunk_bodin", "X", 1138760762, "tunk_bodin", "X", 1138776894, "tunk_bodin", "X", 1139156703, "tunk_bodin", "X", 1139156847, "tunk_bodin", "X", 1139156945, "tunk_bodin", "X", 1139158890, "tunk_bodin", "X", 1139160814, "tunk_bodin", "X", 1139161446, "tunk_bodin", "X", 1139162772, "tunk_bodin", "X", 1139239924, "tunk_bodin", "X", 1139239988, "tunk_bodin", "X", 1139335449, "tunk_bodin", "X", 1139648967, "tonyd", "E", 1139705526, "tonyd", "P", 1139883764, "tonyd", "P", 1140166675, "sinistrelle", "E", 1140169191, "sinistrelle", "E", 1140342155, "sinistrelle", "E", 1140342631, "sinistrelle", "E", 1140344852, "sinistrelle", "E", 1140344983, "sinistrelle", "E", 1140345825, "sinistrelle", "E", 1140345933, "sinistrelle", "E", 1140346196, "sinistrelle", "E", 1140346869, "sinistrelle", "E", 1140346924, "sinistrelle", "E", 1140402552, "tonyd", "E", 1140491881, "tonyd", "E", 1140525510, "tonyd", "E", 1140739404, "lunamoon", "E", 1140739449, "lunamoon", "E", 1141021989, "tonyd", "E", 1141098255, "tonyd", "P", 1141180382, "tonyd", "P", 1141188285, "tonyd", "P", 1141188460, "tonyd", "P", 1141461284, "tonyd", "E", 1141462368, "tonyd", "E", 1141469540, "tonyd", "P", 1141537173, "tonyd", "P", 1141540292, "tonyd", "P", 1141540408, "tonyd", "P", 1141540419, "tonyd", "P", 1141540618, "tonyd", "P", 1141540786, "tonyd", "P", 1141540842, "tonyd", "P", 1141541374, "tonyd", "P", 1141541486, "tonyd", "P", 1141541551, "tonyd", "P", 1141541571, "tonyd", "P", 1141541599, "tonyd", "P", 1141541638, "tonyd", "P", 1141541678, "tonyd", "P", 1141541701, "tonyd", "P", 1141541760, "tonyd", "P", 1141541943, "tonyd", "P", 1141541964, "tonyd", "P", 1141542186, "tonyd", "P", 1141542211, "tonyd", "P", 1141542647, "tonyd", "P", 1141542691, "tonyd", "P", 1141542739, "tonyd", "P", 1142135416, "tonyd", "P", 1142502283, "tonyd", "E", 1142502977, "tonyd", "E", 1142503073, "tonyd", "E", 1145068573, "tonyd", "P", 1145105682, "barbra18", "K", 1145816902, "tunk_bodin", "X", 1146122378, "tonyd", "P", 1146123101, "tonyd", "P", 1146123444, "tonyd", "P", 1146123529, "tonyd", "P", 1146124200, "tonyd", "P", 1146124869, "tonyd", "P", 1146126233, "tonyd", "P", 1146126267, "tonyd", "P", 1146126396, "tonyd", "P", 1146126496, "tonyd", "P", 1146183403, "tonyd", "P", 1146183614, "tonyd", "P", 1146183895, "tonyd", "P", 1146362409, "tonyd", "E", 1146364565, "tonyd", "E", 1146380180, "tonyd", "E", 1146561175, "tonyd", "E", 1146561213, "tonyd", "E", 1146561295, "tonyd", "E", 1146561347, "tonyd", "E", 1146561498, "tonyd", "P", 1146616643, "tonyd", "E", 1146617854, "tonyd", "P", 1146621517, "tonyd", "P", 1146621586, "tonyd", "E", 1146972976, "tonyd", "P", 1146973024, "tonyd", "P", 1146973450, "tonyd", "P", 1146973568, "tonyd", "P", 1146973632, "tonyd", "P", 1146973796, "tonyd", "P", 1146973831, "tonyd", "P", 1146974047, "tonyd", "P", 1146974137, "tonyd", "P", 1146974157, "tonyd", "P", 1146974194, "tonyd", "P", 1146974261, "tonyd", "P", 1146975227, "tonyd", "P", 1146984339, "tonyd", "X", 1147218896, "tonyd", "E", 1147263986, "tonyd", "P", 1147264175, "tonyd", "P", 1147268858, "tonyd", "P", 1147779873, "tonyd", "E", 1147785621, "tonyd", "E", 1147785701, "tonyd", "E", 1147785853, "tonyd", "E", 1148765267, "roccon", "E", 1148765316, "roccon", "E", 1148766004, "roccon", "E", 1148766102, "roccon", "E", 1148766151, "roccon", "E", 1148766176, "roccon", "E", 1148766574, "roccon", "E", 1148766594, "roccon", "E", 1148767429, "roccon", "E", 1148767442, "roccon", "E", 1148767462, "roccon", "E", 1148767515, "roccon", "E", 1148767540, "roccon", "E", 1148767657, "roccon", "E", 1148767707, "roccon", "E", 1148767827, "roccon", "E", 1148767879, "roccon", "E", 1148768036, "roccon", "E", 1148768054, "roccon", "E", 1148768084, "roccon", "E", 1148768146, "roccon", "E", 1148768186, "roccon", "E", 1148768288, "roccon", "E", 1148768323, "roccon", "E", 1148768361, "roccon", "X", 1148768414, "roccon", "E", 1148768473, "roccon", "E", 1148768519, "roccon", "X", 1148768538, "roccon", "E", 1148768559, "roccon", "E", 1148768594, "roccon", "E", 1148768643, "roccon", "E", 1148768823, "roccon", "E", 1148768959, "roccon", "E", 1148769013, "roccon", "X", 1148769133, "roccon", "E", 1148769155, "roccon", "E", 1148769196, "roccon", "X", 1148769237, "roccon", "E", 1148769282, "roccon", "E", 1148769347, "roccon", "E", 1148769415, "roccon", "E", 1148769449, "roccon", "E", 1148769488, "roccon", "E", 1148772024, "roccon", "X", 1148772109, "roccon", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">1</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
