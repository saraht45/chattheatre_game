<object clone="/obj/properties" owner="tunk_bodin">
  <Core:PropertyContainer>
    <Ur:UrObject/>
    <Core:PCProperties>
      <Core:Property property="merry:lib:druggedemits">
         X[M] /* The emits sent while drugged */     
switch(random(5))                   
\{                   
  case 4:                   
    EmitIn(\$actor."base:environment", Describe(\$actor)+ " smiles " +oneof("blissfully", "euphorically", "helplessly")+ ".", \$actor);           
    EmitTo(\$actor, "You smile " +oneof("blissfully", "euphorically", "helplessly")+ ".");                   
  break;              
  case 3:                   
    EmitIn(\$actor."base:environment", Describe(\$actor)+ " sweats " +oneof("profusely", "alot", "extensively")+ ".", \$actor);           
    EmitTo(\$actor, "You sweat " +oneof("profusely", "alot", "extensively")+ ".");                   
  break;              
  case 2:                   
    EmitIn(\$actor."base:environment", Describe(\$actor)+ " staggers " +oneof("briefly", "suddenly", "uncontrollably")+ ".", \$actor);           
    EmitTo(\$actor, "You stagger " +oneof("briefly", "suddenly", "uncontrollably")+ ".");                   
  break;                   
  case 1:                   
    EmitIn(\$actor."base:environment", Describe(\$actor)+ " gazes into the distance " +oneof("meaninglessly", "dreamily", "absently")+ ".", \$actor);           
    EmitTo(\$actor, "You gaze into the distance " +oneof("meaninglessly", "dreamily", "absently")+ ".");                   
  break;                   
  case 0:                   
    EmitIn(\$actor."base:environment", Describe(\$actor)+ " shivers " +oneof("barely", "slightly", "somewhat")+ ".", \$actor);           
    EmitTo(\$actor, "You shiver " +oneof("barely", "slightly", "somewhat")+ ".");                   
  break;                   
  default:                   
  break;                   
\}                   
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:effects">
         X[M] /* The first emit and the timer starter */     
EmitTo(\$actor, Describe(\$ob, nil, \$actor)+ " tastes interesting. You feel a strange as you start to lose control.");                  
EmitIn(\$actor."base:environment", Describe(\$actor)+ " " +\$verb+ "s " +Describe(\$ob, nil, nil, STYLE_NONPOSS)+ " and " +\$actor."base:possessive"+ " eyes begin to glaze over.", \$actor);              

if(\$ob."effect:type" == "drug") \{    
  \$actor."is:drugged" = 1;       
  Call(\$this, "starttimer");             
\} else if(\$ob."effect:type" == "poison") \{           
  \$actor."is:poisoned" = 1;
  Set(\$actor, "base:immobile", 1); 
  Call(\$this, "starttimer");  
\} else if(\$ob."effect:type" == "pebbled")\{  
  \$actor."is:pebbled" = 1;
  Call(\$this, "starttimer");       
\} else if(\$ob."effect:type" == "euphoria") \{   
  \$actor."is:euphoric" = 1;   
  Call(\$this, "starttimer");
\} else if(\$ob."effect:type" == "loved") \{   
  \$actor."is:loved" = 1;   
  Call(\$this, "starttimer");     
\} else \{   
  return FALSE;   
\}  
 
if(\$ob."no:slay") \{   
  return FALSE;   
\} else \{   
  Slay(\$ob);   
  return FALSE;   
\}
      </Core:Property>
      <Core:Property property="merry:lib:euphoricemits">
         X[M] /* The emits sent while drugged */     
switch(random(5))                   
\{                   
  case 4:                   
    EmitIn(\$actor."base:environment", Describe(\$actor)+ " is all woohoo and stuff.", \$actor);           
    EmitTo(\$actor, "You are all woohoo and stuff.");                   
  break;              
  case 3:                   
    EmitIn(\$actor."base:environment", Describe(\$actor)+ " thinks you're pretty.", \$actor);           
    EmitTo(\$actor, "You thinks everyone is pretty.");                   
  break;              
  case 2:                   
    EmitIn(\$actor."base:environment", Describe(\$actor)+ " beams.", \$actor);           
    EmitTo(\$actor, "You beam.");                   
  break;                   
  case 1:                   
    EmitIn(\$actor."base:environment", Describe(\$actor)+ " licks the air.", \$actor);           
    EmitTo(\$actor, "You lick the air.");                   
  break;                   
  case 0:                   
    EmitIn(\$actor."base:environment", Describe(\$actor)+ " is euphoric.", \$actor);           
    EmitTo(\$actor, "You are euphoric.");                   
  break;                   
  default:                   
  break;                   
\}                   
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:pebbleemits">
         X[M] /* The emits sent while under the effects of the pebbles*/     
switch(random(5))                   
\{                   
  case 4:                   
    EmitIn(\$actor."base:environment", Describe(\$actor)+ " stares into space vacantly.", \$actor);           
    EmitTo(\$actor, "You forget everything that is happening while drugged.");                   
  break;              
  case 3:                   
    EmitIn(\$actor."base:environment", Describe(\$actor)+ " looks and acts different somehow.", \$actor);           
    EmitTo(\$actor, "You can't help but to react and think the totally opposite of how you usually do.");                   
  break;              
  case 2:                   
    EmitIn(\$actor."base:environment", Describe(\$actor)+ " stomach growls loudly.", \$actor);           
    EmitTo(\$actor, "You are ravenously starving, even though you ate recently.");                   
  break;                   
  case 1:                   
    EmitIn(\$actor."base:environment", Describe(\$actor)+ " licks  " +\$actor."base:possessive"+ " lips repeatedly.", \$actor);           
    EmitTo(\$actor, "You have a very dry mouth and can think of little else other than water.");                   
  break;                   
  case 0:                   
    EmitIn(\$actor."base:environment", Describe(\$actor)+ " is spacey.", \$actor);           
    EmitTo(\$actor, "You can't seem to remember much.");                   
  break;                   
  default:                   
  break;                   
\}                   
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:poisonedemits">
         X[M] /* The emits sent while poisoned */     
switch(random(10))                   
\{ 
  case 9:                   
    EmitIn(\$actor."base:environment", Describe(\$actor)+ "'s body goes stiff.", \$actor);           
    EmitTo(\$actor, "Every joint in your body locks up. You are completely unable to move.");                   
  break; 
  case 8:                   
    EmitIn(\$actor."base:environment", Describe(\$actor)+ " groans in pain.", \$actor);           
    EmitTo(\$actor, "You groan. You feel as though someone has kicked you in the gut.");                   
  break; 
  case 7:                   
    EmitIn(\$actor."base:environment", Describe(\$actor)+ "'s limbs spasm at random.", \$actor);           
    EmitTo(\$actor, "A series of spasms tears through your body, but you have no power to stop them.");                   
  break; 
  case 6:                   
    EmitIn(\$actor."base:environment", Describe(\$actor)+ " begins to break out in a sweat.", \$actor);           
    EmitTo(\$actor, "Beads of sweat collect on your forehead as a wave of heat washes over your body.");                   
  break;
  case 5:                   
    EmitIn(\$actor."base:environment", Describe(\$actor)+ " looks about ready to vomit.", \$actor);           
    EmitTo(\$actor, "Your stomach rolls with nausea. You feel like you are about to vomit.");                   
  break;                    
  case 4:                   
    EmitIn(\$actor."base:environment", Describe(\$actor)+ " is rigid and still.", \$actor);           
    EmitTo(\$actor, "Your body goes rigid and stills completely. You've lost control of yourself.");                   
  break;              
  case 3:                   
    if(\$actor."base:stance" == "lying")\{
       EmitIn(\$actor."base:environment", Describe(\$actor)+ " writhes on the ground.", \$actor);           
       EmitTo(\$actor, "You writhe in pain on the ground.");
       return TRUE;
   \} else \{
       EmitIn(\$actor."base:environment", Describe(\$actor)+ " collapses unexpectedly on the ground.", \$actor);           
       EmitTo(\$actor, "You unexpectedly collapse on the ground and are unable to move further.");
       Set(\$actor, "base:stance", "lying");
       return TRUE;
   \}                  
  break;              
  case 2:                   
    EmitIn(\$actor."base:environment", Describe(\$actor)+ " looks to be suffering from something unusual.", \$actor);           
    EmitTo(\$actor, "You feel unusual, and are fairly sure you've been poisoned.");                   
  break;                   
  case 1:                   
    EmitIn(\$actor."base:environment", Describe(\$actor)+ " stares aimlessly at the view above.", \$actor);           
    EmitTo(\$actor, "You stare aimlessly at the view above you. It's likely not as spectacular as you hoped.");                   
  break;                   
  case 0:                   
    EmitIn(\$actor."base:environment", Describe(\$actor)+ " doesn't look to be their usual self.", \$actor);           
    EmitTo(\$actor, "You don't feel like your usual self. Being unable to move is a real downer.");                   
  break;                   
  default:                   
  break;                   
\}                   
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:starttimer">
         X[M] /* The timer and finish code when it runs out */       
if(\$this.timer)                     
\{                                      
  \$delay(1, TRUE, "484b");                     

  if(\$actor."is:drugged") \{                
    Call(\$this, "druggedemits");     
    return TRUE; 
  \}
  if(\$actor."is:pebbled")\{
    Call(\$this, "pebbleemits");
    return TRUE; 
  \}      
  if(\$actor."is:poisoned") \{               
    Call(\$this, "poisonedemits");     
    return TRUE;   
  \}
  if(\$actor."is:euphoric") \{                
    Call(\$this, "euphoricemits");     
    return TRUE;   
  \}     
  if(\$actor."is:loved") \{                
    Call(\$this, "valentinesemits");     
    return TRUE;   
  \}                  
  return TRUE;                     
\} else \{
                     
\} 

/* NOTE: this timer applies to ALL effects, poisons, etc.  In the future, this lib should be updated to allow each individual substance to declare how long they last and their frequency */
/* Duration should call from the substance's "trait:duration" property in the future */
/* Duration for now is set to 1 hour */
\$duration = 60 * 60;

/* Frequency should call from the substance's "trait:frequency property in the future */
/* Duration for now is set to 5 minutes */
\$frequency = 60 * 15;

/* The ticker to kill the script when the time is up */
\$curTime = 0;
                    
\$delay(1, TRUE, "8a49");

while(\$curTime \< \$duration) \{         
  if(\$actor."is:drugged") \{                
    Call(\$this, "druggedemits");
  \}  
  if(\$actor."is:pebbled") \{
    Call(\$this, "pebbleemits");
  \}    
  if(\$actor."is:poisoned") \{                
    Call(\$this, "poisonedemits");
  \}      
  if(\$actor."is:euphoric") \{                
    Call(\$this, "euphoricemits");
  \}
  if(\$actor."is:loved") \{                
    Call(\$this, "valentinesemits");
  \}

  /* Add some randomness to the frequency of the call */
  \$randDel = \$frequency + random(20);
  \$curTime = \$curTime + \$randDel;

  \$delay(\$randDel, TRUE, "b73d");               
\}                     
        
\$actor."is:drugged" = nil;    
\$actor."is:poisoned" = nil;
Set(\$actor, "base:immobile", 0);    
\$actor."is:euphoric" = nil; 
\$actor."is:pebbled" = nil;     
\$actor."is:loved" = nil;          
EmitTo(\$actor, "You feel your head has mostly cleared.");
EmitIn(\$actor."base:environment", Describe(\$actor)+ " seems to be doing better now.", \$actor);             
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:valentinesemits">
         X[M] /* The emits sent while drugged */     
switch(random(5))                   
\{                   
  case 5:                   
    EmitIn(\$actor."base:environment", Describe(\$actor)+ " lasciviously licks their lips.", \$actor);           
    EmitTo(\$actor, "You want to kiss them all over, and over and over. And over again. ('Til the night closes in.)");                   
  break;  
  case 4:                   
    EmitIn(\$actor."base:environment", Describe(\$actor)+ " looks completely enamored.", \$actor);           
    EmitTo(\$actor, "You are completely enamored.");                   
  break;              
  case 3:                   
    EmitIn(\$actor."base:environment", Describe(\$actor)+ " stares at you wantonly.", \$actor);           
    EmitTo(\$actor, "You totally believe everyone is naked, and they all look mighty fine, too.");                   
  break;              
  case 2:                   
    EmitIn(\$actor."base:environment", Describe(\$actor)+ " fawningly coos over random people.", \$actor);           
    EmitTo(\$actor, "You think everyone is lovely, and everything is wonderful. There's nothing that could ever take this feeling of contentment from you.");                   
  break;                   
  case 1:                   
    EmitIn(\$actor."base:environment", Describe(\$actor)+ " sighs dreamily.", \$actor);           
    EmitTo(\$actor, "You can't help but think how wonderful it is to be in love, with everyone, all the time.");                   
  break;                   
  case 0:                   
    EmitIn(\$actor."base:environment", Describe(\$actor)+ " blissfully murmurs your name.", \$actor);           
    EmitTo(\$actor, "You can't help but believe that the current person in your sights is intended to be your next lover. You know they will perform exceptionally.");                   
  break;                   
  default:                   
  break;                   
\}                   
return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1147815346, "tunk_bodin", "X", 1147817300, "tunk_bodin", "X", 1147817776, "tunk_bodin", "X", 1147821272, "tunk_bodin", "X", 1147911740, "tunk_bodin", "X", 1338551200, "meandmine", "E", 1338551287, "meandmine", "E", 1338551693, "meandmine", "E", 1338552628, "meandmine", "E", 1338554690, "meandmine", "E", 1360891596, "meandmine", "E", 1360891792, "meandmine", "E", 1360898165, "meandmine", "E", 1360898452, "meandmine", "E", 1360960945, "meandmine", "E", 1360968194, "meandmine", "E", 1421649533, "rorschakovacs", "E", 1422727916, "slurpeeslurp", "E", 1422728123, "slurpeeslurp", "E", 1422728597, "rorschakovacs", "E", 1422730277, "rorschakovacs", "E", 1422730364, "rorschakovacs", "E", 1422730515, "rorschakovacs", "E", 1422730897, "rorschakovacs", "E", 1422731103, "rorschakovacs", "E", 1422731749, "rorschakovacs", "E", 1422732709, "rorschakovacs", "E", 1422732721, "abigail", "E", 1422732990, "rorschakovacs", "E", 1422732996, "abigail", "E", 1422733038, "rorschakovacs", "E", 1422733053, "abigail", "E", 1422733658, "abigail", "E", 1422733804, "abigail", "E", 1422734126, "rorschakovacs", "E", 1422734246, "rorschakovacs", "E", 1422735437, "abigail", "E", 1422735575, "rorschakovacs", "E", 1422735757, "abigail", "E", 1422735819, "abigail", "E", 1422735962, "rorschakovacs", "E", 1432261573, "rorschakovacs", "E", 1461348286, "ezralee", "E", 1461457428, "slurpeeslurp", "E" \})
      </Core:Property>
    </Core:PCProperties>
    <Notes:Notes/>
  </Core:PropertyContainer>
</object>
