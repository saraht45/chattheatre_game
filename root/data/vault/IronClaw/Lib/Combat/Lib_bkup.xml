<object clone="/base/obj/thing" owner="tunk_bodin">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="100" verb2="are carrying" verb3="is carrying"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="true">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details/>
    <Base:Combat>
      <Base:Strength value="10"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="descriptions:cutting:avoided:dodge">
         (\{ (\{ "DEFENDER DEF_MOVES out of the \{way\|path\} of ATTACKER's incoming \{cut\|slash\|attack\|assault\|onslaught\}", "DEFENDER DEF_MOVES out of the \{way\|path\} of your incoming \{cut\|slash\|attack\|assault\|onslaught\}", "You DEF_MOVES out of the \{way\|path\} of ATTACKER's incoming \{cut\|slash\|attack\|assault\|onslaught\}" \}) \})
      </Core:Property>
      <Core:Property property="descriptions:cutting:avoided:parry">
         (\{ (\{ "DEFENDER stops ATTACKER's ATK_MOVES by \{cutting\|slashing\} ATK_OBJECTIVE with DEF_WEAPON", "DEFENDER stops your ATK_MOVES by \{cutting\|slashing\} you with DEF_WEAPON", "You stop ATTACKER's ATK_MOVES by \{cutting\|slashing\} ATK_OBJECTIVE with DEF_WEAPON" \}) \})
      </Core:Property>
      <Core:Property property="descriptions:cutting:failed-defence:dodge">
         (\{ (\{ "DEFENDER \{tries\|fails\|is too slow\|stumbles while trying\} to \{roll\|step\|sidestep\|jump\} out of the way of \{WEAPON_FULL\|ATTACKER's incoming \{cut\|slash\}\}. WEAPON_FULL \{scrapes\|slides\|slashes\} across TARGET", "DEFENDER \{tries\|fails\|is too slow\|stumbles while trying\} to \{roll\|step\|sidestep\|jump\} out of the way of \{WEAPON_FULL\|your incoming \{cut\|slash\}\}. Your WEAPON \{scrapes\|slides\|slashes\} across TARGET", "You \{try\|fail\|are too slow\|stumble while trying\} to \{roll\|step\|sidestep\|jump\} out of the way of \{WEAPON_FULL\|ATTACKER's incoming \{cut\|slash\}\}. WEAPON_FULL \{scrapes\|slides\|slashes\} across TARGET" \}) \})
      </Core:Property>
      <Core:Property property="descriptions:cutting:failed-defence:parry">
         (\{ (\{ "ATTACKER \{easily\|quickly\|efficiently\} \{knocks\|beats\|pushes\} DEF_WEAPON_FULL aside, \{\{stabbing\|cutting\|slicing\} TARGET\|striking true\|landing a telling blow\}", "You \{easily\|quickly\|efficiently\} \{knock\|beat\|push\} DEF_WEAPON_FULL aside, \{\{stabbing\|cutting\|slicing\} TARGET\|striking true\|landing a telling blow\}", "ATTACKER \{easily\|quickly\|efficiently\} \{knocks\|beats\|pushes\} DEF_WEAPON_FULL aside, \{\{stabbing\|cutting\|slicing\} TARGET\|striking true\|landing a telling blow\}" \}) \})
      </Core:Property>
      <Core:Property property="descriptions:cutting:hit">
         (\{ (\{ "ATTACKER \{easily\|quickly\|efficiently\} \{slash\|cut\|slice\|wound\} TARGET with ATK_POSSESSIVE \{weapon\|blade\|sword\}", "You \{easily\|quickly\|efficiently\} \{slash\|cut\|slice\|wound\} TARGET with your \{weapon\|blade\|sword\}", "ATTACKER \{easily\|quickly\|efficiently\} \{slash\|cut\|slice\|wound\} TARGET with ATK_POSSESSIVE \{weapon\|blade\|sword\}" \}) \})
      </Core:Property>
      <Core:Property property="descriptions:cutting:missed">
         (\{ (\{ "An over-extended \{cut\|swing\|slash\|swing\} by ATTACKER misses DEFENDER", "Your over-extended \{cut\|swing\|slash\|swing\} misses DEFENDER", "An over-extended \{cut\|swing\|slash\|swing\} by ATTACKER misses you" \}) \})
      </Core:Property>
      <Core:Property property="descriptions:dodge:failure">
         (\{ (\{ ". \<describe what='\$(target)'/\> tries to \{jump\|leap\|dodge\} out of the way, but fails", ". You try to \{jump\|leap\|dodge\} out of the way, but fail", ". \<describe what='\$(target)'/\> tries to \{jump\|leap\|dodge\} out of the way, but fails" \}) \})
      </Core:Property>
      <Core:Property property="descriptions:dodge:success">
         (\{ (\{ ". \<describe what='\$(target)'/\> \{jumps\|leaps\|dodges\} out of the way", ". You \{jump\|leap\|dodge\} out of the way", ". \<describe what='\$(target)'/\> \{jumps\|leaps\|dodges\} out of the way" \}) \})
      </Core:Property>
      <Core:Property property="descriptions:striking:avoided:dodge">
         (\{ (\{ "DEFENDER DEF_MOVES out of the \{way\|path\} of ATTACKER's \{incoming\|\} \{WEAPON\|blow\|swing\|strike\}", "DEFENDER DEF_MOVES out of the \{way\|path\} of your \{incoming\|\} \{WEAPON\|blow\|swing\|strike\}", "You DEF_MOVES_P out of the \{way\|path\} of ATTACKER's \{incoming\|\} \{WEAPON\|blow\|swing\|strike\}" \}), (\{ "DEFENDER ducks under ATTACKER's \{incoming\|\} \{WEAPONblow\|swing\|strike\}", "DEFENDER ducks under your \{incoming\|\} \{WEAPON\|blow\|swing\|strike\}", "You duck under ATTACKER's \{incoming\|\} \{WEAPON\|blow\|swing\|strike\}" \}) \})
      </Core:Property>
      <Core:Property property="descriptions:striking:damage:dodge">
         (\{ (\{ "\{Belatedly,\|Tardily,\|Ultimately,\|\|\|\} DEFENDER \{attempts\|fails\|tries\|is too slow\|aims\|strives\|struggles\|endeavors\|aspires\|undertakes\} to \{elude\|escape\|block\|dodge\|DEF_MOVES_P out of the way of\|circumvent\|evade\|get around\|deflect\|fend off\|outwit\} the incoming WEAPON_BLOW of ATTACKER\{, which \{pummels\|bashes\|beats\|collides with\|crashes into\|knocks\|slams\|smashes into\|thumps\|whacks\|strikes\|assaults\|clobbers\} TARGET ADVERB\|\}", "\{Belatedly,\|Tardily,\|Ultimately,\|\|\|\} DEFENDER \{attempts\|fails\|tries\|is too slow\|aims\|strives\|struggles\|endeavors\|aspires\|undertakes\} to \{elude\|escape\|block\|dodge\|DEF_MOVES_P out of the way of\|circumvent\|evade\|get around\|deflect\|fend off\|outwit\} your WEAPON_BLOW\{, which \{pummels\|bashes\|beats\|collides with\|crashes into\|knocks\|slams\|smashes into\|thumps\|whacks\|strikes\|assaults\|clobbers\} TARGET ADVERB\|\}", "\{Belatedly,\|Tardily,\|Ultimately,\|\|\|\} you \{attempt\|fail\|try\|are too slow\|aim\|strive\|struggle\|endeavor\|aspire\|undertake\} to \{elude\|escape\|block\|dodge\|DEF_MOVES_P out of the way of\|circumvent\|evade\|get around\|deflect\|fend off\|outwit\} the incoming WEAPON_BLOW of ATTACKER\{, which \{pummels\|bashes\|beats\|collides with\|crashes into\|knocks\|slams\|smashes into\|thumps\|whacks\|strikes\|assaults\|clobbers\} TARGET ADVERB\|\}" \}) \})
      </Core:Property>
      <Core:Property property="descriptions:striking:failed-defence:dodge">
         (\{ (\{ "\{Belatedly,\|Tardily,\|Ultimately,\|\|\|\} DEFENDER \{attempts\|fails\|tries\|is too slow\|aims\|strives\|struggles\|endeavors\|aspires\|undertakes\} to \{elude\|escape\|block\|dodge\|DEF_MOVES_P out of the way of\|circumvent\|evade\|get around\|deflect\|fend off\|outwit\} the incoming WEAPON_BLOW of ATTACKER, which fortunately \{glances\|bounces\|brushes\|careens\|caroms\|contacts\|darts\|grazes\|hits off\|kisses\|rebounds\|scrapes\|shaves\|skims\} TARGET \{fruitlessly\|uselessly\|futilely\|worthlessly\|incompetently\|ineffectively\|ineffectually\|unrewardingly\}", "\{Belatedly,\|Tardily,\|Ultimately,\|\|\|\} DEFENDER \{attempts\|fails\|tries\|is too slow\|aims\|strives\|struggles\|endeavors\|aspires\|undertakes\} to \{elude\|escape\|block\|dodge\|DEF_MOVES_P out of the way of\|circumvent\|evade\|get around\|deflect\|fend off\|outwit\} your WEAPON_BLOW, which unfortunately \{glances\|bounces\|brushes\|careens\|caroms\|contacts\|darts\|grazes\|hits off\|kisses\|rebounds\|scrapes\|shaves\|skims\} TARGET \{fruitlessly\|uselessly\|futilely\|worthlessly\|incompetently\|ineffectively\|ineffectually\|unrewardingly\}", "\{Belatedly,\|Tardily,\|Ultimately,\|\|\|\} you \{attempt\|fail\|try\|are too slow\|aim\|strive\|struggle\|endeavor\|aspire\|undertake\} to \{elude\|escape\|block\|dodge\|DEF_MOVES_P out of the way of\|circumvent\|evade\|get around\|deflect\|fend off\|outwit\} the incoming WEAPON_BLOW of ATTACKER, which \{glances\|bounces\|brushes\|careens\|caroms\|contacts\|darts\|grazes\|hits off\|kisses\|rebounds\|scrapes\|shaves\|skims\} TARGET \{fruitlessly\|uselessly\|futilely\|worthlessly\|incompetently\|ineffectively\|ineffectually\|unrewardingly\}" \}) \})
      </Core:Property>
      <Core:Property property="descriptions:striking:hit">
         (\{ (\{ "ATTACKER \{easily\|quickly\|efficiently\} \{hits\|strikes\} TARGET with ATK_POSSESSIVE WEAPON", "You \{easily\|quickly\|efficiently\} \{hit\|strike\} TARGET with your WEAPON", "ATTACKER \{easily\|quickly\|efficiently\} \{hits\|strikes\} TARGET with ATK_POSSESSIVE WEAPON" \}) \})
      </Core:Property>
      <Core:Property property="descriptions:striking:missed">
         (\{ (\{ "An over-extended \{blow\|swing\|swing\} by ATTACKER misses DEFENDER", "Your over-extended \{blow\|swing\|swing\} misses DEFENDER", "An over-extended \{blow\|swing\|swing\} by ATTACKER misses you" \}), (\{ "ATTACKER swings wildly, \{utterly\|completely\|totally\|\} missing DEFENDER", "Your swing wildly, \{utterly\|completely\|totally\|\} failing to hit DEFENDER", "ATTACKER swings wildly at you, \{utterly\|completely\|totally\|\} failing to hit" \}) \})
      </Core:Property>
      <Core:Property property="descriptions:unknown:avoided">
         (\{ (\{ "ATTACKER ADVERB attacks TARGET, but DEFENDER manages to avoid the blow", "You ADVERB attack TARGET, but DEFENDER manages to avoid the blow", "ATTACKER ADVERB attacks TARGET, but you manage to avoid the blow" \}), (\{ "ATTACKER ADVERB tries to land an attack on TARGET, but DEFENDER manages to avoid the blow", "You ADVERB try to land an attack on TARGET, but DEFENDER manages to avoid the blow", "ATTACKER ADVERB tries to land an attack on TARGET, but you manage to avoid the blow" \}) \})
      </Core:Property>
      <Core:Property property="descriptions:unknown:avoided:dodge">
         (\{ (\{ "ATTACKER ADVERB attacks TARGET, but DEFENDER easily sidesteps", "You ADVERB attack TARGET, but DEFENDER easily sidesteps", "ATTACKER ADVERB attacks TARGET, but you easily sidestep" \}), (\{ "ATTACKER ADVERB tries to land an attack on TARGET, but DEFENDER manages to roll out of the way", "You ADVERB try to land an attack on TARGET, but DEFENDER manages to roll out of the way", "ATTACKER ADVERB tries to land an attack on TARGET, but you manage to roll out of the way" \}), (\{ "DEFENDER circles ATTACKER, avoiding his ADVERB made attack", "DEFENDER circles you, avoiding your ADVERB made attack", "You circle ATTACKER, avoiding his ADVERB made attack" \}) \})
      </Core:Property>
      <Core:Property property="descriptions:unknown:damage">
         (\{ (\{ ". Your blade bites deep.", ". \<describe what='\$(attacker)'/\>'s blade bites deep.", ". \<describe what='\$(attacker)'/\>'s blade bites deep." \}), (\{ ". You injure \<describe what='\$(target)'/\> badly.", ". \<describe what='\$(attacker)'/\> injures \<describe what='\$(target)' looker='\$(target)'/\> badly.", ". \<describe what='\$(attacker)'/\> injures \<describe what='\$(target)'/\> badly" \}) \})
      </Core:Property>
      <Core:Property property="descriptions:unknown:failed-defence">
         (\{ (\{ "ATTACKER ADVERB attacks TARGET, despite DEFENDER's attempt to avoid the blow. The attack is only glancing", "You ADVERB attack TARGET, despite DEFENDER's attempt to avoid the blow. The attack is only glancing", "ATTACKER ADVERB attacks TARGET, despite your attempt to avoid the blow. The attack is only glancing" \}) \})
      </Core:Property>
      <Core:Property property="descriptions:unknown:hit">
         (\{ (\{ "You \$adverb swipe your claws at \<describe what='\$(target)'/\>", "\<describe what='\$(attacker)'/\> \$adverb swipes \$(attacker.base:possessive) claws at \<describe what='\$(target)' looker='\$(target)'/\>", "\<describe what='\$(attacker)'/\> \$adverb swipes \$(attacker.base:possessive) claws at \<describe what='\$(target)'/\>" \}) \})
      </Core:Property>
      <Core:Property property="descriptions:unknown:missed">
         (\{ (\{ "You \$adverb \{miss\|fail to hit\} \<describe what='\$(target)'/\>", "\<describe what='\$(attacker)'/\> \$adverb \{misses\|fails to hit\} \<describe what='\$(target)' looker='\$(target)'/\>", "\<describe what='\$(attacker)'/\> \$adverb \{misses\|fails to hit\} \<describe what='\$(target)'/\>" \}) \})
      </Core:Property>
      <Core:Property property="descriptions:unknown:missed-orig">
         (\{ (\{ "ATTACKER ADVERB attacks TARGET, but misses", "You ADVERB attack TARGET, but miss", "ATTACKER ADVERB attacks TARGET, but misses" \}) \})
      </Core:Property>
      <Core:Property property="merry:act-pre:enter">
         X[M] /*
This function checks if a character can leave a room (i.e. they are not in combat)
*/

/*if we are in a system combat*/
if (Get(\$actor, "combat:fighting") == 1) \{
    /*tell the user they cannot exit while in combat*/
    EmitTo(\$actor, "You cannot exit a room while in combat. Breakcombat or Flee first, then exit. Otherwise, if you wish to stay in combat, you can retreat \<exit\>");
    return FALSE;
\} else \{
/*if not in a system combat, exit normally*/
    return TRUE;
\}
      </Core:Property>
      <Core:Property property="merry:act:attack">
         X[M] /* set our weapon */
if(!\$weapon) \{
  if(\$actor."base:combat:weapon") \{
    /* wielding a weapon */
    \$weapon = \$actor."base:combat:weapon";
  \} else \{
    /* fighting without a weapon */
    \$weapon = \$actor."combat:naturalweapon";
  \}
\}

return Call(\$\{IronClaw:Lib:Combat:Lib2\}, "attack", \$coststring: "An attack costs", \$cost: 25, \$attack: "attack");
      </Core:Property>
      <Core:Property property="merry:act:breakcombat">
         X[M] /*
This function makes the character break from combat
*/
if(\$actor."combat:target" \&\& \$actor."combat:target" != "none") \{
  \$target = \$actor."combat:target";
\} else \{
  \$target = nil;
\}

Set(\$actor, "combat:fighting", nil);
Set(\$actor, "combat:target", nil);

/* send the action */
Act(\$actor, "combat_break");
if(\$target) \{
  Act(\$target, "combat_break_against", \$attacker: \$actor);
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:act:combat_getattacked">
         X[M] /*
This script is called if someone tries to attack the character
*/

/*   Act(NRefOb(\$target), "combat_getattacked", \$attacker: \$actor, \$weapon: \$weapon, \$attack_roll: \$attack_roll); */

/* get descriptions of attacker attacking */
\$attackdesc = Call(\$\{IronClaw:Lib:Combat:Lib2\}, "get_attack_desc");

EmitTo(\$attacker, dump_value(\$attackdesc));

/* did they miss? */
if(\$attack_roll \< 2) \{
  /* describe the miss */
  EmitTo(\$attacker, \$attackdesc[0]);
  EmitTo(\$this, \$attackdesc[1]);
  EmitIn(\$this."base:environment", \$attackdesc[2], \$attacker, \$this);
  return TRUE;
\}

/* make defenders defence rolls */
\$defence_roll = 1;
\$defencedesc = nil;
/* check if the defender has any special defence items */
  /* cloak and shields come into this category */
  /* NOT WRITTEN YET */

/* enough actions for a standard defence? */
if (\$this."combat:actions" \&\& \$this."combat:actions" \> 50) \{
  /* yep. charge 25 actions for this defence */
  Call(\$\{IronClaw:Lib:Combat:Lib2\}, "action-cost", \$victim: \$this, \$cost: 25);
  /* parry? */
  /* NOT WRITTEN YET */

  /* dodge? */
  \$tmp = Call(\$\{IronClaw:Lib:UrPeople:System\}, "roll", \$dicearray: (\{ \$this."trait:dexterity", \$this."skill:combat:dodge", \$this."career:combat:dodge" \}));
  if(\$tmp \> \$defence_roll) \{
    \$defence_roll = \$tmp;
    /* get dodge description */
    if(\$defence_roll \>= \$attack_roll) \{
      \$defencedesc = Get(\$\{IronClaw:Lib:Combat:Lib2\}, "descriptions:dodge:success");
    \} else \{
      \$defencedesc = Get(\$\{IronClaw:Lib:Combat:Lib2\}, "descriptions:dodge:failure");
    \}
    \$defencedesc = \$defencedesc[random(sizeof(\$defencedesc))];
  \}
\}

/* check if the defender has any special defence items */
  /* lucky charms? Perfect defences? */
  /* NOT WRITTEN YET */

/* unsam the defence description */
if(\$defencedesc) \{
  \$defencedesc = (\{ UnSAM(ParseXML(\$defencedesc[0])),UnSAM(ParseXML(\$defencedesc[1])),UnSAM(ParseXML(\$defencedesc[2])) \});
\}

EmitTo(\$attacker, "attack roll of "+dump_value(\$attack_roll)+" and defence of "+dump_value(\$defence_roll));

if(\$defence_roll \&\& \$defence_roll \>= \$attack_roll) \{
  /* describe the attack and defence */
  EmitTo(\$attacker, \$attackdesc[0]+\$defencedesc[0]+".");
  EmitTo(\$this, \$attackdesc[1]+\$defencedesc[1]+".");
  EmitIn(\$this."base:environment", \$attackdesc[2]+\$defencedesc[2]+".", \$attacker, \$this);
  return TRUE;
\}

/* calculate damage */
\$damage = \$attack_roll - \$defence_roll;
/* add any bonus from the weapon to damage */
if(\$weapon."combat:bonus:damage") \{
  \$dicearray = (\{ \$damage + \$weapon."combat:bonus:damage" \});
\} else \{
  \$dicearray = (\{ \$damage \});
\}
/* If this weapon lets us add our strength to the damage */
if(!\$weapon."combat:nostrengthadding") \{
  \$dicearray += (\{\$attacker."trait:body"\});
\}
/* roll the raw damage */
\$damage = Call(\$\{IronClaw:Lib:UrPeople:System\}, "roll", \$dicearray: \$dicearray ) + 1;
/* roll the armor */
\$damage = \$damage - Call(\$\{IronClaw:Lib:UrPeople:System\}, "roll", \$dicearray: (\{ Get(\$target, "combat:armor:rating") \}));
if (\$damage \< 0) \$damage = 0;

/* send the damage (if any) */
Act(NRefOb(\$this), "combat_getdamaged", \$attacker: \$attacker, \$weapon: \$weapon, \$damage: \$damage, \$attackdesc: \$attackdesc, \$defencedesc: \$defencedesc);

return TRUE;

/* check we have enough actions to make the attack, and if so, pay the action cost */
if (!Call(this, "action-cost", \$victim: \$actor, \$cost: 25)) \{
  EmitTo( \$actor, "You don't have enough actions remaining. "+\$coststring+" "+Str(\$costs)+" actions. Type @cstat to see your combat details.");
  Act(\$actor, "combat_no_actions");
  return FALSE;
\}

/* set our weapon */
if(!\$weapon) \{
  EmitTo(\$actor, "Unknown weapon. Sorry, please @bug this.");
  return FALSE;
\}

/* set the weapon skill */
if(\$weapon."weapon:skill") \{
  \$weapon_skill = \$weapon."weapon:skill";
\} else \{
  \$weapon_skill = "unarmed";
\}

/*attack the target*/

/* calculate the defenders defence roll */
\$defenceArray = Call(this, "resolve_defence", \$target: \$target);

/* calculate any damage, and add it to the defenders body */
\$damage = Call(this, "resolve_damage");

/* if we are not targetting a detail, choose an appropriate detail */
if(IsPrime(\$target)) \{
  if(\$weapon."weapon:targets") \{
    \$target = NewNRef(NRefOb(\$target), \$weapon."weapon:targets"[random(sizeof(\$weapon."weapon:targets"))]);
    if((\$damage == 0) \&\& \$weapon."weapon:targets:glancing")
      \$target = NewNRef(NRefOb(\$target), \$weapon."weapon:targets:glancing"[random(sizeof(\$weapon."weapon:targets:glancing"))]);
  \} else \{
    \$detail = (\{ "chest", "head", "right-hand", "left-hand", "right-arm", "left-arm" \})[random(6)];
    \$target = NewNRef(NRefOb(\$target), \$detail);
  \}
\}

/* describe the attack to the room */
Call(this, "describe-attack");

return FALSE;
      </Core:Property>
      <Core:Property property="merry:act:combat_getdamaged">
         X[M] /*
This script is called if someone tries to attack the character
*/

/*   Act(NRefOb(\$this), "combat_getdamaged", \$attacker: \$attacker, \$weapon: \$weapon, \$damage: \$damage, \$attackdesc: \$attackdesc, \$defencedesc: \$defencedesc);
*/
EmitTo(\$attacker, "1");
\$damagedesc = Get(\$\{IronClaw:Lib:Combat:Lib2\}, "descriptions:unknown:damage");
EmitTo(\$attacker, "2");
/* pick a damage description */
\$damagedesc = \$damagedesc[random(sizeof(\$damagedesc))];
if(\$damagedesc) \{
  \$damagedesc = (\{ UnSAM(ParseXML(\$damagedesc[0])),UnSAM(ParseXML(\$damagedesc[1])),UnSAM(ParseXML(\$damagedesc[2])) \});
\}
EmitTo(\$attacker, "3");


EmitTo(\$attacker, \$attackdesc[0]+\$defencedesc[0]+\$damagedesc[0]);
EmitTo(\$this, \$attackdesc[1]+\$defencedesc[1]+\$damagedesc[1]);
EmitIn(\$this."base:environment", \$attackdesc[2]+\$defencedesc[2]+\$damagedesc[2], \$attacker, \$this);
EmitTo(\$attacker, "4");
/*Social(\$this, "exclaim", nil, "OW! I just took "+Str(\$damage)+" points damage!");*/

return TRUE;

/* get descriptions of attacker attacking */
\$attackdesc = Call(\$\{IronClaw:Lib:Combat:Lib2\}, "get_attack_desc");

EmitTo(\$attacker, dump_value(\$attackdesc));

/* did they miss? */
if(\$attack_roll \< 2) \{
  /* describe the miss */
  EmitTo(\$attacker, \$attackdesc[0]);
  EmitTo(\$this, \$attackdesc[1]);
  EmitIn(\$this."base:environment", \$attackdesc[2], \$attacker, \$this);
  return TRUE;
\}

/* make defenders defence rolls */
\$defence_roll = 1;
\$defencedesc = nil;
/* check if the defender has any special defence items */
  /* cloak and shields come into this category */
  /* NOT WRITTEN YET */

/* enough actions for a standard defence? */
if (\$this."combat:actions" \&\& \$this."combat:actions" \> 50) \{
  /* yep. charge 25 actions for this defence */
  Call(\$\{IronClaw:Lib:Combat:Lib2\}, "action-cost", \$victim: \$this, \$cost: 25);
  /* parry? */
  /* NOT WRITTEN YET */

  /* dodge? */
  \$tmp = Call(\$\{IronClaw:Lib:UrPeople:System\}, "roll", \$dicearray: (\{ \$this."trait:dexterity", \$this."skill:combat:dodge", \$this."career:combat:dodge" \}));
  if(\$tmp \> \$defence_roll) \{
    \$defence_roll = \$tmp;
    /* get dodge description */
    if(\$defence_roll \>= \$attack_roll) \{
      \$defencedesc = Get(\$\{IronClaw:Lib:Combat:Lib2\}, "descriptions:dodge:success");
    \} else \{
      \$defencedesc = Get(\$\{IronClaw:Lib:Combat:Lib2\}, "descriptions:dodge:failure");
    \}
    \$defencedesc = \$defencedesc[random(sizeof(\$defencedesc))];
  \}
\}

/* check if the defender has any special defence items */
  /* lucky charms? Perfect defences? */
  /* NOT WRITTEN YET */

/* unsam the defence description */
if(\$defencedesc) \{
  \$defencedesc = (\{ UnSAM(ParseXML(\$defencedesc[0])),UnSAM(ParseXML(\$defencedesc[1])),UnSAM(ParseXML(\$defencedesc[2])) \});
\}

EmitTo(\$attacker, "attack roll of "+dump_value(\$attack_roll)+" and defence of "+dump_value(\$defence_roll));

if(\$defence_roll \&\& \$defence_roll \>= \$attack_roll) \{
  /* describe the attack and defence */
  EmitTo(\$attacker, \$attackdesc[0]+\$defencedesc[0]+".");
  EmitTo(\$this, \$attackdesc[1]+\$defencedesc[1]+".");
  EmitIn(\$this."base:environment", \$attackdesc[2]+\$defencedesc[2]+".", \$attacker, \$this);
  return TRUE;
\}

/* calculate damage */
\$damage = \$attack_roll - \$defence_roll;
/* add any bonus from the weapon to damage */
if(\$weapon."combat:bonus:damage") \{
  \$dicearray = (\{ \$damage + \$weapon."combat:bonus:damage" \});
\} else \{
  \$dicearray = (\{ \$damage \});
\}
/* If this weapon lets us add our strength to the damage */
if(!\$weapon."combat:nostrengthadding") \{
  \$dicearray += (\{\$attacker."trait:body"\});
\}
/* roll the raw damage */
\$damage = Call(\$\{IronClaw:Lib:UrPeople:System\}, "roll", \$dicearray: \$dicearray ) + 1;
/* roll the armor */
\$damage = \$damage - Call(\$\{IronClaw:Lib:UrPeople:System\}, "roll", \$dicearray: (\{ Get(\$target, "combat:armor:rating") \}));
if (\$damage \< 0) \$damage = 0;

/* send the damage (if any) */
Act(NRefOb(\$this), "combat_getdamaged", \$attacker: \$attacker, \$weapon: \$weapon, \$damage: \$damage, \$attackdesc: \$attackdesc, \$defencedesc: \$defencedesc);

return TRUE;

/* check we have enough actions to make the attack, and if so, pay the action cost */
if (!Call(this, "action-cost", \$victim: \$actor, \$cost: 25)) \{
  EmitTo( \$actor, "You don't have enough actions remaining. "+\$coststring+" "+Str(\$costs)+" actions. Type @cstat to see your combat details.");
  Act(\$actor, "combat_no_actions");
  return FALSE;
\}

/* set our weapon */
if(!\$weapon) \{
  EmitTo(\$actor, "Unknown weapon. Sorry, please @bug this.");
  return FALSE;
\}

/* set the weapon skill */
if(\$weapon."weapon:skill") \{
  \$weapon_skill = \$weapon."weapon:skill";
\} else \{
  \$weapon_skill = "unarmed";
\}

/*attack the target*/

/* calculate the defenders defence roll */
\$defenceArray = Call(this, "resolve_defence", \$target: \$target);

/* calculate any damage, and add it to the defenders body */
\$damage = Call(this, "resolve_damage");

/* if we are not targetting a detail, choose an appropriate detail */
if(IsPrime(\$target)) \{
  if(\$weapon."weapon:targets") \{
    \$target = NewNRef(NRefOb(\$target), \$weapon."weapon:targets"[random(sizeof(\$weapon."weapon:targets"))]);
    if((\$damage == 0) \&\& \$weapon."weapon:targets:glancing")
      \$target = NewNRef(NRefOb(\$target), \$weapon."weapon:targets:glancing"[random(sizeof(\$weapon."weapon:targets:glancing"))]);
  \} else \{
    \$detail = (\{ "chest", "head", "right-hand", "left-hand", "right-arm", "left-arm" \})[random(6)];
    \$target = NewNRef(NRefOb(\$target), \$detail);
  \}
\}

/* describe the attack to the room */
Call(this, "describe-attack");

return FALSE;
      </Core:Property>
      <Core:Property property="merry:act:fight">
         X[M] return Call(\$\{IronClaw:Lib:Combat:Lib2\}, "fight", \$type: "fight");
      </Core:Property>
      <Core:Property property="merry:lib:action-cost">
         X[M] /*         
This will charge for actions, and return false if there are not enough actions      
*/         
      
if (!\$victim) \{      
    /* no object was specified to charge for the actions */      
    return 0;      
\}      
if (!\$cost) \{      
    /* no cost was specified */      
    return 0;      
\}      
if (Get(NRefOb(\$victim), "combat:actions:current") - \$cost \< 0) \{      
    /* not enough actions remaining */      
    return 0;      
\}      
      
Set(NRefOb(\$victim), "combat:actions:current", Get(NRefOb(\$victim), "combat:actions:current") - \$cost);      
      
/*start actions regenerating in the victim*/      
Call(this, "regenerate_actions", \$victim: \$victim);      
      
return 1;
      </Core:Property>
      <Core:Property property="merry:lib:add-wound">
         X[M] /*
this adds a wound to a target's body part.
*/

if(!\$target) return FALSE;
if(!\$singular) \{ \$singular = "wound"; \}
if(!\$plural) \{ \$plural = \$singular + "s"; \}
if(!\$detail_adj) \{ \$detail_adj = "injured"; \}
if(!\$value) \{ \$value = 5; \}
if(!\$adj) \{ \$adj = nil; \}

/* if the combat injuries mapping doesn't exist, create an empty one */
if(!NRefOb(\$target)."combat:injuries")
\{
  NRefOb(\$target)."combat:injuries" = ([ ]);
\}

if(NRefOb(\$target)."combat:injuries" \&\& NRefOb(\$target)."combat:injuries"[NRefDetail(\$target)])
\{
  NRefOb(\$target)."combat:injuries"[NRefDetail(\$target)] += (\{ (\{ (\{ \$singular, \$plural, \$adj \}), Int(\$value), \$detail_adj \}) \});
\} else \{
  NRefOb(\$target)."combat:injuries"[NRefDetail(\$target)] = (\{ (\{ (\{ \$singular, \$plural, \$adj \}), Int(\$value), \$detail_adj \}) \});
\}

/* mark the detail with this adjective */
if(\$detail_adj) \{
  Set(NRefOb(\$target), "details:"+NRefDetail(\$target)+":adjective:"+\$detail_adj+":local", 1);
  Set(NRefOb(\$target), "details:"+NRefDetail(\$target)+":adjective:injured:local", 1);
  Set(NRefOb(\$target), "details:"+NRefDetail(\$target)+":sname:injury:local", 1);
  Set(NRefOb(\$target), "details:"+NRefDetail(\$target)+":pname:injuries:local", 1);
\}

/* start the healing */
Call(this, "healing-cycle", \$detail: \$target);

/* describe the injury */
return Call(this, "describe-wound", \$detail: \$target);
      </Core:Property>
      <Core:Property property="merry:lib:attack">
         X[M] /*
This function has the character make an attack
*/
int i;

/*for(i = 0; i \< sizeof(\$roles); i++) \{ EmitTo(\$actor, \$roles[i]); \}*/

/*if not in a system combat, use normal social roleplaying*/
if (!\$actor."combat:fighting")
  return TRUE;

/*We are in a system combat*/

/*if we are told to target a new opponent*/
if (\$target) \{
  /* we can't fight ourselves */
  if (NRefOb(\$target) == NRefOb(\$actor)) \{
    EmitTo(\$actor, "You don't want to attack yourself.");
    return FALSE;
  \}
  /* can we fight this target? */
  if (Get(NRefOb(\$target), "combat:fightable") != 1) \{
    EmitTo(\$actor, "You can't fight " + Describe(\$target) + ".");
    return FALSE;
  \} else \{
    /* set this as the new target */
    Set(\$actor, "combat:target", NRefOb(\$target));
    /* check if we are targetting a detail */
    if (!IsPrime(\$target)) \{
      \$detail = \$target;
    \}
  \}
\} else \{
  /* if we weren't given a target, check if we already have one */
  /*if we don't have a target to attack, output error*/
  if (!\$actor."combat:target" \|\| (\$actor."combat:target" == "none")) \{
    EmitTo( \$actor, "You must select a target before attacking. Type fight \<target\> or attack \<target\>");
    return FALSE;
  \}
  /* set the \$target, if we don't already have it */
  \$target = NewNRef(\$actor."combat:target", "default");
\}

/* Check if the target is in the same room */
if(!NRefOb(\$target)."base:environment" \|\| (\$actor."base:environment" != NRefOb(\$target)."base:environment")) \{
  EmitTo(\$actor, Describe(\$target)+" is no longer here.");

  \$actor."combat:target" = nil;
  return FALSE;
\}

/* check we have enough actions to make the attack, and if so, pay the action cost */
if (!Call(this, "action-cost", \$victim: \$actor, \$cost: \$cost)) \{
  EmitTo( \$actor, "You don't have enough actions remaining. "+\$coststring+" "+Str(\$cost)+" actions. Type @cstat to see your combat details.");
  Act(\$actor, "combat_no_actions");
  return FALSE;
\}

/* set our weapon */
if(!\$weapon) \{
  EmitTo(\$actor, "Unknown weapon. Sorry, please @bug this.");
  return FALSE;
\}

/* set the weapon skill */
if(\$weapon."weapon:skill") \{
  \$weapon_skill = \$weapon."weapon:skill";
\} else \{
  \$weapon_skill = "unarmed";
\}

/* check we have a type of attack */
if(!\$attack)
  \$attack = "attack";

/*attack the target*/

/* calculate the attackers attack roll */
\$attack_roll = Call(\$\{IronClaw:Lib:UrPeople:System\}, "roll", \$dicearray: (\{ \$actor."trait:dexterity", Get(\$actor, "skill:combat:"+\$weapon_skill), Get(\$actor, "career:combat:"+\$weapon_skill) \}));

/* announce the attack */
Act(NRefOb(\$target), "combat_getattacked", \$attacker: \$actor, \$weapon: \$weapon, \$attack_roll: \$attack_roll);

return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:block-exit">
         X[M] /*      
Checks if someone is fighting the player, before they exit a room      
*/      
if (!\$watcher) \{      
    /* we need to know who is witnessing the event */      
    return 1;      
\}      
      
/*if we are in a system combat, we have a target, and the person trying to leave is our target */      
if (Get(\$watcher, "combat:fighting") == 1 \&\& Get(\$watcher, "combat:target") != "none" \&\& NRefOb(Get(\$watcher, "combat:target")) == NRefOb(\$actor)) \{      
    EmitTo(\$actor, "You cannot leave this room while " + Describe(\$watcher) + " is fighting you. If you are in combat, try retreat \<exit\>");      
    return 0;      
\}      
return 1;
      </Core:Property>
      <Core:Property property="merry:lib:breakcombat">
         X[M] /*
This function makes the character break from combat
*/
\$target = \$actor."combat:target";
Set(\$actor, "combat:fighting", nil);
Set(\$actor, "combat:target", nil);

EmitTo(\$actor, "Sending break from combat scripts");

/* send the action */
Act(\$actor, "combat_break");
if(\$target) \{
  Act(\$target, "combat_break_against", \$attacker: \$actor);
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:describe-attack">
         X[M] /*
Describes the outcome of an attack
*/
/* variables */
string *description;
string *tmpDesc;
\$room = \$actor."base:environment";

/* Get the type of damage */
if(\$weapon."combat:damage_type") \{
  \$damage_type = \$weapon."combat:damage_type"[random(sizeof(\$weapon."combat:damage_type"))];
\} else \{
  \$damage_type = "striking";
\}

/*
EmitTo( \$actor, Describe(\$actor) + " makes a roll of " + \$attacker_attack + " to hit " + Describe(\$target) + ", who defends using a " + \$defenceArray[1] + " with a roll of " + \$defenceArray[0] + ". Total damage of " + \$damage+" and damage type of "+\$damage_type);
*/

if(\$attacker_attack == 1)
\{
  /* The attacker missed. How pathetic. */
  \$attack_description = Call(this, "get-descriptions", \$type: "missed");
\} else if (\$defenceArray[1] == "none")
\{
  /* The attacker hit, and there was no attempt to defend */
  \$attack_description = Call(this, "get-descriptions", \$type: "hit");
\} else if (\$defenceArray[0] - \$attacker_attack \>= 0)
\{
  /* The attacker would have hit, but the defender avoided it */
  \$attack_description = Call(this, "get-descriptions", \$type: "avoided");
\} else if (\$damage \> 0)
\{
  /* The attacker hit. There was an unsuccessful defence, and damage was caused */
  \$attack_description = Call(this, "get-descriptions", \$type: "damage");
\} else \{
  /* The attacker hit. There was an unsuccessful defence */
  \$attack_description = Call(this, "get-descriptions", \$type: "failed-defence");
\}

/* Parse any sam */
\$attack_description[0] = UnSAM(ParseXML(\$attack_description[0]));
\$attack_description[1] = UnSAM(ParseXML(\$attack_description[1]));
\$attack_description[2] = UnSAM(ParseXML(\$attack_description[2]));

/* start describing the attack */

/* give an adverb for the attack */
if(!\$adverb) \{
  switch(\$attacker_attack) \{
    case 1: \$adverb = (\{ "feebly", "pathetically", "poorly" \})[random(3)]; break;
    case 2: \$adverb = (\{ "marginally", "feebly", "unsurely" \})[random(3)]; break;
    case 3: \$adverb = (\{ "barely", "unsurely" \})[random(2)]; break;
    case 4: \$adverb = ""; break;
    case 5: \$adverb = (\{ "forcefully", "strongly" \})[random(2)]; break;
    case 6: \$adverb = "nastily"; break;
    case 7: \$adverb = "savagely"; break;
    case 8: \$adverb = "viciously"; break;
    case 9: \$adverb = "brutally"; break;
    case 10: \$adverb = (\{ "powerfully", "masterfully" \})[random(2)]; break;
    case 11: \$adverb = "expertly"; break;
    default: \$adverb = ""; break;
  \}
\}

/* Replacing words in the output here */

/* Replace words grabbed from the weapons */

/* prepare some replacements that might be used */

/* Get the attackers weapon */
if(\$weapon."combat:weapon:name")
\{
  if(!\$weapon."weapon:name" \&\& random(sizeof(\$weapon."combat:weapon:name")+1) == sizeof(\$weapon."combat:weapon:name")) \{
    \$weapon1 = Describe(\$weapon, nil, nil, STYLE_NONPOSS);
    \$weapon3 = Describe(\$weapon, \$actor, nil);
    \$weapon3_full = Describe(\$weapon, nil, nil);
  \}else \{
    \$choice = \$weapon."combat:weapon:name"[random(sizeof(\$weapon."combat:weapon:name"))];
    \$weapon1 = \$choice;
    \$weapon3 = \$actor."base:possessive"+" "+\$choice;
    \$weapon3_full = Describe(\$actor)+"'s "+\$choice;
  \}
\} else \{
  \$weapon1 = Describe(\$weapon, nil, nil, STYLE_NONPOSS);
  \$weapon3 = Describe(\$weapon, \$actor, nil);
  \$weapon3_full = Describe(\$weapon, nil, nil);
\}

/* get the defenders weapon */
if(NRefOb(\$target)."base:combat:weapon") \{
  \$defweapon = NRefOb(\$target)."base:combat:weapon";
\} else \{
  \$defweapon = NRefOb(\$target)."combat:naturalweapon";
\}

if(\$defweapon."combat:weapon:name")
\{
  \$choice = \$defweapon."combat:weapon:name"[random(sizeof(\$defweapon."combat:weapon:name"))];
  \$def_weapon = \$choice;
  \$def_weapon3 = NRefOb(\$target)."base:possessive"+" "+\$choice;
  \$def_weapon3_full = Describe(NRefOb(\$target))+"'s "+\$choice;
\} else \{
  \$def_weapon = Describe(\$defweapon, nil, nil, STYLE_NONPOSS);
  \$def_weapon3 = Describe(\$defweapon, NRefOb(\$target), nil);
  \$def_weapon3_full = Describe(\$defweapon, nil, nil);
\}

/* Get the weapon blow */
if(\$weapon."combat:weapon:blow")
\{
  \$blow = \$weapon."combat:weapon:blow"[random(sizeof(\$weapon."combat:weapon:blow"))];
\} else \{
  \$blow = "blow";
\}

/* get the attackers and defenders movements */
/* get the attackers movements */
\$atk_moves = Call(this, "get-movement", \$fighter: "attacker");

/* get the defenders movements */
\$def_moves = Call(this, "get-movement", \$fighter: "defender");

/* Replace words in the string */
\$attacker_msg = replace_strings(\$attack_description[1],
  "ATTACKER", Describe(\$actor),
  "DEFENDER", Describe(NRefOb(\$target)),
  "TARGET", Describe(\$target),
  "ADVERB", \$adverb,
  "ATK_POSSESSIVE", "your",
  "ATK_OBJECTIVE", "you",
  "DEF_POSSESSIVE", NRefOb(\$target)."base:possessive",
  "DEF_OBJECTIVE", NRefOb(\$target)."base:objective",
  "ATK_MOVES", \$atk_moves[0],
  "DEF_MOVES_P", \$def_moves[0],
  "DEF_MOVES", \$def_moves[1],
  "WEAPON_BLOW", \$blow,
  "DEF_WEAPON_FULL", \$def_weapon3_full,
  "DEF_WEAPON", \$def_weapon,
  "WEAPON_FULL", \$weapon1,
  "WEAPON", \$weapon1);
\$defender_msg = replace_strings(\$attack_description[2],
  "ATTACKER", Describe(\$actor),
  "DEFENDER's", "your",
  "DEFENDER", Describe(NRefOb(\$target), nil, NRefOb(\$target)),
  "TARGET", Describe(\$target, nil, NRefOb(\$target)),
  "ADVERB", \$adverb,
  "ATK_POSSESSIVE", \$actor."base:possessive",
  "ATK_OBJECTIVE", \$actor."base:objective",
  "DEF_POSSESSIVE", "your",
  "DEF_OBJECTIVE", "you",
  "ATK_MOVES", \$atk_moves[1],
  "DEF_MOVES_P", \$def_moves[0],
  "DEF_MOVES", \$def_moves[1],
  "WEAPON_BLOW", \$blow,
  "DEF_WEAPON_FULL", \$def_weapon,
  "DEF_WEAPON", \$def_weapon,
  "WEAPON_FULL", \$weapon3_full,
  "WEAPON", \$weapon1);
\$witness_msg = replace_strings(\$attack_description[0],
  "ATTACKER", Describe(\$actor),
  "DEFENDER", Describe(NRefOb(\$target)),
  "TARGET", Describe(\$target),
  "ADVERB", \$adverb,
  "ATK_POSSESSIVE", \$actor."base:possessive",
  "ATK_OBJECTIVE", \$actor."base:objective",
  "DEF_POSSESSIVE", NRefOb(\$target)."base:possessive",
  "DEF_OBJECTIVE", NRefOb(\$target)."base:objective",
  "ATK_MOVES", \$atk_moves[1],
  "DEF_MOVES_P", \$def_moves[0],
  "DEF_MOVES", \$def_moves[1],
  "WEAPON_BLOW", \$blow,
  "DEF_WEAPON_FULL", \$def_weapon3_full,
  "DEF_WEAPON", \$def_weapon,
  "WEAPON_FULL", \$weapon3_full,
  "WEAPON", \$weapon1);

if(\$evoke)\{
    \$attacker_msg += ", " + \$evoke;
    \$defender_msg += ", " + \$evoke;
    \$witness_msg += ", " + \$evoke;
\} else \{
    \$attacker_msg += ".";
    \$defender_msg += ".";
    \$witness_msg += ".";
\}

/* Send the description to the players */
EmitIn(\$actor."base:environment", \$witness_msg, \$actor, NRefOb(\$target));
EmitTo(\$actor, \$attacker_msg);
EmitTo(NRefOb(\$target), \$defender_msg);
/*
EmitTo(\$actor, "--");
EmitTo(\$actor, \$defender_msg);
EmitTo(\$actor, \$witness_msg);
*/

/* Do injury to player */
if((\$attacker_attack \> 1) \&\& ((\$defenceArray[1] == "none") \|\| (\$attacker_attack \> \$defenceArray[0])))
\{
  Call(this, "grant-damage");
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:describe-wound">
         X[M] /* sets a description for any wounds on the characters \$detail */
int injuryCount;
string *injuries;
string *adjectives;
string currentInjury;
int index;
int index2;
injuries = (\{\});
adjectives = (\{\});

/* if we weren't passed \$detail */
if(!\$detail)
\{
  return FALSE;
\}

\$name = NRefDetail(\$detail);
\$body = NRefOb(\$detail);

/* get a list of the injuries for this body part */

/* if no injuries */
if(!\$body."combat:injuries" \|\| !\$body."combat:injuries"[\$name]) \{
  Set(\$body, "combat:injury:" + \$name, nil);
  return TRUE;
\}

\$injuryArray = \$body."combat:injuries"[\$name];
/* if there are no injuries in the mapping, remove the mapping */
if(sizeof(\$injuryArray) == 0)
\{
  /* we have no injuries */
  Set(\$body, "combat:injury:" + \$name, nil);
  /* remove this mapping */
  \$body."combat:injuries"[\$name] = nil;
  return TRUE;
\}

/* start stripping injuries from the list, and adding to the array */
while(sizeof(\$injuryArray) \> 0)
\{
  injuryCount = 1;
/*  index = 1;*/

  /* strip away any injury that matches the one at index, and increment the injury counter accordingly */
  for(index = 1; index \< sizeof(\$injuryArray);)
  \{
    /* check that the injuries match */
    if((\$injuryArray[index][0][0] == \$injuryArray[0][0][0]) \&\& (\$injuryArray[index][2] == \$injuryArray[0][2]))\{
      /* this element seems to match, so increment the injury count, and remove it from the list */
      injuryCount++;
      \$injuryArray -= (\{ \$injuryArray[index] \});
    \} else \{
      /* the injury type was different. check next injury in the array */
      index++;
    \}
  \}

  /* add the injury at index to the injuries list, along with the appropriate number */
  currentInjury = "";

  /* add any adjectives for this injury */
  if(\$injuryArray[0][0][2])
    currentInjury += \$injuryArray[0][0][2] + " ";

  /* add the number of this type of injuries - a cut vs three cuts */
  if(injuryCount == 1)
  \{
    currentInjury = currentInjury + \$injuryArray[0][0][0];
    switch(currentInjury[0]) \{
      case 'a':
      case 'e':
      case 'i':
      case 'o':
      case 'u':
        currentInjury = "an "+currentInjury;
      break;
      default:
        currentInjury = "a "+currentInjury;
      break;
    \}
  \} else \{
    currentInjury = desc_cardinal(injuryCount) + " " + currentInjury + \$injuryArray[0][0][1];
  \}
  injuries += (\{ currentInjury \});
  /* add any adjectives for this body part*/
  if(\$injuryArray[0][2])
    adjectives += (\{ \$injuryArray[0][2] \});

  \$injuryArray -= (\{ \$injuryArray[0] \});
\}

/* now write out a description of the injuries */
\$description = "";
for(index = 0; index \< sizeof(injuries); index++)
\{
  \$description += injuries[index];
  if(sizeof(injuries)-index \> 2)
  \{
    \$description += ", ";
  \} else if(sizeof(injuries)-index == 2)
  \{
    \$description += " and ";
  \}
\}

/*EmitTo(\$actor, "description of: It has " + \$description + ".");*/
Set(\$body, "combat:injury:" + \$name, \$description);

/* Set the adjectives for this detail and write a description of them*/
for(index = 0; index \< sizeof(adjectives); index++)
\{
  Set(\$body, "details:"+\$name+":adjective:"+adjectives[index]+":local", 1);
\}

adjectives = map_indices(arr_to_set(adjectives));
if(sizeof(adjectives) == 1)
\{
  Set(\$body, "combat:injury:"+\$name+":adjectives", adjectives[0]);
\} else if(sizeof(adjectives) == 2)
\{
  Set(\$body, "combat:injury:"+\$name+":adjectives", adjectives[0]+" and "+adjectives[1]);
\} else if(sizeof(adjectives) \> 2)
\{
  Set(\$body, "combat:injury:"+\$name+":adjectives", "injured");
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:fight">
         X[M] /*
This function sets the character ready to fight
*/
string emit_string;
string emit_t_string;
string emit_r_string;
object target_ob, room;
room = \$actor."base:environment";

/* if we have a target */
if (\$target) \{
  target_ob = NRefOb(\$target);
  /*Check we are not trying to fight ourself*/
  if (target_ob == NRefOb(\$actor)) \{
    EmitTo(\$actor, "You don't want to fight yourself.");
    return FALSE;
  \}

  /*if we have a target, check if it is valid to fight*/
  if (!Get(target_ob, "combat:fightable")) \{
    EmitTo(\$actor, "You can't fight " + Describe(\$target) + ".");
    return FALSE;
  \}
\}

/* check we are not too beaten up to fight */
if (Get(\$actor, "combat:damage") \> Get(\$actor, "trait:body")) \{
        EmitTo(\$actor, "You are so injured you can barely move, let alone fight.");
        return FALSE;
\}

if (\$target) \{
/*if we are fighting a target*/
    emit_string = "You ready yourself for combat against " + Describe(\$target) + ".";
    emit_t_string = Describe(\$actor) + " readies " + Describe(\$actor, \$actor) + "self for combat against you.";
    emit_r_string = Describe(\$actor) + " readies " + Describe(\$actor, \$actor) + "self for combat against " + Describe(\$target) + ".";
\} else \{
/*if we do not have a target*/
    emit_string = "You ready yourself for combat.";
    emit_t_string = "";
    emit_r_string = Describe(\$actor) + " readies " + Describe(\$actor, \$actor) + "self for combat.";
\}

if (\$evoke) \{
    emit_string = emit_string + " " + \$evoke;
    emit_t_string = emit_t_string + " " + \$evoke;
    emit_r_string = emit_r_string + " " + \$evoke;
\}

EmitTo( \$actor, emit_string);
if (\$target) \{
    EmitTo(target_ob, emit_t_string);
    EmitIn(room, emit_r_string, \$actor, target_ob);
    Set(\$actor, "combat:target", target_ob);
\} else \{
    EmitIn(room, emit_r_string, \$actor);
\}

Set(\$actor, "combat:fighting", 1);
Call(this, "regenerate_actions", \$victim: \$actor);

/* send the action */
Act(\$actor, "combat_ready", \$defender: \$target);
if(\$target) \{
  Act(target_ob, "combat_readied_against", \$attacker: \$actor);
\}
if(\$type == "fight") \{
  Act(\$actor, "combat_fight", \$defender: \$target);
  if(\$target) \{
    Act(target_ob, "combat_fighting_against", \$attacker: \$actor);
  \}
\}
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:get-descriptions">
         X[M] /* Grab a description */

/*EmitTo( \$actor, Describe(\$actor) + " makes a roll of " + \$attacker_attack + " to hit " + Describe(\$target) + ", who defends using a " + \$defenceArray[1] + " with a roll of " + \$defenceArray[0] + ". Total damage of " + \$damage+" and damage type of "+\$damage_type);*/

/* Search for appropriate arrays */
\$description = (\{ \});

/* get options */
/* get general options for this type of attack */
if(Get(this, "descriptions:"+\$damage_type+":"+\$type))
  \$description += copy(Get(this, "descriptions:"+\$damage_type+":"+\$type));
/* get specific options from this weapon */
if(Get(\$weapon, "combat:descriptions:"+\$damage_type+":"+\$type))
  \$description += copy(Get(\$weapon, "combat:descriptions:"+\$damage_type+":"+\$type));
/* If there was a defence, get options for that, too */
if(\$defenceArray[1] \&\& (\$defenceArray[1] != "none"))
\{
  /* general options for the defence */
  if(Get(this, "descriptions:"+\$damage_type+":"+\$type+":"+\$defenceArray[1]))
    \$description += copy(Get(this, "descriptions:"+\$damage_type+":"+\$type+":"+\$defenceArray[1]));
  /* specific options for the defence against this weapon */
  if(Get(\$weapon, "combat:descriptions:"+\$damage_type+":"+\$type+":"+\$defenceArray[1]))
    \$description += copy(Get(\$weapon, "combat:descriptions:"+\$damage_type+":"+\$type+":"+\$defenceArray[1]));
\}

/* couldn't find options for this type of attack. try general options */
if(sizeof(\$description) == 0) \{
  /* get general options for all attacks */
  if(Get(this, "descriptions:unknown:"+\$type))
    \$description += copy(Get(this, "descriptions:unknown:"+\$type));
  /* get specific options for this weapon */
  if(Get(\$weapon, "combat:descriptions:unknown:"+\$type))
    \$description += copy(Get(\$weapon, "combat:descriptions:unknown:"+\$type));

  /* If there was a defence, get options for that, too */
  if(\$defenceArray[1] \&\& (\$defenceArray[1] != "none"))
  \{
    /* general options for the defence */
    if(Get(this, "descriptions:unknown:"+\$type+":"+\$defenceArray[1]))
      \$description += copy(Get(this, "descriptions:unknown:"+\$type+":"+\$defenceArray[1]));
    /* specific options for the defence against this weapon */
    if(Get(\$weapon, "combat:descriptions:unknown:"+\$type+":"+\$defenceArray[1]))
      \$description += copy(Get(\$weapon, "combat:descriptions:unknown:"+\$type+":"+\$defenceArray[1]));
  \}
\}

/* Couldn't find a description */
if(sizeof(\$description) == 0) \{
  \$description = (\{ "error", "error", "error" \});
\} else \{
  \$description = \$description[random(sizeof(\$description))];
\}

if(sizeof(\$description) != 3)
\{
  EmitTo(\$actor, "Error in number of returned elements");
  EmitTo(\$actor, \$description[0]);
  EmitTo(\$actor, \$description[1]);
\}
return copy(\$description);
      </Core:Property>
      <Core:Property property="merry:lib:get-movement">
         X[M] /* Grab a description */   
   
/* \$fighter: "attacker" or "defender" */   
if(\$fighter == "attacker")   
\{   
  \$movements = (\{   
(\{ "advance", "advances" \}),   
(\{ "step", "steps" \}),   
(\{ "move", "moves" \}),   
(\{ "roll", "rolls" \}),   
(\{ "roll in", "rolls in" \}),   
(\{ "lunge", "lunges" \}),   
(\{ "shuffle", "shuffles" \}),   
(\{ "pass", "passes" \}),   
(\{ "slide", "slides" \}),   
(\{ "leap", "leaps" \}),   
(\{ "spring", "springs" \}),   
(\{ "whirl", "whirls" \}),   
(\{ "charge", "charges" \}),   
(\{ "feign to the left, moving", "feigns to the left, moving" \}),   
(\{ "feign to the right, moving", "feigns to the right, moving" \})   
\});   
  return \$movements[random(sizeof(\$movements))];   
\} else \{   
  \$movements = (\{   
(\{ "retreat", "retreats" \}),   
(\{ "withdraw", "withdraws" \}),   
(\{ "back away", "backs away" \}),   
(\{ "roll away", "rolls away" \}),   
(\{ "roll to the right", "rolls to the right" \}),   
(\{ "roll to the left", "rolls to the left" \}),   
(\{ "do a backward roll", "does a backwards roll" \}),   
(\{ "roll away", "rolls away" \}),   
(\{ "pass backwards", "passes backwards" \}),   
(\{ "step backwards", "steps backwards" \}),   
(\{ "hop backwards", "hops backwards" \}),   
(\{ "jump backwards", "jumps backwards" \}),   
(\{ "leap backwards", "leaps backwards" \}),   
(\{ "avoid", "avoids" \}),   
(\{ "dodge", "dodges" \}),   
(\{ "dodge sideways", "dodges sideways" \}),   
(\{ "dodge left", "dodges left" \}),   
(\{ "dodge right", "dodges right" \}),   
(\{ "dodge backwards", "dodges backwards" \}),   
(\{ "sidestep", "sidesteps" \}),   
(\{ "jump", "jumps" \}),   
(\{ "twist", "twists" \}),   
(\{ "swerve", "swerves" \}),   
(\{ "veer", "veers" \}),   
(\{ "slide", "slides" \})   
\});   
  return \$movements[random(sizeof(\$movements))];   
\}
      </Core:Property>
      <Core:Property property="merry:lib:get_attack_desc">
         X[M] /* generate a description of the attack attempt - without the defenders response */
string first, second, third;
string **descriptions;
string success;
int i;
/*
\$attacker
\$actor (defender)
\$target (on defender)
\$weapon
\$weapon_skill
\$attack_roll
*/

\$target_ob = NRefOb(\$target);
\$detail = NRefDetail(\$target);

first = "You";
second = Describe(\$attacker);
third = Describe(\$attacker);

/* if they didn't hit anything */
if(\$attack_roll \< 2)\{
  success = "missed";
\} else \{
  success = "hit";
\}

/* do we know what sort of attack this was? */
if(!\$attack_type) \{
  \$attack_type = "unknown";
\}

/* get the descriptions */
if(Get(\$weapon, "descriptions:"+\$attack_type+":"+success)) \{
  descriptions = Get(\$weapon, "descriptions:"+\$attack_type+":"+success);
\} else if (Get(\$this, "descriptions:"+\$attack_type+":"+success)) \{
  descriptions = Get(\$this, "descriptions:"+\$attack_type+":"+success);
\} else \{
  descriptions = Get(\$this, "descriptions:unknown:"+success);
\}

/* what are we attacking with */
if(\$using) \{
  /* if they attack using a different object, describe that */
  \$weapon = Arr(\$using)[0];
\}

/* choose a description */
i = random(sizeof(descriptions));
return (\{UnSAM(ParseXML(descriptions[i][0])),UnSAM(ParseXML(descriptions[i][1])),UnSAM(ParseXML(descriptions[i][2]))\});
      </Core:Property>
      <Core:Property property="merry:lib:grant-damage">
         X[M] /* Doing damage to the target */

/* Set damage in the body */

if(!NRefOb(\$target)."combat:damage") NRefOb(\$target)."combat:damage" = 0;
if(Get(\$actor, "trait:body") \&\& NRefOb(\$target)."combat:damage" \<= Get(\$actor, "trait:body")) \{
  NRefOb(\$target)."combat:damage" += \$damage;
  /* If the target was fighting, and is now too injured to keep fighting */
  if(NRefOb(\$target)."combat:fighting" \&\& (NRefOb(\$target)."combat:damage" \> Get(\$actor, "trait:body"))) \{
    /* Tell them, and break from combat */
    EmitTo(NRefOb(\$target), "You are too injured to continue fighting.");
    EmitIn(NRefOb(\$target)."base:environment", Describe(NewNRef(NRefOb(\$target), "default"))+" is too injured to continue fighting.");
    NRefOb(\$target)."combat:fighting" = nil;
    NRefOb(\$target)."combat:target" = nil;
  \}
\}

/* Set the damage that will be given */
if(\$damage \> 0) \{
  if(\$weapon."combat:weapon:wound") \{
    \$wound = \$weapon."combat:weapon:wound";
  \} else if(\$weapon."combat:weapon:scratch") \{
    /* Serious injury, but no description for it was found. check if we can leave a scratch instead */
    \$wound = \$weapon."combat:weapon:scratch";
  \} else \{
    \$wound = (\{ "bruise", "bruises", nil, "bruised" \});
  \}
\} else \{
  if(\$weapon."combat:weapon:scratch") \{
    \$wound = \$weapon."combat:weapon:scratch";
  \}
  \$damage = Int((\$damage+2)/2);
\}

/* if we found damage */
/* Add the wound */
if(\$wound)
  Call(this, "add-wound", \$singular: \$wound[0], \$plural: \$wound[1], \$adj: \$wound[2], \$detail_adj: \$wound[3], \$value: \$damage);
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:healing-cycle">
         X[M] /* sets the body to start healing */
/*int index;*/
int counter;

/* if we weren't given a detail to heal, assume we're healing the actor */
/* no code yet for healing specific details, however */
if(\$detail)
\{
  \$body = NRefOb(\$detail);
\} else \{
  \$body = \$actor;
\}

/* if we don't have a healtime, don't heal */
if(!\$body."combat:healtime") return TRUE;


/*EmitTo(\$actor, "Healing Started");*/

if(\$body."combat:healing") \{
  /* already healing */
  return TRUE;
\}

\$body."combat:healing" = 1;
while((\$body."combat:damage" \&\& (\$body."combat:damage" \> 0)) \|\| (\$body."combat:injuries" \&\& map_indices(\$body."combat:injuries") \&\& (sizeof(map_indices(\$body."combat:injuries")) \> 0)))
\{
  \$delay(\$body."combat:healtime", TRUE, "ea62");

  if(\$body."combat:damage" \&\& (\$body."combat:damage" \> 0)) \{
    \$body."combat:damage" -= 1;
  \}

  if(\$body."combat:injuries" \&\& map_indices(\$body."combat:injuries") \&\& (sizeof(map_indices(\$body."combat:injuries")) \> 0))\{

    counter = 0;
    /* choose an injury to heal */
    /* find how many injuries there are */
    for(\$healing_index = 0; \$healing_index \< sizeof(map_indices(\$body."combat:injuries")); \$healing_index++)
    \{
      counter += sizeof(\$body."combat:injuries"[map_indices(\$body."combat:injuries")[\$healing_index]]);
    \}

    /* heal one of the injuries one level */
    /* choose a random injury */
    counter = random(counter);

    /* search through the injuries until this injury is found */
    for(\$healing_index = 0; \$healing_index \< sizeof(map_indices(\$body."combat:injuries")); \$healing_index++)
    \{
      if(counter \< sizeof(\$body."combat:injuries"[map_indices(\$body."combat:injuries")[\$healing_index]]))
      \{
        /* decrement the value of this injury */
        \$body."combat:injuries"[map_indices(\$body."combat:injuries")[\$healing_index]][counter][1]--;

        /* if the wound is now fully healed */
        if(\$body."combat:injuries"[map_indices(\$body."combat:injuries")[\$healing_index]][counter][1] == 0)
        \{
          /* remove the injured adjective from the body part */
          Set(\$body, "details:"+map_indices(\$body."combat:injuries")[\$healing_index]+":adjective:"+\$body."combat:injuries"[map_indices(\$body."combat:injuries")[\$healing_index]][counter][2]+":local", nil);
          Set(\$body, "details:"+map_indices(\$body."combat:injuries")[\$healing_index]+":adjective:injured:local", nil);
          Set(\$body, "details:"+map_indices(\$body."combat:injuries")[\$healing_index]+":sname:injury:local", nil);
          Set(\$body, "details:"+map_indices(\$body."combat:injuries")[\$healing_index]+":pname:injuries:local", nil);
          Set(\$body, "combat:injury:"+map_indices(\$body."combat:injuries")[\$healing_index]+":adjectives", nil);

          /* remove the healed wound */
          \$body."combat:injuries"[map_indices(\$body."combat:injuries")[\$healing_index]] -= (\{ \$body."combat:injuries"[map_indices(\$body."combat:injuries")[\$healing_index]][counter] \});

          /* update the body part */
          Call(\$\{IronClaw:Lib:Combat:Lib-old\}, "describe-wound", \$detail: NewNRef(\$body, map_indices(\$body."combat:injuries")[\$healing_index]));
        \}
        break;
      \} else \{
        counter -= sizeof(\$body."combat:injuries"[map_indices(\$body."combat:injuries")[\$healing_index]]);
      \}
    \}
  \}
\}
/* done healing */
\$body."combat:healing" = nil;

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:healing-cycle-old">
         X[M] /* sets the body to start healing */      
/*int index;*/      
int counter;      
      
if(\$detail)      
\{      
  \$body = NRefOb(\$detail);      
\} else \{      
  \$body = \$actor;      
\}      
      
/*EmitTo(\$actor, "Healing Started");*/      
      
if(!\$body."combat:healing")      
\{      
/*  EmitTo(\$actor, "new healing cycle started");*/      
  \$body."combat:healing" = 1;      
  while(\$body."combat:injuries" \&\& map_indices(\$body."combat:injuries") \&\& (sizeof(map_indices(\$body."combat:injuries")) \> 0))      
  \{      
EmitTo(\$actor, "while loop start");      
/*    EmitTo(\$actor, "delaying");*/      
    \$delay(\$body."combat:healtime", TRUE, "ea62");      
    EmitTo(\$actor, "delay over");      
/*    EmitTo(\$actor, "healing an injury");*/      
/*    EmitTo(\$actor, "choosing an injury");*/      
    counter = 0;      
      
EmitTo(\$actor, "first for loop");      
    /* choose an injury to heal */      
    /* find how many injuries there are */      
    for(\$healing_index = 0; \$healing_index \< sizeof(map_indices(\$body."combat:injuries")); \$healing_index++)      
    \{      
/*        EmitTo(\$actor, "adding position " + \$healing_index);*/      
        counter += sizeof(\$body."combat:injuries"[map_indices(\$body."combat:injuries")[\$healing_index]]);      
/*        EmitTo(\$actor, "counter is " + counter);*/      
    \}      
EmitTo(\$actor, "first for loop ended");      
      
    /* heal one of the injuries one level */      
    /* choose a random injury */      
    counter = random(counter);      
/*    EmitTo(\$actor, "random injury chosen to be number " + counter);*/      
      
EmitTo(\$actor, "second for loop");      
      
    /* search through the injuries until this injury is found */      
    for(\$healing_index = 0; \$healing_index \< sizeof(map_indices(\$body."combat:injuries")); \$healing_index++)      
    \{      
EmitTo(\$actor, "index of " + \$healing_index);      
EmitTo(\$actor, "first if");      
        if(counter \< sizeof(\$body."combat:injuries"[map_indices(\$body."combat:injuries")[\$healing_index]]))      
        \{      
EmitTo(\$actor, "if true");      
      
/*          EmitTo(\$actor, "it's in this list");*/      
          /* decrement the value of this injury */      
/*          EmitTo(\$actor, Str(\$body."combat:injuries"[map_indices(\$body."combat:injuries")[\$healing_index]][counter][1]));*/      
EmitTo(\$actor, "1");      
          \$body."combat:injuries"[map_indices(\$body."combat:injuries")[\$healing_index]][counter][1]--;      
          /* if the wound is now fully healed */      
EmitTo(\$actor, "second if");      
          if(\$body."combat:injuries"[map_indices(\$body."combat:injuries")[\$healing_index]][counter][1] == 0)      
          \{      
EmitTo(\$actor, "second if true");      
/*            EmitTo(\$actor, "wound healed!");*/      
            /* remove the healed wound */      
EmitTo(\$actor, "removing healed wounds");      
            \$body."combat:injuries"[map_indices(\$body."combat:injuries")[\$healing_index]] -= (\{ \$body."combat:injuries"[map_indices(\$body."combat:injuries")[\$healing_index]][counter] \});      
EmitTo(\$actor, "updating body part");      
            /* update the body part */      
            Call(\$\{IronClaw:Lib:Combat:Lib-old\}, "describe-wound", \$detail: NewNRef(\$body, map_indices(\$body."combat:injuries")[\$healing_index]));      
EmitTo(\$actor, "third if");      
            /* if this was the last remaining wound on this body part */      
EmitTo(\$actor, "testing for index");      
if(\$healing_index) \{      
EmitTo(\$actor, "index");      
\} else \{      
EmitTo(\$actor, "no index");      
\}      
            if(\$body."combat:injuries" \&\& \$body."combat:injuries"[map_indices(\$body."combat:injuries")[\$healing_index]] \&\& !(sizeof(\$body."combat:injuries"[map_indices(\$body."combat:injuries")[\$healing_index]]) \> 0))      
            \{      
EmitTo(\$actor, "third if true");      
              \$body."combat:injuries"[map_indices(\$body."combat:injuries")[\$healing_index]] = nil;      
            \}      
EmitTo(\$actor, "third if ended");      
          \}      
EmitTo(\$actor, "second if ended");      
          break;      
        \} else \{      
EmitTo(\$actor, "if false");      
/*          EmitTo(\$actor, "try the next list");*/      
          counter -= sizeof(\$body."combat:injuries"[map_indices(\$body."combat:injuries")[\$healing_index]]);      
        \}      
EmitTo(\$actor, "first if ended");      
    \}      
EmitTo(\$actor, "second for loop ended");      
      
/*    EmitTo(\$actor, "random injury chosen to be number " + counter);*/      
      
      
/*    EmitTo(\$actor, "decrementing injury counter");*/      
/*    EmitTo(\$actor, "removing injury if it is at 0");*/      
EmitTo(\$actor, "while loop end");      
  \}      
  EmitTo(\$actor, "done healing");      
  \$body."combat:healing" = nil;      
\} else \{      
  EmitTo(\$actor, "you're already in a healing cycle");      
  \$body."combat:healing" = nil;      
\}      
      
EmitTo(\$actor, "healing cycle finished");      
      
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:regenerate_actions">
         X[M] /*      
Makes the number of actions regenerate while in combat.      
This needs to be specifically called to save processing, so actions aren't regenerated for people with full actions not in combat      
*/      
      
if (!\$victim) \{      
    /* no object was specified to regenerate actions */      
    return FALSE;      
\}      
      
      
/* check the actions aren't already regenerating */      
if (Get(NRefOb(\$victim), "combat:actions:regenerating") == 1) return FALSE;      
      
/* start action regeneration */      
      
Set(NRefOb(\$victim), "combat:actions:regenerating", 1);      
      
while(Get(NRefOb(\$victim), "combat:actions") \> Get(NRefOb(\$victim), "combat:actions:current")) \{      
    \$delay(1.0, FALSE, "f8e4");      
    Set(NRefOb(\$victim), "combat:actions:current", Get(NRefOb(\$victim), "combat:actions:current") + 1);      
\}      
      
      
/* We are finished regenerating actions. end the function to save processing */      
Set(NRefOb(\$victim), "combat:actions:regenerating", nil);      
      
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:resolve_damage">
         X[M] /*
calculates damage from an attack
*/
int damage;
damage = 0;

EmitTo(nil /* defunct */, dump_value(args));


/* calculate the damage */
if((\$attacker_attack - \$defenceArray[0]) \> 0) \{

    /* calculate the damage taken from this attack */
    damage = \$attacker_attack - \$defenceArray[0];

    /* add any bonus from the weapon to damage */
    if(\$weapon."combat:bonus:damage") \{
      \$dicearray = (\{ damage + \$weapon."combat:bonus:damage" \});
    \} else \{
      \$dicearray = (\{ damage \});
    \}

    /* If this weapon lets us add our strength to the damage */
    if(!\$weapon."combat:nostrengthadding") \{
      \$dicearray += (\{\$actor."trait:body"\});
    \}

EmitTo(nil /* defunct */, dump_value(args));
EmitTo(\$attacker, "dice: "+dump_value(\$dicearray));

    /* roll the raw damage */
    damage = Call(\$\{IronClaw:Lib:UrPeople:System\}, "roll", \$dicearray: \$dicearray );

    /* roll the armor */
    damage = damage - Call(\$\{IronClaw:Lib:UrPeople:System\}, "roll", \$dicearray: (\{ Get(\$target, "combat:armor:rating") \}));
    if (damage \< 0) damage = 0;

    /* add the damage taken to the current damage */
    /* Disabled - it's set in grant-wounds */
/*
    if (Get(\$target, "combat:damage")) \{
        Set(\$target, "combat:damage", Get(\$target, "combat:damage") + damage);
    \} else \{
        Set(\$target, "combat:damage", damage);
    \}
*/
\}

return damage;
      </Core:Property>
      <Core:Property property="merry:lib:resolve_defence">
         X[M] /*
makes a defence for the target of the attack
*/
/*Variables*/
string defence_type;
int defender_defence;

if(\$target) \$origtarget = \$target;
\$target = Get(\$actor, "combat:target");

defence_type = "none";
defender_defence = 1;

/* if the player hit */
if (\$attacker_attack \> 1) \{
    /* check if the defender will use an auto-defence */
    if (Get(\$target, "combat:cloak") == 1 \&\& Get(\$target, "combat:auto:cloak") \<= Get(\$target, "combat:actions:current")) \{
        /* make an entangle attempt using a cloak */
        /* not implemented yet */
        defence_type = "cloak";
    \} else if (Get(\$target, "combat:parry") == 1 \&\& Get(\$target, "combat:auto:parry") \<= Get(\$target, "combat:actions:current")) \{
        /* make a parry */
        if (Call(this, "action-cost", \$victim: \$target, \$cost: 20)) \{
            defender_defence = Call(\$\{IronClaw:Lib:UrPeople:System\}, "roll", \$dice1: Get(\$target, "trait:dexterity"), \$dice2: Get(\$target, "skill:combat:dodge"));
            defence_type = "parry";
        \}
    \} else if (Get(\$target, "combat:shield") == 1 \&\& Get(\$target, "combat:auto:shield") \<= Get(\$target, "combat:actions:current")) \{
        /* make a shield block */
        if (Call(this, "action-cost", \$victim: \$target, \$cost: 15)) \{
            defender_defence = Call(\$\{IronClaw:Lib:UrPeople:System\}, "roll", \$dice1: Get(\$target, "trait:dexterity"), \$dice2: Get(\$target, "skill:combat:dodge"));
            defence_type = "shield";
        \}
    \} else if (Get(\$target, "combat:auto:dodge") \&\& Get(\$target, "combat:auto:dodge") \<= Get(\$target, "combat:actions:current")) \{
        /* Make a dodge roll */
        if (Get(NRefOb(\$target), "combat:actions:current") \>= 10) \{
            defender_defence = Call(\$\{IronClaw:Lib:UrPeople:System\}, "roll", \$dicearray: (\{ Get(\$target, "trait:dexterity"), Get(\$target, "skill:combat:dodge") \}));
            defence_type = "dodge";
            if(\$attacker_attack \> defender_defence+2)
              Call(this, "action-cost", \$victim: \$target, \$cost: 10);
        \}
    \} else \{
        /* no auto-defence */
        /*EmitTo( \$actor, "no defence");*/
    \}
\}

return (\{ defender_defence, defence_type \});
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1055559538, "tonyd", "E", 1055559670, "tonyd", "E", 1055563409, "tonyd", "E", 1055564527, "tonyd", "E", 1055564577, "tonyd", "E", 1055564675, "tonyd", "E", 1055565227, "tonyd", "E", 1055565451, "tonyd", "E", 1055567524, "tonyd", "E", 1055646344, "tonyd", "E", 1055647696, "tonyd", "E", 1055647813, "tonyd", "E", 1055648075, "tonyd", "E", 1055648460, "tonyd", "E", 1055649292, "tonyd", "E", 1055651454, "tonyd", "E", 1055656388, "tonyd", "E", 1055656847, "tonyd", "X", 1055665395, "tonyd", "E", 1055727921, "tonyd", "E", 1055728917, "tonyd", "E", 1055729769, "tonyd", "X", 1055729899, "tonyd", "X", 1055729957, "tonyd", "X", 1055730186, "tonyd", "E", 1055730997, "tonyd", "E", 1055742336, "tonyd", "E", 1055742451, "tonyd", "E", 1055742824, "tonyd", "E", 1055742834, "tonyd", "E", 1055744079, "tonyd", "X", 1055744207, "tonyd", "X", 1055744779, "tonyd", "E", 1055819546, "tonyd", "X", 1055819936, "tonyd", "E", 1055820497, "tonyd", "E", 1055981235, "tonyd", "E", 1055981288, "tonyd", "E", 1055981469, "tonyd", "E", 1055981835, "tonyd", "E", 1055982744, "tonyd", "E", 1055985191, "tonyd", "X", 1055987677, "tonyd", "E", 1055988750, "tonyd", "E", 1055988831, "tonyd", "E", 1055989046, "tonyd", "X", 1056182514, "tonyd", "E", 1056182673, "tonyd", "E", 1056189771, "tonyd", "E", 1056243370, "tonyd", "E", 1056245113, "tonyd", "X", 1056250389, "tonyd", "E", 1056253647, "tonyd", "X", 1056257497, "tonyd", "E", 1056257546, "tonyd", "X", 1056261012, "tonyd", "E", 1056262589, "tonyd", "E", 1056263412, "tonyd", "X", 1056265835, "tonyd", "E", 1056441603, "tonyd", "E", 1056505293, "tonyd", "E", 1056510647, "tonyd", "E", 1056511692, "tonyd", "X", 1056512620, "tonyd", "E", 1056516462, "tonyd", "E", 1056520454, "tonyd", "E", 1056521815, "tonyd", "E", 1056522614, "tonyd", "E", 1056523396, "tonyd", "E", 1056524053, "tonyd", "X", 1056524600, "tonyd", "E", 1056526296, "tonyd", "E", 1056527939, "tonyd", "E", 1056528582, "tonyd", "E", 1056597177, "tonyd", "E", 1056611652, "tonyd", "E", 1056615856, "tonyd", "E", 1056616713, "tonyd", "E", 1056712466, "tonyd", "E", 1056758672, "tonyd", "E", 1056759610, "tonyd", "E", 1056763267, "tonyd", "E", 1056775262, "tonyd", "E", 1056778635, "tonyd", "E", 1056782623, "tonyd", "E", 1056849861, "tonyd", "E", 1056865548, "tonyd", "E", 1056869317, "tonyd", "E", 1056870884, "tonyd", "E", 1056875525, "tonyd", "E", 1056877023, "tonyd", "E", 1056877608, "tonyd", "E", 1056884922, "tonyd", "E", 1056891944, "tonyd", "E", 1057140495, "tonyd", "E", 1057141843, "tonyd", "E", 1057473231, "tonyd", "E", 1057473496, "tonyd", "E", 1057473832, "tonyd", "E", 1058160152, "tonyd", "E", 1058161969, "tonyd", "E", 1058162616, "tonyd", "E", 1058256898, "tonyd", "E", 1058260784, "tonyd", "E", 1058261379, "tonyd", "E", 1058261744, "tonyd", "E", 1058263618, "tonyd", "E", 1058264514, "tonyd", "E", 1058264589, "tonyd", "E", 1058327996, "tonyd", "E", 1059718188, "tonyd", "E", 1059718526, "tonyd", "E", 1059720091, "tonyd", "E", 1062208384, "tonyd", "E", 1067312052, "tonyd", "E", 1067312094, "tonyd", "E", 1067312184, "tonyd", "E", 1067312278, "tonyd", "E", 1068335780, "tonyd", "P", 1068335866, "tonyd", "P", 1068336113, "???", "P", 1068336651, "tonyd", "P", 1068336917, "tonyd", "P", 1068337156, "tonyd", "P", 1068337234, "tonyd", "P", 1068337287, "tonyd", "P", 1068338691, "tonyd", "P", 1068339000, "tonyd", "P", 1068339231, "tonyd", "P", 1068339338, "tonyd", "P", 1068339386, "tonyd", "P", 1068339429, "tonyd", "P", 1068339454, "tonyd", "P", 1068339480, "tonyd", "P", 1068339507, "tonyd", "P", 1068339724, "tonyd", "P", 1068339809, "tonyd", "P", 1068339902, "tonyd", "P", 1068339932, "tonyd", "P", 1068340145, "tonyd", "P", 1068340590, "tonyd", "P", 1068340635, "tonyd", "P", 1068341434, "tonyd", "P", 1068341448, "tonyd", "P", 1068341672, "tonyd", "P", 1068343348, "tonyd", "P", 1068353812, "tonyd", "P", 1068354038, "tonyd", "P", 1068354263, "tonyd", "P", 1068354342, "tonyd", "P", 1068507251, "tonyd", "P", 1068507351, "tonyd", "P", 1068507517, "tonyd", "P", 1068507818, "tonyd", "P", 1068507954, "tonyd", "P", 1068540778, "tonyd", "P", 1068540962, "tonyd", "P", 1069119769, "tonyd", "P", 1069119846, "tonyd", "P", 1069119952, "tonyd", "P", 1069120201, "tonyd", "P", 1069120287, "tonyd", "P", 1069120325, "tonyd", "P", 1069120363, "tonyd", "P", 1069120414, "tonyd", "P", 1069120427, "tonyd", "P", 1069120468, "tonyd", "P", 1069120531, "tonyd", "P", 1069120592, "tonyd", "P", 1069120766, "tonyd", "P", 1069120836, "tonyd", "P", 1069120843, "tonyd", "P", 1069120958, "tonyd", "P", 1069121066, "tonyd", "P", 1069121294, "tonyd", "P", 1069121697, "tonyd", "P", 1069121965, "tonyd", "P", 1069122091, "tonyd", "P", 1069122858, "tonyd", "P", 1069123141, "tonyd", "P", 1069123189, "tonyd", "P", 1069125189, "tonyd", "P", 1069125237, "tonyd", "P", 1069135603, "tonyd", "P", 1069135661, "tonyd", "P", 1069135873, "tonyd", "P", 1069136143, "tonyd", "P", 1069136227, "tonyd", "P", 1069136447, "tonyd", "P", 1069136701, "tonyd", "P", 1069136841, "tonyd", "P", 1069137331, "tonyd", "P", 1069137537, "tonyd", "P", 1069196280, "tonyd", "P", 1069200792, "tonyd", "P", 1069200948, "tonyd", "P", 1069201168, "tonyd", "P", 1069201310, "tonyd", "P", 1069201780, "tonyd", "P", 1069201860, "tonyd", "P", 1069201940, "tonyd", "P", 1069203013, "tonyd", "P", 1069203053, "tonyd", "P", 1069203107, "tonyd", "P", 1069203146, "tonyd", "P", 1069203180, "tonyd", "P", 1069203365, "tonyd", "P", 1069203394, "tonyd", "P", 1069203643, "tonyd", "P", 1069379766, "tonyd", "P", 1069380238, "tonyd", "P", 1069380433, "tonyd", "P", 1069380688, "tonyd", "P", 1069380874, "tonyd", "P", 1069381213, "tonyd", "P", 1069381297, "tonyd", "P", 1069382040, "tonyd", "P", 1069382530, "tonyd", "P", 1069382594, "tonyd", "P", 1069382646, "tonyd", "P", 1069382875, "tonyd", "P", 1069382963, "tonyd", "P", 1069383010, "tonyd", "P", 1069383107, "tonyd", "P", 1069383908, "tonyd", "P", 1069383936, "tonyd", "P", 1069385135, "tonyd", "P", 1069385208, "tonyd", "P", 1069385243, "tonyd", "P", 1069478847, "tonyd", "P", 1069478981, "tonyd", "P", 1069479115, "tonyd", "P", 1069479153, "tonyd", "P", 1069479300, "tonyd", "P", 1069479386, "tonyd", "P", 1069479451, "tonyd", "P", 1069479472, "tonyd", "P", 1069479512, "tonyd", "P", 1069479532, "tonyd", "P", 1069479586, "tonyd", "P", 1069479689, "tonyd", "P", 1069479726, "tonyd", "P", 1069479758, "tonyd", "P", 1069479788, "tonyd", "P", 1069479815, "tonyd", "P", 1069479836, "tonyd", "P", 1069479862, "tonyd", "P", 1069479906, "tonyd", "P", 1069479921, "tonyd", "P", 1069479990, "tonyd", "P", 1069480022, "tonyd", "P", 1069480119, "tonyd", "P", 1069480396, "tonyd", "P", 1069480475, "tonyd", "P", 1069481481, "tonyd", "P", 1069481684, "tonyd", "P", 1069481749, "tonyd", "P", 1069482898, "tonyd", "P", 1069482911, "tonyd", "P", 1069482965, "tonyd", "P", 1069483062, "tonyd", "P", 1069483080, "tonyd", "P", 1069483114, "tonyd", "P", 1069483164, "tonyd", "P", 1069483288, "tonyd", "P", 1069483324, "tonyd", "P", 1069483565, "tonyd", "P", 1069483717, "tonyd", "P", 1069483866, "tonyd", "P", 1069483924, "tonyd", "P", 1069484158, "tonyd", "P", 1069484177, "tonyd", "P", 1069484211, "tonyd", "P", 1069484523, "tonyd", "P", 1069484544, "tonyd", "P", 1069484573, "tonyd", "P", 1069484646, "tonyd", "P", 1069484781, "tonyd", "P", 1069485112, "tonyd", "P", 1069485177, "tonyd", "P", 1069485212, "tonyd", "P", 1069486210, "tonyd", "P", 1069486246, "tonyd", "P", 1069486382, "tonyd", "P", 1069486438, "tonyd", "P", 1069486537, "tonyd", "P", 1069486879, "tonyd", "P", 1069486991, "tonyd", "P", 1069487235, "tonyd", "P", 1069487268, "tonyd", "P", 1069487291, "tonyd", "P", 1069560643, "tonyd", "P", 1069561472, "tonyd", "P", 1069561574, "tonyd", "P", 1069561619, "tonyd", "P", 1069561685, "tonyd", "P", 1069561731, "tonyd", "P", 1069561785, "tonyd", "P", 1069561863, "tonyd", "P", 1069561909, "tonyd", "P", 1069561948, "tonyd", "P", 1069562245, "tonyd", "P", 1069837528, "tonyd", "P", 1069837582, "tonyd", "P", 1069837639, "tonyd", "P", 1069837747, "tonyd", "P", 1069837984, "tonyd", "P", 1069838874, "tonyd", "P", 1069838935, "tonyd", "P", 1069839010, "tonyd", "P", 1069839036, "tonyd", "P", 1069839292, "tonyd", "P", 1069839329, "tonyd", "P", 1069839396, "tonyd", "P", 1069972604, "tonyd", "P", 1069972736, "tonyd", "P", 1069972750, "tonyd", "P", 1069972785, "tonyd", "P", 1069973280, "tonyd", "P", 1069973305, "tonyd", "P", 1069973361, "tonyd", "P", 1069974014, "tonyd", "P", 1069974100, "tonyd", "P", 1069974377, "tonyd", "P", 1069974742, "tonyd", "P", 1069974825, "tonyd", "P", 1069974853, "tonyd", "P", 1069976146, "tonyd", "P", 1069976867, "tonyd", "P", 1069976911, "tonyd", "P", 1069976957, "tonyd", "P", 1069976974, "tonyd", "P", 1069977088, "tonyd", "P", 1069977148, "tonyd", "P", 1069977281, "tonyd", "P", 1069977346, "tonyd", "P", 1069978068, "tonyd", "P", 1069979587, "tonyd", "P", 1070073633, "tonyd", "P", 1070073688, "tonyd", "P", 1070073747, "tonyd", "P", 1070073779, "tonyd", "P", 1070073866, "tonyd", "P", 1070073898, "tonyd", "P", 1070073954, "tonyd", "P", 1070073989, "tonyd", "P", 1070074073, "tonyd", "P", 1070078521, "tonyd", "P", 1070078537, "tonyd", "P", 1070078699, "tonyd", "P", 1070078739, "tonyd", "P", 1070078784, "tonyd", "P", 1070078903, "tonyd", "P", 1070078952, "tonyd", "P", 1070080180, "tonyd", "P", 1070080333, "tonyd", "P", 1070080809, "tonyd", "P", 1070080859, "tonyd", "P", 1070081948, "tonyd", "P", 1070082990, "tonyd", "P", 1070083311, "tonyd", "P", 1070083411, "tonyd", "P", 1070083994, "tonyd", "P", 1070085883, "tonyd", "P", 1070085938, "tonyd", "P", 1070086373, "tonyd", "P", 1070086421, "tonyd", "P", 1070086572, "tonyd", "P", 1070086657, "tonyd", "P", 1070086870, "tonyd", "P", 1070086913, "tonyd", "P", 1070086950, "tonyd", "P", 1070086995, "tonyd", "P", 1070087059, "tonyd", "P", 1070087093, "tonyd", "P", 1070087119, "tonyd", "P", 1070087137, "tonyd", "P", 1070087154, "tonyd", "P", 1070087279, "tonyd", "P", 1070087478, "tonyd", "P", 1070087512, "tonyd", "P", 1070087795, "tonyd", "P", 1070087962, "tonyd", "P", 1070087983, "tonyd", "P", 1070088046, "tonyd", "P", 1070088104, "tonyd", "P", 1070088165, "tonyd", "P", 1070088229, "tonyd", "P", 1070088270, "tonyd", "P", 1070088300, "tonyd", "P", 1070088361, "tonyd", "P", 1070088448, "tonyd", "P", 1070088661, "tonyd", "P", 1070088732, "tonyd", "P", 1070088804, "tonyd", "P", 1070088846, "tonyd", "P", 1070088868, "tonyd", "P", 1070088885, "tonyd", "P", 1070088900, "tonyd", "P", 1070088934, "tonyd", "P", 1070088968, "tonyd", "P", 1070089077, "tonyd", "P", 1070089116, "tonyd", "P", 1070089219, "tonyd", "P", 1070156612, "tonyd", "P", 1070156818, "tonyd", "P", 1070157166, "tonyd", "P", 1070157826, "tonyd", "P", 1070158376, "tonyd", "P", 1070158408, "tonyd", "P", 1070159906, "tonyd", "P", 1070159962, "tonyd", "P", 1070160088, "tonyd", "P", 1070160162, "tonyd", "P", 1070160200, "tonyd", "P", 1070160266, "tonyd", "P", 1070160338, "tonyd", "P", 1070160547, "tonyd", "P", 1070160806, "tonyd", "P", 1070160987, "tonyd", "P", 1070161411, "tonyd", "P", 1070161531, "tonyd", "P", 1070161627, "tonyd", "P", 1070161726, "tonyd", "P", 1070161769, "tonyd", "P", 1070161922, "tonyd", "P", 1070162014, "tonyd", "P", 1070162232, "tonyd", "P", 1070162429, "tonyd", "P", 1070162830, "tonyd", "P", 1070162887, "tonyd", "P", 1070162956, "tonyd", "P", 1070166829, "tonyd", "P", 1070167123, "tonyd", "P", 1070188290, "tonyd", "P", 1070188665, "tonyd", "P", 1070188765, "tonyd", "P", 1070188839, "tonyd", "P", 1070188920, "tonyd", "P", 1070189073, "tonyd", "P", 1070189159, "tonyd", "P", 1070189351, "tonyd", "P", 1070189412, "tonyd", "P", 1070189721, "tonyd", "P", 1070189833, "tonyd", "P", 1070189877, "tonyd", "P", 1070190037, "tonyd", "P", 1070190057, "tonyd", "P", 1070190174, "tonyd", "P", 1070190207, "tonyd", "P", 1070231600, "tonyd", "P", 1070231690, "tonyd", "P", 1070231933, "tonyd", "P", 1070231979, "tonyd", "P", 1070232012, "tonyd", "P", 1070232947, "tonyd", "P", 1070233218, "tonyd", "P", 1070319540, "tonyd", "P", 1070319629, "tonyd", "P", 1070319706, "tonyd", "P", 1070319790, "tonyd", "P", 1070319892, "tonyd", "P", 1070320013, "tonyd", "P", 1070320135, "tonyd", "P", 1070320281, "tonyd", "P", 1070320540, "tonyd", "P", 1070320737, "tonyd", "P", 1070320929, "tonyd", "P", 1070420811, "tonyd", "P", 1070422081, "tonyd", "P", 1070424064, "tonyd", "P", 1070424447, "tonyd", "P", 1070620869, "tonyd", "P", 1070621382, "tonyd", "P", 1070621597, "tonyd", "P", 1070621804, "tonyd", "P", 1070621868, "tonyd", "P", 1070621952, "tonyd", "P", 1070622242, "tonyd", "P", 1070622353, "tonyd", "P", 1070622446, "tonyd", "P", 1070622869, "tonyd", "P", 1070623293, "tonyd", "P", 1127888489, "tonyd", "P", 1127888527, "tonyd", "P", 1127891510, "tonyd", "P", 1127891811, "tonyd", "P", 1127892156, "tonyd", "P", 1127892525, "tonyd", "P", 1127893124, "tonyd", "P", 1127893333, "tonyd", "P", 1127893549, "tonyd", "P", 1127893968, "tonyd", "P", 1127894105, "tonyd", "P", 1127894319, "tonyd", "P", 1127895520, "tonyd", "P", 1127895688, "tonyd", "P", 1127897082, "tonyd", "P", 1127897323, "tonyd", "P", 1127897567, "tonyd", "P", 1127897705, "tonyd", "P", 1127897887, "tonyd", "P", 1127898149, "tonyd", "P", 1127902673, "tonyd", "P", 1127902780, "tonyd", "P", 1127903199, "tonyd", "P", 1127906934, "tonyd", "P", 1127908519, "tonyd", "P", 1127908857, "tonyd", "P", 1127909857, "tonyd", "P", 1127911429, "tonyd", "P", 1128125933, "tonyd", "P", 1128126397, "tonyd", "P", 1128126445, "tonyd", "P", 1128132261, "tonyd", "P", 1130419626, "tonyd", "P", 1130419636, "tonyd", "P", 1130419849, "tonyd", "P", 1130422358, "tonyd", "P", 1130422385, "tonyd", "P", 1130422416, "tonyd", "P", 1130422435, "tonyd", "P", 1130422541, "tonyd", "P", 1130423128, "tonyd", "P", 1130761419, "tonyd", "P", 1130761598, "tonyd", "P", 1130761876, "tonyd", "P", 1130761907, "tonyd", "P", 1130761929, "tonyd", "P", 1130762104, "tonyd", "P", 1130762402, "tonyd", "P", 1130762451, "tonyd", "P", 1130931434, "tonyd", "P", 1130931471, "tonyd", "P", 1130931545, "tonyd", "P", 1130931639, "tonyd", "P", 1130931975, "tonyd", "P", 1130932421, "tonyd", "P", 1130932593, "tonyd", "P", 1130933116, "tonyd", "P", 1130933170, "tonyd", "P", 1130933286, "tonyd", "P", 1130933442, "tonyd", "P", 1130933584, "tonyd", "P", 1130933633, "tonyd", "P", 1130933710, "tonyd", "P", 1130933740, "tonyd", "P", 1130933783, "tonyd", "P", 1130933987, "tonyd", "P", 1130934087, "tonyd", "P", 1130934445, "tonyd", "P", 1130934535, "tonyd", "P", 1130934652, "tonyd", "P", 1130934693, "tonyd", "P", 1130934735, "tonyd", "P", 1130934798, "tonyd", "P", 1130934907, "tonyd", "P", 1130934961, "tonyd", "P", 1130935032, "tonyd", "P", 1130935302, "tonyd", "P", 1130935379, "tonyd", "P", 1130935436, "tonyd", "P", 1130935453, "tonyd", "P", 1130935672, "tonyd", "P", 1130935714, "tonyd", "P", 1130935745, "tonyd", "P", 1130935768, "tonyd", "P", 1130937330, "tonyd", "P", 1130937593, "tonyd", "P", 1130937685, "tonyd", "P", 1130937773, "tonyd", "P", 1130937816, "tonyd", "P", 1130937861, "tonyd", "P", 1130937894, "tonyd", "P", 1130937922, "tonyd", "P", 1130938097, "tonyd", "P", 1130938134, "tonyd", "P", 1130938218, "tonyd", "P", 1130938266, "tonyd", "P", 1130938335, "tonyd", "P", 1130938352, "tonyd", "P", 1130938393, "tonyd", "P", 1130938411, "tonyd", "P", 1130938474, "tonyd", "P", 1130938504, "tonyd", "P", 1130938519, "tonyd", "P", 1130938660, "tonyd", "P", 1130938917, "tonyd", "P", 1130939131, "tonyd", "P", 1131085234, "tonyd", "P", 1131085290, "tonyd", "P", 1131085357, "tonyd", "P", 1131085475, "tonyd", "P", 1131085547, "tonyd", "P", 1131085770, "tonyd", "P", 1131085966, "tonyd", "P", 1131086054, "tonyd", "P", 1131086154, "tonyd", "P", 1131086259, "tonyd", "P", 1131086368, "tonyd", "P", 1131086396, "tonyd", "P", 1131086462, "tonyd", "P", 1131086535, "tonyd", "P", 1131086577, "tonyd", "P", 1131086602, "tonyd", "P", 1131086745, "tonyd", "P", 1131086881, "tonyd", "P", 1131101237, "tonyd", "P", 1131101409, "tonyd", "P", 1131101765, "tonyd", "P", 1131101809, "tonyd", "P", 1131101851, "tonyd", "P", 1131143977, "tonyd", "P", 1131144074, "tonyd", "P", 1131154935, "tonyd", "P", 1131158441, "tonyd", "P", 1131158566, "tonyd", "P", 1131158656, "tonyd", "P", 1131158748, "tonyd", "P", 1131158871, "tonyd", "P", 1131159066, "tonyd", "P", 1131159161, "tonyd", "P", 1131159187, "tonyd", "P", 1131160821, "tonyd", "P", 1131162228, "tonyd", "P", 1131162296, "tonyd", "P", 1131162578, "tonyd", "P", 1131163965, "tonyd", "P", 1131164152, "tonyd", "P", 1131164343, "tonyd", "P", 1131164417, "tonyd", "P", 1131164620, "tonyd", "P", 1131165203, "tonyd", "P", 1131166968, "tonyd", "P", 1131168090, "tonyd", "P", 1131170085, "tonyd", "P", 1133316646, "tonyd", "P", 1133316727, "tonyd", "P", 1133316807, "tonyd", "P", 1133317062, "tonyd", "P", 1133317125, "tonyd", "P", 1133317303, "tonyd", "P", 1133317958, "tonyd", "P", 1133318347, "tonyd", "P", 1133318412, "tonyd", "P", 1133318453, "tonyd", "P", 1133318490, "tonyd", "P", 1133318538, "tonyd", "P", 1133318823, "tonyd", "P", 1133319005, "tonyd", "P", 1133319306, "tonyd", "P", 1133319392, "tonyd", "P", 1133319450, "tonyd", "P", 1133323557, "tonyd", "P", 1133323822, "tonyd", "P", 1133323927, "tonyd", "P", 1133325128, "tonyd", "P", 1133325164, "tonyd", "P", 1133325917, "tonyd", "P", 1133325919, "tonyd", "P", 1133325919, "tonyd", "P", 1133326073, "tonyd", "P", 1133327220, "tonyd", "P", 1133327398, "tonyd", "P", 1133327490, "tonyd", "P", 1133327542, "tonyd", "P", 1133331500, "tonyd", "P", 1133331526, "tonyd", "P", 1133331552, "tonyd", "P", 1133331582, "tonyd", "P", 1133331865, "tonyd", "P", 1133331993, "tonyd", "P", 1133332099, "tonyd", "P", 1133332481, "tonyd", "P", 1133332680, "tonyd", "P", 1133333106, "tonyd", "P", 1133333283, "tonyd", "P", 1133333647, "tonyd", "P", 1133333864, "tonyd", "P", 1133334243, "tonyd", "P", 1133334291, "tonyd", "P", 1133334381, "tonyd", "P", 1133334425, "tonyd", "P", 1133334585, "tonyd", "P", 1133334662, "tonyd", "P", 1133334928, "tonyd", "P", 1133335154, "tonyd", "P", 1133335293, "tonyd", "P", 1133335380, "tonyd", "P", 1133335751, "tonyd", "P", 1133336594, "tonyd", "P", 1133337214, "tonyd", "P", 1133337948, "tonyd", "P", 1133338522, "tonyd", "P", 1133340293, "tonyd", "P", 1133340348, "tonyd", "P", 1133340415, "tonyd", "P", 1133340656, "tonyd", "P", 1133340809, "tonyd", "P", 1133403011, "tonyd", "P", 1133403158, "tonyd", "P", 1133403177, "tonyd", "P", 1133403204, "tonyd", "P", 1133403367, "tonyd", "P", 1133403511, "tonyd", "P", 1133405920, "tonyd", "P", 1133406674, "tonyd", "P", 1133406759, "tonyd", "P", 1133406872, "tonyd", "P", 1133406967, "tonyd", "P", 1133406993, "tonyd", "P", 1133407084, "tonyd", "P", 1133407198, "tonyd", "P", 1133420609, "tonyd", "P", 1133501954, "tonyd", "P", 1133502009, "tonyd", "P", 1133503261, "tonyd", "P", 1133658254, "tonyd", "P", 1133658650, "tonyd", "P", 1133658825, "tonyd", "P", 1133658984, "tonyd", "P", 1133659466, "tonyd", "P", 1133659490, "tonyd", "P", 1133659543, "tonyd", "P", 1133659564, "tonyd", "P", 1133659613, "tonyd", "P", 1133659633, "tonyd", "P", 1133659660, "tonyd", "P", 1133659679, "tonyd", "P", 1133659791, "tonyd", "P", 1133659807, "tonyd", "P", 1133660249, "tonyd", "P", 1133660484, "tonyd", "P", 1133660739, "tonyd", "P", 1133660860, "tonyd", "P", 1133661422, "tonyd", "P", 1133662529, "tonyd", "P", 1133662613, "tonyd", "P", 1133662700, "tonyd", "P", 1133757632, "tunk_bodin", "X", 1133759498, "tonyd", "P", 1133831387, "tunk_bodin", "X", 1133918953, "tunk_bodin", "X", 1134182803, "tonyd", "P", 1134182865, "tonyd", "P", 1134256506, "tonyd", "P", 1134256686, "tonyd", "P", 1134256736, "tonyd", "P", 1134256838, "tonyd", "P", 1134257059, "tonyd", "P", 1134257178, "tonyd", "P", 1134257274, "tonyd", "P", 1134257457, "tonyd", "P", 1134257596, "tonyd", "P", 1134257657, "tonyd", "P", 1134257699, "tonyd", "P", 1134258112, "tonyd", "P", 1134258183, "tonyd", "P", 1134260044, "tonyd", "P", 1134262779, "tonyd", "P", 1134262818, "tonyd", "P", 1134262852, "tonyd", "P", 1134262872, "tonyd", "P", 1134262887, "tonyd", "P", 1134263088, "tonyd", "P", 1134263230, "tonyd", "P", 1134270414, "tonyd", "P", 1134270438, "tonyd", "P", 1134270923, "tonyd", "P", 1134272199, "tonyd", "P", 1134272397, "tonyd", "P", 1134351287, "tonyd", "P", 1134709137, "tonyd", "P", 1134709173, "tonyd", "P", 1134709792, "tonyd", "P", 1134710156, "tonyd", "P", 1134710415, "tonyd", "P", 1134710480, "tonyd", "P", 1134710668, "tonyd", "P", 1134710776, "tonyd", "P", 1134710930, "tonyd", "P", 1134711211, "tonyd", "P", 1134711476, "tonyd", "P", 1134711707, "tonyd", "P", 1134711761, "tonyd", "P", 1134711882, "tonyd", "P", 1134711948, "tonyd", "P", 1134711999, "tonyd", "P", 1134712114, "tonyd", "P", 1134712231, "tonyd", "P", 1134712473, "tonyd", "P", 1134712853, "tonyd", "P", 1134712879, "tonyd", "P", 1134713076, "tonyd", "P", 1134713138, "tonyd", "P", 1134713195, "tonyd", "P", 1134713296, "tonyd", "P", 1134713364, "tonyd", "P", 1134713554, "tonyd", "P", 1134713686, "tonyd", "P", 1134713695, "tonyd", "P", 1134713779, "tonyd", "P", 1134713813, "tonyd", "P", 1134713868, "tonyd", "P", 1134714772, "tonyd", "P", 1134714795, "tonyd", "P", 1134714855, "tonyd", "P", 1137962871, "tunk_bodin", "X", 1138247665, "tonyd", "P", 1138248620, "tonyd", "P", 1138254947, "tonyd", "P", 1138254996, "tonyd", "P", 1138255026, "tonyd", "P", 1138257003, "tonyd", "P", 1138257040, "tonyd", "P", 1138257410, "tonyd", "P", 1138257598, "tonyd", "P", 1138257742, "tonyd", "P", 1138257883, "tonyd", "P", 1138416366, "tonyd", "P", 1138416477, "tonyd", "P", 1138418558, "tonyd", "P", 1138418783, "tonyd", "P", 1138418858, "tonyd", "P", 1138419765, "tonyd", "P", 1138420924, "tonyd", "P", 1138421145, "tonyd", "P", 1138427318, "tonyd", "P", 1138427449, "tonyd", "P", 1138428498, "tonyd", "P", 1138428644, "tonyd", "P", 1138428768, "tonyd", "P", 1138430885, "tonyd", "P", 1138431129, "tonyd", "P", 1138431752, "tonyd", "P", 1138431841, "tonyd", "P", 1138431873, "tonyd", "P", 1138432083, "tonyd", "P", 1138432334, "tonyd", "P", 1138435498, "tonyd", "P", 1138435545, "tonyd", "P", 1138435576, "tonyd", "P", 1138436261, "tonyd", "P", 1138436427, "tonyd", "P", 1138436900, "tonyd", "P", 1138436932, "tonyd", "P", 1138436948, "tonyd", "P", 1138437023, "tonyd", "P", 1138437046, "tonyd", "P", 1138437058, "tonyd", "P", 1138437074, "tonyd", "P", 1138437088, "tonyd", "P", 1138437105, "tonyd", "P", 1138437127, "tonyd", "P", 1138437135, "tonyd", "P", 1138437164, "tonyd", "P", 1138437501, "tonyd", "P", 1138438074, "tonyd", "P", 1138438216, "tonyd", "P", 1138438344, "tonyd", "P", 1138438453, "tonyd", "P", 1138438641, "tonyd", "P", 1138439564, "tonyd", "P", 1138439685, "tonyd", "P", 1138441770, "tonyd", "P", 1138443280, "tonyd", "P", 1138443941, "tonyd", "P", 1138445238, "tonyd", "P", 1138445980, "tonyd", "P", 1138446501, "tonyd", "P", 1138446649, "tonyd", "P", 1138446708, "tonyd", "P", 1138446961, "tonyd", "P", 1138447072, "tonyd", "P", 1138447365, "tonyd", "P", 1138447793, "tonyd", "P", 1138448317, "tonyd", "P", 1138448527, "tonyd", "P", 1138448578, "tonyd", "P", 1138448615, "tonyd", "P", 1138448792, "tonyd", "P", 1138448844, "tonyd", "P", 1138448881, "tonyd", "P", 1138448924, "tonyd", "P", 1138449457, "tonyd", "P", 1138451335, "tonyd", "P", 1138451544, "tonyd", "P", 1138451567, "tonyd", "P", 1138451646, "tonyd", "P", 1138452327, "tonyd", "P", 1138456077, "tonyd", "P", 1138493248, "tonyd", "P", 1138493807, "tonyd", "P", 1138494078, "tonyd", "P", 1138494413, "tonyd", "P", 1138494591, "tonyd", "P", 1138495424, "tonyd", "P", 1138495924, "tonyd", "P", 1138497784, "tonyd", "P", 1138498255, "tonyd", "P", 1138498812, "tonyd", "P", 1138499176, "tonyd", "P", 1138499650, "tonyd", "P", 1138499737, "tonyd", "P", 1138499894, "tonyd", "P", 1138504580, "tonyd", "P", 1138507347, "tonyd", "P", 1138507389, "tonyd", "P", 1138508867, "tonyd", "P", 1138508992, "tonyd", "P", 1138509047, "tonyd", "P", 1138770667, "tonyd", "P", 1138771391, "tonyd", "P", 1138839514, "tonyd", "P", 1138840626, "tonyd", "P", 1139782532, "tunk_bodin", "X", 1139782789, "tunk_bodin", "X", 1140326004, "tonyd", "P", 1140339938, "tonyd", "P", 1140340369, "tonyd", "P", 1140340710, "tonyd", "P", 1140340775, "tonyd", "P", 1140340850, "tonyd", "P", 1140340886, "tonyd", "P", 1140341368, "tonyd", "P", 1140341480, "tonyd", "P", 1140341802, "tonyd", "P", 1140342685, "tonyd", "P", 1140342876, "tonyd", "P", 1140343018, "tonyd", "P", 1140343204, "tonyd", "P", 1140343234, "tonyd", "P", 1140343360, "tonyd", "P", 1140343436, "tonyd", "P", 1140343633, "tonyd", "P", 1140344051, "tonyd", "P", 1140344485, "tonyd", "P", 1140344572, "tonyd", "P", 1140344880, "tonyd", "P", 1141797247, "tonyd", "P", 1141797308, "tonyd", "P", 1141797352, "tonyd", "P", 1141797368, "tonyd", "P", 1141797800, "tonyd", "P", 1141797835, "tonyd", "P", 1141797852, "tonyd", "P", 1141797871, "tonyd", "P", 1141798089, "tonyd", "P", 1141798172, "tonyd", "P", 1141798248, "tonyd", "P", 1141798317, "tonyd", "P", 1141798359, "tonyd", "P", 1141798408, "tonyd", "P", 1141798451, "tonyd", "P", 1141798518, "tonyd", "P", 1141798535, "tonyd", "P", 1141798573, "tonyd", "P", 1141798841, "tonyd", "P", 1141798887, "tonyd", "P", 1141798906, "tonyd", "P", 1141798970, "tonyd", "P", 1141799000, "tonyd", "P", 1141799068, "tonyd", "P", 1141799174, "tonyd", "P", 1141799196, "tonyd", "P", 1141799219, "tonyd", "P", 1141799273, "tonyd", "P", 1141799310, "tonyd", "P", 1141799424, "tonyd", "P", 1141799524, "tonyd", "P", 1141800656, "tonyd", "P", 1141801166, "tonyd", "P", 1141801375, "tonyd", "P", 1141801457, "tonyd", "P", 1141801491, "tonyd", "P", 1141801524, "tonyd", "P", 1150521489, "tonyd", "P", 1150521722, "tonyd", "P", 1150522354, "tonyd", "P", 1150522390, "tonyd", "P", 1150522448, "tonyd", "P", 1150522770, "tonyd", "P", 1150523536, "tonyd", "P", 1150523705, "tonyd", "P", 1150594769, "tonyd", "P", 1150594846, "tonyd", "P", 1150595130, "tonyd", "P", 1150596014, "tonyd", "P", 1150598088, "tonyd", "P", 1150598212, "tonyd", "P", 1150598233, "tonyd", "P", 1150598247, "tonyd", "P", 1150598282, "tonyd", "P", 1150599165, "tonyd", "P", 1150599216, "tonyd", "P", 1150599391, "tonyd", "P", 1150599680, "tonyd", "P", 1150606741, "tonyd", "P", 1150606924, "tonyd", "P", 1150607185, "tonyd", "P", 1150607383, "tonyd", "P", 1150607416, "tonyd", "P", 1150607431, "tonyd", "P", 1150607603, "tonyd", "P", 1150608228, "tonyd", "P", 1150608352, "tonyd", "P", 1150608483, "tonyd", "P", 1150609751, "tonyd", "P", 1150609891, "tonyd", "P", 1150609985, "tonyd", "P", 1150610042, "tonyd", "P", 1150610066, "tonyd", "P", 1150611933, "tonyd", "P", 1150612053, "tonyd", "P", 1150612068, "tonyd", "P", 1150612780, "tonyd", "P", 1150613015, "tonyd", "P", 1151107413, "tonyd", "P", 1151107858, "tonyd", "P", 1151107946, "tonyd", "P", 1151108074, "tonyd", "P", 1151108108, "tonyd", "P", 1151108203, "tonyd", "P", 1151108286, "tonyd", "P", 1151108490, "tonyd", "P", 1151214412, "tonyd", "P", 1151214437, "tonyd", "P", 1151214588, "tonyd", "P", 1151214846, "tonyd", "P", 1151215383, "tonyd", "P", 1151215395, "tonyd", "P", 1151215418, "tonyd", "P", 1151215603, "tonyd", "P", 1151215640, "tonyd", "P", 1151215666, "tonyd", "P", 1151216016, "tonyd", "P", 1151216043, "tonyd", "P", 1151216404, "tonyd", "P", 1151216508, "tonyd", "P", 1151216608, "tonyd", "P", 1151216687, "tonyd", "P", 1151216738, "tonyd", "P", 1151217447, "tonyd", "P", 1151217629, "tonyd", "P", 1152412077, "tonyd", "P", 1152412364, "tonyd", "P", 1152412516, "tonyd", "P", 1152412897, "tonyd", "P", 1152413094, "tonyd", "P", 1152413101, "tonyd", "P", 1152415515, "tonyd", "P", 1152415782, "tonyd", "P", 1152415838, "tonyd", "P", 1152415893, "tonyd", "P", 1152415935, "tonyd", "P", 1152415948, "tonyd", "P", 1152415990, "tonyd", "P", 1152418477, "tonyd", "P", 1152424909, "tonyd", "P", 1152427024, "tonyd", "P", 1152699686, "tonyd", "P", 1152699868, "tonyd", "P", 1152699888, "tonyd", "P", 1152700160, "tonyd", "P", 1152700182, "tonyd", "P", 1152700258, "tonyd", "P", 1152700649, "tonyd", "P", 1152701120, "tonyd", "P", 1152701165, "tonyd", "P", 1152701213, "tonyd", "P", 1152701910, "tonyd", "P", 1152701999, "tonyd", "P", 1152702086, "tonyd", "P", 1152702388, "tonyd", "P", 1152703406, "tonyd", "P", 1152703534, "tonyd", "P", 1152703716, "tonyd", "P", 1152703770, "tonyd", "P", 1152703800, "tonyd", "P", 1152703837, "tonyd", "P", 1152703862, "tonyd", "P", 1152703891, "tonyd", "P", 1152703915, "tonyd", "P", 1152704127, "tonyd", "P", 1152704145, "tonyd", "P", 1152704208, "tonyd", "P", 1152704237, "tonyd", "P", 1152704313, "tonyd", "P", 1152704464, "tonyd", "P", 1152704604, "tonyd", "P", 1152704784, "tonyd", "P", 1152704857, "tonyd", "P", 1152704900, "tonyd", "P", 1152704967, "tonyd", "P", 1152704979, "tonyd", "P", 1152705035, "tonyd", "P", 1152705113, "tonyd", "P", 1152705195, "tonyd", "P", 1152705215, "tonyd", "P", 1152705290, "tonyd", "P", 1152705311, "tonyd", "P", 1152705398, "tonyd", "P", 1152705422, "tonyd", "P", 1152705440, "tonyd", "P", 1152934070, "tonyd", "P", 1152934099, "tonyd", "P", 1152934106, "tonyd", "P", 1152934453, "tonyd", "P", 1152934643, "tonyd", "P", 1152942079, "tonyd", "P", 1152942195, "tonyd", "P", 1152942558, "tonyd", "P", 1152942761, "tonyd", "P", 1152942773, "tonyd", "P", 1152942831, "tonyd", "P", 1152947729, "tonyd", "P", 1152947856, "tonyd", "P", 1152948122, "tonyd", "P", 1152948688, "tonyd", "P", 1152948700, "tonyd", "P", 1152948770, "tonyd", "P", 1152948862, "tonyd", "P", 1152949407, "tonyd", "P", 1152949659, "tonyd", "P", 1152949724, "tonyd", "P", 1152949749, "tonyd", "P", 1152949772, "tonyd", "P", 1152950518, "tonyd", "P", 1152950549, "tonyd", "P", 1152950582, "tonyd", "P", 1152950635, "tonyd", "P", 1152950729, "tonyd", "P", 1152950836, "tonyd", "P", 1152950871, "tonyd", "P", 1152951822, "tonyd", "P", 1152952346, "tonyd", "P", 1152952437, "tonyd", "P", 1152952505, "tonyd", "P", 1152952995, "tonyd", "P", 1153030176, "tonyd", "P", 1153030267, "tonyd", "P", 1153030305, "tonyd", "P", 1153030388, "tonyd", "P", 1153030466, "tonyd", "P", 1153031802, "tonyd", "P", 1153031849, "tonyd", "P", 1153034996, "tonyd", "P", 1153035204, "tonyd", "P", 1153035291, "tonyd", "P", 1153035343, "tonyd", "P", 1153035362, "tonyd", "P", 1153035809, "tonyd", "P", 1153036035, "tonyd", "P", 1153036464, "tonyd", "P", 1153036597, "tonyd", "P", 1153036716, "tonyd", "P", 1153036777, "tonyd", "P", 1153036886, "tonyd", "P", 1153036902, "tonyd", "P", 1153036958, "necate", "P", 1153037118, "necate", "P", 1153038343, "necate", "P", 1153544330, "tonyd", "P" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes>
      <Notes:Category cat="QA" catstate="Open">
        <Notes:Note ix="966637404" state="Open" user="tony">
           a library for ironclaw combat
        </Notes:Note>
      </Notes:Category>
    </Notes:Notes>
  </Base:Thing>
</object>
