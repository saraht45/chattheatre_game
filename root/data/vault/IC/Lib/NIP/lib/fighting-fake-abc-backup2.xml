<object clone="/obj/properties" owner="tonyd">
  <Core:PropertyContainer>
    <Ur:UrObject/>
    <Core:PCProperties>
      <Core:Property property="#list#">
         X[M] /* 
 
----------------------------------- 
 LIBRARY CONTENT (Merry/SAM) 
 
 Object:     Marrach:Lib:NIP:lib:fighting-fake-marrach 
 Maintainer: Kalle Alm/Tony Demetriou 
 Email:      azrael@ironclaw.skotos.net kalle@marrach.skotos.net 
 Rev:        1.0 
 Generated:  Sun Sep 30 02:45:36 2007 
 Last rev.:  Wed Oct 18 09:24:06 2006 by zwoc (EED) 
 
 
 
(Do not modify #list#. Automatically constructed property.) 
 
 
---------------------------------------------------------------------------------- 
 act:nip/die              (M) Simple die action for fake fighters. 
 lib:fight_command        (M) See if command is provocative. 
 lib:fight_loop           (M) The main fighting loop. 
 lib:fighting-fake:decide (M) Decide whether we attack anyone in the area or so. 
---------------------------------------------------------------------------------- 
 
*/
      </Core:Property>
      <Core:Property property="dependency:needs"/>
      <Core:Property property="done:message">
         "The fighting-fake library was loaded successfully. Check twiki out for details on the properties you can customize (or leave it as is; the defaults are fairly sane)."
      </Core:Property>
      <Core:Property property="init:hooks">
         (\{ "fighting-fake-abc" \})
      </Core:Property>
      <Core:Property property="init:merry">
         (\{ "lib:fighting-fake-abc:decide", "lib:fight_loop" \})
      </Core:Property>
      <Core:Property property="init:properties">
         ([ "nip:trait:fighting:attack-bonus":0, "nip:trait:fighting:attack-dc":12, "nip:trait:fighting:attack-everyone":0, "nip:trait:fighting:attack-roll":20, "nip:trait:fighting:attack-time-max":8, "nip:trait:fighting:attack-time-min":4, "nip:trait:fighting:attack-weapon-dc-penalty":2, "nip:trait:fighting:attack-when-provoked":1, "nip:trait:fighting:defence-bonus":0, "nip:trait:fighting:defence-roll":20, "nip:trait:fighting:delay-max":10, "nip:trait:fighting:delay-min":6, "nip:trait:fighting:health":5, "nip:trait:fighting:hurtful-verbs":(\{ "slash", "cut", "stab" \}), "nip:trait:fighting:locations":(\{ "lefthand", "righthand", "leftleg", "rightleg", "chest" \}), "nip:trait:fighting:require-weapon":1, "nip:trait:fighting:require-wielded":1, "nip:trait:fighting:targeting-frequency":3, "nip:trait:fighting:wound-max":3, "nip:trait:fighting:wound-min":1, "nip:trait:fighting:wounding":(\{ 1.0, 1.0, 0 \}), "npc:fighting:provocateurs":(\{  \}) ])
      </Core:Property>
      <Core:Property property="merry:act:nip/die">
         X[M] /* 
 * D=Simple die action for fake fighters. 
 */ 
::shutdown(); 
 
this."npc:is_dead" = TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:fight_command">
         X[M] /* 
 * D=See if command is provocative. 
 * 
 * Author: Kalle Alm 
 * Email:  kalle@mortalis.skotos.net 
 * Since:  Apr 25 12:23, 2006 
 * State:  UNSTABLE 
 */ 
int dc, ATTACK_CALC, rolling; 
constant PAUSE_ACT = \$fdmin + random(\$fdran); 
constant PAUSE_ATTACK = \$admin + random(\$adran); 
constant IN_RANGE = (\$target."base:environment" == this."base:environment"); 
constant ALIVE = (Int(this."npc:wound-level") \< \$woundmax); 
/*constant ATTACK_CALC = (random(20) \> this."nip:trait:fighting:attack-dc");*/ 
constant WOUND_CALC = (this."nip:trait:fighting:wound-min" + random(this."nip:trait:fighting:wound-max"-this."nip:trait:fighting:wound-min")); 
 
\$db       = this."nip:behavior:fighting"; 
\$target   = \$actor; 
\$fdmin    = this."nip:trait:fighting:delay-min"; 
\$fdran    = this."nip:trait:fighting:delay-max"-\$fdmin; 
\$admin    = this."nip:trait:fighting:attack-time-min"; 
\$adran    = this."nip:trait:fighting:attack-time-max"-\$admin; 
\$woundmax = this."nip:trait:fighting:health"; 
 
if (!this."nip:trait:fighting:attack-when-provoked") \{ 
    return TRUE; 
\} 
 
if (!ALIVE) \{ 
    return TRUE; 
\} 
 
if (!member(\$imperative, this."nip:trait:fighting:hurtful-verbs")) \{ 
    return TRUE; 
\} 
 
/* Must the actor be wielding a weapon? */ 
if (this."nip:trait:fighting:require-weapon") \{ 
    \$weapons = \$actor."base:weapons"; 
    if (!sizeof(\$weapons)) \{ 
        EmitTo(\$actor, "You must be wielding a weapon to do that."); 
        return FALSE; 
    \} 
    /* Must the weapon be wielded? Redundant question. If it's in base:weapons, it IS wielded. */ 
\} 
 
/* This is a hurtful command. Check if there's a further script in the NIP to run */ 
if(FindMerry( this, "lib", "fighting_react_to_attack" )) \{ 
  /* There is. Run it, and if it returns true, make the NIP consider them a provocateur */ 
  if(!Call(this, "fighting_react_to_attack", \$attacker: \$actor)) 
    return FALSE; 
\} 
 
/* This is a hurtful command. Make actor provocateur. */ 
this."npc:fighting:provocateurs" = Arr(this."npc:fighting:provocateurs") + (\{ \$actor \}); 
 
if (!this."npc:fighting:target") \{ 
    this."npc:fighting:target" = \$actor; 
\} 
if (!this.in_a_fight) \{ 
    ::fight_loop(); 
\} 
 
/* Is the actor in the middle of attacking? */ 
if (\$actor."nip:is_attacking") \{ 
    EmitTo(\$actor, "You're already in the middle of an attack. You can't attack twice simultaneously."); 
    return FALSE; 
\} 
 
/* 
 * Describe user attacking nipper. The nipper's fighting DB contains this information. 
 * \$(desc) can be used to obtain "slash at" or "cut" etc. \$(actor) is the attacker. \$(npc) or \$(this) is the nipper. 
 */ 
\$actor."nip:is_attacking" = TRUE; 
::behave(\$mood: "IS-ATTACKED"); 
 
/* Hold... */ 
\$delay(PAUSE_ATTACK, 0, "aaaa"); 
\$actor."nip:is_attacking" = nil; 
 
if (!ALIVE \|\| !IN_RANGE) return 0; 
 
/* Get results. */ 
    dc = Int(\$actor."skill:cutoffensive") + Int(\$actor."skill:cutoffensive") + Int(\$actor."skill:thrustoffensive"); 
    rolling = Int(this."nip:trait:fighting:defence-roll"); 
    if(rolling+Int(this."nip:trait:fighting:defence-bonus")\<dc)rolling = dc - Int(this."nip:trait:fighting:defence-bonus"); 
    ATTACK_CALC = (random(rolling)+Int(this."nip:trait:fighting:attack-bonus") \<= dc); 
 
 
if (ATTACK_CALC) \{ 
    /* Success. Calculate wound. */ 
    int w; 
    w = WOUND_CALC; 
    this."npc:wound-level" = Int(this."npc:wound-level") + w; 
    if (!ALIVE) \{ 
        /* We died! */ 
        ::behave(\$mood: "DIED"); 
        Act(this, "nip/die"); /* ::shutdown(); */ 
        /* Check if there's a further death script in the NIP to run */ 
        if(FindMerry( this, "lib", "fighting_die")) \{ 
          /* There is. Run it */ 
          Call(this, "fighting_die", \$attacker: \$actor); 
        \} 
    \} else \{ 
        ::behave(\$mood: "WAS-WOUNDED"); 
    \} 
\} else \{ 
    /* Failure. */ 
    ::behave(\$mood: "EVADED"); 
\} 
/* 
 * ChangeLog [ 
 *    Change(Apr 25 12:23, 2006; Zwoc)=Added script to codebase. 
 * ] 
 */
      </Core:Property>
      <Core:Property property="merry:lib:fight_loop">
         X[M] /*
 * D=The main fighting loop.
 *
 * Author: Kalle Alm
 * Email:  kalle@mortalis.skotos.net
 * Since:  Apr 25 11:39, 2006
 * State:  EXPERIMENTAL
 */
int dc, ATTACK_CALC, rolling;
constant PAUSE_ACT = \$fdmin + random(\$fdran);
constant PAUSE_ATTACK = \$admin + random(\$adran);
constant IN_RANGE = (\$target."base:environment" == this."base:environment");
constant ALIVE = (Int(this."combat:damage") \< \$woundmax);
/*constant ATTACK_CALC = (random(20) \> this."nip:trait:fighting:attack-dc" + (sizeof(\$target."base:weapons") ? this."nip:trait:fighting:attack-weapon-dc-penalty" : 0));*/
constant FIGHT_TIMED = (\$timer == this.in_a_fight);

\$debug = 1;

if (this."npc:state" == "asleep") \{
    Call(this, "handler:state:awake");
    \$delay(2 + random(3), 0, "0000");
\}

if (this.in_a_fight) \{
    /* Er? */
    return 0;
\}
\$target   = this."npc:fighting:target";
\$fdmin    = this."nip:trait:fighting:delay-min";
\$fdran    = this."nip:trait:fighting:delay-max"-\$fdmin;
\$admin    = this."nip:trait:fighting:attack-time-min";
\$adran    = this."nip:trait:fighting:attack-time-max"-\$admin;
\$woundmax = this."nip:trait:fighting:health";
\$timer    = time();

if (!\$target) \{
    /* No target. */
    return 0;
\}
this.in_a_fight = \$timer;
\$db = this."nip:behavior:fighting";

while (IN_RANGE \&\& ALIVE \&\& FIGHT_TIMED\&\& IN_RANGE
       \&\& this.in_a_fight \&\& \$target \&\& \$target."udat:possessed") \{
EmitTo(this, "loop");

    /* are we in fighting mode? */
    if(!this."combat:fighting" \&\& \$target \&\& \$target."base:environment" == this."base:environment") \{
      Social(this, "fight", nil, nil, nil, \$target);
    \}
EmitTo(this, "1");
    /* So, we pause... */
    \$delay(PAUSE_ACT, 0, "aaaa");
EmitTo(this, "2");

    if (!IN_RANGE \|\| !ALIVE \|\| !\$target \|\| !\$target."udat:possessed") \{
      Social(this, "breakcombat");
      continue;
    \}
    /* ... and attack... */
EmitTo(this, "3");

    /* Check if there's a further script in the NIP to run */
    if(FindMerry( this, "lib", "fighting_attack")) \{
      /* There is. Run it, and if it returns true, make the NIP attack */
      if(!Call(this, "fighting_attack", \$attacker: this, \$target: \$target)) \{
        this.in_a_fight = nil;
        continue;
      \}
    \}
EmitTo(this, "4");
EmitTo(this, dump_value(Int(\$target."combat:damage")));
EmitTo(this, dump_value(Int(\$target."trait:body")));
EmitTo(this, "4.1");

    if(Int(\$target."combat:damage") \> Int(\$target."trait:body")+3) \{
      /* check if the target is already knocked out of combat */
      /* they are */
EmitTo(this, "5");

      /* beaten them. We no longer feel provoked */
      this."npc:fighting:provocateurs" -= (\{ this."npc:fighting:target" \});
      this."npc:fighting:provocateurs" -= (\{ nil \});
EmitTo(this, "5.1");
      /* Check if there's a further script in the NIP to run */
      if(FindMerry( this, "lib", "fighting_finish")) \{
EmitTo(this, "5.2");
        /* There is. Run it, and if it doesn't return true, stop */
        if(!Call(this, "fighting_finish", \$attacker: this, \$target: \$target)) \{
          this.in_a_fight = nil;
          return FALSE;
        \}
      \} else \{
EmitTo(this, "5.3");
        /* no script. So we just kill them (if we're in a danger area) or ignore them (if we're not) */
          /* NOT WRITTEN YET */
EmitTo(this, "Target knocked out of combat.");
      \}

EmitTo(this, "6");

      /* we're done with this target */
      this."npc:fighting:target" = nil;
/*      \$target = nil;*/
EmitTo(this, "7");

    \} else \{
      /* attack the target */
EmitTo(this, "Attacking them");
      ::behave(\$mood: "ATTACK-ATTEMPT", \$actor: \$target);
    \}

EmitTo(this, "7.1");
\}
EmitTo(this, "8");

/* if target is dead, remove them from the list of provocateurs */
if(this."npc:fighting:target" \&\& this."npc:fighting:target"."death:dead")
  this."npc:fighting:provocateurs" -= (\{ this."npc:fighting:target" \});
/* and just for good measure */
this."npc:fighting:provocateurs" -= (\{ nil \});
this.in_a_fight = nil;
/*
 * ChangeLog [
 *    Change(Apr 25 11:39, 2006; Zwoc)=Added script to codebase.
 * ]
 */
      </Core:Property>
      <Core:Property property="merry:lib:fighting-fake-abc:decide">
         X[M] /*
 * D=Decide whether we attack anyone in the area or so.
 *
 * Author: Kalle Alm
 * Email:  kalle@mortalis.skotos.net
 * Since:  Apr 25 11:01, 2006
 * State:  EXPERIMENTAL
 */
object *inv, *provocateurs;
int i, ix;

\$debug = 0;

if (this.in_a_fight) \{
    /* We're -already- doing something -- fighting. */
    return 0;
\}

if (this."npc:state" == "asleep") \{
    /* We're asleep. We WILL wake up if someone attacks us though. */
    return 0;
\}

if(\$debug)
  Social(this, "say", nil, "Do I want to attack someone?");
EmitTo(this, "Do I want to attack someone?");

if (this."nip:trait:fighting:targeting-frequency" \&\& random(this."nip:trait:fighting:targeting-frequency") \&\& !\$fight_anyway) \{
    /* We're apparently not paying attention right now. */
    if(\$debug)
      Social(this, "say", nil, "Nope. I'm not feeling agressive.");
    EmitTo(this, "Nope. I'm not feeling agressive.");
    return 0;
\}

if(\$debug)
  Social(this, "say", nil, "Yes. I'll pick a target.");
EmitTo(this, "Yes. I'll pick a target.");



/* Do we attack when provoked? */
if (this."nip:trait:fighting:attack-when-provoked" \&\& this."npc:fighting:provocateurs" \&\& sizeof(Arr(this."npc:fighting:provocateurs"))) \{
    object target;
    this."npc:fighting:provocateurs" -= (\{ nil \});
    provocateurs = Arr(this."npc:fighting:provocateurs");
    ix = sizeof(provocateurs);

    if(\$debug)
      Social(this, "say", nil, "Do I see anyone that provoked me?");
    EmitTo(this, "Do I see anyone that provoked me?");
    while(ix) \{
      target = provocateurs[random(sizeof(provocateurs))];
      provocateurs -= (\{ target \});
      ix = sizeof(provocateurs);
      if (!target."udat:possessed") target = nil;
      if (target \&\& target."base:environment" != this."base:environment") target = nil;
      /* Do we have a list of provocateurs? */
      if (target) \{
        /* We found someone who previously provoked us */
        if(\$debug)
          Social(this, "say", nil, "I spotted "+dump_value(target));
        EmitTo(this, "I spotted "+dump_value(target));
        this."npc:fighting:target" = target;
        ::fight_loop();
        return \$SIG_DONE;
      \}
    \}
\}

/* Do we attack everyone? */
if (this."nip:trait:fighting:attack-everyone") \{
    object target;
    inv          = this."base:environment"."base:inventory" - (\{ this \});
    ix           = sizeof(inv);

    while (ix) \{
        target = inv[random(ix)];
        inv -= (\{ target \});
        ix--;
        if (!target."udat:possessed") target = nil;
        if (target) \{
            if(\$debug)
              Social(this, "say", nil, "I attack everyone, and spotted "+dump_value(target));
            EmitTo(this, "I attack everyone, and spotted "+dump_value(target));
            this."npc:fighting:target" = target;
            ::fight_loop();
            return \$SIG_DONE;
        \}
    \}
\}

if(\$debug)
  Social(this, "say", nil, "I couldn't find a target");
EmitTo(this, "I couldn't find a target");
/*
 * ChangeLog [
 *    Change(Apr 25 11:01, 2006; Zwoc)=Added script to codebase.
 * ]
 */
      </Core:Property>
      <Core:Property property="merry:react:command-dob%nip-fighting">
         X[M] return ::fight_command(\$desc: \$imperative);
      </Core:Property>
      <Core:Property property="merry:react:command-iob%nip-fighting">
         X[M] return ::fight_command(\$desc: \$(iob:description));
      </Core:Property>
      <Core:Property property="property:map">
         ([ "nip:trait:fighting:attack-dc":1, "nip:trait:fighting:attack-everyone":1, "nip:trait:fighting:attack-time-max":1, "nip:trait:fighting:attack-time-min":1, "nip:trait:fighting:attack-weapon-dc-penalty":1, "nip:trait:fighting:attack-when-provoked":1, "nip:trait:fighting:delay-max":1, "nip:trait:fighting:delay-min":1, "nip:trait:fighting:health":1, "nip:trait:fighting:hurtful-verbs":5, "nip:trait:fighting:locations":5, "nip:trait:fighting:require-weapon":1, "nip:trait:fighting:require-wielded":1, "nip:trait:fighting:targeting-frequency":1, "nip:trait:fighting:wound-max":1, "nip:trait:fighting:wound-min":1, "nip:trait:fighting:wounding":5 ])
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1193555548, "tonyd", "P", 1193555580, "tonyd", "E", 1193644599, "tonyd", "P", 1193646891, "tonyd", "P", 1193648174, "tonyd", "P", 1193648394, "tonyd", "P", 1193648746, "tonyd", "P", 1193648768, "tonyd", "P", 1193648807, "tonyd", "P", 1193907970, "tonyd", "P", 1193908123, "tonyd", "P", 1193908295, "tonyd", "E", 1193908385, "tonyd", "P", 1193908418, "tonyd", "P", 1193908635, "tonyd", "P", 1193908679, "tonyd", "P", 1193908907, "tonyd", "P", 1193909004, "tonyd", "P", 1193909018, "tonyd", "P", 1193909049, "tonyd", "P", 1193909096, "tonyd", "P", 1193909190, "tonyd", "P", 1193909328, "tonyd", "P", 1193909389, "tonyd", "E", 1193909541, "tonyd", "P", 1193909553, "tonyd", "P", 1193909661, "tonyd", "P", 1193909668, "tonyd", "P", 1193909887, "tonyd", "P", 1193909931, "tonyd", "P", 1193910136, "tonyd", "P", 1193910980, "tonyd", "P" \})
      </Core:Property>
      <Core:Property property="{author}">
         "Kalle Alm modified by Tony Demetriou"
      </Core:Property>
      <Core:Property property="{email}">
         "azrael@ironclaw.skotos.net kalle@marrach.skotos.net"
      </Core:Property>
      <Core:Property property="{rev}">1</Core:Property>
      <Core:Property property="{sub_rev_stamp}">
         1161177846
      </Core:Property>
      <Core:Property property="{sub_rev}">0</Core:Property>
    </Core:PCProperties>
    <Notes:Notes/>
  </Core:PropertyContainer>
</object>
