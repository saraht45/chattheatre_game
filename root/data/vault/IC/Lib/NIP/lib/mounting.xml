<object clone="/obj/properties" owner="idrocket">
  <Core:PropertyContainer>
    <Ur:UrObject/>
    <Core:PCProperties>
      <Core:Property property="init:merry">
         (\{ "react:jump-dob" \})
      </Core:Property>
      <Core:Property property="init:properties">
         ([ "nip:trait:mounting:rider-gait":"slithers", "nip:trait:mounting:rider-inherits":([ "act-post:enter":"nip:trait:mounting:riderlib", "act:approach":"nip:trait:mounting:riderlib", "act:leave":"nip:trait:mounting:riderlib", "act:lower":"nip:trait:mounting:riderlib", "act:stance":"nip:trait:mounting:riderlib" ]) ])
      </Core:Property>
      <Core:Property property="merry:lib:init">
         X[M] /* 
 
  D=This script is executed once, when an NPC loads the 'mounting' library. 
 
*/ 
 
this."nip:trait:mounting:riderlib" = ::find_nip_object(\$what: "mountrider", \$options: nil);
      </Core:Property>
      <Core:Property property="merry:react:jump-dob">
         X[M] /*

   D=This script deals with mounting an NPC.

*/

if( this."npc:mounted" ) \{ /* Someone is mounting the NPC already... */
  EmitTo( \$actor, "You can't mount "+Describe(this)+" as "+this."base:pronoun"+" is already being mounted." );
  return FALSE;
\}

/* Let's also check if the actor is mounting something currently */
if( \$actor."npc:mounting" ) /* Actor is already mounting something. */
  if( \$actor."npc:mounting" == this ) \{ /* Actor is mounting this NPC already! */
    EmitTo( \$actor, "You are already mounting "+Describe( this )+"!" );
    return FALSE;
  \} else \{ /* Actor is mounting something else. */
    EmitTo( \$actor, "You are already mounting "+Describe( \$actor."npc:mounting" )+"!" );
    return FALSE;
  \}

/* If we get here, the NPC isn't mounted. Let's print some pretty message describing what happens, */

EmitIn( this."base:environment", Describe( \$actor )+" mounts "+Describe( this )+".", \$actor );
EmitTo( \$actor, "You mount "+Describe( this )+"." );

/* ... and put the rider ON the NPC */

\$actor."base:proximity" = this;
\$actor."base:stance" = STANCE_SIT;
\$actor."base:preposition" = PREP_ON;

/*
 * Add adjective "mounted" to the NPC, and remove adjective "unmounted".
 */
Set( this, "details:"+NRefDetail(this)+":adjective:mounted", TRUE );
Set( this, "details:"+NRefDetail(this)+":adjective:unmounted", FALSE );

/* We inherit, as specified in the inherits mapping */
\$inherits = this."nip:trait:mounting:rider-inherits";
\$scripts = map_indices( \$inherits );
for( \$i = 0; \$i \< sizeof( \$scripts ); \$i++ )
  Set( \$actor, "merry:inherit:"+\$scripts[\$i], Get( this, \$inherits[\$scripts[\$i]] ));

/* And we set the 'npc:mounted' property in the NPC to 1 to signal that we're mounted. */
this."npc:mounted" = 1;

/* Let's replace the base:gait in the actor for when we move through rooms. */
\$actor."base:oldgait" = \$actor."base:gait"; /* store old value, just in case */
\$actor."base:gait" = this."nip:trait:mounting:rider-gait"; /* and set our own */

/* And finally, let's set a "npc:mounting" property in the actor (the rider, not the horse) to the horse object reference (this) */
\$actor."npc:mounting" = this;
this."nip:trait:movement:frequency" = 0;
      </Core:Property>
      <Core:Property property="property:map">
         ([ "nip:trait:mounting:rider-gait":3, "nip:trait:mounting:rider-inherits":6 ])
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1156149664, "idrocket", "E", 1156149695, "idrocket", "E", 1156149746, "idrocket", "E", 1156151940, "idrocket", "E", 1156151984, "idrocket", "E", 1156151995, "idrocket", "E", 1156152240, "idrocket", "E", 1156152245, "idrocket", "E", 1156152258, "idrocket", "E" \})
      </Core:Property>
    </Core:PCProperties>
    <Notes:Notes/>
  </Core:PropertyContainer>
</object>
